uint64_t closure #173 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t A_Indices;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v43 = a2;
  v44 = a3;
  v45 = a4;
  v46 = a1;
  A_Indices = type metadata accessor for PgQuery_A_Indices(0);
  v5 = *(void *)(A_Indices - 8);
  v6 = MEMORY[0x1F4188790](A_Indices);
  v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  v13 = *(void *)(v12 - 8);
  v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_A_Indices?);
  v20 = MEMORY[0x1F4188790](v19 - 8);
  v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v41 = A_Indices;
  v24((char *)&v34 - v22, 1, 1, A_Indices);
  v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    v25 = v12;
  }
  else
  {
    v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 172)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Indices?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_A_Indices);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_A_Indices);
      v27 = v41;
      v24(v23, 0, 1, v41);
      v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  v27 = v41;
  v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indices);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Indices?);
  }
  v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_A_Indices?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Indices?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_A_Indices?);
  }
  else
  {
    v31 = v30;
    v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_A_Indices);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Indices?);
    v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_A_Indices);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #174 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t A_Indirection = type metadata accessor for PgQuery_A_Indirection(0);
  uint64_t v5 = *(void *)(A_Indirection - 8);
  uint64_t v6 = MEMORY[0x1F4188790](A_Indirection);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_A_Indirection?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = A_Indirection;
  v24((char *)&v34 - v22, 1, 1, A_Indirection);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 173)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Indirection?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_A_Indirection);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_A_Indirection);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indirection);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Indirection?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_A_Indirection?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Indirection?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_A_Indirection?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_A_Indirection);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Indirection?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_A_Indirection);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #175 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t A_ArrayExpr = type metadata accessor for PgQuery_A_ArrayExpr(0);
  uint64_t v5 = *(void *)(A_ArrayExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](A_ArrayExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = A_ArrayExpr;
  v24((char *)&v34 - v22, 1, 1, A_ArrayExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 174)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_A_ArrayExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_A_ArrayExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_ArrayExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_A_ArrayExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_ArrayExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_A_ArrayExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #176 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t ResTarget = type metadata accessor for PgQuery_ResTarget(0);
  uint64_t v5 = *(void *)(ResTarget - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ResTarget);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ResTarget?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ResTarget;
  v24((char *)&v34 - v22, 1, 1, ResTarget);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 175)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ResTarget?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ResTarget);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ResTarget);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, (void (*)(uint64_t))type metadata accessor for PgQuery_ResTarget);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ResTarget?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ResTarget?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ResTarget?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ResTarget?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ResTarget);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ResTarget?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ResTarget);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #177 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t MultiAssignRef = type metadata accessor for PgQuery_MultiAssignRef(0);
  uint64_t v5 = *(void *)(MultiAssignRef - 8);
  uint64_t v6 = MEMORY[0x1F4188790](MultiAssignRef);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = MultiAssignRef;
  v24((char *)&v34 - v22, 1, 1, MultiAssignRef);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 176)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_MultiAssignRef);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_MultiAssignRef);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, (void (*)(uint64_t))type metadata accessor for PgQuery_MultiAssignRef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_MultiAssignRef);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_MultiAssignRef?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_MultiAssignRef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #178 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t TypeCast = type metadata accessor for PgQuery_TypeCast(0);
  uint64_t v5 = *(void *)(TypeCast - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TypeCast);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeCast?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TypeCast;
  v24((char *)&v34 - v22, 1, 1, TypeCast);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 177)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeCast?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_TypeCast);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_TypeCast);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeCast);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeCast?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_TypeCast?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeCast?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_TypeCast?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_TypeCast);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeCast?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_TypeCast);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #179 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  uint64_t v5 = *(void *)(CollateClause - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CollateClause);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CollateClause?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CollateClause;
  v24((char *)&v34 - v22, 1, 1, CollateClause);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 178)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CollateClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CollateClause);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CollateClause);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CollateClause?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CollateClause);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CollateClause?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CollateClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #180 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t SortBy = type metadata accessor for PgQuery_SortBy(0);
  uint64_t v5 = *(void *)(SortBy - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SortBy);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SortBy?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SortBy;
  v24((char *)&v34 - v22, 1, 1, SortBy);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 179)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SortBy?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_SortBy);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_SortBy);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, (void (*)(uint64_t))type metadata accessor for PgQuery_SortBy);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SortBy?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_SortBy?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SortBy?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_SortBy?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_SortBy);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SortBy?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_SortBy);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #181 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  uint64_t v5 = *(void *)(WindowDef - 8);
  uint64_t v6 = MEMORY[0x1F4188790](WindowDef);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WindowDef?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = WindowDef;
  v24((char *)&v34 - v22, 1, 1, WindowDef);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 180)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WindowDef?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_WindowDef);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_WindowDef);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WindowDef?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_WindowDef);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WindowDef?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_WindowDef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #182 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RangeSubselect = type metadata accessor for PgQuery_RangeSubselect(0);
  uint64_t v5 = *(void *)(RangeSubselect - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RangeSubselect);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeSubselect?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RangeSubselect;
  v24((char *)&v34 - v22, 1, 1, RangeSubselect);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 181)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeSubselect?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RangeSubselect);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RangeSubselect);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeSubselect);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeSubselect?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RangeSubselect?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeSubselect?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RangeSubselect?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RangeSubselect);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeSubselect?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RangeSubselect);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #183 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
  uint64_t v5 = *(void *)(RangeFunction - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RangeFunction);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeFunction?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RangeFunction;
  v24((char *)&v34 - v22, 1, 1, RangeFunction);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 182)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeFunction?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RangeFunction);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RangeFunction);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeFunction);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeFunction?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RangeFunction?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeFunction?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RangeFunction?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RangeFunction);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeFunction?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RangeFunction);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #184 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
  uint64_t v5 = *(void *)(RangeTableSample - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RangeTableSample);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeTableSample?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RangeTableSample;
  v24((char *)&v34 - v22, 1, 1, RangeTableSample);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 183)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTableSample?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RangeTableSample);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RangeTableSample);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableSample);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTableSample?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RangeTableSample?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTableSample?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RangeTableSample?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RangeTableSample);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTableSample?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RangeTableSample);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #185 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RangeTableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
  uint64_t v5 = *(void *)(RangeTableFunc - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RangeTableFunc);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RangeTableFunc;
  v24((char *)&v34 - v22, 1, 1, RangeTableFunc);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 184)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RangeTableFunc);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RangeTableFunc);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFunc);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RangeTableFunc);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTableFunc?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RangeTableFunc);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #186 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RangeTableFuncCol = type metadata accessor for PgQuery_RangeTableFuncCol(0);
  uint64_t v5 = *(void *)(RangeTableFuncCol - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RangeTableFuncCol);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RangeTableFuncCol;
  v24((char *)&v34 - v22, 1, 1, RangeTableFuncCol);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 185)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RangeTableFuncCol);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RangeTableFuncCol);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFuncCol);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RangeTableFuncCol);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTableFuncCol?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RangeTableFuncCol);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #187 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v5 = *(void *)(TypeName - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TypeName);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TypeName;
  v24((char *)&v34 - v22, 1, 1, TypeName);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 186)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_TypeName);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_TypeName);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_TypeName);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_TypeName);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #188 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t ColumnDef = type metadata accessor for PgQuery_ColumnDef(0);
  uint64_t v5 = *(void *)(ColumnDef - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ColumnDef);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ColumnDef?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ColumnDef;
  v24((char *)&v34 - v22, 1, 1, ColumnDef);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 187)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ColumnDef?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ColumnDef);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ColumnDef);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnDef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ColumnDef?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ColumnDef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ColumnDef?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ColumnDef?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ColumnDef);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ColumnDef?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ColumnDef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #189 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t IndexElem = type metadata accessor for PgQuery_IndexElem(0);
  uint64_t v5 = *(void *)(IndexElem - 8);
  uint64_t v6 = MEMORY[0x1F4188790](IndexElem);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IndexElem?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = IndexElem;
  v24((char *)&v34 - v22, 1, 1, IndexElem);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 188)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IndexElem?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_IndexElem);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_IndexElem);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexElem);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IndexElem?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_IndexElem?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IndexElem?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_IndexElem?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_IndexElem);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IndexElem?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_IndexElem);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #190 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t Constraint = type metadata accessor for PgQuery_Constraint(0);
  uint64_t v5 = *(void *)(Constraint - 8);
  uint64_t v6 = MEMORY[0x1F4188790](Constraint);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Constraint?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = Constraint;
  v24((char *)&v34 - v22, 1, 1, Constraint);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 189)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Constraint?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_Constraint);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_Constraint);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, (void (*)(uint64_t))type metadata accessor for PgQuery_Constraint);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Constraint?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_Constraint?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Constraint?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Constraint?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_Constraint);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Constraint?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_Constraint);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #191 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t DefElem = type metadata accessor for PgQuery_DefElem(0);
  uint64_t v5 = *(void *)(DefElem - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DefElem);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DefElem?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DefElem;
  v24((char *)&v34 - v22, 1, 1, DefElem);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 190)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DefElem?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DefElem);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DefElem);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, (void (*)(uint64_t))type metadata accessor for PgQuery_DefElem);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DefElem?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DefElem?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DefElem?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DefElem?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DefElem);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DefElem?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DefElem);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #192 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RangeTblEntry = type metadata accessor for PgQuery_RangeTblEntry(0);
  uint64_t v5 = *(void *)(RangeTblEntry - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RangeTblEntry);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RangeTblEntry;
  v24((char *)&v34 - v22, 1, 1, RangeTblEntry);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 191)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RangeTblEntry);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RangeTblEntry);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblEntry);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RangeTblEntry);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTblEntry?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RangeTblEntry);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #193 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
  uint64_t v5 = *(void *)(RangeTblFunction - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RangeTblFunction);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RangeTblFunction;
  v24((char *)&v34 - v22, 1, 1, RangeTblFunction);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 192)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RangeTblFunction);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RangeTblFunction);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblFunction);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RangeTblFunction);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTblFunction?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RangeTblFunction);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #194 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  uint64_t v5 = *(void *)(TableSampleClause - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TableSampleClause);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TableSampleClause;
  v24((char *)&v34 - v22, 1, 1, TableSampleClause);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 193)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_TableSampleClause);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_TableSampleClause);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_TableSampleClause);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_TableSampleClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #195 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for PgQuery_WithCheckOption(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithCheckOption?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 194)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WithCheckOption?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_WithCheckOption);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_WithCheckOption);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, (void (*)(uint64_t))type metadata accessor for PgQuery_WithCheckOption);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WithCheckOption?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_WithCheckOption?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WithCheckOption?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_WithCheckOption?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_WithCheckOption);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WithCheckOption?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_WithCheckOption);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #196 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t SortGroupClause = type metadata accessor for PgQuery_SortGroupClause(0);
  uint64_t v5 = *(void *)(SortGroupClause - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SortGroupClause);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SortGroupClause?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SortGroupClause;
  v24((char *)&v34 - v22, 1, 1, SortGroupClause);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 195)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SortGroupClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_SortGroupClause);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_SortGroupClause);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, (void (*)(uint64_t))type metadata accessor for PgQuery_SortGroupClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SortGroupClause?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_SortGroupClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SortGroupClause?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_SortGroupClause?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_SortGroupClause);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SortGroupClause?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_SortGroupClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #197 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t GroupingSet = type metadata accessor for PgQuery_GroupingSet(0);
  uint64_t v5 = *(void *)(GroupingSet - 8);
  uint64_t v6 = MEMORY[0x1F4188790](GroupingSet);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GroupingSet?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = GroupingSet;
  v24((char *)&v34 - v22, 1, 1, GroupingSet);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 196)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GroupingSet?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_GroupingSet);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_GroupingSet);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingSet);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GroupingSet?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_GroupingSet?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GroupingSet?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_GroupingSet?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_GroupingSet);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GroupingSet?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_GroupingSet);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #198 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t WindowClause = type metadata accessor for PgQuery_WindowClause(0);
  uint64_t v5 = *(void *)(WindowClause - 8);
  uint64_t v6 = MEMORY[0x1F4188790](WindowClause);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WindowClause?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = WindowClause;
  v24((char *)&v34 - v22, 1, 1, WindowClause);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 197)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WindowClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_WindowClause);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_WindowClause);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WindowClause?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_WindowClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WindowClause?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_WindowClause?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_WindowClause);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WindowClause?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_WindowClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #199 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v5 = *(void *)(ObjectWithArgs - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ObjectWithArgs);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ObjectWithArgs;
  v24((char *)&v34 - v22, 1, 1, ObjectWithArgs);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 198)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ObjectWithArgs);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ObjectWithArgs);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ObjectWithArgs);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ObjectWithArgs);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #200 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t AccessPriv = type metadata accessor for PgQuery_AccessPriv(0);
  uint64_t v5 = *(void *)(AccessPriv - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AccessPriv);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AccessPriv?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AccessPriv;
  v24((char *)&v34 - v22, 1, 1, AccessPriv);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 199)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AccessPriv?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AccessPriv);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AccessPriv);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, (void (*)(uint64_t))type metadata accessor for PgQuery_AccessPriv);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AccessPriv?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AccessPriv?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AccessPriv?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AccessPriv?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AccessPriv);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AccessPriv?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AccessPriv);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #201 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
  uint64_t v5 = *(void *)(OpClassItem - 8);
  uint64_t v6 = MEMORY[0x1F4188790](OpClassItem);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = OpClassItem;
  v24((char *)&v34 - v22, 1, 1, OpClassItem);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 200)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateOpClassItem);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateOpClassItem);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassItem);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateOpClassItem);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateOpClassItem?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateOpClassItem);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #202 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
  uint64_t v5 = *(void *)(TableLikeClause - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TableLikeClause);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableLikeClause?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TableLikeClause;
  v24((char *)&v34 - v22, 1, 1, TableLikeClause);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 201)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TableLikeClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_TableLikeClause);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_TableLikeClause);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableLikeClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TableLikeClause?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_TableLikeClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TableLikeClause?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_TableLikeClause?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_TableLikeClause);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TableLikeClause?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_TableLikeClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #203 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
  uint64_t v5 = *(void *)(FunctionParameter - 8);
  uint64_t v6 = MEMORY[0x1F4188790](FunctionParameter);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FunctionParameter?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = FunctionParameter;
  v24((char *)&v34 - v22, 1, 1, FunctionParameter);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 202)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FunctionParameter?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_FunctionParameter);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_FunctionParameter);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, (void (*)(uint64_t))type metadata accessor for PgQuery_FunctionParameter);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FunctionParameter?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_FunctionParameter?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FunctionParameter?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_FunctionParameter?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_FunctionParameter);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FunctionParameter?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_FunctionParameter);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #204 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t LockingClause = type metadata accessor for PgQuery_LockingClause(0);
  uint64_t v5 = *(void *)(LockingClause - 8);
  uint64_t v6 = MEMORY[0x1F4188790](LockingClause);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_LockingClause?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = LockingClause;
  v24((char *)&v34 - v22, 1, 1, LockingClause);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 203)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_LockingClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_LockingClause);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_LockingClause);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, (void (*)(uint64_t))type metadata accessor for PgQuery_LockingClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_LockingClause?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_LockingClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_LockingClause?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_LockingClause?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_LockingClause);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_LockingClause?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_LockingClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #205 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RowMarkClause = type metadata accessor for PgQuery_RowMarkClause(0);
  uint64_t v5 = *(void *)(RowMarkClause - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RowMarkClause);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RowMarkClause?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RowMarkClause;
  v24((char *)&v34 - v22, 1, 1, RowMarkClause);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 204)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RowMarkClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RowMarkClause);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RowMarkClause);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, (void (*)(uint64_t))type metadata accessor for PgQuery_RowMarkClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RowMarkClause?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RowMarkClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RowMarkClause?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RowMarkClause?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RowMarkClause);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RowMarkClause?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RowMarkClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #206 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t XmlSerialize = type metadata accessor for PgQuery_XmlSerialize(0);
  uint64_t v5 = *(void *)(XmlSerialize - 8);
  uint64_t v6 = MEMORY[0x1F4188790](XmlSerialize);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_XmlSerialize?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = XmlSerialize;
  v24((char *)&v34 - v22, 1, 1, XmlSerialize);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 205)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_XmlSerialize?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_XmlSerialize);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_XmlSerialize);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlSerialize);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_XmlSerialize?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_XmlSerialize?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_XmlSerialize?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_XmlSerialize?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_XmlSerialize);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_XmlSerialize?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_XmlSerialize);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #207 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for PgQuery_WithClause(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 206)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WithClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_WithClause);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_WithClause);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WithClause?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WithClause?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_WithClause?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_WithClause);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WithClause?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_WithClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #208 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t InferClause = type metadata accessor for PgQuery_InferClause(0);
  uint64_t v5 = *(void *)(InferClause - 8);
  uint64_t v6 = MEMORY[0x1F4188790](InferClause);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_InferClause?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = InferClause;
  v24((char *)&v34 - v22, 1, 1, InferClause);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 207)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InferClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_InferClause);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_InferClause);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InferClause?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_InferClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InferClause?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_InferClause?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_InferClause);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InferClause?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_InferClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #209 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for PgQuery_OnConflictClause(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 208)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_OnConflictClause);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_OnConflictClause);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_OnConflictClause);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_OnConflictClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #210 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
  uint64_t v5 = *(void *)(CommonTableExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CommonTableExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CommonTableExpr;
  v24((char *)&v34 - v22, 1, 1, CommonTableExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 209)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CommonTableExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CommonTableExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CommonTableExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CommonTableExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CommonTableExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CommonTableExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #211 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v5 = *(void *)(RoleSpec - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RoleSpec);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RoleSpec;
  v24((char *)&v34 - v22, 1, 1, RoleSpec);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 210)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RoleSpec);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RoleSpec);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RoleSpec);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RoleSpec);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #212 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t TriggerTransition = type metadata accessor for PgQuery_TriggerTransition(0);
  uint64_t v5 = *(void *)(TriggerTransition - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TriggerTransition);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TriggerTransition?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TriggerTransition;
  v24((char *)&v34 - v22, 1, 1, TriggerTransition);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 211)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TriggerTransition?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_TriggerTransition);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_TriggerTransition);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, (void (*)(uint64_t))type metadata accessor for PgQuery_TriggerTransition);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TriggerTransition?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_TriggerTransition?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TriggerTransition?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_TriggerTransition?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_TriggerTransition);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TriggerTransition?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_TriggerTransition);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #213 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
  uint64_t v5 = *(void *)(PartitionElem - 8);
  uint64_t v6 = MEMORY[0x1F4188790](PartitionElem);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionElem?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = PartitionElem;
  v24((char *)&v34 - v22, 1, 1, PartitionElem);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 212)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionElem?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_PartitionElem);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_PartitionElem);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionElem);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionElem?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_PartitionElem?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionElem?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_PartitionElem?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_PartitionElem);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionElem?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_PartitionElem);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #214 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  uint64_t v5 = *(void *)(PartitionSpec - 8);
  uint64_t v6 = MEMORY[0x1F4188790](PartitionSpec);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = PartitionSpec;
  v24((char *)&v34 - v22, 1, 1, PartitionSpec);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 213)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_PartitionSpec);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_PartitionSpec);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_PartitionSpec);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_PartitionSpec);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #215 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  uint64_t v5 = *(void *)(PartitionBoundSpec - 8);
  uint64_t v6 = MEMORY[0x1F4188790](PartitionBoundSpec);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = PartitionBoundSpec;
  v24((char *)&v34 - v22, 1, 1, PartitionBoundSpec);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 214)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_PartitionBoundSpec);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_PartitionBoundSpec);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_PartitionBoundSpec);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_PartitionBoundSpec);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #216 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
  uint64_t v5 = *(void *)(PartitionRangeDatum - 8);
  uint64_t v6 = MEMORY[0x1F4188790](PartitionRangeDatum);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = PartitionRangeDatum;
  v24((char *)&v34 - v22, 1, 1, PartitionRangeDatum);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 215)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_PartitionRangeDatum);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_PartitionRangeDatum);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionRangeDatum);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_PartitionRangeDatum);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionRangeDatum?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_PartitionRangeDatum);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #217 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
  uint64_t v5 = *(void *)(PartitionCmd - 8);
  uint64_t v6 = MEMORY[0x1F4188790](PartitionCmd);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionCmd?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = PartitionCmd;
  v24((char *)&v34 - v22, 1, 1, PartitionCmd);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 216)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionCmd?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_PartitionCmd);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_PartitionCmd);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionCmd);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionCmd?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_PartitionCmd?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionCmd?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_PartitionCmd?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_PartitionCmd);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PartitionCmd?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_PartitionCmd);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #218 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
  uint64_t v5 = *(void *)(VacuumRelation - 8);
  uint64_t v6 = MEMORY[0x1F4188790](VacuumRelation);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VacuumRelation?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = VacuumRelation;
  v24((char *)&v34 - v22, 1, 1, VacuumRelation);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 217)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VacuumRelation?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_VacuumRelation);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_VacuumRelation);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumRelation);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VacuumRelation?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_VacuumRelation?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VacuumRelation?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_VacuumRelation?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_VacuumRelation);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VacuumRelation?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_VacuumRelation);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #219 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t InlineCodeBlock = type metadata accessor for PgQuery_InlineCodeBlock(0);
  uint64_t v5 = *(void *)(InlineCodeBlock - 8);
  uint64_t v6 = MEMORY[0x1F4188790](InlineCodeBlock);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = InlineCodeBlock;
  v24((char *)&v34 - v22, 1, 1, InlineCodeBlock);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 218)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_InlineCodeBlock);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_InlineCodeBlock);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, (void (*)(uint64_t))type metadata accessor for PgQuery_InlineCodeBlock);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_InlineCodeBlock);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InlineCodeBlock?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_InlineCodeBlock);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #220 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for PgQuery_CallContext(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CallContext?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 219)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CallContext?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CallContext);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CallContext);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, (void (*)(uint64_t))type metadata accessor for PgQuery_CallContext);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CallContext?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CallContext?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CallContext?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CallContext?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CallContext);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CallContext?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CallContext);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #221 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t Integer = type metadata accessor for PgQuery_Integer(0);
  uint64_t v5 = *(void *)(Integer - 8);
  uint64_t v6 = MEMORY[0x1F4188790](Integer);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Integer?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = Integer;
  v24((char *)&v34 - v22, 1, 1, Integer);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 220)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Integer?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_Integer);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_Integer);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, (void (*)(uint64_t))type metadata accessor for PgQuery_Integer);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Integer?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_Integer?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Integer?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Integer?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_Integer);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Integer?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_Integer);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #222 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t Float = type metadata accessor for PgQuery_Float(0);
  uint64_t v5 = *(void *)(Float - 8);
  uint64_t v6 = MEMORY[0x1F4188790](Float);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Float?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = Float;
  v24((char *)&v34 - v22, 1, 1, Float);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 221)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Float?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_Float);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_Float);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, (void (*)(uint64_t))type metadata accessor for PgQuery_Float);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Float?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_Float?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Float?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Float?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_Float);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Float?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_Float);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #223 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t String = type metadata accessor for PgQuery_String(0);
  uint64_t v5 = *(void *)(String - 8);
  uint64_t v6 = MEMORY[0x1F4188790](String);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_String?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = String;
  v24((char *)&v34 - v22, 1, 1, String);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 222)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_String?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_String);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_String);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, (void (*)(uint64_t))type metadata accessor for PgQuery_String);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_String?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_String?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_String?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_String?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_String);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_String?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_String);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #224 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Bituint64_t String = type metadata accessor for PgQuery_BitString(0);
  uint64_t v5 = *(void *)(BitString - 8);
  uint64_t v6 = MEMORY[0x1F4188790](BitString);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_BitString?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = BitString;
  v24((char *)&v34 - v22, 1, 1, BitString);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 223)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_BitString?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_BitString);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_BitString);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, (void (*)(uint64_t))type metadata accessor for PgQuery_BitString);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_BitString?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_BitString?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_BitString?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_BitString?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_BitString);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_BitString?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_BitString);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #225 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t Null = type metadata accessor for PgQuery_Null(0);
  uint64_t v5 = *(void *)(Null - 8);
  uint64_t v6 = MEMORY[0x1F4188790](Null);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Null?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = Null;
  v24((char *)&v34 - v22, 1, 1, Null);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 224)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Null?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_Null);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_Null);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, (void (*)(uint64_t))type metadata accessor for PgQuery_Null);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Null?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_Null?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Null?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Null?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_Null);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Null?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_Null);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #226 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t List = type metadata accessor for PgQuery_List(0);
  uint64_t v5 = *(void *)(List - 8);
  uint64_t v6 = MEMORY[0x1F4188790](List);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_List?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = List;
  v24((char *)&v34 - v22, 1, 1, List);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 225)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_List?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_List);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_List);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, (void (*)(uint64_t))type metadata accessor for PgQuery_List);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_List?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_List?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_List?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_List?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_List);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_List?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_List);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #227 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Intuint64_t List = type metadata accessor for PgQuery_IntList(0);
  uint64_t v5 = *(void *)(IntList - 8);
  uint64_t v6 = MEMORY[0x1F4188790](IntList);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IntList?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = IntList;
  v24((char *)&v34 - v22, 1, 1, IntList);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 226)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IntList?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_IntList);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_IntList);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, (void (*)(uint64_t))type metadata accessor for PgQuery_IntList);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IntList?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_IntList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IntList?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_IntList?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_IntList);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IntList?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_IntList);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #228 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Oiduint64_t List = type metadata accessor for PgQuery_OidList(0);
  uint64_t v5 = *(void *)(OidList - 8);
  uint64_t v6 = MEMORY[0x1F4188790](OidList);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OidList?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = OidList;
  v24((char *)&v34 - v22, 1, 1, OidList);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 227)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OidList?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_OidList);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_OidList);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, (void (*)(uint64_t))type metadata accessor for PgQuery_OidList);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OidList?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_OidList?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OidList?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_OidList?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_OidList);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OidList?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_OidList);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t PgQuery_Node.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_Node, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Node.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v5 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (result != 1)
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        closure #2 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 2u:
        closure #3 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 3u:
        closure #4 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 4u:
        closure #5 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 5u:
        closure #6 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 6u:
        closure #7 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 7u:
        closure #8 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 8u:
        closure #9 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 9u:
        closure #10 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xAu:
        closure #11 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xBu:
        closure #12 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xCu:
        closure #13 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xDu:
        closure #14 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xEu:
        closure #15 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xFu:
        closure #16 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x10u:
        closure #17 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x11u:
        closure #18 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x12u:
        closure #19 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x13u:
        closure #20 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x14u:
        closure #21 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x15u:
        closure #22 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x16u:
        closure #23 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x17u:
        closure #24 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x18u:
        closure #25 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x19u:
        closure #26 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x1Au:
        closure #27 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x1Bu:
        closure #28 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x1Cu:
        closure #29 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x1Du:
        closure #30 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x1Eu:
        closure #31 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x1Fu:
        closure #32 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x20u:
        closure #33 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x21u:
        closure #34 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x22u:
        closure #35 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x23u:
        closure #36 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x24u:
        closure #37 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x25u:
        closure #38 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x26u:
        closure #39 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x27u:
        closure #40 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x28u:
        closure #41 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x29u:
        closure #42 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x2Au:
        closure #43 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x2Bu:
        closure #44 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x2Cu:
        closure #45 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x2Du:
        closure #46 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x2Eu:
        closure #47 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x2Fu:
        closure #48 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x30u:
        closure #49 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x31u:
        closure #50 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x32u:
        closure #51 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x33u:
        closure #52 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x34u:
        closure #53 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x35u:
        closure #54 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x36u:
        closure #55 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x37u:
        closure #56 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x38u:
        closure #57 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x39u:
        closure #58 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x3Au:
        closure #59 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x3Bu:
        closure #60 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x3Cu:
        closure #61 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x3Du:
        closure #62 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x3Eu:
        closure #63 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x3Fu:
        closure #64 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x40u:
        closure #65 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x41u:
        closure #66 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x42u:
        closure #67 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x43u:
        closure #68 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x44u:
        closure #69 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x45u:
        closure #70 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x46u:
        closure #71 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x47u:
        closure #72 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x48u:
        closure #73 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x49u:
        closure #74 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x4Au:
        closure #75 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x4Bu:
        closure #76 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x4Cu:
        closure #77 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x4Du:
        closure #78 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x4Eu:
        closure #79 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x4Fu:
        closure #80 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x50u:
        closure #81 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x51u:
        closure #82 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x52u:
        closure #83 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x53u:
        closure #84 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x54u:
        closure #85 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x55u:
        closure #86 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x56u:
        closure #87 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x57u:
        closure #88 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x58u:
        closure #89 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x59u:
        closure #90 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x5Au:
        closure #91 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x5Bu:
        closure #92 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x5Cu:
        closure #93 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x5Du:
        closure #94 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x5Eu:
        closure #95 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x5Fu:
        closure #96 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x60u:
        closure #97 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x61u:
        closure #98 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x62u:
        closure #99 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x63u:
        closure #100 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x64u:
        closure #101 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x65u:
        closure #102 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x66u:
        closure #103 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x67u:
        closure #104 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x68u:
        closure #105 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x69u:
        closure #106 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x6Au:
        closure #107 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x6Bu:
        closure #108 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x6Cu:
        closure #109 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x6Du:
        closure #110 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x6Eu:
        closure #111 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x6Fu:
        closure #112 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x70u:
        closure #113 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x71u:
        closure #114 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x72u:
        closure #115 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x73u:
        closure #116 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x74u:
        closure #117 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x75u:
        closure #118 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x76u:
        closure #119 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x77u:
        closure #120 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x78u:
        closure #121 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x79u:
        closure #122 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x7Au:
        closure #123 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x7Bu:
        closure #124 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x7Cu:
        closure #125 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x7Du:
        closure #126 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x7Eu:
        closure #127 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x7Fu:
        closure #128 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x80u:
        closure #129 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x81u:
        closure #130 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x82u:
        closure #131 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x83u:
        closure #132 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x84u:
        closure #133 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x85u:
        closure #134 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x86u:
        closure #135 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x87u:
        closure #136 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x88u:
        closure #137 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x89u:
        closure #138 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x8Au:
        closure #139 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x8Bu:
        closure #140 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x8Cu:
        closure #141 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x8Du:
        closure #142 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x8Eu:
        closure #143 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x8Fu:
        closure #144 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x90u:
        closure #145 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x91u:
        closure #146 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x92u:
        closure #147 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x93u:
        closure #148 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x94u:
        closure #149 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x95u:
        closure #150 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x96u:
        closure #151 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x97u:
        closure #152 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x98u:
        closure #153 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x99u:
        closure #154 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x9Au:
        closure #155 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x9Bu:
        closure #156 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x9Cu:
        closure #157 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x9Du:
        closure #158 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x9Eu:
        closure #159 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0x9Fu:
        closure #160 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xA0u:
        closure #161 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xA1u:
        closure #162 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xA2u:
        closure #163 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xA3u:
        closure #164 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xA4u:
        closure #165 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xA5u:
        closure #166 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xA6u:
        closure #167 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xA7u:
        closure #168 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xA8u:
        closure #169 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xA9u:
        closure #170 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xAAu:
        closure #171 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xABu:
        closure #172 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xACu:
        closure #173 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xADu:
        closure #174 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xAEu:
        closure #175 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xAFu:
        closure #176 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xB0u:
        closure #177 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xB1u:
        closure #178 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xB2u:
        closure #179 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xB3u:
        closure #180 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xB4u:
        closure #181 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xB5u:
        closure #182 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xB6u:
        closure #183 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xB7u:
        closure #184 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xB8u:
        closure #185 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xB9u:
        closure #186 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xBAu:
        closure #187 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xBBu:
        closure #188 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xBCu:
        closure #189 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xBDu:
        closure #190 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xBEu:
        closure #191 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xBFu:
        closure #192 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xC0u:
        closure #193 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xC1u:
        closure #194 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xC2u:
        closure #195 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xC3u:
        closure #196 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xC4u:
        closure #197 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xC5u:
        closure #198 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xC6u:
        closure #199 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xC7u:
        closure #200 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xC8u:
        closure #201 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xC9u:
        closure #202 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xCAu:
        closure #203 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xCBu:
        closure #204 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xCCu:
        closure #205 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xCDu:
        closure #206 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xCEu:
        closure #207 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xCFu:
        closure #208 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xD0u:
        closure #209 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xD1u:
        closure #210 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xD2u:
        closure #211 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xD3u:
        closure #212 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xD4u:
        closure #213 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xD5u:
        closure #214 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xD6u:
        closure #215 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xD7u:
        closure #216 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xD8u:
        closure #217 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xD9u:
        closure #218 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xDAu:
        closure #219 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xDBu:
        closure #220 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xDCu:
        closure #221 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xDDu:
        closure #222 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xDEu:
        closure #223 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xDFu:
        closure #224 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xE0u:
        closure #225 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xE1u:
        closure #226 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xE2u:
        closure #227 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      case 0xE3u:
        closure #228 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
      default:
        closure #1 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(a1);
        break;
    }
    return outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  return result;
}

uint64_t closure #1 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  MEMORY[0x1F4188790](Alias);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (!swift_getEnumCaseMultiPayload())
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Alias);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Alias);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #2 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeVar);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #3 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  MEMORY[0x1F4188790](TableFunc);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 2)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TableFunc);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TableFunc);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #4 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Expr = type metadata accessor for PgQuery_Expr(0);
  MEMORY[0x1F4188790](Expr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 3)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Expr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_Expr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Expr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #5 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Var = type metadata accessor for PgQuery_Var(0);
  MEMORY[0x1F4188790](Var);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 4)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Var);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, (void (*)(uint64_t))type metadata accessor for PgQuery_Var);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Var);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #6 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Param = type metadata accessor for PgQuery_Param(0);
  MEMORY[0x1F4188790](Param);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 5)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Param);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, (void (*)(uint64_t))type metadata accessor for PgQuery_Param);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Param);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #7 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Aggref = type metadata accessor for PgQuery_Aggref(0);
  MEMORY[0x1F4188790](Aggref);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 6)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Aggref);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, (void (*)(uint64_t))type metadata accessor for PgQuery_Aggref);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Aggref);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #8 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
  MEMORY[0x1F4188790](GroupingFunc);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 7)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_GroupingFunc);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingFunc);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_GroupingFunc);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #9 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WindowFunc = type metadata accessor for PgQuery_WindowFunc(0);
  MEMORY[0x1F4188790](WindowFunc);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 8)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_WindowFunc);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowFunc);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_WindowFunc);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #10 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
  MEMORY[0x1F4188790](SubscriptingRef);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 9)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SubscriptingRef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, (void (*)(uint64_t))type metadata accessor for PgQuery_SubscriptingRef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SubscriptingRef);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #11 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Funcuint64_t Expr = type metadata accessor for PgQuery_FuncExpr(0);
  MEMORY[0x1F4188790](FuncExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 10)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FuncExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FuncExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #12 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  NamedArguint64_t Expr = type metadata accessor for PgQuery_NamedArgExpr(0);
  MEMORY[0x1F4188790](NamedArgExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 11)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_NamedArgExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NamedArgExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_NamedArgExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #13 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Opuint64_t Expr = type metadata accessor for PgQuery_OpExpr(0);
  MEMORY[0x1F4188790](OpExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 12)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_OpExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OpExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_OpExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #14 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Distinctuint64_t Expr = type metadata accessor for PgQuery_DistinctExpr(0);
  MEMORY[0x1F4188790](DistinctExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 13)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DistinctExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_DistinctExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DistinctExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #15 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  NullIfuint64_t Expr = type metadata accessor for PgQuery_NullIfExpr(0);
  MEMORY[0x1F4188790](NullIfExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 14)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_NullIfExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NullIfExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_NullIfExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #16 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ScalarArrayOpuint64_t Expr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
  MEMORY[0x1F4188790](ScalarArrayOpExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 15)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ScalarArrayOpExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ScalarArrayOpExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ScalarArrayOpExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #17 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Booluint64_t Expr = type metadata accessor for PgQuery_BoolExpr(0);
  MEMORY[0x1F4188790](BoolExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 16)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_BoolExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_BoolExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_BoolExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #18 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SubLink = type metadata accessor for PgQuery_SubLink(0);
  MEMORY[0x1F4188790](SubLink);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 17)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SubLink);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, (void (*)(uint64_t))type metadata accessor for PgQuery_SubLink);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SubLink);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #19 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SubPlan = type metadata accessor for PgQuery_SubPlan(0);
  MEMORY[0x1F4188790](SubPlan);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 18)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SubPlan);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_SubPlan);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SubPlan);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #20 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Alternativeuint64_t SubPlan = type metadata accessor for PgQuery_AlternativeSubPlan(0);
  MEMORY[0x1F4188790](AlternativeSubPlan);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 19)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlternativeSubPlan);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_AlternativeSubPlan);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlternativeSubPlan);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #21 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t FieldSelect = type metadata accessor for PgQuery_FieldSelect(0);
  MEMORY[0x1F4188790](FieldSelect);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 20)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FieldSelect);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldSelect);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FieldSelect);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #22 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t FieldStore = type metadata accessor for PgQuery_FieldStore(0);
  MEMORY[0x1F4188790](FieldStore);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 21)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FieldStore);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldStore);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FieldStore);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #23 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RelabelType = type metadata accessor for PgQuery_RelabelType(0);
  MEMORY[0x1F4188790](RelabelType);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 22)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RelabelType);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, (void (*)(uint64_t))type metadata accessor for PgQuery_RelabelType);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RelabelType);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #24 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CoerceViaIO = type metadata accessor for PgQuery_CoerceViaIO(0);
  MEMORY[0x1F4188790](CoerceViaIO);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 23)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CoerceViaIO);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceViaIO);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CoerceViaIO);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #25 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ArrayCoerceuint64_t Expr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
  MEMORY[0x1F4188790](ArrayCoerceExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 24)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ArrayCoerceExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayCoerceExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ArrayCoerceExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #26 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConvertRowtypeuint64_t Expr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
  MEMORY[0x1F4188790](ConvertRowtypeExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 25)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ConvertRowtypeExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ConvertRowtypeExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ConvertRowtypeExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #27 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Collateuint64_t Expr = type metadata accessor for PgQuery_CollateExpr(0);
  MEMORY[0x1F4188790](CollateExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 26)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CollateExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CollateExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #28 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Caseuint64_t Expr = type metadata accessor for PgQuery_CaseExpr(0);
  MEMORY[0x1F4188790](CaseExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 27)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CaseExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CaseExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #29 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CaseWhen = type metadata accessor for PgQuery_CaseWhen(0);
  MEMORY[0x1F4188790](CaseWhen);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 28)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CaseWhen);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseWhen);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CaseWhen);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #30 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CaseTestuint64_t Expr = type metadata accessor for PgQuery_CaseTestExpr(0);
  MEMORY[0x1F4188790](CaseTestExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 29)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CaseTestExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseTestExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CaseTestExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #31 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Arrayuint64_t Expr = type metadata accessor for PgQuery_ArrayExpr(0);
  MEMORY[0x1F4188790](ArrayExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 30)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ArrayExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ArrayExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #32 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Rowuint64_t Expr = type metadata accessor for PgQuery_RowExpr(0);
  MEMORY[0x1F4188790](RowExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 31)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RowExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RowExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #33 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RowCompareuint64_t Expr = type metadata accessor for PgQuery_RowCompareExpr(0);
  MEMORY[0x1F4188790](RowCompareExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 32)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RowCompareExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowCompareExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RowCompareExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #34 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Coalesceuint64_t Expr = type metadata accessor for PgQuery_CoalesceExpr(0);
  MEMORY[0x1F4188790](CoalesceExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 33)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CoalesceExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CoalesceExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CoalesceExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #35 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MinMaxuint64_t Expr = type metadata accessor for PgQuery_MinMaxExpr(0);
  MEMORY[0x1F4188790](MinMaxExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 34)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_MinMaxExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_MinMaxExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_MinMaxExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #36 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
  MEMORY[0x1F4188790](SQLValueFunction);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 35)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SQLValueFunction);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_SQLValueFunction);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SQLValueFunction);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #37 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Xmluint64_t Expr = type metadata accessor for PgQuery_XmlExpr(0);
  MEMORY[0x1F4188790](XmlExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 36)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_XmlExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_XmlExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #38 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t NullTest = type metadata accessor for PgQuery_NullTest(0);
  MEMORY[0x1F4188790](NullTest);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 37)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_NullTest);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, (void (*)(uint64_t))type metadata accessor for PgQuery_NullTest);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_NullTest);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #39 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
  MEMORY[0x1F4188790](BooleanTest);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 38)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_BooleanTest);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, (void (*)(uint64_t))type metadata accessor for PgQuery_BooleanTest);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_BooleanTest);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #40 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CoerceToDomain = type metadata accessor for PgQuery_CoerceToDomain(0);
  MEMORY[0x1F4188790](CoerceToDomain);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 39)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CoerceToDomain);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomain);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CoerceToDomain);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #41 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CoerceToDomainValue = type metadata accessor for PgQuery_CoerceToDomainValue(0);
  MEMORY[0x1F4188790](CoerceToDomainValue);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 40)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CoerceToDomainValue);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomainValue);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CoerceToDomainValue);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #42 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SetToDefault = type metadata accessor for PgQuery_SetToDefault(0);
  MEMORY[0x1F4188790](SetToDefault);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 41)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SetToDefault);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, (void (*)(uint64_t))type metadata accessor for PgQuery_SetToDefault);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SetToDefault);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #43 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CurrentOfuint64_t Expr = type metadata accessor for PgQuery_CurrentOfExpr(0);
  MEMORY[0x1F4188790](CurrentOfExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 42)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CurrentOfExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CurrentOfExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CurrentOfExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #44 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  NextValueuint64_t Expr = type metadata accessor for PgQuery_NextValueExpr(0);
  MEMORY[0x1F4188790](NextValueExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 43)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_NextValueExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NextValueExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_NextValueExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #45 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t InferenceElem = type metadata accessor for PgQuery_InferenceElem(0);
  MEMORY[0x1F4188790](InferenceElem);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 44)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_InferenceElem);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, (void (*)(uint64_t))type metadata accessor for PgQuery_InferenceElem);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_InferenceElem);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #46 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TargetEntry = type metadata accessor for PgQuery_TargetEntry(0);
  MEMORY[0x1F4188790](TargetEntry);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 45)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TargetEntry);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_TargetEntry);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TargetEntry);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #47 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeTblRef = type metadata accessor for PgQuery_RangeTblRef(0);
  MEMORY[0x1F4188790](RangeTblRef);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 46)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeTblRef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblRef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeTblRef);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #48 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Joinuint64_t Expr = type metadata accessor for PgQuery_JoinExpr(0);
  MEMORY[0x1F4188790](JoinExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 47)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_JoinExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_JoinExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_JoinExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #49 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PgQuery_FromExpr(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 48)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FromExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FromExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #50 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PgQuery_OnConflictExpr(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 49)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_OnConflictExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_OnConflictExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #51 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  MEMORY[0x1F4188790](IntoClause);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 50)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_IntoClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_IntoClause);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #52 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RawStmt = type metadata accessor for PgQuery_RawStmt(0);
  MEMORY[0x1F4188790](RawStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 51)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RawStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RawStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RawStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #53 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Query = type metadata accessor for PgQuery_Query(0);
  MEMORY[0x1F4188790](Query);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 52)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Query);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Query);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #54 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
  MEMORY[0x1F4188790](InsertStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 53)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_InsertStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_InsertStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_InsertStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #55 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PgQuery_DeleteStmt(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 54)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DeleteStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeleteStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DeleteStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #56 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
  MEMORY[0x1F4188790](UpdateStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 55)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_UpdateStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UpdateStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_UpdateStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #57 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  MEMORY[0x1F4188790](SelectStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 56)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SelectStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SelectStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #58 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
  MEMORY[0x1F4188790](AlterTableStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 57)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTableStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTableStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #59 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AlterTableCmd = type metadata accessor for PgQuery_AlterTableCmd(0);
  MEMORY[0x1F4188790](AlterTableCmd);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 58)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTableCmd);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableCmd);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTableCmd);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #60 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
  MEMORY[0x1F4188790](AlterDomainStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 59)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterDomainStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDomainStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterDomainStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #61 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
  MEMORY[0x1F4188790](SetOperationStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 60)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SetOperationStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SetOperationStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SetOperationStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #62 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  MEMORY[0x1F4188790](GrantStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 61)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_GrantStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_GrantStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #63 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
  MEMORY[0x1F4188790](GrantRoleStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 62)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_GrantRoleStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantRoleStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_GrantRoleStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #64 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
  MEMORY[0x1F4188790](AlterDefaultPrivilegesStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 63)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #65 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ClosePortalStmt = type metadata accessor for PgQuery_ClosePortalStmt(0);
  MEMORY[0x1F4188790](ClosePortalStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 64)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ClosePortalStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClosePortalStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ClosePortalStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #66 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
  MEMORY[0x1F4188790](ClusterStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 65)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ClusterStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClusterStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ClusterStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #67 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
  MEMORY[0x1F4188790](CopyStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 66)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CopyStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CopyStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CopyStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #68 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  MEMORY[0x1F4188790](Stmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 67)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #69 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Defineuint64_t Stmt = type metadata accessor for PgQuery_DefineStmt(0);
  MEMORY[0x1F4188790](DefineStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 68)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DefineStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DefineStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DefineStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #70 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Dropuint64_t Stmt = type metadata accessor for PgQuery_DropStmt(0);
  MEMORY[0x1F4188790](DropStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 69)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #71 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Truncateuint64_t Stmt = type metadata accessor for PgQuery_TruncateStmt(0);
  MEMORY[0x1F4188790](TruncateStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 70)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TruncateStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TruncateStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TruncateStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #72 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Commentuint64_t Stmt = type metadata accessor for PgQuery_CommentStmt(0);
  MEMORY[0x1F4188790](CommentStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 71)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CommentStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CommentStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CommentStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #73 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Stmt = type metadata accessor for PgQuery_FetchStmt(0);
  MEMORY[0x1F4188790](Stmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 72)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FetchStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_FetchStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FetchStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #74 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Indexuint64_t Stmt = type metadata accessor for PgQuery_IndexStmt(0);
  MEMORY[0x1F4188790](IndexStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 73)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_IndexStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_IndexStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #75 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Functionuint64_t Stmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
  MEMORY[0x1F4188790](FunctionStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 74)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateFunctionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFunctionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateFunctionStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #76 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterFunctionuint64_t Stmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
  MEMORY[0x1F4188790](AlterFunctionStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 75)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterFunctionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFunctionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterFunctionStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #77 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Douint64_t Stmt = type metadata accessor for PgQuery_DoStmt(0);
  MEMORY[0x1F4188790](DoStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 76)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DoStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DoStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DoStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #78 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Renameuint64_t Stmt = type metadata accessor for PgQuery_RenameStmt(0);
  MEMORY[0x1F4188790](RenameStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 77)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RenameStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RenameStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RenameStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #79 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Ruleuint64_t Stmt = type metadata accessor for PgQuery_RuleStmt(0);
  MEMORY[0x1F4188790](RuleStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 78)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RuleStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RuleStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RuleStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #80 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Notifyuint64_t Stmt = type metadata accessor for PgQuery_NotifyStmt(0);
  MEMORY[0x1F4188790](NotifyStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 79)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_NotifyStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_NotifyStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_NotifyStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #81 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Listenuint64_t Stmt = type metadata accessor for PgQuery_ListenStmt(0);
  MEMORY[0x1F4188790](ListenStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 80)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ListenStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ListenStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ListenStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #82 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Unlistenuint64_t Stmt = type metadata accessor for PgQuery_UnlistenStmt(0);
  MEMORY[0x1F4188790](UnlistenStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 81)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_UnlistenStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UnlistenStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_UnlistenStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #83 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transactionuint64_t Stmt = type metadata accessor for PgQuery_TransactionStmt(0);
  MEMORY[0x1F4188790](TransactionStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 82)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TransactionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TransactionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TransactionStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #84 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Viewuint64_t Stmt = type metadata accessor for PgQuery_ViewStmt(0);
  MEMORY[0x1F4188790](ViewStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 83)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ViewStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ViewStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ViewStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #85 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Loaduint64_t Stmt = type metadata accessor for PgQuery_LoadStmt(0);
  MEMORY[0x1F4188790](LoadStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 84)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_LoadStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LoadStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_LoadStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #86 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Domainuint64_t Stmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
  MEMORY[0x1F4188790](DomainStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 85)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateDomainStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateDomainStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateDomainStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #87 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Createdbuint64_t Stmt = type metadata accessor for PgQuery_CreatedbStmt(0);
  MEMORY[0x1F4188790](CreatedbStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 86)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreatedbStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatedbStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreatedbStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #88 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Dropdbuint64_t Stmt = type metadata accessor for PgQuery_DropdbStmt(0);
  MEMORY[0x1F4188790](DropdbStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 87)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropdbStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropdbStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropdbStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #89 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Vacuumuint64_t Stmt = type metadata accessor for PgQuery_VacuumStmt(0);
  MEMORY[0x1F4188790](VacuumStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 88)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_VacuumStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_VacuumStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #90 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Explainuint64_t Stmt = type metadata accessor for PgQuery_ExplainStmt(0);
  MEMORY[0x1F4188790](ExplainStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 89)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ExplainStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExplainStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ExplainStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #91 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableAsuint64_t Stmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
  MEMORY[0x1F4188790](TableAsStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 90)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateTableAsStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableAsStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateTableAsStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #92 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Sequint64_t Stmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
  MEMORY[0x1F4188790](SeqStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 91)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateSeqStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSeqStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateSeqStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #93 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSequint64_t Stmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
  MEMORY[0x1F4188790](AlterSeqStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 92)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterSeqStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSeqStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterSeqStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #94 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  MEMORY[0x1F4188790](VariableSetStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 93)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_VariableSetStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_VariableSetStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #95 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableShowuint64_t Stmt = type metadata accessor for PgQuery_VariableShowStmt(0);
  MEMORY[0x1F4188790](VariableShowStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 94)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_VariableShowStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableShowStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_VariableShowStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #96 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Discarduint64_t Stmt = type metadata accessor for PgQuery_DiscardStmt(0);
  MEMORY[0x1F4188790](DiscardStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 95)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DiscardStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DiscardStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DiscardStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #97 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Triguint64_t Stmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
  MEMORY[0x1F4188790](TrigStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 96)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateTrigStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTrigStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateTrigStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #98 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  PLanguint64_t Stmt = type metadata accessor for PgQuery_CreatePLangStmt(0);
  MEMORY[0x1F4188790](PLangStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 97)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreatePLangStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePLangStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreatePLangStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #99 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Roleuint64_t Stmt = type metadata accessor for PgQuery_CreateRoleStmt(0);
  MEMORY[0x1F4188790](RoleStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 98)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateRoleStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRoleStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateRoleStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #100 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterRoleuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
  MEMORY[0x1F4188790](AlterRoleStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 99)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterRoleStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterRoleStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #101 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropRoleuint64_t Stmt = type metadata accessor for PgQuery_DropRoleStmt(0);
  MEMORY[0x1F4188790](DropRoleStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 100)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropRoleStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropRoleStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropRoleStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #102 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Lockuint64_t Stmt = type metadata accessor for PgQuery_LockStmt(0);
  MEMORY[0x1F4188790](LockStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 101)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_LockStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LockStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_LockStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #103 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ConstraintsSetuint64_t Stmt = type metadata accessor for PgQuery_ConstraintsSetStmt(0);
  MEMORY[0x1F4188790](ConstraintsSetStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 102)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ConstraintsSetStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ConstraintsSetStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ConstraintsSetStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #104 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Reindexuint64_t Stmt = type metadata accessor for PgQuery_ReindexStmt(0);
  MEMORY[0x1F4188790](ReindexStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 103)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ReindexStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReindexStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ReindexStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #105 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PgQuery_CheckPointStmt(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 104)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CheckPointStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CheckPointStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CheckPointStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #106 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
  MEMORY[0x1F4188790](SchemaStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 105)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateSchemaStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSchemaStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateSchemaStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #107 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterDatabaseuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseStmt(0);
  MEMORY[0x1F4188790](AlterDatabaseStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 106)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterDatabaseStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterDatabaseStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #108 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterDatabaseSetuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
  MEMORY[0x1F4188790](AlterDatabaseSetStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 107)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseSetStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #109 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterRoleSetuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleSetStmt(0);
  MEMORY[0x1F4188790](AlterRoleSetStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 108)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterRoleSetStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleSetStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterRoleSetStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #110 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Conversionuint64_t Stmt = type metadata accessor for PgQuery_CreateConversionStmt(0);
  MEMORY[0x1F4188790](ConversionStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 109)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateConversionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateConversionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateConversionStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #111 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Castuint64_t Stmt = type metadata accessor for PgQuery_CreateCastStmt(0);
  MEMORY[0x1F4188790](CastStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 110)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateCastStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateCastStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateCastStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #112 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpClassuint64_t Stmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
  MEMORY[0x1F4188790](OpClassStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 111)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateOpClassStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateOpClassStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #113 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  OpFamilyuint64_t Stmt = type metadata accessor for PgQuery_CreateOpFamilyStmt(0);
  MEMORY[0x1F4188790](OpFamilyStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 112)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateOpFamilyStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpFamilyStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateOpFamilyStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #114 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterOpFamilyuint64_t Stmt = type metadata accessor for PgQuery_AlterOpFamilyStmt(0);
  MEMORY[0x1F4188790](AlterOpFamilyStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 113)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterOpFamilyStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOpFamilyStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterOpFamilyStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #115 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Prepareuint64_t Stmt = type metadata accessor for PgQuery_PrepareStmt(0);
  MEMORY[0x1F4188790](PrepareStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 114)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_PrepareStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_PrepareStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_PrepareStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #116 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Executeuint64_t Stmt = type metadata accessor for PgQuery_ExecuteStmt(0);
  MEMORY[0x1F4188790](ExecuteStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 115)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ExecuteStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExecuteStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ExecuteStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #117 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Deallocateuint64_t Stmt = type metadata accessor for PgQuery_DeallocateStmt(0);
  MEMORY[0x1F4188790](DeallocateStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 116)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DeallocateStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeallocateStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DeallocateStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #118 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DeclareCursoruint64_t Stmt = type metadata accessor for PgQuery_DeclareCursorStmt(0);
  MEMORY[0x1F4188790](DeclareCursorStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 117)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DeclareCursorStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeclareCursorStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DeclareCursorStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #119 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  TableSpaceuint64_t Stmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
  MEMORY[0x1F4188790](TableSpaceStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 118)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateTableSpaceStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableSpaceStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateTableSpaceStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #120 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropTableSpaceuint64_t Stmt = type metadata accessor for PgQuery_DropTableSpaceStmt(0);
  MEMORY[0x1F4188790](DropTableSpaceStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 119)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropTableSpaceStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropTableSpaceStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropTableSpaceStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #121 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterObjectDependsuint64_t Stmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
  MEMORY[0x1F4188790](AlterObjectDependsStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 120)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterObjectDependsStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectDependsStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterObjectDependsStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #122 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterObjectSchemauint64_t Stmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
  MEMORY[0x1F4188790](AlterObjectSchemaStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 121)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectSchemaStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #123 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterOwneruint64_t Stmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
  MEMORY[0x1F4188790](AlterOwnerStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 122)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterOwnerStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOwnerStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterOwnerStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #124 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterOperatoruint64_t Stmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
  MEMORY[0x1F4188790](AlterOperatorStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 123)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterOperatorStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOperatorStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterOperatorStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #125 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTypeuint64_t Stmt = type metadata accessor for PgQuery_AlterTypeStmt(0);
  MEMORY[0x1F4188790](AlterTypeStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 124)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTypeStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTypeStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTypeStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #126 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropOwneduint64_t Stmt = type metadata accessor for PgQuery_DropOwnedStmt(0);
  MEMORY[0x1F4188790](DropOwnedStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 125)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropOwnedStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropOwnedStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropOwnedStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #127 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ReassignOwneduint64_t Stmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
  MEMORY[0x1F4188790](ReassignOwnedStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 126)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ReassignOwnedStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReassignOwnedStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ReassignOwnedStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #128 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  CompositeTypeuint64_t Stmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
  MEMORY[0x1F4188790](CompositeTypeStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 127)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CompositeTypeStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CompositeTypeStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CompositeTypeStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #129 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Enumuint64_t Stmt = type metadata accessor for PgQuery_CreateEnumStmt(0);
  MEMORY[0x1F4188790](EnumStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 128)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateEnumStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEnumStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateEnumStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #130 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Rangeuint64_t Stmt = type metadata accessor for PgQuery_CreateRangeStmt(0);
  MEMORY[0x1F4188790](RangeStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 129)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateRangeStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRangeStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateRangeStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #131 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterEnumuint64_t Stmt = type metadata accessor for PgQuery_AlterEnumStmt(0);
  MEMORY[0x1F4188790](AlterEnumStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 130)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterEnumStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEnumStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterEnumStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #132 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTSDictionaryuint64_t Stmt = type metadata accessor for PgQuery_AlterTSDictionaryStmt(0);
  MEMORY[0x1F4188790](AlterTSDictionaryStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 131)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSDictionaryStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #133 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTSConfigurationuint64_t Stmt = type metadata accessor for PgQuery_AlterTSConfigurationStmt(0);
  MEMORY[0x1F4188790](AlterTSConfigurationStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 132)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSConfigurationStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #134 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Fdwuint64_t Stmt = type metadata accessor for PgQuery_CreateFdwStmt(0);
  MEMORY[0x1F4188790](FdwStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 133)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateFdwStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFdwStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateFdwStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #135 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterFdwuint64_t Stmt = type metadata accessor for PgQuery_AlterFdwStmt(0);
  MEMORY[0x1F4188790](AlterFdwStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 134)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterFdwStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFdwStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterFdwStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #136 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ForeignServeruint64_t Stmt = type metadata accessor for PgQuery_CreateForeignServerStmt(0);
  MEMORY[0x1F4188790](ForeignServerStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 135)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateForeignServerStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignServerStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateForeignServerStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #137 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterForeignServeruint64_t Stmt = type metadata accessor for PgQuery_AlterForeignServerStmt(0);
  MEMORY[0x1F4188790](AlterForeignServerStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 136)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterForeignServerStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterForeignServerStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterForeignServerStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #138 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  UserMappinguint64_t Stmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
  MEMORY[0x1F4188790](UserMappingStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 137)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateUserMappingStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateUserMappingStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateUserMappingStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #139 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterUserMappinguint64_t Stmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
  MEMORY[0x1F4188790](AlterUserMappingStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 138)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterUserMappingStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterUserMappingStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterUserMappingStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #140 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropUserMappinguint64_t Stmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
  MEMORY[0x1F4188790](DropUserMappingStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 139)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropUserMappingStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropUserMappingStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropUserMappingStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #141 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTableSpaceOptionsuint64_t Stmt = type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0);
  MEMORY[0x1F4188790](AlterTableSpaceOptionsStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 140)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #142 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterTableMoveAlluint64_t Stmt = type metadata accessor for PgQuery_AlterTableMoveAllStmt(0);
  MEMORY[0x1F4188790](AlterTableMoveAllStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 141)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableMoveAllStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #143 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  SecLabeluint64_t Stmt = type metadata accessor for PgQuery_SecLabelStmt(0);
  MEMORY[0x1F4188790](SecLabelStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 142)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SecLabelStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SecLabelStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SecLabelStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #144 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ForeignTableuint64_t Stmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
  MEMORY[0x1F4188790](ForeignTableStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 143)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateForeignTableStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignTableStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateForeignTableStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #145 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ImportForeignSchemauint64_t Stmt = type metadata accessor for PgQuery_ImportForeignSchemaStmt(0);
  MEMORY[0x1F4188790](ImportForeignSchemaStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 144)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ImportForeignSchemaStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #146 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Extensionuint64_t Stmt = type metadata accessor for PgQuery_CreateExtensionStmt(0);
  MEMORY[0x1F4188790](ExtensionStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 145)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateExtensionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateExtensionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateExtensionStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #147 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterExtensionuint64_t Stmt = type metadata accessor for PgQuery_AlterExtensionStmt(0);
  MEMORY[0x1F4188790](AlterExtensionStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 146)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterExtensionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterExtensionStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #148 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterExtensionContentsuint64_t Stmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
  MEMORY[0x1F4188790](AlterExtensionContentsStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 147)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionContentsStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #149 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  EventTriguint64_t Stmt = type metadata accessor for PgQuery_CreateEventTrigStmt(0);
  MEMORY[0x1F4188790](EventTrigStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 148)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateEventTrigStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEventTrigStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateEventTrigStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #150 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterEventTriguint64_t Stmt = type metadata accessor for PgQuery_AlterEventTrigStmt(0);
  MEMORY[0x1F4188790](AlterEventTrigStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 149)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterEventTrigStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEventTrigStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterEventTrigStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #151 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  RefreshMatViewuint64_t Stmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
  MEMORY[0x1F4188790](RefreshMatViewStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 150)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RefreshMatViewStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RefreshMatViewStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RefreshMatViewStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #152 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  ReplicaIdentityuint64_t Stmt = type metadata accessor for PgQuery_ReplicaIdentityStmt(0);
  MEMORY[0x1F4188790](ReplicaIdentityStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 151)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ReplicaIdentityStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReplicaIdentityStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ReplicaIdentityStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #153 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSystemuint64_t Stmt = type metadata accessor for PgQuery_AlterSystemStmt(0);
  MEMORY[0x1F4188790](AlterSystemStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 152)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterSystemStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSystemStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterSystemStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #154 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Policyuint64_t Stmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
  MEMORY[0x1F4188790](PolicyStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 153)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreatePolicyStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePolicyStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreatePolicyStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #155 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterPolicyuint64_t Stmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
  MEMORY[0x1F4188790](AlterPolicyStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 154)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterPolicyStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPolicyStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterPolicyStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #156 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transformuint64_t Stmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
  MEMORY[0x1F4188790](TransformStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 155)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateTransformStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTransformStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateTransformStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #157 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Amuint64_t Stmt = type metadata accessor for PgQuery_CreateAmStmt(0);
  MEMORY[0x1F4188790](AmStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 156)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateAmStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateAmStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateAmStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #158 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Publicationuint64_t Stmt = type metadata accessor for PgQuery_CreatePublicationStmt(0);
  MEMORY[0x1F4188790](PublicationStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 157)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreatePublicationStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePublicationStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreatePublicationStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #159 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterPublicationuint64_t Stmt = type metadata accessor for PgQuery_AlterPublicationStmt(0);
  MEMORY[0x1F4188790](AlterPublicationStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 158)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterPublicationStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPublicationStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterPublicationStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #160 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Subscriptionuint64_t Stmt = type metadata accessor for PgQuery_CreateSubscriptionStmt(0);
  MEMORY[0x1F4188790](SubscriptionStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 159)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateSubscriptionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSubscriptionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateSubscriptionStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #161 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSubscriptionuint64_t Stmt = type metadata accessor for PgQuery_AlterSubscriptionStmt(0);
  MEMORY[0x1F4188790](AlterSubscriptionStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 160)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterSubscriptionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSubscriptionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterSubscriptionStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #162 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropSubscriptionuint64_t Stmt = type metadata accessor for PgQuery_DropSubscriptionStmt(0);
  MEMORY[0x1F4188790](DropSubscriptionStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 161)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DropSubscriptionStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropSubscriptionStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DropSubscriptionStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #163 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Statsuint64_t Stmt = type metadata accessor for PgQuery_CreateStatsStmt(0);
  MEMORY[0x1F4188790](StatsStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 162)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateStatsStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStatsStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateStatsStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #164 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterCollationuint64_t Stmt = type metadata accessor for PgQuery_AlterCollationStmt(0);
  MEMORY[0x1F4188790](AlterCollationStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 163)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterCollationStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterCollationStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterCollationStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #165 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PgQuery_CallStmt(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 164)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CallStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CallStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CallStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #166 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterStatsuint64_t Stmt = type metadata accessor for PgQuery_AlterStatsStmt(0);
  MEMORY[0x1F4188790](AlterStatsStmt);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 165)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AlterStatsStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterStatsStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AlterStatsStmt);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #167 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  A_uint64_t Expr = type metadata accessor for PgQuery_A_Expr(0);
  MEMORY[0x1F4188790](A_Expr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 166)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_A_Expr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Expr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_A_Expr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #168 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ColumnRef = type metadata accessor for PgQuery_ColumnRef(0);
  MEMORY[0x1F4188790](ColumnRef);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 167)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ColumnRef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnRef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ColumnRef);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #169 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ParamRef = type metadata accessor for PgQuery_ParamRef(0);
  MEMORY[0x1F4188790](ParamRef);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 168)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ParamRef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ParamRef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ParamRef);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #170 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t A_Const = type metadata accessor for PgQuery_A_Const(0);
  MEMORY[0x1F4188790](A_Const);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 169)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_A_Const);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Const);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_A_Const);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #171 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PgQuery_FuncCall(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 170)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FuncCall);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FuncCall);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #172 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t A_Star = type metadata accessor for PgQuery_A_Star(0);
  MEMORY[0x1F4188790](A_Star);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 171)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_A_Star);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Star);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_A_Star);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #173 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t A_Indices = type metadata accessor for PgQuery_A_Indices(0);
  MEMORY[0x1F4188790](A_Indices);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 172)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_A_Indices);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indices);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_A_Indices);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #174 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t A_Indirection = type metadata accessor for PgQuery_A_Indirection(0);
  MEMORY[0x1F4188790](A_Indirection);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 173)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_A_Indirection);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indirection);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_A_Indirection);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #175 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t A_ArrayExpr = type metadata accessor for PgQuery_A_ArrayExpr(0);
  MEMORY[0x1F4188790](A_ArrayExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 174)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_A_ArrayExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_ArrayExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_A_ArrayExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #176 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ResTarget = type metadata accessor for PgQuery_ResTarget(0);
  MEMORY[0x1F4188790](ResTarget);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 175)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ResTarget);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, (void (*)(uint64_t))type metadata accessor for PgQuery_ResTarget);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ResTarget);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #177 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t MultiAssignRef = type metadata accessor for PgQuery_MultiAssignRef(0);
  MEMORY[0x1F4188790](MultiAssignRef);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 176)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_MultiAssignRef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, (void (*)(uint64_t))type metadata accessor for PgQuery_MultiAssignRef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_MultiAssignRef);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #178 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeCast = type metadata accessor for PgQuery_TypeCast(0);
  MEMORY[0x1F4188790](TypeCast);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 177)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TypeCast);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeCast);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TypeCast);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #179 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  MEMORY[0x1F4188790](CollateClause);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 178)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CollateClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CollateClause);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #180 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SortBy = type metadata accessor for PgQuery_SortBy(0);
  MEMORY[0x1F4188790](SortBy);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 179)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SortBy);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, (void (*)(uint64_t))type metadata accessor for PgQuery_SortBy);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SortBy);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #181 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  MEMORY[0x1F4188790](WindowDef);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 180)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_WindowDef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_WindowDef);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #182 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeSubselect = type metadata accessor for PgQuery_RangeSubselect(0);
  MEMORY[0x1F4188790](RangeSubselect);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 181)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeSubselect);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeSubselect);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeSubselect);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #183 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
  MEMORY[0x1F4188790](RangeFunction);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 182)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeFunction);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeFunction);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeFunction);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #184 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
  MEMORY[0x1F4188790](RangeTableSample);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 183)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeTableSample);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableSample);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeTableSample);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #185 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeTableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
  MEMORY[0x1F4188790](RangeTableFunc);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 184)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeTableFunc);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFunc);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeTableFunc);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #186 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeTableFuncCol = type metadata accessor for PgQuery_RangeTableFuncCol(0);
  MEMORY[0x1F4188790](RangeTableFuncCol);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 185)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeTableFuncCol);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFuncCol);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeTableFuncCol);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #187 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 186)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TypeName);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #188 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ColumnDef = type metadata accessor for PgQuery_ColumnDef(0);
  MEMORY[0x1F4188790](ColumnDef);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 187)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ColumnDef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnDef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ColumnDef);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #189 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t IndexElem = type metadata accessor for PgQuery_IndexElem(0);
  MEMORY[0x1F4188790](IndexElem);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 188)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_IndexElem);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexElem);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_IndexElem);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #190 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Constraint = type metadata accessor for PgQuery_Constraint(0);
  MEMORY[0x1F4188790](Constraint);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 189)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Constraint);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, (void (*)(uint64_t))type metadata accessor for PgQuery_Constraint);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Constraint);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #191 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t DefElem = type metadata accessor for PgQuery_DefElem(0);
  MEMORY[0x1F4188790](DefElem);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 190)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_DefElem);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, (void (*)(uint64_t))type metadata accessor for PgQuery_DefElem);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_DefElem);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #192 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeTblEntry = type metadata accessor for PgQuery_RangeTblEntry(0);
  MEMORY[0x1F4188790](RangeTblEntry);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 191)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeTblEntry);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblEntry);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeTblEntry);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #193 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
  MEMORY[0x1F4188790](RangeTblFunction);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 192)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RangeTblFunction);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblFunction);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RangeTblFunction);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #194 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  MEMORY[0x1F4188790](TableSampleClause);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 193)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TableSampleClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TableSampleClause);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #195 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PgQuery_WithCheckOption(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 194)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_WithCheckOption);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, (void (*)(uint64_t))type metadata accessor for PgQuery_WithCheckOption);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_WithCheckOption);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #196 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t SortGroupClause = type metadata accessor for PgQuery_SortGroupClause(0);
  MEMORY[0x1F4188790](SortGroupClause);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 195)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_SortGroupClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, (void (*)(uint64_t))type metadata accessor for PgQuery_SortGroupClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_SortGroupClause);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #197 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t GroupingSet = type metadata accessor for PgQuery_GroupingSet(0);
  MEMORY[0x1F4188790](GroupingSet);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 196)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_GroupingSet);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingSet);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_GroupingSet);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #198 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WindowClause = type metadata accessor for PgQuery_WindowClause(0);
  MEMORY[0x1F4188790](WindowClause);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 197)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_WindowClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_WindowClause);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #199 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  MEMORY[0x1F4188790](ObjectWithArgs);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 198)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_ObjectWithArgs);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_ObjectWithArgs);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #200 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AccessPriv = type metadata accessor for PgQuery_AccessPriv(0);
  MEMORY[0x1F4188790](AccessPriv);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 199)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_AccessPriv);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, (void (*)(uint64_t))type metadata accessor for PgQuery_AccessPriv);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_AccessPriv);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #201 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
  MEMORY[0x1F4188790](OpClassItem);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 200)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CreateOpClassItem);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassItem);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CreateOpClassItem);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #202 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
  MEMORY[0x1F4188790](TableLikeClause);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 201)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TableLikeClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableLikeClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TableLikeClause);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #203 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
  MEMORY[0x1F4188790](FunctionParameter);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 202)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_FunctionParameter);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, (void (*)(uint64_t))type metadata accessor for PgQuery_FunctionParameter);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_FunctionParameter);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #204 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t LockingClause = type metadata accessor for PgQuery_LockingClause(0);
  MEMORY[0x1F4188790](LockingClause);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 203)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_LockingClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, (void (*)(uint64_t))type metadata accessor for PgQuery_LockingClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_LockingClause);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #205 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RowMarkClause = type metadata accessor for PgQuery_RowMarkClause(0);
  MEMORY[0x1F4188790](RowMarkClause);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 204)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RowMarkClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, (void (*)(uint64_t))type metadata accessor for PgQuery_RowMarkClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RowMarkClause);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #206 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t XmlSerialize = type metadata accessor for PgQuery_XmlSerialize(0);
  MEMORY[0x1F4188790](XmlSerialize);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 205)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_XmlSerialize);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlSerialize);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_XmlSerialize);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #207 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PgQuery_WithClause(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 206)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_WithClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_WithClause);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #208 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t InferClause = type metadata accessor for PgQuery_InferClause(0);
  MEMORY[0x1F4188790](InferClause);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 207)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_InferClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_InferClause);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #209 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PgQuery_OnConflictClause(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 208)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_OnConflictClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_OnConflictClause);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #210 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
  MEMORY[0x1F4188790](CommonTableExpr);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 209)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CommonTableExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CommonTableExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CommonTableExpr);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #211 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 210)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_RoleSpec);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #212 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TriggerTransition = type metadata accessor for PgQuery_TriggerTransition(0);
  MEMORY[0x1F4188790](TriggerTransition);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 211)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_TriggerTransition);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, (void (*)(uint64_t))type metadata accessor for PgQuery_TriggerTransition);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_TriggerTransition);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #213 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
  MEMORY[0x1F4188790](PartitionElem);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 212)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_PartitionElem);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionElem);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_PartitionElem);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #214 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  MEMORY[0x1F4188790](PartitionSpec);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 213)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_PartitionSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_PartitionSpec);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #215 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  MEMORY[0x1F4188790](PartitionBoundSpec);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 214)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_PartitionBoundSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_PartitionBoundSpec);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #216 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
  MEMORY[0x1F4188790](PartitionRangeDatum);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 215)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_PartitionRangeDatum);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionRangeDatum and conformance PgQuery_PartitionRangeDatum, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionRangeDatum);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_PartitionRangeDatum);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #217 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
  MEMORY[0x1F4188790](PartitionCmd);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 216)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_PartitionCmd);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionCmd and conformance PgQuery_PartitionCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionCmd);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_PartitionCmd);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #218 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
  MEMORY[0x1F4188790](VacuumRelation);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 217)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_VacuumRelation);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumRelation and conformance PgQuery_VacuumRelation, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumRelation);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_VacuumRelation);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #219 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t InlineCodeBlock = type metadata accessor for PgQuery_InlineCodeBlock(0);
  MEMORY[0x1F4188790](InlineCodeBlock);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 218)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_InlineCodeBlock);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InlineCodeBlock and conformance PgQuery_InlineCodeBlock, (void (*)(uint64_t))type metadata accessor for PgQuery_InlineCodeBlock);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_InlineCodeBlock);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #220 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for PgQuery_CallContext(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 219)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_CallContext);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallContext and conformance PgQuery_CallContext, (void (*)(uint64_t))type metadata accessor for PgQuery_CallContext);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_CallContext);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #221 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Integer = type metadata accessor for PgQuery_Integer(0);
  MEMORY[0x1F4188790](Integer);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 220)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Integer);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, (void (*)(uint64_t))type metadata accessor for PgQuery_Integer);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Integer);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #222 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Float = type metadata accessor for PgQuery_Float(0);
  MEMORY[0x1F4188790](Float);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 221)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Float);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, (void (*)(uint64_t))type metadata accessor for PgQuery_Float);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Float);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #223 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t String = type metadata accessor for PgQuery_String(0);
  MEMORY[0x1F4188790](String);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 222)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_String);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, (void (*)(uint64_t))type metadata accessor for PgQuery_String);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_String);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #224 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Bituint64_t String = type metadata accessor for PgQuery_BitString(0);
  MEMORY[0x1F4188790](BitString);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 223)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_BitString);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, (void (*)(uint64_t))type metadata accessor for PgQuery_BitString);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_BitString);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #225 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Null = type metadata accessor for PgQuery_Null(0);
  MEMORY[0x1F4188790](Null);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 224)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_Null);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, (void (*)(uint64_t))type metadata accessor for PgQuery_Null);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Null);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #226 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t List = type metadata accessor for PgQuery_List(0);
  MEMORY[0x1F4188790](List);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 225)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_List);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, (void (*)(uint64_t))type metadata accessor for PgQuery_List);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_List);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #227 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Intuint64_t List = type metadata accessor for PgQuery_IntList(0);
  MEMORY[0x1F4188790](IntList);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 226)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_IntList);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, (void (*)(uint64_t))type metadata accessor for PgQuery_IntList);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_IntList);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t closure #228 in closure #1 in PgQuery_Node.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Oiduint64_t List = type metadata accessor for PgQuery_OidList(0);
  MEMORY[0x1F4188790](OidList);
  uint64_t v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v8 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v4, 1, v8) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    __break(1u);
  }
  else if (swift_getEnumCaseMultiPayload() == 227)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v7, type metadata accessor for PgQuery_OidList);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, (void (*)(uint64_t))type metadata accessor for PgQuery_OidList);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    return outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_OidList);
  }
  uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v4, type metadata accessor for PgQuery_Node.OneOf_Node);
  __break(1u);
  return result;
}

uint64_t static PgQuery_Node.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:)) & 1;
}

BOOL closure #1 in static PgQuery_Node.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node.OneOf_Node?, PgQuery_Node.OneOf_Node?));
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  uint64_t v16 = a2 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  uint64_t v17 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?(v15, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  outlined init with copy of PgQuery_Alias?(v16, v17, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v18((uint64_t)v14, 1, v4) == 1)
  {
    if (v18(v17, 1, v4) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
      return 1;
    }
    goto LABEL_6;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  if (v18(v17, 1, v4) == 1)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node.OneOf_Node);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node.OneOf_Node?, PgQuery_Node.OneOf_Node?));
    return 0;
  }
  outlined init with take of PgQuery_OidList(v17, (uint64_t)v7, type metadata accessor for PgQuery_Node.OneOf_Node);
  char v19 = specialized static PgQuery_Node.OneOf_Node.== infix(_:_:)(v10, v7);
  outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node.OneOf_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node.OneOf_Node);
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  return (v19 & 1) != 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Node@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_Node._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Node()
{
  return 0x79726575715F6770;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_Node())(void, void)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_Node(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Node(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Node@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Node._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Node(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Node(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1)
{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_Integer._protobuf_nameMap, (uint64_t)"ival", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_Float._protobuf_nameMap, (uint64_t)"str", 3);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_String._protobuf_nameMap, (uint64_t)"str", 3);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_BitString._protobuf_nameMap, (uint64_t)"str", 3);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_Null._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_List._protobuf_nameMap, (uint64_t)"items", 5);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_OidList._protobuf_nameMap, (uint64_t)"items", 5);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_IntList._protobuf_nameMap, (uint64_t)"items", 5);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_Expr._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_CoerceToDomainValue._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_SetToDefault._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_RangeTblRef._protobuf_nameMap, (uint64_t)"rtindex", 7);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_ClosePortalStmt._protobuf_nameMap, (uint64_t)"portalname", 10);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_DoStmt._protobuf_nameMap, (uint64_t)"args", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_ListenStmt._protobuf_nameMap, (uint64_t)"conditionname", 13);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_UnlistenStmt._protobuf_nameMap, (uint64_t)"conditionname", 13);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_LoadStmt._protobuf_nameMap, (uint64_t)"filename", 8);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_VariableShowStmt._protobuf_nameMap, (uint64_t)"name", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_DiscardStmt._protobuf_nameMap, (uint64_t)"target", 6);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_CheckPointStmt._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_DeallocateStmt._protobuf_nameMap, (uint64_t)"name", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_AlterTypeStmt._protobuf_nameMap, (uint64_t)"options", 7);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_CreateEnumStmt._protobuf_nameMap, (uint64_t)"vals", 4);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_CreateRangeStmt._protobuf_nameMap, (uint64_t)"params", 6);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_AlterSystemStmt._protobuf_nameMap, (uint64_t)"setstmt", 7);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_AlterCollationStmt._protobuf_nameMap, (uint64_t)"collname", 8);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_A_Star._protobuf_nameMap);
}

{
  return one-time initialization function for _protobuf_nameMap(a1, static PgQuery_CallContext._protobuf_nameMap, (uint64_t)"atomic", 6);
}

uint64_t PgQuery_Integer.decodeMessage<A>(decoder:)()
{
  return PgQuery_Integer.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
    }
  }
  return result;
}

uint64_t PgQuery_Integer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Integer.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_Integer);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Integer@<X0>(_DWORD *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Integer()
{
  return 0xD000000000000010;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_Integer())(void, void)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Integer(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, (void (*)(uint64_t))type metadata accessor for PgQuery_Integer);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Integer@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Integer._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Integer(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, (void (*)(uint64_t))type metadata accessor for PgQuery_Integer);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Integer(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Integer and conformance PgQuery_Integer, (void (*)(uint64_t))type metadata accessor for PgQuery_Integer);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_Integer(char *a1, char *a2)
{
  return specialized static PgQuery_RangeTblRef.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Integer) & 1;
}

uint64_t PgQuery_Float.decodeMessage<A>(decoder:)()
{
  return PgQuery_Float.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      dispatch thunk of Decoder.decodeSingularStringField(value:)();
    }
  }
  return result;
}

uint64_t PgQuery_Float.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_Float);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Float@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Float()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Float(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, (void (*)(uint64_t))type metadata accessor for PgQuery_Float);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Float@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Float._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Float(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, (void (*)(uint64_t))type metadata accessor for PgQuery_Float);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Float(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Float and conformance PgQuery_Float, (void (*)(uint64_t))type metadata accessor for PgQuery_Float);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_Float(char *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Float) & 1;
}

uint64_t PgQuery_String.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_String);
}

uint64_t PgQuery_Float.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v7 = v4[1];
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_String()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_String(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, (void (*)(uint64_t))type metadata accessor for PgQuery_String);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_String@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_String._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_String(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, (void (*)(uint64_t))type metadata accessor for PgQuery_String);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_String(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_String and conformance PgQuery_String, (void (*)(uint64_t))type metadata accessor for PgQuery_String);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_String(char *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_String) & 1;
}

uint64_t PgQuery_BitString.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_BitString);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_BitString()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_BitString(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, (void (*)(uint64_t))type metadata accessor for PgQuery_BitString);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_BitString@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_BitString._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_BitString(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, (void (*)(uint64_t))type metadata accessor for PgQuery_BitString);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_BitString(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BitString and conformance PgQuery_BitString, (void (*)(uint64_t))type metadata accessor for PgQuery_BitString);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_BitString(char *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_BitString) & 1;
}

uint64_t PgQuery_Null.decodeMessage<A>(decoder:)()
{
  return PgQuery_Null.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  do
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  while (!v0 && (v2 & 1) == 0);
  return result;
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Null()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_Null()
{
  return PgQuery_Expr.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Null(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, (void (*)(uint64_t))type metadata accessor for PgQuery_Null);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Null@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Null._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Null(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, (void (*)(uint64_t))type metadata accessor for PgQuery_Null);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Null(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Null and conformance PgQuery_Null, (void (*)(uint64_t))type metadata accessor for PgQuery_Null);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_List.decodeMessage<A>(decoder:)()
{
  return PgQuery_List.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_List.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_List.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_List);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_List@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x1E4FBC860];
  return UnknownStorage.init()();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_List()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_List(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, (void (*)(uint64_t))type metadata accessor for PgQuery_List);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_List@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_List._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_List(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, (void (*)(uint64_t))type metadata accessor for PgQuery_List);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_List(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_List and conformance PgQuery_List, (void (*)(uint64_t))type metadata accessor for PgQuery_List);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_List(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterCollationStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_List) & 1;
}

uint64_t PgQuery_OidList.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_List.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_OidList);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_OidList()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_OidList(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, (void (*)(uint64_t))type metadata accessor for PgQuery_OidList);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OidList@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OidList._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_OidList(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, (void (*)(uint64_t))type metadata accessor for PgQuery_OidList);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OidList(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OidList and conformance PgQuery_OidList, (void (*)(uint64_t))type metadata accessor for PgQuery_OidList);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_OidList(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterCollationStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_OidList) & 1;
}

uint64_t PgQuery_IntList.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_List.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_IntList);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_IntList()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_IntList(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, (void (*)(uint64_t))type metadata accessor for PgQuery_IntList);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_IntList@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_IntList._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_IntList(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, (void (*)(uint64_t))type metadata accessor for PgQuery_IntList);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_IntList(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntList and conformance PgQuery_IntList, (void (*)(uint64_t))type metadata accessor for PgQuery_IntList);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_IntList(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterCollationStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_IntList) & 1;
}

uint64_t PgQuery_Alias.decodeMessage<A>(decoder:)()
{
  return PgQuery_Alias.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_Alias.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Alias.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_Alias);
}

uint64_t static PgQuery_Alias.== infix(_:_:)(char *a1, char *a2)
{
  return specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Alias) & 1;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Alias@<X0>(void *a1@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Alias(0, 0xE000000000000000, MEMORY[0x1E4FBC860], a1);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Alias()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Alias(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Alias@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Alias._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Alias(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Alias(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RangeVar.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 5:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 6:
          type metadata accessor for PgQuery_RangeVar(0);
          type metadata accessor for PgQuery_Alias(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RangeVar.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v6 = *(void *)(Alias - 8);
  MEMORY[0x1F4188790](Alias);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *(void *)(v0 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v12 = *(void *)(v0 + 24);
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0) {
      uint64_t v13 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v14 = *(void *)(v0 + 40);
      uint64_t v15 = HIBYTE(v14) & 0xF;
      if ((v14 & 0x2000000000000000) == 0) {
        uint64_t v15 = *(void *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
      }
      if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (*(unsigned char *)(v0 + 48) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          unint64_t v16 = *(void *)(v0 + 64);
          uint64_t v17 = HIBYTE(v16) & 0xF;
          if ((v16 & 0x2000000000000000) == 0) {
            uint64_t v17 = *(void *)(v0 + 56) & 0xFFFFFFFFFFFFLL;
          }
          if (!v17 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
          {
            uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
            outlined init with copy of PgQuery_Alias?(v0 + *(int *)(RangeVar + 44), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Alias?);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, Alias) == 1)
            {
              outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Alias?);
            }
            else
            {
              outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v8, type metadata accessor for PgQuery_Alias);
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
              dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
              uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v8, type metadata accessor for PgQuery_Alias);
              if (v1) {
                return result;
              }
            }
            if (!*(_DWORD *)(v0 + 72)) {
              return UnknownStorage.traverse<A>(visitor:)();
            }
            uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
            if (!v1) {
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeVar@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0xE000000000000000;
  *(unsigned char *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0xE000000000000000;
  *(_DWORD *)(a2 + 72) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 44);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 56);

  return v6(v4, 1, 1, Alias);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeVar()
{
  return 0xD000000000000011;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_RangeVar())(void, void)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RangeVar()
{
  return PgQuery_RangeVar.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RangeVar()
{
  return PgQuery_RangeVar.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeVar(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeVar@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeVar._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeVar(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeVar(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t one-time initialization function for defaultInstance(uint64_t a1)
{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_TableFunc._StorageClass, PgQuery_TableFunc._StorageClass.init(), &static PgQuery_TableFunc._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_Aggref._StorageClass, PgQuery_Aggref._StorageClass.init(), &static PgQuery_Aggref._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_WindowFunc._StorageClass, PgQuery_WindowFunc._StorageClass.init(), &static PgQuery_WindowFunc._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_FuncExpr._StorageClass, PgQuery_FuncExpr._StorageClass.init(), &static PgQuery_FuncExpr._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_SubPlan._StorageClass, PgQuery_SubPlan._StorageClass.init(), &static PgQuery_SubPlan._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_AlternativeSubPlan._StorageClass, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subplans, &static PgQuery_AlternativeSubPlan._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_XmlExpr._StorageClass, PgQuery_XmlExpr._StorageClass.init(), &static PgQuery_XmlExpr._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_Query._StorageClass, PgQuery_Query._StorageClass.init(), &static PgQuery_Query._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_SelectStmt._StorageClass, PgQuery_SelectStmt._StorageClass.init(), &static PgQuery_SelectStmt._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_CreateStmt._StorageClass, PgQuery_CreateStmt._StorageClass.init(), &static PgQuery_CreateStmt._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_IndexStmt._StorageClass, PgQuery_IndexStmt._StorageClass.init(), &static PgQuery_IndexStmt._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_ExplainStmt._StorageClass, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options, &static PgQuery_ExplainStmt._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_CreateTrigStmt._StorageClass, PgQuery_CreateTrigStmt._StorageClass.init(), &static PgQuery_CreateTrigStmt._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_A_Indirection._StorageClass, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indirection, &static PgQuery_A_Indirection._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_ColumnDef._StorageClass, PgQuery_ColumnDef._StorageClass.init(), &static PgQuery_ColumnDef._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_Constraint._StorageClass, PgQuery_Constraint._StorageClass.init(), &static PgQuery_Constraint._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_RangeTblEntry._StorageClass, PgQuery_RangeTblEntry._StorageClass.init(), &static PgQuery_RangeTblEntry._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_WindowClause._StorageClass, PgQuery_WindowClause._StorageClass.init(), &static PgQuery_WindowClause._StorageClass.defaultInstance);
}

{
  return one-time initialization function for defaultInstance(a1, (void (*)(void))type metadata accessor for PgQuery_CommonTableExpr._StorageClass, PgQuery_CommonTableExpr._StorageClass.init(), &static PgQuery_CommonTableExpr._StorageClass.defaultInstance);
}

uint64_t PgQuery_TableFunc._StorageClass.init()()
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v4(v2, 1, 1, Node);
  v4(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, 1, 1, Node);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames) = v1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes) = v1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods) = v1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations) = v1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexprs) = v1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexprs) = v1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__notnulls) = v1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordinalitycol) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  return v0;
}

uint64_t PgQuery_TableFunc._StorageClass.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_TableFunc._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit(PgQuery_TableFunc._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_TableFunc._StorageClass()
{
  return type metadata accessor for PgQuery_TableFunc._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_TableFunc._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TableFunc._StorageClass);
}

void type metadata completion function for PgQuery_TableFunc._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for PgQuery_Node.OneOf_Node?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for PgQuery_Node(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Node);
}

uint64_t PgQuery_TableFunc.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_TableFunc, (void (*)(void))type metadata accessor for PgQuery_TableFunc._StorageClass, specialized PgQuery_TableFunc._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_TableFunc.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_TableFunc.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_9;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 11:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          goto LABEL_9;
        case 12:
        case 13:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_9:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_TableFunc.traverse<A>(visitor:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v22 - v7;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v25 = *(void *)(Node - 8);
  uint64_t v10 = MEMORY[0x1F4188790](Node);
  unint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v24 = (uint64_t)&v22 - v13;
  uint64_t v14 = *(int *)(type metadata accessor for PgQuery_TableFunc(0) + 20);
  uint64_t v23 = v0;
  uint64_t v15 = *(void *)(v0 + v14);
  uint64_t v16 = *(void *)(*(void *)(v15 + 16) + 16);
  uint64_t v26 = v15;
  if (v16)
  {
    uint64_t v22 = v6;
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v15 = v26;
    uint64_t v6 = v22;
  }
  else
  {
    swift_retain();
  }
  if (*(void *)(*(void *)(v15 + 24) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2) {
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    uint64_t v15 = v26;
  }
  outlined init with copy of PgQuery_Alias?(v15+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  v25 += 48;
  if (v18(v8, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v19 = (uint64_t)v8;
    uint64_t v20 = v24;
    outlined init with take of PgQuery_OidList(v19, v24, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v2)
    {
      outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
  }
  outlined init with copy of PgQuery_Alias?(v26+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v18(v6, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v12, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v2)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
  }
  uint64_t v21 = v26;
  if (*(void *)(*(void *)(v26
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2) {
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
  }
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v2) {
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
  }
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    if (v2) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    if (v2) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexprs)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    if (v2) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexprs)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    if (v2) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__notnulls)
                 + 16))
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    if (v2) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v21
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordinalitycol))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    uint64_t v21 = v26;
    if (v2) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v21
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_TableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v2) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TableFunc@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_TableFunc._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TableFunc()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TableFunc()
{
  return PgQuery_TableFunc.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TableFunc(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TableFunc@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TableFunc._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TableFunc(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TableFunc(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_Expr.traverse<A>(visitor:)()
{
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Expr()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Expr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_Expr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Expr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Expr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Expr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_Expr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Expr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_Expr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_Var._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t PgQuery_Node._StorageClass.__deallocating_deinit(void *a1, uint64_t *a2)
{
  outlined destroy of AnyValue?(v2 + *a1, a2);
  uint64_t v3 = *(unsigned int *)(*(void *)v2 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v2 + 52);

  return MEMORY[0x1F4186488](v2, v3, v4);
}

uint64_t ObjC metadata update function for PgQuery_Var._StorageClass()
{
  return type metadata accessor for PgQuery_Var._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_Var._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Var._StorageClass);
}

void type metadata completion function for PgQuery_Var._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_Var.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_Var, (void (*)(void))type metadata accessor for PgQuery_Var._StorageClass, specialized PgQuery_Var._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Var.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_Var.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 4:
        case 6:
        case 7:
        case 8:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 3:
        case 5:
        case 9:
        case 10:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_Var.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_Var, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Var.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_Var.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[3] = a4;
  v14[1] = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  unint64_t v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
    if (v4) {
      return result;
    }
  }
  if (!*(_DWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varno)
    || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattno)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      if (!*(_DWORD *)(a1
                      + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartype)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
      {
        if (!*(_DWORD *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartypmod)
          || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
        {
          if (!*(_DWORD *)(a1
                          + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varcollid)
            || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
          {
            if (!*(_DWORD *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varlevelsup)
              || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
            {
              if (!*(_DWORD *)(a1
                              + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varnosyn)
                || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
              {
                if (!*(_DWORD *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattnosyn)
                  || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
                {
                  uint64_t result = *(unsigned int *)(a1
                                           + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
                  if (result) {
                    return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_Var.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v16 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v15, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17((uint64_t)v14, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v17(v16, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v16, (uint64_t)v7, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      char v19 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v19 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_17;
  }
  unsigned int v18 = v17(v16, 1, Node);
  swift_retain();
  swift_retain();
  if (v18 != 1) {
    goto LABEL_6;
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varno) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varno)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattno) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattno)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartype) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartype)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartypmod) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartypmod)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varcollid) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varcollid)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varlevelsup) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varlevelsup)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varnosyn) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varnosyn)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattnosyn) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattnosyn))
  {
    int v20 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    int v21 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    return v20 == v21;
  }
LABEL_17:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Var@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_Var._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Var()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Var(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, (void (*)(uint64_t))type metadata accessor for PgQuery_Var);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Var@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Var._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Var(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, (void (*)(uint64_t))type metadata accessor for PgQuery_Var);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Var(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, (void (*)(uint64_t))type metadata accessor for PgQuery_Var);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_Var(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Var, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Var.== infix(_:_:)) & 1;
}

uint64_t PgQuery_Param._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_Param._StorageClass()
{
  return type metadata accessor for PgQuery_Param._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_Param._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Param._StorageClass);
}

void type metadata completion function for PgQuery_Param._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_Param.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_Param, (void (*)(void))type metadata accessor for PgQuery_Param._StorageClass, specialized PgQuery_Param._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Param.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_Param.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 2:
          lazy protocol witness table accessor for type PgQuery_ParamKind and conformance PgQuery_ParamKind();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_9;
        case 3:
        case 5:
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_9;
        case 4:
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_9:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_Param.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_Param(0) + 20);
  uint64_t v17 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind))
  {
    char v14 = *(unsigned char *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind
                   + 8);
    uint64_t v18 = *(void *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind);
    char v19 = v14;
    lazy protocol witness table accessor for type PgQuery_ParamKind and conformance PgQuery_ParamKind();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramid))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtypmod))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Param@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_Param._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Param()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_Param(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Param.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Param(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, (void (*)(uint64_t))type metadata accessor for PgQuery_Param);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Param@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Param._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Param(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, (void (*)(uint64_t))type metadata accessor for PgQuery_Param);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Param(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, (void (*)(uint64_t))type metadata accessor for PgQuery_Param);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t one-time initialization function for defaultInstance(uint64_t a1, void (*a2)(void), uint64_t (*a3)(void), uint64_t *a4)
{
  a2(0);
  swift_allocObject();
  uint64_t result = a3();
  *a4 = result;
  return result;
}

uint64_t PgQuery_Aggref._StorageClass.init()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfnoid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggcollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtranstype) = 0;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggargtypes) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdirectargs) = v4;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v4;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggorder) = v4;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdistinct) = v4;
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, 1, 1, Node);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggstar) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggvariadic) = 0;
  uint64_t v5 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind);
  *uint64_t v5 = 0;
  v5[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup) = 0;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  return v0;
}

uint64_t PgQuery_Aggref._StorageClass.deinit()
{
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_Aggref._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit(PgQuery_Aggref._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_Aggref._StorageClass()
{
  return type metadata accessor for PgQuery_Aggref._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_Aggref._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Aggref._StorageClass);
}

void type metadata completion function for PgQuery_Aggref._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_Aggref.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_Aggref, (void (*)(void))type metadata accessor for PgQuery_Aggref._StorageClass, specialized PgQuery_Aggref._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Aggref.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_Aggref.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 12:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_10;
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 16:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_10;
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_10;
        case 13:
        case 14:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_10;
        case 15:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_10;
        case 17:
          lazy protocol witness table accessor for type PgQuery_AggSplit and conformance PgQuery_AggSplit();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_10;
        case 18:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_10:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_Aggref.traverse<A>(visitor:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  uint64_t v27 = (uint64_t)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v24 - v4;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v7 = *(void *)(Node - 8);
  uint64_t v8 = MEMORY[0x1F4188790](Node);
  uint64_t v25 = (uint64_t)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_Aggref(0) + 20);
  uint64_t v24 = v0;
  uint64_t v13 = *(void *)(v0 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  char v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v26 = v7 + 48;
  if (v14(v5, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v15 = v30;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v5, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    uint64_t v16 = v30;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v15 = v16;
    if (v16)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfnoid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v15) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v15) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v15) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v15) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggtranstype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v15) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggargtypes)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v15) {
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdirectargs)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v15) {
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v15)
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
LABEL_27:
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_25:
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggorder)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v15) {
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggdistinct)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v15) {
      return swift_release();
    }
  }
  uint64_t v18 = v27;
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v14((char *)v18, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v18, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v19 = v18;
    uint64_t v20 = v25;
    outlined init with take of PgQuery_OidList(v19, v25, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
    if (v15) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggstar) != 1
    || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v15))
  {
    if (*(unsigned char *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggvariadic) != 1
      || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v15))
    {
      unint64_t v21 = *(void *)(v13
                      + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind
                      + 8);
      uint64_t v22 = HIBYTE(v21) & 0xF;
      if ((v21 & 0x2000000000000000) == 0) {
        uint64_t v22 = *(void *)(v13
      }
                        + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggkind) & 0xFFFFFFFFFFFFLL;
      if (!v22
        || (swift_bridgeObjectRetain(),
            dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
            swift_bridgeObjectRelease(),
            !v15))
      {
        if (!*(_DWORD *)(v13
                        + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup)
          || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v15))
        {
          if (!*(void *)(v13
                          + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit)
            || (char v23 = *(unsigned char *)(v13
                               + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit
                               + 8),
                uint64_t v28 = *(void *)(v13
                                + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggsplit),
                char v29 = v23,
                lazy protocol witness table accessor for type PgQuery_AggSplit and conformance PgQuery_AggSplit(),
                dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                !v15))
          {
            if (!*(_DWORD *)(v13
                            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_AggrefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location)
              || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v15))
            {
              swift_release();
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Aggref@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_Aggref._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Aggref()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_Aggref()
{
  return PgQuery_Aggref.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Aggref(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, (void (*)(uint64_t))type metadata accessor for PgQuery_Aggref);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Aggref@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Aggref._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Aggref(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, (void (*)(uint64_t))type metadata accessor for PgQuery_Aggref);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Aggref(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, (void (*)(uint64_t))type metadata accessor for PgQuery_Aggref);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_GroupingFunc._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_GroupingFunc._StorageClass()
{
  return type metadata accessor for PgQuery_GroupingFunc._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_GroupingFunc._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_GroupingFunc._StorageClass);
}

void type metadata completion function for PgQuery_GroupingFunc._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_GroupingFunc.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_GroupingFunc, (void (*)(void))type metadata accessor for PgQuery_GroupingFunc._StorageClass, specialized PgQuery_GroupingFunc._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_GroupingFunc.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_GroupingFunc.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_GroupingFunc.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_GroupingFunc(0) + 20);
  uint64_t v16 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refs)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_GroupingFunc@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_GroupingFunc._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_GroupingFunc()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_GroupingFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_GroupingFunc.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_GroupingFunc(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingFunc);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_GroupingFunc@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_GroupingFunc._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_GroupingFunc(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingFunc);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_GroupingFunc(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingFunc);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_WindowFunc._StorageClass.init()()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winfnoid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wintype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wincollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E4FBC860];
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winstar) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winagg) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  return v0;
}

uint64_t PgQuery_WindowFunc._StorageClass.__deallocating_deinit()
{
  return PgQuery_WindowFunc._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, (uint64_t)&OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args, &OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter);
}

uint64_t ObjC metadata update function for PgQuery_WindowFunc._StorageClass()
{
  return type metadata accessor for PgQuery_WindowFunc._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_WindowFunc._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WindowFunc._StorageClass);
}

void type metadata completion function for PgQuery_WindowFunc._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_WindowFunc.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_WindowFunc, (void (*)(void))type metadata accessor for PgQuery_WindowFunc._StorageClass, specialized PgQuery_WindowFunc._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_WindowFunc.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_WindowFunc.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
        case 8:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 9:
        case 10:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 11:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_WindowFunc.traverse<A>(visitor:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  uint64_t v25 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v20 - v4;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v7 = *(void *)(Node - 8);
  uint64_t v8 = MEMORY[0x1F4188790](Node);
  uint64_t v23 = (uint64_t)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v20 - v10;
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_WindowFunc(0) + 20);
  uint64_t v22 = v0;
  uint64_t v13 = *(void *)(v0 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  char v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v24 = v7 + 48;
  if (v14(v5, 1, Node) == 1)
  {
    uint64_t v21 = Node;
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v15 = (uint64_t)v25;
    uint64_t v16 = v26;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v5, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    uint64_t v17 = v26;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v16 = v17;
    if (v17)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    uint64_t v21 = Node;
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    uint64_t v15 = (uint64_t)v25;
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winfnoid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v16) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wintype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v16) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__wincollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v16) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v16) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v16) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggfilter, v15, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v14((char *)v15, 1, v21) == 1)
  {
    outlined destroy of AnyValue?(v15, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v18 = v23;
    outlined init with take of PgQuery_OidList(v15, v23, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v18, type metadata accessor for PgQuery_Node);
    if (v16) {
      return swift_release();
    }
  }
  if (!*(_DWORD *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref)
    || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v16))
  {
    if (*(unsigned char *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winstar) != 1
      || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v16))
    {
      if (*(unsigned char *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winagg) != 1
        || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v16))
      {
        if (!*(_DWORD *)(v13
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_WindowFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location)
          || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v16))
        {
          swift_release();
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_WindowFunc@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_WindowFunc._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_WindowFunc()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_WindowFunc()
{
  return PgQuery_WindowFunc.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_WindowFunc(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowFunc);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_WindowFunc@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_WindowFunc._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_WindowFunc(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowFunc);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_WindowFunc(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowFunc);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_SubscriptingRef._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v21 = (uint64_t)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v7 = *(void (**)(void))(*(void *)(Node - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, Node);
  uint64_t v17 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype) = 0;
  uint64_t v8 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype) = 0;
  uint64_t v9 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod) = 0;
  uint64_t v10 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid) = 0;
  uint64_t v11 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr) = MEMORY[0x1E4FBC860];
  uint64_t v13 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr) = v12;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr;
  v7();
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr;
  v7();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v18, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v17) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype);
  *(_DWORD *)(v1 + v9) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid);
  *(void *)(v1 + v11) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v13) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr, v19, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v14 = v21;
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr, v21, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?(v14, v20, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_SubscriptingRef._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_SubscriptingRef._StorageClass()
{
  return type metadata accessor for PgQuery_SubscriptingRef._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SubscriptingRef._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SubscriptingRef._StorageClass);
}

void type metadata completion function for PgQuery_SubscriptingRef._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_SubscriptingRef, (void (*)(void))type metadata accessor for PgQuery_SubscriptingRef._StorageClass, PgQuery_SubscriptingRef._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_SubscriptingRef.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 8:
        case 9:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 2:
        case 3:
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_9;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_9;
        case 6:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_9:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_SubscriptingRef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v36 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v38 = (char *)&v31 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  uint64_t v13 = MEMORY[0x1F4188790](Node);
  uint64_t v33 = (uint64_t)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v35 = (uint64_t)&v31 - v16;
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for PgQuery_SubscriptingRef(0) + 20);
  uint64_t v34 = v2;
  uint64_t v20 = *(void *)(v2 + v19);
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v37 = v12 + 48;
  if (v21(v10, 1, Node) == 1)
  {
    uint64_t v32 = Node;
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v18, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v3)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    uint64_t v32 = Node;
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
  }
  uint64_t v22 = (uint64_t)v38;
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v3) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v3) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v3) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v3) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v20
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v3) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v20
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v3) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr, v22, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v23 = v32;
  if (v21((char *)v22, 1, v32) == 1)
  {
    uint64_t v24 = v23;
    outlined destroy of AnyValue?(v22, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v25 = v22;
    uint64_t v26 = v35;
    outlined init with take of PgQuery_OidList(v25, v35, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v24 = v23;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
    if (v3) {
      return swift_release();
    }
  }
  uint64_t v27 = v36;
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21((char *)v27, 1, v24) != 1)
  {
    uint64_t v28 = v27;
    uint64_t v29 = v33;
    outlined init with take of PgQuery_OidList(v28, v33, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
    if (!v3) {
      goto LABEL_25;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v27, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_25:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SubscriptingRef@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SubscriptingRef._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SubscriptingRef()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SubscriptingRef(uint64_t a1, uint64_t a2)
{
  return PgQuery_SubscriptingRef.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SubscriptingRef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, (void (*)(uint64_t))type metadata accessor for PgQuery_SubscriptingRef);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SubscriptingRef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SubscriptingRef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SubscriptingRef(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, (void (*)(uint64_t))type metadata accessor for PgQuery_SubscriptingRef);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SubscriptingRef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, (void (*)(uint64_t))type metadata accessor for PgQuery_SubscriptingRef);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_FuncExpr._StorageClass.init()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcresulttype) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcretset) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcvariadic) = 0;
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat;
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccollid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  return v0;
}

uint64_t PgQuery_FuncExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_FuncExpr._StorageClass()
{
  return type metadata accessor for PgQuery_FuncExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_FuncExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FuncExpr._StorageClass);
}

void type metadata completion function for PgQuery_FuncExpr._StorageClass()
{
}

uint64_t PgQuery_FuncExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_FuncExpr, (void (*)(void))type metadata accessor for PgQuery_FuncExpr._StorageClass, specialized PgQuery_FuncExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_FuncExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_FuncExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 7:
        case 8:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 4:
        case 5:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 6:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 9:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 10:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_FuncExpr.traverse<A>(visitor:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(type metadata accessor for PgQuery_FuncExpr(0) + 20);
  uint64_t v15 = v0;
  uint64_t v9 = *(void *)(v0 + v8);
  outlined init with copy of PgQuery_Alias?(v9 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v10 = v18;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v3, (uint64_t)v7, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    uint64_t v11 = v18;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v10 = v11;
    outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
    if (v11) {
      return swift_release();
    }
  }
  if (!*(_DWORD *)(v9
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcid)
    || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v10))
  {
    if (!*(_DWORD *)(v9
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcresulttype)
      || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v10))
    {
      if (*(unsigned char *)(v9
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcretset) != 1
        || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v10))
      {
        if (*(unsigned char *)(v9
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcvariadic) != 1
          || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v10))
        {
          if (!*(void *)(v9
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat)
            || (char v12 = *(unsigned char *)(v9
                               + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat
                               + 8),
                uint64_t v16 = *(void *)(v9
                                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcformat),
                char v17 = v12,
                lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm(),
                dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                !v10))
          {
            if (!*(_DWORD *)(v9
                            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccollid)
              || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v10))
            {
              if (!*(_DWORD *)(v9
                              + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid)
                || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v10))
              {
                if (!*(void *)(*(void *)(v9
                                            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                                + 16)
                  || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
                {
                  if (!*(_DWORD *)(v9
                                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location)
                    || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v10))
                  {
                    swift_release();
                    return UnknownStorage.traverse<A>(visitor:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FuncExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_FuncExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FuncExpr()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_FuncExpr()
{
  return PgQuery_FuncExpr.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FuncExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FuncExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FuncExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FuncExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FuncExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_NamedArgExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_NamedArgExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg);
}

uint64_t ObjC metadata update function for PgQuery_NamedArgExpr._StorageClass()
{
  return type metadata accessor for PgQuery_NamedArgExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_NamedArgExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NamedArgExpr._StorageClass);
}

void type metadata completion function for PgQuery_NamedArgExpr._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_NamedArgExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_NamedArgExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_NamedArgExpr._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_NamedArgExpr._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 4:
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_NamedArgExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_NamedArgExpr, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_NamedArgExpr.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_NamedArgExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v13 = *(void *)(Node - 8);
  uint64_t v14 = MEMORY[0x1F4188790](Node);
  uint64_t v24 = (uint64_t)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  char v17 = (char *)&v23 - v16;
  uint64_t v27 = a1;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v18(v11, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node);
    if (v4) {
      return result;
    }
  }
  outlined init with copy of PgQuery_Alias?(v27+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v18(v9, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v20 = v24;
    outlined init with take of PgQuery_OidList((uint64_t)v9, v24, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
    if (v4) {
      return result;
    }
  }
  unint64_t v21 = *(void *)(v27
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name
                  + 8);
  uint64_t v22 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0) {
    uint64_t v22 = *(void *)(v27
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name) & 0xFFFFFFFFFFFFLL;
  if (!v22
    || (swift_bridgeObjectRetain(),
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
        uint64_t result = swift_bridgeObjectRelease(),
        !v4))
  {
    if (!*(_DWORD *)(v27
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argnumber)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      uint64_t result = *(unsigned int *)(v27
                               + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      if (result) {
        return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_NamedArgExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v34 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v33 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v31[-v10];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  uint64_t v35 = &v31[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = &v31[-v15];
  uint64_t v17 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v18 = &v31[*(int *)(v12 + 48) - v15];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)&v31[-v15], &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v17, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v19 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48);
  if (v19(v16, 1, Node) == 1)
  {
    int v20 = v19(v18, 1, Node);
    swift_retain();
    swift_retain();
    if (v20 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_20;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v16, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v18, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    goto LABEL_6;
  }
  unint64_t v21 = v34;
  outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v34, type metadata accessor for PgQuery_Node);
  swift_retain();
  swift_retain();
  int v32 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v11, (uint64_t)v21, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias((uint64_t)v21, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v32 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_8:
  uint64_t v22 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  uint64_t v23 = v35;
  uint64_t v24 = (uint64_t)&v35[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v22, v24, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v23, 1, Node) != 1)
  {
    uint64_t v25 = v33;
    outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v19((unsigned char *)v24, 1, Node) != 1)
    {
      uint64_t v26 = v34;
      outlined init with take of PgQuery_OidList(v24, (uint64_t)v34, type metadata accessor for PgQuery_Node);
      char v27 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v25, (uint64_t)v26, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v27 & 1) == 0) {
        goto LABEL_20;
      }
      goto LABEL_15;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_Node);
LABEL_13:
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_20;
  }
  if (v19((unsigned char *)v24, 1, Node) != 1) {
    goto LABEL_13;
  }
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_15:
  if ((*(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name) == *(void *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name)
     && *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name
                  + 8) == *(void *)(a2
                                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name
                                    + 8)
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argnumber) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argnumber))
  {
    int v28 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    int v29 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    return v28 == v29;
  }
LABEL_20:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_NamedArgExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_NamedArgExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_NamedArgExpr()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_NamedArgExpr()
{
  return PgQuery_NamedArgExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_NamedArgExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NamedArgExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_NamedArgExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_NamedArgExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_NamedArgExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NamedArgExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_NamedArgExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NamedArgExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_NamedArgExpr(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_NamedArgExpr, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_NamedArgExpr.== infix(_:_:)) & 1;
}

uint64_t PgQuery_OpExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t PgQuery_FuncExpr._StorageClass.__deallocating_deinit(void *a1)
{
  outlined destroy of AnyValue?(v1 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v2, v3);
}

uint64_t ObjC metadata update function for PgQuery_OpExpr._StorageClass()
{
  return type metadata accessor for PgQuery_OpExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_OpExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OpExpr._StorageClass);
}

uint64_t PgQuery_OpExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_OpExpr, (void (*)(void))type metadata accessor for PgQuery_OpExpr._StorageClass, specialized PgQuery_OpExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_OpExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_OpExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
        case 3:
        case 4:
        case 6:
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_8;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_8;
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 9:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_8:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_OpExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_OpExpr(0) + 20);
  uint64_t v16 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_OpExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_OpExpr._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_OpExpr()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_OpExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_OpExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_OpExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OpExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OpExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OpExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_OpExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OpExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OpExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OpExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_DistinctExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_DistinctExpr._StorageClass()
{
  return type metadata accessor for PgQuery_DistinctExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_DistinctExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DistinctExpr._StorageClass);
}

uint64_t PgQuery_DistinctExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_DistinctExpr, (void (*)(void))type metadata accessor for PgQuery_DistinctExpr._StorageClass, specialized PgQuery_DistinctExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_DistinctExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_DistinctExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
        case 3:
        case 4:
        case 6:
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_8;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_8;
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 9:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_8:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DistinctExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_DistinctExpr(0) + 20);
  uint64_t v16 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DistinctExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_DistinctExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DistinctExpr()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DistinctExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_DistinctExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DistinctExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_DistinctExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DistinctExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DistinctExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DistinctExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_DistinctExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DistinctExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_DistinctExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_NullIfExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_NullIfExpr._StorageClass()
{
  return type metadata accessor for PgQuery_NullIfExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_NullIfExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NullIfExpr._StorageClass);
}

void type metadata completion function for PgQuery_OpExpr._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_NullIfExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_NullIfExpr, (void (*)(void))type metadata accessor for PgQuery_NullIfExpr._StorageClass, specialized PgQuery_NullIfExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_NullIfExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_NullIfExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
        case 3:
        case 4:
        case 6:
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_8;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_8;
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 9:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_8:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_NullIfExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_NullIfExpr(0) + 20);
  uint64_t v16 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_NullIfExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_NullIfExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_NullIfExpr()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_NullIfExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_NullIfExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_NullIfExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NullIfExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_NullIfExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_NullIfExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_NullIfExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NullIfExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_NullIfExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NullIfExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ScalarArrayOpExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_ScalarArrayOpExpr._StorageClass()
{
  return type metadata accessor for PgQuery_ScalarArrayOpExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ScalarArrayOpExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ScalarArrayOpExpr._StorageClass);
}

void type metadata completion function for PgQuery_ScalarArrayOpExpr._StorageClass()
{
}

uint64_t PgQuery_ScalarArrayOpExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_ScalarArrayOpExpr, (void (*)(void))type metadata accessor for PgQuery_ScalarArrayOpExpr._StorageClass, specialized PgQuery_ScalarArrayOpExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_ScalarArrayOpExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_ScalarArrayOpExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 5:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ScalarArrayOpExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_ScalarArrayOpExpr(0) + 20);
  uint64_t v16 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOr) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ScalarArrayOpExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ScalarArrayOpExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ScalarArrayOpExpr()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ScalarArrayOpExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ScalarArrayOpExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ScalarArrayOpExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ScalarArrayOpExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ScalarArrayOpExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ScalarArrayOpExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ScalarArrayOpExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ScalarArrayOpExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ScalarArrayOpExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ScalarArrayOpExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_BoolExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_BoolExpr._StorageClass()
{
  return type metadata accessor for PgQuery_BoolExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_BoolExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_BoolExpr._StorageClass);
}

void type metadata completion function for PgQuery_BoolExpr._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_BoolExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_BoolExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_BoolExpr._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_BoolExpr._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
          lazy protocol witness table accessor for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 4:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_BoolExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_BoolExpr(0) + 20);
  uint64_t v17 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop))
  {
    char v14 = *(unsigned char *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop
                   + 8);
    uint64_t v18 = *(void *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop);
    char v19 = v14;
    lazy protocol witness table accessor for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_BoolExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_BoolExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_BoolExpr()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_BoolExpr()
{
  return PgQuery_BoolExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_BoolExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_BoolExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_BoolExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_BoolExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_BoolExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_BoolExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_BoolExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_BoolExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_BoolExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_BoolExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_SubLink._StorageClass.__deallocating_deinit()
{
  return PgQuery_SubLink._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, (uint64_t)&OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect);
}

uint64_t ObjC metadata update function for PgQuery_SubLink._StorageClass()
{
  return type metadata accessor for PgQuery_SubLink._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SubLink._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SubLink._StorageClass);
}

void type metadata completion function for PgQuery_SubLink._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_SubLink.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_SubLink, (void (*)(void))type metadata accessor for PgQuery_SubLink._StorageClass, specialized PgQuery_SubLink._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_SubLink.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_SubLink.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
          lazy protocol witness table accessor for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 3:
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_SubLink.traverse<A>(visitor:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  uint64_t v36 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v33 = (char *)&v28 - v5;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v28 - v6;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  uint64_t v10 = MEMORY[0x1F4188790](Node);
  uint64_t v29 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v30 = (uint64_t)&v28 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v16 = *(int *)(type metadata accessor for PgQuery_SubLink(0) + 20);
  uint64_t v28 = v0;
  uint64_t v17 = *(void *)(v0 + v16);
  outlined init with copy of PgQuery_Alias?(v17 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  uint64_t v31 = v9 + 48;
  if (v18(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v19 = (uint64_t)v36;
    uint64_t v21 = v32;
    uint64_t v20 = (uint64_t)v33;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    uint64_t v22 = v32;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v21 = v22;
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
    uint64_t v19 = (uint64_t)v36;
    uint64_t v20 = (uint64_t)v33;
    if (v22) {
      return swift_release();
    }
  }
  if (*(void *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType))
  {
    char v23 = *(unsigned char *)(v17
                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType
                   + 8);
    uint64_t v34 = *(void *)(v17
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType);
    char v35 = v23;
    lazy protocol witness table accessor for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v21) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkID))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v21) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, v20, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v18((char *)v20, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v20, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v24 = v20;
    uint64_t v25 = v30;
    outlined init with take of PgQuery_OidList(v24, v30, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v25, type metadata accessor for PgQuery_Node);
    if (v21) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v21) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect, v19, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v18((char *)v19, 1, Node) != 1)
  {
    uint64_t v26 = v29;
    outlined init with take of PgQuery_OidList(v19, v29, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
    if (!v21) {
      goto LABEL_16;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v19, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_16:
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v21) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SubLink@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SubLink._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SubLink()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SubLink()
{
  return PgQuery_SubLink.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SubLink(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, (void (*)(uint64_t))type metadata accessor for PgQuery_SubLink);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SubLink@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SubLink._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SubLink(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, (void (*)(uint64_t))type metadata accessor for PgQuery_SubLink);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SubLink(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, (void (*)(uint64_t))type metadata accessor for PgQuery_SubLink);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_SubPlan._StorageClass.init()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, 1, 1, Node);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramIds) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planID) = 0;
  uint64_t v6 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName);
  *uint64_t v6 = 0;
  v6[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColType) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColTypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColCollation) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useHashTable) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unknownEqFalse) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parallelSafe) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setParam) = v5;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parParam) = v5;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v5;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startupCost) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__perCallCost) = 0;
  return v0;
}

uint64_t PgQuery_SubPlan._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_SubPlan._StorageClass()
{
  return type metadata accessor for PgQuery_SubPlan._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SubPlan._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SubPlan._StorageClass);
}

void type metadata completion function for PgQuery_SubPlan._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_SubPlan.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_SubPlan, (void (*)(void))type metadata accessor for PgQuery_SubPlan._StorageClass, specialized PgQuery_SubPlan._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_SubPlan.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_SubPlan.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
          lazy protocol witness table accessor for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 4:
        case 13:
        case 14:
        case 15:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 5:
        case 8:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 6:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 7:
        case 9:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 10:
        case 11:
        case 12:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 16:
        case 17:
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_SubPlan.traverse<A>(visitor:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v2 = MEMORY[0x1F4188790](v1 - 8);
  uint64_t v33 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v30 - v4;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v7 = *(void *)(Node - 8);
  uint64_t v8 = MEMORY[0x1F4188790](Node);
  uint64_t v32 = (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_SubPlan(0) + 20);
  uint64_t v30 = v0;
  uint64_t v13 = *(void *)(v0 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v14(v5, 1, Node) == 1)
  {
    uint64_t v31 = Node;
    uint64_t v15 = v36;
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v5, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    uint64_t v16 = v36;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v17 = Node;
    uint64_t v15 = v16;
    if (v16)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    uint64_t v31 = v17;
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
  }
  uint64_t v18 = (uint64_t)v33;
  if (!*(void *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType))
  {
    uint64_t v20 = v15;
    goto LABEL_10;
  }
  char v19 = *(unsigned char *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType
                 + 8);
  uint64_t v34 = *(void *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType);
  char v35 = v19;
  lazy protocol witness table accessor for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType();
  dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
  uint64_t v20 = v15;
  if (v15) {
    return swift_release();
  }
LABEL_10:
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, v18, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v14((char *)v18, 1, v31) == 1)
  {
    outlined destroy of AnyValue?(v18, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_15;
  }
  uint64_t v21 = v32;
  outlined init with take of PgQuery_OidList(v18, v32, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  if (v20)
  {
    outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
    return swift_release();
  }
  outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
LABEL_15:
  uint64_t v22 = v13;
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramIds)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v20)
    {
LABEL_24:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planID))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v20) {
      return swift_release();
    }
  }
  uint64_t v24 = *(void *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName);
  unint64_t v23 = *(void *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__planName
                  + 8);
  uint64_t v25 = HIBYTE(v23) & 0xF;
  if ((v23 & 0x2000000000000000) == 0) {
    uint64_t v25 = v24 & 0xFFFFFFFFFFFFLL;
  }
  if (v25)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v20) {
      goto LABEL_24;
    }
    swift_bridgeObjectRelease();
  }
  if (*(_DWORD *)(v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColType))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v20) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColTypmod))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v20) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__firstColCollation))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v20) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v22
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useHashTable) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v20) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v22
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unknownEqFalse) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v20) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v22
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parallelSafe) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v20) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v22
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setParam)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    uint64_t v27 = v22;
    if (v20) {
      return swift_release();
    }
  }
  else
  {
    uint64_t v27 = v22;
  }
  if (*(void *)(*(void *)(v27
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__parParam)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = v22;
    if (v20) {
      return swift_release();
    }
  }
  else
  {
    uint64_t v28 = v22;
  }
  if (*(void *)(*(void *)(v28
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    uint64_t v29 = v22;
    if (v20) {
      return swift_release();
    }
  }
  else
  {
    uint64_t v29 = v22;
  }
  if (*(double *)(v29
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startupCost) != 0.0)
  {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (v20) {
      return swift_release();
    }
  }
  if (*(double *)(v29
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__perCallCost) != 0.0)
  {
    dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)();
    if (v20) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SubPlan@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SubPlan._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SubPlan()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SubPlan()
{
  return PgQuery_SubPlan.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SubPlan(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_SubPlan);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SubPlan@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SubPlan._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SubPlan(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_SubPlan);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SubPlan(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_SubPlan);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlternativeSubPlan._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_AlternativeSubPlan._StorageClass()
{
  return type metadata accessor for PgQuery_AlternativeSubPlan._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlternativeSubPlan._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlternativeSubPlan._StorageClass);
}

void type metadata completion function for PgQuery_AlternativeSubPlan._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_AlternativeSubPlan.decodeMessage<A>(decoder:)()
{
  specialized PgQuery_AlternativeSubPlan._uniqueStorage()(type metadata accessor for PgQuery_AlternativeSubPlan, (void (*)(void))type metadata accessor for PgQuery_AlternativeSubPlan._StorageClass, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subplans);
  type metadata accessor for PgQuery_AlternativeSubPlan(0);
  swift_retain();
  uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (v1 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_AlternativeSubPlan.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlternativeSubPlan.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PgQuery_AlternativeSubPlan, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subplans);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlternativeSubPlan@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlternativeSubPlan._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlternativeSubPlan()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlternativeSubPlan()
{
  return PgQuery_AlternativeSubPlan.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlternativeSubPlan(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_AlternativeSubPlan);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlternativeSubPlan@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlternativeSubPlan._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlternativeSubPlan(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_AlternativeSubPlan);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlternativeSubPlan(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_AlternativeSubPlan);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlternativeSubPlan(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_AlternativeSubPlan.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlternativeSubPlan, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_AlternativeSubPlanP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subplans) & 1;
}

uint64_t PgQuery_FieldSelect._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_FieldSelect._StorageClass()
{
  return type metadata accessor for PgQuery_FieldSelect._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_FieldSelect._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FieldSelect._StorageClass);
}

void type metadata completion function for PgQuery_FieldSelect._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_FieldSelect.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_FieldSelect, (void (*)(void))type metadata accessor for PgQuery_FieldSelect._StorageClass, specialized PgQuery_FieldSelect._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_FieldSelect.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_FieldSelect.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_5;
        case 4:
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_FieldSelect.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_FieldSelect, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_FieldSelect.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_FieldSelect.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v13 = *(void *)(Node - 8);
  uint64_t v14 = MEMORY[0x1F4188790](Node);
  uint64_t v22 = (uint64_t)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v21 - v16;
  uint64_t v25 = a1;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v18(v11, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node);
    if (v4) {
      return result;
    }
  }
  outlined init with copy of PgQuery_Alias?(v25 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v18(v9, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v20 = v22;
    outlined init with take of PgQuery_OidList((uint64_t)v9, v22, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
    if (v4) {
      return result;
    }
  }
  if (!*(_DWORD *)(v25
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnum)
    || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_DWORD *)(v25
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
    {
      if (!*(_DWORD *)(v25
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
      {
        uint64_t result = *(unsigned int *)(v25
                                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid);
        if (result) {
          return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
        }
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_FieldSelect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v34 = &v31[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v33 = &v31[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v31[-v10];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  char v35 = &v31[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = &v31[-v15];
  uint64_t v17 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v18 = &v31[*(int *)(v12 + 48) - v15];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)&v31[-v15], &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v17, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  char v19 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48);
  if (v19(v16, 1, Node) == 1)
  {
    int v20 = v19(v18, 1, Node);
    swift_retain();
    swift_retain();
    if (v20 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_19;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v16, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v18, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    goto LABEL_6;
  }
  uint64_t v21 = v34;
  outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v34, type metadata accessor for PgQuery_Node);
  swift_retain();
  swift_retain();
  int v32 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v11, (uint64_t)v21, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias((uint64_t)v21, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v32 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_8:
  uint64_t v22 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  uint64_t v23 = v35;
  uint64_t v24 = (uint64_t)&v35[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v22, v24, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v23, 1, Node) != 1)
  {
    uint64_t v25 = v33;
    outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v19((unsigned char *)v24, 1, Node) != 1)
    {
      uint64_t v26 = v34;
      outlined init with take of PgQuery_OidList(v24, (uint64_t)v34, type metadata accessor for PgQuery_Node);
      char v27 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v25, (uint64_t)v26, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v27 & 1) == 0) {
        goto LABEL_19;
      }
      goto LABEL_15;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_Node);
LABEL_13:
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_19;
  }
  if (v19((unsigned char *)v24, 1, Node) != 1) {
    goto LABEL_13;
  }
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_15:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnum) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnum)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod))
  {
    int v28 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid);
    swift_release();
    int v29 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid);
    swift_release();
    return v28 == v29;
  }
LABEL_19:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FieldSelect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_FieldSelect._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FieldSelect()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FieldSelect(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldSelect);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FieldSelect@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FieldSelect._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FieldSelect(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldSelect);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FieldSelect(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldSelect);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_FieldSelect(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_FieldSelect, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_FieldSelect.== infix(_:_:)) & 1;
}

uint64_t PgQuery_FieldStore._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_FieldStore._StorageClass()
{
  return type metadata accessor for PgQuery_FieldStore._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_FieldStore._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FieldStore._StorageClass);
}

void type metadata completion function for PgQuery_FieldStore._StorageClass()
{
}

uint64_t PgQuery_FieldStore.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_FieldStore(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_FieldStore._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_FieldStore._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_FieldStore.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  char v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  uint64_t v13 = MEMORY[0x1F4188790](Node);
  uint64_t v26 = (uint64_t)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v25 - v15;
  uint64_t v17 = *(int *)(type metadata accessor for PgQuery_FieldStore(0) + 20);
  uint64_t v25 = v3;
  uint64_t v18 = *(void *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  char v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v20 = v19(v10, 1, Node);
  uint64_t v29 = a2;
  if (v20 == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v21 = v27;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    uint64_t v22 = v27;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v21 = v22;
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v22) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v8, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v23 = v26;
    outlined init with take of PgQuery_OidList((uint64_t)v8, v26, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
    if (v21) {
      return swift_release();
    }
  }
  if (!*(void *)(*(void *)(v18
                              + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newvals)
                  + 16)
    || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v21))
  {
    if (!*(void *)(*(void *)(v18
                                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnums)
                    + 16)
      || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v21))
    {
      if (!*(_DWORD *)(v18
                      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
        || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v21))
      {
        swift_release();
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FieldStore@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_FieldStore._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FieldStore()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_FieldStore()
{
  return PgQuery_FieldStore.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_FieldStore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_FieldStore.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FieldStore(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldStore);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FieldStore@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FieldStore._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FieldStore(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldStore);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FieldStore(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldStore);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RelabelType._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t PgQuery_FieldSelect._StorageClass.__deallocating_deinit(void *a1, uint64_t *a2, void *a3, uint64_t *a4)
{
  outlined destroy of AnyValue?(v4 + *a1, a2);
  outlined destroy of AnyValue?(v4 + *a3, a4);
  uint64_t v7 = *(unsigned int *)(*(void *)v4 + 48);
  uint64_t v8 = *(unsigned __int16 *)(*(void *)v4 + 52);

  return MEMORY[0x1F4186488](v4, v7, v8);
}

uint64_t ObjC metadata update function for PgQuery_RelabelType._StorageClass()
{
  return type metadata accessor for PgQuery_RelabelType._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RelabelType._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RelabelType._StorageClass);
}

uint64_t PgQuery_RelabelType.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RelabelType, (void (*)(void))type metadata accessor for PgQuery_RelabelType._StorageClass, specialized PgQuery_RelabelType._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RelabelType.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RelabelType.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 3:
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_9;
        case 4:
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_9;
        case 6:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_9:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RelabelType.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  uint64_t v15 = MEMORY[0x1F4188790](Node);
  uint64_t v27 = (uint64_t)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for PgQuery_RelabelType(0) + 20);
  uint64_t v26 = v5;
  uint64_t v20 = *(void *)(v5 + v19);
  outlined init with copy of PgQuery_Alias?(v20 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v22 = v21(v12, 1, Node);
  uint64_t v32 = a1;
  if (v22 == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v18, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v20 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  uint64_t v23 = v27;
  outlined init with take of PgQuery_OidList((uint64_t)v10, v27, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_7:
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat))
  {
    char v24 = *(unsigned char *)(v20
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat
                   + 8);
    uint64_t v30 = *(void *)(v20
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat);
    char v31 = v24;
    lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RelabelType@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RelabelType._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RelabelType()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RelabelType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_RelabelType.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RelabelType(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, (void (*)(uint64_t))type metadata accessor for PgQuery_RelabelType);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RelabelType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RelabelType._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RelabelType(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, (void (*)(uint64_t))type metadata accessor for PgQuery_RelabelType);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RelabelType(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, (void (*)(uint64_t))type metadata accessor for PgQuery_RelabelType);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CoerceViaIO._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_CoerceViaIO._StorageClass()
{
  return type metadata accessor for PgQuery_CoerceViaIO._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CoerceViaIO._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoerceViaIO._StorageClass);
}

void type metadata completion function for PgQuery_CoerceViaIO._StorageClass()
{
}

uint64_t PgQuery_CoerceViaIO.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CoerceViaIO, (void (*)(void))type metadata accessor for PgQuery_CoerceViaIO._StorageClass, specialized PgQuery_CoerceViaIO._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CoerceViaIO.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CoerceViaIO.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CoerceViaIO.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  uint64_t v15 = MEMORY[0x1F4188790](Node);
  uint64_t v27 = (uint64_t)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for PgQuery_CoerceViaIO(0) + 20);
  uint64_t v26 = v5;
  uint64_t v20 = *(void *)(v5 + v19);
  outlined init with copy of PgQuery_Alias?(v20 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v22 = v21(v12, 1, Node);
  uint64_t v32 = a1;
  if (v22 == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v18, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v20 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  uint64_t v23 = v27;
  outlined init with take of PgQuery_OidList((uint64_t)v10, v27, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_7:
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat))
  {
    char v24 = *(unsigned char *)(v20
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat
                   + 8);
    uint64_t v30 = *(void *)(v20
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat);
    char v31 = v24;
    lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CoerceViaIO@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CoerceViaIO._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CoerceViaIO()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CoerceViaIO(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CoerceViaIO.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CoerceViaIO(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceViaIO);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CoerceViaIO@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CoerceViaIO._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CoerceViaIO(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceViaIO);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CoerceViaIO(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceViaIO);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ArrayCoerceExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_ArrayCoerceExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr);
}

uint64_t ObjC metadata update function for PgQuery_ArrayCoerceExpr._StorageClass()
{
  return type metadata accessor for PgQuery_ArrayCoerceExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ArrayCoerceExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ArrayCoerceExpr._StorageClass);
}

void type metadata completion function for PgQuery_ArrayCoerceExpr._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_ArrayCoerceExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_ArrayCoerceExpr, (void (*)(void))type metadata accessor for PgQuery_ArrayCoerceExpr._StorageClass, specialized PgQuery_ArrayCoerceExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_ArrayCoerceExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_ArrayCoerceExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 4:
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_9;
        case 5:
        case 8:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_9;
        case 7:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_9:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ArrayCoerceExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v42 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v41 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v38 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v38 - v11;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  uint64_t v15 = MEMORY[0x1F4188790](Node);
  uint64_t v39 = (uint64_t)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v40 = (uint64_t)&v38 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v21 = *(int *)(type metadata accessor for PgQuery_ArrayCoerceExpr(0) + 20);
  uint64_t v38 = v3;
  uint64_t v22 = *(void *)(v3 + v21);
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v24 = v23(v12, 1, Node);
  uint64_t v43 = a1;
  if (v24 == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v20, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    uint64_t v25 = v46;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v20, type metadata accessor for PgQuery_Node);
    uint64_t v46 = v25;
    if (v25) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v23(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v26 = v40;
    outlined init with take of PgQuery_OidList((uint64_t)v10, v40, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v27 = v46;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
    uint64_t v46 = v27;
    if (v27) {
      return swift_release();
    }
  }
  uint64_t v28 = v41;
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr, v41, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v23((char *)v28, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v28, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v29 = v39;
    outlined init with take of PgQuery_OidList(v28, v39, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v30 = v46;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
    uint64_t v46 = v30;
    if (v30) {
      return swift_release();
    }
  }
  if (!*(_DWORD *)(v22
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype)
    || (uint64_t v31 = v46, dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), (v46 = v31) == 0))
  {
    if (!*(_DWORD *)(v22
                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod)
      || (uint64_t v32 = v46, dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), (v46 = v32) == 0))
    {
      if (!*(_DWORD *)(v22
                      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid)
        || (uint64_t v33 = v46, dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), (v46 = v33) == 0))
      {
        if (!*(void *)(v22
                        + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat)
          || (char v34 = *(unsigned char *)(v22
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat
                             + 8),
              uint64_t v44 = *(void *)(v22
                              + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat),
              char v45 = v34,
              lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm(),
              uint64_t v35 = v46,
              dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              (uint64_t v46 = v35) == 0))
        {
          if (!*(_DWORD *)(v22
                          + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location)
            || (uint64_t v36 = v46, dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), (v46 = v36) == 0))
          {
            swift_release();
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ArrayCoerceExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ArrayCoerceExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ArrayCoerceExpr()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ArrayCoerceExpr(uint64_t a1, uint64_t a2)
{
  return PgQuery_ArrayCoerceExpr.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ArrayCoerceExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayCoerceExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ArrayCoerceExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ArrayCoerceExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ArrayCoerceExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayCoerceExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ArrayCoerceExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayCoerceExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ConvertRowtypeExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_ConvertRowtypeExpr._StorageClass()
{
  return type metadata accessor for PgQuery_ConvertRowtypeExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ConvertRowtypeExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ConvertRowtypeExpr._StorageClass);
}

void type metadata completion function for PgQuery_ConvertRowtypeExpr._StorageClass()
{
}

uint64_t PgQuery_ConvertRowtypeExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_ConvertRowtypeExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_ConvertRowtypeExpr._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_ConvertRowtypeExpr._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_7;
        case 4:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_ConvertRowtypeExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v26 - v11;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  uint64_t v15 = MEMORY[0x1F4188790](Node);
  uint64_t v27 = (uint64_t)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for PgQuery_ConvertRowtypeExpr(0) + 20);
  uint64_t v26 = v5;
  uint64_t v20 = *(void *)(v5 + v19);
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v22 = v21(v12, 1, Node);
  uint64_t v32 = a1;
  if (v22 == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v18, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  uint64_t v23 = v27;
  outlined init with take of PgQuery_OidList((uint64_t)v10, v27, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_7:
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat))
  {
    char v24 = *(unsigned char *)(v20
                   + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat
                   + 8);
    uint64_t v30 = *(void *)(v20
                    + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat);
    char v31 = v24;
    lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ConvertRowtypeExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ConvertRowtypeExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ConvertRowtypeExpr()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ConvertRowtypeExpr()
{
  return PgQuery_ConvertRowtypeExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ConvertRowtypeExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ConvertRowtypeExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ConvertRowtypeExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ConvertRowtypeExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ConvertRowtypeExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ConvertRowtypeExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ConvertRowtypeExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ConvertRowtypeExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ConvertRowtypeExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ConvertRowtypeExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CollateExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_CollateExpr._StorageClass()
{
  return type metadata accessor for PgQuery_CollateExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CollateExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CollateExpr._StorageClass);
}

void type metadata completion function for PgQuery_CollateExpr._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_CollateExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v1 = v0;
  specialized PgQuery_CollateExpr._uniqueStorage()();
  type metadata accessor for PgQuery_CollateExpr(0);
  swift_retain();
  uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v3 & 1) == 0)
    {
      switch(v2)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v5 = v1;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v5 = v1;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v5 = v1;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          uint64_t v1 = v5;
          break;
        default:
          break;
      }
      uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CollateExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v29 = a3;
  uint64_t v28 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  uint64_t v15 = MEMORY[0x1F4188790](Node);
  uint64_t v26 = (uint64_t)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v25 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for PgQuery_CollateExpr(0) + 20);
  uint64_t v25 = v5;
  uint64_t v20 = *(void *)(v5 + v19);
  outlined init with copy of PgQuery_Alias?(v20 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v22 = v21(v12, 1, Node);
  uint64_t v27 = a1;
  if (v22 == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v18, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v20 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  uint64_t v23 = v26;
  outlined init with take of PgQuery_OidList((uint64_t)v10, v26, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_7:
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CollateExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CollateExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CollateExpr()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CollateExpr()
{
  return PgQuery_CollateExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CollateExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CollateExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CollateExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CollateExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CollateExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CollateExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CollateExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CaseExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_SubLink._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult);
}

uint64_t PgQuery_SubLink._StorageClass.__deallocating_deinit(void *a1, void *a2, uint64_t a3, void *a4)
{
  outlined destroy of AnyValue?(v4 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v4 + *a2, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v4 + *a4, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v7 = *(unsigned int *)(*(void *)v4 + 48);
  uint64_t v8 = *(unsigned __int16 *)(*(void *)v4 + 52);

  return MEMORY[0x1F4186488](v4, v7, v8);
}

uint64_t ObjC metadata update function for PgQuery_CaseExpr._StorageClass()
{
  return type metadata accessor for PgQuery_CaseExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CaseExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CaseExpr._StorageClass);
}

void type metadata completion function for PgQuery_CaseExpr._StorageClass()
{
}

uint64_t PgQuery_CaseExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CaseExpr, (void (*)(void))type metadata accessor for PgQuery_CaseExpr._StorageClass, specialized PgQuery_CaseExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CaseExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CaseExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CaseExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v35 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  char v34 = (char *)&v29 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v29 - v10;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v13 = *(void *)(Node - 8);
  uint64_t v14 = MEMORY[0x1F4188790](Node);
  uint64_t v30 = (uint64_t)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v31 = (uint64_t)&v29 - v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v20 = *(int *)(type metadata accessor for PgQuery_CaseExpr(0) + 20);
  uint64_t v29 = v3;
  uint64_t v21 = *(void *)(v3 + v20);
  outlined init with copy of PgQuery_Alias?(v21 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  int v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v32 = v13 + 48;
  if (v22(v11, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v23 = (uint64_t)v35;
    uint64_t v24 = (uint64_t)v34;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v19, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_Node);
    uint64_t v23 = (uint64_t)v35;
    uint64_t v24 = (uint64_t)v34;
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v21
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casetype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v21
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casecollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v21 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, v24, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v22((char *)v24, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v24, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v25 = v24;
    uint64_t v26 = v31;
    outlined init with take of PgQuery_OidList(v25, v31, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult, v23, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v22((char *)v23, 1, Node) != 1)
  {
    uint64_t v27 = v30;
    outlined init with take of PgQuery_OidList(v23, v30, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
    if (!v4) {
      goto LABEL_16;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v23, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_16:
  if (*(_DWORD *)(v21
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CaseExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CaseExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CaseExpr()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CaseExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CaseExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CaseExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CaseExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CaseExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CaseExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CaseExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CaseWhen._StorageClass.__deallocating_deinit()
{
  return PgQuery_ArrayCoerceExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result);
}

uint64_t PgQuery_ArrayCoerceExpr._StorageClass.__deallocating_deinit(void *a1, void *a2, void *a3)
{
  outlined destroy of AnyValue?(v3 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v3 + *a2, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v3 + *a3, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v6 = *(unsigned int *)(*(void *)v3 + 48);
  uint64_t v7 = *(unsigned __int16 *)(*(void *)v3 + 52);

  return MEMORY[0x1F4186488](v3, v6, v7);
}

uint64_t ObjC metadata update function for PgQuery_CaseWhen._StorageClass()
{
  return type metadata accessor for PgQuery_CaseWhen._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CaseWhen._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CaseWhen._StorageClass);
}

void type metadata completion function for PgQuery_CaseWhen._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_CaseWhen.decodeMessage<A>(decoder:)()
{
  specialized PgQuery_CaseWhen._uniqueStorage()();
  type metadata accessor for PgQuery_CaseWhen(0);
  swift_retain();
  uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CaseWhen.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v37 = (uint64_t)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v33 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  uint64_t v15 = MEMORY[0x1F4188790](Node);
  uint64_t v35 = (uint64_t)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v36 = (uint64_t)&v33 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v33 - v19;
  uint64_t v21 = *(int *)(type metadata accessor for PgQuery_CaseWhen(0) + 20);
  uint64_t v34 = v3;
  uint64_t v22 = *(void *)(v3 + v21);
  outlined init with copy of PgQuery_Alias?(v22 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v24 = v23(v12, 1, Node);
  uint64_t v38 = a1;
  if (v24 == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v25 = v39;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v20, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    uint64_t v26 = v39;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v27 = (uint64_t)v20;
    uint64_t v25 = v26;
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
    if (v26) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v22 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v23(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v28 = (uint64_t)v10;
    uint64_t v29 = v36;
    outlined init with take of PgQuery_OidList(v28, v36, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
    if (v25) {
      return swift_release();
    }
  }
  uint64_t v30 = v37;
  outlined init with copy of PgQuery_Alias?(v22 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result, v37, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v23((char *)v30, 1, Node) != 1)
  {
    uint64_t v31 = v35;
    outlined init with take of PgQuery_OidList(v30, v35, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
    if (!v25) {
      goto LABEL_10;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_10:
  if (*(_DWORD *)(v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v25) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_CaseWhen.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v54 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v50 = (uint64_t)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v52 = (uint64_t)&v49 - v11;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v49 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v51 = (uint64_t)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v49 - v18;
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v49 - v20;
  uint64_t v22 = a2 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v53 = v23;
  int v24 = (char *)&v49 + *(int *)(v23 + 48) - v20;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)&v49 - v20, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v22, (uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v25(v21, 1, Node) == 1)
  {
    int v26 = v25(v24, 1, Node);
    swift_retain();
    swift_retain();
    if (v26 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_23;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v25(v24, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Node);
    goto LABEL_6;
  }
  uint64_t v27 = v54;
  outlined init with take of PgQuery_OidList((uint64_t)v24, v54, type metadata accessor for PgQuery_Node);
  swift_retain();
  swift_retain();
  LODWORD(v49) = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v13, v27, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v49 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_8:
  uint64_t v49 = a1;
  uint64_t v28 = a1
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  uint64_t v29 = a2;
  uint64_t v30 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  uint64_t v31 = v53;
  uint64_t v32 = (uint64_t)&v19[*(int *)(v53 + 48)];
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v30, v32, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v25(v19, 1, Node) == 1)
  {
    if (v25((char *)v32, 1, Node) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v33 = a2;
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v35 = (uint64_t)v19;
LABEL_22:
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_23;
  }
  uint64_t v34 = v52;
  outlined init with copy of PgQuery_Alias?((uint64_t)v19, v52, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v25((char *)v32, 1, Node) == 1)
  {
    outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
    goto LABEL_14;
  }
  uint64_t v36 = v54;
  outlined init with take of PgQuery_OidList(v32, v54, type metadata accessor for PgQuery_Node);
  char v37 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v34, v36, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v34, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v33 = v29;
  if ((v37 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_16:
  uint64_t v38 = v33
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result;
  uint64_t v39 = *(int *)(v31 + 48);
  uint64_t v40 = v51;
  uint64_t v41 = v51 + v39;
  outlined init with copy of PgQuery_Alias?(v49 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result, v51, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v38, v41, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v25((char *)v40, 1, Node) != 1)
  {
    uint64_t v43 = v50;
    outlined init with copy of PgQuery_Alias?(v40, v50, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v25((char *)v41, 1, Node) == 1)
    {
      outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
      goto LABEL_21;
    }
    uint64_t v45 = v54;
    outlined init with take of PgQuery_OidList(v41, v54, type metadata accessor for PgQuery_Node);
    char v46 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v43, v45, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
    outlined destroy of PgQuery_Alias(v45, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
    outlined destroy of AnyValue?(v40, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v42 = v49;
    if (v46) {
      goto LABEL_26;
    }
LABEL_23:
    swift_release();
    swift_release();
    return 0;
  }
  if (v25((char *)v41, 1, Node) != 1)
  {
LABEL_21:
    uint64_t v35 = v40;
    goto LABEL_22;
  }
  outlined destroy of AnyValue?(v40, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v42 = v49;
LABEL_26:
  int v47 = *(_DWORD *)(v42
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  int v48 = *(_DWORD *)(v29
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  swift_release();
  return v47 == v48;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CaseWhen@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CaseWhen._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CaseWhen()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CaseWhen()
{
  return PgQuery_CaseWhen.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CaseWhen(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CaseWhen.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CaseWhen(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseWhen);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CaseWhen@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CaseWhen._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CaseWhen(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseWhen);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CaseWhen(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseWhen);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CaseWhen(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CaseWhen, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CaseWhen.== infix(_:_:)) & 1;
}

uint64_t PgQuery_CaseTestExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_CaseTestExpr._StorageClass()
{
  return type metadata accessor for PgQuery_CaseTestExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CaseTestExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CaseTestExpr._StorageClass);
}

void type metadata completion function for PgQuery_CaseTestExpr._StorageClass()
{
}

uint64_t PgQuery_CaseTestExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v1 = v0;
  specialized PgQuery_CaseTestExpr._uniqueStorage()();
  type metadata accessor for PgQuery_CaseTestExpr(0);
  swift_retain();
  uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v3 & 1) == 0)
    {
      switch(v2)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v5 = v1;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 4:
          uint64_t v5 = v1;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v5 = v1;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          uint64_t v1 = v5;
          break;
        default:
          break;
      }
      uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CaseTestExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_CaseTestExpr, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CaseTestExpr.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_CaseTestExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[3] = a4;
  v14[1] = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
    if (v4) {
      return result;
    }
  }
  if (!*(_DWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID)
    || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      uint64_t result = *(unsigned int *)(a1
                               + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
      if (result) {
        return dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_CaseTestExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v16 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v15, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17((uint64_t)v14, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v17(v16, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v16, (uint64_t)v7, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      char v19 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v19 & 1) == 0) {
        goto LABEL_11;
      }
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_11;
  }
  unsigned int v18 = v17(v16, 1, Node);
  swift_retain();
  swift_retain();
  if (v18 != 1) {
    goto LABEL_6;
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod))
  {
    int v20 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
    swift_release();
    int v21 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation);
    swift_release();
    return v20 == v21;
  }
LABEL_11:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CaseTestExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CaseTestExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CaseTestExpr()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CaseTestExpr()
{
  return PgQuery_CaseTestExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CaseTestExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseTestExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CaseTestExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CaseTestExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CaseTestExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseTestExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CaseTestExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseTestExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CaseTestExpr(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CaseTestExpr, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CaseTestExpr.== infix(_:_:)) & 1;
}

uint64_t PgQuery_ArrayExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_ArrayExpr._StorageClass()
{
  return type metadata accessor for PgQuery_ArrayExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ArrayExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ArrayExpr._StorageClass);
}

void type metadata completion function for PgQuery_ArrayExpr._StorageClass()
{
}

uint64_t PgQuery_ArrayExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_ArrayExpr, (void (*)(void))type metadata accessor for PgQuery_ArrayExpr._StorageClass, specialized PgQuery_ArrayExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_ArrayExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_ArrayExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 6:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ArrayExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_ArrayExpr(0) + 20);
  uint64_t v16 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayTypeid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayCollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elementTypeid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elements)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__multidims) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ArrayExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ArrayExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ArrayExpr()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ArrayExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ArrayExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ArrayExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ArrayExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ArrayExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ArrayExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ArrayExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RowExpr._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_RowExpr._StorageClass()
{
  return type metadata accessor for PgQuery_RowExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RowExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RowExpr._StorageClass);
}

void type metadata completion function for PgQuery_RowExpr._StorageClass()
{
}

uint64_t PgQuery_RowExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RowExpr, (void (*)(void))type metadata accessor for PgQuery_RowExpr._StorageClass, specialized PgQuery_RowExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RowExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RowExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 4:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RowExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_RowExpr(0) + 20);
  uint64_t v17 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowTypeid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat))
  {
    char v14 = *(unsigned char *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat
                   + 8);
    uint64_t v18 = *(void *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat);
    char v19 = v14;
    lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RowExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RowExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RowExpr()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RowExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_RowExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RowExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RowExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RowExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RowExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RowExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RowCompareExpr._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v3, 1, 1, Node);
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos) = MEMORY[0x1E4FBC860];
  uint64_t v8 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies) = v7;
  uint64_t v9 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids) = v7;
  uint64_t v10 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs) = v7;
  uint64_t v11 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs) = v7;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  char v12 = *(unsigned char *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype
                 + 8);
  *(void *)uint64_t v5 = *(void *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype);
  *(unsigned char *)(v5 + 8) = v12;
  *(void *)(v1 + v6) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v8) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v9) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v10) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs);
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v1 + v11) = v13;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_RowCompareExpr._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_RowCompareExpr._StorageClass()
{
  return type metadata accessor for PgQuery_RowCompareExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RowCompareExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RowCompareExpr._StorageClass);
}

void type metadata completion function for PgQuery_RowCompareExpr._StorageClass()
{
}

void type metadata completion function for PgQuery_RangeTblFunction._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

{
  type metadata completion function for PgQuery_RangeTblFunction._StorageClass();
}

uint64_t PgQuery_RowCompareExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RowCompareExpr, (void (*)(void))type metadata accessor for PgQuery_RowCompareExpr._StorageClass, PgQuery_RowCompareExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RowCompareExpr.decodeMessage<A>(decoder:));
}

uint64_t PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    uint64_t v14 = swift_retain();
    *(void *)(v7 + v13) = a6(v14);
    swift_release();
  }
  uint64_t v15 = swift_retain();
  a7(v15, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in PgQuery_RowCompareExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
          lazy protocol witness table accessor for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_8:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RowCompareExpr.traverse<A>(visitor:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(type metadata accessor for PgQuery_RowCompareExpr(0) + 20);
  uint64_t v15 = v0;
  uint64_t v9 = *(void *)(v0 + v8);
  outlined init with copy of PgQuery_Alias?(v9+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v10 = v18;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v3, (uint64_t)v7, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    uint64_t v11 = v18;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v10 = v11;
    if (v11)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
  }
  if (!*(void *)(v9
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype)
    || (char v12 = *(unsigned char *)(v9
                       + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype
                       + 8),
        uint64_t v16 = *(void *)(v9
                        + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype),
        char v17 = v12,
        lazy protocol witness table accessor for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType(),
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v10))
  {
    if (!*(void *)(*(void *)(v9
                                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos)
                    + 16)
      || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
    {
      if (!*(void *)(*(void *)(v9
                                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies)
                      + 16)
        || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
      {
        if (!*(void *)(*(void *)(v9
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids)
                        + 16)
          || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
        {
          if (!*(void *)(*(void *)(v9
                                      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs)
                          + 16)
            || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
          {
            if (!*(void *)(*(void *)(v9
                                        + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs)
                            + 16)
              || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
            {
              swift_release();
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RowCompareExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RowCompareExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RowCompareExpr()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RowCompareExpr()
{
  return PgQuery_RowCompareExpr.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RowCompareExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowCompareExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RowCompareExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RowCompareExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RowCompareExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowCompareExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RowCompareExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowCompareExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CoalesceExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_CoalesceExpr._StorageClass()
{
  return type metadata accessor for PgQuery_CoalesceExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CoalesceExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoalesceExpr._StorageClass);
}

void type metadata completion function for PgQuery_CoalesceExpr._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_CoalesceExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_CoalesceExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_CoalesceExpr._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_CoalesceExpr._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
        case 3:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_7;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CoalesceExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_CoalesceExpr(0) + 20);
  uint64_t v16 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescetype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescecollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CoalesceExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CoalesceExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CoalesceExpr()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CoalesceExpr()
{
  return PgQuery_CoalesceExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CoalesceExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CoalesceExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CoalesceExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CoalesceExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CoalesceExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CoalesceExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CoalesceExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CoalesceExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CoalesceExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CoalesceExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_MinMaxExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_MinMaxExpr._StorageClass()
{
  return type metadata accessor for PgQuery_MinMaxExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_MinMaxExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_MinMaxExpr._StorageClass);
}

void type metadata completion function for PgQuery_MinMaxExpr._StorageClass()
{
}

uint64_t PgQuery_MinMaxExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_MinMaxExpr, (void (*)(void))type metadata accessor for PgQuery_MinMaxExpr._StorageClass, specialized PgQuery_MinMaxExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_MinMaxExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_MinMaxExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 5:
          lazy protocol witness table accessor for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_MinMaxExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_MinMaxExpr(0) + 20);
  uint64_t v17 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxtype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op))
  {
    char v14 = *(unsigned char *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                   + 8);
    uint64_t v18 = *(void *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
    char v19 = v14;
    lazy protocol witness table accessor for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_MinMaxExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_MinMaxExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_MinMaxExpr()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_MinMaxExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_MinMaxExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_MinMaxExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_MinMaxExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_MinMaxExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_MinMaxExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_MinMaxExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_MinMaxExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_MinMaxExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_MinMaxExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_SQLValueFunction._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_SQLValueFunction._StorageClass()
{
  return type metadata accessor for PgQuery_SQLValueFunction._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SQLValueFunction._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SQLValueFunction._StorageClass);
}

void type metadata completion function for PgQuery_SQLValueFunction._StorageClass()
{
}

uint64_t PgQuery_SQLValueFunction.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_SQLValueFunction(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_SQLValueFunction._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_SQLValueFunction._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
          lazy protocol witness table accessor for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 3:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_7;
        case 4:
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_SQLValueFunction.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_SQLValueFunction(0) + 20);
  uint64_t v17 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op))
  {
    char v14 = *(unsigned char *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                   + 8);
    uint64_t v18 = *(void *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
    char v19 = v14;
    lazy protocol witness table accessor for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SQLValueFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SQLValueFunction._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SQLValueFunction()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_SQLValueFunction()
{
  return PgQuery_SQLValueFunction.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SQLValueFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SQLValueFunction.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SQLValueFunction(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_SQLValueFunction);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SQLValueFunction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SQLValueFunction._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SQLValueFunction(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_SQLValueFunction);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SQLValueFunction(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_SQLValueFunction);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_XmlExpr._StorageClass.init()()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v3 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(void *)uint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name);
  *uint64_t v4 = 0;
  v4[1] = 0xE000000000000000;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namedArgs) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argNames) = v5;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v5;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  return v0;
}

uint64_t PgQuery_XmlExpr._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_XmlExpr._StorageClass()
{
  return type metadata accessor for PgQuery_XmlExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_XmlExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_XmlExpr._StorageClass);
}

void type metadata completion function for PgQuery_XmlExpr._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_XmlExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_XmlExpr, (void (*)(void))type metadata accessor for PgQuery_XmlExpr._StorageClass, specialized PgQuery_XmlExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_XmlExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_XmlExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_13;
        case 2:
          lazy protocol witness table accessor for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp();
          goto LABEL_10;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_13;
        case 4:
        case 5:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_13;
        case 7:
          lazy protocol witness table accessor for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType();
LABEL_10:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_13;
        case 8:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_13;
        case 9:
        case 10:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_13:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_XmlExpr.traverse<A>(visitor:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(type metadata accessor for PgQuery_XmlExpr(0) + 20);
  uint64_t v18 = v0;
  uint64_t v9 = *(void *)(v0 + v8);
  outlined init with copy of PgQuery_Alias?(v9 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v10 = v21;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v3, (uint64_t)v7, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    uint64_t v11 = v21;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v10 = v11;
    if (v11)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
  }
  if (!*(void *)(v9
                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op)
    || (char v12 = *(unsigned char *)(v9
                       + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                       + 8),
        uint64_t v19 = *(void *)(v9
                        + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op),
        char v20 = v12,
        lazy protocol witness table accessor for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp(),
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v10))
  {
    unint64_t v13 = *(void *)(v9
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name
                    + 8);
    uint64_t v14 = HIBYTE(v13) & 0xF;
    if ((v13 & 0x2000000000000000) == 0) {
      uint64_t v14 = *(void *)(v9
    }
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name) & 0xFFFFFFFFFFFFLL;
    if (!v14
      || (swift_bridgeObjectRetain(),
          dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
          swift_bridgeObjectRelease(),
          !v10))
    {
      if (!*(void *)(*(void *)(v9
                                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namedArgs)
                      + 16)
        || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
      {
        if (!*(void *)(*(void *)(v9
                                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argNames)
                        + 16)
          || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
        {
          if (!*(void *)(*(void *)(v9
                                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                          + 16)
            || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
          {
            if (!*(void *)(v9
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption)
              || (char v15 = *(unsigned char *)(v9
                                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption
                                 + 8),
                  uint64_t v19 = *(void *)(v9
                                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xmloption),
                  char v20 = v15,
                  lazy protocol witness table accessor for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType(),
                  dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                  !v10))
            {
              if (!*(_DWORD *)(v9
                              + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type)
                || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v10))
              {
                if (!*(_DWORD *)(v9
                                + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod)
                  || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v10))
                {
                  if (!*(_DWORD *)(v9
                                  + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_XmlExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location)
                    || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v10))
                  {
                    swift_release();
                    return UnknownStorage.traverse<A>(visitor:)();
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_XmlExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_XmlExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_XmlExpr()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_XmlExpr()
{
  return PgQuery_XmlExpr.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_XmlExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_XmlExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_XmlExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_XmlExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_XmlExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_NullTest._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_NullTest._StorageClass()
{
  return type metadata accessor for PgQuery_NullTest._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_NullTest._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NullTest._StorageClass);
}

void type metadata completion function for PgQuery_NullTest._StorageClass()
{
}

uint64_t PgQuery_NullTest.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_NullTest(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_NullTest._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_NullTest._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
          lazy protocol witness table accessor for type PgQuery_NullTestType and conformance PgQuery_NullTestType();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 4:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_7;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_NullTest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  char v12 = (char *)&v26 - v11;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  uint64_t v15 = MEMORY[0x1F4188790](Node);
  uint64_t v27 = (uint64_t)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for PgQuery_NullTest(0) + 20);
  uint64_t v26 = v5;
  uint64_t v20 = *(void *)(v5 + v19);
  outlined init with copy of PgQuery_Alias?(v20 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v22 = v21(v12, 1, Node);
  uint64_t v32 = a1;
  if (v22 == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v18, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v20 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  uint64_t v23 = v27;
  outlined init with take of PgQuery_OidList((uint64_t)v10, v27, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_7:
  if (*(void *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype))
  {
    char v24 = *(unsigned char *)(v20
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype
                   + 8);
    uint64_t v30 = *(void *)(v20
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype);
    char v31 = v24;
    lazy protocol witness table accessor for type PgQuery_NullTestType and conformance PgQuery_NullTestType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v20
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argisrow) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_NullTest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_NullTest._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_NullTest()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_NullTest()
{
  return PgQuery_NullTest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_NullTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_NullTest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_NullTest(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, (void (*)(uint64_t))type metadata accessor for PgQuery_NullTest);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_NullTest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_NullTest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_NullTest(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, (void (*)(uint64_t))type metadata accessor for PgQuery_NullTest);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_NullTest(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, (void (*)(uint64_t))type metadata accessor for PgQuery_NullTest);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_BooleanTest._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_BooleanTest._StorageClass()
{
  return type metadata accessor for PgQuery_BooleanTest._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_BooleanTest._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_BooleanTest._StorageClass);
}

void type metadata completion function for PgQuery_BooleanTest._StorageClass()
{
}

uint64_t PgQuery_BooleanTest.decodeMessage<A>(decoder:)()
{
  uint64_t v1 = v0;
  specialized PgQuery_BooleanTest._uniqueStorage()();
  type metadata accessor for PgQuery_BooleanTest(0);
  swift_retain();
  uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v3 & 1) == 0)
    {
      switch(v2)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v5 = v1;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          lazy protocol witness table accessor for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType();
          uint64_t v5 = v1;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v5 = v1;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          uint64_t v1 = v5;
          break;
        default:
          break;
      }
      uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_BooleanTest.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v32 = a3;
  uint64_t v29 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  char v12 = (char *)&v26 - v11;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  uint64_t v15 = MEMORY[0x1F4188790](Node);
  uint64_t v27 = (uint64_t)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for PgQuery_BooleanTest(0) + 20);
  uint64_t v26 = v5;
  uint64_t v20 = *(void *)(v5 + v19);
  outlined init with copy of PgQuery_Alias?(v20 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v22 = v21(v12, 1, Node);
  uint64_t v28 = a1;
  if (v22 == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v18, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v20 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  uint64_t v23 = v27;
  outlined init with take of PgQuery_OidList((uint64_t)v10, v27, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_7:
  if (*(void *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype))
  {
    char v24 = *(unsigned char *)(v20
                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype
                   + 8);
    uint64_t v30 = *(void *)(v20
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype);
    char v31 = v24;
    lazy protocol witness table accessor for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_BooleanTest@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_BooleanTest._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_BooleanTest()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_BooleanTest()
{
  return PgQuery_BooleanTest.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_BooleanTest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_BooleanTest.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_BooleanTest(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, (void (*)(uint64_t))type metadata accessor for PgQuery_BooleanTest);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_BooleanTest@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_BooleanTest._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_BooleanTest(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, (void (*)(uint64_t))type metadata accessor for PgQuery_BooleanTest);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_BooleanTest(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, (void (*)(uint64_t))type metadata accessor for PgQuery_BooleanTest);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CoerceToDomain._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_CoerceToDomain._StorageClass()
{
  return type metadata accessor for PgQuery_CoerceToDomain._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CoerceToDomain._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoerceToDomain._StorageClass);
}

void type metadata completion function for PgQuery_RelabelType._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_CoerceToDomain.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CoerceToDomain, (void (*)(void))type metadata accessor for PgQuery_CoerceToDomain._StorageClass, specialized PgQuery_CoerceToDomain._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CoerceToDomain.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CoerceToDomain.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 3:
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_9;
        case 4:
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_9;
        case 6:
          lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_9:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CoerceToDomain.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  char v12 = (char *)&v26 - v11;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  uint64_t v15 = MEMORY[0x1F4188790](Node);
  uint64_t v27 = (uint64_t)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v26 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for PgQuery_CoerceToDomain(0) + 20);
  uint64_t v26 = v5;
  uint64_t v20 = *(void *)(v5 + v19);
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v22 = v21(v12, 1, Node);
  uint64_t v32 = a1;
  if (v22 == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v18, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  uint64_t v23 = v27;
  outlined init with take of PgQuery_OidList((uint64_t)v10, v27, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_7:
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat))
  {
    char v24 = *(unsigned char *)(v20
                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat
                   + 8);
    uint64_t v30 = *(void *)(v20
                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat);
    char v31 = v24;
    lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CoerceToDomain@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CoerceToDomain._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CoerceToDomain()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CoerceToDomain(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CoerceToDomain.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CoerceToDomain(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomain);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CoerceToDomain@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CoerceToDomain._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CoerceToDomain(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomain);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CoerceToDomain(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomain);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CoerceToDomainValue._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_CoerceToDomainValue._StorageClass()
{
  return type metadata accessor for PgQuery_CoerceToDomainValue._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CoerceToDomainValue._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoerceToDomainValue._StorageClass);
}

void type metadata completion function for PgQuery_CoerceToDomainValue._StorageClass()
{
}

uint64_t PgQuery_CoerceToDomainValue.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_CoerceToDomainValue(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_CoerceToDomainValue._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_CoerceToDomainValue._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
        case 4:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_7;
        case 3:
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CoerceToDomainValue.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_CoerceToDomainValue, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CoerceToDomainValue.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_CoerceToDomainValue.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[3] = a4;
  v14[1] = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  char v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
    if (v4) {
      return result;
    }
  }
  if (!*(_DWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID)
    || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      if (!*(_DWORD *)(a1
                      + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
      {
        uint64_t result = *(unsigned int *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        if (result) {
          return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
        }
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_CoerceToDomainValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v16 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v15, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17((uint64_t)v14, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v17(v16, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v16, (uint64_t)v7, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      char v19 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v19 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_12;
  }
  unsigned int v18 = v17(v16, 1, Node);
  swift_retain();
  swift_retain();
  if (v18 != 1) {
    goto LABEL_6;
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation))
  {
    int v20 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    int v21 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    return v20 == v21;
  }
LABEL_12:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CoerceToDomainValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CoerceToDomainValue._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CoerceToDomainValue()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CoerceToDomainValue()
{
  return PgQuery_CoerceToDomainValue.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CoerceToDomainValue(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomainValue);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CoerceToDomainValue@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CoerceToDomainValue._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CoerceToDomainValue(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomainValue);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CoerceToDomainValue(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomainValue);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CoerceToDomainValue(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CoerceToDomainValue, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CoerceToDomainValue.== infix(_:_:)) & 1;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v4 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v5 = *(void *)(*(void *)v4 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(*(void *)v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v4 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_18EB38D60;
  unint64_t v7 = v19 + v6;
  unint64_t v8 = v19 + v6 + v4[14];
  *(void *)(v19 + v6) = 1;
  *(void *)unint64_t v8 = "xpr";
  *(void *)(v8 + 8) = 3;
  *(unsigned char *)(v8 + 16) = 2;
  uint64_t v9 = *MEMORY[0x1E4F70FB8];
  uint64_t v10 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v11 = *(void (**)(void))(*(void *)(v10 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v11)(v8, v9, v10);
  unint64_t v12 = v7 + v5 + v4[14];
  *(void *)(v7 + v5) = 2;
  *(void *)unint64_t v12 = "type_id";
  *(void *)(v12 + 8) = 7;
  *(unsigned char *)(v12 + 16) = 2;
  v11();
  uint64_t v13 = (void *)(v7 + 2 * v5);
  uint64_t v14 = (char *)v13 + v4[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "type_mod";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v11();
  uint64_t v15 = (void *)(v7 + 3 * v5);
  uint64_t v16 = (char *)v15 + v4[14];
  *uint64_t v15 = 4;
  *(void *)uint64_t v16 = "collation";
  *((void *)v16 + 1) = 9;
  v16[16] = 2;
  v11();
  uint64_t v17 = v7 + 4 * v5 + v4[14];
  *(void *)(v7 + 4 * v5) = 5;
  *(void *)uint64_t v17 = "location";
  *(void *)(v17 + 8) = 8;
  *(unsigned char *)(v17 + 16) = 2;
  v11();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v3;

  uint64_t v3 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return _NameMap.init()();
}

uint64_t PgQuery_SetToDefault._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_SetToDefault._StorageClass()
{
  return type metadata accessor for PgQuery_SetToDefault._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SetToDefault._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SetToDefault._StorageClass);
}

uint64_t PgQuery_SetToDefault.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_SetToDefault(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_SetToDefault._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_SetToDefault._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
        case 4:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_7;
        case 3:
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_SetToDefault.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_SetToDefault, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_SetToDefault.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_SetToDefault.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v14[3] = a4;
  v14[1] = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  unint64_t v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
    if (v4) {
      return result;
    }
  }
  if (!*(_DWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID)
    || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!*(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      if (!*(_DWORD *)(a1
                      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
      {
        uint64_t result = *(unsigned int *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
        if (result) {
          return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
        }
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_SetToDefault.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v16 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v15, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17((uint64_t)v14, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v17(v16, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v16, (uint64_t)v7, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      char v19 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v19 & 1) == 0) {
        goto LABEL_12;
      }
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_12;
  }
  unsigned int v18 = v17(v16, 1, Node);
  swift_retain();
  swift_retain();
  if (v18 != 1) {
    goto LABEL_6;
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod)
    && *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation))
  {
    int v20 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    int v21 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    return v20 == v21;
  }
LABEL_12:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SetToDefault@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SetToDefault._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SetToDefault()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_SetToDefault()
{
  return PgQuery_SetToDefault.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SetToDefault(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, (void (*)(uint64_t))type metadata accessor for PgQuery_SetToDefault);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SetToDefault@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SetToDefault._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SetToDefault(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, (void (*)(uint64_t))type metadata accessor for PgQuery_SetToDefault);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SetToDefault(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, (void (*)(uint64_t))type metadata accessor for PgQuery_SetToDefault);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_SetToDefault(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_SetToDefault, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_SetToDefault.== infix(_:_:)) & 1;
}

uint64_t PgQuery_CurrentOfExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_CurrentOfExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr);
}

uint64_t ObjC metadata update function for PgQuery_CurrentOfExpr._StorageClass()
{
  return type metadata accessor for PgQuery_CurrentOfExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CurrentOfExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CurrentOfExpr._StorageClass);
}

void type metadata completion function for PgQuery_CurrentOfExpr._StorageClass()
{
}

uint64_t PgQuery_CurrentOfExpr.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_CurrentOfExpr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_CurrentOfExpr._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_CurrentOfExpr._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_7;
        case 3:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 4:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CurrentOfExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_CurrentOfExpr, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CurrentOfExpr.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_CurrentOfExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v16[3] = a4;
  v16[1] = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
    if (v4) {
      return result;
    }
  }
  if (!*(_DWORD *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cvarno)
    || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    unint64_t v14 = *(void *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName
                    + 8);
    uint64_t v15 = HIBYTE(v14) & 0xF;
    if ((v14 & 0x2000000000000000) == 0) {
      uint64_t v15 = *(void *)(a1
    }
                      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName) & 0xFFFFFFFFFFFFLL;
    if (!v15
      || (swift_bridgeObjectRetain(),
          dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
          uint64_t result = swift_bridgeObjectRelease(),
          !v4))
    {
      uint64_t result = *(unsigned int *)(a1
                               + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorParam);
      if (result) {
        return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_CurrentOfExpr.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  unint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v16 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v15, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17((uint64_t)v14, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v17(v16, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v16, (uint64_t)v7, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      char v19 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v19 & 1) == 0) {
        goto LABEL_13;
      }
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_13;
  }
  unsigned int v18 = v17(v16, 1, Node);
  swift_retain();
  swift_retain();
  if (v18 != 1) {
    goto LABEL_6;
  }
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cvarno) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cvarno)
    && (*(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName) == *(void *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName)
     && *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName
                  + 8) == *(void *)(a2
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName
                                    + 8)
     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
  {
    int v20 = *(_DWORD *)(a1
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorParam);
    swift_release();
    int v21 = *(_DWORD *)(a2
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorParam);
    swift_release();
    return v20 == v21;
  }
LABEL_13:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CurrentOfExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CurrentOfExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CurrentOfExpr()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CurrentOfExpr()
{
  return PgQuery_CurrentOfExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CurrentOfExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CurrentOfExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CurrentOfExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CurrentOfExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CurrentOfExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CurrentOfExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CurrentOfExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CurrentOfExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CurrentOfExpr(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CurrentOfExpr, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CurrentOfExpr.== infix(_:_:)) & 1;
}

uint64_t PgQuery_NextValueExpr._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_NextValueExpr._StorageClass()
{
  return type metadata accessor for PgQuery_NextValueExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_NextValueExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NextValueExpr._StorageClass);
}

void type metadata completion function for PgQuery_NextValueExpr._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_NextValueExpr.decodeMessage<A>(decoder:)()
{
  specialized PgQuery_NextValueExpr._uniqueStorage()();
  type metadata accessor for PgQuery_NextValueExpr(0);
  swift_retain();
  uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (v1 == 2 || v1 == 3)
      {
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_NextValueExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  v14[3] = a2;
  v14[1] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v8 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for PgQuery_NextValueExpr(0) + 20);
  v14[0] = v2;
  uint64_t v12 = *(void *)(v2 + v11);
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
    if (v3) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__seqid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v3) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v3) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_NextValueExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_NextValueExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_NextValueExpr()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_NextValueExpr()
{
  return PgQuery_NextValueExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_NextValueExpr(uint64_t a1, uint64_t a2)
{
  return PgQuery_NextValueExpr.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_NextValueExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NextValueExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_NextValueExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_NextValueExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_NextValueExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NextValueExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_NextValueExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NextValueExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_NextValueExpr(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_MultiAssignRef.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_NextValueExpr, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__seqid, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) & 1;
}

uint64_t PgQuery_InferenceElem._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_InferenceElem._StorageClass()
{
  return type metadata accessor for PgQuery_InferenceElem._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_InferenceElem._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InferenceElem._StorageClass);
}

uint64_t PgQuery_InferenceElem.decodeMessage<A>(decoder:)()
{
  specialized PgQuery_InferenceElem._uniqueStorage()();
  type metadata accessor for PgQuery_InferenceElem(0);
  swift_retain();
  uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(v1)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_InferenceElem.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v29 = a3;
  uint64_t v28 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  uint64_t v15 = MEMORY[0x1F4188790](Node);
  uint64_t v26 = (uint64_t)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unsigned int v18 = (char *)&v25 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for PgQuery_InferenceElem(0) + 20);
  uint64_t v25 = v5;
  uint64_t v20 = *(void *)(v5 + v19);
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  int v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v22 = v21(v12, 1, Node);
  uint64_t v27 = a1;
  if (v22 == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v18, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_7;
  }
  uint64_t v23 = v26;
  outlined init with take of PgQuery_OidList((uint64_t)v10, v26, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_7:
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infercollid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v20
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inferopclass))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_CollateExpr.== infix(_:_:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v40 = a6;
  uint64_t v41 = a5;
  uint64_t v44 = a4;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v43 = &v38[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v42 = &v38[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = &v38[-v15];
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v45 = &v38[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v18);
  int v21 = &v38[-v20];
  uint64_t v22 = a1 + *a3;
  uint64_t v23 = a2 + *a3;
  char v24 = &v38[*(int *)(v17 + 48) - v20];
  outlined init with copy of PgQuery_Alias?(v22, (uint64_t)&v38[-v20], &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v23, (uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v25 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  if (v25(v21, 1, Node) == 1)
  {
    int v26 = v25(v24, 1, Node);
    swift_retain();
    swift_retain();
    if (v26 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_8;
    }
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_17;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v21, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v25(v24, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    goto LABEL_6;
  }
  uint64_t v27 = (uint64_t)v24;
  uint64_t v28 = v43;
  outlined init with take of PgQuery_OidList(v27, (uint64_t)v43, type metadata accessor for PgQuery_Node);
  swift_retain();
  swift_retain();
  int v39 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v16, (uint64_t)v28, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias((uint64_t)v28, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v21, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v39 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_8:
  uint64_t v29 = v45;
  uint64_t v30 = a2 + *v44;
  uint64_t v31 = (uint64_t)&v45[*(int *)(v17 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + *v44, (uint64_t)v45, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v30, v31, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v25(v29, 1, Node) != 1)
  {
    uint64_t v32 = v42;
    outlined init with copy of PgQuery_Alias?((uint64_t)v29, (uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v25((unsigned char *)v31, 1, Node) != 1)
    {
      uint64_t v33 = v43;
      outlined init with take of PgQuery_OidList(v31, (uint64_t)v43, type metadata accessor for PgQuery_Node);
      char v34 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v32, (uint64_t)v33, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v34 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_15;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v32, type metadata accessor for PgQuery_Node);
LABEL_13:
    outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_17;
  }
  if (v25((unsigned char *)v31, 1, Node) != 1) {
    goto LABEL_13;
  }
  outlined destroy of AnyValue?((uint64_t)v29, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_15:
  if (*(_DWORD *)(a1 + *v41) == *(_DWORD *)(a2 + *v41))
  {
    uint64_t v35 = v40;
    int v36 = *(_DWORD *)(a1 + *v40);
    swift_release();
    LODWORD(v35) = *(_DWORD *)(a2 + *v35);
    swift_release();
    return v36 == v35;
  }
LABEL_17:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_InferenceElem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_InferenceElem._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_InferenceElem()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_InferenceElem()
{
  return PgQuery_InferenceElem.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_InferenceElem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_InferenceElem.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_InferenceElem(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, (void (*)(uint64_t))type metadata accessor for PgQuery_InferenceElem);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_InferenceElem@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_InferenceElem._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_InferenceElem(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, (void (*)(uint64_t))type metadata accessor for PgQuery_InferenceElem);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_InferenceElem(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, (void (*)(uint64_t))type metadata accessor for PgQuery_InferenceElem);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_TargetEntry._StorageClass.__deallocating_deinit()
{
  return PgQuery_NamedArgExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr);
}

uint64_t PgQuery_NamedArgExpr._StorageClass.__deallocating_deinit(void *a1, uint64_t *a2, void *a3)
{
  outlined destroy of AnyValue?(v3 + *a1, a2);
  outlined destroy of AnyValue?(v3 + *a3, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(unsigned int *)(*(void *)v3 + 48);
  uint64_t v6 = *(unsigned __int16 *)(*(void *)v3 + 52);

  return MEMORY[0x1F4186488](v3, v5, v6);
}

uint64_t ObjC metadata update function for PgQuery_TargetEntry._StorageClass()
{
  return type metadata accessor for PgQuery_TargetEntry._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_TargetEntry._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TargetEntry._StorageClass);
}

void type metadata completion function for PgQuery_TargetEntry._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_TargetEntry.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_TargetEntry, (void (*)(void))type metadata accessor for PgQuery_TargetEntry._StorageClass, specialized PgQuery_TargetEntry._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_TargetEntry.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_TargetEntry.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 3:
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 4:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 8:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_TargetEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_TargetEntry, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_TargetEntry.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_TargetEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  uint64_t v13 = MEMORY[0x1F4188790](Node);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v24 - v16;
  uint64_t v28 = a1;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v18 = *(unsigned int (**)(void, void, void))(v12 + 48);
  if (v18(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v19 = v25;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v20 = v25;
    uint64_t v25 = v18;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v19 = v20;
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node);
    uint64_t v18 = v25;
    if (v20) {
      return result;
    }
  }
  outlined init with copy of PgQuery_Alias?(v28+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v18(v8, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
    if (v19) {
      return result;
    }
  }
  if (!*(_DWORD *)(v28
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resno)
    || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v19))
  {
    unint64_t v22 = *(void *)(v28
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname
                    + 8);
    uint64_t v23 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0) {
      uint64_t v23 = *(void *)(v28
    }
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname) & 0xFFFFFFFFFFFFLL;
    if (!v23
      || (swift_bridgeObjectRetain(),
          dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
          uint64_t result = swift_bridgeObjectRelease(),
          !v19))
    {
      if (!*(_DWORD *)(v28
                      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ressortgroupref)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v19))
      {
        if (!*(_DWORD *)(v28
                        + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigtbl)
          || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v19))
        {
          uint64_t result = *(unsigned int *)(v28
                                   + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigcol);
          if (!result
            || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v19))
          {
            if (*(unsigned char *)(v28
                          + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resjunk) == 1)
              return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in static PgQuery_TargetEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v35 = &v32[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  char v34 = &v32[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v32[-v10];
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v13 = MEMORY[0x1F4188790](v12);
  int v36 = &v32[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = &v32[-v15];
  uint64_t v17 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  uint64_t v18 = &v32[*(int *)(v12 + 48) - v15];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr, (uint64_t)&v32[-v15], &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v17, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v19 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48);
  if (v19(v16, 1, Node) == 1)
  {
    int v20 = v19(v18, 1, Node);
    swift_retain();
    swift_retain();
    if (v20 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v16, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v18, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
LABEL_23:
    swift_release();
    swift_release();
    char v30 = 0;
    return v30 & 1;
  }
  int v21 = v35;
  outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v35, type metadata accessor for PgQuery_Node);
  swift_retain();
  swift_retain();
  int v33 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v11, (uint64_t)v21, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias((uint64_t)v21, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v33 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_8:
  uint64_t v22 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  uint64_t v23 = v36;
  uint64_t v24 = (uint64_t)&v36[*(int *)(v12 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v36, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v22, v24, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v23, 1, Node) == 1)
  {
    if (v19((unsigned char *)v24, 1, Node) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  uint64_t v25 = v34;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, (uint64_t)v34, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19((unsigned char *)v24, 1, Node) == 1)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_Node);
LABEL_13:
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_23;
  }
  uint64_t v26 = v35;
  outlined init with take of PgQuery_OidList(v24, (uint64_t)v35, type metadata accessor for PgQuery_Node);
  char v27 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v25, (uint64_t)v26, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias((uint64_t)v26, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v27 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_15:
  if (*(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resno) != *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resno)
    || (*(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname) != *(void *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname)
     || *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname
                  + 8) != *(void *)(a2
                                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname
                                    + 8))
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ressortgroupref) != *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ressortgroupref)
    || *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigtbl) != *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigtbl)
    || *(_DWORD *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigcol) != *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigcol))
  {
    goto LABEL_23;
  }
  char v28 = *(unsigned char *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resjunk);
  swift_release();
  char v29 = *(unsigned char *)(a2
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resjunk);
  swift_release();
  char v30 = v28 ^ v29 ^ 1;
  return v30 & 1;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TargetEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_TargetEntry._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TargetEntry()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TargetEntry(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_TargetEntry);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TargetEntry@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TargetEntry._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TargetEntry(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_TargetEntry);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TargetEntry(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_TargetEntry);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_TargetEntry(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_TargetEntry, closure #1 in static PgQuery_TargetEntry.== infix(_:_:)) & 1;
}

uint64_t PgQuery_RangeTblRef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Integer.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_RangeTblRef);
}

uint64_t PgQuery_Integer.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!*v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeTblRef()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeTblRef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblRef);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeTblRef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeTblRef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeTblRef(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblRef);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeTblRef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblRef);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_RangeTblRef(char *a1, char *a2)
{
  return specialized static PgQuery_RangeTblRef.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_RangeTblRef) & 1;
}

uint64_t PgQuery_JoinExpr._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, &demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_JoinExpr._StorageClass()
{
  return type metadata accessor for PgQuery_JoinExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_JoinExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_JoinExpr._StorageClass);
}

void type metadata completion function for PgQuery_JoinExpr._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Alias?, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for PgQuery_Alias(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Alias);
}

uint64_t PgQuery_JoinExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_JoinExpr, (void (*)(void))type metadata accessor for PgQuery_JoinExpr._StorageClass, specialized PgQuery_JoinExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_JoinExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_JoinExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_JoinType and conformance PgQuery_JoinType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 3:
        case 4:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_10;
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          type metadata accessor for PgQuery_Alias(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 8:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_JoinExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v45 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v44 = *(void *)(Alias - 8);
  MEMORY[0x1F4188790](Alias);
  uint64_t v42 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v47 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v50 = (uint64_t)&v41 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v41 - v15;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v18 = *(void *)(Node - 8);
  uint64_t v19 = MEMORY[0x1F4188790](Node);
  uint64_t v43 = (uint64_t)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v48 = (uint64_t)&v41 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v41 - v23;
  uint64_t v25 = *(int *)(type metadata accessor for PgQuery_JoinExpr(0) + 20);
  uint64_t v41 = v3;
  uint64_t v26 = *(void *)(v3 + v25);
  if (*(void *)(v26 + 16))
  {
    char v27 = *(unsigned char *)(v26 + 24);
    uint64_t v51 = *(void *)(v26 + 16);
    char v52 = v27;
    lazy protocol witness table accessor for type PgQuery_JoinType and conformance PgQuery_JoinType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
    uint64_t v53 = a3;
  }
  else
  {
    uint64_t v53 = a3;
    swift_retain();
  }
  int v28 = *(unsigned __int8 *)(v26 + 25);
  uint64_t v49 = a2;
  if (v28 == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    uint64_t v29 = Node;
    if (v4) {
      return swift_release();
    }
  }
  else
  {
    uint64_t v29 = Node;
  }
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  char v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48);
  if (v30(v16, 1, v29) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v16, (uint64_t)v24, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v24, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v31 = v50;
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v50, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v30((char *)v31, 1, v29) == 1)
  {
    outlined destroy of AnyValue?(v31, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v32 = v31;
    uint64_t v33 = v48;
    outlined init with take of PgQuery_OidList(v32, v48, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v26
                             + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v34 = v47;
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, v47, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v30((char *)v34, 1, v29) == 1)
  {
    outlined destroy of AnyValue?(v34, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v35 = v34;
    uint64_t v36 = v43;
    outlined init with take of PgQuery_OidList(v35, v43, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v36, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v37 = v45;
  outlined init with copy of PgQuery_Alias?(v26 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v45, &demangling cache variable for type metadata for PgQuery_Alias?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v37, 1, Alias) != 1)
  {
    uint64_t v38 = v37;
    uint64_t v39 = v42;
    outlined init with take of PgQuery_OidList(v38, v42, type metadata accessor for PgQuery_Alias);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Alias);
    if (!v4) {
      goto LABEL_23;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v37, &demangling cache variable for type metadata for PgQuery_Alias?);
LABEL_23:
  if (*(_DWORD *)(v26
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtindex))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_JoinExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_JoinExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_JoinExpr()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_JoinExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_JoinExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_JoinExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_JoinExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_JoinExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_JoinExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_JoinExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_JoinExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_JoinExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_JoinExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_FromExpr._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FromExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_FromExpr._StorageClass()
{
  return type metadata accessor for PgQuery_FromExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_FromExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FromExpr._StorageClass);
}

void type metadata completion function for PgQuery_FromExpr._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_FromExpr.decodeMessage<A>(decoder:)()
{
  specialized PgQuery_FromExpr._uniqueStorage()();
  type metadata accessor for PgQuery_FromExpr(0);
  swift_retain();
  uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (v1 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_FromExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v15 = (uint64_t)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for PgQuery_FromExpr(0) + 20);
  uint64_t v16 = v3;
  uint64_t v12 = *(void *)(v3 + v11);
  if (*(void *)(*(void *)(v12 + 16) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v12 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FromExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) != 1)
  {
    uint64_t v13 = v15;
    outlined init with take of PgQuery_OidList((uint64_t)v7, v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_Node);
    if (!v4) {
      goto LABEL_9;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_9:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FromExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_FromExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FromExpr()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_FromExpr()
{
  return PgQuery_FromExpr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_FromExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_FromExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FromExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FromExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FromExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FromExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FromExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_OnConflictExpr._StorageClass.init(copying:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 1;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 32) = MEMORY[0x1E4FBC860];
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v6(v4, 1, 1, Node);
  uint64_t v7 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint) = 0;
  uint64_t v8 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet) = v3;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere;
  v6(v1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere, 1, 1, Node);
  uint64_t v10 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex) = 0;
  uint64_t v11 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist) = v3;
  char v12 = *(unsigned char *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(unsigned char *)(v1 + 24) = v12;
  *(void *)(v1 + 32) = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere, v4, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v7) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint);
  *(void *)(v1 + v8) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere, v9, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v10) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex);
  uint64_t v13 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist);
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v1 + v11) = v13;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_OnConflictExpr._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_OnConflictExpr._StorageClass()
{
  return type metadata accessor for PgQuery_OnConflictExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_OnConflictExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OnConflictExpr._StorageClass);
}

void type metadata completion function for PgQuery_OnConflictExpr._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_OnConflictExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_OnConflictExpr, (void (*)(void))type metadata accessor for PgQuery_OnConflictExpr._StorageClass, PgQuery_OnConflictExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_OnConflictExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_OnConflictExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_10;
        case 2:
        case 5:
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_10;
        case 3:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_10;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_10;
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_10:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_OnConflictExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v22 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  uint64_t v13 = MEMORY[0x1F4188790](Node);
  uint64_t v24 = (uint64_t)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v22 - v15;
  uint64_t v17 = *(void *)(v3 + *(int *)(type metadata accessor for PgQuery_OnConflictExpr(0) + 20));
  char v18 = *(unsigned char *)(v17 + 24);
  if (*(void *)(v17 + 16))
  {
    uint64_t v26 = *(void *)(v17 + 16);
    char v27 = v18;
    lazy protocol witness table accessor for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
    uint64_t v23 = v3;
  }
  else
  {
    uint64_t v23 = v3;
    swift_retain();
  }
  if (*(void *)(*(void *)(v17 + 32) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v19(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19(v8, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_17;
  }
  uint64_t v20 = v24;
  outlined init with take of PgQuery_OidList((uint64_t)v8, v24, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_17:
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_OnConflictExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_OnConflictExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_OnConflictExpr()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_OnConflictExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_OnConflictExpr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_OnConflictExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OnConflictExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OnConflictExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_OnConflictExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OnConflictExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_IntoClause._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_IntoClause._StorageClass()
{
  return type metadata accessor for PgQuery_IntoClause._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_IntoClause._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IntoClause._StorageClass);
}

void type metadata completion function for PgQuery_IntoClause._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for PgQuery_RangeVar(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeVar);
}

uint64_t PgQuery_IntoClause.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_IntoClause, (void (*)(void))type metadata accessor for PgQuery_IntoClause._StorageClass, specialized PgQuery_IntoClause._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_IntoClause.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_IntoClause.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_10;
        case 2:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 3:
        case 6:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 5:
          lazy protocol witness table accessor for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 8:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_IntoClause.traverse<A>(visitor:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v29 = (uint64_t)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v28 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v27 = (uint64_t)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v8 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for PgQuery_IntoClause(0) + 20);
  uint64_t v26 = v0;
  uint64_t v12 = *(void *)(v0 + v11);
  outlined init with copy of PgQuery_Alias?(v12 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v13 = v33;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    swift_retain();
    uint64_t v14 = v33;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v13 = v14;
    if (v14)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
  }
  uint64_t v15 = Node;
  if (*(void *)(*(void *)(v12
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v13)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  unint64_t v16 = *(void *)(v12
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v17 = *(void *)(v12
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v13) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v12
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v13) {
      return swift_release();
    }
  }
  if (*(void *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit))
  {
    char v18 = *(unsigned char *)(v12
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit
                   + 8);
    uint64_t v31 = *(void *)(v12
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit);
    char v32 = v18;
    lazy protocol witness table accessor for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v13) {
      return swift_release();
    }
  }
  unint64_t v19 = *(void *)(v12
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName
                  + 8);
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0) {
    uint64_t v20 = *(void *)(v12
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName) & 0xFFFFFFFFFFFFLL;
  if (v20)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v13) {
      return swift_release();
    }
  }
  uint64_t v21 = v29;
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v21, 1, v15) == 1)
  {
    outlined destroy of AnyValue?(v21, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v22 = v21;
    uint64_t v23 = v27;
    outlined init with take of PgQuery_OidList(v22, v27, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
    if (v13) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v12
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData) != 1
    || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v13))
  {
    swift_release();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_IntoClause@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_IntoClause._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_IntoClause()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_IntoClause()
{
  return PgQuery_IntoClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_IntoClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_IntoClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_IntoClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_IntoClause(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_IntoClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RawStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmt, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_RawStmt._StorageClass()
{
  return type metadata accessor for PgQuery_RawStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RawStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RawStmt._StorageClass);
}

uint64_t PgQuery_RawStmt.decodeMessage<A>(decoder:)()
{
  specialized PgQuery_RawStmt._uniqueStorage()();
  type metadata accessor for PgQuery_RawStmt(0);
  swift_retain();
  uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (v1 == 2 || v1 == 3)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_RawStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_MultiAssignRef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PgQuery_RawStmt, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmt, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen);
}

uint64_t PgQuery_MultiAssignRef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void *a5, void *a6, void *a7)
{
  uint64_t v23 = a7;
  uint64_t v24 = a6;
  uint64_t v27 = a3;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v15 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(int *)(a4(0) + 20);
  uint64_t v22 = v7;
  uint64_t v19 = *(void *)(v7 + v18);
  outlined init with copy of PgQuery_Alias?(v19 + *a5, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v13, (uint64_t)v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node);
    if (v8) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v19 + *v24))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v8) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v19 + *v23))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v8) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_RawStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static PgQuery_NextValueExpr.== infix(_:_:)(a1, a2, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmt, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen);
}

BOOL closure #1 in static PgQuery_NextValueExpr.== infix(_:_:)(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  uint64_t v29 = a5;
  char v30 = a4;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1 + *a3;
  uint64_t v20 = a2 + *a3;
  uint64_t v21 = (uint64_t)&v18[*(int *)(v16 + 56)];
  outlined init with copy of PgQuery_Alias?(v19, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v20, v21, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v22((uint64_t)v18, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v18, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v22(v21, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v21, (uint64_t)v11, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      char v24 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v14, (uint64_t)v11, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v14, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v24 & 1) == 0) {
        goto LABEL_10;
      }
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v14, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_10;
  }
  unsigned int v23 = v22(v21, 1, Node);
  swift_retain();
  swift_retain();
  if (v23 != 1) {
    goto LABEL_6;
  }
  outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  if (*(_DWORD *)(a1 + *v30) == *(_DWORD *)(a2 + *v30))
  {
    uint64_t v25 = v29;
    int v26 = *(_DWORD *)(a1 + *v29);
    swift_release();
    int v27 = *(_DWORD *)(a2 + *v25);
    swift_release();
    return v26 == v27;
  }
LABEL_10:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RawStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RawStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RawStmt()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RawStmt()
{
  return PgQuery_RawStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RawStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RawStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RawStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RawStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RawStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RawStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RawStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RawStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_RawStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_MultiAssignRef.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_RawStmt, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmt, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation, &OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen) & 1;
}

uint64_t PgQuery_Query._StorageClass.init()()
{
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(void *)(v0 + 32) = 0;
  *(_WORD *)(v0 + 40) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultRelation) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasAggs_p) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasWindowFuncs_p) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasTargetSrfs_p) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasSubLinks_p) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasDistinctOn_p) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRecursive_p) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasModifyingCte_p) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasForUpdate_p) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRowSecurity_p) = 0;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cteList) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtable) = v4;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree;
  uint64_t v6 = type metadata accessor for PgQuery_FromExpr(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = v4;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict;
  uint64_t v9 = type metadata accessor for PgQuery_OnConflictExpr(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v4;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause) = v4;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupingSets) = v4;
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingQual, 1, 1, Node);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause) = v4;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__distinctClause) = v4;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause) = v4;
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, 1, 1, Node);
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, 1, 1, Node);
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowMarks) = v4;
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setOperations, 1, 1, Node);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraintDeps) = v4;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOptions) = v4;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen) = 0;
  return v0;
}

uint64_t PgQuery_Query._StorageClass.deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingQual, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setOperations, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_Query._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit(PgQuery_Query._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_Query._StorageClass()
{
  return type metadata accessor for PgQuery_Query._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_Query._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Query._StorageClass);
}

void type metadata completion function for PgQuery_Query._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_FromExpr?, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_OnConflictExpr?, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t type metadata accessor for PgQuery_FromExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FromExpr);
}

uint64_t type metadata accessor for PgQuery_OnConflictExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OnConflictExpr);
}

uint64_t PgQuery_Query.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_Query, (void (*)(void))type metadata accessor for PgQuery_Query._StorageClass, specialized PgQuery_Query._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Query.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_Query.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_CmdType and conformance PgQuery_CmdType();
          goto LABEL_12;
        case 2:
          lazy protocol witness table accessor for type PgQuery_QuerySource and conformance PgQuery_QuerySource();
          goto LABEL_12;
        case 3:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 4:
        case 24:
        case 28:
        case 29:
        case 32:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_14;
        case 5:
        case 35:
        case 36:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 15:
        case 16:
        case 18:
        case 21:
        case 22:
        case 23:
        case 25:
        case 26:
        case 27:
        case 31:
        case 33:
        case 34:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 17:
          type metadata accessor for PgQuery_FromExpr(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);
          goto LABEL_14;
        case 19:
          lazy protocol witness table accessor for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind();
          goto LABEL_12;
        case 20:
          type metadata accessor for PgQuery_OnConflictExpr(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);
LABEL_14:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 30:
          lazy protocol witness table accessor for type PgQuery_LimitOption and conformance PgQuery_LimitOption();
LABEL_12:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_Query.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_Query, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Query.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_Query.traverse<A>(visitor:)(char *a1, uint64_t a2, unsigned int (*a3)(uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = type metadata accessor for PgQuery_OnConflictExpr(0);
  uint64_t v10 = *(void *)(v110 - 8);
  MEMORY[0x1F4188790](v110);
  v107 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FromExpr?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = type metadata accessor for PgQuery_FromExpr(0);
  uint64_t v108 = *(void *)(v111 - 8);
  MEMORY[0x1F4188790](v111);
  uint64_t v109 = (uint64_t)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v100 = (uint64_t)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v103 = (uint64_t)&v95 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v104 = (uint64_t)&v95 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v106 = (uint64_t)&v95 - v24;
  MEMORY[0x1F4188790](v23);
  v113 = (char *)&v95 - v25;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v27 = *(void *)(Node - 8);
  uint64_t v28 = MEMORY[0x1F4188790](Node);
  uint64_t v99 = (uint64_t)&v95 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v101 = (uint64_t)&v95 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v102 = (uint64_t)&v95 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v105 = (uint64_t)&v95 - v35;
  MEMORY[0x1F4188790](v34);
  uint64_t v37 = a1;
  uint64_t v38 = (char *)&v95 - v36;
  uint64_t v39 = *((void *)v37 + 2);
  if (v39)
  {
    v98 = (char *)&v95 - v36;
    v112 = v14;
    uint64_t v40 = v9;
    uint64_t v41 = v27;
    uint64_t v42 = Node;
    char v43 = v37[24];
    uint64_t v116 = v39;
    char v117 = v43;
    uint64_t v44 = v37;
    lazy protocol witness table accessor for type PgQuery_CmdType and conformance PgQuery_CmdType();
    uint64_t v45 = v118;
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v45) {
      return result;
    }
    uint64_t v97 = v10;
    uint64_t v47 = 0;
    v114 = a3;
    uint64_t v115 = a4;
    uint64_t v37 = v44;
    uint64_t Node = v42;
    uint64_t v27 = v41;
    uint64_t v9 = v40;
    uint64_t v14 = v112;
    uint64_t v38 = v98;
    uint64_t v48 = *((void *)v37 + 4);
    if (!v48) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t v50 = v14;
    uint64_t v51 = v9;
    uint64_t v52 = v27;
    uint64_t v53 = Node;
    char v54 = v37[40];
    uint64_t v116 = v48;
    char v117 = v54;
    v55 = v37;
    lazy protocol witness table accessor for type PgQuery_QuerySource and conformance PgQuery_QuerySource();
    uint64_t v49 = v47;
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v47) {
      return result;
    }
    uint64_t v37 = v55;
    uint64_t Node = v53;
    uint64_t v27 = v52;
    uint64_t v9 = v51;
    uint64_t v14 = v50;
    goto LABEL_8;
  }
  uint64_t v97 = v10;
  uint64_t v47 = v118;
  v114 = a3;
  uint64_t v115 = a4;
  uint64_t v48 = *((void *)v37 + 4);
  if (v48) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v49 = v47;
LABEL_8:
  v96 = v9;
  int v56 = v37[41];
  v98 = v37;
  uint64_t v57 = (uint64_t)v113;
  if (v56 == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    uint64_t v37 = v98;
    if (v49) {
      return result;
    }
  }
  v112 = v14;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v37[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt], v57, &demangling cache variable for type metadata for PgQuery_Node?);
  v58 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v58(v57, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList(v57, (uint64_t)v38, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v49) {
      return outlined destroy of PgQuery_Alias((uint64_t)v38, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of PgQuery_Alias((uint64_t)v38, type metadata accessor for PgQuery_Node);
  }
  v59 = v98;
  if (*(_DWORD *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultRelation])
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v49) {
      return result;
    }
    v59 = v98;
  }
  if (v59[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasAggs_p] == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v59 = v98;
    uint64_t v60 = v111;
    if (v49) {
      return result;
    }
  }
  else
  {
    uint64_t v60 = v111;
  }
  if (v59[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasWindowFuncs_p] == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v59 = v98;
    if (v49) {
      return result;
    }
  }
  if (v59[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasTargetSrfs_p] == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v59 = v98;
    if (v49) {
      return result;
    }
  }
  if (v59[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasSubLinks_p] == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v59 = v98;
    if (v49) {
      return result;
    }
  }
  if (v59[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasDistinctOn_p] == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v59 = v98;
    if (v49) {
      return result;
    }
  }
  if (v59[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRecursive_p] == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v59 = v98;
    if (v49) {
      return result;
    }
  }
  if (v59[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasModifyingCte_p] == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v59 = v98;
    if (v49) {
      return result;
    }
  }
  if (v59[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasForUpdate_p] == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    v59 = v98;
    if (v49) {
      return result;
    }
  }
  if (v59[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRowSecurity_p] == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v49) {
      return result;
    }
    v59 = v98;
  }
  if (*(void *)(*(void *)&v59[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cteList]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v49) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v59 = v98;
  }
  uint64_t v118 = v49;
  if (*(void *)(*(void *)&v59[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtable]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    uint64_t v61 = v118;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    uint64_t v118 = v61;
    if (v61) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v59 = v98;
  }
  uint64_t v62 = (uint64_t)v112;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v59[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree], (uint64_t)v112, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  int v63 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v62, 1, v60);
  uint64_t v64 = v109;
  if (v63 == 1)
  {
    uint64_t v115 = Node;
    outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for PgQuery_FromExpr?);
    uint64_t v65 = v110;
  }
  else
  {
    outlined init with take of PgQuery_OidList(v62, v109, type metadata accessor for PgQuery_FromExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);
    uint64_t v66 = v118;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v65 = v110;
    uint64_t v118 = v66;
    if (v66) {
      return outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_FromExpr);
    }
    uint64_t v115 = Node;
    outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_FromExpr);
  }
  v67 = v98;
  if (*(void *)(*(void *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    uint64_t v68 = v118;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    uint64_t v118 = v68;
    if (v68) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    v67 = v98;
  }
  uint64_t v69 = (uint64_t)v107;
  if (*(void *)&v67[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override])
  {
    char v70 = v67[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override
            + 8];
    uint64_t v116 = *(void *)&v67[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override];
    char v117 = v70;
    lazy protocol witness table accessor for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind();
    uint64_t v71 = v118;
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v71) {
      return result;
    }
    uint64_t v118 = 0;
    v67 = v98;
  }
  uint64_t v72 = (uint64_t)v96;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v67[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict], (uint64_t)v96, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48))(v72, 1, v65) == 1)
  {
    outlined destroy of AnyValue?(v72, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  }
  else
  {
    outlined init with take of PgQuery_OidList(v72, v69, type metadata accessor for PgQuery_OnConflictExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);
    uint64_t v73 = v118;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v118 = v73;
    if (v73) {
      return outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_OnConflictExpr);
    }
    outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_OnConflictExpr);
  }
  v74 = v98;
  if (*(void *)(*(void *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    uint64_t v75 = v118;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    uint64_t v118 = v75;
    if (v75) {
      return swift_bridgeObjectRelease();
    }
    v114 = v58;
    swift_bridgeObjectRelease();
    v74 = v98;
  }
  else
  {
    v114 = v58;
  }
  if (*(void *)(*(void *)&v74[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    uint64_t v76 = v118;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    uint64_t v118 = v76;
    if (v76) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupingSets]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    uint64_t v77 = v118;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    uint64_t v118 = v77;
    if (v77) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v78 = v106;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingQual], v106, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v114(v78, 1, v115) == 1)
  {
    outlined destroy of AnyValue?(v106, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList(v106, v105, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v79 = v118;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v118 = v79;
    if (v79) {
      return outlined destroy of PgQuery_Alias(v105, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of PgQuery_Alias(v105, type metadata accessor for PgQuery_Node);
  }
  if (*(void *)(*(void *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    uint64_t v80 = v118;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    uint64_t v118 = v80;
    if (v80) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__distinctClause]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    uint64_t v81 = v118;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    uint64_t v118 = v81;
    if (!v81)
    {
      swift_bridgeObjectRelease();
      goto LABEL_83;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_83:
  if (*(void *)(*(void *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause]
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    uint64_t v82 = v118;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    uint64_t v118 = v82;
    if (v82) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v83 = v104;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset], v104, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v114(v83, 1, v115) == 1)
  {
    outlined destroy of AnyValue?(v104, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList(v104, v102, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v84 = v118;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v118 = v84;
    if (v84) {
      return outlined destroy of PgQuery_Alias(v102, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of PgQuery_Alias(v102, type metadata accessor for PgQuery_Node);
  }
  uint64_t v85 = v103;
  outlined init with copy of PgQuery_Alias?((uint64_t)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount], v103, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v114(v85, 1, v115) == 1)
  {
    outlined destroy of AnyValue?(v103, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList(v103, v101, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v86 = v118;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v118 = v86;
    if (v86) {
      return outlined destroy of PgQuery_Alias(v101, type metadata accessor for PgQuery_Node);
    }
    outlined destroy of PgQuery_Alias(v101, type metadata accessor for PgQuery_Node);
  }
  if (!*(void *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption]
    || (char v87 = v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption
                + 8],
        uint64_t v116 = *(void *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption],
        char v117 = v87,
        lazy protocol witness table accessor for type PgQuery_LimitOption and conformance PgQuery_LimitOption(),
        uint64_t v88 = v118,
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        (uint64_t v118 = v88) == 0))
  {
    if (*(void *)(*(void *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowMarks]
                   + 16))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
      swift_bridgeObjectRetain();
      uint64_t v89 = v118;
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      uint64_t v118 = v89;
      if (v89) {
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v90 = v100;
    outlined init with copy of PgQuery_Alias?((uint64_t)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setOperations], v100, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v114(v90, 1, v115) == 1)
    {
      outlined destroy of AnyValue?(v100, &demangling cache variable for type metadata for PgQuery_Node?);
    }
    else
    {
      outlined init with take of PgQuery_OidList(v100, v99, type metadata accessor for PgQuery_Node);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
      uint64_t v91 = v118;
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t v118 = v91;
      if (v91) {
        return outlined destroy of PgQuery_Alias(v99, type metadata accessor for PgQuery_Node);
      }
      outlined destroy of PgQuery_Alias(v99, type metadata accessor for PgQuery_Node);
    }
    if (*(void *)(*(void *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraintDeps]
                   + 16))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
      swift_bridgeObjectRetain();
      uint64_t v92 = v118;
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      uint64_t v118 = v92;
      if (v92) {
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    if (*(void *)(*(void *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOptions]
                   + 16))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
      swift_bridgeObjectRetain();
      uint64_t v93 = v118;
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      uint64_t v118 = v93;
      if (v93) {
        return swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    if (!*(_DWORD *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation]
      || (v94 = v118, uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(),
                      (uint64_t v118 = v94) == 0))
    {
      uint64_t result = *(unsigned int *)&v98[OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen];
      if (result) {
        return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
      }
    }
  }
  return result;
}

uint64_t static PgQuery_Query.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Query, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Query.== infix(_:_:)) & 1;
}

BOOL closure #1 in static PgQuery_Query.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PgQuery_OnConflictExpr(0);
  uint64_t v160 = *(void *)(v4 - 8);
  uint64_t v161 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v157 = (uint64_t)&v145 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v159 = (uint64_t)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_OnConflictExpr?, PgQuery_OnConflictExpr?));
  MEMORY[0x1F4188790](v158);
  uint64_t v162 = (uint64_t)&v145 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PgQuery_FromExpr(0);
  uint64_t v165 = *(void *)(v9 - 8);
  uint64_t v166 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v163 = (uint64_t)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FromExpr?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v164 = (uint64_t)&v145 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_FromExpr?, PgQuery_FromExpr?));
  MEMORY[0x1F4188790](v13);
  uint64_t v167 = (uint64_t)&v145 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v16 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v18 = (char *)&v145 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v22 = (char *)&v145 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x1F4188790](v20);
  uint64_t v25 = (char *)&v145 - v24;
  uint64_t v26 = MEMORY[0x1F4188790](v23);
  uint64_t v156 = (uint64_t)&v145 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v155 = (uint64_t)&v145 - v29;
  MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)&v145 - v30;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v33 = MEMORY[0x1F4188790](v32);
  uint64_t v34 = MEMORY[0x1F4188790](v33);
  MEMORY[0x1F4188790](v34);
  uint64_t v36 = MEMORY[0x1F4188790]((char *)&v145 - v35);
  uint64_t v37 = MEMORY[0x1F4188790](v36);
  char v43 = (char *)&v145 - v39;
  uint64_t v44 = *(void *)(a1 + 16);
  uint64_t v45 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 24) == 1)
  {
    switch(v45)
    {
      case 1:
        if (v44 != 1) {
          return 0;
        }
        goto LABEL_6;
      case 2:
        if (v44 != 2) {
          return 0;
        }
        goto LABEL_6;
      case 3:
        if (v44 != 3) {
          return 0;
        }
        goto LABEL_6;
      case 4:
        if (v44 != 4) {
          return 0;
        }
        goto LABEL_6;
      case 5:
        if (v44 != 5) {
          return 0;
        }
        goto LABEL_6;
      case 6:
        if (v44 != 6) {
          return 0;
        }
        goto LABEL_6;
      case 7:
        if (v44 != 7) {
          return 0;
        }
        goto LABEL_6;
      default:
        if (!v44) {
          goto LABEL_6;
        }
        return 0;
    }
  }
  if (v44 != v45) {
    return 0;
  }
LABEL_6:
  uint64_t v46 = *(void *)(a1 + 32);
  uint64_t v47 = *(void *)(a2 + 32);
  if (*(unsigned char *)(a2 + 40) == 1)
  {
    switch(v47)
    {
      case 1:
        if (v46 != 1) {
          return 0;
        }
        goto LABEL_11;
      case 2:
        if (v46 != 2) {
          return 0;
        }
        goto LABEL_11;
      case 3:
        if (v46 != 3) {
          return 0;
        }
        goto LABEL_11;
      case 4:
        if (v46 != 4) {
          return 0;
        }
        goto LABEL_11;
      case 5:
        if (v46 != 5) {
          return 0;
        }
        goto LABEL_11;
      default:
        if (!v46) {
          goto LABEL_11;
        }
        return 0;
    }
  }
  if (v46 != v47) {
    return 0;
  }
LABEL_11:
  if (*(unsigned __int8 *)(a1 + 41) != *(unsigned __int8 *)(a2 + 41)) {
    return 0;
  }
  uint64_t v153 = v38;
  uint64_t v145 = v37;
  uint64_t v146 = v42;
  v147 = v25;
  uint64_t v148 = v40;
  v149 = v22;
  uint64_t v150 = v41;
  v154 = v18;
  uint64_t v48 = a1
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt;
  uint64_t v49 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__utilityStmt;
  uint64_t v50 = a1;
  uint64_t v51 = a2;
  uint64_t v52 = (uint64_t)&v43[*(int *)(v41 + 48)];
  outlined init with copy of PgQuery_Alias?(v48, (uint64_t)&v145 - v39, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v49, v52, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v53 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  unsigned int v54 = v53(v43, 1, Node);
  uint64_t v151 = v16 + 48;
  uint64_t v152 = Node;
  if (v54 == 1)
  {
    unsigned int v55 = v53((char *)v52, 1, Node);
    swift_retain();
    swift_retain();
    if (v55 == 1)
    {
      int v56 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v53;
      outlined destroy of AnyValue?((uint64_t)v43, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_43;
    }
LABEL_31:
    outlined destroy of AnyValue?((uint64_t)v43, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_53;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v43, (uint64_t)v31, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v53((char *)v52, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_Node);
    goto LABEL_31;
  }
  int v56 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v53;
  uint64_t v57 = (uint64_t)v154;
  outlined init with take of PgQuery_OidList(v52, (uint64_t)v154, type metadata accessor for PgQuery_Node);
  swift_retain();
  swift_retain();
  char v58 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v31, v57, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v57, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v31, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v43, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v58 & 1) == 0) {
    goto LABEL_53;
  }
LABEL_43:
  if (*(_DWORD *)(v50
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultRelation) != *(_DWORD *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultRelation))
    goto LABEL_53;
  if (*(unsigned __int8 *)(v50
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasAggs_p) != *(unsigned __int8 *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasAggs_p))
    goto LABEL_53;
  if (*(unsigned __int8 *)(v50
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasWindowFuncs_p) != *(unsigned __int8 *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasWindowFuncs_p))
    goto LABEL_53;
  if (*(unsigned __int8 *)(v50
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasTargetSrfs_p) != *(unsigned __int8 *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasTargetSrfs_p))
    goto LABEL_53;
  if (*(unsigned __int8 *)(v50
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasSubLinks_p) != *(unsigned __int8 *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasSubLinks_p))
    goto LABEL_53;
  if (*(unsigned __int8 *)(v50
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasDistinctOn_p) != *(unsigned __int8 *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasDistinctOn_p))
    goto LABEL_53;
  if (*(unsigned __int8 *)(v50
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRecursive_p) != *(unsigned __int8 *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRecursive_p))
    goto LABEL_53;
  if (*(unsigned __int8 *)(v50
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasModifyingCte_p) != *(unsigned __int8 *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasModifyingCte_p))
    goto LABEL_53;
  if (*(unsigned __int8 *)(v50
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasForUpdate_p) != *(unsigned __int8 *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasForUpdate_p))
    goto LABEL_53;
  if (*(unsigned __int8 *)(v50
                          + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRowSecurity_p) != *(unsigned __int8 *)(v51 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__hasRowSecurity_p))
    goto LABEL_53;
  uint64_t v60 = v50;
  uint64_t v61 = *(void *)(v50
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cteList);
  uint64_t v62 = v51;
  uint64_t v63 = *(void *)(v51
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cteList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v64 = specialized static Array<A>.== infix(_:_:)(v61, v63);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v64 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v65 = *(void *)(v50
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtable);
  uint64_t v66 = *(void *)(v51
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtable);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v67 = specialized static Array<A>.== infix(_:_:)(v65, v66);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v67 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v68 = v51
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree;
  uint64_t v69 = v167;
  uint64_t v70 = v167 + *(int *)(v13 + 48);
  outlined init with copy of PgQuery_Alias?(v50 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointree, v167, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  outlined init with copy of PgQuery_Alias?(v68, v70, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  uint64_t v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v165 + 48);
  if (v71(v69, 1, v166) == 1)
  {
    if (v71(v70, 1, v166) == 1)
    {
      outlined destroy of AnyValue?(v167, &demangling cache variable for type metadata for PgQuery_FromExpr?);
      goto LABEL_65;
    }
LABEL_62:
    uint64_t v72 = &demangling cache variable for type metadata for (PgQuery_FromExpr?, PgQuery_FromExpr?);
    uint64_t v73 = v167;
LABEL_63:
    outlined destroy of AnyValue?(v73, v72);
    goto LABEL_53;
  }
  outlined init with copy of PgQuery_Alias?(v167, v164, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  if (v71(v70, 1, v166) == 1)
  {
    outlined destroy of PgQuery_Alias(v164, type metadata accessor for PgQuery_FromExpr);
    goto LABEL_62;
  }
  uint64_t v74 = v163;
  outlined init with take of PgQuery_OidList(v70, v163, type metadata accessor for PgQuery_FromExpr);
  uint64_t v75 = v164;
  char v76 = specialized static PgQuery_FromExpr.== infix(_:_:)(v164, v74);
  outlined destroy of PgQuery_Alias(v74, type metadata accessor for PgQuery_FromExpr);
  outlined destroy of PgQuery_Alias(v75, type metadata accessor for PgQuery_FromExpr);
  outlined destroy of AnyValue?(v167, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  if ((v76 & 1) == 0) {
    goto LABEL_53;
  }
LABEL_65:
  uint64_t v77 = *(void *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  uint64_t v78 = *(void *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v79 = specialized static Array<A>.== infix(_:_:)(v77, v78);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v79 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v80 = *(void *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override);
  uint64_t v81 = *(void *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override);
  if (*(unsigned char *)(v62
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override
                + 8) == 1)
  {
    switch(v81)
    {
      case 1:
        if (v80 != 1) {
          goto LABEL_53;
        }
        goto LABEL_71;
      case 2:
        if (v80 != 2) {
          goto LABEL_53;
        }
        goto LABEL_71;
      case 3:
        if (v80 != 3) {
          goto LABEL_53;
        }
        goto LABEL_71;
      default:
        if (!v80) {
          goto LABEL_71;
        }
        goto LABEL_53;
    }
  }
  if (v80 != v81) {
    goto LABEL_53;
  }
LABEL_71:
  uint64_t v82 = v62
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict;
  uint64_t v83 = v162;
  uint64_t v84 = v162 + *(int *)(v158 + 48);
  outlined init with copy of PgQuery_Alias?(v60+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflict, v162, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  outlined init with copy of PgQuery_Alias?(v82, v84, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  uint64_t v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v160 + 48);
  if (v85(v83, 1, v161) == 1)
  {
    if (v85(v84, 1, v161) == 1)
    {
      outlined destroy of AnyValue?(v162, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
      goto LABEL_84;
    }
    goto LABEL_76;
  }
  outlined init with copy of PgQuery_Alias?(v162, v159, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  if (v85(v84, 1, v161) == 1)
  {
    outlined destroy of PgQuery_Alias(v159, type metadata accessor for PgQuery_OnConflictExpr);
LABEL_76:
    uint64_t v72 = &demangling cache variable for type metadata for (PgQuery_OnConflictExpr?, PgQuery_OnConflictExpr?);
    uint64_t v73 = v162;
    goto LABEL_63;
  }
  uint64_t v86 = v157;
  outlined init with take of PgQuery_OidList(v84, v157, type metadata accessor for PgQuery_OnConflictExpr);
  uint64_t v87 = v159;
  char v88 = specialized static PgQuery_OnConflictExpr.== infix(_:_:)(v159, v86);
  outlined destroy of PgQuery_Alias(v86, type metadata accessor for PgQuery_OnConflictExpr);
  outlined destroy of PgQuery_Alias(v87, type metadata accessor for PgQuery_OnConflictExpr);
  outlined destroy of AnyValue?(v162, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  if ((v88 & 1) == 0) {
    goto LABEL_53;
  }
LABEL_84:
  uint64_t v89 = *(void *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  uint64_t v90 = *(void *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v91 = specialized static Array<A>.== infix(_:_:)(v89, v90);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v91 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v92 = *(void *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause);
  uint64_t v93 = *(void *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v94 = specialized static Array<A>.== infix(_:_:)(v92, v93);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v94 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v95 = *(void *)(v60
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupingSets);
  uint64_t v96 = *(void *)(v62
                  + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupingSets);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v97 = specialized static Array<A>.== infix(_:_:)(v95, v96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v97 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v98 = v62
      + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingQual;
  uint64_t v99 = v153;
  uint64_t v100 = v153 + *(int *)(v150 + 48);
  outlined init with copy of PgQuery_Alias?(v60+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingQual, v153, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v98, v100, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v56(v99, 1, v152) == 1)
  {
    if (v56(v100, 1, v152) == 1)
    {
      outlined destroy of AnyValue?(v153, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_94;
    }
    goto LABEL_92;
  }
  outlined init with copy of PgQuery_Alias?(v153, v155, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v56(v100, 1, v152) == 1)
  {
    outlined destroy of PgQuery_Alias(v155, type metadata accessor for PgQuery_Node);
LABEL_92:
    uint64_t v72 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    uint64_t v73 = v153;
    goto LABEL_63;
  }
  uint64_t v101 = (uint64_t)v154;
  outlined init with take of PgQuery_OidList(v100, (uint64_t)v154, type metadata accessor for PgQuery_Node);
  uint64_t v102 = v155;
  char v103 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v155, v101, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v101, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v102, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v153, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v103 & 1) == 0) {
    goto LABEL_53;
  }
LABEL_94:
  uint64_t v104 = *(void *)(v60
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause);
  uint64_t v105 = *(void *)(v62
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v106 = specialized static Array<A>.== infix(_:_:)(v104, v105);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v106 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v107 = *(void *)(v60
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__distinctClause);
  uint64_t v108 = *(void *)(v62
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__distinctClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v109 = specialized static Array<A>.== infix(_:_:)(v107, v108);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v109 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v110 = *(void *)(v60
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause);
  uint64_t v111 = *(void *)(v62
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v112 = specialized static Array<A>.== infix(_:_:)(v110, v111);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v112 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v113 = v62
       + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset;
  uint64_t v114 = v145;
  uint64_t v115 = v145 + *(int *)(v150 + 48);
  outlined init with copy of PgQuery_Alias?(v60+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, v145, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v113, v115, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v56(v114, 1, v152) == 1)
  {
    if (v56(v115, 1, v152) == 1)
    {
      outlined destroy of AnyValue?(v145, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_104;
    }
LABEL_102:
    uint64_t v72 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    uint64_t v116 = &v168;
LABEL_110:
    uint64_t v73 = *(v116 - 32);
    goto LABEL_63;
  }
  outlined init with copy of PgQuery_Alias?(v145, v156, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v56(v115, 1, v152) == 1)
  {
    outlined destroy of PgQuery_Alias(v156, type metadata accessor for PgQuery_Node);
    goto LABEL_102;
  }
  uint64_t v117 = (uint64_t)v154;
  outlined init with take of PgQuery_OidList(v115, (uint64_t)v154, type metadata accessor for PgQuery_Node);
  uint64_t v118 = v156;
  char v119 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v156, v117, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v117, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v118, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v145, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v119 & 1) == 0) {
    goto LABEL_53;
  }
LABEL_104:
  uint64_t v120 = v62
       + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount;
  uint64_t v121 = v146;
  uint64_t v122 = v146 + *(int *)(v150 + 48);
  outlined init with copy of PgQuery_Alias?(v60+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, v146, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v120, v122, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v56(v121, 1, v152) == 1)
  {
    if (v56(v122, 1, v152) == 1)
    {
      outlined destroy of AnyValue?(v146, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_112;
    }
    goto LABEL_109;
  }
  outlined init with copy of PgQuery_Alias?(v146, (uint64_t)v147, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v56(v122, 1, v152) == 1)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v147, type metadata accessor for PgQuery_Node);
LABEL_109:
    uint64_t v72 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    uint64_t v116 = &v169;
    goto LABEL_110;
  }
  uint64_t v123 = (uint64_t)v154;
  outlined init with take of PgQuery_OidList(v122, (uint64_t)v154, type metadata accessor for PgQuery_Node);
  uint64_t v124 = (uint64_t)v147;
  char v125 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v147, v123, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v123, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v124, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v146, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v125 & 1) == 0) {
    goto LABEL_53;
  }
LABEL_112:
  uint64_t v126 = *(void *)(v60
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption);
  uint64_t v127 = *(void *)(v62
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption);
  if (*(unsigned char *)(v62
                + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption
                + 8) == 1)
  {
    switch(v127)
    {
      case 1:
        if (v126 == 1) {
          goto LABEL_123;
        }
        goto LABEL_53;
      case 2:
        if (v126 == 2) {
          goto LABEL_123;
        }
        goto LABEL_53;
      case 3:
        if (v126 == 3) {
          goto LABEL_123;
        }
        goto LABEL_53;
      default:
        if (!v126) {
          goto LABEL_123;
        }
        goto LABEL_53;
    }
  }
  if (v126 != v127) {
    goto LABEL_53;
  }
LABEL_123:
  uint64_t v128 = *(void *)(v60
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowMarks);
  uint64_t v129 = *(void *)(v62
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowMarks);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v130 = specialized static Array<A>.== infix(_:_:)(v128, v129);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v130 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v131 = v62
       + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setOperations;
  uint64_t v132 = v148;
  uint64_t v133 = v148 + *(int *)(v150 + 48);
  outlined init with copy of PgQuery_Alias?(v60+ OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__setOperations, v148, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v131, v133, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v56(v132, 1, v152) != 1)
  {
    outlined init with copy of PgQuery_Alias?(v148, (uint64_t)v149, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v56(v133, 1, v152) == 1)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v149, type metadata accessor for PgQuery_Node);
      goto LABEL_129;
    }
    uint64_t v134 = (uint64_t)v154;
    outlined init with take of PgQuery_OidList(v133, (uint64_t)v154, type metadata accessor for PgQuery_Node);
    uint64_t v135 = (uint64_t)v149;
    char v136 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v149, v134, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
    outlined destroy of PgQuery_Alias(v134, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v135, type metadata accessor for PgQuery_Node);
    outlined destroy of AnyValue?(v148, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v136) {
      goto LABEL_131;
    }
LABEL_53:
    swift_release();
    swift_release();
    return 0;
  }
  if (v56(v133, 1, v152) != 1)
  {
LABEL_129:
    uint64_t v72 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    uint64_t v73 = v148;
    goto LABEL_63;
  }
  outlined destroy of AnyValue?(v148, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_131:
  uint64_t v137 = *(void *)(v60
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraintDeps);
  uint64_t v138 = *(void *)(v62
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraintDeps);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v139 = specialized static Array<A>.== infix(_:_:)(v137, v138);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v139 & 1) == 0) {
    goto LABEL_53;
  }
  uint64_t v140 = *(void *)(v60
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOptions);
  uint64_t v141 = *(void *)(v62
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOptions);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v142 = specialized static Array<A>.== infix(_:_:)(v140, v141);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v142 & 1) == 0
    || *(_DWORD *)(v60
                 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation) != *(_DWORD *)(v62 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation))
  {
    goto LABEL_53;
  }
  int v143 = *(_DWORD *)(v60
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen);
  swift_release();
  int v144 = *(_DWORD *)(v62
                   + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_QueryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen);
  swift_release();
  return v143 == v144;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Query@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_Query._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Query()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Query(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Query@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Query._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Query(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Query(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_InsertStmt._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectStmt, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictClause, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, &demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_InsertStmt._StorageClass()
{
  return type metadata accessor for PgQuery_InsertStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_InsertStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InsertStmt._StorageClass);
}

void type metadata completion function for PgQuery_InsertStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_OnConflictClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);
      if (v2 <= 0x3F)
      {
        type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_WithClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t type metadata accessor for PgQuery_OnConflictClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OnConflictClause);
}

uint64_t type metadata accessor for PgQuery_WithClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WithClause);
}

uint64_t PgQuery_InsertStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_InsertStmt, (void (*)(void))type metadata accessor for PgQuery_InsertStmt._StorageClass, specialized PgQuery_InsertStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_InsertStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_InsertStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_10;
        case 2:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_10;
        case 4:
          type metadata accessor for PgQuery_OnConflictClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);
          goto LABEL_10;
        case 6:
          type metadata accessor for PgQuery_WithClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 7:
          lazy protocol witness table accessor for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_InsertStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = a3;
  uint64_t v48 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v39 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for PgQuery_WithClause(0);
  uint64_t v38 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40);
  uint64_t v37 = (uint64_t)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v44 = (uint64_t)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for PgQuery_OnConflictClause(0);
  uint64_t v43 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v41 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v46 = *(void *)(Node - 8);
  uint64_t v47 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v42 = (uint64_t)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v20 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v22 = (char *)&v35 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(int *)(type metadata accessor for PgQuery_InsertStmt(0) + 20);
  uint64_t v36 = v3;
  uint64_t v24 = *(void *)(v3 + v23);
  outlined init with copy of PgQuery_Alias?(v24+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v22, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v4)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v22, type metadata accessor for PgQuery_RangeVar);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v22, type metadata accessor for PgQuery_RangeVar);
  }
  uint64_t v25 = v47;
  if (*(void *)(*(void *)(v24
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v24+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectStmt, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v13, 1, v25) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v26 = v42;
    outlined init with take of PgQuery_OidList((uint64_t)v13, v42, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v27 = v44;
  outlined init with copy of PgQuery_Alias?(v24+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictClause, v44, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v27, 1, v45) == 1)
  {
    outlined destroy of AnyValue?(v27, &demangling cache variable for type metadata for PgQuery_OnConflictClause?);
  }
  else
  {
    uint64_t v28 = v27;
    uint64_t v29 = v41;
    outlined init with take of PgQuery_OidList(v28, v41, type metadata accessor for PgQuery_OnConflictClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_OnConflictClause);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v24
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v30 = v39;
  outlined init with copy of PgQuery_Alias?(v24+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v39, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v30, 1, v40) != 1)
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_WithClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_WithClause);
    if (!v4) {
      goto LABEL_19;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_WithClause?);
LABEL_19:
  if (*(void *)(v24
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override))
  {
    char v33 = *(unsigned char *)(v24
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override
                   + 8);
    uint64_t v49 = *(void *)(v24
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override);
    char v50 = v33;
    lazy protocol witness table accessor for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_InsertStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_InsertStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_InsertStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_InsertStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_InsertStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_InsertStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_InsertStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_InsertStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_InsertStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_InsertStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_InsertStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_InsertStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_InsertStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_DeleteStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v6, 1, 1, RangeVar);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v9 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause) = MEMORY[0x1E4FBC860];
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v10, 1, 1, Node);
  uint64_t v12 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v8;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  uint64_t v14 = type metadata accessor for PgQuery_WithClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  *(void *)(v1 + v9) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v10, &demangling cache variable for type metadata for PgQuery_Node?);
  *(void *)(v1 + v12) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_WithClause?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v13, &demangling cache variable for type metadata for PgQuery_WithClause?);
  return v1;
}

uint64_t PgQuery_DeleteStmt._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, &demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_DeleteStmt._StorageClass()
{
  return type metadata accessor for PgQuery_DeleteStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_DeleteStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DeleteStmt._StorageClass);
}

void type metadata completion function for PgQuery_DeleteStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_WithClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t PgQuery_DeleteStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = *(int *)(type metadata accessor for PgQuery_DeleteStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_DeleteStmt._StorageClass(0);
    swift_allocObject();
    uint64_t v3 = swift_retain();
    *(void *)(v0 + v2) = PgQuery_DeleteStmt._StorageClass.init(copying:)(v3);
    swift_release();
  }
  swift_retain();
  uint64_t v4 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v5 & 1) == 0)
    {
      switch(v4)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_7;
        case 2:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_7;
        case 5:
          type metadata accessor for PgQuery_WithClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
LABEL_7:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t v4 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_DeleteStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v31 = (uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for PgQuery_WithClause(0);
  uint64_t v30 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v28 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v34 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v33 = (uint64_t)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v16 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(int *)(type metadata accessor for PgQuery_DeleteStmt(0) + 20);
  uint64_t v29 = v3;
  uint64_t v20 = *(void *)(v3 + v19);
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v21 = Node;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v14, (uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    uint64_t v21 = Node;
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v20
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v10, 1, v21) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v22 = v33;
    outlined init with take of PgQuery_OidList((uint64_t)v10, v33, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v20
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v23 = v31;
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v31, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v23, 1, v32) != 1)
  {
    uint64_t v24 = v23;
    uint64_t v25 = v28;
    outlined init with take of PgQuery_OidList(v24, v28, type metadata accessor for PgQuery_WithClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v25, type metadata accessor for PgQuery_WithClause);
    if (!v4) {
      goto LABEL_15;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v23, &demangling cache variable for type metadata for PgQuery_WithClause?);
LABEL_15:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DeleteStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_DeleteStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DeleteStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DeleteStmt()
{
  return PgQuery_DeleteStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DeleteStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_DeleteStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DeleteStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeleteStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DeleteStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DeleteStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DeleteStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeleteStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DeleteStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeleteStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_UpdateStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v6, 1, 1, RangeVar);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v9 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = MEMORY[0x1E4FBC860];
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v10, 1, 1, Node);
  uint64_t v12 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause) = v8;
  uint64_t v13 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v8;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  uint64_t v15 = type metadata accessor for PgQuery_WithClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  *(void *)(v1 + v9) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v10, &demangling cache variable for type metadata for PgQuery_Node?);
  *(void *)(v1 + v12) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v13) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_WithClause?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v14, &demangling cache variable for type metadata for PgQuery_WithClause?);
  return v1;
}

uint64_t PgQuery_UpdateStmt._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, &demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_UpdateStmt._StorageClass()
{
  return type metadata accessor for PgQuery_UpdateStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_UpdateStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_UpdateStmt._StorageClass);
}

void type metadata completion function for PgQuery_UpdateStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_WithClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t PgQuery_UpdateStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_UpdateStmt, (void (*)(void))type metadata accessor for PgQuery_UpdateStmt._StorageClass, PgQuery_UpdateStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_UpdateStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_UpdateStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_5;
        case 2:
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_5;
        case 6:
          type metadata accessor for PgQuery_WithClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
LABEL_5:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_UpdateStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v31 = (uint64_t)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for PgQuery_WithClause(0);
  uint64_t v30 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v28 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v34 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v33 = (uint64_t)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v16 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(int *)(type metadata accessor for PgQuery_UpdateStmt(0) + 20);
  uint64_t v29 = v3;
  uint64_t v20 = *(void *)(v3 + v19);
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v21 = Node;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v14, (uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    uint64_t v21 = Node;
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v20
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v10, 1, v21) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v22 = v33;
    outlined init with take of PgQuery_OidList((uint64_t)v10, v33, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v20
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v20
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v23 = v31;
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v31, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v23, 1, v32) != 1)
  {
    uint64_t v24 = v23;
    uint64_t v25 = v28;
    outlined init with take of PgQuery_OidList(v24, v28, type metadata accessor for PgQuery_WithClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v25, type metadata accessor for PgQuery_WithClause);
    if (!v4) {
      goto LABEL_17;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v23, &demangling cache variable for type metadata for PgQuery_WithClause?);
LABEL_17:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_UpdateStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_UpdateStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_UpdateStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_UpdateStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_UpdateStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_UpdateStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UpdateStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_UpdateStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_UpdateStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_UpdateStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UpdateStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_UpdateStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UpdateStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_SelectStmt._StorageClass.init()()
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause;
  uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(IntoClause - 8) + 56))(v2, 1, 1, IntoClause);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = v1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause) = v1;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v6(v4, 1, 1, Node);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause) = v1;
  v6(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause, 1, 1, Node);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause) = v1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists) = v1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause) = v1;
  v6(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, 1, 1, Node);
  v6(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, 1, 1, Node);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause) = v1;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  uint64_t v9 = type metadata accessor for PgQuery_WithClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all) = 0;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  uint64_t SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(SelectStmt - 8) + 56);
  v13(v11, 1, 1, SelectStmt);
  v13(v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, 1, 1, SelectStmt);
  return v0;
}

uint64_t PgQuery_SelectStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SelectStmt?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v39 = (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause;
  uint64_t v25 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause;
  uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(IntoClause - 8) + 56))(v6, 1, 1, IntoClause);
  uint64_t v8 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = v5;
  uint64_t v26 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause) = v5;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t v27 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void (**)(void))(*(void *)(Node - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v11)(v9, 1, 1, Node);
  uint64_t v12 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause) = v5;
  uint64_t v29 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause;
  v11();
  uint64_t v28 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause) = v5;
  uint64_t v30 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists) = v5;
  uint64_t v32 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause) = v5;
  uint64_t v38 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset;
  v11();
  uint64_t v37 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount;
  v11();
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption;
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  uint64_t v35 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause) = v5;
  uint64_t v14 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  uint64_t v36 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  uint64_t v15 = type metadata accessor for PgQuery_WithClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  uint64_t v16 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(void *)uint64_t v16 = 0;
  *(unsigned char *)(v16 + 8) = 1;
  uint64_t v34 = OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all) = 0;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  uint64_t v31 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  uint64_t SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  uint64_t v19 = *(void (**)(void))(*(void *)(SelectStmt - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v19)(v17, 1, 1, SelectStmt);
  uint64_t v33 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg;
  v19();
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause, v25, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  *(void *)(v1 + v8) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v26) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  *(void *)(v1 + v12) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  *(void *)(v1 + v28) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v30) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v32) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, v38, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, v37, &demangling cache variable for type metadata for PgQuery_Node?);
  char v20 = *(unsigned char *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption
                 + 8);
  *(void *)uint64_t v13 = *(void *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption);
  *(unsigned char *)(v13 + 8) = v20;
  *(void *)(v1 + v35) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v36, &demangling cache variable for type metadata for PgQuery_WithClause?);
  char v21 = *(unsigned char *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                 + 8);
  *(void *)uint64_t v16 = *(void *)(a1
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
  *(unsigned char *)(v16 + 8) = v21;
  *(unsigned char *)(v1 + v34) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, v31, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  uint64_t v22 = v39;
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v39, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  swift_release();
  outlined assign with take of PgQuery_Node?(v22, v33, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  return v1;
}

uint64_t PgQuery_SelectStmt._StorageClass.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, &demangling cache variable for type metadata for PgQuery_WithClause?);
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  return v0;
}

uint64_t PgQuery_SelectStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit(PgQuery_SelectStmt._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_SelectStmt._StorageClass()
{
  return type metadata accessor for PgQuery_SelectStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SelectStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SelectStmt._StorageClass);
}

void type metadata completion function for PgQuery_SelectStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_IntoClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_WithClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
      if (v2 <= 0x3F)
      {
        type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_SelectStmt?, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t type metadata accessor for PgQuery_IntoClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IntoClause);
}

uint64_t type metadata accessor for PgQuery_SelectStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SelectStmt);
}

uint64_t PgQuery_SelectStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_SelectStmt, (void (*)(void))type metadata accessor for PgQuery_SelectStmt._StorageClass, PgQuery_SelectStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_SelectStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_SelectStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
        case 4:
        case 6:
        case 8:
        case 9:
        case 10:
        case 14:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_15;
        case 2:
          type metadata accessor for PgQuery_IntoClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
          goto LABEL_14;
        case 5:
        case 7:
        case 11:
        case 12:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_14;
        case 13:
          lazy protocol witness table accessor for type PgQuery_LimitOption and conformance PgQuery_LimitOption();
          goto LABEL_11;
        case 15:
          type metadata accessor for PgQuery_WithClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
          goto LABEL_14;
        case 16:
          lazy protocol witness table accessor for type PgQuery_SetOperation and conformance PgQuery_SetOperation();
LABEL_11:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_15;
        case 17:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_15;
        case 18:
        case 19:
          type metadata accessor for PgQuery_SelectStmt(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);
LABEL_14:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_15:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_SelectStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v89 = a2;
  uint64_t v90 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SelectStmt?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v72 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v78 = (char *)&v68 - v7;
  uint64_t SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  uint64_t v74 = *(void *)(SelectStmt - 8);
  uint64_t v9 = MEMORY[0x1F4188790](SelectStmt);
  uint64_t v69 = (uint64_t)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v70 = (uint64_t)&v68 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v76 = (uint64_t)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PgQuery_WithClause(0);
  uint64_t v75 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v73 = (uint64_t)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v81 = (uint64_t)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v83 = (uint64_t)&v68 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v85 = (uint64_t)&v68 - v22;
  MEMORY[0x1F4188790](v21);
  uint64_t v87 = (uint64_t)&v68 - v23;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v88 = *(void *)(Node - 8);
  uint64_t v25 = MEMORY[0x1F4188790](Node);
  uint64_t v79 = (uint64_t)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v80 = (uint64_t)&v68 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v84 = (uint64_t)&v68 - v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v86 = (uint64_t)&v68 - v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IntoClause?);
  MEMORY[0x1F4188790](v32 - 8);
  uint64_t v34 = (char *)&v68 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  uint64_t v36 = *(void *)(IntoClause - 8);
  MEMORY[0x1F4188790](IntoClause);
  uint64_t v38 = (char *)&v68 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = SelectStmt;
  uint64_t v39 = *(int *)(SelectStmt + 20);
  uint64_t v71 = v3;
  uint64_t v40 = *(void *)(v3 + v39);
  uint64_t v41 = *(void *)(*(void *)(v40 + 16) + 16);
  uint64_t v77 = v14;
  if (v41)
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v42 = v93;
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    uint64_t v93 = v42;
    if (v42) {
      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause, (uint64_t)v34, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, IntoClause) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v34, &demangling cache variable for type metadata for PgQuery_IntoClause?);
    uint64_t v43 = v93;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v34, (uint64_t)v38, type metadata accessor for PgQuery_IntoClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
    uint64_t v44 = v93;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v43 = v44;
    if (v44)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v38, type metadata accessor for PgQuery_IntoClause);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v38, type metadata accessor for PgQuery_IntoClause);
  }
  if (*(void *)(*(void *)(v40
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v43) {
      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v40
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v43) {
      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v45 = v87;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v87, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  if (v46(v45, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v45, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v47 = v45;
    uint64_t v48 = v86;
    outlined init with take of PgQuery_OidList(v47, v86, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v43) {
      goto LABEL_27;
    }
    outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
  }
  if (*(void *)(*(void *)(v40
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v43) {
      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v49 = v85;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause, v85, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v46(v49, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v49, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v50 = v49;
    uint64_t v48 = v84;
    outlined init with take of PgQuery_OidList(v50, v84, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v43) {
      goto LABEL_27;
    }
    outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
  }
  if (*(void *)(*(void *)(v40
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v43) {
      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
  }
  if (!*(void *)(*(void *)(v40
                              + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists)
                  + 16))
    goto LABEL_35;
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  swift_bridgeObjectRetain();
  dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
  if (v43)
  {
LABEL_37:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRelease();
LABEL_35:
  if (*(void *)(*(void *)(v40
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v43) {
      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v52 = v83;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, v83, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v46(v52, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v52, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_44;
  }
  uint64_t v53 = v52;
  uint64_t v48 = v80;
  outlined init with take of PgQuery_OidList(v53, v80, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  if (v43)
  {
LABEL_27:
    outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
    return swift_release();
  }
  outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
LABEL_44:
  uint64_t v54 = v81;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, v81, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v46(v54, 1, Node) != 1)
  {
    uint64_t v56 = v54;
    uint64_t v48 = v79;
    outlined init with take of PgQuery_OidList(v56, v79, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v55 = v82;
    if (!v43)
    {
      outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Node);
      goto LABEL_48;
    }
    goto LABEL_27;
  }
  outlined destroy of AnyValue?(v54, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v55 = v82;
LABEL_48:
  if (*(void *)(v40
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption))
  {
    char v57 = *(unsigned char *)(v40
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption
                   + 8);
    uint64_t v91 = *(void *)(v40
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption);
    char v92 = v57;
    lazy protocol witness table accessor for type PgQuery_LimitOption and conformance PgQuery_LimitOption();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v43) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v40
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v43) {
      goto LABEL_37;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v58 = v76;
  outlined init with copy of PgQuery_Alias?(v40+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v76, &demangling cache variable for type metadata for PgQuery_WithClause?);
  int v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v58, 1, v77);
  uint64_t v60 = (uint64_t)v78;
  if (v59 == 1)
  {
    outlined destroy of AnyValue?(v58, &demangling cache variable for type metadata for PgQuery_WithClause?);
  }
  else
  {
    uint64_t v61 = v58;
    uint64_t v62 = v73;
    outlined init with take of PgQuery_OidList(v61, v73, type metadata accessor for PgQuery_WithClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v62, type metadata accessor for PgQuery_WithClause);
    if (v43) {
      return swift_release();
    }
  }
  if (*(void *)(v40
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op))
  {
    char v63 = *(unsigned char *)(v40
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                   + 8);
    uint64_t v91 = *(void *)(v40
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
    char v92 = v63;
    lazy protocol witness table accessor for type PgQuery_SetOperation and conformance PgQuery_SetOperation();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v43) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v40
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v43) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v40 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, v60, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  char v64 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48);
  v74 += 48;
  if (v64(v60, 1, v55) == 1)
  {
    outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  }
  else
  {
    uint64_t v65 = v70;
    outlined init with take of PgQuery_OidList(v60, v70, type metadata accessor for PgQuery_SelectStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v65, type metadata accessor for PgQuery_SelectStmt);
    if (v43) {
      return swift_release();
    }
  }
  uint64_t v66 = v72;
  outlined init with copy of PgQuery_Alias?(v40 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v72, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  if (v64(v66, 1, v55) == 1)
  {
    outlined destroy of AnyValue?(v66, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  }
  else
  {
    uint64_t v67 = v69;
    outlined init with take of PgQuery_OidList(v66, v69, type metadata accessor for PgQuery_SelectStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_SelectStmt);
    if (v43) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t static PgQuery_SelectStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_SelectStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_SelectStmt.== infix(_:_:)) & 1;
}

BOOL closure #1 in static PgQuery_SelectStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  uint64_t v131 = *(void *)(SelectStmt - 8);
  MEMORY[0x1F4188790](SelectStmt);
  uint64_t v129 = (uint64_t)&v129 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SelectStmt?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v130 = (uint64_t)&v129 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v133 = (uint64_t)&v129 - v8;
  uint64_t v134 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_SelectStmt?, PgQuery_SelectStmt?));
  uint64_t v9 = MEMORY[0x1F4188790](v134);
  uint64_t v132 = (uint64_t)&v129 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v135 = (uint64_t)&v129 - v11;
  uint64_t v12 = type metadata accessor for PgQuery_WithClause(0);
  uint64_t v140 = *(void *)(v12 - 8);
  uint64_t v141 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v137 = (uint64_t)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WithClause?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v138 = (uint64_t)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
  MEMORY[0x1F4188790](v139);
  uint64_t v142 = (uint64_t)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v152 = *(void *)(Node - 8);
  uint64_t v153 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v149 = (uint64_t)&v129 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v143 = (uint64_t)&v129 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v144 = (uint64_t)&v129 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v147 = (uint64_t)&v129 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v150 = (uint64_t)&v129 - v26;
  uint64_t v154 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v27 = MEMORY[0x1F4188790](v154);
  uint64_t v145 = (char *)&v129 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v146 = (uint64_t)&v129 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v148 = (uint64_t)&v129 - v32;
  MEMORY[0x1F4188790](v31);
  uint64_t v151 = (uint64_t)&v129 - v33;
  uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  uint64_t v35 = *(void *)(IntoClause - 8);
  MEMORY[0x1F4188790](IntoClause);
  uint64_t v155 = (uint64_t)&v129 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IntoClause?);
  MEMORY[0x1F4188790](v37 - 8);
  uint64_t v39 = (char *)&v129 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_IntoClause?, PgQuery_IntoClause?));
  MEMORY[0x1F4188790](v40);
  uint64_t v42 = (char *)&v129 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = *(void *)(a1 + 16);
  uint64_t v44 = *(void *)(a2 + 16);
  uint64_t v45 = a1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  LOBYTE(a1) = specialized static Array<A>.== infix(_:_:)(v43, v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((a1 & 1) == 0) {
    goto LABEL_85;
  }
  uint64_t v46 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause;
  uint64_t v47 = (uint64_t)&v42[*(int *)(v40 + 48)];
  outlined init with copy of PgQuery_Alias?(v45+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__intoClause, (uint64_t)v42, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  outlined init with copy of PgQuery_Alias?(v46, v47, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  uint64_t v49 = a2;
  uint64_t v50 = v45;
  if (v48((uint64_t)v42, 1, IntoClause) == 1)
  {
    if (v48(v47, 1, IntoClause) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v42, &demangling cache variable for type metadata for PgQuery_IntoClause?);
      goto LABEL_10;
    }
LABEL_8:
    outlined destroy of AnyValue?((uint64_t)v42, &demangling cache variable for type metadata for (PgQuery_IntoClause?, PgQuery_IntoClause?));
    goto LABEL_85;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v42, (uint64_t)v39, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  if (v48(v47, 1, IntoClause) == 1)
  {
    outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_IntoClause);
    goto LABEL_8;
  }
  uint64_t v51 = v155;
  outlined init with take of PgQuery_OidList(v47, v155, type metadata accessor for PgQuery_IntoClause);
  char v52 = specialized static PgQuery_IntoClause.== infix(_:_:)((uint64_t)v39, v51);
  outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_IntoClause);
  outlined destroy of PgQuery_Alias((uint64_t)v39, type metadata accessor for PgQuery_IntoClause);
  outlined destroy of AnyValue?((uint64_t)v42, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  if ((v52 & 1) == 0) {
    goto LABEL_85;
  }
LABEL_10:
  uint64_t v53 = *(void *)(v45
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  uint64_t v54 = *(void *)(a2
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v55 = specialized static Array<A>.== infix(_:_:)(v53, v54);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v55 & 1) == 0) {
    goto LABEL_85;
  }
  uint64_t v56 = *(void *)(v45
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause);
  uint64_t v57 = *(void *)(a2
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v58 = specialized static Array<A>.== infix(_:_:)(v56, v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v58 & 1) == 0) {
    goto LABEL_85;
  }
  uint64_t v59 = v45
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t v60 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t v61 = v154;
  uint64_t v62 = v151;
  uint64_t v63 = v151 + *(int *)(v154 + 48);
  outlined init with copy of PgQuery_Alias?(v59, v151, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v60, v63, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v64 = v153;
  uint64_t v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v152 + 48);
  if (v65(v62, 1, v153) == 1)
  {
    if (v65(v63, 1, v64) == 1)
    {
      outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_19;
    }
LABEL_17:
    outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_85;
  }
  uint64_t v66 = v150;
  outlined init with copy of PgQuery_Alias?(v62, v150, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v65(v63, 1, v64) == 1)
  {
    outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
    goto LABEL_17;
  }
  uint64_t v67 = v149;
  outlined init with take of PgQuery_OidList(v63, v149, type metadata accessor for PgQuery_Node);
  LODWORD(v155) = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v66, v67, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v67, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v66, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v62, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v155 & 1) == 0) {
    goto LABEL_85;
  }
LABEL_19:
  uint64_t v68 = *(void *)(v50
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause);
  uint64_t v69 = *(void *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v70 = specialized static Array<A>.== infix(_:_:)(v68, v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v70 & 1) == 0) {
    goto LABEL_85;
  }
  uint64_t v71 = v49
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause;
  uint64_t v72 = *(int *)(v61 + 48);
  uint64_t v73 = v148;
  uint64_t v74 = v148 + v72;
  outlined init with copy of PgQuery_Alias?(v50+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__havingClause, v148, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v71, v74, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v65(v73, 1, v64) == 1)
  {
    if (v65(v74, 1, v64) != 1) {
      goto LABEL_25;
    }
    outlined destroy of AnyValue?(v73, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v75 = v73;
    uint64_t v76 = v73;
    uint64_t v77 = v147;
    outlined init with copy of PgQuery_Alias?(v75, v147, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v65(v74, 1, v64) == 1)
    {
      outlined destroy of PgQuery_Alias(v77, type metadata accessor for PgQuery_Node);
      uint64_t v73 = v76;
      goto LABEL_25;
    }
    uint64_t v78 = v149;
    outlined init with take of PgQuery_OidList(v74, v149, type metadata accessor for PgQuery_Node);
    char v79 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v77, v78, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
    outlined destroy of PgQuery_Alias(v78, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v77, type metadata accessor for PgQuery_Node);
    outlined destroy of AnyValue?(v76, &demangling cache variable for type metadata for PgQuery_Node?);
    if ((v79 & 1) == 0) {
      goto LABEL_85;
    }
  }
  uint64_t v80 = *(void *)(v50
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause);
  uint64_t v81 = *(void *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__windowClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v82 = specialized static Array<A>.== infix(_:_:)(v80, v81);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v82 & 1) == 0) {
    goto LABEL_85;
  }
  uint64_t v83 = *(void *)(v50
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists);
  uint64_t v84 = *(void *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v85 = specialized static Array<A>.== infix(_:_:)(v83, v84);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v85 & 1) == 0) {
    goto LABEL_85;
  }
  uint64_t v86 = *(void *)(v50
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause);
  uint64_t v87 = *(void *)(v49
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v88 = specialized static Array<A>.== infix(_:_:)(v86, v87);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v88 & 1) == 0) {
    goto LABEL_85;
  }
  uint64_t v89 = v49
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset;
  uint64_t v73 = v146;
  uint64_t v90 = v146 + *(int *)(v154 + 48);
  outlined init with copy of PgQuery_Alias?(v50+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOffset, v146, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v89, v90, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v65(v73, 1, v64) == 1)
  {
    if (v65(v90, 1, v64) != 1) {
      goto LABEL_25;
    }
    outlined destroy of AnyValue?(v73, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v73 = (uint64_t)v145;
  }
  else
  {
    uint64_t v91 = v73;
    uint64_t v92 = v144;
    outlined init with copy of PgQuery_Alias?(v91, v144, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v65(v90, 1, v64) == 1)
    {
      outlined destroy of PgQuery_Alias(v92, type metadata accessor for PgQuery_Node);
      uint64_t v73 = v146;
      goto LABEL_25;
    }
    uint64_t v93 = v149;
    outlined init with take of PgQuery_OidList(v90, v149, type metadata accessor for PgQuery_Node);
    char v94 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v92, v93, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
    outlined destroy of PgQuery_Alias(v93, type metadata accessor for PgQuery_Node);
    outlined destroy of PgQuery_Alias(v92, type metadata accessor for PgQuery_Node);
    outlined destroy of AnyValue?(v146, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v73 = (uint64_t)v145;
    if ((v94 & 1) == 0) {
      goto LABEL_85;
    }
  }
  uint64_t v95 = v49
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount;
  uint64_t v96 = v73 + *(int *)(v154 + 48);
  outlined init with copy of PgQuery_Alias?(v50+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitCount, v73, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v95, v96, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v65(v73, 1, v64) == 1)
  {
    if (v65(v96, 1, v64) == 1)
    {
      outlined destroy of AnyValue?(v73, &demangling cache variable for type metadata for PgQuery_Node?);
      goto LABEL_42;
    }
LABEL_25:
    outlined destroy of AnyValue?(v73, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_85;
  }
  uint64_t v97 = v143;
  outlined init with copy of PgQuery_Alias?(v73, v143, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v65(v96, 1, v64) == 1)
  {
    outlined destroy of PgQuery_Alias(v97, type metadata accessor for PgQuery_Node);
    goto LABEL_25;
  }
  uint64_t v98 = v149;
  outlined init with take of PgQuery_OidList(v96, v149, type metadata accessor for PgQuery_Node);
  char v99 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v97, v98, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v98, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v97, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v73, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((v99 & 1) == 0) {
    goto LABEL_85;
  }
LABEL_42:
  uint64_t v100 = *(void *)(v50
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption);
  uint64_t v101 = *(void *)(v49
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption);
  if (*(unsigned char *)(v49
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__limitOption
                + 8) == 1)
  {
    switch(v101)
    {
      case 1:
        if (v100 != 1) {
          goto LABEL_85;
        }
        goto LABEL_47;
      case 2:
        if (v100 != 2) {
          goto LABEL_85;
        }
        goto LABEL_47;
      case 3:
        if (v100 != 3) {
          goto LABEL_85;
        }
        goto LABEL_47;
      default:
        if (!v100) {
          goto LABEL_47;
        }
        goto LABEL_85;
    }
  }
  if (v100 != v101) {
    goto LABEL_85;
  }
LABEL_47:
  uint64_t v102 = *(void *)(v50
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause);
  uint64_t v103 = *(void *)(v49
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lockingClause);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v104 = specialized static Array<A>.== infix(_:_:)(v102, v103);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v104 & 1) == 0) {
    goto LABEL_85;
  }
  uint64_t v105 = v49
       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  uint64_t v106 = v142;
  uint64_t v107 = v142 + *(int *)(v139 + 48);
  outlined init with copy of PgQuery_Alias?(v50+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause, v142, &demangling cache variable for type metadata for PgQuery_WithClause?);
  outlined init with copy of PgQuery_Alias?(v105, v107, &demangling cache variable for type metadata for PgQuery_WithClause?);
  uint64_t v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48);
  if (v108(v106, 1, v141) == 1)
  {
    if (v108(v107, 1, v141) == 1)
    {
      outlined destroy of AnyValue?(v142, &demangling cache variable for type metadata for PgQuery_WithClause?);
      goto LABEL_61;
    }
LABEL_59:
    outlined destroy of AnyValue?(v142, &demangling cache variable for type metadata for (PgQuery_WithClause?, PgQuery_WithClause?));
    goto LABEL_85;
  }
  outlined init with copy of PgQuery_Alias?(v142, v138, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if (v108(v107, 1, v141) == 1)
  {
    outlined destroy of PgQuery_Alias(v138, type metadata accessor for PgQuery_WithClause);
    goto LABEL_59;
  }
  uint64_t v109 = v137;
  outlined init with take of PgQuery_OidList(v107, v137, type metadata accessor for PgQuery_WithClause);
  uint64_t v110 = v138;
  char v111 = specialized static PgQuery_WithClause.== infix(_:_:)(v138, v109);
  outlined destroy of PgQuery_Alias(v109, type metadata accessor for PgQuery_WithClause);
  outlined destroy of PgQuery_Alias(v110, type metadata accessor for PgQuery_WithClause);
  outlined destroy of AnyValue?(v142, &demangling cache variable for type metadata for PgQuery_WithClause?);
  if ((v111 & 1) == 0) {
    goto LABEL_85;
  }
LABEL_61:
  uint64_t v112 = *(void *)(v50
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
  uint64_t v113 = *(void *)(v49
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op);
  if (*(unsigned char *)(v49
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op
                + 8) == 1)
  {
    switch(v113)
    {
      case 1:
        if (v112 != 1) {
          goto LABEL_85;
        }
        goto LABEL_66;
      case 2:
        if (v112 != 2) {
          goto LABEL_85;
        }
        goto LABEL_66;
      case 3:
        if (v112 != 3) {
          goto LABEL_85;
        }
        goto LABEL_66;
      case 4:
        if (v112 != 4) {
          goto LABEL_85;
        }
        goto LABEL_66;
      default:
        if (!v112) {
          goto LABEL_66;
        }
        goto LABEL_85;
    }
  }
  if (v112 != v113) {
    goto LABEL_85;
  }
LABEL_66:
  if (*(unsigned __int8 *)(v50
                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all) != *(unsigned __int8 *)(v49 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__all))
  {
LABEL_85:
    swift_release();
    swift_release();
    return 0;
  }
  uint64_t v114 = v49
       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  uint64_t v115 = v135;
  uint64_t v116 = v135 + *(int *)(v134 + 48);
  outlined init with copy of PgQuery_Alias?(v50 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, v135, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  outlined init with copy of PgQuery_Alias?(v114, v116, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  uint64_t v117 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48);
  if (v117(v115, 1, SelectStmt) == 1)
  {
    if (v117(v116, 1, SelectStmt) == 1)
    {
      outlined destroy of AnyValue?(v135, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
      goto LABEL_82;
    }
    goto LABEL_72;
  }
  outlined init with copy of PgQuery_Alias?(v135, v133, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  if (v117(v116, 1, SelectStmt) == 1)
  {
    outlined destroy of PgQuery_Alias(v133, type metadata accessor for PgQuery_SelectStmt);
LABEL_72:
    outlined destroy of AnyValue?(v135, &demangling cache variable for type metadata for (PgQuery_SelectStmt?, PgQuery_SelectStmt?));
    goto LABEL_85;
  }
  uint64_t v118 = v129;
  outlined init with take of PgQuery_OidList(v116, v129, type metadata accessor for PgQuery_SelectStmt);
  uint64_t v119 = v133;
  char v120 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v133, v118, type metadata accessor for PgQuery_SelectStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_SelectStmt.== infix(_:_:));
  outlined destroy of PgQuery_Alias(v118, type metadata accessor for PgQuery_SelectStmt);
  outlined destroy of PgQuery_Alias(v119, type metadata accessor for PgQuery_SelectStmt);
  outlined destroy of AnyValue?(v135, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  if ((v120 & 1) == 0) {
    goto LABEL_85;
  }
LABEL_82:
  uint64_t v121 = v49
       + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg;
  uint64_t v122 = v132;
  uint64_t v123 = v132 + *(int *)(v134 + 48);
  outlined init with copy of PgQuery_Alias?(v50 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_SelectStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v132, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  outlined init with copy of PgQuery_Alias?(v121, v123, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  if (v117(v122, 1, SelectStmt) != 1)
  {
    outlined init with copy of PgQuery_Alias?(v132, v130, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
    if (v117(v123, 1, SelectStmt) == 1)
    {
      swift_release();
      swift_release();
      outlined destroy of PgQuery_Alias(v130, type metadata accessor for PgQuery_SelectStmt);
      goto LABEL_89;
    }
    uint64_t v125 = v123;
    uint64_t v126 = v129;
    outlined init with take of PgQuery_OidList(v125, v129, type metadata accessor for PgQuery_SelectStmt);
    uint64_t v127 = v130;
    char v128 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v130, v126, type metadata accessor for PgQuery_SelectStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_SelectStmt.== infix(_:_:));
    swift_release();
    swift_release();
    outlined destroy of PgQuery_Alias(v126, type metadata accessor for PgQuery_SelectStmt);
    outlined destroy of PgQuery_Alias(v127, type metadata accessor for PgQuery_SelectStmt);
    outlined destroy of AnyValue?(v132, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
    return (v128 & 1) != 0;
  }
  swift_release();
  swift_release();
  if (v117(v123, 1, SelectStmt) != 1)
  {
LABEL_89:
    outlined destroy of AnyValue?(v132, &demangling cache variable for type metadata for (PgQuery_SelectStmt?, PgQuery_SelectStmt?));
    return 0;
  }
  outlined destroy of AnyValue?(v132, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  return 1;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SelectStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SelectStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SelectStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SelectStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SelectStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SelectStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SelectStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SelectStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SelectStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SelectStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterTableStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_AlterTableStmt(0);
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterTableStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = a3;
  v15[1] = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v9 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = type metadata accessor for PgQuery_AlterTableStmt(0);
  outlined init with copy of PgQuery_Alias?(v3 + *(int *)(v15[0] + 32), (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_RangeVar);
    if (v4) {
      return result;
    }
  }
  if (!*(void *)(*(void *)v3 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    uint64_t v13 = *(void *)(v3 + 8);
    unsigned __int8 v14 = *(unsigned char *)(v3 + 16);
    if (!destructiveProjectEnumData for StorableValue(v13, v14)
      || (v15[2] = v13,
          unsigned __int8 v16 = v14,
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v4))
    {
      if (*(unsigned char *)(v3 + 17) != 1) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
      uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      if (!v4) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterTableStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 16) = 1;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 32);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56);

  return v6(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTableStmt()
{
  return 0xD000000000000017;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_AlterTableStmt())(void, void)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterTableStmt()
{
  return PgQuery_AlterTableStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterTableStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTableStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTableStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTableStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterTableCmd._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_AlterTableCmd._StorageClass()
{
  return type metadata accessor for PgQuery_AlterTableCmd._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterTableCmd._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTableCmd._StorageClass);
}

void type metadata completion function for PgQuery_AlterTableCmd._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for PgQuery_RoleSpec(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RoleSpec);
}

uint64_t PgQuery_AlterTableCmd.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_AlterTableCmd, (void (*)(void))type metadata accessor for PgQuery_AlterTableCmd._StorageClass, specialized PgQuery_AlterTableCmd._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_AlterTableCmd.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_AlterTableCmd.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType();
          goto LABEL_12;
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 4:
          type metadata accessor for PgQuery_RoleSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
          goto LABEL_10;
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_10:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 6:
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
LABEL_12:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterTableCmd.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v26 = (uint64_t)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v25 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v23 = (uint64_t)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v30 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v24 = (uint64_t)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(int *)(type metadata accessor for PgQuery_AlterTableCmd(0) + 20);
  uint64_t v22 = v0;
  uint64_t v11 = *(void *)(v0 + v10);
  uint64_t v12 = *(void *)(v11 + 16);
  unsigned __int8 v13 = *(unsigned char *)(v11 + 24);
  if (destructiveProjectEnumData for StorableValue(v12, v13))
  {
    uint64_t v28 = v12;
    unsigned __int8 v29 = v13;
    lazy protocol witness table accessor for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
  }
  unint64_t v14 = *(void *)(v11 + 40);
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = *(void *)(v11 + 32) & 0xFFFFFFFFFFFFLL;
  }
  if (v15)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v11 + 48))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v11+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v7, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  else
  {
    uint64_t v16 = v24;
    outlined init with take of PgQuery_OidList((uint64_t)v7, v24, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v16, type metadata accessor for PgQuery_RoleSpec);
    if (v1) {
      return swift_release();
    }
  }
  uint64_t v17 = v26;
  outlined init with copy of PgQuery_Alias?(v11+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, v26, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v17, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v17, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_17;
  }
  uint64_t v18 = v17;
  uint64_t v19 = v23;
  outlined init with take of PgQuery_OidList(v18, v23, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v19, type metadata accessor for PgQuery_Node);
  if (v1) {
    return swift_release();
  }
LABEL_17:
  if (*(void *)(v11
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior))
  {
    unsigned __int8 v20 = *(unsigned char *)(v11
                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
                   + 8);
    uint64_t v28 = *(void *)(v11
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
    unsigned __int8 v29 = v20;
    lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v11
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterTableCmd@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterTableCmd._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTableCmd()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterTableCmd()
{
  return PgQuery_AlterTableCmd.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTableCmd(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableCmd);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTableCmd@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTableCmd._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTableCmd(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableCmd);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTableCmd(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableCmd);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterDomainStmt._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_AlterDomainStmt._StorageClass()
{
  return type metadata accessor for PgQuery_AlterDomainStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterDomainStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterDomainStmt._StorageClass);
}

void type metadata completion function for PgQuery_AlterDomainStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_AlterDomainStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_AlterDomainStmt, (void (*)(void))type metadata accessor for PgQuery_AlterDomainStmt._StorageClass, (uint64_t (*)(uint64_t))specialized PgQuery_AlterDomainStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_AlterDomainStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_AlterDomainStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterDomainStmt.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v20 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v17 = (uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(int *)(type metadata accessor for PgQuery_AlterDomainStmt(0) + 20);
  uint64_t v16 = v0;
  uint64_t v8 = *(void **)(v0 + v7);
  unint64_t v9 = v8[3];
  if ((v9 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(v9) & 0xF;
  }
  else {
    uint64_t v10 = v8[2] & 0xFFFFFFFFFFFFLL;
  }
  swift_retain();
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  if (*(void *)(v8[4] + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  unint64_t v11 = v8[6];
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v12 = v8[5] & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v8+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v4, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v13 = v17;
    outlined init with take of PgQuery_OidList((uint64_t)v4, v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_Node);
    if (v1) {
      return swift_release();
    }
  }
  if (*(void *)((char *)v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior))
  {
    char v14 = *((unsigned char *)v8
          + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
          + 8);
    uint64_t v18 = *(void *)((char *)v8
                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
    char v19 = v14;
    lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*((unsigned char *)v8
       + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterDomainStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterDomainStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterDomainStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterDomainStmt()
{
  return PgQuery_AlterDomainStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterDomainStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDomainStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterDomainStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterDomainStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterDomainStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDomainStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterDomainStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDomainStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_SetOperationStmt._StorageClass.init(copying:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(_WORD *)(v1 + 24) = 1;
  uint64_t v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg;
  v5(v1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, 1, 1, Node);
  uint64_t v7 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes) = MEMORY[0x1E4FBC860];
  uint64_t v9 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods) = v8;
  uint64_t v10 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations) = v8;
  uint64_t v11 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses) = v8;
  char v12 = *(unsigned char *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(unsigned char *)(v1 + 24) = v12;
  *(unsigned char *)(v1 + 25) = *(unsigned char *)(a1 + 25);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  *(void *)(v1 + v7) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v9) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v10) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses);
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v1 + v11) = v13;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_SetOperationStmt._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_SetOperationStmt._StorageClass()
{
  return type metadata accessor for PgQuery_SetOperationStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SetOperationStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SetOperationStmt._StorageClass);
}

void type metadata completion function for PgQuery_SetOperationStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_SetOperationStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_SetOperationStmt, (void (*)(void))type metadata accessor for PgQuery_SetOperationStmt._StorageClass, PgQuery_SetOperationStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_SetOperationStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_SetOperationStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_SetOperation and conformance PgQuery_SetOperation();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_9;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_9;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_9;
        case 5:
        case 6:
        case 7:
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_9:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_SetOperationStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v27 = (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v26 - v7;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  uint64_t v11 = MEMORY[0x1F4188790](Node);
  uint64_t v26 = (uint64_t)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v14 = (char *)&v26 - v13;
  uint64_t v15 = *(void *)(v2 + *(int *)(type metadata accessor for PgQuery_SetOperationStmt(0) + 20));
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v28 = v2;
  if (v16)
  {
    char v17 = *(unsigned char *)(v15 + 24);
    uint64_t v30 = v16;
    char v31 = v17;
    lazy protocol witness table accessor for type PgQuery_SetOperation and conformance PgQuery_SetOperation();
    swift_retain();
    uint64_t v18 = v32;
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v18) {
      return swift_release();
    }
    uint64_t v29 = a2;
    uint64_t v19 = Node;
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v29 = a2;
    swift_retain();
    uint64_t v19 = Node;
    uint64_t v20 = v32;
  }
  if (*(unsigned char *)(v15 + 25) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v20) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v15+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v21(v8, 1, v19) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v14, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v20)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v14, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v14, type metadata accessor for PgQuery_Node);
  }
  uint64_t v22 = v27;
  outlined init with copy of PgQuery_Alias?(v15+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21((char *)v22, 1, v19) == 1)
  {
    outlined destroy of AnyValue?(v22, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_16;
  }
  uint64_t v23 = v22;
  uint64_t v24 = v26;
  outlined init with take of PgQuery_OidList(v23, v26, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v24, type metadata accessor for PgQuery_Node);
  if (v20) {
    return swift_release();
  }
LABEL_16:
  if (*(void *)(*(void *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v20) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v20) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v20) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v20) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SetOperationStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SetOperationStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SetOperationStmt()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SetOperationStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_SetOperationStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SetOperationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SetOperationStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SetOperationStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SetOperationStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SetOperationStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SetOperationStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SetOperationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SetOperationStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_GrantStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_11;
        case 2:
          lazy protocol witness table accessor for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType();
          goto LABEL_10;
        case 3:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          goto LABEL_10;
        case 4:
        case 5:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_11;
        case 8:
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
LABEL_10:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_11:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_GrantStmt.traverse<A>(visitor:)()
{
  if (*(unsigned char *)v0 != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0 + 8)
      || (lazy protocol witness table accessor for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!destructiveProjectEnumData for StorableValue(*(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32))
        || (lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        if (!*(void *)(*(void *)(v0 + 40) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(*(void *)(v0 + 48) + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (!*(void *)(*(void *)(v0 + 56) + 16)
              || (type metadata accessor for PgQuery_Node(0),
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
            {
              if (*(unsigned char *)(v0 + 64) != 1
                || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
              {
                if (!*(void *)(v0 + 72)
                  || (lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior(),
                      uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                      !v1))
                {
                  type metadata accessor for PgQuery_GrantStmt(0);
                  return UnknownStorage.traverse<A>(visitor:)();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_GrantStmt@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 40) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 48) = v1;
  *(void *)(a1 + 56) = v1;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 80) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_GrantStmt()
{
  return 0xD000000000000012;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_GrantStmt())(void, void)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_GrantStmt()
{
  return PgQuery_GrantStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_GrantStmt()
{
  return PgQuery_GrantStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_GrantStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_GrantStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_GrantStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_GrantStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_GrantStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_GrantRoleStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for PgQuery_GrantRoleStmt(0);
          type metadata accessor for PgQuery_RoleSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 6:
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_GrantRoleStmt.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v12 = (uint64_t)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(*(void *)(v0 + 8) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (*(unsigned char *)(v0 + 16) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        if (*(unsigned char *)(v0 + 17) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          uint64_t GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
          outlined init with copy of PgQuery_Alias?(v0 + *(int *)(GrantRoleStmt + 40), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v4, 1, RoleSpec) == 1)
          {
            outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
          }
          else
          {
            uint64_t v9 = v12;
            outlined init with take of PgQuery_OidList((uint64_t)v4, v12, type metadata accessor for PgQuery_RoleSpec);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
            dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
            uint64_t result = outlined destroy of PgQuery_Alias(v9, type metadata accessor for PgQuery_RoleSpec);
            if (v1) {
              return result;
            }
          }
          if (!*(void *)(v0 + 24)) {
            return UnknownStorage.traverse<A>(visitor:)();
          }
          char v10 = *(unsigned char *)(v0 + 32);
          uint64_t v13 = *(void *)(v0 + 24);
          char v14 = v10;
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
          if (!v1) {
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_GrantRoleStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)a2 = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 8) = v4;
  *(_WORD *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 1;
  UnknownStorage.init()();
  uint64_t v5 = a2 + *(int *)(a1 + 40);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 56);

  return v7(v5, 1, 1, RoleSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_GrantRoleStmt()
{
  return 0xD000000000000016;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_GrantRoleStmt())(void, void)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_GrantRoleStmt()
{
  return PgQuery_GrantRoleStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_GrantRoleStmt()
{
  return PgQuery_GrantRoleStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantRoleStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_GrantRoleStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_GrantRoleStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_GrantRoleStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantRoleStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantRoleStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterDefaultPrivilegesStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
        type metadata accessor for PgQuery_GrantStmt(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantStmt);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterDefaultPrivilegesStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  v16[3] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  uint64_t v10 = *(void *)(GrantStmt - 8);
  MEMORY[0x1F4188790](GrantStmt);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(*(void *)v4 + 16);
  v16[1] = a2;
  if (!v13
    || (type metadata accessor for PgQuery_Node(0),
        v16[0] = v12,
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), uint64_t v12 = (char *)v16[0], !v3))
  {
    uint64_t AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
    outlined init with copy of PgQuery_Alias?(v4 + *(int *)(AlterDefaultPrivilegesStmt + 24), (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, GrantStmt) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_GrantStmt);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantStmt);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_GrantStmt);
      if (v3) {
        return result;
      }
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterDefaultPrivilegesStmt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_AlterDefaultPrivilegesStmt(a1, type metadata accessor for PgQuery_GrantStmt, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterDefaultPrivilegesStmt()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterDefaultPrivilegesStmt()
{
  return PgQuery_AlterDefaultPrivilegesStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_AlterDefaultPrivilegesStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterDefaultPrivilegesStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterDefaultPrivilegesStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ClosePortalStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_ClosePortalStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ClosePortalStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ClosePortalStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClosePortalStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ClosePortalStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ClosePortalStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ClosePortalStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClosePortalStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ClosePortalStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClosePortalStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ClosePortalStmt(char *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ClosePortalStmt) & 1;
}

uint64_t PgQuery_ClusterStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_ClusterStmt(0);
        type metadata accessor for PgQuery_RangeVar(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_ClusterStmt.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v16 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v8 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
  outlined init with copy of PgQuery_Alias?(v3 + *(int *)(ClusterStmt + 28), (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
    if (v2) {
      return result;
    }
  }
  unint64_t v12 = *(void *)(v3 + 8);
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = *(void *)v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v2))
  {
    if (!*(_DWORD *)(v3 + 16)) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (!v2) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ClusterStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(_DWORD *)(a2 + 16) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56);

  return v6(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ClusterStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ClusterStmt()
{
  return PgQuery_ClusterStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ClusterStmt(uint64_t a1)
{
  return PgQuery_ClusterStmt.traverse<A>(visitor:)(a1);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ClusterStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClusterStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ClusterStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ClusterStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ClusterStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClusterStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ClusterStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClusterStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CopyStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v21 = (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t v19 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v5, 1, 1, RangeVar);
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void (**)(void))(*(void *)(Node - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v9)(v7, 1, 1, Node);
  uint64_t v10 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist) = MEMORY[0x1E4FBC860];
  uint64_t v18 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom) = 0;
  uint64_t v12 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram) = 0;
  uint64_t v13 = (void *)(v1
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename);
  *uint64_t v13 = 0;
  v13[1] = 0xE000000000000000;
  uint64_t v14 = OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v11;
  uint64_t v20 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  v9();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v19, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined assign with copy of PgQuery_Node?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, v7, &demangling cache variable for type metadata for PgQuery_Node?);
  *(void *)(v1 + v10) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + v18) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom);
  *(unsigned char *)(v1 + v12) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram);
  uint64_t v15 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename
                  + 8);
  *uint64_t v13 = *(void *)(a1
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename);
  v13[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v14) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = v21;
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v21, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?(v16, v20, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_CopyStmt._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_CopyStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CopyStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CopyStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CopyStmt._StorageClass);
}

void type metadata completion function for PgQuery_CopyStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_CopyStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CopyStmt, (void (*)(void))type metadata accessor for PgQuery_CopyStmt._StorageClass, PgQuery_CopyStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CopyStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CopyStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_10;
        case 2:
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_10:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_11;
        case 3:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_11;
        case 4:
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_11;
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_11:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CopyStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v35 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v40 = *(void *)(Node - 8);
  uint64_t v9 = MEMORY[0x1F4188790](Node);
  uint64_t v33 = (uint64_t)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v32 - v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v17 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(int *)(type metadata accessor for PgQuery_CopyStmt(0) + 20);
  uint64_t v34 = v3;
  uint64_t v21 = *(void *)(v3 + v20);
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v22 = v37;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v15, (uint64_t)v19, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    swift_retain();
    uint64_t v23 = v37;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v22 = v23;
    if (v23)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_RangeVar);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_RangeVar);
  }
  outlined init with copy of PgQuery_Alias?(v21 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
  uint64_t v25 = Node;
  v40 += 48;
  if (v24(v8, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
    if (v22) {
      return swift_release();
    }
  }
  if (!*(void *)(*(void *)(v21
                              + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist)
                  + 16)
    || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v22))
  {
    if (*(unsigned char *)(v21
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom) != 1
      || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v22))
    {
      if (*(unsigned char *)(v21
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram) != 1
        || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v22))
      {
        unint64_t v26 = *(void *)(v21
                        + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename
                        + 8);
        uint64_t v27 = HIBYTE(v26) & 0xF;
        if ((v26 & 0x2000000000000000) == 0) {
          uint64_t v27 = *(void *)(v21
        }
                          + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename) & 0xFFFFFFFFFFFFLL;
        if (!v27
          || (swift_bridgeObjectRetain(),
              dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
              swift_bridgeObjectRelease(),
              !v22))
        {
          if (!*(void *)(*(void *)(v21
                                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options)
                          + 16)
            || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v22))
          {
            uint64_t v28 = v35;
            outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v35, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v24((char *)v28, 1, v25) == 1)
            {
              outlined destroy of AnyValue?(v28, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_26:
              swift_release();
              return UnknownStorage.traverse<A>(visitor:)();
            }
            uint64_t v29 = v28;
            uint64_t v30 = v33;
            outlined init with take of PgQuery_OidList(v29, v33, type metadata accessor for PgQuery_Node);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
            dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
            outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_Node);
            if (!v22) {
              goto LABEL_26;
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CopyStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CopyStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CopyStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CopyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CopyStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CopyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CopyStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CopyStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CopyStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CopyStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CopyStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CopyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CopyStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateStmt._StorageClass.init()()
{
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations) = v3;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound;
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(PartitionBoundSpec - 8) + 56))(v4, 1, 1, PartitionBoundSpec);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec;
  uint64_t PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(PartitionSpec - 8) + 56))(v6, 1, 1, PartitionSpec);
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56))(v8, 1, 1, TypeName);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints) = v3;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v3;
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit;
  *(void *)uint64_t v10 = 0;
  *(unsigned char *)(v10 + 8) = 1;
  uint64_t v11 = (void *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename);
  void *v11 = 0;
  v11[1] = 0xE000000000000000;
  uint64_t v12 = (void *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  *uint64_t v12 = 0;
  v12[1] = 0xE000000000000000;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) = 0;
  return v0;
}

uint64_t PgQuery_CreateStmt._StorageClass.deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename, &demangling cache variable for type metadata for PgQuery_TypeName?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_CreateStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit(PgQuery_CreateStmt._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_CreateStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CreateStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CreateStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateStmt._StorageClass);
}

void type metadata completion function for PgQuery_CreateStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_PartitionBoundSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_PartitionSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);
      if (v2 <= 0x3F)
      {
        type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t type metadata accessor for PgQuery_PartitionBoundSpec(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionBoundSpec);
}

uint64_t type metadata accessor for PgQuery_PartitionSpec(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionSpec);
}

uint64_t type metadata accessor for PgQuery_TypeName(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TypeName);
}

uint64_t PgQuery_CreateStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CreateStmt, (void (*)(void))type metadata accessor for PgQuery_CreateStmt._StorageClass, specialized PgQuery_CreateStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CreateStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CreateStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_9;
        case 2:
        case 3:
        case 7:
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 4:
          type metadata accessor for PgQuery_PartitionBoundSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
          goto LABEL_9;
        case 5:
          type metadata accessor for PgQuery_PartitionSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);
          goto LABEL_9;
        case 6:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
LABEL_9:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 9:
          lazy protocol witness table accessor for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 10:
        case 11:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 12:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateStmt.traverse<A>(visitor:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v49 = (uint64_t)&v41 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v43 = *(void *)(TypeName - 8);
  uint64_t v44 = TypeName;
  MEMORY[0x1F4188790](TypeName);
  uint64_t v45 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  MEMORY[0x1F4188790](v5 - 8);
  char v52 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionSpec = type metadata accessor for PgQuery_PartitionSpec(0);
  uint64_t v47 = *(void *)(PartitionSpec - 8);
  uint64_t v48 = PartitionSpec;
  MEMORY[0x1F4188790](PartitionSpec);
  uint64_t v54 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v53 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
  uint64_t v50 = *(void *)(PartitionBoundSpec - 8);
  uint64_t v51 = PartitionBoundSpec;
  MEMORY[0x1F4188790](PartitionBoundSpec);
  uint64_t v46 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v17 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v19 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(int *)(type metadata accessor for PgQuery_CreateStmt(0) + 20);
  uint64_t v42 = v0;
  uint64_t v21 = *(void *)(v0 + v20);
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v22 = v57;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v15, (uint64_t)v19, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    swift_retain();
    uint64_t v23 = v57;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v22 = v23;
    if (v23)
    {
      uint64_t v24 = type metadata accessor for PgQuery_RangeVar;
      uint64_t v25 = (uint64_t)v19;
LABEL_29:
      outlined destroy of PgQuery_Alias(v25, v24);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_RangeVar);
  }
  uint64_t v27 = (uint64_t)v53;
  uint64_t v26 = (uint64_t)v54;
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableElts)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v22)
    {
LABEL_11:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = (uint64_t)v53;
    uint64_t v26 = (uint64_t)v54;
  }
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhRelations)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v22) {
      goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = (uint64_t)v53;
    uint64_t v26 = (uint64_t)v54;
  }
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partbound, v27, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
  int v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 48))(v27, 1, v51);
  uint64_t v29 = (uint64_t)v52;
  if (v28 == 1)
  {
    outlined destroy of AnyValue?(v27, &demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
    goto LABEL_19;
  }
  uint64_t v30 = v27;
  uint64_t v31 = v46;
  outlined init with take of PgQuery_OidList(v30, v46, type metadata accessor for PgQuery_PartitionBoundSpec);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  if (v22)
  {
    uint64_t v24 = type metadata accessor for PgQuery_PartitionBoundSpec;
    uint64_t v25 = v31;
    goto LABEL_29;
  }
  outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_PartitionBoundSpec);
LABEL_19:
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__partspec, v29, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v29, 1, v48) == 1)
  {
    outlined destroy of AnyValue?(v29, &demangling cache variable for type metadata for PgQuery_PartitionSpec?);
  }
  else
  {
    outlined init with take of PgQuery_OidList(v29, v26, type metadata accessor for PgQuery_PartitionSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v22)
    {
      uint64_t v32 = type metadata accessor for PgQuery_PartitionSpec;
LABEL_28:
      uint64_t v24 = v32;
      uint64_t v25 = v26;
      goto LABEL_29;
    }
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_PartitionSpec);
  }
  uint64_t v33 = v49;
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ofTypename, v49, &demangling cache variable for type metadata for PgQuery_TypeName?);
  int v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v33, 1, v44);
  uint64_t v26 = v45;
  if (v34 != 1)
  {
    outlined init with take of PgQuery_OidList(v49, v45, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (!v22)
    {
      outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_TypeName);
      goto LABEL_32;
    }
    uint64_t v32 = type metadata accessor for PgQuery_TypeName;
    goto LABEL_28;
  }
  outlined destroy of AnyValue?(v49, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_32:
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v22) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v22) {
      return swift_release();
    }
  }
  if (*(void *)(v21
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit))
  {
    char v36 = *(unsigned char *)(v21
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit
                   + 8);
    uint64_t v55 = *(void *)(v21
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oncommit);
    char v56 = v36;
    lazy protocol witness table accessor for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v22) {
      return swift_release();
    }
  }
  unint64_t v37 = *(void *)(v21
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename
                  + 8);
  uint64_t v38 = HIBYTE(v37) & 0xF;
  if ((v37 & 0x2000000000000000) == 0) {
    uint64_t v38 = *(void *)(v21
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablespacename) & 0xFFFFFFFFFFFFLL;
  if (v38)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v22) {
      return swift_release();
    }
  }
  unint64_t v39 = *(void *)(v21
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8);
  uint64_t v40 = HIBYTE(v39) & 0xF;
  if ((v39 & 0x2000000000000000) == 0) {
    uint64_t v40 = *(void *)(v21
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) & 0xFFFFFFFFFFFFLL;
  if (v40)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v22) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v21
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_CreateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v22) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CreateStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateStmt()
{
  return PgQuery_CreateStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_DefineStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 2:
        case 6:
        case 7:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 3:
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DefineStmt.traverse<A>(visitor:)()
{
  if (!destructiveProjectEnumData for StorableValue(*(void *)v0, *(unsigned __int8 *)(v0 + 8))
    || (lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (*(unsigned char *)(v0 + 9) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(*(void *)(v0 + 16) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(*(void *)(v0 + 24) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(*(void *)(v0 + 32) + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (*(unsigned char *)(v0 + 40) != 1
              || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              if (*(unsigned char *)(v0 + 41) != 1
                || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
              {
                type metadata accessor for PgQuery_DefineStmt(0);
                return UnknownStorage.traverse<A>(visitor:)();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DefineStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 1;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = v1;
  *(_WORD *)(a1 + 40) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DefineStmt()
{
  return 0xD000000000000013;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_DefineStmt())(void, void)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DefineStmt()
{
  return PgQuery_DefineStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DefineStmt()
{
  return PgQuery_DefineStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DefineStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DefineStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DefineStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DefineStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DefineStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DefineStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DefineStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DefineStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_DropStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          goto LABEL_12;
        case 3:
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
LABEL_12:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DropStmt.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!destructiveProjectEnumData for StorableValue(*(void *)(v0 + 8), *(unsigned __int8 *)(v0 + 16))
      || (lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!*(void *)(v0 + 24)
        || (lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        if (*(unsigned char *)(v0 + 33) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          if (*(unsigned char *)(v0 + 34) != 1
            || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PgQuery_DropStmt(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  *(_WORD *)(a1 + 33) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DropStmt()
{
  return PgQuery_DropStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DropStmt()
{
  return PgQuery_DropStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_TruncateStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_TruncateStmt.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (*(unsigned char *)(v0 + 8) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0 + 16)
        || (lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        type metadata accessor for PgQuery_TruncateStmt(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TruncateStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TruncateStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TruncateStmt()
{
  return PgQuery_TruncateStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TruncateStmt()
{
  return PgQuery_TruncateStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TruncateStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TruncateStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TruncateStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TruncateStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TruncateStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TruncateStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TruncateStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TruncateStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CommentStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_CurrentOfExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object);
}

uint64_t PgQuery_CurrentOfExpr._StorageClass.__deallocating_deinit(void *a1)
{
  outlined destroy of AnyValue?(v1 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v2, v3);
}

uint64_t ObjC metadata update function for PgQuery_CommentStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CommentStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CommentStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CommentStmt._StorageClass);
}

void type metadata completion function for PgQuery_CommentStmt._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_CommentStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v1 = v0;
  specialized PgQuery_CommentStmt._uniqueStorage()();
  type metadata accessor for PgQuery_CommentStmt(0);
  swift_retain();
  uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v3) {
        return swift_release();
      }
      if (v2 == 1) {
        break;
      }
      if (v2 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v5 = v1;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (v2 == 3)
      {
        uint64_t v5 = v1;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    uint64_t v5 = v1;
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
    uint64_t v1 = v5;
    goto LABEL_6;
  }
  return swift_release();
}

uint64_t PgQuery_CommentStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v8 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v20 = (uint64_t)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(int *)(type metadata accessor for PgQuery_CommentStmt(0) + 20);
  uint64_t v19 = v3;
  uint64_t v11 = *(void *)(v3 + v10);
  uint64_t v12 = *(void *)(v11 + 16);
  unsigned __int8 v13 = *(unsigned char *)(v11 + 24);
  if (destructiveProjectEnumData for StorableValue(v12, v13))
  {
    uint64_t v22 = v12;
    unsigned __int8 v23 = v13;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v11+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_8;
  }
  uint64_t v14 = v20;
  outlined init with take of PgQuery_OidList((uint64_t)v7, v20, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v14, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_8:
  unint64_t v15 = *(void *)(v11
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment
                  + 8);
  uint64_t v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0) {
    uint64_t v16 = *(void *)(v11
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment) & 0xFFFFFFFFFFFFLL;
  if (v16)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CommentStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CommentStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CommentStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CommentStmt()
{
  return PgQuery_CommentStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CommentStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CommentStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CommentStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CommentStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CommentStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CommentStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CommentStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CommentStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CommentStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CommentStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_FetchStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt64Field(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_FetchStmt.traverse<A>(visitor:)()
{
  if (!*(void *)v0
    || (lazy protocol witness table accessor for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(void *)(v0 + 16)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt64Field(value:fieldNumber:)(), !v1))
    {
      unint64_t v3 = *(void *)(v0 + 32);
      uint64_t v4 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000) == 0) {
        uint64_t v4 = *(void *)(v0 + 24) & 0xFFFFFFFFFFFFLL;
      }
      if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (*(unsigned char *)(v0 + 40) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_FetchStmt(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FetchStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0xE000000000000000;
  *(unsigned char *)(a1 + 40) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FetchStmt()
{
  return 0xD000000000000012;
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_FetchStmt())(void, void)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_FetchStmt()
{
  return PgQuery_FetchStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_FetchStmt()
{
  return PgQuery_FetchStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FetchStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_FetchStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FetchStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FetchStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FetchStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_FetchStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FetchStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_FetchStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_IndexStmt._StorageClass.init()()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  *unint64_t v3 = 0;
  v3[1] = 0xE000000000000000;
  uint64_t v4 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace);
  *uint64_t v4 = 0;
  v4[1] = 0xE000000000000000;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexParams) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexIncludingParams) = v5;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v5;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v6, 1, 1, Node);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__excludeOpNames) = v5;
  uint64_t v8 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment);
  *uint64_t v8 = 0;
  v8[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexOid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldNode) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldCreateSubid) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldFirstRelfilenodeSubid) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unique) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__primary) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transformed) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__concurrent) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc) = 0;
  return v0;
}

uint64_t PgQuery_IndexStmt._StorageClass.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_IndexStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit(PgQuery_IndexStmt._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_IndexStmt._StorageClass()
{
  return type metadata accessor for PgQuery_IndexStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_IndexStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IndexStmt._StorageClass);
}

void type metadata completion function for PgQuery_IndexStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_IndexStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_IndexStmt, (void (*)(void))type metadata accessor for PgQuery_IndexStmt._StorageClass, specialized PgQuery_IndexStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_IndexStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_IndexStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
        case 4:
        case 10:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_12;
        case 2:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_7;
        case 5:
        case 6:
        case 7:
        case 9:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_12;
        case 8:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_12;
        case 11:
        case 12:
        case 13:
        case 14:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_12;
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_12:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_IndexStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a3;
  uint64_t v41 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v38 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v35 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  char v36 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v11 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  unsigned __int8 v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(int *)(type metadata accessor for PgQuery_IndexStmt(0) + 20);
  uint64_t v34 = v3;
  uint64_t v15 = *(void *)(v3 + v14);
  unint64_t v16 = *(void *)(v15 + 24);
  if ((v16 & 0x2000000000000000) != 0) {
    uint64_t v17 = HIBYTE(v16) & 0xF;
  }
  else {
    uint64_t v17 = *(void *)(v15 + 16) & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v18 = *(void *)(v3 + v14);
  swift_retain();
  if (v17)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = v39;
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    uint64_t v20 = v19;
    if (v19) {
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v20 = v39;
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, RangeVar);
  uint64_t v22 = (uint64_t)v38;
  if (v21 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v13, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v20)
    {
      unsigned __int8 v23 = type metadata accessor for PgQuery_RangeVar;
LABEL_12:
      outlined destroy of PgQuery_Alias((uint64_t)v13, v23);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_RangeVar);
  }
  unint64_t v24 = *(void *)(v18
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8);
  uint64_t v25 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0) {
    uint64_t v25 = *(void *)(v18
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) & 0xFFFFFFFFFFFFLL;
  uint64_t v26 = Node;
  if (v25)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v20) {
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
  }
  unint64_t v27 = *(void *)(v18
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace
                  + 8);
  uint64_t v28 = HIBYTE(v27) & 0xF;
  if ((v27 & 0x2000000000000000) == 0) {
    uint64_t v28 = *(void *)(v18
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpace) & 0xFFFFFFFFFFFFLL;
  if (v28)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v20) {
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v18
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexParams)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v20) {
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v18
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexIncludingParams)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v20) {
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v18
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v20) {
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v22, &demangling cache variable for type metadata for PgQuery_Node?);
  int v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v22, 1, v26);
  unsigned __int8 v13 = v36;
  if (v29 == 1)
  {
    outlined destroy of AnyValue?(v22, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_38;
  }
  outlined init with take of PgQuery_OidList(v22, (uint64_t)v36, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  if (v20)
  {
    unsigned __int8 v23 = type metadata accessor for PgQuery_Node;
    goto LABEL_12;
  }
  outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Node);
LABEL_38:
  if (*(void *)(*(void *)(v18
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__excludeOpNames)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v20)
    {
      swift_bridgeObjectRelease();
      goto LABEL_41;
    }
LABEL_45:
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_41:
  unint64_t v30 = *(void *)(v18
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment
                  + 8);
  uint64_t v31 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0) {
    uint64_t v31 = *(void *)(v18
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__idxcomment) & 0xFFFFFFFFFFFFLL;
  if (v31)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v20) {
      goto LABEL_45;
    }
    swift_bridgeObjectRelease();
  }
  if (!*(_DWORD *)(v18
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexOid)
    || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v20))
  {
    if (!*(_DWORD *)(v18
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldNode)
      || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v20))
    {
      if (!*(_DWORD *)(v18
                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldCreateSubid)
        || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v20))
      {
        if (!*(_DWORD *)(v18
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldFirstRelfilenodeSubid)
          || (dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v20))
        {
          if (*(unsigned char *)(v18
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__unique) != 1
            || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v20))
          {
            if (*(unsigned char *)(v18
                          + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__primary) != 1
              || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v20))
            {
              if (*(unsigned char *)(v18
                            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) != 1
                || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v20))
              {
                if (*(unsigned char *)(v18
                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) != 1
                  || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v20))
                {
                  if (*(unsigned char *)(v18
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) != 1
                    || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v20))
                  {
                    if (*(unsigned char *)(v18
                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transformed) != 1
                      || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v20))
                    {
                      if (*(unsigned char *)(v18
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__concurrent) != 1
                        || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v20))
                      {
                        if (*(unsigned char *)(v18
                                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) != 1
                          || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v20))
                        {
                          if (*(unsigned char *)(v18
                                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc) != 1
                            || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v20))
                          {
                            swift_release();
                            return UnknownStorage.traverse<A>(visitor:)();
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_IndexStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_IndexStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_IndexStmt()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_IndexStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_IndexStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_IndexStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_IndexStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_IndexStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_IndexStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_IndexStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateFunctionStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 3:
        case 4:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for PgQuery_CreateFunctionStmt(0);
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateFunctionStmt.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v14 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v9) = *v3;
  uint64_t v15 = a1;
  if (v9 != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v2))
  {
    if (v3[1] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v2))
    {
      if (!*(void *)(*((void *)v3 + 1) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v2))
      {
        if (!*(void *)(*((void *)v3 + 2) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v2))
        {
          Functionuint64_t Stmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
          outlined init with copy of PgQuery_Alias?((uint64_t)&v3[*(int *)(FunctionStmt + 40)], (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_TypeName?);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1, TypeName) == 1)
          {
            outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_TypeName?);
          }
          else
          {
            outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v10, type metadata accessor for PgQuery_TypeName);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
            dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
            uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_TypeName);
            if (v2) {
              return result;
            }
          }
          if (!*(void *)(*((void *)v3 + 3) + 16)) {
            return UnknownStorage.traverse<A>(visitor:)();
          }
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
          if (!v2) {
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateFunctionStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(_WORD *)a2 = 0;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v4;
  *(void *)(a2 + 24) = v4;
  UnknownStorage.init()();
  uint64_t v5 = a2 + *(int *)(a1 + 40);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56);

  return v7(v5, 1, 1, TypeName);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateFunctionStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateFunctionStmt()
{
  return PgQuery_CreateFunctionStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateFunctionStmt(uint64_t a1)
{
  return PgQuery_CreateFunctionStmt.traverse<A>(visitor:)(a1);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFunctionStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateFunctionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateFunctionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateFunctionStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFunctionStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateFunctionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFunctionStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterFunctionStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for PgQuery_AlterFunctionStmt(0);
        type metadata accessor for PgQuery_ObjectWithArgs(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_AlterFunctionStmt.traverse<A>(visitor:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v4 = *(void *)(ObjectWithArgs - 8);
  MEMORY[0x1F4188790](ObjectWithArgs);
  uint64_t v13 = (uint64_t)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  unsigned __int8 v7 = *((unsigned char *)v0 + 8);
  if (destructiveProjectEnumData for StorableValue(*v0, v7))
  {
    uint64_t v15 = v6;
    unsigned __int8 v16 = v7;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    uint64_t v8 = v17;
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    uint64_t v10 = v8;
    if (v8) {
      return result;
    }
  }
  else
  {
    uint64_t v10 = v17;
  }
  AlterFunctionuint64_t Stmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)v0 + *(int *)(AlterFunctionStmt + 28), (uint64_t)v3, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v3, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  }
  else
  {
    uint64_t v12 = v13;
    outlined init with take of PgQuery_OidList((uint64_t)v3, v13, type metadata accessor for PgQuery_ObjectWithArgs);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_ObjectWithArgs);
    if (v10) {
      return result;
    }
  }
  if (!*(void *)(v0[2] + 16)) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  type metadata accessor for PgQuery_Node(0);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
  if (!v10) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterFunctionStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = MEMORY[0x1E4FBC860];
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(ObjectWithArgs - 8) + 56);

  return v6(v4, 1, 1, ObjectWithArgs);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterFunctionStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterFunctionStmt()
{
  return PgQuery_AlterFunctionStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterFunctionStmt()
{
  return PgQuery_AlterFunctionStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFunctionStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterFunctionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterFunctionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterFunctionStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFunctionStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterFunctionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFunctionStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_DoStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_List.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_DoStmt);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DoStmt()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DoStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DoStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DoStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DoStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DoStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DoStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DoStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DoStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_DoStmt(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterCollationStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_DoStmt) & 1;
}

uint64_t PgQuery_RenameStmt._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_RenameStmt._StorageClass()
{
  return type metadata accessor for PgQuery_RenameStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RenameStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RenameStmt._StorageClass);
}

void type metadata completion function for PgQuery_RenameStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_RenameStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RenameStmt, (void (*)(void))type metadata accessor for PgQuery_RenameStmt._StorageClass, specialized PgQuery_RenameStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RenameStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RenameStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          goto LABEL_11;
        case 3:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_8;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_8:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 7:
          lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
LABEL_11:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 8:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RenameStmt.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v32 = (uint64_t)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v31 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v29 = (uint64_t)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v5 - 8);
  unsigned __int8 v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v8 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v30 = (uint64_t)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(int *)(type metadata accessor for PgQuery_RenameStmt(0) + 20);
  uint64_t v28 = v0;
  uint64_t v11 = *(void *)(v0 + v10);
  uint64_t v12 = *(void *)(v11 + 16);
  unsigned __int8 v13 = *(unsigned char *)(v11 + 24);
  if (destructiveProjectEnumData for StorableValue(v12, v13))
  {
    uint64_t v34 = v12;
    unsigned __int8 v35 = v13;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
  }
  uint64_t v14 = *(void *)(v11 + 32);
  unsigned __int8 v15 = *(unsigned char *)(v11 + 40);
  if (destructiveProjectEnumData for StorableValue(v14, v15))
  {
    uint64_t v34 = v14;
    unsigned __int8 v35 = v15;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    uint64_t v16 = v1;
    if (v1) {
      return swift_release();
    }
  }
  else
  {
    uint64_t v16 = v1;
  }
  outlined init with copy of PgQuery_Alias?(v11+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    uint64_t v17 = (uint64_t)v7;
    uint64_t v18 = v30;
    outlined init with take of PgQuery_OidList(v17, v30, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v18, type metadata accessor for PgQuery_RangeVar);
    if (v16) {
      return swift_release();
    }
  }
  uint64_t v19 = v32;
  outlined init with copy of PgQuery_Alias?(v11+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v32, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v19, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v19, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_15;
  }
  uint64_t v20 = v19;
  uint64_t v21 = v29;
  outlined init with take of PgQuery_OidList(v20, v29, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
  if (v16) {
    return swift_release();
  }
LABEL_15:
  unint64_t v22 = *(void *)(v11
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname
                  + 8);
  uint64_t v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0) {
    uint64_t v23 = *(void *)(v11
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname) & 0xFFFFFFFFFFFFLL;
  if (v23)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v16) {
      return swift_release();
    }
  }
  unint64_t v24 = *(void *)(v11
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname
                  + 8);
  uint64_t v25 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0) {
    uint64_t v25 = *(void *)(v11
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname) & 0xFFFFFFFFFFFFLL;
  if (v25)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v16) {
      return swift_release();
    }
  }
  if (*(void *)(v11
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior))
  {
    unsigned __int8 v26 = *(unsigned char *)(v11
                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior
                   + 8);
    uint64_t v34 = *(void *)(v11
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior);
    unsigned __int8 v35 = v26;
    lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v16) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v11
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v16) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RenameStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RenameStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RenameStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RenameStmt()
{
  return PgQuery_RenameStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RenameStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RenameStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RenameStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RenameStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RenameStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RenameStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RenameStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RenameStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RuleStmt._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_RuleStmt._StorageClass()
{
  return type metadata accessor for PgQuery_RuleStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RuleStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RuleStmt._StorageClass);
}

void type metadata completion function for PgQuery_RuleStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_RuleStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RuleStmt, (void (*)(void))type metadata accessor for PgQuery_RuleStmt._StorageClass, specialized PgQuery_RuleStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RuleStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RuleStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_8;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_12;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_8:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_12;
        case 4:
          lazy protocol witness table accessor for type PgQuery_CmdType and conformance PgQuery_CmdType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_12;
        case 5:
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_12;
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_12:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RuleStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v30 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v33 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v28 = *(void *)(Node - 8);
  uint64_t v29 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v27 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v13 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  unsigned __int8 v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(int *)(type metadata accessor for PgQuery_RuleStmt(0) + 20);
  uint64_t v26 = v3;
  uint64_t v17 = *(void *)(v3 + v16);
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v18 = (uint64_t)v33;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v15, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_RangeVar);
    uint64_t v18 = (uint64_t)v33;
    if (v4) {
      return swift_release();
    }
  }
  unint64_t v19 = *(void *)(v17
                  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename
                  + 8);
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0) {
    uint64_t v20 = *(void *)(v17
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename) & 0xFFFFFFFFFFFFLL;
  if (v20)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v18, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v18, 1, v29) == 1)
  {
    outlined destroy of AnyValue?(v18, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_11;
  }
  uint64_t v21 = v18;
  uint64_t v22 = v27;
  outlined init with take of PgQuery_OidList(v21, v27, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_11:
  if (*(void *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event))
  {
    char v23 = *(unsigned char *)(v17
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event
                   + 8);
    uint64_t v31 = *(void *)(v17
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event);
    char v32 = v23;
    lazy protocol witness table accessor for type PgQuery_CmdType and conformance PgQuery_CmdType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v17
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__instead) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__actions)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v17
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RuleStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RuleStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RuleStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RuleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_RuleStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RuleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RuleStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RuleStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RuleStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RuleStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RuleStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RuleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RuleStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_NotifyStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_NotifyStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_NotifyStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_NotifyStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_NotifyStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_NotifyStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_NotifyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_NotifyStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_NotifyStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_NotifyStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_NotifyStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_NotifyStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_NotifyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_NotifyStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_NotifyStmt(char *a1, char *a2)
{
  return specialized static PgQuery_ReplicaIdentityStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_NotifyStmt) & 1;
}

uint64_t PgQuery_ListenStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_ListenStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ListenStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ListenStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ListenStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ListenStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ListenStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ListenStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ListenStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ListenStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ListenStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ListenStmt(char *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ListenStmt) & 1;
}

uint64_t PgQuery_UnlistenStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_UnlistenStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_UnlistenStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_UnlistenStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UnlistenStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_UnlistenStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_UnlistenStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_UnlistenStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UnlistenStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_UnlistenStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UnlistenStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_UnlistenStmt(char *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_UnlistenStmt) & 1;
}

uint64_t PgQuery_TransactionStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_TransactionStmtKind and conformance PgQuery_TransactionStmtKind();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_TransactionStmt.traverse<A>(visitor:)()
{
  if (!*(void *)v0
    || (lazy protocol witness table accessor for type PgQuery_TransactionStmtKind and conformance PgQuery_TransactionStmtKind(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(void *)(*(void *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      unint64_t v3 = *(void *)(v0 + 32);
      uint64_t v4 = HIBYTE(v3) & 0xF;
      if ((v3 & 0x2000000000000000) == 0) {
        uint64_t v4 = *(void *)(v0 + 24) & 0xFFFFFFFFFFFFLL;
      }
      if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        unint64_t v5 = *(void *)(v0 + 48);
        uint64_t v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0) {
          uint64_t v6 = *(void *)(v0 + 40) & 0xFFFFFFFFFFFFLL;
        }
        if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (*(unsigned char *)(v0 + 56) != 1
            || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PgQuery_TransactionStmt(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TransactionStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0xE000000000000000;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0xE000000000000000;
  *(unsigned char *)(a1 + 56) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TransactionStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TransactionStmt()
{
  return PgQuery_TransactionStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TransactionStmt()
{
  return PgQuery_TransactionStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TransactionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TransactionStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TransactionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TransactionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TransactionStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TransactionStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TransactionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TransactionStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ViewStmt._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__view, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_ViewStmt._StorageClass()
{
  return type metadata accessor for PgQuery_ViewStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ViewStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ViewStmt._StorageClass);
}

void type metadata completion function for PgQuery_ViewStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_ViewStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_ViewStmt, (void (*)(void))type metadata accessor for PgQuery_ViewStmt._StorageClass, specialized PgQuery_ViewStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_ViewStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_ViewStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_5;
        case 2:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_6;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_6;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_6;
        case 6:
          lazy protocol witness table accessor for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_6:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ViewStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v28 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v27 = (uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v26 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v25 = (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v12 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(int *)(type metadata accessor for PgQuery_ViewStmt(0) + 20);
  uint64_t v24 = v3;
  uint64_t v16 = *(void *)(v3 + v15);
  outlined init with copy of PgQuery_Alias?(v16 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__view, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, RangeVar) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v17 = Node;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v14, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v14, type metadata accessor for PgQuery_RangeVar);
    uint64_t v17 = Node;
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v16
                             + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aliases)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v18 = v27;
  outlined init with copy of PgQuery_Alias?(v16 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v18, 1, v17) == 1)
  {
    outlined destroy of AnyValue?(v18, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_9;
  }
  uint64_t v19 = v18;
  uint64_t v20 = v25;
  outlined init with take of PgQuery_OidList(v19, v25, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_9:
  if (*(unsigned char *)(v16
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v16
                             + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(v16
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption))
  {
    char v21 = *(unsigned char *)(v16
                   + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption
                   + 8);
    uint64_t v29 = *(void *)(v16
                    + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption);
    char v30 = v21;
    lazy protocol witness table accessor for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ViewStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ViewStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ViewStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ViewStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ViewStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ViewStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ViewStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ViewStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ViewStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ViewStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ViewStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ViewStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ViewStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_LoadStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_LoadStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_LoadStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_LoadStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LoadStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LoadStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LoadStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_LoadStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LoadStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LoadStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LoadStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_LoadStmt(char *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_LoadStmt) & 1;
}

uint64_t PgQuery_CreateDomainStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56))(v4, 1, 1, TypeName);
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause;
  uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(CollateClause - 8) + 56))(v6, 1, 1, CollateClause);
  uint64_t v8 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints) = v3;
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, v4, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, v6, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  uint64_t v9 = *(void *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v1 + v8) = v9;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_CreateDomainStmt._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_CreateDomainStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CreateDomainStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CreateDomainStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateDomainStmt._StorageClass);
}

void type metadata completion function for PgQuery_CreateDomainStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_CollateClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for PgQuery_CollateClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CollateClause);
}

uint64_t PgQuery_CreateDomainStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = *(int *)(type metadata accessor for PgQuery_CreateDomainStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_CreateDomainStmt._StorageClass(0);
    swift_allocObject();
    uint64_t v3 = swift_retain();
    *(void *)(v0 + v2) = PgQuery_CreateDomainStmt._StorageClass.init(copying:)(v3);
    swift_release();
  }
  swift_retain();
  uint64_t v4 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v5 & 1) == 0)
    {
      switch(v4)
      {
        case 1:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 2:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
          goto LABEL_11;
        case 3:
          type metadata accessor for PgQuery_CollateClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t v4 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CreateDomainStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v28 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CollateClause?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v26 = (uint64_t)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  uint64_t v25 = *(void *)(CollateClause - 8);
  MEMORY[0x1F4188790](CollateClause);
  uint64_t v23 = (uint64_t)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v12 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v24 = (uint64_t)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(int *)(type metadata accessor for PgQuery_CreateDomainStmt(0) + 20);
  uint64_t v22 = v2;
  uint64_t v15 = *(void *)(v2 + v14);
  if (*(void *)(*(void *)(v15 + 16) + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    uint64_t v4 = v3;
    swift_bridgeObjectRelease();
    uint64_t v16 = v15;
    if (v3) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
    uint64_t v16 = v15;
  }
  outlined init with copy of PgQuery_Alias?(v16+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, TypeName) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    uint64_t v17 = v24;
    outlined init with take of PgQuery_OidList((uint64_t)v10, v24, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v17, type metadata accessor for PgQuery_TypeName);
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v18 = v26;
  outlined init with copy of PgQuery_Alias?(v16+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, v26, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v18, 1, CollateClause) != 1)
  {
    uint64_t v19 = v18;
    uint64_t v20 = v23;
    outlined init with take of PgQuery_OidList(v19, v23, type metadata accessor for PgQuery_CollateClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_CollateClause);
    if (!v4) {
      goto LABEL_11;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v18, &demangling cache variable for type metadata for PgQuery_CollateClause?);
LABEL_11:
  if (*(void *)(*(void *)(v16
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateDomainStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CreateDomainStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateDomainStmt()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateDomainStmt()
{
  return PgQuery_CreateDomainStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateDomainStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_CreateDomainStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateDomainStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateDomainStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateDomainStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateDomainStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateDomainStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateDomainStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateDomainStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateDomainStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreatedbStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Alias.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_CreatedbStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreatedbStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreatedbStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatedbStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreatedbStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreatedbStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreatedbStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatedbStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreatedbStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatedbStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreatedbStmt(char *a1, char *a2)
{
  return specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreatedbStmt) & 1;
}

uint64_t PgQuery_DropdbStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_DropdbStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_DropdbStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_DropdbStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_DropdbStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropdbStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropdbStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropdbStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropdbStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropdbStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropdbStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropdbStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropdbStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropdbStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_DropdbStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CreateExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_DropdbStmt) & 1;
}

uint64_t PgQuery_VacuumStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_VacuumStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 2 || result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_VacuumStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_VacuumStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_VacuumStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_VacuumStmt()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_VacuumStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_VacuumStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_VacuumStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_VacuumStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_VacuumStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_VacuumStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_ObjectWithArgs.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_VacuumStmt) & 1;
}

uint64_t one-time initialization function for defaultInstance(uint64_t a1, void (*a2)(void), void *a3, void *a4, uint64_t *a5)
{
  a2(0);
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8 + *a3;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v9, 1, 1, Node);
  *(void *)(v8 + *a4) = MEMORY[0x1E4FBC860];
  *a5 = v8;
  return result;
}

uint64_t PgQuery_ExplainStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query);
}

uint64_t ObjC metadata update function for PgQuery_ExplainStmt._StorageClass()
{
  return type metadata accessor for PgQuery_ExplainStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ExplainStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ExplainStmt._StorageClass);
}

uint64_t PgQuery_ExplainStmt.decodeMessage<A>(decoder:)()
{
  specialized PgQuery_AlternativeSubPlan._uniqueStorage()(type metadata accessor for PgQuery_ExplainStmt, (void (*)(void))type metadata accessor for PgQuery_ExplainStmt._StorageClass, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
  type metadata accessor for PgQuery_ExplainStmt(0);
  swift_retain();
  uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (v1 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_ExplainStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlternativeSubPlan.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PgQuery_ExplainStmt, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ExplainStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ExplainStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ExplainStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ExplainStmt()
{
  return PgQuery_ExplainStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ExplainStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExplainStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ExplainStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ExplainStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ExplainStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExplainStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ExplainStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExplainStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ExplainStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_AlternativeSubPlan.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ExplainStmt, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_ExplainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) & 1;
}

uint64_t PgQuery_CreateTableAsStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__into, &demangling cache variable for type metadata for PgQuery_IntoClause?);
}

uint64_t ObjC metadata update function for PgQuery_CreateTableAsStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CreateTableAsStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CreateTableAsStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateTableAsStmt._StorageClass);
}

void type metadata completion function for PgQuery_CreateTableAsStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_IntoClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_CreateTableAsStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_CreateTableAsStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_CreateTableAsStmt._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_CreateTableAsStmt._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_IntoClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
LABEL_7:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 3:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 4:
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CreateTableAsStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a3;
  uint64_t v28 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IntoClause?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  uint64_t v26 = *(void *)(IntoClause - 8);
  uint64_t v27 = IntoClause;
  MEMORY[0x1F4188790](IntoClause);
  uint64_t v25 = (uint64_t)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(int *)(type metadata accessor for PgQuery_CreateTableAsStmt(0) + 20);
  uint64_t v24 = v3;
  uint64_t v18 = *(void *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__into, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v7, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_IntoClause?);
    goto LABEL_7;
  }
  uint64_t v19 = v25;
  outlined init with take of PgQuery_OidList((uint64_t)v7, v25, type metadata accessor for PgQuery_IntoClause);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v19, type metadata accessor for PgQuery_IntoClause);
  if (v4) {
    return swift_release();
  }
LABEL_7:
  uint64_t v20 = *(void *)(v18
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind);
  unsigned __int8 v21 = *(unsigned char *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind
                 + 8);
  if (destructiveProjectEnumData for StorableValue(v20, v21))
  {
    uint64_t v29 = v20;
    unsigned __int8 v30 = v21;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v18
                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isSelectInto) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v18
                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateTableAsStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CreateTableAsStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateTableAsStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateTableAsStmt()
{
  return PgQuery_CreateTableAsStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateTableAsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateTableAsStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateTableAsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableAsStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateTableAsStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateTableAsStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateTableAsStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableAsStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateTableAsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableAsStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateSeqStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_CreateSeqStmt(0);
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 4:
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateSeqStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[3] = a3;
  v13[1] = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v9 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = type metadata accessor for PgQuery_CreateSeqStmt(0);
  outlined init with copy of PgQuery_Alias?(v3 + *(int *)(v13[0] + 36), (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_RangeVar);
    if (v4) {
      return result;
    }
  }
  if (!*(void *)(*(void *)v3 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    if (!*(_DWORD *)(v3 + 8)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
    {
      if (*(unsigned char *)(v3 + 12) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
      {
        if (*(unsigned char *)(v3 + 13) != 1) {
          return UnknownStorage.traverse<A>(visitor:)();
        }
        uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
        if (!v4) {
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateSeqStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = MEMORY[0x1E4FBC860];
  *(_DWORD *)(a2 + 8) = 0;
  *(_WORD *)(a2 + 12) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 36);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56);

  return v6(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateSeqStmt()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateSeqStmt()
{
  return PgQuery_CreateSeqStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateSeqStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSeqStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateSeqStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateSeqStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateSeqStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSeqStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateSeqStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSeqStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterSeqStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_AlterSeqStmt(0);
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterSeqStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[3] = a3;
  v13[1] = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v9 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v11 = (char *)v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = type metadata accessor for PgQuery_AlterSeqStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)&v3[*(int *)(v13[0] + 32)], (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_RangeVar);
    if (v4) {
      return result;
    }
  }
  if (!*(void *)(*(void *)v3 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    if (v3[8] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
    {
      if (v3[9] != 1) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
      uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      if (!v4) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterSeqStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = MEMORY[0x1E4FBC860];
  *(_WORD *)(a2 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 32);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56);

  return v6(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterSeqStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterSeqStmt()
{
  return PgQuery_AlterSeqStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterSeqStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSeqStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterSeqStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterSeqStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterSeqStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSeqStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterSeqStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSeqStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_VariableSetStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_VariableSetKind and conformance PgQuery_VariableSetKind();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_VariableSetStmt.traverse<A>(visitor:)()
{
  if (!*(void *)v0
    || (lazy protocol witness table accessor for type PgQuery_VariableSetKind and conformance PgQuery_VariableSetKind(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    unint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(*(void *)(v0 + 32) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (*(unsigned char *)(v0 + 40) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_VariableSetStmt(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_VariableSetStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a1 + 40) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_VariableSetStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_VariableSetStmt()
{
  return PgQuery_VariableSetStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_VariableSetStmt()
{
  return PgQuery_VariableSetStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_VariableSetStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_VariableSetStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_VariableSetStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_VariableSetStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_VariableSetStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_VariableShowStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_VariableShowStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_VariableShowStmt()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_VariableShowStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableShowStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_VariableShowStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_VariableShowStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_VariableShowStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableShowStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_VariableShowStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableShowStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_VariableShowStmt(char *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_VariableShowStmt) & 1;
}

uint64_t PgQuery_DiscardStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        lazy protocol witness table accessor for type PgQuery_DiscardMode and conformance PgQuery_DiscardMode();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DiscardStmt.traverse<A>(visitor:)()
{
  if (!*v0
    || (lazy protocol witness table accessor for type PgQuery_DiscardMode and conformance PgQuery_DiscardMode(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    type metadata accessor for PgQuery_DiscardStmt(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DiscardStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DiscardStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DiscardStmt()
{
  return PgQuery_DiscardStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DiscardStmt()
{
  return PgQuery_DiscardStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DiscardStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DiscardStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DiscardStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DiscardStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DiscardStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DiscardStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DiscardStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DiscardStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateTrigStmt._StorageClass.init()()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56);
  v3(v1, 1, 1, RangeVar);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v4;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns) = v4;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v5, 1, 1, Node);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels) = v4;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) = 0;
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel, 1, 1, RangeVar);
  return v0;
}

uint64_t PgQuery_CreateTrigStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v27 = (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xE000000000000000;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v7 = *(void (**)(void))(*(void *)(RangeVar - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7)(v5, 1, 1, RangeVar);
  uint64_t v8 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname;
  uint64_t v9 = MEMORY[0x1E4FBC860];
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname) = MEMORY[0x1E4FBC860];
  uint64_t v10 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v9;
  uint64_t v22 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row) = 0;
  uint64_t v21 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing) = 0;
  uint64_t v20 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events) = 0;
  uint64_t v11 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns) = v9;
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause;
  uint64_t v23 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v12, 1, 1, Node);
  uint64_t v19 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) = 0;
  uint64_t v14 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels) = v9;
  uint64_t v25 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) = 0;
  uint64_t v24 = OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) = 0;
  uint64_t v26 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel;
  v7();
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(void *)(v1 + 24) = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v18, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  *(void *)(v1 + v8) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v10) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + v22) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row);
  *(_DWORD *)(v1 + v21) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing);
  *(_DWORD *)(v1 + v20) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events);
  *(void *)(v1 + v11) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause, v23, &demangling cache variable for type metadata for PgQuery_Node?);
  *(unsigned char *)(v1 + v19) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint);
  *(void *)(v1 + v14) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + v25) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable);
  *(unsigned char *)(v1 + v24) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred);
  uint64_t v16 = v27;
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel, v27, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_release();
  outlined assign with take of PgQuery_Node?(v16, v26, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  return v1;
}

uint64_t PgQuery_CreateTrigStmt._StorageClass.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  return v0;
}

uint64_t PgQuery_CreateTrigStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit(PgQuery_CreateTrigStmt._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_CreateTrigStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CreateTrigStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CreateTrigStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateTrigStmt._StorageClass);
}

void type metadata completion function for PgQuery_CreateTrigStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_CreateTrigStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CreateTrigStmt, (void (*)(void))type metadata accessor for PgQuery_CreateTrigStmt._StorageClass, PgQuery_CreateTrigStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CreateTrigStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CreateTrigStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
        case 14:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_11;
        case 3:
        case 4:
        case 8:
        case 11:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 5:
        case 10:
        case 12:
        case 13:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 6:
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 9:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateTrigStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v40 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v39 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v38 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  unint64_t v37 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v33 - v10;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v12 = *(void *)(RangeVar - 8);
  uint64_t v13 = MEMORY[0x1F4188790](RangeVar);
  uint64_t v35 = (uint64_t)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v17 = *(int *)(type metadata accessor for PgQuery_CreateTrigStmt(0) + 20);
  uint64_t v36 = v2;
  uint64_t v18 = *(void *)(v2 + v17);
  unint64_t v19 = *(void *)(v18 + 24);
  if ((v19 & 0x2000000000000000) != 0) {
    uint64_t v20 = HIBYTE(v19) & 0xF;
  }
  else {
    uint64_t v20 = *(void *)(v18 + 16) & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v21 = *(void *)(v2 + v17);
  swift_retain();
  if (v20)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v3) {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  uint64_t v23 = RangeVar;
  uint64_t v43 = v12 + 48;
  uint64_t v34 = v22;
  if (v22((uint64_t)v11, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v24 = v3;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v24 = v3;
    if (v3)
    {
      outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
  }
  uint64_t v25 = Node;
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcname)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v24)
    {
LABEL_19:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v24) {
      goto LABEL_19;
    }
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v21
                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__row) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v24) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v21
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__timing))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v24) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v21
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__events))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v24) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    uint64_t v27 = (uint64_t)v40;
    if (v24) {
      return swift_release();
    }
  }
  else
  {
    uint64_t v27 = (uint64_t)v40;
  }
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whenClause, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v27, 1, v25) == 1)
  {
    outlined destroy of AnyValue?(v27, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v28 = v27;
    uint64_t v29 = v38;
    outlined init with take of PgQuery_OidList(v28, v38, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
    if (v24) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v21
                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isconstraint) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v24) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v21
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__transitionRels)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = (uint64_t)v37;
    if (v24) {
      return swift_release();
    }
  }
  else
  {
    uint64_t v30 = (uint64_t)v37;
  }
  if (*(unsigned char *)(v21
                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__deferrable) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v24) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v21
                + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initdeferred) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v24) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateTrigStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constrrel, v30, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if (v34(v30, 1, v23) == 1)
  {
    outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v35;
    outlined init with take of PgQuery_OidList(v31, v35, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_RangeVar);
    if (v24) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateTrigStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CreateTrigStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateTrigStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateTrigStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_CreateTrigStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateTrigStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTrigStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateTrigStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateTrigStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateTrigStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTrigStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateTrigStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTrigStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreatePLangStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreatePLangStmt.traverse<A>(visitor:)()
{
  if (*(unsigned char *)v0 != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
  {
    unint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = *(void *)(v0 + 8) & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(*(void *)(v0 + 24) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(*(void *)(v0 + 32) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(*(void *)(v0 + 40) + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (*(unsigned char *)(v0 + 48) != 1
              || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for PgQuery_CreatePLangStmt(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreatePLangStmt@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0xE000000000000000;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 24) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 32) = v1;
  *(void *)(a1 + 40) = v1;
  *(unsigned char *)(a1 + 48) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreatePLangStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreatePLangStmt()
{
  return PgQuery_CreatePLangStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreatePLangStmt()
{
  return PgQuery_CreatePLangStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePLangStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreatePLangStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreatePLangStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreatePLangStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePLangStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreatePLangStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePLangStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateRoleStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type PgQuery_RoleStmtType and conformance PgQuery_RoleStmtType();
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_CreateRoleStmt.traverse<A>(visitor:)()
{
  if (!*v0
    || (lazy protocol witness table accessor for type PgQuery_RoleStmtType and conformance PgQuery_RoleStmtType(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    unint64_t v3 = v0[3];
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0[4] + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_CreateRoleStmt(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateRoleStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateRoleStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateRoleStmt()
{
  return PgQuery_CreateRoleStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateRoleStmt()
{
  return PgQuery_CreateRoleStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRoleStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateRoleStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateRoleStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateRoleStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRoleStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRoleStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterRoleStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_AlterRoleStmt(0);
        type metadata accessor for PgQuery_RoleSpec(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_AlterRoleStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  v14[3] = a3;
  v14[1] = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v10 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = type metadata accessor for PgQuery_AlterRoleStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)v5 + *(int *)(v14[0] + 28), (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_RoleSpec);
    if (v4) {
      return result;
    }
  }
  if (!*(void *)(*(void *)v5 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
  {
    if (!v5[2]) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (!v4) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterRoleStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = MEMORY[0x1E4FBC860];
  *(_DWORD *)(a2 + 8) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 56);

  return v6(v4, 1, 1, RoleSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterRoleStmt()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterRoleStmt()
{
  return PgQuery_AlterRoleStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterRoleStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterRoleStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterRoleStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterRoleStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_DropRoleStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_DropRoleStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DropRoleStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_DropRoleStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_DropRoleStmt);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropRoleStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a1 + 8) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropRoleStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropRoleStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropRoleStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropRoleStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropRoleStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropRoleStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropRoleStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_DropRoleStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_ConstraintsSetStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_DropRoleStmt) & 1;
}

uint64_t PgQuery_LockStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_LockStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_LockStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_LockStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_LockStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_LockStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_LockStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LockStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LockStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LockStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_LockStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LockStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LockStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LockStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_LockStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_AlterStatsStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_LockStmt) & 1;
}

uint64_t PgQuery_ConstraintsSetStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_DropRoleStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_ConstraintsSetStmt);
}

uint64_t PgQuery_DropRoleStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!*(void *)(*(void *)v4 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
  {
    if (v4[8] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ConstraintsSetStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ConstraintsSetStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ConstraintsSetStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ConstraintsSetStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ConstraintsSetStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ConstraintsSetStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ConstraintsSetStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ConstraintsSetStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_ConstraintsSetStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ConstraintsSetStmt) & 1;
}

uint64_t PgQuery_ReindexStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ReindexObjectType and conformance PgQuery_ReindexObjectType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_ReindexStmt(0);
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_5;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ReindexStmt.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v6 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*v0
    || (char v9 = *((unsigned char *)v0 + 8),
        uint64_t v13 = *v0,
        char v14 = v9,
        lazy protocol witness table accessor for type PgQuery_ReindexObjectType and conformance PgQuery_ReindexObjectType(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    Reindexuint64_t Stmt = type metadata accessor for PgQuery_ReindexStmt(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)v0 + *(int *)(ReindexStmt + 36), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, RangeVar) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v8, type metadata accessor for PgQuery_RangeVar);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v8, type metadata accessor for PgQuery_RangeVar);
      if (v1) {
        return result;
      }
    }
    unint64_t v11 = v0[3];
    uint64_t v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0) {
      uint64_t v12 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v12 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*((_DWORD *)v0 + 8)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        if (*((unsigned char *)v0 + 36) != 1) {
          return UnknownStorage.traverse<A>(visitor:)();
        }
        uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
        if (!v1) {
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ReindexStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(_DWORD *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 36) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 36);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56);

  return v6(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ReindexStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ReindexStmt()
{
  return PgQuery_ReindexStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ReindexStmt()
{
  return PgQuery_ReindexStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ReindexStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReindexStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ReindexStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ReindexStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ReindexStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReindexStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ReindexStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReindexStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CheckPointStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CheckPointStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CheckPointStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CheckPointStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CheckPointStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CheckPointStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CheckPointStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CheckPointStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CheckPointStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateSchemaStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_CreateSchemaStmt(0);
          type metadata accessor for PgQuery_RoleSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateSchemaStmt.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v6 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = *(void *)(v0 + 8);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
    outlined init with copy of PgQuery_Alias?(v0 + *(int *)(SchemaStmt + 32), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, RoleSpec) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v8, type metadata accessor for PgQuery_RoleSpec);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v8, type metadata accessor for PgQuery_RoleSpec);
      if (v1) {
        return result;
      }
    }
    if (!*(void *)(*(void *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (*(unsigned char *)(v0 + 24) != 1) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
      uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      if (!v1) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateSchemaStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(void *)(a2 + 16) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a2 + 24) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 32);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 56);

  return v6(v4, 1, 1, RoleSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateSchemaStmt()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateSchemaStmt()
{
  return PgQuery_CreateSchemaStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateSchemaStmt()
{
  return PgQuery_CreateSchemaStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSchemaStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateSchemaStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateSchemaStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateSchemaStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSchemaStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateSchemaStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSchemaStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterDatabaseStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Alias.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_AlterDatabaseStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterDatabaseStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterDatabaseStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterDatabaseStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterDatabaseStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterDatabaseStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterDatabaseStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterDatabaseStmt(char *a1, char *a2)
{
  return specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterDatabaseStmt) & 1;
}

uint64_t PgQuery_AlterDatabaseSetStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
        type metadata accessor for PgQuery_VariableSetStmt(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterDatabaseSetStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v11 = *(void *)(VariableSetStmt - 8);
  MEMORY[0x1F4188790](VariableSetStmt);
  uint64_t v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = v4[1];
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  v18[3] = a2;
  v18[1] = a1;
  if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v3))
  {
    AlterDatabaseSetuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)v4 + *(int *)(AlterDatabaseSetStmt + 24), (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, VariableSetStmt) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v13, type metadata accessor for PgQuery_VariableSetStmt);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_VariableSetStmt);
      if (v3) {
        return result;
      }
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterDatabaseSetStmt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(VariableSetStmt - 8) + 56);

  return v6(v4, 1, 1, VariableSetStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterDatabaseSetStmt()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterDatabaseSetStmt()
{
  return PgQuery_AlterDatabaseSetStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterDatabaseSetStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_AlterDatabaseSetStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterDatabaseSetStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseSetStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterDatabaseSetStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterDatabaseSetStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterDatabaseSetStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseSetStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterDatabaseSetStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseSetStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterRoleSetStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_AlterRoleSetStmt(0);
        type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v3 = (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec;
        uint64_t v4 = &lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec;
        goto LABEL_5;
      }
LABEL_12:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_AlterRoleSetStmt(0);
    type metadata accessor for PgQuery_VariableSetStmt(0);
    uint64_t v3 = (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt;
    uint64_t v4 = &lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt;
LABEL_5:
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(v4, v3);
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_12;
  }
  return result;
}

uint64_t PgQuery_AlterRoleSetStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v29 = a3;
  uint64_t v27 = a2;
  uint64_t v28 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v24 = *(void *)(VariableSetStmt - 8);
  uint64_t v25 = VariableSetStmt;
  MEMORY[0x1F4188790](VariableSetStmt);
  uint64_t v23 = (uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v15 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterRoleSetuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleSetStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)v5 + *(int *)(AlterRoleSetStmt + 24), (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    uint64_t v18 = v5;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v13, (uint64_t)v17, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RoleSpec);
    uint64_t v18 = v5;
    if (v4) {
      return result;
    }
  }
  unint64_t v20 = v18[1];
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v21 = *v18 & 0xFFFFFFFFFFFFLL;
  }
  if (!v21 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v18 + *(int *)(AlterRoleSetStmt + 28), (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v8, 1, v25) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    }
    else
    {
      uint64_t v22 = v23;
      outlined init with take of PgQuery_OidList((uint64_t)v8, v23, type metadata accessor for PgQuery_VariableSetStmt);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_VariableSetStmt);
      if (v4) {
        return result;
      }
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterRoleSetStmt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 56))(v4, 1, 1, RoleSpec);
  uint64_t v6 = (char *)a2 + *(int *)(a1 + 28);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(VariableSetStmt - 8) + 56);

  return v8(v6, 1, 1, VariableSetStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterRoleSetStmt()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterRoleSetStmt()
{
  return PgQuery_AlterRoleSetStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterRoleSetStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterRoleSetStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterRoleSetStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleSetStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterRoleSetStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterRoleSetStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterRoleSetStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleSetStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterRoleSetStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleSetStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateConversionStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateConversionStmt.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    unint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = *(void *)(v0 + 8) & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v5 = *(void *)(v0 + 32);
      uint64_t v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0) {
        uint64_t v6 = *(void *)(v0 + 24) & 0xFFFFFFFFFFFFLL;
      }
      if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(*(void *)(v0 + 40) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (*(unsigned char *)(v0 + 48) != 1
            || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PgQuery_CreateConversionStmt(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateConversionStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0xE000000000000000;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0xE000000000000000;
  *(void *)(a1 + 40) = v1;
  *(unsigned char *)(a1 + 48) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateConversionStmt()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateConversionStmt()
{
  return PgQuery_CreateConversionStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateConversionStmt()
{
  return PgQuery_CreateConversionStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateConversionStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateConversionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateConversionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateConversionStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateConversionStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateConversionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateConversionStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateCastStmt._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sourcetype, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targettype, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__func, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_CreateCastStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CreateCastStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CreateCastStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateCastStmt._StorageClass);
}

void type metadata completion function for PgQuery_CreateCastStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_ObjectWithArgs?, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for PgQuery_ObjectWithArgs(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ObjectWithArgs);
}

uint64_t PgQuery_CreateCastStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_CreateCastStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_CreateCastStmt._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_CreateCastStmt._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_ObjectWithArgs(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_7:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 4:
          lazy protocol witness table accessor for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_CreateCastStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v36 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v35 = *(void *)(ObjectWithArgs - 8);
  MEMORY[0x1F4188790](ObjectWithArgs);
  uint64_t v33 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v15 = *(void *)(TypeName - 8);
  uint64_t v16 = MEMORY[0x1F4188790](TypeName);
  uint64_t v34 = (uint64_t)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v19 = (char *)&v32 - v18;
  uint64_t v20 = *(int *)(type metadata accessor for PgQuery_CreateCastStmt(0) + 20);
  uint64_t v32 = v3;
  uint64_t v21 = *(void *)(v3 + v20);
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sourcetype, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v23 = v22(v13, 1, TypeName);
  uint64_t v42 = a2;
  if (v23 == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_TypeName?);
    uint64_t v24 = v38;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v13, (uint64_t)v19, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    swift_retain();
    uint64_t v25 = v38;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v24 = v25;
    outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_TypeName);
    if (v25) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targettype, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v22(v11, 1, TypeName) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    uint64_t v26 = v34;
    outlined init with take of PgQuery_OidList((uint64_t)v11, v34, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v26, type metadata accessor for PgQuery_TypeName);
    if (v24) {
      return swift_release();
    }
  }
  uint64_t v27 = v36;
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__func, v36, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v27, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of AnyValue?(v27, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  }
  else
  {
    uint64_t v28 = v27;
    uint64_t v29 = v33;
    outlined init with take of PgQuery_OidList(v28, v33, type metadata accessor for PgQuery_ObjectWithArgs);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_ObjectWithArgs);
    if (v24) {
      return swift_release();
    }
  }
  if (!*(void *)(v21
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context)
    || (char v30 = *(unsigned char *)(v21
                       + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context
                       + 8),
        uint64_t v40 = *(void *)(v21
                        + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context),
        char v41 = v30,
        lazy protocol witness table accessor for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext(),
        dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v24))
  {
    if (*(unsigned char *)(v21
                  + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inout) != 1
      || (dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v24))
    {
      swift_release();
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateCastStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CreateCastStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateCastStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateCastStmt()
{
  return PgQuery_CreateCastStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateCastStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateCastStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateCastStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateCastStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateCastStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateCastStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateCastStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateCastStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateCastStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateCastStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateOpClassStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for PgQuery_CreateOpClassStmt(0);
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateOpClassStmt.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v14 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v13 = (uint64_t)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(*(void *)(v0 + 8) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      unint64_t v8 = *(void *)(v0 + 24);
      uint64_t v9 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0) {
        uint64_t v9 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
      }
      if (!v9 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        OpClassuint64_t Stmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
        outlined init with copy of PgQuery_Alias?(v0 + *(int *)(OpClassStmt + 40), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_TypeName?);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v4, 1, TypeName) == 1)
        {
          outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_TypeName?);
        }
        else
        {
          uint64_t v11 = v13;
          outlined init with take of PgQuery_OidList((uint64_t)v4, v13, type metadata accessor for PgQuery_TypeName);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
          dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
          uint64_t result = outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_TypeName);
          if (v1) {
            return result;
          }
        }
        if (!*(void *)(*(void *)(v0 + 32) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (*(unsigned char *)(v0 + 40) != 1) {
            return UnknownStorage.traverse<A>(visitor:)();
          }
          uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
          if (!v1) {
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateOpClassStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)a2 = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0xE000000000000000;
  *(void *)(a2 + 32) = v4;
  *(unsigned char *)(a2 + 40) = 0;
  UnknownStorage.init()();
  uint64_t v5 = a2 + *(int *)(a1 + 40);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56);

  return v7(v5, 1, 1, TypeName);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateOpClassStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateOpClassStmt()
{
  return PgQuery_CreateOpClassStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateOpClassStmt()
{
  return PgQuery_CreateOpClassStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateOpClassStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateOpClassStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateOpClassStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateOpClassStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateOpFamilyStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateOpFamilyStmt.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    unint64_t v3 = v0[2];
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = v0[1] & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for PgQuery_CreateOpFamilyStmt(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateOpFamilyStmt@<X0>(void *a1@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Alias(MEMORY[0x1E4FBC860], 0, 0xE000000000000000, a1);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateOpFamilyStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateOpFamilyStmt()
{
  return PgQuery_CreateOpFamilyStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateOpFamilyStmt()
{
  return PgQuery_CreateOpFamilyStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateOpFamilyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpFamilyStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateOpFamilyStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateOpFamilyStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateOpFamilyStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpFamilyStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateOpFamilyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpFamilyStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterOpFamilyStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterOpFamilyStmt.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    unint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = *(void *)(v0 + 8) & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (*(unsigned char *)(v0 + 24) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(*(void *)(v0 + 32) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_AlterOpFamilyStmt(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterOpFamilyStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0xE000000000000000;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterOpFamilyStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterOpFamilyStmt()
{
  return PgQuery_AlterOpFamilyStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterOpFamilyStmt()
{
  return PgQuery_AlterOpFamilyStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOpFamilyStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterOpFamilyStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterOpFamilyStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterOpFamilyStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOpFamilyStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterOpFamilyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOpFamilyStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

void *PgQuery_PrepareStmt._StorageClass.init(copying:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  v1[3] = 0xE000000000000000;
  v1[4] = MEMORY[0x1E4FBC860];
  uint64_t v6 = (uint64_t)v1
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v6, 1, 1, Node);
  uint64_t v8 = a1[3];
  v1[2] = a1[2];
  v1[3] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v1[4] = a1[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of PgQuery_Alias?((uint64_t)a1+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_PrepareStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_PrepareStmt._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query);
}

uint64_t ObjC metadata update function for PgQuery_PrepareStmt._StorageClass()
{
  return type metadata accessor for PgQuery_PrepareStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_PrepareStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PrepareStmt._StorageClass);
}

void type metadata completion function for PgQuery_PrepareStmt._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_PrepareStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for PgQuery_PrepareStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_PrepareStmt._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = (void *)swift_retain();
    *(void *)(v0 + v3) = PgQuery_PrepareStmt._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if (v6) {
        return swift_release();
      }
      if (v5 == 1) {
        break;
      }
      if (v5 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v8 = v2;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_7;
      }
      if (v5 == 3)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v8 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_7;
      }
LABEL_8:
      uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v8 = v2;
    dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_7:
    uint64_t v2 = v8;
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t PgQuery_PrepareStmt.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v18 = (uint64_t)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v17 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v15 = (uint64_t)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(int *)(type metadata accessor for PgQuery_PrepareStmt(0) + 20);
  uint64_t v16 = v0;
  uint64_t v7 = *(void **)(v0 + v6);
  unint64_t v8 = v7[3];
  if ((v8 & 0x2000000000000000) != 0) {
    uint64_t v9 = HIBYTE(v8) & 0xF;
  }
  else {
    uint64_t v9 = v7[2] & 0xFFFFFFFFFFFFLL;
  }
  swift_retain();
  if (v9)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  if (*(void *)(v7[4] + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  uint64_t v10 = v18;
  outlined init with copy of PgQuery_Alias?((uint64_t)v7+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, v18, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v10, 1, Node) != 1)
  {
    uint64_t v11 = v10;
    uint64_t v12 = v15;
    outlined init with take of PgQuery_OidList(v11, v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v12, type metadata accessor for PgQuery_Node);
    if (!v1) {
      goto LABEL_12;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v10, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_12:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_PrepareStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_PrepareStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_PrepareStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_PrepareStmt()
{
  return PgQuery_PrepareStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_PrepareStmt()
{
  return PgQuery_PrepareStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_PrepareStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_PrepareStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PrepareStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PrepareStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_PrepareStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_PrepareStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PrepareStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_PrepareStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ExecuteStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Alias.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_ExecuteStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ExecuteStmt()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ExecuteStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExecuteStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ExecuteStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ExecuteStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ExecuteStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExecuteStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ExecuteStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExecuteStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ExecuteStmt(char *a1, char *a2)
{
  return specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ExecuteStmt) & 1;
}

uint64_t PgQuery_DeallocateStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Float.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_DeallocateStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DeallocateStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DeallocateStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeallocateStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DeallocateStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DeallocateStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DeallocateStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeallocateStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DeallocateStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeallocateStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_DeallocateStmt(char *a1, char *a2)
{
  return specialized static PgQuery_VariableShowStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_DeallocateStmt) & 1;
}

uint64_t PgQuery_DeclareCursorStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xE000000000000000;
  *(_DWORD *)(v1 + 32) = 0;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v6, 1, 1, Node);
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(void *)(v1 + 24) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 32) = *(_DWORD *)(a1 + 32);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_DeclareCursorStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_DeclareCursorStmt._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query);
}

uint64_t ObjC metadata update function for PgQuery_DeclareCursorStmt._StorageClass()
{
  return type metadata accessor for PgQuery_DeclareCursorStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_DeclareCursorStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DeclareCursorStmt._StorageClass);
}

void type metadata completion function for PgQuery_DeclareCursorStmt._StorageClass()
{
}

uint64_t PgQuery_DeclareCursorStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for PgQuery_DeclareCursorStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_DeclareCursorStmt._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v0 + v3) = PgQuery_DeclareCursorStmt._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if (v6) {
        return swift_release();
      }
      if (v5 == 1) {
        break;
      }
      if (v5 == 2)
      {
        uint64_t v8 = v2;
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
        goto LABEL_7;
      }
      if (v5 == 3)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v8 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_7;
      }
LABEL_8:
      uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v8 = v2;
    dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_7:
    uint64_t v2 = v8;
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t PgQuery_DeclareCursorStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_DeclareCursorStmt, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_DeclareCursorStmt.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_DeclareCursorStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(v17[0] - 8);
  MEMORY[0x1F4188790](v17[0]);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  }
  v17[3] = a4;
  v17[1] = a3;
  if (!v15
    || (swift_bridgeObjectRetain(),
        dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(),
        uint64_t result = swift_bridgeObjectRelease(),
        !v4))
  {
    if (!*(_DWORD *)(a1 + 32)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((*(unsigned int (**)(char *, uint64_t, void))(v11 + 48))(v10, 1, v17[0]) == 1)
      {
        return outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
      }
      else
      {
        outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v13, type metadata accessor for PgQuery_Node);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
        return outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Node);
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_DeclareCursorStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)
    || (char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v14 & 1) != 0))
  {
    if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32))
    {
      uint64_t v16 = a1
          + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
      uint64_t v17 = a2
          + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
      uint64_t v18 = (uint64_t)&v13[*(int *)(v11 + 48)];
      outlined init with copy of PgQuery_Alias?(v16, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
      outlined init with copy of PgQuery_Alias?(v17, v18, &demangling cache variable for type metadata for PgQuery_Node?);
      unint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
      if (v19((uint64_t)v13, 1, Node) == 1)
      {
        if (v19(v18, 1, Node) == 1)
        {
          outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
          return 1;
        }
      }
      else
      {
        outlined init with copy of PgQuery_Alias?((uint64_t)v13, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
        if (v19(v18, 1, Node) != 1)
        {
          outlined init with take of PgQuery_OidList(v18, (uint64_t)v7, type metadata accessor for PgQuery_Node);
          char v20 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
          outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
          outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
          outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
          return (v20 & 1) != 0;
        }
        outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
      }
      outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    }
    return 0;
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DeclareCursorStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_DeclareCursorStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DeclareCursorStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DeclareCursorStmt()
{
  return PgQuery_DeclareCursorStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DeclareCursorStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeclareCursorStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DeclareCursorStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DeclareCursorStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DeclareCursorStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeclareCursorStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DeclareCursorStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeclareCursorStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_DeclareCursorStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_DeclareCursorStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_DeclareCursorStmt.== infix(_:_:)) & 1;
}

uint64_t PgQuery_CreateTableSpaceStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
          type metadata accessor for PgQuery_RoleSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateTableSpaceStmt.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v6 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = v0[1];
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    TableSpaceuint64_t Stmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)v0 + *(int *)(TableSpaceStmt + 32), (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, RoleSpec) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v8, type metadata accessor for PgQuery_RoleSpec);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v8, type metadata accessor for PgQuery_RoleSpec);
      if (v1) {
        return result;
      }
    }
    unint64_t v12 = v0[3];
    uint64_t v13 = HIBYTE(v12) & 0xF;
    if ((v12 & 0x2000000000000000) == 0) {
      uint64_t v13 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0[4] + 16)) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
      type metadata accessor for PgQuery_Node(0);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
      uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      if (!v1) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateTableSpaceStmt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  a2[4] = MEMORY[0x1E4FBC860];
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 32);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 56);

  return v6(v4, 1, 1, RoleSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateTableSpaceStmt()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateTableSpaceStmt()
{
  return PgQuery_CreateTableSpaceStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateTableSpaceStmt()
{
  return PgQuery_CreateTableSpaceStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateTableSpaceStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableSpaceStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateTableSpaceStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateTableSpaceStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateTableSpaceStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableSpaceStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateTableSpaceStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableSpaceStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_DropTableSpaceStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DropTableSpaceStmt.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (*(unsigned char *)(v0 + 16) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for PgQuery_DropTableSpaceStmt(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropTableSpaceStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropTableSpaceStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DropTableSpaceStmt()
{
  return PgQuery_DropTableSpaceStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DropTableSpaceStmt()
{
  return PgQuery_DropTableSpaceStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropTableSpaceStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropTableSpaceStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropTableSpaceStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropTableSpaceStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropTableSpaceStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropTableSpaceStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropTableSpaceStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterObjectDependsStmt._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extname, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_AlterObjectDependsStmt._StorageClass()
{
  return type metadata accessor for PgQuery_AlterObjectDependsStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterObjectDependsStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterObjectDependsStmt._StorageClass);
}

void type metadata completion function for PgQuery_AlterObjectDependsStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_AlterObjectDependsStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_AlterObjectDependsStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_AlterObjectDependsStmt._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_AlterObjectDependsStmt._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 2:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_7;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_7:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_AlterObjectDependsStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v46 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v39 = (uint64_t)&v34 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v40 = *(void *)(Node - 8);
  uint64_t v41 = Node;
  uint64_t v10 = MEMORY[0x1F4188790](Node);
  uint64_t v35 = (uint64_t)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v37 = (uint64_t)&v34 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v17 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  unint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(int *)(type metadata accessor for PgQuery_AlterObjectDependsStmt(0) + 20);
  uint64_t v36 = v3;
  uint64_t v21 = *(void *)(v3 + v20);
  uint64_t v22 = *(void *)(v21 + 16);
  unsigned __int8 v23 = *(unsigned char *)(v21 + 24);
  uint64_t v24 = destructiveProjectEnumData for StorableValue(v22, v23);
  uint64_t v42 = a2;
  if (v24)
  {
    uint64_t v44 = v22;
    unsigned __int8 v45 = v23;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    swift_retain();
    uint64_t v25 = v43;
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    uint64_t v26 = v25;
    if (v25) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
    uint64_t v26 = v43;
  }
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v15, (uint64_t)v19, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_RangeVar);
    if (v26) {
      return swift_release();
    }
  }
  uint64_t v27 = v39;
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v39, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  if (v28(v27, 1, v41) == 1)
  {
    outlined destroy of AnyValue?(v27, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v29 = v27;
    uint64_t v30 = v37;
    outlined init with take of PgQuery_OidList(v29, v37, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_Node);
    if (v26) {
      return swift_release();
    }
  }
  uint64_t v31 = v38;
  outlined init with copy of PgQuery_Alias?(v21+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extname, v38, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v28(v31, 1, v41) != 1)
  {
    uint64_t v32 = v35;
    outlined init with take of PgQuery_OidList(v31, v35, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_Node);
    if (!v26) {
      goto LABEL_14;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v31, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_14:
  if (*(unsigned char *)(v21
                + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__remove) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v26) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterObjectDependsStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterObjectDependsStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterObjectDependsStmt()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterObjectDependsStmt()
{
  return PgQuery_AlterObjectDependsStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterObjectDependsStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterObjectDependsStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterObjectDependsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectDependsStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterObjectDependsStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterObjectDependsStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterObjectDependsStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectDependsStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterObjectDependsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectDependsStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterObjectSchemaStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_NamedArgExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?, &OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object);
}

uint64_t ObjC metadata update function for PgQuery_AlterObjectSchemaStmt._StorageClass()
{
  return type metadata accessor for PgQuery_AlterObjectSchemaStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterObjectSchemaStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterObjectSchemaStmt._StorageClass);
}

void type metadata completion function for PgQuery_AlterObjectSchemaStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_AlterObjectSchemaStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_AlterObjectSchemaStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_AlterObjectSchemaStmt._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_AlterObjectSchemaStmt._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 2:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_7:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 4:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_8;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_8:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_AlterObjectSchemaStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v33 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v28 = (uint64_t)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v27 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v26 = (uint64_t)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v10 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(int *)(type metadata accessor for PgQuery_AlterObjectSchemaStmt(0) + 20);
  uint64_t v25 = v2;
  uint64_t v14 = *(void *)(v2 + v13);
  uint64_t v15 = *(void *)(v14 + 16);
  unsigned __int8 v16 = *(unsigned char *)(v14 + 24);
  if (destructiveProjectEnumData for StorableValue(v15, v16))
  {
    uint64_t v31 = v15;
    unsigned __int8 v32 = v16;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    swift_retain();
    uint64_t v17 = v30;
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    uint64_t v18 = v17;
    if (v17) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
    uint64_t v18 = v30;
  }
  outlined init with copy of PgQuery_Alias?(v14+ OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_RangeVar);
    if (v18) {
      return swift_release();
    }
  }
  uint64_t v19 = v28;
  outlined init with copy of PgQuery_Alias?(v14+ OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v19, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v19, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_11;
  }
  uint64_t v20 = v19;
  uint64_t v21 = v26;
  outlined init with take of PgQuery_OidList(v20, v26, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
  if (v18) {
    return swift_release();
  }
LABEL_11:
  unint64_t v22 = *(void *)(v14
                  + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema
                  + 8);
  uint64_t v23 = HIBYTE(v22) & 0xF;
  if ((v22 & 0x2000000000000000) == 0) {
    uint64_t v23 = *(void *)(v14
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema) & 0xFFFFFFFFFFFFLL;
  if (v23)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v18) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v14
                + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v18) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterObjectSchemaStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterObjectSchemaStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterObjectSchemaStmt()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterObjectSchemaStmt()
{
  return PgQuery_AlterObjectSchemaStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterObjectSchemaStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_AlterObjectSchemaStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterObjectSchemaStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectSchemaStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterObjectSchemaStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterObjectSchemaStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterObjectSchemaStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectSchemaStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterObjectSchemaStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectSchemaStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterOwnerStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 1;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v6, 1, 1, RangeVar);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v8, 1, 1, Node);
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner;
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 56))(v10, 1, 1, RoleSpec);
  char v12 = *(unsigned char *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(unsigned char *)(v1 + 24) = v12;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v8, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v10, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  return v1;
}

uint64_t PgQuery_AlterOwnerStmt._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_AlterOwnerStmt._StorageClass()
{
  return type metadata accessor for PgQuery_AlterOwnerStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterOwnerStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterOwnerStmt._StorageClass);
}

void type metadata completion function for PgQuery_AlterOwnerStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RoleSpec?, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

uint64_t PgQuery_AlterOwnerStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = *(int *)(type metadata accessor for PgQuery_AlterOwnerStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_AlterOwnerStmt._StorageClass(0);
    swift_allocObject();
    uint64_t v3 = swift_retain();
    *(void *)(v0 + v2) = PgQuery_AlterOwnerStmt._StorageClass.init(copying:)(v3);
    swift_release();
  }
  swift_retain();
  uint64_t v4 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v5 & 1) == 0)
    {
      switch(v4)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 2:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_7;
        case 4:
          type metadata accessor for PgQuery_RoleSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
LABEL_7:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t v4 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_AlterOwnerStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = a3;
  uint64_t v38 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v33 = (uint64_t)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v32 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v29 = (uint64_t)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v36 = (uint64_t)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v35 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v30 = (uint64_t)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v15 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(int *)(type metadata accessor for PgQuery_AlterOwnerStmt(0) + 20);
  uint64_t v31 = v3;
  uint64_t v19 = *(void *)(v3 + v18);
  uint64_t v20 = *(void *)(v19 + 16);
  unsigned __int8 v21 = *(unsigned char *)(v19 + 24);
  if (destructiveProjectEnumData for StorableValue(v20, v21))
  {
    uint64_t v39 = v20;
    unsigned __int8 v40 = v21;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v19+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v13, (uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_RangeVar);
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v22 = v36;
  outlined init with copy of PgQuery_Alias?(v19+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v22, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v22, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v23 = v22;
    uint64_t v24 = v30;
    outlined init with take of PgQuery_OidList(v23, v30, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v24, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v25 = v33;
  outlined init with copy of PgQuery_Alias?(v19+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner, v33, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v25, 1, RoleSpec) != 1)
  {
    uint64_t v26 = v25;
    uint64_t v27 = v29;
    outlined init with take of PgQuery_OidList(v26, v29, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_RoleSpec);
    if (!v4) {
      goto LABEL_15;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v25, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
LABEL_15:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterOwnerStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterOwnerStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterOwnerStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterOwnerStmt()
{
  return PgQuery_AlterOwnerStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterOwnerStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterOwnerStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterOwnerStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOwnerStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterOwnerStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterOwnerStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterOwnerStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOwnerStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterOwnerStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOwnerStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterOperatorStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_AlterOperatorStmt(0);
        type metadata accessor for PgQuery_ObjectWithArgs(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterOperatorStmt.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v3 = v1;
  v14[1] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v8 = *(void *)(ObjectWithArgs - 8);
  MEMORY[0x1F4188790](ObjectWithArgs);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = type metadata accessor for PgQuery_AlterOperatorStmt(0);
  uint64_t v11 = *(int *)(v14[0] + 24);
  uint64_t v15 = v3;
  outlined init with copy of PgQuery_Alias?(v3 + v11, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, ObjectWithArgs) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    uint64_t v12 = v15;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_ObjectWithArgs);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_ObjectWithArgs);
    uint64_t v12 = v15;
    if (v2) {
      return result;
    }
  }
  if (!*(void *)(*(void *)v12 + 16)) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  type metadata accessor for PgQuery_Node(0);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
  if (!v2) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterOperatorStmt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_AlterDefaultPrivilegesStmt(a1, type metadata accessor for PgQuery_ObjectWithArgs, a2);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterDefaultPrivilegesStmt@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, void *a3@<X8>)
{
  *a3 = MEMORY[0x1E4FBC860];
  UnknownStorage.init()();
  uint64_t v6 = (char *)a3 + *(int *)(a1 + 24);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterOperatorStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterOperatorStmt()
{
  return PgQuery_AlterOperatorStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterOperatorStmt(uint64_t a1)
{
  return PgQuery_AlterOperatorStmt.traverse<A>(visitor:)(a1);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterOperatorStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOperatorStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterOperatorStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterOperatorStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterOperatorStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOperatorStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterOperatorStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOperatorStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterTypeStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_AlterTypeStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterTypeStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterTypeStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_AlterTypeStmt);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterTypeStmt@<X0>(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *a1 = MEMORY[0x1E4FBC860];
  a1[1] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTypeStmt()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTypeStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTypeStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTypeStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTypeStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTypeStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTypeStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTypeStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTypeStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterTypeStmt(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterTypeStmt) & 1;
}

uint64_t PgQuery_DropOwnedStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_DropOwnedStmt.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!v0[1]
      || (lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      type metadata accessor for PgQuery_DropOwnedStmt(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropOwnedStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropOwnedStmt()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DropOwnedStmt()
{
  return PgQuery_DropOwnedStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DropOwnedStmt()
{
  return PgQuery_DropOwnedStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropOwnedStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropOwnedStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropOwnedStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropOwnedStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropOwnedStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropOwnedStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropOwnedStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropOwnedStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ReassignOwnedStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for PgQuery_ReassignOwnedStmt(0);
        type metadata accessor for PgQuery_RoleSpec(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ReassignOwnedStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  v16[3] = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v10 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(*(void *)v4 + 16);
  v16[1] = a2;
  if (!v13
    || (type metadata accessor for PgQuery_Node(0),
        v16[0] = v12,
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), uint64_t v12 = (char *)v16[0], !v3))
  {
    ReassignOwneduint64_t Stmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
    outlined init with copy of PgQuery_Alias?(v4 + *(int *)(ReassignOwnedStmt + 24), (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, RoleSpec) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_RoleSpec);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_RoleSpec);
      if (v3) {
        return result;
      }
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ReassignOwnedStmt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_AlterDefaultPrivilegesStmt(a1, type metadata accessor for PgQuery_RoleSpec, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ReassignOwnedStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ReassignOwnedStmt()
{
  return PgQuery_ReassignOwnedStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ReassignOwnedStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_ReassignOwnedStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ReassignOwnedStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReassignOwnedStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ReassignOwnedStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ReassignOwnedStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ReassignOwnedStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReassignOwnedStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ReassignOwnedStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReassignOwnedStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CompositeTypeStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_CompositeTypeStmt(0);
        type metadata accessor for PgQuery_RangeVar(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CompositeTypeStmt.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v3 = v1;
  v14[1] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v8 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = type metadata accessor for PgQuery_CompositeTypeStmt(0);
  uint64_t v11 = *(int *)(v14[0] + 24);
  uint64_t v15 = v3;
  outlined init with copy of PgQuery_Alias?(v3 + v11, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v12 = v15;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_RangeVar);
    uint64_t v12 = v15;
    if (v2) {
      return result;
    }
  }
  if (!*(void *)(*(void *)v12 + 16)) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  type metadata accessor for PgQuery_Node(0);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
  if (!v2) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CompositeTypeStmt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_AlterDefaultPrivilegesStmt(a1, type metadata accessor for PgQuery_RangeVar, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CompositeTypeStmt()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CompositeTypeStmt()
{
  return PgQuery_CompositeTypeStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CompositeTypeStmt(uint64_t a1)
{
  return PgQuery_CompositeTypeStmt.traverse<A>(visitor:)(a1);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CompositeTypeStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CompositeTypeStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CompositeTypeStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CompositeTypeStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CompositeTypeStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CompositeTypeStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CompositeTypeStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CompositeTypeStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateEnumStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterTypeStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_CreateEnumStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateEnumStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateEnumStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEnumStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateEnumStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateEnumStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateEnumStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEnumStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateEnumStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEnumStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreateEnumStmt(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreateEnumStmt) & 1;
}

uint64_t one-time initialization function for _protobuf_nameMap(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v5, a2);
  __swift_project_value_buffer(v5, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v6 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v7 = *(void *)(*(void *)v6 + 72);
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_18EB382C0;
  uint64_t v10 = (void *)(v9 + v8);
  unint64_t v11 = v9 + v8 + v6[14];
  *uint64_t v10 = 1;
  *(void *)unint64_t v11 = "type_name";
  *(void *)(v11 + 8) = 9;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = *MEMORY[0x1E4F70FD0];
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v14 = *(void (**)(void))(*(void *)(v13 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v14)(v11, v12, v13);
  uint64_t v15 = (char *)v10 + v7 + v6[14];
  *(void *)((char *)v10 + v7) = 2;
  *(void *)uint64_t v15 = a3;
  *((void *)v15 + 1) = a4;
  v15[16] = 2;
  v14();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v7;
  int *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  uint64_t v7 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  unint64_t v8 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v9 = (*(unsigned __int8 *)(*(void *)v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18EB382D0;
  unint64_t v11 = v10 + v9 + v8[14];
  *(void *)(v10 + v9) = 1;
  *(void *)unint64_t v11 = a3;
  *(void *)(v11 + 8) = a4;
  *(unsigned char *)(v11 + 16) = 2;
  uint64_t v12 = *MEMORY[0x1E4F70FB8];
  uint64_t v13 = type metadata accessor for _NameMap.NameDescription();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 104))(v11, v12, v13);
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t PgQuery_CreateRangeStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterTypeStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_CreateRangeStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateRangeStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateRangeStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRangeStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateRangeStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateRangeStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateRangeStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRangeStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateRangeStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRangeStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreateRangeStmt(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreateRangeStmt) & 1;
}

uint64_t PgQuery_AlterEnumStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 3:
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 5:
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterEnumStmt.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    unint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = *(void *)(v0 + 8) & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v5 = *(void *)(v0 + 32);
      uint64_t v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0) {
        uint64_t v6 = *(void *)(v0 + 24) & 0xFFFFFFFFFFFFLL;
      }
      if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        unint64_t v7 = *(void *)(v0 + 48);
        uint64_t v8 = HIBYTE(v7) & 0xF;
        if ((v7 & 0x2000000000000000) == 0) {
          uint64_t v8 = *(void *)(v0 + 40) & 0xFFFFFFFFFFFFLL;
        }
        if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (*(unsigned char *)(v0 + 56) != 1
            || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            if (*(unsigned char *)(v0 + 57) != 1
              || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for PgQuery_AlterEnumStmt(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterEnumStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0xE000000000000000;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0xE000000000000000;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0xE000000000000000;
  *(_WORD *)(a1 + 56) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterEnumStmt()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterEnumStmt()
{
  return PgQuery_AlterEnumStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterEnumStmt()
{
  return PgQuery_AlterEnumStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEnumStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterEnumStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterEnumStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterEnumStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEnumStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterEnumStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEnumStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterTSDictionaryStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterTypeStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_AlterTSDictionaryStmt);
}

uint64_t PgQuery_AlterTypeStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!*(void *)(*v4 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
  {
    if (!*(void *)(v4[1] + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTSDictionaryStmt()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTSDictionaryStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSDictionaryStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTSDictionaryStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTSDictionaryStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTSDictionaryStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSDictionaryStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTSDictionaryStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSDictionaryStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterTSDictionaryStmt(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterTSDictionaryStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterTSDictionaryStmt) & 1;
}

uint64_t PgQuery_AlterTSConfigurationStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_AlterTSConfigType and conformance PgQuery_AlterTSConfigType();
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        case 2:
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 5:
        case 6:
        case 7:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterTSConfigurationStmt.traverse<A>(visitor:)()
{
  if (!*(void *)v0
    || (lazy protocol witness table accessor for type PgQuery_AlterTSConfigType and conformance PgQuery_AlterTSConfigType(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(void *)(*(void *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(*(void *)(v0 + 24) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(*(void *)(v0 + 32) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (*(unsigned char *)(v0 + 40) != 1
            || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            if (*(unsigned char *)(v0 + 41) != 1
              || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              if (*(unsigned char *)(v0 + 42) != 1
                || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
              {
                type metadata accessor for PgQuery_AlterTSConfigurationStmt(0);
                return UnknownStorage.traverse<A>(visitor:)();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterTSConfigurationStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = v1;
  *(_WORD *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 42) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTSConfigurationStmt()
{
  return 0xD000000000000021;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_DefineStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_DefineStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 44);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterTSConfigurationStmt()
{
  return PgQuery_AlterTSConfigurationStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterTSConfigurationStmt()
{
  return PgQuery_AlterTSConfigurationStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSConfigurationStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTSConfigurationStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTSConfigurationStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTSConfigurationStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSConfigurationStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTSConfigurationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSConfigurationStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateFdwStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_CreateFdwStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateFdwStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateFdwStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_CreateFdwStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateFdwStmt()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateFdwStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFdwStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateFdwStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateFdwStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateFdwStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFdwStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateFdwStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFdwStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreateFdwStmt(char *a1, char *a2)
{
  return specialized static PgQuery_CreateFdwStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreateFdwStmt) & 1;
}

uint64_t PgQuery_AlterFdwStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateFdwStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_AlterFdwStmt);
}

uint64_t PgQuery_CreateFdwStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v7 = v4[1];
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    if (!*(void *)(v4[2] + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
    {
      if (!*(void *)(v4[3] + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
      {
        a4(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateFdwStmt@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  a1[2] = MEMORY[0x1E4FBC860];
  a1[3] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterFdwStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterFdwStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFdwStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterFdwStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterFdwStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterFdwStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFdwStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterFdwStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFdwStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterFdwStmt(char *a1, char *a2)
{
  return specialized static PgQuery_CreateFdwStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterFdwStmt) & 1;
}

uint64_t PgQuery_CreateForeignServerStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateForeignServerStmt.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v7 = *(void *)(v0 + 40);
      uint64_t v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v8 = *(void *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
      }
      if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        unint64_t v9 = *(void *)(v0 + 56);
        uint64_t v10 = HIBYTE(v9) & 0xF;
        if ((v9 & 0x2000000000000000) == 0) {
          uint64_t v10 = *(void *)(v0 + 48) & 0xFFFFFFFFFFFFLL;
        }
        if (!v10 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (*(unsigned char *)(v0 + 64) != 1
            || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            if (!*(void *)(*(void *)(v0 + 72) + 16)
              || (type metadata accessor for PgQuery_Node(0),
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for PgQuery_CreateForeignServerStmt(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateForeignServerStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xE000000000000000;
  *(unsigned char *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = MEMORY[0x1E4FBC860];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateForeignServerStmt()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateForeignServerStmt()
{
  return PgQuery_CreateForeignServerStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateForeignServerStmt()
{
  return PgQuery_CreateForeignServerStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignServerStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateForeignServerStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateForeignServerStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateForeignServerStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignServerStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateForeignServerStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignServerStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterForeignServerStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterForeignServerStmt.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = *(void *)(v0 + 24);
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(*(void *)(v0 + 32) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (*(unsigned char *)(v0 + 40) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_AlterForeignServerStmt(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterForeignServerStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a1 + 40) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterForeignServerStmt()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterForeignServerStmt()
{
  return PgQuery_AlterForeignServerStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterForeignServerStmt()
{
  return PgQuery_AlterForeignServerStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterForeignServerStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterForeignServerStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterForeignServerStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterForeignServerStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterForeignServerStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterForeignServerStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterForeignServerStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateUserMappingStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_CreateUserMappingStmt(0);
          type metadata accessor for PgQuery_RoleSpec(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 2:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateUserMappingStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v15[3] = a3;
  v15[1] = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v9 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  unint64_t v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
  outlined init with copy of PgQuery_Alias?(v3 + *(int *)(v15[0] + 32), (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_RoleSpec);
    if (v4) {
      return result;
    }
  }
  unint64_t v13 = *(void *)(v3 + 8);
  uint64_t v14 = HIBYTE(v13) & 0xF;
  if ((v13 & 0x2000000000000000) == 0) {
    uint64_t v14 = *(void *)v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    if (*(unsigned char *)(v3 + 16) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v4))
    {
      if (!*(void *)(*(void *)(v3 + 24) + 16)) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
      type metadata accessor for PgQuery_Node(0);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
      uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      if (!v4) {
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateUserMappingStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = MEMORY[0x1E4FBC860];
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 32);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 56);

  return v6(v4, 1, 1, RoleSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateUserMappingStmt()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateUserMappingStmt()
{
  return PgQuery_CreateUserMappingStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateUserMappingStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateUserMappingStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateUserMappingStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateUserMappingStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateUserMappingStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateUserMappingStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateUserMappingStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateUserMappingStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterUserMappingStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_AlterUserMappingStmt(0);
        type metadata accessor for PgQuery_RoleSpec(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_AlterUserMappingStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v18 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v10 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterUserMappinguint64_t Stmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)v5 + *(int *)(AlterUserMappingStmt + 28), (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_RoleSpec);
    if (v4) {
      return result;
    }
  }
  unint64_t v14 = v5[1];
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    if (!*(void *)(v5[2] + 16)) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v4) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterUserMappingStmt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_AlterUserMappingStmt(a1, type metadata accessor for PgQuery_RoleSpec, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterUserMappingStmt()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterUserMappingStmt()
{
  return PgQuery_AlterUserMappingStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterUserMappingStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterUserMappingStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterUserMappingStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterUserMappingStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterUserMappingStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterUserMappingStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterUserMappingStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterUserMappingStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterUserMappingStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterUserMappingStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_DropUserMappingStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_DropUserMappingStmt(0);
        type metadata accessor for PgQuery_RoleSpec(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_DropUserMappingStmt.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v16 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v8 = *(void *)(RoleSpec - 8);
  MEMORY[0x1F4188790](RoleSpec);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  DropUserMappinguint64_t Stmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
  outlined init with copy of PgQuery_Alias?(v3 + *(int *)(DropUserMappingStmt + 28), (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, RoleSpec) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_RoleSpec?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_RoleSpec);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_RoleSpec);
    if (v2) {
      return result;
    }
  }
  unint64_t v12 = *(void *)(v3 + 8);
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = *(void *)v3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v13 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v2))
  {
    if (*(unsigned char *)(v3 + 16) != 1) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (!v2) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropUserMappingStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0xE000000000000000;
  *(unsigned char *)(a2 + 16) = 0;
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 28);
  uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 56);

  return v6(v4, 1, 1, RoleSpec);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropUserMappingStmt()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DropUserMappingStmt()
{
  return PgQuery_DropUserMappingStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DropUserMappingStmt(uint64_t a1)
{
  return PgQuery_DropUserMappingStmt.traverse<A>(visitor:)(a1);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropUserMappingStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropUserMappingStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropUserMappingStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropUserMappingStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropUserMappingStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropUserMappingStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropUserMappingStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterTableSpaceOptionsStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_AlterTableSpaceOptionsStmt.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(*(void *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (*(unsigned char *)(v0 + 24) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterTableSpaceOptionsStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a1 + 24) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTableSpaceOptionsStmt()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterTableSpaceOptionsStmt()
{
  return PgQuery_AlterTableSpaceOptionsStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterTableSpaceOptionsStmt()
{
  return PgQuery_AlterTableSpaceOptionsStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTableSpaceOptionsStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTableSpaceOptionsStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterTableMoveAllStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterTableMoveAllStmt.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!destructiveProjectEnumData for StorableValue(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24))
      || (lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!*(void *)(*(void *)(v0 + 32) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        unint64_t v5 = *(void *)(v0 + 48);
        uint64_t v6 = HIBYTE(v5) & 0xF;
        if ((v5 & 0x2000000000000000) == 0) {
          uint64_t v6 = *(void *)(v0 + 40) & 0xFFFFFFFFFFFFLL;
        }
        if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
        {
          if (*(unsigned char *)(v0 + 56) != 1
            || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PgQuery_AlterTableMoveAllStmt(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterTableMoveAllStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0xE000000000000000;
  *(unsigned char *)(a1 + 56) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterTableMoveAllStmt()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterTableMoveAllStmt()
{
  return PgQuery_AlterTableMoveAllStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterTableMoveAllStmt()
{
  return PgQuery_AlterTableMoveAllStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableMoveAllStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTableMoveAllStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTableMoveAllStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterTableMoveAllStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableMoveAllStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTableMoveAllStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableMoveAllStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_SecLabelStmt._StorageClass.init(copying:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 1;
  uint64_t v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v3, 1, 1, Node);
  unint64_t v5 = (void *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider);
  *unint64_t v5 = 0;
  v5[1] = 0xE000000000000000;
  uint64_t v6 = (void *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label);
  *uint64_t v6 = 0;
  v6[1] = 0xE000000000000000;
  char v7 = *(unsigned char *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(unsigned char *)(v1 + 24) = v7;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = *(void *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider
                 + 8);
  *unint64_t v5 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider);
  v5[1] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label);
  uint64_t v9 = *(void *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label
                 + 8);
  swift_bridgeObjectRetain();
  swift_release();
  *uint64_t v6 = v10;
  v6[1] = v9;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_SecLabelStmt._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_SecLabelStmt._StorageClass()
{
  return type metadata accessor for PgQuery_SecLabelStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SecLabelStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SecLabelStmt._StorageClass);
}

void type metadata completion function for PgQuery_SecLabelStmt._StorageClass()
{
}

{
  unint64_t v0;

  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_SecLabelStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for PgQuery_SecLabelStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_SecLabelStmt._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v0 + v3) = PgQuery_SecLabelStmt._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v6 & 1) == 0)
    {
      switch(v5)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
        case 4:
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
LABEL_7:
          uint64_t v2 = v8;
          break;
        default:
          break;
      }
      uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_SecLabelStmt.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v18 = (uint64_t)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(int *)(type metadata accessor for PgQuery_SecLabelStmt(0) + 20);
  uint64_t v17 = v0;
  uint64_t v8 = *(void *)(v0 + v7);
  uint64_t v9 = *(void *)(v8 + 16);
  unsigned __int8 v10 = *(unsigned char *)(v8 + 24);
  if (destructiveProjectEnumData for StorableValue(v9, v10))
  {
    uint64_t v19 = v9;
    unsigned __int8 v20 = v10;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v8+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_8;
  }
  uint64_t v11 = v18;
  outlined init with take of PgQuery_OidList((uint64_t)v4, v18, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_Node);
  if (v1) {
    return swift_release();
  }
LABEL_8:
  unint64_t v12 = *(void *)(v8
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider
                  + 8);
  uint64_t v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v13 = *(void *)(v8
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider) & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  unint64_t v14 = *(void *)(v8
                  + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label
                  + 8);
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = *(void *)(v8
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label) & 0xFFFFFFFFFFFFLL;
  if (v15)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SecLabelStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SecLabelStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SecLabelStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_SecLabelStmt()
{
  return PgQuery_SecLabelStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SecLabelStmt()
{
  return PgQuery_SecLabelStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SecLabelStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SecLabelStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SecLabelStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SecLabelStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SecLabelStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SecLabelStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SecLabelStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SecLabelStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateForeignTableStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_CreateForeignTableStmt(0);
        type metadata accessor for PgQuery_CreateStmt(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStmt);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_CreateForeignTableStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v18 = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  uint64_t v10 = *(void *)(Stmt - 8);
  MEMORY[0x1F4188790](Stmt);
  unint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  ForeignTableuint64_t Stmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)v5 + *(int *)(ForeignTableStmt + 28), (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Stmt) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_CreateStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_CreateStmt);
    if (v4) {
      return result;
    }
  }
  unint64_t v14 = v5[1];
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = *v5 & 0xFFFFFFFFFFFFLL;
  }
  if (!v15 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v4))
  {
    if (!*(void *)(v5[2] + 16)) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v4) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateForeignTableStmt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_AlterUserMappingStmt(a1, type metadata accessor for PgQuery_CreateStmt, a2);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterUserMappingStmt@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0xE000000000000000;
  a3[2] = MEMORY[0x1E4FBC860];
  UnknownStorage.init()();
  uint64_t v6 = (char *)a3 + *(int *)(a1 + 28);
  uint64_t v7 = a2(0);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(v6, 1, 1, v7);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateForeignTableStmt()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateForeignTableStmt()
{
  return PgQuery_CreateForeignTableStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateForeignTableStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateForeignTableStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateForeignTableStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignTableStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateForeignTableStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateForeignTableStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateForeignTableStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignTableStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateForeignTableStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignTableStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ImportForeignSchemaStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
          lazy protocol witness table accessor for type PgQuery_ImportForeignSchemaType and conformance PgQuery_ImportForeignSchemaType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 5:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ImportForeignSchemaStmt.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v7 = v0[5];
      uint64_t v8 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v8 = v0[4] & 0xFFFFFFFFFFFFLL;
      }
      if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!v0[6]
          || (lazy protocol witness table accessor for type PgQuery_ImportForeignSchemaType and conformance PgQuery_ImportForeignSchemaType(),
              uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
              !v1))
        {
          if (!*(void *)(v0[8] + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (!*(void *)(v0[9] + 16)
              || (type metadata accessor for PgQuery_Node(0),
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for PgQuery_ImportForeignSchemaStmt(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ImportForeignSchemaStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 64) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 72) = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ImportForeignSchemaStmt()
{
  return 0xD000000000000020;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ImportForeignSchemaStmt()
{
  return PgQuery_ImportForeignSchemaStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ImportForeignSchemaStmt()
{
  return PgQuery_ImportForeignSchemaStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ImportForeignSchemaStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ImportForeignSchemaStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ImportForeignSchemaStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ImportForeignSchemaStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ImportForeignSchemaStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ImportForeignSchemaStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ImportForeignSchemaStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateExtensionStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_DropdbStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_CreateExtensionStmt);
}

uint64_t PgQuery_DropdbStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v7 = *(void *)(v4 + 8);
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = *(void *)v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    if (*(unsigned char *)(v4 + 16) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v5))
    {
      if (!*(void *)(*(void *)(v4 + 24) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
      {
        a4(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropdbStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBC860];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateExtensionStmt()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateExtensionStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateExtensionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateExtensionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateExtensionStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateExtensionStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateExtensionStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreateExtensionStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CreateExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreateExtensionStmt) & 1;
}

uint64_t PgQuery_AlterExtensionStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Alias.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_AlterExtensionStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterExtensionStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterExtensionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterExtensionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterExtensionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterExtensionStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterExtensionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterExtensionStmt(char *a1, char *a2)
{
  return specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterExtensionStmt) & 1;
}

uint64_t PgQuery_AlterExtensionContentsStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xE000000000000000;
  *(_DWORD *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 48) = 1;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v6, 1, 1, Node);
  uint64_t v8 = *(void *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(void *)(v1 + 24) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 32) = *(_DWORD *)(a1 + 32);
  char v9 = *(unsigned char *)(a1 + 48);
  *(void *)(v1 + 40) = *(void *)(a1 + 40);
  *(unsigned char *)(v1 + 48) = v9;
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_AlterExtensionContentsStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_DeclareCursorStmt._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object);
}

uint64_t PgQuery_DeclareCursorStmt._StorageClass.__deallocating_deinit(void *a1)
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v1 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v3 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v3, v4);
}

uint64_t ObjC metadata update function for PgQuery_AlterExtensionContentsStmt._StorageClass()
{
  return type metadata accessor for PgQuery_AlterExtensionContentsStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterExtensionContentsStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, type metadata singleton initialization cache for PgQuery_AlterExtensionContentsStmt._StorageClass);
}

void type metadata completion function for PgQuery_AlterExtensionContentsStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_AlterExtensionContentsStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterExtensionContentsStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_AlterExtensionContentsStmt._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v0 + v3) = PgQuery_AlterExtensionContentsStmt._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v6 & 1) == 0)
    {
      switch(v5)
      {
        case 1:
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 2:
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_7;
        case 3:
          lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_7:
          uint64_t v2 = v8;
          break;
        default:
          break;
      }
      uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_AlterExtensionContentsStmt.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v15 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  char v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(int *)(type metadata accessor for PgQuery_AlterExtensionContentsStmt(0) + 20);
  uint64_t v14 = v0;
  uint64_t v8 = *(void *)(v0 + v7);
  unint64_t v9 = *(void *)(v8 + 24);
  if ((v9 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(v9) & 0xF;
  }
  else {
    uint64_t v10 = *(void *)(v8 + 16) & 0xFFFFFFFFFFFFLL;
  }
  swift_retain();
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v8 + 32))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  uint64_t v11 = *(void *)(v8 + 40);
  unsigned __int8 v12 = *(unsigned char *)(v8 + 48);
  if (destructiveProjectEnumData for StorableValue(v11, v12))
  {
    uint64_t v16 = v11;
    unsigned __int8 v17 = v12;
    lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v8+ OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v4, 1, Node) != 1)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v4, (uint64_t)v6, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v6, type metadata accessor for PgQuery_Node);
    if (!v1) {
      goto LABEL_14;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_14:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterExtensionContentsStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterExtensionContentsStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterExtensionContentsStmt()
{
  return 0xD000000000000023;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterExtensionContentsStmt()
{
  return PgQuery_AlterExtensionContentsStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterExtensionContentsStmt()
{
  return PgQuery_AlterExtensionContentsStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterExtensionContentsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionContentsStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterExtensionContentsStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterExtensionContentsStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterExtensionContentsStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionContentsStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterExtensionContentsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionContentsStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateEventTrigStmt.decodeMessage<A>(decoder:)()
{
  return PgQuery_CreateEventTrigStmt.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateEventTrigStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateEventTrigStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_CreateEventTrigStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateEventTrigStmt()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateEventTrigStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEventTrigStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateEventTrigStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateEventTrigStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateEventTrigStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEventTrigStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateEventTrigStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEventTrigStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreateEventTrigStmt(char *a1, char *a2)
{
  return specialized static PgQuery_CreateSubscriptionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreateEventTrigStmt) & 1;
}

uint64_t PgQuery_AlterEventTrigStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_NotifyStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_AlterEventTrigStmt);
}

uint64_t PgQuery_NotifyStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v7 = v4[1];
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    unint64_t v10 = v4[3];
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0) {
      uint64_t v11 = v4[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v11 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterEventTrigStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterEventTrigStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEventTrigStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterEventTrigStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterEventTrigStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterEventTrigStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEventTrigStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterEventTrigStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEventTrigStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterEventTrigStmt(char *a1, char *a2)
{
  return specialized static PgQuery_ReplicaIdentityStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterEventTrigStmt) & 1;
}

uint64_t PgQuery_RefreshMatViewStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        type metadata accessor for PgQuery_RefreshMatViewStmt(0);
        type metadata accessor for PgQuery_RangeVar(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (result == 2 || result == 1)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RefreshMatViewStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v7 - 8);
  unint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v11 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v13 = (char *)v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v12) = *v4;
  v16[3] = a2;
  v16[1] = a1;
  if (v12 != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v3))
  {
    if (v4[1] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v3))
    {
      RefreshMatViewuint64_t Stmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
      outlined init with copy of PgQuery_Alias?((uint64_t)&v4[*(int *)(RefreshMatViewStmt + 28)], (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, RangeVar) == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      }
      else
      {
        outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v13, type metadata accessor for PgQuery_RangeVar);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
        uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_RangeVar);
        if (v3) {
          return result;
        }
      }
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RefreshMatViewStmt@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  *a2 = 0;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  char v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56);

  return v6(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RefreshMatViewStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RefreshMatViewStmt()
{
  return PgQuery_RefreshMatViewStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RefreshMatViewStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_RefreshMatViewStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RefreshMatViewStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RefreshMatViewStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RefreshMatViewStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RefreshMatViewStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RefreshMatViewStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RefreshMatViewStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RefreshMatViewStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RefreshMatViewStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ReplicaIdentityStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_NotifyStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_ReplicaIdentityStmt);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_NotifyStmt@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ReplicaIdentityStmt()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ReplicaIdentityStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReplicaIdentityStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ReplicaIdentityStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ReplicaIdentityStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ReplicaIdentityStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReplicaIdentityStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ReplicaIdentityStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReplicaIdentityStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ReplicaIdentityStmt(char *a1, char *a2)
{
  return specialized static PgQuery_ReplicaIdentityStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ReplicaIdentityStmt) & 1;
}

uint64_t PgQuery_AlterSystemStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for PgQuery_AlterSystemStmt(0);
        type metadata accessor for PgQuery_VariableSetStmt(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterSystemStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v14[1] = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v9 = *(void *)(VariableSetStmt - 8);
  MEMORY[0x1F4188790](VariableSetStmt);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  AlterSystemuint64_t Stmt = type metadata accessor for PgQuery_AlterSystemStmt(0);
  outlined init with copy of PgQuery_Alias?(v3 + *(int *)(AlterSystemStmt + 20), (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, VariableSetStmt) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_VariableSetStmt);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_VariableSetStmt);
    if (v4) {
      return result;
    }
  }
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterSystemStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  UnknownStorage.init()();
  uint64_t v4 = a2 + *(int *)(a1 + 20);
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(VariableSetStmt - 8) + 56);

  return v6(v4, 1, 1, VariableSetStmt);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterSystemStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterSystemStmt()
{
  return PgQuery_AlterSystemStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterSystemStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSystemStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterSystemStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterSystemStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterSystemStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSystemStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterSystemStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSystemStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreatePolicyStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v19 = (uint64_t)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xE000000000000000;
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v5, 1, 1, RangeVar);
  uint64_t v7 = (void *)(v1
                + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName);
  *uint64_t v7 = 0;
  v7[1] = 0xE000000000000000;
  uint64_t v8 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive) = 0;
  uint64_t v9 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles) = MEMORY[0x1E4FBC860];
  uint64_t v10 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
  uint64_t v18 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v12(v10, 1, 1, Node);
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck;
  v12(v1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, 1, 1, Node);
  uint64_t v14 = *(void *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(void *)(v1 + 24) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, v5, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v15 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName
                  + 8);
  *uint64_t v7 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName);
  v7[1] = v15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + v8) = *(unsigned char *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive);
  *(void *)(v1 + v9) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v18, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v16 = v19;
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, v19, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?(v16, v13, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_CreatePolicyStmt._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_CreatePolicyStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CreatePolicyStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CreatePolicyStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreatePolicyStmt._StorageClass);
}

void type metadata completion function for PgQuery_CreatePolicyStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_CreatePolicyStmt.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CreatePolicyStmt, (void (*)(void))type metadata accessor for PgQuery_CreatePolicyStmt._StorageClass, PgQuery_CreatePolicyStmt._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CreatePolicyStmt.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CreatePolicyStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_11;
        case 2:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_10;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_11;
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_11;
        case 6:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_10:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_11:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreatePolicyStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v36 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v38 = (char *)&v33 - v6;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v37 = *(void *)(Node - 8);
  uint64_t v7 = MEMORY[0x1F4188790](Node);
  uint64_t v33 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v35 = (uint64_t)&v33 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v14 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(int *)(type metadata accessor for PgQuery_CreatePolicyStmt(0) + 20);
  uint64_t v34 = v2;
  uint64_t v18 = *(void *)(v2 + v17);
  unint64_t v19 = *(void *)(v18 + 24);
  if ((v19 & 0x2000000000000000) != 0) {
    uint64_t v20 = HIBYTE(v19) & 0xF;
  }
  else {
    uint64_t v20 = *(void *)(v18 + 16) & 0xFFFFFFFFFFFFLL;
  }
  swift_retain();
  if (!v20)
  {
    uint64_t v22 = v40;
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  uint64_t v21 = v40;
  dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
  uint64_t v22 = v21;
  if (!v21)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, RangeVar) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      uint64_t v24 = (uint64_t)v38;
      uint64_t v23 = Node;
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_RangeVar);
      uint64_t v24 = (uint64_t)v38;
      uint64_t v23 = Node;
      if (v22) {
        return swift_release();
      }
    }
    unint64_t v25 = *(void *)(v18
                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName
                    + 8);
    uint64_t v26 = HIBYTE(v25) & 0xF;
    if ((v25 & 0x2000000000000000) == 0) {
      uint64_t v26 = *(void *)(v18
    }
                      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName) & 0xFFFFFFFFFFFFLL;
    if (v26)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
      swift_bridgeObjectRelease();
      if (v22) {
        return swift_release();
      }
    }
    if (*(unsigned char *)(v18
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive) == 1)
    {
      dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
      if (v22) {
        return swift_release();
      }
    }
    if (*(void *)(*(void *)(v18
                               + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles)
                   + 16))
    {
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
      swift_bridgeObjectRetain();
      dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
      swift_bridgeObjectRelease();
      if (v22) {
        return swift_release();
      }
    }
    outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v24, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    if (v27(v24, 1, v23) == 1)
    {
      outlined destroy of AnyValue?(v24, &demangling cache variable for type metadata for PgQuery_Node?);
    }
    else
    {
      uint64_t v28 = v24;
      uint64_t v29 = v35;
      outlined init with take of PgQuery_OidList(v28, v35, type metadata accessor for PgQuery_Node);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
      if (v22) {
        return swift_release();
      }
    }
    uint64_t v30 = v36;
    outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, v36, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v27(v30, 1, v23) == 1)
    {
      outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
    }
    else
    {
      uint64_t v31 = v33;
      outlined init with take of PgQuery_OidList(v30, v33, type metadata accessor for PgQuery_Node);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
      if (v22) {
        return swift_release();
      }
    }
    swift_release();
    return UnknownStorage.traverse<A>(visitor:)();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreatePolicyStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CreatePolicyStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreatePolicyStmt()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreatePolicyStmt(uint64_t a1, uint64_t a2)
{
  return PgQuery_CreatePolicyStmt.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreatePolicyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePolicyStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreatePolicyStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreatePolicyStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreatePolicyStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePolicyStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreatePolicyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePolicyStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterPolicyStmt._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xE000000000000000;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v6, 1, 1, RangeVar);
  uint64_t v8 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles) = MEMORY[0x1E4FBC860];
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v11(v9, 1, 1, Node);
  uint64_t v12 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck;
  v11(v1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, 1, 1, Node);
  uint64_t v13 = *(void *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(void *)(v1 + 24) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, v6, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  *(void *)(v1 + v8) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v9, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v12, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_AlterPolicyStmt._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_AlterPolicyStmt._StorageClass()
{
  return type metadata accessor for PgQuery_AlterPolicyStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_AlterPolicyStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterPolicyStmt._StorageClass);
}

void type metadata completion function for PgQuery_AlterPolicyStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_AlterPolicyStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterPolicyStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_AlterPolicyStmt._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v0 + v3) = PgQuery_AlterPolicyStmt._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v6 & 1) == 0)
    {
      switch(v5)
      {
        case 1:
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_8;
        case 2:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_7:
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_8:
          uint64_t v2 = v8;
          break;
        default:
          break;
      }
      uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_AlterPolicyStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v43 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v39 = (uint64_t)&v34 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v40 = *(void *)(Node - 8);
  uint64_t v9 = MEMORY[0x1F4188790](Node);
  uint64_t v35 = (uint64_t)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v36 = (uint64_t)&v34 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v16 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(int *)(type metadata accessor for PgQuery_AlterPolicyStmt(0) + 20);
  uint64_t v37 = v3;
  uint64_t v20 = *(void *)(v3 + v19);
  unint64_t v21 = *(void *)(v20 + 24);
  if ((v21 & 0x2000000000000000) != 0) {
    uint64_t v22 = HIBYTE(v21) & 0xF;
  }
  else {
    uint64_t v22 = *(void *)(v20 + 16) & 0xFFFFFFFFFFFFLL;
  }
  swift_retain();
  uint64_t v41 = a2;
  if (v22)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = v42;
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    uint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v25 = Node;
    if (v23) {
      return swift_release();
    }
  }
  else
  {
    uint64_t v24 = v42;
    uint64_t v25 = Node;
  }
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v14, (uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_RangeVar);
    if (v24) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v20
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v24) {
      return swift_release();
    }
  }
  uint64_t v26 = v39;
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, v39, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  if (v27(v26, 1, v25) == 1)
  {
    outlined destroy of AnyValue?(v26, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v28 = v26;
    uint64_t v29 = v36;
    outlined init with take of PgQuery_OidList(v28, v36, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
    if (v24) {
      return swift_release();
    }
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?(v20+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, v38, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v27(v30, 1, v25) != 1)
  {
    uint64_t v31 = v30;
    uint64_t v32 = v35;
    outlined init with take of PgQuery_OidList(v31, v35, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_Node);
    if (!v24) {
      goto LABEL_20;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterPolicyStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_AlterPolicyStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterPolicyStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterPolicyStmt()
{
  return PgQuery_AlterPolicyStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterPolicyStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlterPolicyStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterPolicyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPolicyStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterPolicyStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterPolicyStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterPolicyStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPolicyStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterPolicyStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPolicyStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateTransformStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_CreateTransformStmt(0);
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
          goto LABEL_12;
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
        case 5:
          type metadata accessor for PgQuery_CreateTransformStmt(0);
          type metadata accessor for PgQuery_ObjectWithArgs(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
LABEL_12:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateTransformStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v38 = (uint64_t)&v34 - v8;
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v39 = *(void *)(ObjectWithArgs - 8);
  uint64_t v40 = ObjectWithArgs;
  uint64_t v10 = MEMORY[0x1F4188790](ObjectWithArgs);
  uint64_t v35 = (uint64_t)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v36 = (uint64_t)&v34 - v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v17 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v18) = *v3;
  uint64_t v42 = a3;
  if (v18 == 1)
  {
    uint64_t v20 = v41;
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    uint64_t v22 = v20;
    if (v20) {
      return result;
    }
  }
  else
  {
    uint64_t v22 = v41;
  }
  Transformuint64_t Stmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
  outlined init with copy of PgQuery_Alias?((uint64_t)&v3[*(int *)(TransformStmt + 28)], (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, TypeName) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v15, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v15, (uint64_t)v19, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_TypeName);
    if (v22) {
      return result;
    }
  }
  unint64_t v24 = *((void *)v3 + 2);
  uint64_t v25 = HIBYTE(v24) & 0xF;
  if ((v24 & 0x2000000000000000) == 0) {
    uint64_t v25 = *((void *)v3 + 1) & 0xFFFFFFFFFFFFLL;
  }
  if (!v25 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v22))
  {
    uint64_t v26 = v38;
    outlined init with copy of PgQuery_Alias?((uint64_t)&v3[*(int *)(TransformStmt + 32)], v38, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    uint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
    if (v27(v26, 1, v40) == 1)
    {
      outlined destroy of AnyValue?(v26, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
      uint64_t v28 = TransformStmt;
    }
    else
    {
      uint64_t v29 = v26;
      uint64_t v30 = v36;
      outlined init with take of PgQuery_OidList(v29, v36, type metadata accessor for PgQuery_ObjectWithArgs);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_ObjectWithArgs);
      uint64_t v28 = TransformStmt;
      if (v22) {
        return result;
      }
    }
    uint64_t v31 = v37;
    outlined init with copy of PgQuery_Alias?((uint64_t)&v3[*(int *)(v28 + 36)], v37, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if (v27(v31, 1, v40) == 1)
    {
      outlined destroy of AnyValue?(v31, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    }
    else
    {
      uint64_t v32 = v31;
      uint64_t v33 = v35;
      outlined init with take of PgQuery_OidList(v32, v35, type metadata accessor for PgQuery_ObjectWithArgs);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_ObjectWithArgs);
      if (v22) {
        return result;
      }
    }
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateTransformStmt@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0xE000000000000000;
  UnknownStorage.init()();
  uint64_t v4 = a2 + a1[7];
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56))(v4, 1, 1, TypeName);
  uint64_t v6 = a2 + a1[8];
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(ObjectWithArgs - 8) + 56);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))v10)((void *)(ObjectWithArgs - 8), v6, 1, 1, ObjectWithArgs);
  uint64_t v8 = a2 + a1[9];

  return v10(v8, 1, 1, ObjectWithArgs);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateTransformStmt()
{
  return 0xD00000000000001CLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateTransformStmt()
{
  return PgQuery_CreateTransformStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateTransformStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTransformStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateTransformStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateTransformStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateTransformStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTransformStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateTransformStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTransformStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateAmStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        break;
      }
LABEL_11:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    dispatch thunk of Decoder.decodeSingularStringField(value:)();
    goto LABEL_11;
  }
  return result;
}

uint64_t PgQuery_CreateAmStmt.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0[2] + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      unint64_t v5 = v0[4];
      uint64_t v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0) {
        uint64_t v6 = v0[3] & 0xFFFFFFFFFFFFLL;
      }
      if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_CreateAmStmt(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateAmStmt@<X0>(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = v1;
  a1[3] = 0;
  a1[4] = 0xE000000000000000;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateAmStmt()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateAmStmt()
{
  return PgQuery_CreateAmStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateAmStmt()
{
  return PgQuery_CreateAmStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateAmStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateAmStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateAmStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateAmStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateAmStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateAmStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateAmStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateAmStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreatePublicationStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreatePublicationStmt.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(*(void *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(*(void *)(v0 + 24) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (*(unsigned char *)(v0 + 32) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_CreatePublicationStmt(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreatePublicationStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = v1;
  *(unsigned char *)(a1 + 32) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreatePublicationStmt()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreatePublicationStmt()
{
  return PgQuery_CreatePublicationStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreatePublicationStmt()
{
  return PgQuery_CreatePublicationStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePublicationStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreatePublicationStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreatePublicationStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreatePublicationStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePublicationStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreatePublicationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePublicationStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterPublicationStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 5:
          lazy protocol witness table accessor for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterPublicationStmt.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(*(void *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(*(void *)(v0 + 24) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (*(unsigned char *)(v0 + 32) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(v0 + 40)
            || (lazy protocol witness table accessor for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction(),
                uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
                !v1))
          {
            type metadata accessor for PgQuery_AlterPublicationStmt(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterPublicationStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 24) = v1;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterPublicationStmt()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterPublicationStmt()
{
  return PgQuery_AlterPublicationStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterPublicationStmt()
{
  return PgQuery_AlterPublicationStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPublicationStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterPublicationStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterPublicationStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterPublicationStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPublicationStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterPublicationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPublicationStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateSubscriptionStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateEventTrigStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_CreateSubscriptionStmt);
}

uint64_t PgQuery_CreateEventTrigStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v7 = v4[1];
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    unint64_t v10 = v4[3];
    uint64_t v11 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0) {
      uint64_t v11 = v4[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v11 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
    {
      if (!*(void *)(v4[4] + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
      {
        if (!*(void *)(v4[5] + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
        {
          a4(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateEventTrigStmt@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  a1[4] = MEMORY[0x1E4FBC860];
  a1[5] = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateSubscriptionStmt()
{
  return 0xD00000000000001FLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSubscriptionStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateSubscriptionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateSubscriptionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateSubscriptionStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSubscriptionStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSubscriptionStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CreateSubscriptionStmt(char *a1, char *a2)
{
  return specialized static PgQuery_CreateSubscriptionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CreateSubscriptionStmt) & 1;
}

uint64_t PgQuery_AlterSubscriptionStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_AlterSubscriptionType and conformance PgQuery_AlterSubscriptionType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_AlterSubscriptionStmt.traverse<A>(visitor:)()
{
  if (!*v0
    || (lazy protocol witness table accessor for type PgQuery_AlterSubscriptionType and conformance PgQuery_AlterSubscriptionType(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    unint64_t v3 = v0[3];
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      unint64_t v5 = v0[5];
      uint64_t v6 = HIBYTE(v5) & 0xF;
      if ((v5 & 0x2000000000000000) == 0) {
        uint64_t v6 = v0[4] & 0xFFFFFFFFFFFFLL;
      }
      if (!v6 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(v0[6] + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(v0[7] + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PgQuery_AlterSubscriptionStmt(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_AlterSubscriptionStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 48) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 56) = v1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterSubscriptionStmt()
{
  return 0xD00000000000001ELL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_AlterSubscriptionStmt()
{
  return PgQuery_AlterSubscriptionStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_AlterSubscriptionStmt()
{
  return PgQuery_AlterSubscriptionStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSubscriptionStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterSubscriptionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterSubscriptionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterSubscriptionStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSubscriptionStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSubscriptionStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_DropSubscriptionStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_DropSubscriptionStmt.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (*(unsigned char *)(v0 + 16) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(v0 + 24)
        || (lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        type metadata accessor for PgQuery_DropSubscriptionStmt(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DropSubscriptionStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DropSubscriptionStmt()
{
  return 0xD00000000000001DLL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DropSubscriptionStmt()
{
  return PgQuery_DropSubscriptionStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DropSubscriptionStmt()
{
  return PgQuery_DropSubscriptionStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropSubscriptionStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropSubscriptionStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropSubscriptionStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DropSubscriptionStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropSubscriptionStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropSubscriptionStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropSubscriptionStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CreateStatsStmt.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_5;
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateStatsStmt.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(*(void *)(v0 + 8) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(void *)(*(void *)(v0 + 16) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
      {
        if (!*(void *)(*(void *)(v0 + 24) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
        {
          unint64_t v3 = *(void *)(v0 + 40);
          uint64_t v4 = HIBYTE(v3) & 0xF;
          if ((v3 & 0x2000000000000000) == 0) {
            uint64_t v4 = *(void *)(v0 + 32) & 0xFFFFFFFFFFFFLL;
          }
          if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
          {
            if (*(unsigned char *)(v0 + 48) != 1
              || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
            {
              type metadata accessor for PgQuery_CreateStatsStmt(0);
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateStatsStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 8) = v1;
  *(void *)(a1 + 16) = v1;
  *(void *)(a1 + 24) = v1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  *(unsigned char *)(a1 + 48) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateStatsStmt()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_RangeVar@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_RangeVar(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateStatsStmt()
{
  return PgQuery_CreateStatsStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateStatsStmt()
{
  return PgQuery_CreateStatsStmt.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStatsStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateStatsStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateStatsStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateStatsStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStatsStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateStatsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStatsStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_AlterCollationStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_List.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_AlterCollationStmt);
}

uint64_t PgQuery_List.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!*(void *)(*(void *)v4 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
  {
    a4(0);
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterCollationStmt()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterCollationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterCollationStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterCollationStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterCollationStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterCollationStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterCollationStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterCollationStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterCollationStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterCollationStmt(uint64_t *a1, uint64_t *a2)
{
  return specialized static PgQuery_AlterCollationStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterCollationStmt) & 1;
}

uint64_t PgQuery_CallStmt._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall, &demangling cache variable for type metadata for PgQuery_FuncCall?, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
}

uint64_t ObjC metadata update function for PgQuery_CallStmt._StorageClass()
{
  return type metadata accessor for PgQuery_CallStmt._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CallStmt._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CallStmt._StorageClass);
}

void type metadata completion function for PgQuery_CallStmt._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_FuncCall?, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_FuncExpr?, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for PgQuery_FuncCall(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FuncCall);
}

uint64_t type metadata accessor for PgQuery_FuncExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FuncExpr);
}

uint64_t PgQuery_CallStmt.decodeMessage<A>(decoder:)()
{
  uint64_t v1 = *(int *)(type metadata accessor for PgQuery_CallStmt(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v2 = *(void *)(v0 + v1);
    type metadata accessor for PgQuery_CallStmt._StorageClass(0);
    uint64_t v3 = swift_allocObject();
    uint64_t v4 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall;
    uint64_t v5 = type metadata accessor for PgQuery_FuncCall(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
    uint64_t v6 = v3
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
    Funcuint64_t Expr = type metadata accessor for PgQuery_FuncExpr(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(FuncExpr - 8) + 56))(v6, 1, 1, FuncExpr);
    uint64_t v8 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v8, v4, &demangling cache variable for type metadata for PgQuery_FuncCall?);
    uint64_t v9 = v2
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
    outlined destroy of AnyValue?(v6, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
    outlined init with copy of PgQuery_Alias?(v9, v6, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
    swift_release();
    *(void *)(v0 + v1) = v3;
    swift_release();
  }
  swift_retain();
  uint64_t v10 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v13)
  {
    while (1)
    {
      if (v11) {
        return swift_release();
      }
      if (v10 == 1) {
        break;
      }
      if (v10 == 2)
      {
        type metadata accessor for PgQuery_FuncExpr(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);
        goto LABEL_7;
      }
LABEL_8:
      uint64_t v10 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_FuncCall(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);
LABEL_7:
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t PgQuery_CallStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FuncExpr?);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Funcuint64_t Expr = type metadata accessor for PgQuery_FuncExpr(0);
  uint64_t v23 = *(void *)(FuncExpr - 8);
  uint64_t v24 = FuncExpr;
  MEMORY[0x1F4188790](FuncExpr);
  uint64_t v21 = (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FuncCall?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PgQuery_FuncCall(0);
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(int *)(type metadata accessor for PgQuery_CallStmt(0) + 20);
  uint64_t v22 = v3;
  uint64_t v18 = *(void *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v16, type metadata accessor for PgQuery_FuncCall);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_FuncCall);
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v24) != 1)
  {
    uint64_t v19 = v21;
    outlined init with take of PgQuery_OidList((uint64_t)v7, v21, type metadata accessor for PgQuery_FuncExpr);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v19, type metadata accessor for PgQuery_FuncExpr);
    if (!v4) {
      goto LABEL_8;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
LABEL_8:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_CallStmt.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  Funcuint64_t Expr = type metadata accessor for PgQuery_FuncExpr(0);
  uint64_t v37 = *(void *)(FuncExpr - 8);
  uint64_t v38 = FuncExpr;
  MEMORY[0x1F4188790](FuncExpr);
  uint64_t v34 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FuncExpr?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v35 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_FuncExpr?, PgQuery_FuncExpr?));
  MEMORY[0x1F4188790](v36);
  uint64_t v39 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PgQuery_FuncCall(0);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FuncCall?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_FuncCall?, PgQuery_FuncCall?));
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall;
  uint64_t v21 = (uint64_t)&v19[*(int *)(v17 + 56)];
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  outlined init with copy of PgQuery_Alias?(v20, v21, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v22((uint64_t)v19, 1, v9) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v19, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_FuncCall?);
    if (v22(v21, 1, v9) != 1)
    {
      outlined init with take of PgQuery_OidList(v21, (uint64_t)v12, type metadata accessor for PgQuery_FuncCall);
      swift_retain();
      swift_retain();
      char v24 = specialized static PgQuery_FuncCall.== infix(_:_:)((uint64_t)v15, (uint64_t)v12);
      outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_FuncCall);
      outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_FuncCall);
      outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_FuncCall?);
      if (v24) {
        goto LABEL_9;
      }
LABEL_7:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_FuncCall);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for (PgQuery_FuncCall?, PgQuery_FuncCall?));
    goto LABEL_7;
  }
  unsigned int v23 = v22(v21, 1, v9);
  swift_retain();
  swift_retain();
  if (v23 != 1) {
    goto LABEL_6;
  }
  outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_FuncCall?);
LABEL_9:
  uint64_t v25 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
  uint64_t v26 = v39;
  uint64_t v27 = v39 + *(int *)(v36 + 48);
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, v39, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  outlined init with copy of PgQuery_Alias?(v25, v27, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  uint64_t v28 = v38;
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
  if (v29(v26, 1, v38) == 1)
  {
    swift_release();
    swift_release();
    if (v29(v27, 1, v28) == 1)
    {
      outlined destroy of AnyValue?(v26, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
      return 1;
    }
    goto LABEL_14;
  }
  uint64_t v30 = v35;
  outlined init with copy of PgQuery_Alias?(v26, v35, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  if (v29(v27, 1, v28) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_FuncExpr);
LABEL_14:
    outlined destroy of AnyValue?(v26, &demangling cache variable for type metadata for (PgQuery_FuncExpr?, PgQuery_FuncExpr?));
    return 0;
  }
  uint64_t v32 = v34;
  outlined init with take of PgQuery_OidList(v27, v34, type metadata accessor for PgQuery_FuncExpr);
  char v33 = specialized static PgQuery_FuncExpr.== infix(_:_:)(v30, v32);
  swift_release();
  swift_release();
  outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_FuncExpr);
  outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_FuncExpr);
  outlined destroy of AnyValue?(v26, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  return (v33 & 1) != 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CallStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CallStmt._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CallStmt()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CallStmt()
{
  return PgQuery_CallStmt.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CallStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CallStmt.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CallStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CallStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CallStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CallStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CallStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CallStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CallStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CallStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CallStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_CallStmt, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_CallStmt.== infix(_:_:)) & 1;
}

uint64_t PgQuery_AlterStatsStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_LockStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_AlterStatsStmt);
}

uint64_t PgQuery_LockStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!*(void *)(*(void *)v4 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
  {
    if (!*(_DWORD *)(v4 + 8) || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v5))
    {
      if (*(unsigned char *)(v4 + 12) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v5))
      {
        a4(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_LockStmt@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AlterStatsStmt()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterStatsStmt);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterStatsStmt@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterStatsStmt._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AlterStatsStmt(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterStatsStmt);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterStatsStmt);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterStatsStmt(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_AlterStatsStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AlterStatsStmt) & 1;
}

uint64_t PgQuery_A_Expr._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_A_Expr._StorageClass()
{
  return type metadata accessor for PgQuery_A_Expr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_A_Expr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Expr._StorageClass);
}

void type metadata completion function for PgQuery_A_Expr._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_A_Expr.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_A_Expr(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_A_Expr._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_A_Expr._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_A_Expr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v28 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  uint64_t v13 = MEMORY[0x1F4188790](Node);
  uint64_t v26 = (uint64_t)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v27 = (uint64_t)&v25 - v15;
  uint64_t v16 = *(void *)(v3 + *(int *)(type metadata accessor for PgQuery_A_Expr(0) + 20));
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v25 = v3;
  uint64_t v31 = a3;
  if (v17)
  {
    char v18 = *(unsigned char *)(v16 + 24);
    uint64_t v29 = v17;
    char v30 = v18;
    lazy protocol witness table accessor for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
  }
  if (*(void *)(*(void *)(v16 + 32) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v16 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lexpr, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v19(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v20 = v27;
    outlined init with take of PgQuery_OidList((uint64_t)v10, v27, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v21 = v28;
  outlined init with copy of PgQuery_Alias?(v16 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rexpr, v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19((char *)v21, 1, Node) != 1)
  {
    uint64_t v22 = v21;
    uint64_t v23 = v26;
    outlined init with take of PgQuery_OidList(v22, v26, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
    if (!v4) {
      goto LABEL_13;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v21, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_13:
  if (*(_DWORD *)(v16
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_A_Expr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, one-time initialization token for defaultInstance, &static PgQuery_A_Expr._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_A_Expr()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_A_Expr()
{
  return PgQuery_A_Expr.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_A_Expr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_A_Expr.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_A_Expr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Expr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_Expr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_Expr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_A_Expr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Expr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_Expr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Expr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ColumnRef.decodeMessage<A>(decoder:)()
{
  return PgQuery_ColumnRef.decodeMessage<A>(decoder:)();
}

{
  uint64_t v0;
  uint64_t result;
  char v2;

  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ColumnRef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ColumnRef.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_ColumnRef);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ColumnRef@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(_DWORD *)(a1 + 8) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ColumnRef()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ColumnRef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnRef);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ColumnRef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ColumnRef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ColumnRef(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnRef);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ColumnRef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnRef);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ColumnRef(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_A_ArrayExpr.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ColumnRef) & 1;
}

uint64_t PgQuery_ParamRef.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ParamRef.traverse<A>(visitor:)()
{
  if (!*v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!v0[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for PgQuery_ParamRef(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ParamRef@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ParamRef()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ParamRef()
{
  return PgQuery_ParamRef.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ParamRef()
{
  return PgQuery_ParamRef.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ParamRef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ParamRef);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ParamRef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ParamRef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ParamRef(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ParamRef);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ParamRef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ParamRef);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_A_Const._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_A_Const._StorageClass()
{
  return type metadata accessor for PgQuery_A_Const._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_A_Const._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Const._StorageClass);
}

void type metadata completion function for PgQuery_A_Const._StorageClass()
{
}

uint64_t PgQuery_A_Const.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for PgQuery_A_Const(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v4 = *(void *)(v0 + v3);
    type metadata accessor for PgQuery_A_Const._StorageClass(0);
    uint64_t v5 = swift_allocObject();
    uint64_t v6 = v5 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val;
    uint64_t Node = type metadata accessor for PgQuery_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v6, 1, 1, Node);
    uint64_t v13 = v1;
    uint64_t v8 = OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
    *(_DWORD *)(v5
              + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
    uint64_t v9 = v4 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val;
    swift_retain();
    outlined assign with copy of PgQuery_Node?(v9, v6, &demangling cache variable for type metadata for PgQuery_Node?);
    LODWORD(v6) = *(_DWORD *)(v4
                            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
    swift_release();
    *(_DWORD *)(v5 + v8) = v6;
    uint64_t v2 = v13;
    *(void *)(v0 + v3) = v5;
    swift_release();
  }
  swift_retain();
  uint64_t v10 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v2)
  {
    while ((v11 & 1) == 0)
    {
      if (v10 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (v10 == 2)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      uint64_t v10 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_A_Const.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  v14[3] = a2;
  v14[1] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v8 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for PgQuery_A_Const(0) + 20);
  v14[0] = v2;
  uint64_t v12 = *(void *)(v2 + v11);
  outlined init with copy of PgQuery_Alias?(v12 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
    if (v3) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v3) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_A_Const.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a2 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val;
  uint64_t v16 = (uint64_t)&v14[*(int *)(v12 + 56)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v15, v16, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v17((uint64_t)v14, 1, Node) == 1)
  {
    int v18 = v17(v16, 1, Node);
    swift_retain();
    swift_retain();
    if (v18 == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
      int v20 = *(_DWORD *)(a1
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      int v21 = *(_DWORD *)(a2
                      + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      return v20 == v21;
    }
    goto LABEL_6;
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v14, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v17(v16, 1, Node) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_9;
  }
  outlined init with take of PgQuery_OidList(v16, (uint64_t)v7, type metadata accessor for PgQuery_Node);
  swift_retain();
  swift_retain();
  char v19 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v10, (uint64_t)v7, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19) {
    goto LABEL_8;
  }
LABEL_9:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_A_Const@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_A_Const._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_A_Const()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_A_Const()
{
  return PgQuery_A_Const.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_A_Const(uint64_t a1, uint64_t a2)
{
  return PgQuery_A_Const.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_A_Const(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Const);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_Const@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_Const._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_A_Const(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Const);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_Const(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Const);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_A_Const(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_A_Const, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_A_Const.== infix(_:_:)) & 1;
}

uint64_t PgQuery_FuncCall._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggFilter, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__over, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_FuncCall._StorageClass()
{
  return type metadata accessor for PgQuery_FuncCall._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_FuncCall._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FuncCall._StorageClass);
}

void type metadata completion function for PgQuery_FuncCall._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_WindowDef?, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for PgQuery_WindowDef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WindowDef);
}

uint64_t PgQuery_FuncCall.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_FuncCall, (void (*)(void))type metadata accessor for PgQuery_FuncCall._StorageClass, (uint64_t (*)(uint64_t))specialized PgQuery_FuncCall._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_FuncCall.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_FuncCall.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_9;
        case 5:
        case 6:
        case 7:
        case 8:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 9:
          type metadata accessor for PgQuery_WindowDef(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);
LABEL_9:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 10:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_FuncCall.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WindowDef?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v21 = (uint64_t)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  uint64_t v20 = *(void *)(WindowDef - 8);
  MEMORY[0x1F4188790](WindowDef);
  uint64_t v19 = (uint64_t)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v23 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for PgQuery_FuncCall(0) + 20);
  uint64_t v18 = v0;
  uint64_t v12 = *(void **)(v0 + v11);
  if (*(void *)(v12[2] + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  if (*(void *)(v12[3] + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1) {
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v12[4] + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v12+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggFilter, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v10, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
    if (v1) {
      return swift_release();
    }
  }
  if (*((unsigned char *)v12
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggWithinGroup) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*((unsigned char *)v12
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggStar) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*((unsigned char *)v12
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggDistinct) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*((unsigned char *)v12
       + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcVariadic) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  uint64_t v14 = v21;
  outlined init with copy of PgQuery_Alias?((uint64_t)v12+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__over, v21, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v14, 1, WindowDef) == 1)
  {
    outlined destroy of AnyValue?(v14, &demangling cache variable for type metadata for PgQuery_WindowDef?);
  }
  else
  {
    uint64_t v15 = v14;
    uint64_t v16 = v19;
    outlined init with take of PgQuery_OidList(v15, v19, type metadata accessor for PgQuery_WindowDef);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v16, type metadata accessor for PgQuery_WindowDef);
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)((char *)v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FuncCall@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_FuncCall._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FuncCall()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_FuncCall()
{
  return PgQuery_FuncCall.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FuncCall(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FuncCall@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FuncCall._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FuncCall(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FuncCall(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_A_Star()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_A_Star(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Star);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_Star@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_Star._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_A_Star(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Star);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_Star(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Star);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_Null(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UnknownStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v14 - v9, a1, v4);
  v11(v8, a2, v4);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v8, v4);
  v12(v10, v4);
  return a2 & 1;
}

uint64_t PgQuery_A_Indices._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lidx, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_A_Indices._StorageClass()
{
  return type metadata accessor for PgQuery_A_Indices._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_A_Indices._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Indices._StorageClass);
}

void type metadata completion function for PgQuery_A_Indices._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_A_Indices.decodeMessage<A>(decoder:)()
{
  specialized PgQuery_A_Indices._uniqueStorage()();
  type metadata accessor for PgQuery_A_Indices(0);
  swift_retain();
  uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (v1 == 2 || v1 == 3)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_A_Indices.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v29 = (uint64_t)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v12 = *(void *)(Node - 8);
  uint64_t v13 = MEMORY[0x1F4188790](Node);
  uint64_t v27 = (uint64_t)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v26 - v15;
  uint64_t v17 = *(void *)(v3 + *(int *)(type metadata accessor for PgQuery_A_Indices(0) + 20));
  int v18 = *(unsigned __int8 *)(v17 + 16);
  swift_retain();
  uint64_t v28 = v3;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  if (v18 == 1)
  {
    uint64_t v19 = v32;
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    uint64_t v20 = v19;
    if (v19) {
      return swift_release();
    }
  }
  else
  {
    uint64_t v20 = v32;
  }
  outlined init with copy of PgQuery_Alias?(v17 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lidx, (uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v21(v10, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v10, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v10, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v20) {
      return swift_release();
    }
  }
  uint64_t v22 = v29;
  outlined init with copy of PgQuery_Alias?(v17 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v21((char *)v22, 1, Node) != 1)
  {
    uint64_t v23 = v22;
    uint64_t v24 = v27;
    outlined init with take of PgQuery_OidList(v23, v27, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v24, type metadata accessor for PgQuery_Node);
    if (!v20) {
      goto LABEL_12;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v22, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_12:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_A_Indices.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  MEMORY[0x1F4188790](v15);
  int v18 = (char *)&v34 - v16;
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
    return 0;
  }
  uint64_t v35 = v11;
  uint64_t v36 = v17;
  uint64_t v37 = v7;
  uint64_t v19 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lidx;
  uint64_t v20 = (uint64_t)&v18[*(int *)(v14 + 48)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lidx, (uint64_t)&v34 - v16, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v19, v20, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v18, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v18, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v21(v20, 1, Node) != 1)
    {
      uint64_t v34 = v21;
      uint64_t v25 = v20;
      uint64_t v24 = (uint64_t)v37;
      outlined init with take of PgQuery_OidList(v25, (uint64_t)v37, type metadata accessor for PgQuery_Node);
      swift_retain();
      swift_retain();
      char v26 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v13, v24, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias(v24, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      if (v26) {
        goto LABEL_10;
      }
LABEL_8:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v13, type metadata accessor for PgQuery_Node);
LABEL_7:
    outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_8;
  }
  uint64_t v22 = v21;
  unsigned int v23 = v21(v20, 1, Node);
  swift_retain();
  swift_retain();
  if (v23 != 1) {
    goto LABEL_7;
  }
  uint64_t v34 = v22;
  outlined destroy of AnyValue?((uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v24 = (uint64_t)v37;
LABEL_10:
  uint64_t v27 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx;
  uint64_t v28 = v36;
  uint64_t v29 = v36 + *(int *)(v14 + 48);
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v27, v29, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v30 = v34;
  if (v34(v28, 1, Node) == 1)
  {
    swift_release();
    swift_release();
    if (v30(v29, 1, Node) == 1)
    {
      outlined destroy of AnyValue?(v28, &demangling cache variable for type metadata for PgQuery_Node?);
      return 1;
    }
    goto LABEL_15;
  }
  uint64_t v31 = (uint64_t)v35;
  outlined init with copy of PgQuery_Alias?(v28, (uint64_t)v35, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v30(v29, 1, Node) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
LABEL_15:
    outlined destroy of AnyValue?(v28, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    return 0;
  }
  outlined init with take of PgQuery_OidList(v29, v24, type metadata accessor for PgQuery_Node);
  char v33 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v31, v24, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
  swift_release();
  swift_release();
  outlined destroy of PgQuery_Alias(v24, type metadata accessor for PgQuery_Node);
  outlined destroy of PgQuery_Alias(v31, type metadata accessor for PgQuery_Node);
  outlined destroy of AnyValue?(v28, &demangling cache variable for type metadata for PgQuery_Node?);
  return (v33 & 1) != 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_A_Indices@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_A_Indices._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_A_Indices()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_A_Indices()
{
  return PgQuery_A_Indices.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_A_Indices(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_A_Indices.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_A_Indices(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indices);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_Indices@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_Indices._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_A_Indices(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indices);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_Indices(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indices and conformance PgQuery_A_Indices, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indices);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_A_Indices(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_A_Indices, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_A_Indices.== infix(_:_:)) & 1;
}

uint64_t PgQuery_A_Indirection._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg);
}

uint64_t ObjC metadata update function for PgQuery_A_Indirection._StorageClass()
{
  return type metadata accessor for PgQuery_A_Indirection._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_A_Indirection._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Indirection._StorageClass);
}

uint64_t PgQuery_A_Indirection.decodeMessage<A>(decoder:)()
{
  specialized PgQuery_AlternativeSubPlan._uniqueStorage()(type metadata accessor for PgQuery_A_Indirection, (void (*)(void))type metadata accessor for PgQuery_A_Indirection._StorageClass, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indirection);
  type metadata accessor for PgQuery_A_Indirection(0);
  swift_retain();
  uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (v1 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_A_Indirection.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_AlternativeSubPlan.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PgQuery_A_Indirection, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indirection);
}

uint64_t PgQuery_AlternativeSubPlan.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void *a5, void *a6)
{
  uint64_t v22 = a6;
  uint64_t v23 = a1;
  uint64_t v10 = v6;
  uint64_t v25 = a3;
  uint64_t v24 = a2;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v15 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(int *)(a4(0) + 20);
  uint64_t v21 = v10;
  uint64_t v19 = *(void *)(v10 + v18);
  outlined init with copy of PgQuery_Alias?(v19 + *a5, (uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v13, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v13, (uint64_t)v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_Node);
    if (v7) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v19 + *v22) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_A_Indirection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_A_Indirection._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_A_Indirection()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_A_Indirection()
{
  return PgQuery_A_Indirection.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_A_Indirection(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indirection);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_Indirection@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_Indirection._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_A_Indirection(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indirection);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_Indirection(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Indirection and conformance PgQuery_A_Indirection, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Indirection);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_A_Indirection(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_AlternativeSubPlan.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_A_Indirection, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_A_IndirectionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indirection) & 1;
}

uint64_t PgQuery_A_ArrayExpr.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ColumnRef.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_A_ArrayExpr);
}

uint64_t PgQuery_ColumnRef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!*(void *)(*(void *)v4 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
  {
    if (!v4[2] || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_A_ArrayExpr()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_ArrayExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_ArrayExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_ArrayExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_A_ArrayExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_ArrayExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_ArrayExpr and conformance PgQuery_A_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_ArrayExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_A_ArrayExpr(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_A_ArrayExpr.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_A_ArrayExpr) & 1;
}

uint64_t PgQuery_ResTarget._StorageClass.__deallocating_deinit()
{
  return PgQuery_PrepareStmt._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val);
}

uint64_t PgQuery_PrepareStmt._StorageClass.__deallocating_deinit(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v1 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v3 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v3, v4);
}

uint64_t ObjC metadata update function for PgQuery_ResTarget._StorageClass()
{
  return type metadata accessor for PgQuery_ResTarget._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ResTarget._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ResTarget._StorageClass);
}

void type metadata completion function for PgQuery_ResTarget._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_ResTarget.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_ResTarget(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_ResTarget._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = (void *)swift_retain();
    uint64_t v6 = specialized PgQuery_ResTarget._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 4:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_ResTarget.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v15 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v14 = (uint64_t)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(int *)(type metadata accessor for PgQuery_ResTarget(0) + 20);
  uint64_t v13 = v0;
  char v8 = *(void **)(v0 + v7);
  unint64_t v9 = v8[3];
  if ((v9 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(v9) & 0xF;
  }
  else {
    uint64_t v10 = v8[2] & 0xFFFFFFFFFFFFLL;
  }
  swift_retain();
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  if (*(void *)(v8[4] + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v8+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v4, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v11 = v14;
    outlined init with take of PgQuery_OidList((uint64_t)v4, v14, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v11, type metadata accessor for PgQuery_Node);
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)((char *)v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ResTarget@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ResTarget._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ResTarget()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_ResTarget()
{
  return PgQuery_ResTarget.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ResTarget()
{
  return PgQuery_ResTarget.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ResTarget(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, (void (*)(uint64_t))type metadata accessor for PgQuery_ResTarget);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ResTarget@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ResTarget._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ResTarget(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, (void (*)(uint64_t))type metadata accessor for PgQuery_ResTarget);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ResTarget(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ResTarget and conformance PgQuery_ResTarget, (void (*)(uint64_t))type metadata accessor for PgQuery_ResTarget);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_MultiAssignRef._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__source, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_MultiAssignRef._StorageClass()
{
  return type metadata accessor for PgQuery_MultiAssignRef._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_MultiAssignRef._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_MultiAssignRef._StorageClass);
}

uint64_t PgQuery_MultiAssignRef.decodeMessage<A>(decoder:)()
{
  specialized PgQuery_MultiAssignRef._uniqueStorage()();
  type metadata accessor for PgQuery_MultiAssignRef(0);
  swift_retain();
  uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (v1 == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      else if (v1 == 2 || v1 == 3)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_MultiAssignRef.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_MultiAssignRef.traverse<A>(visitor:)(a1, a2, a3, type metadata accessor for PgQuery_MultiAssignRef, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__source, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colno, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ncolumns);
}

uint64_t protocol witness for Message.init() in conformance PgQuery_MultiAssignRef@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_MultiAssignRef._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_MultiAssignRef()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_MultiAssignRef()
{
  return PgQuery_MultiAssignRef.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_MultiAssignRef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, (void (*)(uint64_t))type metadata accessor for PgQuery_MultiAssignRef);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_MultiAssignRef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_MultiAssignRef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_MultiAssignRef(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, (void (*)(uint64_t))type metadata accessor for PgQuery_MultiAssignRef);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_MultiAssignRef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MultiAssignRef and conformance PgQuery_MultiAssignRef, (void (*)(uint64_t))type metadata accessor for PgQuery_MultiAssignRef);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_MultiAssignRef(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_MultiAssignRef.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_MultiAssignRef, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__source, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colno, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ncolumns) & 1;
}

uint64_t PgQuery_TypeCast._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, &demangling cache variable for type metadata for PgQuery_TypeName?);
}

uint64_t ObjC metadata update function for PgQuery_TypeCast._StorageClass()
{
  return type metadata accessor for PgQuery_TypeCast._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_TypeCast._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TypeCast._StorageClass);
}

void type metadata completion function for PgQuery_TypeCast._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_TypeCast.decodeMessage<A>(decoder:)()
{
  specialized PgQuery_TypeCast._uniqueStorage()();
  type metadata accessor for PgQuery_TypeCast(0);
  swift_retain();
  uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return swift_release();
      }
      if (v1 == 1) {
        break;
      }
      if (v1 == 2)
      {
        type metadata accessor for PgQuery_TypeName(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
        goto LABEL_5;
      }
      if (v1 == 3) {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
LABEL_11:
      uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_5:
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
    goto LABEL_11;
  }
  return swift_release();
}

uint64_t PgQuery_TypeCast.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v23 = *(void *)(TypeName - 8);
  uint64_t v24 = TypeName;
  MEMORY[0x1F4188790](TypeName);
  uint64_t v22 = (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v16 = (char *)&v21 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(int *)(type metadata accessor for PgQuery_TypeCast(0) + 20);
  uint64_t v21 = v3;
  uint64_t v18 = *(void *)(v3 + v17);
  outlined init with copy of PgQuery_Alias?(v18 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v7, 1, v24) != 1)
  {
    uint64_t v19 = v22;
    outlined init with take of PgQuery_OidList((uint64_t)v7, v22, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v19, type metadata accessor for PgQuery_TypeName);
    if (!v4) {
      goto LABEL_7;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_7:
  if (*(_DWORD *)(v18
                 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_TypeCast.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v41 = *(void *)(TypeName - 8);
  uint64_t v42 = TypeName;
  MEMORY[0x1F4188790](TypeName);
  uint64_t v38 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v39 = (uint64_t)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1F4188790](v40);
  uint64_t v43 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = a2 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  uint64_t v21 = (uint64_t)&v19[*(int *)(v17 + 56)];
  outlined init with copy of PgQuery_Alias?(a1 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v20, v21, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (v22((uint64_t)v19, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v19, (uint64_t)v15, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v22(v21, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v21, (uint64_t)v12, type metadata accessor for PgQuery_Node);
      uint64_t v25 = a1;
      swift_retain();
      uint64_t v24 = a2;
      swift_retain();
      char v26 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v15, (uint64_t)v12, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
      if ((v26 & 1) == 0) {
        goto LABEL_16;
      }
      goto LABEL_8;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
LABEL_6:
    outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_16;
  }
  unsigned int v23 = v22(v21, 1, Node);
  swift_retain();
  swift_retain();
  uint64_t v24 = a2;
  uint64_t v25 = a1;
  if (v23 != 1) {
    goto LABEL_6;
  }
  outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_8:
  uint64_t v27 = v24
      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  uint64_t v28 = v43;
  uint64_t v29 = v43 + *(int *)(v40 + 48);
  outlined init with copy of PgQuery_Alias?(v25+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, v43, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined init with copy of PgQuery_Alias?(v27, v29, &demangling cache variable for type metadata for PgQuery_TypeName?);
  uint64_t v30 = v42;
  uint64_t v31 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
  if (v31(v28, 1, v42) == 1)
  {
    if (v31(v29, 1, v30) == 1)
    {
      outlined destroy of AnyValue?(v28, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_15:
      int v35 = *(_DWORD *)(v25
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      int v36 = *(_DWORD *)(v24
                      + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      swift_release();
      return v35 == v36;
    }
    goto LABEL_13;
  }
  uint64_t v32 = v39;
  outlined init with copy of PgQuery_Alias?(v28, v39, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v31(v29, 1, v30) == 1)
  {
    outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_TypeName);
LABEL_13:
    outlined destroy of AnyValue?(v28, &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
    goto LABEL_16;
  }
  uint64_t v33 = v38;
  outlined init with take of PgQuery_OidList(v29, v38, type metadata accessor for PgQuery_TypeName);
  char v34 = specialized static PgQuery_TypeName.== infix(_:_:)(v32, v33);
  outlined destroy of PgQuery_Alias(v33, type metadata accessor for PgQuery_TypeName);
  outlined destroy of PgQuery_Alias(v32, type metadata accessor for PgQuery_TypeName);
  outlined destroy of AnyValue?(v28, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if (v34) {
    goto LABEL_15;
  }
LABEL_16:
  swift_release();
  swift_release();
  return 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TypeCast@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_TypeCast._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TypeCast()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TypeCast()
{
  return PgQuery_TypeCast.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TypeCast(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TypeCast.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TypeCast(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeCast);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TypeCast@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TypeCast._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TypeCast(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeCast);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TypeCast(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeCast and conformance PgQuery_TypeCast, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeCast);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_TypeCast(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_TypeCast, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_TypeCast.== infix(_:_:)) & 1;
}

uint64_t PgQuery_CollateClause._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg);
}

uint64_t ObjC metadata update function for PgQuery_CollateClause._StorageClass()
{
  return type metadata accessor for PgQuery_CollateClause._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CollateClause._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CollateClause._StorageClass);
}

void type metadata completion function for PgQuery_CollateClause._StorageClass()
{
}

uint64_t PgQuery_CollateClause.decodeMessage<A>(decoder:)()
{
  uint64_t v1 = v0;
  specialized PgQuery_CollateClause._uniqueStorage()();
  type metadata accessor for PgQuery_CollateClause(0);
  swift_retain();
  uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v3) {
        return swift_release();
      }
      if (v2 == 1) {
        break;
      }
      if (v2 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v5 = v1;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (v2 == 3)
      {
        uint64_t v5 = v1;
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    uint64_t v5 = v1;
    dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
    uint64_t v1 = v5;
    goto LABEL_6;
  }
  return swift_release();
}

uint64_t PgQuery_CollateClause.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  v14[3] = a2;
  v14[1] = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v8 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for PgQuery_CollateClause(0) + 20);
  v14[0] = v2;
  uint64_t v12 = *(void *)(v2 + v11);
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v6, (uint64_t)v10, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v10, type metadata accessor for PgQuery_Node);
    if (v3) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v12
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v3) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v3) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CollateClause@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CollateClause._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CollateClause()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CollateClause()
{
  return PgQuery_CollateClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CollateClause(uint64_t a1, uint64_t a2)
{
  return PgQuery_CollateClause.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CollateClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CollateClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CollateClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CollateClause(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CollateClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_SortBy._StorageClass.__deallocating_deinit()
{
  return PgQuery_FuncExpr._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node);
}

uint64_t ObjC metadata update function for PgQuery_SortBy._StorageClass()
{
  return type metadata accessor for PgQuery_SortBy._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_SortBy._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SortBy._StorageClass);
}

void type metadata completion function for PgQuery_SortBy._StorageClass()
{
}

uint64_t PgQuery_SortBy.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_SortBy(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_SortBy._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_SortBy._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 2:
          lazy protocol witness table accessor for type PgQuery_SortByDir and conformance PgQuery_SortByDir();
          goto LABEL_7;
        case 3:
          lazy protocol witness table accessor for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls();
LABEL_7:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_8:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_SortBy.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v9 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_SortBy(0) + 20);
  uint64_t v18 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  outlined init with copy of PgQuery_Alias?(v13 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir))
  {
    char v14 = *(unsigned char *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir
                   + 8);
    uint64_t v19 = *(void *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir);
    char v20 = v14;
    lazy protocol witness table accessor for type PgQuery_SortByDir and conformance PgQuery_SortByDir();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls))
  {
    char v15 = *(unsigned char *)(v13
                   + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls
                   + 8);
    uint64_t v19 = *(void *)(v13
                    + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls);
    char v20 = v15;
    lazy protocol witness table accessor for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v13
                             + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOp)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SortBy@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_SortBy._StorageClass.defaultInstance, a2);
}

uint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SortBy()
{
  return 0x79726575715F6770;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_SortBy()
{
  return PgQuery_SortBy.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SortBy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SortBy.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SortBy(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, (void (*)(uint64_t))type metadata accessor for PgQuery_SortBy);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SortBy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SortBy._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SortBy(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, (void (*)(uint64_t))type metadata accessor for PgQuery_SortBy);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SortBy(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortBy and conformance PgQuery_SortBy, (void (*)(uint64_t))type metadata accessor for PgQuery_SortBy);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_WindowDef._StorageClass.__deallocating_deinit()
{
  return PgQuery_WindowDef._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset, &OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset);
}

uint64_t ObjC metadata update function for PgQuery_WindowDef._StorageClass()
{
  return type metadata accessor for PgQuery_WindowDef._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_WindowDef._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WindowDef._StorageClass);
}

void type metadata completion function for PgQuery_WindowDef._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_WindowDef.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_WindowDef, (void (*)(void))type metadata accessor for PgQuery_WindowDef._StorageClass, specialized PgQuery_WindowDef._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_WindowDef.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_WindowDef.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 5:
        case 8:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 6:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_WindowDef.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v27 = (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v24 - v5;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v28 = *(void *)(Node - 8);
  uint64_t v8 = MEMORY[0x1F4188790](Node);
  uint64_t v25 = (uint64_t)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v26 = (uint64_t)&v24 - v10;
  uint64_t v11 = *(int *)(type metadata accessor for PgQuery_WindowDef(0) + 20);
  uint64_t v24 = v0;
  uint64_t v12 = *(void *)(v0 + v11);
  unint64_t v13 = *(void *)(v12 + 24);
  if ((v13 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(v13) & 0xF;
  }
  else {
    uint64_t v14 = *(void *)(v12 + 16) & 0xFFFFFFFFFFFFLL;
  }
  swift_retain();
  if (v14)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = Node;
  unint64_t v16 = *(void *)(v12 + 40);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v17 = *(void *)(v12 + 32) & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v12 + 48) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v12 + 56) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v12 + 64))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v28 += 48;
  if (v18(v6, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v19 = v26;
    outlined init with take of PgQuery_OidList((uint64_t)v6, v26, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v19, type metadata accessor for PgQuery_Node);
    if (v1) {
      return swift_release();
    }
  }
  uint64_t v20 = v27;
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v18((char *)v20, 1, v15) == 1)
  {
    outlined destroy of AnyValue?(v20, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v21 = v20;
    uint64_t v22 = v25;
    outlined init with take of PgQuery_OidList(v21, v25, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_Node);
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_WindowDef@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_WindowDef._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_WindowDef()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_WindowDef()
{
  return PgQuery_WindowDef.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_WindowDef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_WindowDef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_WindowDef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_WindowDef(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_WindowDef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowDef and conformance PgQuery_WindowDef, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowDef);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RangeSubselect._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, &demangling cache variable for type metadata for PgQuery_Alias?);
}

uint64_t ObjC metadata update function for PgQuery_RangeSubselect._StorageClass()
{
  return type metadata accessor for PgQuery_RangeSubselect._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RangeSubselect._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeSubselect._StorageClass);
}

void type metadata completion function for PgQuery_RangeSubselect._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Alias?, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_RangeSubselect.decodeMessage<A>(decoder:)()
{
  specialized PgQuery_RangeSubselect._uniqueStorage()();
  type metadata accessor for PgQuery_RangeSubselect(0);
  swift_retain();
  uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return swift_release();
      }
      switch(v1)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_12;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          break;
        case 3:
          type metadata accessor for PgQuery_Alias(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
          break;
        default:
          goto LABEL_12;
      }
      dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_12:
      uint64_t v1 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_RangeSubselect.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v4;
  uint64_t v30 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v27 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v26 = *(void *)(Alias - 8);
  MEMORY[0x1F4188790](Alias);
  uint64_t v24 = (uint64_t)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v14 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  unint64_t v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(int *)(type metadata accessor for PgQuery_RangeSubselect(0) + 20);
  uint64_t v25 = v3;
  uint64_t v18 = *(void *)(v3 + v17);
  int v19 = *(unsigned __int8 *)(v18 + 16);
  swift_retain();
  uint64_t v29 = a3;
  if (v19 == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v5) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v12, (uint64_t)v16, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
    if (v5) {
      return swift_release();
    }
  }
  uint64_t v20 = v27;
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v27, &demangling cache variable for type metadata for PgQuery_Alias?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v20, 1, Alias) != 1)
  {
    uint64_t v21 = v20;
    uint64_t v22 = v24;
    outlined init with take of PgQuery_OidList(v21, v24, type metadata accessor for PgQuery_Alias);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_Alias);
    if (!v5) {
      goto LABEL_10;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v20, &demangling cache variable for type metadata for PgQuery_Alias?);
LABEL_10:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_RangeSubselect.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v45 = *(void *)(Alias - 8);
  uint64_t v46 = Alias;
  MEMORY[0x1F4188790](Alias);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?));
  MEMORY[0x1F4188790](v44);
  uint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v13 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)) {
    return 0;
  }
  uint64_t v41 = v6;
  uint64_t v42 = v9;
  uint64_t v43 = v11;
  uint64_t v23 = a2
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
  uint64_t v24 = (uint64_t)&v22[*(int *)(v20 + 48)];
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined init with copy of PgQuery_Alias?(v23, v24, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v25((uint64_t)v22, 1, Node) != 1)
  {
    outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
    if (v25(v24, 1, Node) != 1)
    {
      outlined init with take of PgQuery_OidList(v24, (uint64_t)v15, type metadata accessor for PgQuery_Node);
      swift_retain();
      uint64_t v27 = a2;
      swift_retain();
      char v28 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v18, (uint64_t)v15, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
      outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
      outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
      if (v28) {
        goto LABEL_10;
      }
LABEL_8:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
LABEL_7:
    outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
    goto LABEL_8;
  }
  unsigned int v26 = v25(v24, 1, Node);
  swift_retain();
  swift_retain();
  uint64_t v27 = a2;
  if (v26 != 1) {
    goto LABEL_7;
  }
  outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_10:
  uint64_t v29 = v27
      + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  uint64_t v30 = (uint64_t)v43;
  uint64_t v31 = (uint64_t)&v43[*(int *)(v44 + 48)];
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, (uint64_t)v43, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined init with copy of PgQuery_Alias?(v29, v31, &demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v32 = v46;
  uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  if (v33(v30, 1, v46) == 1)
  {
    swift_release();
    swift_release();
    if (v33(v31, 1, v32) == 1)
    {
      outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Alias?);
      return 1;
    }
    goto LABEL_16;
  }
  int v35 = v42;
  outlined init with copy of PgQuery_Alias?(v30, (uint64_t)v42, &demangling cache variable for type metadata for PgQuery_Alias?);
  if (v33(v31, 1, v32) == 1)
  {
    swift_release();
    swift_release();
    outlined destroy of PgQuery_Alias((uint64_t)v35, type metadata accessor for PgQuery_Alias);
LABEL_16:
    int v36 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
LABEL_24:
    outlined destroy of AnyValue?(v30, v36);
    return 0;
  }
  uint64_t v37 = v41;
  outlined init with take of PgQuery_OidList(v31, (uint64_t)v41, type metadata accessor for PgQuery_Alias);
  if ((*v35 != *v37 || v35[1] != v37[1]) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (specialized static Array<A>.== infix(_:_:)(v42[2], v41[2]) & 1) == 0)
  {
    swift_release();
    swift_release();
    outlined destroy of PgQuery_Alias((uint64_t)v41, type metadata accessor for PgQuery_Alias);
    outlined destroy of PgQuery_Alias((uint64_t)v42, type metadata accessor for PgQuery_Alias);
    int v36 = &demangling cache variable for type metadata for PgQuery_Alias?;
    goto LABEL_24;
  }
  uint64_t v39 = (uint64_t)v41;
  uint64_t v38 = (uint64_t)v42;
  type metadata accessor for UnknownStorage();
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
  char v40 = dispatch thunk of static Equatable.== infix(_:_:)();
  swift_release();
  swift_release();
  outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Alias);
  outlined destroy of PgQuery_Alias(v38, type metadata accessor for PgQuery_Alias);
  outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Alias?);
  return (v40 & 1) != 0;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeSubselect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RangeSubselect._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeSubselect()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RangeSubselect()
{
  return PgQuery_RangeSubselect.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RangeSubselect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_RangeSubselect.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeSubselect(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeSubselect);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeSubselect@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeSubselect._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeSubselect(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeSubselect);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeSubselect(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeSubselect and conformance PgQuery_RangeSubselect, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeSubselect);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_RangeSubselect(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_RangeSubselect, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_RangeSubselect.== infix(_:_:)) & 1;
}

uint64_t PgQuery_RangeFunction.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_5;
        case 4:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 5:
          type metadata accessor for PgQuery_RangeFunction(0);
          type metadata accessor for PgQuery_Alias(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RangeFunction.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v9 = *(void *)(Alias - 8);
  MEMORY[0x1F4188790](Alias);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v10) = *v3;
  uint64_t v17 = a1;
  if (v10 != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v2))
  {
    if (v3[1] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v2))
    {
      if (v3[2] != 1 || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v2))
      {
        uint64_t v16 = v9;
        if (*(void *)(*((void *)v3 + 1) + 16))
        {
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
          uint64_t v13 = v16;
          if (v2) {
            return result;
          }
        }
        else
        {
          uint64_t v13 = v16;
        }
        uint64_t RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
        outlined init with copy of PgQuery_Alias?((uint64_t)&v3[*(int *)(RangeFunction + 40)], (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Alias?);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v7, 1, Alias) == 1)
        {
          outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Alias?);
        }
        else
        {
          outlined init with take of PgQuery_OidList((uint64_t)v7, (uint64_t)v11, type metadata accessor for PgQuery_Alias);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
          dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
          uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Alias);
          if (v2) {
            return result;
          }
        }
        if (!*(void *)(*((void *)v3 + 2) + 16)) {
          return UnknownStorage.traverse<A>(visitor:)();
        }
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
        if (!v2) {
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = 0;
  *(unsigned char *)(a2 + 2) = 0;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 8) = MEMORY[0x1E4FBC860];
  *(void *)(a2 + 16) = v4;
  UnknownStorage.init()();
  uint64_t v5 = a2 + *(int *)(a1 + 40);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 56);

  return v7(v5, 1, 1, Alias);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeFunction()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RangeFunction()
{
  return PgQuery_RangeFunction.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RangeFunction(uint64_t a1)
{
  return PgQuery_RangeFunction.traverse<A>(visitor:)(a1);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeFunction(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeFunction);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeFunction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeFunction._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeFunction(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeFunction);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeFunction(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeFunction and conformance PgQuery_RangeFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeFunction);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RangeTableSample._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_RangeTableSample._StorageClass()
{
  return type metadata accessor for PgQuery_RangeTableSample._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RangeTableSample._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTableSample._StorageClass);
}

void type metadata completion function for PgQuery_RangeTableSample._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_RangeTableSample.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_RangeTableSample(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_RangeTableSample._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_RangeTableSample._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_RangeTableSample.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v26 = (uint64_t)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v11 = *(void *)(Node - 8);
  uint64_t v12 = MEMORY[0x1F4188790](Node);
  uint64_t v25 = (uint64_t)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = *(int *)(type metadata accessor for PgQuery_RangeTableSample(0) + 20);
  uint64_t v24 = v3;
  uint64_t v17 = *(void *)(v3 + v16);
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation, (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v18(v9, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__method)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v19 = v26;
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, v26, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v18((char *)v19, 1, Node) != 1)
  {
    uint64_t v20 = v19;
    uint64_t v21 = v25;
    outlined init with take of PgQuery_OidList(v20, v25, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
    if (!v4) {
      goto LABEL_11;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v19, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_11:
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeTableSample@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RangeTableSample._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeTableSample()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RangeTableSample()
{
  return PgQuery_RangeTableSample.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RangeTableSample(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_RangeTableSample.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeTableSample(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableSample);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeTableSample@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeTableSample._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeTableSample(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableSample);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeTableSample(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableSample and conformance PgQuery_RangeTableSample, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableSample);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RangeTableFunc._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, &demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_RangeTableFunc._StorageClass()
{
  return type metadata accessor for PgQuery_RangeTableFunc._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RangeTableFunc._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTableFunc._StorageClass);
}

void type metadata completion function for PgQuery_RangeTableFunc._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Alias?, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_RangeTableFunc.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RangeTableFunc, (void (*)(void))type metadata accessor for PgQuery_RangeTableFunc._StorageClass, specialized PgQuery_RangeTableFunc._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RangeTableFunc.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RangeTableFunc.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 2:
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_9;
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 6:
          type metadata accessor for PgQuery_Alias(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
LABEL_9:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RangeTableFunc.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v36 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v35 = *(void *)(Alias - 8);
  MEMORY[0x1F4188790](Alias);
  uint64_t v34 = (uint64_t)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v10 = MEMORY[0x1F4188790](v9 - 8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v32 - v13;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v15 = *(void *)(Node - 8);
  uint64_t v16 = MEMORY[0x1F4188790](Node);
  uint64_t v38 = (uint64_t)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v32 - v18;
  uint64_t v20 = *(void *)(v3 + *(int *)(type metadata accessor for PgQuery_RangeTableFunc(0) + 20));
  int v21 = *(unsigned __int8 *)(v20 + 16);
  uint64_t v22 = v20;
  swift_retain();
  uint64_t v33 = v3;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  if (v21 == 1)
  {
    uint64_t v23 = v39;
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    uint64_t v24 = v23;
    uint64_t v25 = Node;
    if (v23) {
      return swift_release();
    }
  }
  else
  {
    uint64_t v24 = v39;
    uint64_t v25 = Node;
  }
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v26(v14, 1, v25) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v14, (uint64_t)v19, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v19, type metadata accessor for PgQuery_Node);
    if (v24) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, (uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v26(v12, 1, v25) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v12, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v27 = v38;
    outlined init with take of PgQuery_OidList((uint64_t)v12, v38, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
    if (v24) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v22
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namespaces)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v24) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v22
                             + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v24) {
      return swift_release();
    }
  }
  uint64_t v28 = v36;
  outlined init with copy of PgQuery_Alias?(v22+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v36, &demangling cache variable for type metadata for PgQuery_Alias?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v28, 1, Alias) != 1)
  {
    uint64_t v29 = v28;
    uint64_t v30 = v34;
    outlined init with take of PgQuery_OidList(v29, v34, type metadata accessor for PgQuery_Alias);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v30, type metadata accessor for PgQuery_Alias);
    if (!v24) {
      goto LABEL_18;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v28, &demangling cache variable for type metadata for PgQuery_Alias?);
LABEL_18:
  if (*(_DWORD *)(v22
                 + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v24) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeTableFunc@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RangeTableFunc._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeTableFunc()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RangeTableFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_RangeTableFunc.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeTableFunc(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFunc);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeTableFunc@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeTableFunc._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeTableFunc(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFunc);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeTableFunc(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFunc and conformance PgQuery_RangeTableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFunc);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RangeTableFuncCol._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_RangeTableFuncCol._StorageClass()
{
  return type metadata accessor for PgQuery_RangeTableFuncCol._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RangeTableFuncCol._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTableFuncCol._StorageClass);
}

void type metadata completion function for PgQuery_RangeTableFuncCol._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_RangeTableFuncCol.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RangeTableFuncCol, (void (*)(void))type metadata accessor for PgQuery_RangeTableFuncCol._StorageClass, specialized PgQuery_RangeTableFuncCol._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RangeTableFuncCol.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RangeTableFuncCol.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
          goto LABEL_9;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 5:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_9:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RangeTableFuncCol.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_RangeTableFuncCol, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RangeTableFuncCol.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_RangeTableFuncCol.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v32 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v33 = (uint64_t)&v30 - v7;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v34 = *(void *)(Node - 8);
  uint64_t v35 = Node;
  uint64_t v9 = MEMORY[0x1F4188790](Node);
  uint64_t v30 = (uint64_t)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v31 = (uint64_t)&v30 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v15 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1;
  uint64_t v19 = *(void *)(a1 + 16);
  unint64_t v20 = *(void *)(a1 + 24);
  uint64_t v21 = HIBYTE(v20) & 0xF;
  if ((v20 & 0x2000000000000000) == 0) {
    uint64_t v21 = v19 & 0xFFFFFFFFFFFFLL;
  }
  if (v21)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    uint64_t v22 = v2;
    uint64_t result = swift_bridgeObjectRelease();
    if (v2) {
      return result;
    }
  }
  else
  {
    uint64_t v22 = v2;
  }
  outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, (uint64_t)v14, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, TypeName) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v14, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v14, (uint64_t)v17, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v17, type metadata accessor for PgQuery_TypeName);
    if (v22) {
      return result;
    }
  }
  if (*(unsigned char *)(v18
                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__forOrdinality) != 1
    || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v22))
  {
    if (*(unsigned char *)(v18
                  + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v22))
    {
      uint64_t v24 = v33;
      outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexpr, v33, &demangling cache variable for type metadata for PgQuery_Node?);
      uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
      if (v25(v24, 1, v35) == 1)
      {
        outlined destroy of AnyValue?(v24, &demangling cache variable for type metadata for PgQuery_Node?);
      }
      else
      {
        uint64_t v26 = v24;
        uint64_t v27 = v31;
        outlined init with take of PgQuery_OidList(v26, v31, type metadata accessor for PgQuery_Node);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
        uint64_t result = outlined destroy of PgQuery_Alias(v27, type metadata accessor for PgQuery_Node);
        if (v22) {
          return result;
        }
      }
      uint64_t v28 = v32;
      outlined init with copy of PgQuery_Alias?(v18+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexpr, v32, &demangling cache variable for type metadata for PgQuery_Node?);
      if (v25(v28, 1, v35) == 1)
      {
        outlined destroy of AnyValue?(v28, &demangling cache variable for type metadata for PgQuery_Node?);
      }
      else
      {
        uint64_t v29 = v30;
        outlined init with take of PgQuery_OidList(v28, v30, type metadata accessor for PgQuery_Node);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
        uint64_t result = outlined destroy of PgQuery_Alias(v29, type metadata accessor for PgQuery_Node);
        if (v22) {
          return result;
        }
      }
      uint64_t result = *(unsigned int *)(v18
                               + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
      if (result) {
        return dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
      }
    }
  }
  return result;
}

BOOL closure #1 in static PgQuery_RangeTableFuncCol.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v55 = *(void *)(Node - 8);
  uint64_t v56 = Node;
  MEMORY[0x1F4188790](Node);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v52 = (uint64_t)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v53 = (uint64_t)&v50 - v10;
  uint64_t v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v11 = MEMORY[0x1F4188790](v57);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v54 = (uint64_t)&v50 - v14;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v16 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)
    || (char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v25 & 1) != 0))
  {
    uint64_t v50 = v13;
    uint64_t v51 = v6;
    uint64_t v27 = a2
        + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
    uint64_t v28 = (uint64_t)&v24[*(int *)(v22 + 48)];
    outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, (uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined init with copy of PgQuery_Alias?(v27, v28, &demangling cache variable for type metadata for PgQuery_TypeName?);
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
    if (v29((uint64_t)v24, 1, TypeName) == 1)
    {
      int v30 = v29(v28, 1, TypeName);
      swift_retain();
      swift_retain();
      if (v30 == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TypeName?);
        goto LABEL_11;
      }
    }
    else
    {
      outlined init with copy of PgQuery_Alias?((uint64_t)v24, (uint64_t)v21, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if (v29(v28, 1, TypeName) != 1)
      {
        outlined init with take of PgQuery_OidList(v28, (uint64_t)v18, type metadata accessor for PgQuery_TypeName);
        swift_retain();
        swift_retain();
        char v31 = specialized static PgQuery_TypeName.== infix(_:_:)((uint64_t)v21, (uint64_t)v18);
        outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_TypeName);
        outlined destroy of PgQuery_Alias((uint64_t)v21, type metadata accessor for PgQuery_TypeName);
        outlined destroy of AnyValue?((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_TypeName?);
        if ((v31 & 1) == 0) {
          goto LABEL_28;
        }
LABEL_11:
        if (*(unsigned __int8 *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__forOrdinality) != *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__forOrdinality)
          || *(unsigned __int8 *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull) != *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull))
        {
          goto LABEL_28;
        }
        uint64_t v32 = a2
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexpr;
        uint64_t v33 = v54;
        uint64_t v34 = v54 + *(int *)(v57 + 48);
        outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexpr, v54, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v35 = v32;
        uint64_t v36 = v33;
        outlined init with copy of PgQuery_Alias?(v35, v34, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v37 = v56;
        uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
        if (v38(v36, 1, v56) == 1)
        {
          int v39 = v38(v34, 1, v37);
          uint64_t v41 = (uint64_t)v50;
          uint64_t v40 = (uint64_t)v51;
          if (v39 == 1)
          {
            outlined destroy of AnyValue?(v36, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_20:
            uint64_t v44 = a2
                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexpr;
            uint64_t v45 = v41 + *(int *)(v57 + 48);
            outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexpr, v41, &demangling cache variable for type metadata for PgQuery_Node?);
            outlined init with copy of PgQuery_Alias?(v44, v45, &demangling cache variable for type metadata for PgQuery_Node?);
            if (v38(v41, 1, v37) == 1)
            {
              if (v38(v45, 1, v37) == 1)
              {
                outlined destroy of AnyValue?(v41, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_27:
                int v48 = *(_DWORD *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
                swift_release();
                int v49 = *(_DWORD *)(a2
                                + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
                swift_release();
                return v48 == v49;
              }
            }
            else
            {
              uint64_t v46 = v52;
              outlined init with copy of PgQuery_Alias?(v41, v52, &demangling cache variable for type metadata for PgQuery_Node?);
              if (v38(v45, 1, v37) != 1)
              {
                outlined init with take of PgQuery_OidList(v45, v40, type metadata accessor for PgQuery_Node);
                char v47 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v46, v40, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
                outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
                outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_Node);
                outlined destroy of AnyValue?(v41, &demangling cache variable for type metadata for PgQuery_Node?);
                if (v47) {
                  goto LABEL_27;
                }
                goto LABEL_28;
              }
              outlined destroy of PgQuery_Alias(v46, type metadata accessor for PgQuery_Node);
            }
            outlined destroy of AnyValue?(v41, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
LABEL_28:
            swift_release();
            swift_release();
            return 0;
          }
        }
        else
        {
          uint64_t v42 = v53;
          outlined init with copy of PgQuery_Alias?(v36, v53, &demangling cache variable for type metadata for PgQuery_Node?);
          int v43 = v38(v34, 1, v37);
          uint64_t v41 = (uint64_t)v50;
          uint64_t v40 = (uint64_t)v51;
          if (v43 != 1)
          {
            outlined init with take of PgQuery_OidList(v34, (uint64_t)v51, type metadata accessor for PgQuery_Node);
            LODWORD(v55) = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v42, v40, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
            outlined destroy of PgQuery_Alias(v40, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
            outlined destroy of AnyValue?(v36, &demangling cache variable for type metadata for PgQuery_Node?);
            if ((v55 & 1) == 0) {
              goto LABEL_28;
            }
            goto LABEL_20;
          }
          outlined destroy of PgQuery_Alias(v42, type metadata accessor for PgQuery_Node);
        }
        outlined destroy of AnyValue?(v36, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
        goto LABEL_28;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias((uint64_t)v21, type metadata accessor for PgQuery_TypeName);
    }
    outlined destroy of AnyValue?((uint64_t)v24, &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
    goto LABEL_28;
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeTableFuncCol@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RangeTableFuncCol._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeTableFuncCol()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeTableFuncCol(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFuncCol);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeTableFuncCol@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeTableFuncCol._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeTableFuncCol(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFuncCol);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeTableFuncCol(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTableFuncCol and conformance PgQuery_RangeTableFuncCol, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTableFuncCol);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_RangeTableFuncCol(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_RangeTableFuncCol, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_RangeTableFuncCol.== infix(_:_:)) & 1;
}

uint64_t PgQuery_TypeName.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 5:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 3:
        case 4:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 6:
        case 8:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_TypeName.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 8)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      if (*(unsigned char *)(v0 + 12) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        if (*(unsigned char *)(v0 + 13) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(*(void *)(v0 + 16) + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (!*(_DWORD *)(v0 + 24)
              || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
            {
              if (!*(void *)(*(void *)(v0 + 32) + 16)
                || (type metadata accessor for PgQuery_Node(0),
                    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
              {
                if (!*(_DWORD *)(v0 + 40)
                  || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
                {
                  type metadata accessor for PgQuery_TypeName(0);
                  return UnknownStorage.traverse<A>(visitor:)();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TypeName@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = 0;
  *(void *)(a1 + 16) = v1;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v1;
  *(_DWORD *)(a1 + 40) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TypeName()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TypeName()
{
  return PgQuery_TypeName.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TypeName()
{
  return PgQuery_TypeName.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TypeName(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TypeName@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TypeName._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TypeName(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TypeName(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ColumnDef._StorageClass.init()()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56))(v1, 1, 1, TypeName);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhcount) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isLocal) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFromType) = 0;
  uint64_t v3 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage);
  *uint64_t v3 = 0;
  v3[1] = 0xE000000000000000;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawDefault;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v6(v4, 1, 1, Node);
  v6(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedDefault, 1, 1, Node);
  uint64_t v7 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity);
  *uint64_t v7 = 0;
  v7[1] = 0xE000000000000000;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identitySequence;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v8, 1, 1, RangeVar);
  uint64_t v10 = (void *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated);
  *uint64_t v10 = 0;
  v10[1] = 0xE000000000000000;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause;
  uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(CollateClause - 8) + 56))(v11, 1, 1, CollateClause);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid) = 0;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fdwoptions) = v13;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  return v0;
}

uint64_t PgQuery_ColumnDef._StorageClass.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, &demangling cache variable for type metadata for PgQuery_TypeName?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawDefault, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedDefault, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identitySequence, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_ColumnDef._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit(PgQuery_ColumnDef._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_ColumnDef._StorageClass()
{
  return type metadata accessor for PgQuery_ColumnDef._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_ColumnDef._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ColumnDef._StorageClass);
}

void type metadata completion function for PgQuery_ColumnDef._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
      if (v2 <= 0x3F)
      {
        type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_CollateClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t PgQuery_ColumnDef.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_ColumnDef, (void (*)(void))type metadata accessor for PgQuery_ColumnDef._StorageClass, specialized PgQuery_ColumnDef._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_ColumnDef.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_ColumnDef.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 7:
        case 10:
        case 12:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
          goto LABEL_11;
        case 3:
        case 17:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 4:
        case 5:
        case 6:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 8:
        case 9:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_11;
        case 11:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
          goto LABEL_11;
        case 13:
          type metadata accessor for PgQuery_CollateClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
LABEL_11:
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 14:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 15:
        case 16:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ColumnDef.traverse<A>(visitor:)(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v73 = a2;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CollateClause?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v64 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  uint64_t v58 = *(void *)(CollateClause - 8);
  uint64_t v59 = CollateClause;
  MEMORY[0x1F4188790](CollateClause);
  uint64_t v57 = (uint64_t)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v9 - 8);
  char v70 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v60 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v61 = (uint64_t)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  uint64_t v66 = (uint64_t)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v71 = (char *)&v55 - v15;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v17 = *(void *)(Node - 8);
  uint64_t v67 = Node;
  uint64_t v68 = v17;
  uint64_t v18 = MEMORY[0x1F4188790](Node);
  uint64_t v62 = (uint64_t)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v65 = (char *)&v55 - v20;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v25 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v27 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = *(int *)(type metadata accessor for PgQuery_ColumnDef(0) + 20);
  uint64_t v56 = v3;
  uint64_t v29 = *(void *)(v3 + v28);
  unint64_t v30 = *(void *)(v29 + 24);
  if ((v30 & 0x2000000000000000) != 0) {
    uint64_t v31 = HIBYTE(v30) & 0xF;
  }
  else {
    uint64_t v31 = *(void *)(v29 + 16) & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v32 = *(void *)(v3 + v28);
  swift_retain();
  if (v31)
  {
    swift_bridgeObjectRetain();
    uint64_t v33 = v72;
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    uint64_t v34 = a3;
    uint64_t v35 = v33;
    if (v33) {
      goto LABEL_53;
    }
    uint64_t v69 = v34;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v69 = a3;
    uint64_t v35 = v72;
  }
  outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, (uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, TypeName) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TypeName?);
    uint64_t v36 = (uint64_t)v71;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v23, (uint64_t)v27, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v36 = (uint64_t)v71;
    if (v35)
    {
      uint64_t v37 = type metadata accessor for PgQuery_TypeName;
LABEL_13:
      outlined destroy of PgQuery_Alias((uint64_t)v27, v37);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias((uint64_t)v27, type metadata accessor for PgQuery_TypeName);
  }
  uint64_t v38 = (uint64_t)v70;
  if (*(_DWORD *)(v32
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhcount))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v35) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v32
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isLocal) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v35) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v32
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v35) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v32
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFromType) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v35) {
      return swift_release();
    }
  }
  unint64_t v39 = *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage
                  + 8);
  uint64_t v40 = HIBYTE(v39) & 0xF;
  if ((v39 & 0x2000000000000000) == 0) {
    uint64_t v40 = *(void *)(v32
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage) & 0xFFFFFFFFFFFFLL;
  if (v40)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v35) {
      goto LABEL_53;
    }
    swift_bridgeObjectRelease();
  }
  outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawDefault, v36, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48);
  v68 += 48;
  uint64_t v73 = v41;
  if (v41(v36, 1, v67) == 1)
  {
    outlined destroy of AnyValue?(v36, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_33;
  }
  uint64_t v27 = v65;
  outlined init with take of PgQuery_OidList(v36, (uint64_t)v65, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  if (v35)
  {
    uint64_t v37 = type metadata accessor for PgQuery_Node;
    goto LABEL_13;
  }
  outlined destroy of PgQuery_Alias((uint64_t)v27, type metadata accessor for PgQuery_Node);
  uint64_t v38 = (uint64_t)v70;
LABEL_33:
  uint64_t v42 = v66;
  outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedDefault, v66, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v73(v42, 1, v67) == 1)
  {
    outlined destroy of AnyValue?(v42, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v43 = v62;
    outlined init with take of PgQuery_OidList(v42, v62, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v35)
    {
      uint64_t v44 = type metadata accessor for PgQuery_Node;
LABEL_47:
      outlined destroy of PgQuery_Alias(v43, v44);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_Node);
  }
  unint64_t v45 = *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity
                  + 8);
  uint64_t v46 = HIBYTE(v45) & 0xF;
  if ((v45 & 0x2000000000000000) == 0) {
    uint64_t v46 = *(void *)(v32
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity) & 0xFFFFFFFFFFFFLL;
  uint64_t v48 = RangeVar;
  uint64_t v47 = (uint64_t)v64;
  if (v46)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (!v35)
    {
      swift_bridgeObjectRelease();
      goto LABEL_43;
    }
LABEL_53:
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_43:
  outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identitySequence, v38, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  int v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v38, 1, v48);
  uint64_t v43 = v61;
  if (v49 == 1)
  {
    outlined destroy of AnyValue?(v38, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    goto LABEL_49;
  }
  outlined init with take of PgQuery_OidList(v38, v61, type metadata accessor for PgQuery_RangeVar);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  if (v35)
  {
    uint64_t v44 = type metadata accessor for PgQuery_RangeVar;
    goto LABEL_47;
  }
  outlined destroy of PgQuery_Alias(v43, type metadata accessor for PgQuery_RangeVar);
LABEL_49:
  unint64_t v50 = *(void *)(v32
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated
                  + 8);
  uint64_t v51 = HIBYTE(v50) & 0xF;
  if ((v50 & 0x2000000000000000) == 0) {
    uint64_t v51 = *(void *)(v32
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated) & 0xFFFFFFFFFFFFLL;
  if (v51)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v35) {
      goto LABEL_53;
    }
    swift_bridgeObjectRelease();
  }
  outlined init with copy of PgQuery_Alias?(v32+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, v47, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v47, 1, v59) == 1)
  {
    outlined destroy of AnyValue?(v47, &demangling cache variable for type metadata for PgQuery_CollateClause?);
  }
  else
  {
    uint64_t v53 = v47;
    uint64_t v54 = v57;
    outlined init with take of PgQuery_OidList(v53, v57, type metadata accessor for PgQuery_CollateClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateClause and conformance PgQuery_CollateClause, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v54, type metadata accessor for PgQuery_CollateClause);
    if (v35) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v32
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v35) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v32
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v35) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v32
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fdwoptions)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v35) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v32
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v35) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

BOOL closure #1 in static PgQuery_ColumnDef.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  uint64_t v107 = *(void *)(CollateClause - 8);
  MEMORY[0x1F4188790](CollateClause);
  uint64_t v5 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CollateClause?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v95 = (uint64_t)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_CollateClause?, PgQuery_CollateClause?));
  MEMORY[0x1F4188790](v97);
  uint64_t v9 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v108 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v96 = (uint64_t)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v99 = (uint64_t)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v100);
  uint64_t v102 = (uint64_t)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v110 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v104 = (uint64_t)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v103 = (uint64_t)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v106 = (uint64_t)&v92 - v18;
  uint64_t v109 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v19 = MEMORY[0x1F4188790](v109);
  uint64_t v105 = (uint64_t)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v111 = (uint64_t)&v92 - v21;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v23 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v25 = (char *)&v92 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v26 - 8);
  uint64_t v28 = (char *)&v92 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v92 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24)
    || (char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v32 & 1) != 0))
  {
    uint64_t v93 = v5;
    char v94 = v9;
    uint64_t v34 = a2;
    uint64_t v35 = a2
        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
    uint64_t v36 = (uint64_t)&v31[*(int *)(v29 + 48)];
    outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, (uint64_t)v31, &demangling cache variable for type metadata for PgQuery_TypeName?);
    outlined init with copy of PgQuery_Alias?(v35, v36, &demangling cache variable for type metadata for PgQuery_TypeName?);
    uint64_t v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
    if (v37((uint64_t)v31, 1, TypeName) == 1)
    {
      int v38 = v37(v36, 1, TypeName);
      swift_retain();
      swift_retain();
      uint64_t v39 = v34;
      if (v38 == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v31, &demangling cache variable for type metadata for PgQuery_TypeName?);
        goto LABEL_11;
      }
    }
    else
    {
      outlined init with copy of PgQuery_Alias?((uint64_t)v31, (uint64_t)v28, &demangling cache variable for type metadata for PgQuery_TypeName?);
      if (v37(v36, 1, TypeName) != 1)
      {
        outlined init with take of PgQuery_OidList(v36, (uint64_t)v25, type metadata accessor for PgQuery_TypeName);
        swift_retain();
        uint64_t v39 = v34;
        swift_retain();
        char v40 = specialized static PgQuery_TypeName.== infix(_:_:)((uint64_t)v28, (uint64_t)v25);
        outlined destroy of PgQuery_Alias((uint64_t)v25, type metadata accessor for PgQuery_TypeName);
        outlined destroy of PgQuery_Alias((uint64_t)v28, type metadata accessor for PgQuery_TypeName);
        outlined destroy of AnyValue?((uint64_t)v31, &demangling cache variable for type metadata for PgQuery_TypeName?);
        if ((v40 & 1) == 0) {
          goto LABEL_56;
        }
LABEL_11:
        if (*(_DWORD *)(a1
                       + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhcount) != *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inhcount)
          || *(unsigned __int8 *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isLocal) != *(unsigned __int8 *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isLocal)
          || *(unsigned __int8 *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull) != *(unsigned __int8 *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull)
          || *(unsigned __int8 *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFromType) != *(unsigned __int8 *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFromType)
          || (*(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage) != *(void *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage)
           || *(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage
                        + 8) != *(void *)(v39
                                          + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__storage
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_56;
        }
        uint64_t v41 = v39
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawDefault;
        uint64_t v42 = v109;
        uint64_t v43 = v111;
        uint64_t v44 = v111 + *(int *)(v109 + 48);
        outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawDefault, v111, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined init with copy of PgQuery_Alias?(v41, v44, &demangling cache variable for type metadata for PgQuery_Node?);
        unint64_t v45 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
        uint64_t v46 = Node;
        if (v45(v43, 1, Node) == 1)
        {
          int v47 = v45(v44, 1, v46);
          uint64_t v48 = v107;
          uint64_t v49 = v108;
          if (v47 == 1)
          {
            outlined destroy of AnyValue?(v43, &demangling cache variable for type metadata for PgQuery_Node?);
            goto LABEL_25;
          }
        }
        else
        {
          uint64_t v50 = v106;
          outlined init with copy of PgQuery_Alias?(v43, v106, &demangling cache variable for type metadata for PgQuery_Node?);
          int v51 = v45(v44, 1, v46);
          uint64_t v52 = v108;
          if (v51 != 1)
          {
            uint64_t v53 = v104;
            outlined init with take of PgQuery_OidList(v44, v104, type metadata accessor for PgQuery_Node);
            char v54 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v50, v53, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
            outlined destroy of PgQuery_Alias(v53, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
            uint64_t v48 = v107;
            outlined destroy of AnyValue?(v111, &demangling cache variable for type metadata for PgQuery_Node?);
            uint64_t v49 = v52;
            if ((v54 & 1) == 0) {
              goto LABEL_56;
            }
LABEL_25:
            uint64_t v55 = v48;
            uint64_t v56 = v39
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedDefault;
            uint64_t v57 = v105;
            uint64_t v58 = v105 + *(int *)(v42 + 48);
            outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedDefault, v105, &demangling cache variable for type metadata for PgQuery_Node?);
            uint64_t v59 = v56;
            uint64_t v60 = v57;
            outlined init with copy of PgQuery_Alias?(v59, v58, &demangling cache variable for type metadata for PgQuery_Node?);
            uint64_t v61 = Node;
            if (v45(v57, 1, Node) == 1)
            {
              if (v45(v58, 1, v61) == 1)
              {
                outlined destroy of AnyValue?(v57, &demangling cache variable for type metadata for PgQuery_Node?);
                goto LABEL_32;
              }
            }
            else
            {
              uint64_t v62 = v57;
              uint64_t v63 = v103;
              outlined init with copy of PgQuery_Alias?(v62, v103, &demangling cache variable for type metadata for PgQuery_Node?);
              if (v45(v58, 1, v61) != 1)
              {
                uint64_t v64 = v104;
                outlined init with take of PgQuery_OidList(v58, v104, type metadata accessor for PgQuery_Node);
                uint64_t v65 = v60;
                char v66 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v63, v64, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
                outlined destroy of PgQuery_Alias(v64, type metadata accessor for PgQuery_Node);
                outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
                outlined destroy of AnyValue?(v65, &demangling cache variable for type metadata for PgQuery_Node?);
                if ((v66 & 1) == 0) {
                  goto LABEL_56;
                }
LABEL_32:
                if ((*(void *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity) != *(void *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity)
                   || *(void *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity
                                + 8) != *(void *)(v39
                                                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identity
                                                  + 8))
                  && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                {
                  goto LABEL_56;
                }
                uint64_t v67 = v39
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identitySequence;
                uint64_t v68 = v102;
                uint64_t v69 = v102 + *(int *)(v100 + 48);
                outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__identitySequence, v102, &demangling cache variable for type metadata for PgQuery_RangeVar?);
                outlined init with copy of PgQuery_Alias?(v67, v69, &demangling cache variable for type metadata for PgQuery_RangeVar?);
                char v70 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48);
                uint64_t v71 = RangeVar;
                if (v70(v68, 1, RangeVar) == 1)
                {
                  if (v70(v69, 1, v71) == 1)
                  {
                    outlined destroy of AnyValue?(v68, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_42:
                    if ((*(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated) != *(void *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated)
                       || *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated
                                    + 8) != *(void *)(v39
                                                      + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generated
                                                      + 8))
                      && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
                    {
                      goto LABEL_56;
                    }
                    uint64_t v75 = v39
                        + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause;
                    uint64_t v76 = (uint64_t)v94;
                    uint64_t v77 = (uint64_t)&v94[*(int *)(v97 + 48)];
                    outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause, (uint64_t)v94, &demangling cache variable for type metadata for PgQuery_CollateClause?);
                    outlined init with copy of PgQuery_Alias?(v75, v77, &demangling cache variable for type metadata for PgQuery_CollateClause?);
                    uint64_t v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48);
                    uint64_t v79 = CollateClause;
                    if (v78(v76, 1, CollateClause) == 1)
                    {
                      if (v78(v77, 1, v79) == 1)
                      {
                        outlined destroy of AnyValue?((uint64_t)v94, &demangling cache variable for type metadata for PgQuery_CollateClause?);
LABEL_52:
                        if (*(_DWORD *)(a1
                                       + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid) == *(_DWORD *)(v39 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOid))
                        {
                          uint64_t v84 = *(void *)(a1
                                          + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
                          uint64_t v85 = *(void *)(v39
                                          + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints);
                          swift_bridgeObjectRetain();
                          swift_bridgeObjectRetain();
                          char v86 = specialized static Array<A>.== infix(_:_:)(v84, v85);
                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          if (v86)
                          {
                            uint64_t v87 = *(void *)(a1
                                            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fdwoptions);
                            uint64_t v88 = *(void *)(v39
                                            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fdwoptions);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            char v89 = specialized static Array<A>.== infix(_:_:)(v87, v88);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if (v89)
                            {
                              int v90 = *(_DWORD *)(a1
                                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
                              swift_release();
                              int v91 = *(_DWORD *)(v39
                                              + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ColumnDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
                              swift_release();
                              return v90 == v91;
                            }
                          }
                        }
                        goto LABEL_56;
                      }
                      goto LABEL_50;
                    }
                    uint64_t v80 = v76;
                    uint64_t v81 = v95;
                    outlined init with copy of PgQuery_Alias?(v80, v95, &demangling cache variable for type metadata for PgQuery_CollateClause?);
                    if (v78(v77, 1, v79) == 1)
                    {
                      outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_CollateClause);
LABEL_50:
                      outlined destroy of AnyValue?((uint64_t)v94, &demangling cache variable for type metadata for (PgQuery_CollateClause?, PgQuery_CollateClause?));
                      goto LABEL_56;
                    }
                    uint64_t v82 = (uint64_t)v93;
                    outlined init with take of PgQuery_OidList(v77, (uint64_t)v93, type metadata accessor for PgQuery_CollateClause);
                    char v83 = specialized static PgQuery_CollateClause.== infix(_:_:)(v81, v82);
                    outlined destroy of PgQuery_Alias(v82, type metadata accessor for PgQuery_CollateClause);
                    outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_CollateClause);
                    outlined destroy of AnyValue?((uint64_t)v94, &demangling cache variable for type metadata for PgQuery_CollateClause?);
                    if (v83) {
                      goto LABEL_52;
                    }
LABEL_56:
                    swift_release();
                    swift_release();
                    return 0;
                  }
                }
                else
                {
                  uint64_t v72 = v99;
                  outlined init with copy of PgQuery_Alias?(v68, v99, &demangling cache variable for type metadata for PgQuery_RangeVar?);
                  if (v70(v69, 1, v71) != 1)
                  {
                    uint64_t v73 = v96;
                    outlined init with take of PgQuery_OidList(v69, v96, type metadata accessor for PgQuery_RangeVar);
                    char v74 = specialized static PgQuery_RangeVar.== infix(_:_:)(v72, v73);
                    outlined destroy of PgQuery_Alias(v73, type metadata accessor for PgQuery_RangeVar);
                    outlined destroy of PgQuery_Alias(v72, type metadata accessor for PgQuery_RangeVar);
                    outlined destroy of AnyValue?(v68, &demangling cache variable for type metadata for PgQuery_RangeVar?);
                    if ((v74 & 1) == 0) {
                      goto LABEL_56;
                    }
                    goto LABEL_42;
                  }
                  outlined destroy of PgQuery_Alias(v72, type metadata accessor for PgQuery_RangeVar);
                }
                outlined destroy of AnyValue?(v68, &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
                goto LABEL_56;
              }
              outlined destroy of PgQuery_Alias(v63, type metadata accessor for PgQuery_Node);
            }
            outlined destroy of AnyValue?(v60, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
            goto LABEL_56;
          }
          outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_Node);
        }
        outlined destroy of AnyValue?(v43, &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
        goto LABEL_56;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias((uint64_t)v28, type metadata accessor for PgQuery_TypeName);
    }
    outlined destroy of AnyValue?((uint64_t)v31, &demangling cache variable for type metadata for (PgQuery_TypeName?, PgQuery_TypeName?));
    goto LABEL_56;
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ColumnDef@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_ColumnDef._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ColumnDef()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ColumnDef(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3)
{
  return PgQuery_ColumnDef.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ColumnDef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnDef);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ColumnDef@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ColumnDef._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ColumnDef(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnDef);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ColumnDef(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnDef and conformance PgQuery_ColumnDef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnDef);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ColumnDef(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ColumnDef, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_ColumnDef.== infix(_:_:)) & 1;
}

uint64_t PgQuery_IndexElem._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_IndexElem._StorageClass()
{
  return type metadata accessor for PgQuery_IndexElem._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_IndexElem._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IndexElem._StorageClass);
}

void type metadata completion function for PgQuery_IndexElem._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_IndexElem.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_IndexElem, (void (*)(void))type metadata accessor for PgQuery_IndexElem._StorageClass, specialized PgQuery_IndexElem._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_IndexElem.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_IndexElem.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 4:
        case 5:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          lazy protocol witness table accessor for type PgQuery_SortByDir and conformance PgQuery_SortByDir();
          goto LABEL_10;
        case 8:
          lazy protocol witness table accessor for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls();
LABEL_10:
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_IndexElem.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v20 = (uint64_t)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(int *)(type metadata accessor for PgQuery_IndexElem(0) + 20);
  uint64_t v19 = v0;
  uint64_t v8 = *(void *)(v0 + v7);
  unint64_t v9 = *(void *)(v8 + 24);
  if ((v9 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(v9) & 0xF;
  }
  else {
    uint64_t v10 = *(void *)(v8 + 16) & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v11 = *(void *)(v0 + v7);
  swift_retain();
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    uint64_t v12 = v1;
    if (v1)
    {
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = v1;
  }
  outlined init with copy of PgQuery_Alias?(v11 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v13 = v20;
    outlined init with take of PgQuery_OidList((uint64_t)v4, v20, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v12)
    {
      outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_Node);
      return swift_release();
    }
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_Node);
  }
  unint64_t v14 = *(void *)(v11
                  + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname
                  + 8);
  uint64_t v15 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0) {
    uint64_t v15 = *(void *)(v11
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname) & 0xFFFFFFFFFFFFLL;
  if (v15)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v12) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v11
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v12) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v11
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v12) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v11
                             + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclassopts)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v12) {
      return swift_release();
    }
  }
  if (*(void *)(v11
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering))
  {
    char v16 = *(unsigned char *)(v11
                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering
                   + 8);
    uint64_t v21 = *(void *)(v11
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering);
    char v22 = v16;
    lazy protocol witness table accessor for type PgQuery_SortByDir and conformance PgQuery_SortByDir();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v12) {
      return swift_release();
    }
  }
  if (*(void *)(v11
                 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering))
  {
    char v17 = *(unsigned char *)(v11
                   + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering
                   + 8);
    uint64_t v21 = *(void *)(v11
                    + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering);
    char v22 = v17;
    lazy protocol witness table accessor for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v12) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_IndexElem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_IndexElem._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_IndexElem()
{
  return 0xD000000000000012;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_IndexElem()
{
  return PgQuery_IndexElem.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_IndexElem(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexElem);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_IndexElem@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_IndexElem._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_IndexElem(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexElem);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_IndexElem(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexElem and conformance PgQuery_IndexElem, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexElem);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_Constraint._StorageClass.init()()
{
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0xE000000000000000;
  *(_WORD *)(v0 + 48) = 0;
  *(_DWORD *)(v0 + 52) = 0;
  *(unsigned char *)(v0 + 56) = 0;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawExpr;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t v4 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr);
  *uint64_t v4 = 0;
  v4[1] = 0xE000000000000000;
  uint64_t v5 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen);
  *uint64_t v5 = 0;
  v5[1] = 0xE000000000000000;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__keys) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__including) = v6;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclusions) = v6;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v6;
  uint64_t v7 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname);
  *uint64_t v7 = 0;
  v7[1] = 0xE000000000000000;
  uint64_t v8 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace);
  *uint64_t v8 = 0;
  v8[1] = 0xE000000000000000;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc) = 0;
  unint64_t v9 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  *unint64_t v9 = 0;
  v9[1] = 0xE000000000000000;
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, 1, 1, Node);
  uint64_t v10 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pktable;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v10, 1, 1, RangeVar);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkAttrs) = v6;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pkAttrs) = v6;
  uint64_t v12 = (void *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype);
  *uint64_t v12 = 0;
  v12[1] = 0xE000000000000000;
  uint64_t v13 = (void *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction);
  *uint64_t v13 = 0;
  v13[1] = 0xE000000000000000;
  unint64_t v14 = (void *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction);
  *unint64_t v14 = 0;
  v14[1] = 0xE000000000000000;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldConpfeqop) = v6;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldPktableOid) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipValidation) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initiallyValid) = 0;
  return v0;
}

uint64_t PgQuery_Constraint._StorageClass.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawExpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pktable, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_Constraint._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit(PgQuery_Constraint._StorageClass.deinit);
}

uint64_t ObjC metadata update function for PgQuery_Constraint._StorageClass()
{
  return type metadata accessor for PgQuery_Constraint._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_Constraint._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Constraint._StorageClass);
}

void type metadata completion function for PgQuery_Constraint._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_RangeVar?, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_Constraint.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_Constraint, (void (*)(void))type metadata accessor for PgQuery_Constraint._StorageClass, specialized PgQuery_Constraint._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Constraint.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_Constraint.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_ConstrType and conformance PgQuery_ConstrType();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_14;
        case 2:
        case 8:
        case 9:
        case 14:
        case 15:
        case 17:
        case 22:
        case 23:
        case 24:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_14;
        case 3:
        case 4:
        case 6:
        case 16:
        case 27:
        case 28:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_14;
        case 5:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_14;
        case 7:
        case 18:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_9;
        case 10:
        case 11:
        case 12:
        case 13:
        case 20:
        case 21:
        case 25:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_14;
        case 19:
          type metadata accessor for PgQuery_RangeVar(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
LABEL_9:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_14;
        case 26:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_14:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_Constraint.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_Constraint, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_Constraint.traverse<A>(visitor:));
}

uint64_t closure #1 in PgQuery_Constraint.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v59 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v58 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v61 = (uint64_t)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v55 - v10;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v13 = *(void *)(Node - 8);
  uint64_t v14 = MEMORY[0x1F4188790](Node);
  uint64_t v57 = (uint64_t)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v62 = (uint64_t)&v55 - v16;
  if (*(void *)(a1 + 16))
  {
    char v17 = *(unsigned char *)(a1 + 24);
    uint64_t v63 = *(void *)(a1 + 16);
    char v64 = v17;
    lazy protocol witness table accessor for type PgQuery_ConstrType and conformance PgQuery_ConstrType();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1) {
      return result;
    }
  }
  uint64_t v56 = v6;
  unint64_t v19 = *(void *)(a1 + 40);
  uint64_t v20 = HIBYTE(v19) & 0xF;
  if ((v19 & 0x2000000000000000) == 0) {
    uint64_t v20 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v65 = a1;
  if (v20)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    a1 = v65;
  }
  if (*(unsigned char *)(a1 + 48) == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    a1 = v65;
    if (v1) {
      return result;
    }
  }
  if (*(unsigned char *)(a1 + 49) == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    a1 = v65;
    if (v1) {
      return result;
    }
  }
  if (*(_DWORD *)(a1 + 52))
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1) {
      return result;
    }
    a1 = v65;
  }
  if (*(unsigned char *)(a1 + 56) == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    a1 = v65;
    if (v1) {
      return result;
    }
  }
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawExpr, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  if (v21((uint64_t)v11, 1, Node) == 1)
  {
    char v22 = v21;
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v23 = (uint64_t)v11;
    uint64_t v24 = v62;
    outlined init with take of PgQuery_OidList(v23, v62, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v1)
    {
      uint64_t v25 = type metadata accessor for PgQuery_Node;
      uint64_t v26 = v24;
      return outlined destroy of PgQuery_Alias(v26, v25);
    }
    char v22 = v21;
    outlined destroy of PgQuery_Alias(v24, type metadata accessor for PgQuery_Node);
  }
  uint64_t v27 = v65;
  unint64_t v28 = *(void *)(v65
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr
                  + 8);
  uint64_t v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0) {
    uint64_t v29 = *(void *)(v65
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr) & 0xFFFFFFFFFFFFLL;
  if (v29)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v65;
  }
  unint64_t v30 = *(void *)(v27
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen
                  + 8);
  uint64_t v31 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0) {
    uint64_t v31 = *(void *)(v27
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen) & 0xFFFFFFFFFFFFLL;
  if (v31)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v65;
  }
  if (*(void *)(*(void *)(v27
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__keys)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v65;
  }
  if (*(void *)(*(void *)(v27
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__including)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v65;
  }
  if (*(void *)(*(void *)(v27
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclusions)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v65;
  }
  if (*(void *)(*(void *)(v27
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v65;
  }
  unint64_t v32 = *(void *)(v27
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname
                  + 8);
  uint64_t v33 = HIBYTE(v32) & 0xF;
  if ((v32 & 0x2000000000000000) == 0) {
    uint64_t v33 = *(void *)(v27
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname) & 0xFFFFFFFFFFFFLL;
  if (v33)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v65;
  }
  unint64_t v34 = *(void *)(v27
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace
                  + 8);
  uint64_t v35 = HIBYTE(v34) & 0xF;
  if ((v34 & 0x2000000000000000) == 0) {
    uint64_t v35 = *(void *)(v27
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace) & 0xFFFFFFFFFFFFLL;
  if (v35)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v65;
  }
  if (*(unsigned char *)(v27
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc) == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    uint64_t v27 = v65;
    if (v1) {
      return result;
    }
  }
  unint64_t v36 = *(void *)(v27
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                  + 8);
  uint64_t v37 = HIBYTE(v36) & 0xF;
  if ((v36 & 0x2000000000000000) == 0) {
    uint64_t v37 = *(void *)(v27
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) & 0xFFFFFFFFFFFFLL;
  if (v37)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v65;
  }
  uint64_t v38 = v61;
  outlined init with copy of PgQuery_Alias?(v27+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v61, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v22(v38, 1, Node) == 1)
  {
    outlined destroy of AnyValue?(v38, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v39 = v57;
    outlined init with take of PgQuery_OidList(v38, v57, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v1)
    {
      uint64_t v25 = type metadata accessor for PgQuery_Node;
      uint64_t v26 = v39;
      return outlined destroy of PgQuery_Alias(v26, v25);
    }
    outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_Node);
  }
  uint64_t v40 = v59;
  outlined init with copy of PgQuery_Alias?(v65+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pktable, v59, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v40, 1, RangeVar) != 1)
  {
    uint64_t v41 = (uint64_t)v56;
    outlined init with take of PgQuery_OidList(v40, (uint64_t)v56, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (!v1)
    {
      outlined destroy of PgQuery_Alias(v41, type metadata accessor for PgQuery_RangeVar);
      goto LABEL_75;
    }
    uint64_t v25 = type metadata accessor for PgQuery_RangeVar;
    uint64_t v26 = v41;
    return outlined destroy of PgQuery_Alias(v26, v25);
  }
  outlined destroy of AnyValue?(v40, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_75:
  uint64_t v42 = v65;
  if (*(void *)(*(void *)(v65
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkAttrs)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v42 = v65;
  }
  if (*(void *)(*(void *)(v42
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pkAttrs)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  unint64_t v43 = *(void *)(v65
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype
                  + 8);
  uint64_t v44 = HIBYTE(v43) & 0xF;
  if ((v43 & 0x2000000000000000) == 0) {
    uint64_t v44 = *(void *)(v65
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype) & 0xFFFFFFFFFFFFLL;
  if (v44)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v45 = v65;
    if (v1) {
      return result;
    }
  }
  else
  {
    uint64_t v45 = v65;
  }
  unint64_t v46 = *(void *)(v45
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction
                  + 8);
  uint64_t v47 = HIBYTE(v46) & 0xF;
  if ((v46 & 0x2000000000000000) == 0) {
    uint64_t v47 = *(void *)(v45
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction) & 0xFFFFFFFFFFFFLL;
  if (v47)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v48 = v65;
    if (v1) {
      return result;
    }
  }
  else
  {
    uint64_t v48 = v65;
  }
  unint64_t v49 = *(void *)(v48
                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction
                  + 8);
  uint64_t v50 = HIBYTE(v49) & 0xF;
  if ((v49 & 0x2000000000000000) == 0) {
    uint64_t v50 = *(void *)(v48
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction) & 0xFFFFFFFFFFFFLL;
  if (v50)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v51 = v65;
    if (v1) {
      return result;
    }
  }
  else
  {
    uint64_t v51 = v65;
  }
  if (*(void *)(*(void *)(v51
                             + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldConpfeqop)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v52 = v65;
    if (v1) {
      return result;
    }
  }
  else
  {
    uint64_t v52 = v65;
  }
  uint64_t result = *(unsigned int *)(v52
                           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldPktableOid);
  if (result)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    uint64_t v53 = v65;
    if (v1) {
      return result;
    }
  }
  else
  {
    uint64_t v53 = v65;
  }
  if (*(unsigned char *)(v53
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipValidation) == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    uint64_t v54 = v65;
    if (v1) {
      return result;
    }
  }
  else
  {
    uint64_t v54 = v65;
  }
  if (*(unsigned char *)(v54
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initiallyValid) == 1)
    return dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
  return result;
}

uint64_t closure #1 in static PgQuery_Constraint.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v70 = *(void *)(RangeVar - 8);
  uint64_t v71 = RangeVar;
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v67 = (uint64_t)v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v69 = (uint64_t)v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?));
  MEMORY[0x1F4188790](v68);
  uint64_t v72 = (uint64_t)v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v12 = (char *)v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v16 = (char *)v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)v64 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?));
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  char v22 = (char *)v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)v64 - v23;
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v26 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 24) == 1)
  {
    switch(v26)
    {
      case 1:
        if (v25 != 1) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 2:
        if (v25 != 2) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 3:
        if (v25 != 3) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 4:
        if (v25 != 4) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 5:
        if (v25 != 5) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 6:
        if (v25 != 6) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 7:
        if (v25 != 7) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 8:
        if (v25 != 8) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 9:
        if (v25 != 9) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 10:
        if (v25 != 10) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 11:
        if (v25 != 11) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 12:
        if (v25 != 12) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 13:
        if (v25 != 13) {
          goto LABEL_49;
        }
        goto LABEL_6;
      case 14:
        if (v25 != 14) {
          goto LABEL_49;
        }
        goto LABEL_6;
      default:
        if (!v25) {
          goto LABEL_6;
        }
        goto LABEL_49;
    }
  }
  if (v25 != v26) {
    goto LABEL_49;
  }
LABEL_6:
  if (*(void *)(a1 + 32) == *(void *)(a2 + 32) && *(void *)(a1 + 40) == *(void *)(a2 + 40)
    || (char v27 = _stringCompareWithSmolCheck(_:_:expecting:)(), v28 = 0, (v27 & 1) != 0))
  {
    if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48)
      || *(unsigned __int8 *)(a1 + 49) != *(unsigned __int8 *)(a2 + 49)
      || *(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52)
      || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56))
    {
      goto LABEL_49;
    }
    uint64_t v65 = (unsigned int (*)(char *, uint64_t, uint64_t))(a2
                                                                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawExpr);
    char v66 = &v24[*(int *)(v19 + 48)];
    outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rawExpr, (uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Node?);
    outlined init with copy of PgQuery_Alias?((uint64_t)v65, (uint64_t)v66, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
    unsigned int v29 = v65(v24, 1, Node);
    v64[1] = v10 + 48;
    if (v29 == 1)
    {
      unsigned int v30 = v65(v66, 1, Node);
      swift_retain();
      swift_retain();
      if (v30 == 1)
      {
        outlined destroy of AnyValue?((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Node?);
        goto LABEL_52;
      }
    }
    else
    {
      outlined init with copy of PgQuery_Alias?((uint64_t)v24, (uint64_t)v18, &demangling cache variable for type metadata for PgQuery_Node?);
      if (v65(v66, 1, Node) != 1)
      {
        outlined init with take of PgQuery_OidList((uint64_t)v66, (uint64_t)v12, type metadata accessor for PgQuery_Node);
        swift_retain();
        swift_retain();
        LODWORD(v66) = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v18, (uint64_t)v12, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
        outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
        outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
        outlined destroy of AnyValue?((uint64_t)v24, &demangling cache variable for type metadata for PgQuery_Node?);
        if ((v66 & 1) == 0) {
          goto LABEL_48;
        }
LABEL_52:
        if ((*(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr) != *(void *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr)
           || *(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr
                        + 8) != *(void *)(a2
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cookedExpr
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_48;
        }
        if ((*(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen) != *(void *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen)
           || *(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen
                        + 8) != *(void *)(a2
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__generatedWhen
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_48;
        }
        uint64_t v34 = *(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__keys);
        uint64_t v35 = *(void *)(a2
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__keys);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        LODWORD(v66) = specialized static Array<A>.== infix(_:_:)(v34, v35);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v66 & 1) == 0) {
          goto LABEL_48;
        }
        uint64_t v36 = *(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__including);
        uint64_t v37 = *(void *)(a2
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__including);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        LODWORD(v66) = specialized static Array<A>.== infix(_:_:)(v36, v37);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v66 & 1) == 0) {
          goto LABEL_48;
        }
        uint64_t v38 = *(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclusions);
        uint64_t v39 = *(void *)(a2
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclusions);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        LODWORD(v66) = specialized static Array<A>.== infix(_:_:)(v38, v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v66 & 1) == 0) {
          goto LABEL_48;
        }
        uint64_t v40 = *(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
        uint64_t v41 = *(void *)(a2
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        LODWORD(v66) = specialized static Array<A>.== infix(_:_:)(v40, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v66 & 1) == 0) {
          goto LABEL_48;
        }
        if ((*(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname) != *(void *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname)
           || *(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname
                        + 8) != *(void *)(a2
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexname
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_48;
        }
        if ((*(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace) != *(void *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace)
           || *(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace
                        + 8) != *(void *)(a2
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexspace
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
          || *(unsigned __int8 *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc) != *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resetDefaultTblspc)
          || (*(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod) != *(void *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod)
           || *(void *)(a1
                        + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                        + 8) != *(void *)(a2
                                          + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod
                                          + 8))
          && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          goto LABEL_48;
        }
        uint64_t v42 = a2
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
        uint64_t v43 = (uint64_t)&v22[*(int *)(v19 + 48)];
        outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, (uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
        outlined init with copy of PgQuery_Alias?(v42, v43, &demangling cache variable for type metadata for PgQuery_Node?);
        uint64_t v44 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v65;
        if (v65(v22, 1, Node) == 1)
        {
          if (v44(v43, 1, Node) == 1)
          {
            outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_79:
            uint64_t v46 = a2
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pktable;
            uint64_t v47 = v72;
            uint64_t v48 = v72 + *(int *)(v68 + 48);
            outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pktable, v72, &demangling cache variable for type metadata for PgQuery_RangeVar?);
            outlined init with copy of PgQuery_Alias?(v46, v48, &demangling cache variable for type metadata for PgQuery_RangeVar?);
            unint64_t v49 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v70 + 48);
            if (v49(v47, 1, v71) == 1)
            {
              if (v49(v48, 1, v71) == 1)
              {
                outlined destroy of AnyValue?(v72, &demangling cache variable for type metadata for PgQuery_RangeVar?);
LABEL_86:
                uint64_t v53 = *(void *)(a1
                                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkAttrs);
                uint64_t v54 = *(void *)(a2
                                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkAttrs);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                char v55 = specialized static Array<A>.== infix(_:_:)(v53, v54);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v55)
                {
                  uint64_t v56 = *(void *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pkAttrs);
                  uint64_t v57 = *(void *)(a2
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__pkAttrs);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  char v58 = specialized static Array<A>.== infix(_:_:)(v56, v57);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v58 & 1) != 0
                    && (*(void *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype) == *(void *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype)
                     && *(void *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype
                                  + 8) == *(void *)(a2
                                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkMatchtype
                                                    + 8)
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    && (*(void *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction) == *(void *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction)
                     && *(void *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction
                                  + 8) == *(void *)(a2
                                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkUpdAction
                                                    + 8)
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    && (*(void *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction) == *(void *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction)
                     && *(void *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction
                                  + 8) == *(void *)(a2
                                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fkDelAction
                                                    + 8)
                     || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
                  {
                    uint64_t v59 = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldConpfeqop);
                    uint64_t v60 = *(void *)(a2
                                    + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldConpfeqop);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    char v61 = specialized static Array<A>.== infix(_:_:)(v59, v60);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v61 & 1) != 0
                      && *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldPktableOid) == *(_DWORD *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__oldPktableOid)
                      && *(unsigned __int8 *)(a1
                                            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipValidation) == *(unsigned __int8 *)(a2 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipValidation))
                    {
                      char v62 = *(unsigned char *)(a1
                                     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initiallyValid);
                      swift_release();
                      char v63 = *(unsigned char *)(a2
                                     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_ConstraintP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__initiallyValid);
                      swift_release();
                      char v28 = v62 ^ v63 ^ 1;
                      return v28 & 1;
                    }
                  }
                }
                goto LABEL_48;
              }
            }
            else
            {
              outlined init with copy of PgQuery_Alias?(v72, v69, &demangling cache variable for type metadata for PgQuery_RangeVar?);
              if (v49(v48, 1, v71) != 1)
              {
                uint64_t v50 = v67;
                outlined init with take of PgQuery_OidList(v48, v67, type metadata accessor for PgQuery_RangeVar);
                uint64_t v51 = v69;
                char v52 = specialized static PgQuery_RangeVar.== infix(_:_:)(v69, v50);
                outlined destroy of PgQuery_Alias(v50, type metadata accessor for PgQuery_RangeVar);
                outlined destroy of PgQuery_Alias(v51, type metadata accessor for PgQuery_RangeVar);
                outlined destroy of AnyValue?(v72, &demangling cache variable for type metadata for PgQuery_RangeVar?);
                if (v52) {
                  goto LABEL_86;
                }
LABEL_48:
                swift_release();
                swift_release();
LABEL_49:
                char v28 = 0;
                return v28 & 1;
              }
              outlined destroy of PgQuery_Alias(v69, type metadata accessor for PgQuery_RangeVar);
            }
            uint64_t v31 = &demangling cache variable for type metadata for (PgQuery_RangeVar?, PgQuery_RangeVar?);
            uint64_t v32 = v72;
LABEL_47:
            outlined destroy of AnyValue?(v32, v31);
            goto LABEL_48;
          }
        }
        else
        {
          outlined init with copy of PgQuery_Alias?((uint64_t)v22, (uint64_t)v16, &demangling cache variable for type metadata for PgQuery_Node?);
          if (v44(v43, 1, Node) != 1)
          {
            outlined init with take of PgQuery_OidList(v43, (uint64_t)v12, type metadata accessor for PgQuery_Node);
            char v45 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)((uint64_t)v16, (uint64_t)v12, type metadata accessor for PgQuery_Node, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Node.== infix(_:_:));
            outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Node);
            outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
            outlined destroy of AnyValue?((uint64_t)v22, &demangling cache variable for type metadata for PgQuery_Node?);
            if ((v45 & 1) == 0) {
              goto LABEL_48;
            }
            goto LABEL_79;
          }
          outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node);
        }
        uint64_t v31 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
        uint64_t v32 = (uint64_t)v22;
        goto LABEL_47;
      }
      swift_retain();
      swift_retain();
      outlined destroy of PgQuery_Alias((uint64_t)v18, type metadata accessor for PgQuery_Node);
    }
    uint64_t v31 = &demangling cache variable for type metadata for (PgQuery_Node?, PgQuery_Node?);
    uint64_t v32 = (uint64_t)v24;
    goto LABEL_47;
  }
  return v28 & 1;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Constraint@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_Constraint._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_Constraint()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_Constraint(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, (void (*)(uint64_t))type metadata accessor for PgQuery_Constraint);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Constraint@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Constraint._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_Constraint(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, (void (*)(uint64_t))type metadata accessor for PgQuery_Constraint);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Constraint(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Constraint and conformance PgQuery_Constraint, (void (*)(uint64_t))type metadata accessor for PgQuery_Constraint);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_Constraint(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_Constraint, closure #1 in static PgQuery_Constraint.== infix(_:_:)) & 1;
}

uint64_t PgQuery_DefElem._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_DefElem._StorageClass()
{
  return type metadata accessor for PgQuery_DefElem._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_DefElem._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DefElem._StorageClass);
}

void type metadata completion function for PgQuery_DefElem._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_DefElem.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_DefElem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_DefElem._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = (void *)swift_retain();
    uint64_t v6 = specialized PgQuery_DefElem._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
        case 2:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 4:
          lazy protocol witness table accessor for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_DefElem.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v17 = (uint64_t)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(int *)(type metadata accessor for PgQuery_DefElem(0) + 20);
  uint64_t v16 = v0;
  char v8 = *(void **)(v0 + v7);
  unint64_t v9 = v8[3];
  if ((v9 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(v9) & 0xF;
  }
  else {
    uint64_t v10 = v8[2] & 0xFFFFFFFFFFFFLL;
  }
  swift_retain();
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  unint64_t v11 = v8[5];
  uint64_t v12 = HIBYTE(v11) & 0xF;
  if ((v11 & 0x2000000000000000) == 0) {
    uint64_t v12 = v8[4] & 0xFFFFFFFFFFFFLL;
  }
  if (v12)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?((uint64_t)v8+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v4, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v13 = v17;
    outlined init with take of PgQuery_OidList((uint64_t)v4, v17, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_Node);
    if (v1) {
      return swift_release();
    }
  }
  if (*(void *)((char *)v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction))
  {
    char v14 = *((unsigned char *)v8
          + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction
          + 8);
    uint64_t v18 = *(void *)((char *)v8
                    + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction);
    char v19 = v14;
    lazy protocol witness table accessor for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)((char *)v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_DefElem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_DefElem._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_DefElem()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_DefElem()
{
  return PgQuery_DefElem.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_DefElem()
{
  return PgQuery_DefElem.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_DefElem(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, (void (*)(uint64_t))type metadata accessor for PgQuery_DefElem);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DefElem@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DefElem._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_DefElem(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, (void (*)(uint64_t))type metadata accessor for PgQuery_DefElem);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DefElem(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefElem and conformance PgQuery_DefElem, (void (*)(uint64_t))type metadata accessor for PgQuery_DefElem);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RangeTblEntry._StorageClass.init()()
{
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(_DWORD *)(v0 + 28) = 0;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0xE000000000000000;
  *(_DWORD *)(v0 + 48) = 0;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample;
  uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TableSampleClause - 8) + 56))(v1, 1, 1, TableSampleClause);
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
  uint64_t Query = type metadata accessor for PgQuery_Query(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Query - 8) + 56))(v3, 1, 1, Query);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier) = 0;
  uint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype;
  *(void *)uint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols) = 0;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols) = v6;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols) = v6;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions) = v6;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality) = 0;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc;
  uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TableFunc - 8) + 56))(v7, 1, 1, TableFunc);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists) = v6;
  unint64_t v9 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename);
  *unint64_t v9 = 0;
  v9[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes) = v6;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods) = v6;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations) = v6;
  uint64_t v10 = (void *)(v0
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname);
  *uint64_t v10 = 0;
  v10[1] = 0xE000000000000000;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples) = 0;
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 56);
  v13(v11, 1, 1, Alias);
  v13(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref, 1, 1, Alias);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols) = v6;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols) = v6;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols) = v6;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols) = v6;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals) = v6;
  return v0;
}

uint64_t PgQuery_RangeTblEntry._StorageClass.init(copying:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 1;
  *(_DWORD *)(v1 + 28) = 0;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0xE000000000000000;
  *(_DWORD *)(v1 + 48) = 0;
  uint64_t v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample;
  uint64_t v30 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample;
  uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TableSampleClause - 8) + 56))(v3, 1, 1, TableSampleClause);
  uint64_t v5 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
  uint64_t v28 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
  uint64_t Query = type metadata accessor for PgQuery_Query(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Query - 8) + 56))(v5, 1, 1, Query);
  uint64_t v26 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier) = 0;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  uint64_t v27 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols) = 0;
  uint64_t v25 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars) = MEMORY[0x1E4FBC860];
  uint64_t v29 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols) = v8;
  uint64_t v31 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols) = v8;
  uint64_t v33 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions) = v8;
  uint64_t v35 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality) = 0;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc;
  uint64_t v34 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc;
  uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TableFunc - 8) + 56))(v9, 1, 1, TableFunc);
  uint64_t v32 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists) = v8;
  uint64_t v11 = (void *)(v1
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename);
  void *v11 = 0;
  v11[1] = 0xE000000000000000;
  uint64_t v38 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup) = 0;
  uint64_t v37 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference) = 0;
  uint64_t v36 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes) = v8;
  uint64_t v39 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods) = v8;
  uint64_t v40 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations) = v8;
  uint64_t v12 = (void *)(v1
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname);
  *uint64_t v12 = 0;
  v12[1] = 0xE000000000000000;
  uint64_t v50 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples) = 0;
  uint64_t v13 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  uint64_t v48 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v15 = *(void (**)(void))(*(void *)(Alias - 8) + 56);
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v15)(v13, 1, 1, Alias);
  uint64_t v46 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref;
  v15();
  uint64_t v45 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral) = 0;
  uint64_t v44 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh) = 0;
  uint64_t v43 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl) = 0;
  uint64_t v42 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms) = 0;
  uint64_t v41 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser) = 0;
  uint64_t v16 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols) = v8;
  uint64_t v47 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols) = v8;
  uint64_t v49 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols) = v8;
  uint64_t v51 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols) = v8;
  uint64_t v17 = OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals) = v8;
  char v18 = *(unsigned char *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(unsigned char *)(v1 + 24) = v18;
  *(_DWORD *)(v1 + 28) = *(_DWORD *)(a1 + 28);
  uint64_t v19 = *(void *)(a1 + 40);
  *(void *)(v1 + 32) = *(void *)(a1 + 32);
  *(void *)(v1 + 40) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + 48) = *(_DWORD *)(a1 + 48);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample, v30, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, v28, &demangling cache variable for type metadata for PgQuery_Query?);
  *(unsigned char *)(v1 + v26) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier);
  char v20 = *(unsigned char *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype
                 + 8);
  *(void *)uint64_t v7 = *(void *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype);
  *(unsigned char *)(v7 + 8) = v20;
  *(_DWORD *)(v1 + v27) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols);
  *(void *)(v1 + v25) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v29) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v31) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v33) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + v35) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc, v34, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  *(void *)(v1 + v32) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename
                  + 8);
  void *v11 = *(void *)(a1
                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename);
  v11[1] = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(v1 + v38) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup);
  *(unsigned char *)(v1 + v37) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference);
  *(void *)(v1 + v36) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v39) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v40) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname
                  + 8);
  *uint64_t v12 = *(void *)(a1
                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname);
  v12[1] = v22;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v50) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v48, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref, v46, &demangling cache variable for type metadata for PgQuery_Alias?);
  *(unsigned char *)(v1 + v45) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral);
  *(unsigned char *)(v1 + v44) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh);
  *(unsigned char *)(v1 + v43) = *(unsigned char *)(a1
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl);
  *(_DWORD *)(v1 + v42) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms);
  *(_DWORD *)(v1 + v41) = *(_DWORD *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser);
  *(void *)(v1 + v16) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v47) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v49) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v51) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals);
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v1 + v17) = v23;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_RangeTblEntry._StorageClass.deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, &demangling cache variable for type metadata for PgQuery_Query?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref, &demangling cache variable for type metadata for PgQuery_Alias?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PgQuery_RangeTblEntry._StorageClass.__deallocating_deinit()
{
  return PgQuery_TableFunc._StorageClass.__deallocating_deinit(PgQuery_RangeTblEntry._StorageClass.deinit);
}

uint64_t PgQuery_TableFunc._StorageClass.__deallocating_deinit(uint64_t (*a1)(void))
{
  uint64_t v1 = a1();
  uint64_t v2 = *(unsigned int *)(*(void *)v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(*(void *)v1 + 52);

  return MEMORY[0x1F4186488](v1, v2, v3);
}

uint64_t ObjC metadata update function for PgQuery_RangeTblEntry._StorageClass()
{
  return type metadata accessor for PgQuery_RangeTblEntry._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RangeTblEntry._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTblEntry._StorageClass);
}

void type metadata completion function for PgQuery_RangeTblEntry._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TableSampleClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Query?, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);
    if (v1 <= 0x3F)
    {
      type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TableFunc?, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);
      if (v2 <= 0x3F)
      {
        type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Alias?, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

uint64_t type metadata accessor for PgQuery_TableSampleClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TableSampleClause);
}

uint64_t type metadata accessor for PgQuery_Query(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Query);
}

uint64_t type metadata accessor for PgQuery_TableFunc(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TableFunc);
}

uint64_t PgQuery_RangeTblEntry.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RangeTblEntry, (void (*)(void))type metadata accessor for PgQuery_RangeTblEntry._StorageClass, PgQuery_RangeTblEntry._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RangeTblEntry.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RangeTblEntry.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_RTEKind and conformance PgQuery_RTEKind();
          goto LABEL_9;
        case 2:
        case 18:
        case 30:
        case 31:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_20;
        case 3:
        case 17:
        case 23:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_20;
        case 4:
        case 9:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_20;
        case 5:
          type metadata accessor for PgQuery_TableSampleClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);
          goto LABEL_15;
        case 6:
          type metadata accessor for PgQuery_Query(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);
          goto LABEL_15;
        case 7:
        case 14:
        case 19:
        case 27:
        case 28:
        case 29:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          goto LABEL_20;
        case 8:
          lazy protocol witness table accessor for type PgQuery_JoinType and conformance PgQuery_JoinType();
LABEL_9:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_20;
        case 10:
        case 11:
        case 12:
        case 13:
        case 16:
        case 20:
        case 21:
        case 22:
        case 36:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_20;
        case 15:
          type metadata accessor for PgQuery_TableFunc(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);
          goto LABEL_15;
        case 24:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularDoubleField(value:)();
          goto LABEL_20;
        case 25:
        case 26:
          type metadata accessor for PgQuery_Alias(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
LABEL_15:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_20;
        case 32:
        case 33:
        case 34:
        case 35:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
LABEL_20:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RangeTblEntry.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Node.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_RangeTblEntry, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RangeTblEntry.traverse<A>(visitor:));
}

uint64_t PgQuery_Node.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  a4(0);
  uint64_t v10 = swift_retain();
  a5(v10, a1, a2, a3);
  uint64_t result = swift_release();
  if (!v5) {
    return UnknownStorage.traverse<A>(visitor:)();
  }
  return result;
}

uint64_t closure #1 in PgQuery_RangeTblEntry.traverse<A>(visitor:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v4 = MEMORY[0x1F4188790](v3 - 8);
  uint64_t v51 = (uint64_t)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v52 = (uint64_t)&v47 - v6;
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v50 = *(void *)(Alias - 8);
  uint64_t v7 = MEMORY[0x1F4188790](Alias);
  uint64_t v48 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v49 = (uint64_t)&v47 - v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableFunc?);
  MEMORY[0x1F4188790](v10 - 8);
  char v63 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  uint64_t v55 = *(void *)(TableFunc - 8);
  uint64_t v56 = TableFunc;
  MEMORY[0x1F4188790](TableFunc);
  uint64_t v54 = (uint64_t)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Query?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v58 = (uint64_t)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Query = type metadata accessor for PgQuery_Query(0);
  uint64_t v57 = *(void *)(Query - 8);
  MEMORY[0x1F4188790](Query);
  uint64_t v60 = (uint64_t)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  uint64_t v21 = *(void *)(TableSampleClause - 8);
  MEMORY[0x1F4188790](TableSampleClause);
  uint64_t v23 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 16))
  {
    char v24 = *(unsigned char *)(a1 + 24);
    uint64_t v61 = *(void *)(a1 + 16);
    char v62 = v24;
    lazy protocol witness table accessor for type PgQuery_RTEKind and conformance PgQuery_RTEKind();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1) {
      return result;
    }
  }
  if (*(_DWORD *)(a1 + 28))
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v1) {
      return result;
    }
  }
  uint64_t v26 = v1;
  uint64_t v27 = *(void *)(a1 + 32);
  unint64_t v28 = *(void *)(a1 + 40);
  uint64_t v47 = a1;
  uint64_t v29 = HIBYTE(v28) & 0xF;
  if ((v28 & 0x2000000000000000) == 0) {
    uint64_t v29 = v27 & 0xFFFFFFFFFFFFLL;
  }
  if (v29)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v26) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v30 = v26;
  if (*(_DWORD *)(v47 + 48))
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v26) {
      return result;
    }
  }
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample, (uint64_t)v19, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, TableSampleClause) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v19, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v19, (uint64_t)v23, type metadata accessor for PgQuery_TableSampleClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v26) {
      return outlined destroy of PgQuery_Alias((uint64_t)v23, type metadata accessor for PgQuery_TableSampleClause);
    }
    outlined destroy of PgQuery_Alias((uint64_t)v23, type metadata accessor for PgQuery_TableSampleClause);
  }
  uint64_t v31 = v47;
  uint64_t v32 = v58;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, v58, &demangling cache variable for type metadata for PgQuery_Query?);
  int v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v32, 1, Query);
  uint64_t v34 = (uint64_t)v63;
  uint64_t v35 = v60;
  if (v33 == 1)
  {
    outlined destroy of AnyValue?(v32, &demangling cache variable for type metadata for PgQuery_Query?);
  }
  else
  {
    outlined init with take of PgQuery_OidList(v32, v60, type metadata accessor for PgQuery_Query);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v26) {
      return outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Query);
    }
    outlined destroy of PgQuery_Alias(v35, type metadata accessor for PgQuery_Query);
  }
  if (*(unsigned char *)(v31
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier) == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v26) {
      return result;
    }
  }
  uint64_t v36 = v47;
  if (*(void *)(v47
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype))
  {
    char v37 = *(unsigned char *)(v47
                   + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype
                   + 8);
    uint64_t v61 = *(void *)(v47
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype);
    char v62 = v37;
    lazy protocol witness table accessor for type PgQuery_JoinType and conformance PgQuery_JoinType();
    uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v26) {
      return result;
    }
  }
  if (*(_DWORD *)(v36
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols))
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v26) {
      return result;
    }
  }
  if (*(void *)(*(void *)(v36
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v26) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v36
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v26) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v36
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v26) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v36
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v26) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v36
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality) == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v26) {
      return result;
    }
  }
  uint64_t v38 = v47;
  outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc, v34, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v34, 1, v56) == 1)
  {
    outlined destroy of AnyValue?(v34, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  }
  else
  {
    uint64_t v39 = v54;
    outlined init with take of PgQuery_OidList(v34, v54, type metadata accessor for PgQuery_TableFunc);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    if (v30) {
      return outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_TableFunc);
    }
    outlined destroy of PgQuery_Alias(v39, type metadata accessor for PgQuery_TableFunc);
  }
  if (*(void *)(*(void *)(v38
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v30) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  unint64_t v40 = *(void *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename
                  + 8);
  uint64_t v41 = HIBYTE(v40) & 0xF;
  if ((v40 & 0x2000000000000000) == 0) {
    uint64_t v41 = *(void *)(v47
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename) & 0xFFFFFFFFFFFFLL;
  if (v41)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v30) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(_DWORD *)(v47
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup))
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v30) {
      return result;
    }
  }
  if (*(unsigned char *)(v47
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference) == 1)
  {
    uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v30) {
      return result;
    }
  }
  if (*(void *)(*(void *)(v47
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v30) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v47
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v30) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v47
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations)
                 + 16))
  {
    type metadata accessor for PgQuery_Node(0);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (!v30)
    {
      swift_bridgeObjectRelease();
      goto LABEL_69;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_69:
  unint64_t v42 = *(void *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname
                  + 8);
  uint64_t v43 = HIBYTE(v42) & 0xF;
  if ((v42 & 0x2000000000000000) == 0) {
    uint64_t v43 = *(void *)(v47
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname) & 0xFFFFFFFFFFFFLL;
  if (v43)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v30) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  if (*(double *)(v47
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples) == 0.0
    || (uint64_t result = dispatch thunk of Visitor.visitSingularDoubleField(value:fieldNumber:)(), !v30))
  {
    uint64_t v44 = v52;
    outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v52, &demangling cache variable for type metadata for PgQuery_Alias?);
    uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
    if (v45(v44, 1, Alias) == 1)
    {
      outlined destroy of AnyValue?(v52, &demangling cache variable for type metadata for PgQuery_Alias?);
    }
    else
    {
      outlined init with take of PgQuery_OidList(v52, v49, type metadata accessor for PgQuery_Alias);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      if (v30) {
        return outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Alias);
      }
      outlined destroy of PgQuery_Alias(v49, type metadata accessor for PgQuery_Alias);
    }
    uint64_t v46 = v51;
    outlined init with copy of PgQuery_Alias?(v47+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref, v51, &demangling cache variable for type metadata for PgQuery_Alias?);
    if (v45(v46, 1, Alias) == 1)
    {
      outlined destroy of AnyValue?(v51, &demangling cache variable for type metadata for PgQuery_Alias?);
    }
    else
    {
      outlined init with take of PgQuery_OidList(v51, v48, type metadata accessor for PgQuery_Alias);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      if (v30) {
        return outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Alias);
      }
      outlined destroy of PgQuery_Alias(v48, type metadata accessor for PgQuery_Alias);
    }
    if (*(unsigned char *)(v47
                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v30))
    {
      if (*(unsigned char *)(v47
                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v30))
      {
        if (*(unsigned char *)(v47
                      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v30))
        {
          if (!*(_DWORD *)(v47
                          + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms)
            || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v30))
          {
            uint64_t result = *(unsigned int *)(v47
                                     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser);
            if (!result
              || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v30))
            {
              if (*(void *)(*(void *)(v47
                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols)
                             + 16))
              {
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
                if (v30) {
                  return swift_bridgeObjectRelease();
                }
                uint64_t result = swift_bridgeObjectRelease();
              }
              if (*(void *)(*(void *)(v47
                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols)
                             + 16))
              {
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
                if (v30) {
                  return swift_bridgeObjectRelease();
                }
                uint64_t result = swift_bridgeObjectRelease();
              }
              if (*(void *)(*(void *)(v47
                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols)
                             + 16))
              {
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
                if (v30) {
                  return swift_bridgeObjectRelease();
                }
                uint64_t result = swift_bridgeObjectRelease();
              }
              if (*(void *)(*(void *)(v47
                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols)
                             + 16))
              {
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)();
                if (v30) {
                  return swift_bridgeObjectRelease();
                }
                uint64_t result = swift_bridgeObjectRelease();
              }
              if (*(void *)(*(void *)(v47
                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals)
                             + 16))
              {
                type metadata accessor for PgQuery_Node(0);
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
                swift_bridgeObjectRetain();
                dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
                return swift_bridgeObjectRelease();
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t closure #1 in static PgQuery_RangeTblEntry.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v125 = *(void *)(Alias - 8);
  uint64_t v126 = Alias;
  uint64_t v5 = MEMORY[0x1F4188790](Alias);
  uint64_t v122 = (uint64_t *)((char *)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v119 = (uint64_t *)((char *)&v115 - v7);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  char v120 = (uint64_t *)((char *)&v115 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v118 = (uint64_t *)((char *)&v115 - v11);
  uint64_t v124 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?));
  uint64_t v12 = MEMORY[0x1F4188790](v124);
  uint64_t v121 = (uint64_t)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v123 = (uint64_t)&v115 - v14;
  uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  uint64_t v130 = *(void *)(TableFunc - 8);
  uint64_t v131 = TableFunc;
  MEMORY[0x1F4188790](TableFunc);
  uint64_t v127 = (uint64_t)&v115 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableFunc?);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v129 = (uint64_t)&v115 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TableFunc?, PgQuery_TableFunc?));
  MEMORY[0x1F4188790](v128);
  uint64_t v132 = (uint64_t)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Query = type metadata accessor for PgQuery_Query(0);
  uint64_t v135 = *(void *)(Query - 8);
  MEMORY[0x1F4188790](Query);
  uint64_t v133 = (uint64_t)&v115 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Query?);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v134 = (uint64_t)&v115 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_Query?, PgQuery_Query?));
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
  uint64_t v28 = *(void *)(TableSampleClause - 8);
  MEMORY[0x1F4188790](TableSampleClause);
  uint64_t v30 = (char *)&v115 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableSampleClause?);
  MEMORY[0x1F4188790](v31 - 8);
  int v33 = (char *)&v115 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (PgQuery_TableSampleClause?, PgQuery_TableSampleClause?));
  MEMORY[0x1F4188790](v34);
  uint64_t v35 = a1;
  char v37 = (char *)&v115 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = *(void *)(v35 + 16);
  uint64_t v39 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 24) == 1)
  {
    switch(v39)
    {
      case 1:
        if (v38 == 1) {
          goto LABEL_6;
        }
        goto LABEL_31;
      case 2:
        if (v38 == 2) {
          goto LABEL_6;
        }
        goto LABEL_31;
      case 3:
        if (v38 == 3) {
          goto LABEL_6;
        }
        goto LABEL_31;
      case 4:
        if (v38 == 4) {
          goto LABEL_6;
        }
        goto LABEL_31;
      case 5:
        if (v38 == 5) {
          goto LABEL_6;
        }
        goto LABEL_31;
      case 6:
        if (v38 == 6) {
          goto LABEL_6;
        }
        goto LABEL_31;
      case 7:
        if (v38 == 7) {
          goto LABEL_6;
        }
        goto LABEL_31;
      case 8:
        if (v38 != 8) {
          goto LABEL_31;
        }
        goto LABEL_6;
      case 9:
        if (v38 == 9) {
          goto LABEL_6;
        }
        goto LABEL_31;
      default:
        if (!v38) {
          goto LABEL_6;
        }
        goto LABEL_31;
    }
  }
  if (v38 != v39) {
    goto LABEL_31;
  }
LABEL_6:
  if (*(_DWORD *)(v35 + 28) != *(_DWORD *)(a2 + 28))
  {
LABEL_31:
    char v46 = 0;
    return v46 & 1;
  }
  uint64_t v40 = *(void *)(v35 + 32);
  uint64_t v41 = *(void *)(v35 + 40);
  uint64_t v42 = *(void *)(a2 + 32);
  uint64_t v43 = *(void *)(a2 + 40);
  uint64_t v117 = a2;
  if (v40 == v42 && v41 == v43
    || (v44 = v35, v45 = _stringCompareWithSmolCheck(_:_:expecting:)(), uint64_t v35 = v44, v46 = 0, (v45 & 1) != 0))
  {
    if (*(_DWORD *)(v35 + 48) == *(_DWORD *)(v117 + 48))
    {
      uint64_t v47 = v117
          + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample;
      uint64_t v48 = (uint64_t)&v37[*(int *)(v34 + 48)];
      uint64_t v115 = v35;
      outlined init with copy of PgQuery_Alias?(v35+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablesample, (uint64_t)v37, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
      uint64_t v116 = v48;
      outlined init with copy of PgQuery_Alias?(v47, v48, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
      uint64_t v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
      if (v49((uint64_t)v37, 1, TableSampleClause) == 1)
      {
        int v50 = v49(v116, 1, TableSampleClause);
        uint64_t v51 = v115;
        swift_retain();
        uint64_t v52 = v117;
        swift_retain();
        if (v50 == 1)
        {
          outlined destroy of AnyValue?((uint64_t)v37, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
LABEL_37:
          uint64_t v57 = v52
              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
          uint64_t v58 = (uint64_t)&v26[*(int *)(v24 + 48)];
          outlined init with copy of PgQuery_Alias?(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery, (uint64_t)v26, &demangling cache variable for type metadata for PgQuery_Query?);
          outlined init with copy of PgQuery_Alias?(v57, v58, &demangling cache variable for type metadata for PgQuery_Query?);
          uint64_t v59 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
          if (v59((uint64_t)v26, 1, Query) == 1)
          {
            if (v59(v58, 1, Query) == 1)
            {
              outlined destroy of AnyValue?((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_Query?);
LABEL_47:
              if (*(unsigned __int8 *)(v51
                                      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier) == *(unsigned __int8 *)(v52 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityBarrier)
                && (specialized == infix<A>(_:_:)(*(void *)(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype), *(unsigned __int8 *)(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype+ 8), *(void *)(v52+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype), *(unsigned __int8 *)(v52+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__jointype+ 8)) & 1) != 0&& *(_DWORD *)(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols) == *(_DWORD *)(v52 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinmergedcols))
              {
                uint64_t v63 = *(void *)(v51
                                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars);
                uint64_t v64 = *(void *)(v52
                                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinaliasvars);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                char v65 = specialized static Array<A>.== infix(_:_:)(v63, v64);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v65)
                {
                  uint64_t v66 = *(void *)(v51
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols);
                  uint64_t v67 = *(void *)(v52
                                  + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinleftcols);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  char v68 = specialized static Array<A>.== infix(_:_:)(v66, v67);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (v68)
                  {
                    uint64_t v69 = *(void *)(v51
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols);
                    uint64_t v70 = *(void *)(v52
                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__joinrightcols);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    char v71 = specialized static Array<A>.== infix(_:_:)(v69, v70);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (v71)
                    {
                      uint64_t v72 = *(void *)(v51
                                      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions);
                      uint64_t v73 = *(void *)(v52
                                      + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__functions);
                      swift_bridgeObjectRetain();
                      swift_bridgeObjectRetain();
                      char v74 = specialized static Array<A>.== infix(_:_:)(v72, v73);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v74 & 1) == 0) {
                        goto LABEL_111;
                      }
                      if (*(unsigned __int8 *)(v51
                                              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality) == *(unsigned __int8 *)(v52 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcordinality))
                      {
                        uint64_t v75 = v117
                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc;
                        uint64_t v76 = v132;
                        uint64_t v77 = v132 + *(int *)(v128 + 48);
                        outlined init with copy of PgQuery_Alias?(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tablefunc, v132, &demangling cache variable for type metadata for PgQuery_TableFunc?);
                        outlined init with copy of PgQuery_Alias?(v75, v77, &demangling cache variable for type metadata for PgQuery_TableFunc?);
                        uint64_t v78 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48);
                        if (v78(v76, 1, v131) == 1)
                        {
                          if (v78(v77, 1, v131) == 1)
                          {
                            outlined destroy of AnyValue?(v132, &demangling cache variable for type metadata for PgQuery_TableFunc?);
                            goto LABEL_63;
                          }
                        }
                        else
                        {
                          outlined init with copy of PgQuery_Alias?(v132, v129, &demangling cache variable for type metadata for PgQuery_TableFunc?);
                          if (v78(v77, 1, v131) != 1)
                          {
                            uint64_t v81 = v127;
                            outlined init with take of PgQuery_OidList(v77, v127, type metadata accessor for PgQuery_TableFunc);
                            uint64_t v82 = v129;
                            char v83 = specialized static PgQuery_TableFunc.== infix(_:_:)(v129, v81);
                            outlined destroy of PgQuery_Alias(v81, type metadata accessor for PgQuery_TableFunc);
                            outlined destroy of PgQuery_Alias(v82, type metadata accessor for PgQuery_TableFunc);
                            outlined destroy of AnyValue?(v132, &demangling cache variable for type metadata for PgQuery_TableFunc?);
                            if ((v83 & 1) == 0) {
                              goto LABEL_111;
                            }
LABEL_63:
                            uint64_t v84 = *(void *)(v51
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists);
                            uint64_t v85 = *(void *)(v117
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__valuesLists);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            char v86 = specialized static Array<A>.== infix(_:_:)(v84, v85);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((v86 & 1) == 0) {
                              goto LABEL_111;
                            }
                            if (*(void *)(v51
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename) != *(void *)(v117 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename)
                              || *(void *)(v51
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename
                                           + 8) != *(void *)(v117
                                                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctename
                                                             + 8))
                            {
                              char v46 = 0;
                              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                                goto LABEL_45;
                              }
                            }
                            if (*(_DWORD *)(v51
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup) != *(_DWORD *)(v117 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctelevelsup))
                              goto LABEL_111;
                            if (*(unsigned __int8 *)(v51
                                                    + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference) != *(unsigned __int8 *)(v117 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selfReference))
                              goto LABEL_111;
                            uint64_t v87 = *(void *)(v51
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes);
                            uint64_t v88 = *(void *)(v117
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypes);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            char v89 = specialized static Array<A>.== infix(_:_:)(v87, v88);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((v89 & 1) == 0) {
                              goto LABEL_111;
                            }
                            uint64_t v90 = *(void *)(v51
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods);
                            uint64_t v91 = *(void *)(v117
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coltypmods);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            char v92 = specialized static Array<A>.== infix(_:_:)(v90, v91);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((v92 & 1) == 0) {
                              goto LABEL_111;
                            }
                            uint64_t v93 = *(void *)(v51
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations);
                            uint64_t v94 = *(void *)(v117
                                            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colcollations);
                            swift_bridgeObjectRetain();
                            swift_bridgeObjectRetain();
                            char v95 = specialized static Array<A>.== infix(_:_:)(v93, v94);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((v95 & 1) == 0) {
                              goto LABEL_111;
                            }
                            if (*(void *)(v51
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname) != *(void *)(v117 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname)
                              || *(void *)(v51
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname
                                           + 8) != *(void *)(v117
                                                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrname
                                                             + 8))
                            {
                              char v46 = 0;
                              if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
                                goto LABEL_45;
                              }
                            }
                            if (*(double *)(v51
                                           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples) != *(double *)(v117 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__enrtuples))
                              goto LABEL_111;
                            uint64_t v96 = v117
                                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
                            uint64_t v97 = v123;
                            uint64_t v98 = v123 + *(int *)(v124 + 48);
                            outlined init with copy of PgQuery_Alias?(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias, v123, &demangling cache variable for type metadata for PgQuery_Alias?);
                            outlined init with copy of PgQuery_Alias?(v96, v98, &demangling cache variable for type metadata for PgQuery_Alias?);
                            uint64_t v99 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48);
                            if (v99(v97, 1, v126) == 1)
                            {
                              if (v99(v98, 1, v126) == 1)
                              {
                                outlined destroy of AnyValue?(v123, &demangling cache variable for type metadata for PgQuery_Alias?);
                                goto LABEL_79;
                              }
                            }
                            else
                            {
                              outlined init with copy of PgQuery_Alias?(v123, (uint64_t)v118, &demangling cache variable for type metadata for PgQuery_Alias?);
                              if (v99(v98, 1, v126) != 1)
                              {
                                uint64_t v105 = v98;
                                uint64_t v106 = v119;
                                outlined init with take of PgQuery_OidList(v105, (uint64_t)v119, type metadata accessor for PgQuery_Alias);
                                if ((*v118 == *v106 && v118[1] == v106[1]
                                   || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                  && (specialized static Array<A>.== infix(_:_:)(v118[2], v119[2]) & 1) != 0)
                                {
                                  uint64_t v108 = v118;
                                  uint64_t v107 = (uint64_t)v119;
                                  type metadata accessor for UnknownStorage();
                                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                                  char v109 = dispatch thunk of static Equatable.== infix(_:_:)();
                                  outlined destroy of PgQuery_Alias(v107, type metadata accessor for PgQuery_Alias);
                                  outlined destroy of PgQuery_Alias((uint64_t)v108, type metadata accessor for PgQuery_Alias);
                                  outlined destroy of AnyValue?(v123, &demangling cache variable for type metadata for PgQuery_Alias?);
                                  if ((v109 & 1) == 0) {
                                    goto LABEL_111;
                                  }
LABEL_79:
                                  uint64_t v100 = v117
                                       + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref;
                                  uint64_t v101 = v121;
                                  uint64_t v102 = v121 + *(int *)(v124 + 48);
                                  outlined init with copy of PgQuery_Alias?(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__eref, v121, &demangling cache variable for type metadata for PgQuery_Alias?);
                                  outlined init with copy of PgQuery_Alias?(v100, v102, &demangling cache variable for type metadata for PgQuery_Alias?);
                                  if (v99(v101, 1, v126) == 1)
                                  {
                                    if (v99(v102, 1, v126) == 1)
                                    {
                                      outlined destroy of AnyValue?(v121, &demangling cache variable for type metadata for PgQuery_Alias?);
LABEL_82:
                                      if (*(unsigned __int8 *)(v51
                                                              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral) == *(unsigned __int8 *)(v117 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lateral)
                                        && *(unsigned __int8 *)(v51
                                                              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh) == *(unsigned __int8 *)(v117 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inh)
                                        && *(unsigned __int8 *)(v51
                                                              + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl) == *(unsigned __int8 *)(v117 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inFromCl)
                                        && *(_DWORD *)(v51
                                                     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms) == *(_DWORD *)(v117 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__requiredPerms)
                                        && *(_DWORD *)(v51
                                                     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser) == *(_DWORD *)(v117 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__checkAsUser)
                                        && specialized static Array<A>.== infix(_:_:)(*(void **)(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols), *(void **)(v117+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectedCols))&& specialized static Array<A>.== infix(_:_:)(*(void **)(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols), *(void **)(v117+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__insertedCols))&& specialized static Array<A>.== infix(_:_:)(*(void **)(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols), *(void **)(v117+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__updatedCols))&& specialized static Array<A>.== infix(_:_:)(*(void **)(v51+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols), *(void **)(v117+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extraUpdatedCols)))
                                      {
                                        uint64_t v103 = *(void *)(v51
                                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals);
                                        uint64_t v104 = *(void *)(v117
                                                         + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_RangeTblEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__securityQuals);
                                        swift_bridgeObjectRetain();
                                        swift_bridgeObjectRetain();
                                        char v46 = specialized static Array<A>.== infix(_:_:)(v103, v104);
                                        swift_bridgeObjectRelease();
                                        swift_bridgeObjectRelease();
                                        goto LABEL_45;
                                      }
LABEL_111:
                                      char v46 = 0;
                                      goto LABEL_45;
                                    }
                                  }
                                  else
                                  {
                                    outlined init with copy of PgQuery_Alias?(v121, (uint64_t)v120, &demangling cache variable for type metadata for PgQuery_Alias?);
                                    if (v99(v102, 1, v126) != 1)
                                    {
                                      uint64_t v110 = v102;
                                      uint64_t v111 = v122;
                                      outlined init with take of PgQuery_OidList(v110, (uint64_t)v122, type metadata accessor for PgQuery_Alias);
                                      if ((*v120 == *v111 && v120[1] == v111[1]
                                         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                                        && (specialized static Array<A>.== infix(_:_:)(v120[2], v122[2]) & 1) != 0)
                                      {
                                        uint64_t v112 = v120;
                                        uint64_t v113 = (uint64_t)v122;
                                        type metadata accessor for UnknownStorage();
                                        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type UnknownStorage and conformance UnknownStorage, MEMORY[0x1E4F70E60]);
                                        char v114 = dispatch thunk of static Equatable.== infix(_:_:)();
                                        outlined destroy of PgQuery_Alias(v113, type metadata accessor for PgQuery_Alias);
                                        outlined destroy of PgQuery_Alias((uint64_t)v112, type metadata accessor for PgQuery_Alias);
                                        outlined destroy of AnyValue?(v121, &demangling cache variable for type metadata for PgQuery_Alias?);
                                        if ((v114 & 1) == 0) {
                                          goto LABEL_111;
                                        }
                                        goto LABEL_82;
                                      }
                                      outlined destroy of PgQuery_Alias((uint64_t)v122, type metadata accessor for PgQuery_Alias);
                                      outlined destroy of PgQuery_Alias((uint64_t)v120, type metadata accessor for PgQuery_Alias);
                                      uint64_t v79 = &demangling cache variable for type metadata for PgQuery_Alias?;
                                      goto LABEL_113;
                                    }
                                    outlined destroy of PgQuery_Alias((uint64_t)v120, type metadata accessor for PgQuery_Alias);
                                  }
                                  uint64_t v79 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
LABEL_113:
                                  uint64_t v80 = v121;
                                  goto LABEL_61;
                                }
                                outlined destroy of PgQuery_Alias((uint64_t)v119, type metadata accessor for PgQuery_Alias);
                                outlined destroy of PgQuery_Alias((uint64_t)v118, type metadata accessor for PgQuery_Alias);
                                uint64_t v79 = &demangling cache variable for type metadata for PgQuery_Alias?;
                                goto LABEL_102;
                              }
                              outlined destroy of PgQuery_Alias((uint64_t)v118, type metadata accessor for PgQuery_Alias);
                            }
                            uint64_t v79 = &demangling cache variable for type metadata for (PgQuery_Alias?, PgQuery_Alias?);
LABEL_102:
                            uint64_t v80 = v123;
                            goto LABEL_61;
                          }
                          outlined destroy of PgQuery_Alias(v129, type metadata accessor for PgQuery_TableFunc);
                        }
                        uint64_t v79 = &demangling cache variable for type metadata for (PgQuery_TableFunc?, PgQuery_TableFunc?);
                        uint64_t v80 = v132;
LABEL_61:
                        outlined destroy of AnyValue?(v80, v79);
                        goto LABEL_111;
                      }
                    }
                  }
                }
              }
LABEL_44:
              char v46 = 0;
LABEL_45:
              swift_release();
              swift_release();
              return v46 & 1;
            }
          }
          else
          {
            uint64_t v60 = v134;
            outlined init with copy of PgQuery_Alias?((uint64_t)v26, v134, &demangling cache variable for type metadata for PgQuery_Query?);
            if (v59(v58, 1, Query) != 1)
            {
              uint64_t v61 = v133;
              outlined init with take of PgQuery_OidList(v58, v133, type metadata accessor for PgQuery_Query);
              char v62 = specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(v60, v61, type metadata accessor for PgQuery_Query, (uint64_t (*)(uint64_t, uint64_t))closure #1 in static PgQuery_Query.== infix(_:_:));
              outlined destroy of PgQuery_Alias(v61, type metadata accessor for PgQuery_Query);
              outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Query);
              outlined destroy of AnyValue?((uint64_t)v26, &demangling cache variable for type metadata for PgQuery_Query?);
              if ((v62 & 1) == 0) {
                goto LABEL_44;
              }
              goto LABEL_47;
            }
            outlined destroy of PgQuery_Alias(v60, type metadata accessor for PgQuery_Query);
          }
          uint64_t v54 = &demangling cache variable for type metadata for (PgQuery_Query?, PgQuery_Query?);
          uint64_t v55 = (uint64_t)v26;
LABEL_43:
          outlined destroy of AnyValue?(v55, v54);
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v51 = v115;
        outlined init with copy of PgQuery_Alias?((uint64_t)v37, (uint64_t)v33, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
        if (v49(v116, 1, TableSampleClause) != 1)
        {
          outlined init with take of PgQuery_OidList(v116, (uint64_t)v30, type metadata accessor for PgQuery_TableSampleClause);
          swift_retain();
          uint64_t v52 = v117;
          swift_retain();
          char v56 = specialized static PgQuery_TableSampleClause.== infix(_:_:)((uint64_t)v33, (uint64_t)v30);
          outlined destroy of PgQuery_Alias((uint64_t)v30, type metadata accessor for PgQuery_TableSampleClause);
          outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_TableSampleClause);
          outlined destroy of AnyValue?((uint64_t)v37, &demangling cache variable for type metadata for PgQuery_TableSampleClause?);
          if ((v56 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_37;
        }
        swift_retain();
        swift_retain();
        outlined destroy of PgQuery_Alias((uint64_t)v33, type metadata accessor for PgQuery_TableSampleClause);
      }
      uint64_t v54 = &demangling cache variable for type metadata for (PgQuery_TableSampleClause?, PgQuery_TableSampleClause?);
      uint64_t v55 = (uint64_t)v37;
      goto LABEL_43;
    }
    goto LABEL_31;
  }
  return v46 & 1;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeTblEntry@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RangeTblEntry._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeTblEntry()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeTblEntry(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblEntry);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeTblEntry@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeTblEntry._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeTblEntry(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblEntry);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeTblEntry(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblEntry and conformance PgQuery_RangeTblEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblEntry);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_RangeTblEntry(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_CoerceToDomainValue.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_RangeTblEntry, closure #1 in static PgQuery_RangeTblEntry.== infix(_:_:)) & 1;
}

uint64_t PgQuery_RangeTblFunction._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v3, 1, 1, Node);
  uint64_t v5 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount) = 0;
  uint64_t v6 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames) = MEMORY[0x1E4FBC860];
  uint64_t v8 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes) = v7;
  uint64_t v9 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods) = v7;
  uint64_t v10 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations) = v7;
  uint64_t v11 = OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams) = v7;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, v3, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v5) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount);
  *(void *)(v1 + v6) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v8) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v9) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v10) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams);
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v1 + v11) = v12;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_RangeTblFunction._StorageClass.__deallocating_deinit()
{
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_RangeTblFunction._StorageClass()
{
  return type metadata accessor for PgQuery_RangeTblFunction._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_RangeTblFunction._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTblFunction._StorageClass);
}

uint64_t PgQuery_RangeTblFunction.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_RangeTblFunction, (void (*)(void))type metadata accessor for PgQuery_RangeTblFunction._StorageClass, PgQuery_RangeTblFunction._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_RangeTblFunction.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_RangeTblFunction.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 3:
        case 4:
        case 5:
        case 6:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 7:
          dispatch thunk of Decoder.decodeRepeatedUInt64Field(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RangeTblFunction.traverse<A>(visitor:)()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v5 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(type metadata accessor for PgQuery_RangeTblFunction(0) + 20);
  uint64_t v14 = v0;
  uint64_t v9 = *(void *)(v0 + v8);
  outlined init with copy of PgQuery_Alias?(v9+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr, (uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, Node) == 1)
  {
    swift_retain();
    outlined destroy of AnyValue?((uint64_t)v3, &demangling cache variable for type metadata for PgQuery_Node?);
    uint64_t v10 = v15;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v3, (uint64_t)v7, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    uint64_t v11 = v15;
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t v10 = v11;
    outlined destroy of PgQuery_Alias((uint64_t)v7, type metadata accessor for PgQuery_Node);
    if (v11) {
      return swift_release();
    }
  }
  if (!*(_DWORD *)(v9
                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount)
    || (dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v10))
  {
    if (!*(void *)(*(void *)(v9
                                + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames)
                    + 16)
      || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
    {
      if (!*(void *)(*(void *)(v9
                                  + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes)
                      + 16)
        || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
      {
        if (!*(void *)(*(void *)(v9
                                    + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods)
                        + 16)
          || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
        {
          if (!*(void *)(*(void *)(v9
                                      + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations)
                          + 16)
            || (lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), swift_bridgeObjectRetain(), dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), swift_bridgeObjectRelease(), !v10))
          {
            if (!*(void *)(*(void *)(v9
                                        + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams)
                            + 16)
              || (swift_bridgeObjectRetain(),
                  dispatch thunk of Visitor.visitPackedUInt64Field(value:fieldNumber:)(),
                  swift_bridgeObjectRelease(),
                  !v10))
            {
              swift_release();
              return UnknownStorage.traverse<A>(visitor:)();
            }
          }
        }
      }
    }
  }
  return swift_release();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RangeTblFunction@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_RangeTblFunction._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RangeTblFunction()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RangeTblFunction()
{
  return PgQuery_RangeTblFunction.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RangeTblFunction(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblFunction);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RangeTblFunction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RangeTblFunction._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RangeTblFunction(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblFunction);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RangeTblFunction(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblFunction and conformance PgQuery_RangeTblFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblFunction);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_TableSampleClause._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = MEMORY[0x1E4FBC860];
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v6, 1, 1, Node);
  *(_DWORD *)(v1 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(v1 + 24) = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v6, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_TableSampleClause._StorageClass.__deallocating_deinit()
{
  return PgQuery_DeclareCursorStmt._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable);
}

uint64_t ObjC metadata update function for PgQuery_TableSampleClause._StorageClass()
{
  return type metadata accessor for PgQuery_TableSampleClause._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_TableSampleClause._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TableSampleClause._StorageClass);
}

void type metadata completion function for PgQuery_TableSampleClause._StorageClass()
{
}

uint64_t PgQuery_TableSampleClause.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for PgQuery_TableSampleClause(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_TableSampleClause._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v0 + v3) = PgQuery_TableSampleClause._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while (1)
    {
      if (v6) {
        return swift_release();
      }
      if (v5 == 1) {
        break;
      }
      if (v5 == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v8 = v2;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_7;
      }
      if (v5 == 3)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v8 = v2;
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
        goto LABEL_7;
      }
LABEL_8:
      uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v8 = v2;
    dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
LABEL_7:
    uint64_t v2 = v8;
    goto LABEL_8;
  }
  return swift_release();
}

uint64_t PgQuery_TableSampleClause.traverse<A>(visitor:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v6 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v13 = (uint64_t)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v0 + *(int *)(type metadata accessor for PgQuery_TableSampleClause(0) + 20));
  int v9 = *(_DWORD *)(v8 + 16);
  swift_retain();
  if (v9)
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v2) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v8 + 24) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v2) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v8+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, Node) != 1)
  {
    uint64_t v10 = v13;
    outlined init with take of PgQuery_OidList((uint64_t)v5, v13, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v10, type metadata accessor for PgQuery_Node);
    if (!v2) {
      goto LABEL_9;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?((uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_9:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TableSampleClause@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_TableSampleClause._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TableSampleClause()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TableSampleClause()
{
  return PgQuery_TableSampleClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TableSampleClause()
{
  return PgQuery_TableSampleClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TableSampleClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TableSampleClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TableSampleClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TableSampleClause(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TableSampleClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableSampleClause and conformance PgQuery_TableSampleClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableSampleClause);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_WithCheckOption._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_WithCheckOption._StorageClass()
{
  return type metadata accessor for PgQuery_WithCheckOption._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_WithCheckOption._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WithCheckOption._StorageClass);
}

void type metadata completion function for PgQuery_WithCheckOption._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_WithCheckOption.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_WithCheckOption(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_WithCheckOption._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_WithCheckOption._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_WCOKind and conformance PgQuery_WCOKind();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 2:
        case 3:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_WithCheckOption.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v22 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_WithCheckOption(0) + 20);
  uint64_t v21 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v25 = a3;
  if (v14)
  {
    char v15 = *(unsigned char *)(v13 + 24);
    uint64_t v23 = v14;
    char v24 = v15;
    lazy protocol witness table accessor for type PgQuery_WCOKind and conformance PgQuery_WCOKind();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
  }
  unint64_t v16 = *(void *)(v13 + 40);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v17 = *(void *)(v13 + 32) & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  unint64_t v18 = *(void *)(v13 + 56);
  uint64_t v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v19 = *(void *)(v13 + 48) & 0xFFFFFFFFFFFFLL;
  }
  if (v19)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v8, 1, Node) != 1)
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v11, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v11, type metadata accessor for PgQuery_Node);
    if (!v4) {
      goto LABEL_16;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_16:
  if (*(unsigned char *)(v13
                + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cascaded) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_WithCheckOption@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_WithCheckOption._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_WithCheckOption()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_WithCheckOption()
{
  return PgQuery_WithCheckOption.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_WithCheckOption(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_WithCheckOption.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_WithCheckOption(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, (void (*)(uint64_t))type metadata accessor for PgQuery_WithCheckOption);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_WithCheckOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_WithCheckOption._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_WithCheckOption(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, (void (*)(uint64_t))type metadata accessor for PgQuery_WithCheckOption);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_WithCheckOption(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithCheckOption and conformance PgQuery_WithCheckOption, (void (*)(uint64_t))type metadata accessor for PgQuery_WithCheckOption);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_SortGroupClause.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 4:
        case 5:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_SortGroupClause.traverse<A>(visitor:)()
{
  if (!*(_DWORD *)v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!*(_DWORD *)(v0 + 4)
      || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 8)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
      {
        if (*(unsigned char *)(v0 + 12) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          if (*(unsigned char *)(v0 + 13) != 1
            || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
          {
            type metadata accessor for PgQuery_SortGroupClause(0);
            return UnknownStorage.traverse<A>(visitor:)();
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_SortGroupClause@<X0>(void *a1@<X8>)
{
  *(void *)((char *)a1 + 6) = 0;
  *a1 = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_SortGroupClause()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_GrantRoleStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_GrantRoleStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_SortGroupClause()
{
  return PgQuery_SortGroupClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_SortGroupClause()
{
  return PgQuery_SortGroupClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_SortGroupClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, (void (*)(uint64_t))type metadata accessor for PgQuery_SortGroupClause);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SortGroupClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SortGroupClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_SortGroupClause(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, (void (*)(uint64_t))type metadata accessor for PgQuery_SortGroupClause);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SortGroupClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SortGroupClause and conformance PgQuery_SortGroupClause, (void (*)(uint64_t))type metadata accessor for PgQuery_SortGroupClause);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_GroupingSet.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type PgQuery_GroupingSetKind and conformance PgQuery_GroupingSetKind();
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_GroupingSet.traverse<A>(visitor:)()
{
  if (!*(void *)v0
    || (lazy protocol witness table accessor for type PgQuery_GroupingSetKind and conformance PgQuery_GroupingSetKind(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    if (!*(void *)(*(void *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 24)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_GroupingSet(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_GroupingSet@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(a1 + 24) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_GroupingSet()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_GroupingSet()
{
  return PgQuery_GroupingSet.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_GroupingSet()
{
  return PgQuery_GroupingSet.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_GroupingSet(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingSet);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_GroupingSet@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_GroupingSet._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_GroupingSet(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingSet);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_GroupingSet(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingSet and conformance PgQuery_GroupingSet, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingSet);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_WindowClause._StorageClass.init()()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0xE000000000000000;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 48) = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 56) = v1;
  *(_DWORD *)(v0 + 64) = 0;
  uint64_t v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v4(v2, 1, 1, Node);
  v4(v0+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startInRangeFunc) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endInRangeFunc) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeColl) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeAsc) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeNullsFirst) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__copiedOrder) = 0;
  return v0;
}

uint64_t PgQuery_WindowClause._StorageClass.__deallocating_deinit()
{
  return PgQuery_WindowDef._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset, &OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset);
}

uint64_t PgQuery_WindowDef._StorageClass.__deallocating_deinit(void *a1, void *a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v2 + *a1, &demangling cache variable for type metadata for PgQuery_Node?);
  outlined destroy of AnyValue?(v2 + *a2, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v5 = *(unsigned int *)(*(void *)v2 + 48);
  uint64_t v6 = *(unsigned __int16 *)(*(void *)v2 + 52);

  return MEMORY[0x1F4186488](v2, v5, v6);
}

uint64_t ObjC metadata update function for PgQuery_WindowClause._StorageClass()
{
  return type metadata accessor for PgQuery_WindowClause._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_WindowClause._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WindowClause._StorageClass);
}

void type metadata completion function for PgQuery_WindowClause._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_WindowClause.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableFunc.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_WindowClause, (void (*)(void))type metadata accessor for PgQuery_WindowClause._StorageClass, specialized PgQuery_WindowClause._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_WindowClause.decodeMessage<A>(decoder:));
}

uint64_t PgQuery_TableFunc.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = v7;
  uint64_t v14 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    uint64_t v15 = swift_retain();
    uint64_t v16 = a6(v15);
    swift_release();
    *(void *)(v10 + v14) = v16;
    swift_release();
  }
  uint64_t v17 = swift_retain();
  a7(v17, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in PgQuery_WindowClause.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        case 5:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 6:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          break;
        case 8:
        case 9:
        case 10:
        case 13:
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          break;
        case 11:
        case 12:
        case 14:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_WindowClause.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v27 = (uint64_t)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v24 - v5;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v28 = *(void *)(Node - 8);
  uint64_t v8 = MEMORY[0x1F4188790](Node);
  uint64_t v25 = (uint64_t)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v26 = (uint64_t)&v24 - v10;
  uint64_t v11 = *(int *)(type metadata accessor for PgQuery_WindowClause(0) + 20);
  uint64_t v24 = v0;
  uint64_t v12 = *(void *)(v0 + v11);
  unint64_t v13 = *(void *)(v12 + 24);
  if ((v13 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(v13) & 0xF;
  }
  else {
    uint64_t v14 = *(void *)(v12 + 16) & 0xFFFFFFFFFFFFLL;
  }
  swift_retain();
  if (v14)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = Node;
  unint64_t v16 = *(void *)(v12 + 40);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v17 = *(void *)(v12 + 32) & 0xFFFFFFFFFFFFLL;
  }
  if (v17)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1) {
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
  }
  if (!*(void *)(*(void *)(v12 + 48) + 16)) {
    goto LABEL_15;
  }
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  swift_bridgeObjectRetain();
  dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
  if (v1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return swift_release();
  }
  swift_bridgeObjectRelease();
LABEL_15:
  if (*(void *)(*(void *)(v12 + 56) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1) {
      goto LABEL_17;
    }
    swift_bridgeObjectRelease();
  }
  if (*(_DWORD *)(v12 + 64))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset, (uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v28 += 48;
  if (v19(v6, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v6, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v20 = v26;
    outlined init with take of PgQuery_OidList((uint64_t)v6, v26, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v20, type metadata accessor for PgQuery_Node);
    if (v1) {
      return swift_release();
    }
  }
  uint64_t v21 = v27;
  outlined init with copy of PgQuery_Alias?(v12+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset, v27, &demangling cache variable for type metadata for PgQuery_Node?);
  if (v19((char *)v21, 1, v15) == 1)
  {
    outlined destroy of AnyValue?(v21, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v22 = v21;
    uint64_t v23 = v25;
    outlined init with take of PgQuery_OidList(v22, v25, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v23, type metadata accessor for PgQuery_Node);
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startInRangeFunc))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endInRangeFunc))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeColl))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v12
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeAsc) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v12
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inRangeNullsFirst) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v12
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__winref))
  {
    dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v12
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_WindowClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__copiedOrder) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_WindowClause@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_WindowClause._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_WindowClause()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_WindowClause()
{
  return PgQuery_WindowClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_WindowClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowClause);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_WindowClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_WindowClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_WindowClause(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowClause);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_WindowClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowClause and conformance PgQuery_WindowClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowClause);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_ObjectWithArgs.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_VacuumStmt.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_ObjectWithArgs);
}

uint64_t PgQuery_VacuumStmt.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (!*(void *)(*(void *)v4 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
  {
    if (!*(void *)(*(void *)(v4 + 8) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
    {
      if (*(unsigned char *)(v4 + 16) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v5))
      {
        a4(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_VacuumStmt@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 8) = v1;
  *(unsigned char *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ObjectWithArgs()
{
  return 0xD000000000000017;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ObjectWithArgs@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ObjectWithArgs._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ObjectWithArgs(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_ObjectWithArgs.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_ObjectWithArgs) & 1;
}

uint64_t PgQuery_AccessPriv.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_Alias.traverse<A>(visitor:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_AccessPriv);
}

uint64_t PgQuery_Alias.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  unint64_t v7 = v4[1];
  uint64_t v8 = HIBYTE(v7) & 0xF;
  if ((v7 & 0x2000000000000000) == 0) {
    uint64_t v8 = *v4 & 0xFFFFFFFFFFFFLL;
  }
  if (!v8 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v5))
  {
    if (!*(void *)(v4[2] + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v5))
    {
      a4(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_Alias@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  a4[2] = a3;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_AccessPriv()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_AccessPriv(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, (void (*)(uint64_t))type metadata accessor for PgQuery_AccessPriv);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AccessPriv@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AccessPriv._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_AccessPriv(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, (void (*)(uint64_t))type metadata accessor for PgQuery_AccessPriv);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AccessPriv(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AccessPriv and conformance PgQuery_AccessPriv, (void (*)(uint64_t))type metadata accessor for PgQuery_AccessPriv);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AccessPriv(char *a1, char *a2)
{
  return specialized static PgQuery_AlterExtensionStmt.== infix(_:_:)(a1, a2, type metadata accessor for PgQuery_AccessPriv) & 1;
}

uint64_t PgQuery_CreateOpClassItem.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 3:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_CreateOpClassItem(0);
          type metadata accessor for PgQuery_ObjectWithArgs(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
          goto LABEL_12;
        case 4:
        case 5:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_5;
        case 6:
          type metadata accessor for PgQuery_CreateOpClassItem(0);
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
LABEL_12:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CreateOpClassItem.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v24 = (uint64_t)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v23 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v22 = (uint64_t)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t v13 = *(void *)(ObjectWithArgs - 8);
  MEMORY[0x1F4188790](ObjectWithArgs);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v16 = *v3;
  uint64_t v26 = a3;
  if (!v16 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
  {
    uint64_t OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
    outlined init with copy of PgQuery_Alias?((uint64_t)v3 + *(int *)(OpClassItem + 36), (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, ObjectWithArgs) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
    }
    else
    {
      outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v15, type metadata accessor for PgQuery_ObjectWithArgs);
      lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ObjectWithArgs and conformance PgQuery_ObjectWithArgs, (void (*)(uint64_t))type metadata accessor for PgQuery_ObjectWithArgs);
      dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
      uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_ObjectWithArgs);
      if (v4) {
        return result;
      }
    }
    if (!v3[1] || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v4))
    {
      if (!*(void *)(*((void *)v3 + 1) + 16)
        || (type metadata accessor for PgQuery_Node(0),
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
      {
        if (!*(void *)(*((void *)v3 + 2) + 16)
          || (type metadata accessor for PgQuery_Node(0),
              lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v4))
        {
          uint64_t v19 = v24;
          outlined init with copy of PgQuery_Alias?((uint64_t)v3 + *(int *)(OpClassItem + 40), v24, &demangling cache variable for type metadata for PgQuery_TypeName?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v19, 1, TypeName) == 1)
          {
            outlined destroy of AnyValue?(v19, &demangling cache variable for type metadata for PgQuery_TypeName?);
          }
          else
          {
            uint64_t v20 = v19;
            uint64_t v21 = v22;
            outlined init with take of PgQuery_OidList(v20, v22, type metadata accessor for PgQuery_TypeName);
            lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
            dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
            uint64_t result = outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_TypeName);
            if (v4) {
              return result;
            }
          }
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CreateOpClassItem@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  a2[1] = MEMORY[0x1E4FBC860];
  a2[2] = v4;
  UnknownStorage.init()();
  uint64_t v5 = (char *)a2 + *(int *)(a1 + 36);
  uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(ObjectWithArgs - 8) + 56))(v5, 1, 1, ObjectWithArgs);
  uint64_t v7 = (char *)a2 + *(int *)(a1 + 40);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56);

  return v9(v7, 1, 1, TypeName);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CreateOpClassItem()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_CreateOpClassItem()
{
  return PgQuery_CreateOpClassItem.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CreateOpClassItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_CreateOpClassItem.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CreateOpClassItem(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassItem);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CreateOpClassItem@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CreateOpClassItem._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CreateOpClassItem(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassItem);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CreateOpClassItem(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassItem and conformance PgQuery_CreateOpClassItem, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassItem);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_TableLikeClause.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
      }
      else if (result == 1)
      {
        type metadata accessor for PgQuery_TableLikeClause(0);
        type metadata accessor for PgQuery_RangeVar(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
        dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_TableLikeClause.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  v16[1] = a3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v10 = *(void *)(RangeVar - 8);
  MEMORY[0x1F4188790](RangeVar);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = type metadata accessor for PgQuery_TableLikeClause(0);
  uint64_t v13 = *(int *)(v16[0] + 28);
  uint64_t v17 = v5;
  outlined init with copy of PgQuery_Alias?((uint64_t)v5 + v13, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, RangeVar) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v14 = v17;
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v8, (uint64_t)v12, type metadata accessor for PgQuery_RangeVar);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    uint64_t result = outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_RangeVar);
    uint64_t v14 = v17;
    if (v4) {
      return result;
    }
  }
  if (!*v14 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v4))
  {
    if (!v14[1]) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
    uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)();
    if (!v4) {
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TableLikeClause@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  UnknownStorage.init()();
  uint64_t v4 = (char *)a2 + *(int *)(a1 + 28);
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56);

  return v6(v4, 1, 1, RangeVar);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TableLikeClause()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TableLikeClause()
{
  return PgQuery_TableLikeClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TableLikeClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_TableLikeClause.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TableLikeClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableLikeClause);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TableLikeClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TableLikeClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TableLikeClause(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableLikeClause);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TableLikeClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableLikeClause and conformance PgQuery_TableLikeClause, (void (*)(uint64_t))type metadata accessor for PgQuery_TableLikeClause);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_FunctionParameter._StorageClass.init(copying:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xE000000000000000;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType;
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56))(v6, 1, 1, TypeName);
  uint64_t v8 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  uint64_t v9 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v9, 1, 1, Node);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(void *)(v1 + 24) = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType, v6, &demangling cache variable for type metadata for PgQuery_TypeName?);
  char v12 = *(unsigned char *)(a1
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode
                 + 8);
  *(void *)uint64_t v8 = *(void *)(a1
                            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode);
  *(unsigned char *)(v8 + 8) = v12;
  outlined init with copy of PgQuery_Alias?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr, (uint64_t)v5, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_release();
  outlined assign with take of PgQuery_Node?((uint64_t)v5, v9, &demangling cache variable for type metadata for PgQuery_Node?);
  return v1;
}

uint64_t PgQuery_FunctionParameter._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType, &demangling cache variable for type metadata for PgQuery_TypeName?);
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_FunctionParameter._StorageClass()
{
  return type metadata accessor for PgQuery_FunctionParameter._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_FunctionParameter._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FunctionParameter._StorageClass);
}

void type metadata completion function for PgQuery_FunctionParameter._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_FunctionParameter.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(int *)(type metadata accessor for PgQuery_FunctionParameter(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_FunctionParameter._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v0 + v3) = PgQuery_FunctionParameter._StorageClass.init(copying:)(v4);
    swift_release();
  }
  swift_retain();
  uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v6 & 1) == 0)
    {
      switch(v5)
      {
        case 1:
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
          goto LABEL_14;
        case 3:
          lazy protocol witness table accessor for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode();
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_7;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_14:
          uint64_t v8 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
LABEL_7:
          uint64_t v2 = v8;
          break;
        default:
          break;
      }
      uint64_t v5 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_FunctionParameter.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v26 = (uint64_t)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v25 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v23 = (uint64_t)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v28 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  char v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(int *)(type metadata accessor for PgQuery_FunctionParameter(0) + 20);
  uint64_t v24 = v2;
  uint64_t v14 = *(void *)(v2 + v13);
  unint64_t v15 = *(void *)(v14 + 24);
  if ((v15 & 0x2000000000000000) != 0) {
    uint64_t v16 = HIBYTE(v15) & 0xF;
  }
  else {
    uint64_t v16 = *(void *)(v14 + 16) & 0xFFFFFFFFFFFFLL;
  }
  swift_retain();
  if (v16)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    uint64_t v17 = v3;
    swift_bridgeObjectRelease();
    if (v3) {
      return swift_release();
    }
  }
  else
  {
    uint64_t v17 = v3;
  }
  outlined init with copy of PgQuery_Alias?(v14+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType, (uint64_t)v9, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v9, 1, TypeName) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v9, &demangling cache variable for type metadata for PgQuery_TypeName?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v9, (uint64_t)v12, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_TypeName);
    if (v17) {
      return swift_release();
    }
  }
  if (*(void *)(v14
                 + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode))
  {
    char v18 = *(unsigned char *)(v14
                   + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode
                   + 8);
    uint64_t v29 = *(void *)(v14
                    + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode);
    char v30 = v18;
    lazy protocol witness table accessor for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v17) {
      return swift_release();
    }
  }
  uint64_t v19 = v26;
  outlined init with copy of PgQuery_Alias?(v14+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr, v26, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v19, 1, Node) != 1)
  {
    uint64_t v20 = v19;
    uint64_t v21 = v23;
    outlined init with take of PgQuery_OidList(v20, v23, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v21, type metadata accessor for PgQuery_Node);
    if (!v17) {
      goto LABEL_17;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v19, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_17:
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_FunctionParameter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_FunctionParameter._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_FunctionParameter()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_FunctionParameter()
{
  return PgQuery_FunctionParameter.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_FunctionParameter(uint64_t a1, uint64_t a2)
{
  return PgQuery_FunctionParameter.traverse<A>(visitor:)(a1, a2);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_FunctionParameter(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, (void (*)(uint64_t))type metadata accessor for PgQuery_FunctionParameter);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FunctionParameter@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FunctionParameter._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_FunctionParameter(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, (void (*)(uint64_t))type metadata accessor for PgQuery_FunctionParameter);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FunctionParameter(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FunctionParameter and conformance PgQuery_FunctionParameter, (void (*)(uint64_t))type metadata accessor for PgQuery_FunctionParameter);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_LockingClause.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        lazy protocol witness table accessor for type PgQuery_LockClauseStrength and conformance PgQuery_LockClauseStrength();
LABEL_5:
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_11;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
LABEL_11:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    lazy protocol witness table accessor for type PgQuery_LockWaitPolicy and conformance PgQuery_LockWaitPolicy();
    goto LABEL_5;
  }
  return result;
}

uint64_t PgQuery_LockingClause.traverse<A>(visitor:)()
{
  if (!*(void *)(*v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (!v0[1]
      || (lazy protocol witness table accessor for type PgQuery_LockClauseStrength and conformance PgQuery_LockClauseStrength(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!v0[3]
        || (lazy protocol witness table accessor for type PgQuery_LockWaitPolicy and conformance PgQuery_LockWaitPolicy(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        type metadata accessor for PgQuery_LockingClause(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_LockingClause@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_LockingClause()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_LockingClause()
{
  return PgQuery_LockingClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_LockingClause()
{
  return PgQuery_LockingClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_LockingClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, (void (*)(uint64_t))type metadata accessor for PgQuery_LockingClause);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LockingClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LockingClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_LockingClause(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, (void (*)(uint64_t))type metadata accessor for PgQuery_LockingClause);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LockingClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockingClause and conformance PgQuery_LockingClause, (void (*)(uint64_t))type metadata accessor for PgQuery_LockingClause);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RowMarkClause.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularUInt32Field(value:)();
          goto LABEL_5;
        case 2:
          lazy protocol witness table accessor for type PgQuery_LockClauseStrength and conformance PgQuery_LockClauseStrength();
          goto LABEL_11;
        case 3:
          lazy protocol witness table accessor for type PgQuery_LockWaitPolicy and conformance PgQuery_LockWaitPolicy();
LABEL_11:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_RowMarkClause.traverse<A>(visitor:)()
{
  if (!*(_DWORD *)v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularUInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(v0 + 8)
      || (lazy protocol witness table accessor for type PgQuery_LockClauseStrength and conformance PgQuery_LockClauseStrength(),
          uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
          !v1))
    {
      if (!*(void *)(v0 + 24)
        || (lazy protocol witness table accessor for type PgQuery_LockWaitPolicy and conformance PgQuery_LockWaitPolicy(),
            uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
            !v1))
      {
        if (*(unsigned char *)(v0 + 33) != 1
          || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
        {
          type metadata accessor for PgQuery_RowMarkClause(0);
          return UnknownStorage.traverse<A>(visitor:)();
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RowMarkClause@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 1;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RowMarkClause()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RowMarkClause()
{
  return PgQuery_RowMarkClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RowMarkClause()
{
  return PgQuery_RowMarkClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RowMarkClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, (void (*)(uint64_t))type metadata accessor for PgQuery_RowMarkClause);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RowMarkClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RowMarkClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RowMarkClause(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, (void (*)(uint64_t))type metadata accessor for PgQuery_RowMarkClause);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RowMarkClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowMarkClause and conformance PgQuery_RowMarkClause, (void (*)(uint64_t))type metadata accessor for PgQuery_RowMarkClause);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_XmlSerialize._StorageClass.__deallocating_deinit()
{
  return PgQuery_FieldSelect._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, &demangling cache variable for type metadata for PgQuery_Node?, &OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, &demangling cache variable for type metadata for PgQuery_TypeName?);
}

uint64_t ObjC metadata update function for PgQuery_XmlSerialize._StorageClass()
{
  return type metadata accessor for PgQuery_XmlSerialize._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_XmlSerialize._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_XmlSerialize._StorageClass);
}

void type metadata completion function for PgQuery_XmlSerialize._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_TypeName?, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t PgQuery_XmlSerialize.decodeMessage<A>(decoder:)()
{
  uint64_t v1 = v0;
  specialized PgQuery_XmlSerialize._uniqueStorage()();
  type metadata accessor for PgQuery_XmlSerialize(0);
  swift_retain();
  uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v3 & 1) == 0)
    {
      switch(v2)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType();
          uint64_t v5 = v1;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_5;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          goto LABEL_11;
        case 3:
          type metadata accessor for PgQuery_TypeName(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
LABEL_11:
          uint64_t v5 = v1;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_5;
        case 4:
          uint64_t v5 = v1;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
          uint64_t v1 = v5;
          break;
        default:
          break;
      }
      uint64_t v2 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_XmlSerialize.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v28 = (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t v27 = *(void *)(TypeName - 8);
  MEMORY[0x1F4188790](TypeName);
  uint64_t v26 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v13 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  unint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(int *)(type metadata accessor for PgQuery_XmlSerialize(0) + 20);
  uint64_t v25 = v3;
  uint64_t v17 = *(void *)(v3 + v16);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v32 = a3;
  if (v18)
  {
    char v19 = *(unsigned char *)(v17 + 24);
    uint64_t v30 = v18;
    char v31 = v19;
    lazy protocol witness table accessor for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_Node);
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v20 = v28;
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName, v28, &demangling cache variable for type metadata for PgQuery_TypeName?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v20, 1, TypeName) != 1)
  {
    uint64_t v21 = v20;
    uint64_t v22 = v26;
    outlined init with take of PgQuery_OidList(v21, v26, type metadata accessor for PgQuery_TypeName);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TypeName and conformance PgQuery_TypeName, (void (*)(uint64_t))type metadata accessor for PgQuery_TypeName);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_TypeName);
    if (!v4) {
      goto LABEL_11;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v20, &demangling cache variable for type metadata for PgQuery_TypeName?);
LABEL_11:
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_XmlSerialize@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_XmlSerialize._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_XmlSerialize()
{
  return 0xD000000000000015;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_XmlSerialize()
{
  return PgQuery_XmlSerialize.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_XmlSerialize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_XmlSerialize.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_XmlSerialize(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlSerialize);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_XmlSerialize@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_XmlSerialize._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_XmlSerialize(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlSerialize);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_XmlSerialize(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlSerialize and conformance PgQuery_XmlSerialize, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlSerialize);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_WithClause.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_WithClause.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for PgQuery_Node(0),
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
  {
    if (*(unsigned char *)(v0 + 8) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 12)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_WithClause(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_WithClause@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = MEMORY[0x1E4FBC860];
  *(unsigned char *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_WithClause()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_WithClause()
{
  return PgQuery_WithClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_WithClause()
{
  return PgQuery_WithClause.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_WithClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_WithClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_WithClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_WithClause(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_WithClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WithClause and conformance PgQuery_WithClause, (void (*)(uint64_t))type metadata accessor for PgQuery_WithClause);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_InferClause._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_InferClause._StorageClass()
{
  return type metadata accessor for PgQuery_InferClause._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_InferClause._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InferClause._StorageClass);
}

void type metadata completion function for PgQuery_InferClause._StorageClass()
{
}

uint64_t PgQuery_InferClause.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_InferClause(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_InferClause._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_InferClause._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 4:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_InferClause.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v6 - 8);
  char v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v10 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v20 = (uint64_t)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(int *)(type metadata accessor for PgQuery_InferClause(0) + 20);
  uint64_t v19 = v3;
  uint64_t v13 = *(void *)(v3 + v12);
  uint64_t v14 = *(void *)(*(void *)(v13 + 16) + 16);
  uint64_t v21 = a3;
  if (v14)
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_retain();
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v13+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, (uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v8, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_8;
  }
  uint64_t v15 = v20;
  outlined init with take of PgQuery_OidList((uint64_t)v8, v20, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v15, type metadata accessor for PgQuery_Node);
  if (v4) {
    return swift_release();
  }
LABEL_8:
  unint64_t v16 = *(void *)(v13
                  + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname
                  + 8);
  uint64_t v17 = HIBYTE(v16) & 0xF;
  if ((v16 & 0x2000000000000000) == 0) {
    uint64_t v17 = *(void *)(v13
  }
                    + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname) & 0xFFFFFFFFFFFFLL;
  if (v17)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v13
                 + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_InferClause@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_InferClause._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_InferClause()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_InferClause()
{
  return PgQuery_InferClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_InferClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_InferClause.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_InferClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_InferClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_InferClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_InferClause(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_InferClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_OnConflictClause._StorageClass.__deallocating_deinit()
{
  return PgQuery_WindowFunc._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infer, &demangling cache variable for type metadata for PgQuery_InferClause?, (uint64_t)&OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList, &OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause);
}

uint64_t PgQuery_WindowFunc._StorageClass.__deallocating_deinit(void *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  outlined destroy of AnyValue?(v4 + *a1, a2);
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v4 + *a4, &demangling cache variable for type metadata for PgQuery_Node?);
  uint64_t v6 = *(unsigned int *)(*(void *)v4 + 48);
  uint64_t v7 = *(unsigned __int16 *)(*(void *)v4 + 52);

  return MEMORY[0x1F4186488](v4, v6, v7);
}

uint64_t ObjC metadata update function for PgQuery_OnConflictClause._StorageClass()
{
  return type metadata accessor for PgQuery_OnConflictClause._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_OnConflictClause._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OnConflictClause._StorageClass);
}

void type metadata completion function for PgQuery_OnConflictClause._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_InferClause?, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t type metadata accessor for PgQuery_InferClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InferClause);
}

uint64_t PgQuery_OnConflictClause.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_OnConflictClause(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_OnConflictClause._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_OnConflictClause._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          lazy protocol witness table accessor for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction();
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_8;
        case 2:
          type metadata accessor for PgQuery_InferClause(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);
          goto LABEL_7;
        case 3:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_8;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
LABEL_7:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_8;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_8:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_OnConflictClause.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v28 = (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v27 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v26 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_InferClause?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t InferClause = type metadata accessor for PgQuery_InferClause(0);
  uint64_t v13 = *(void *)(InferClause - 8);
  MEMORY[0x1F4188790](InferClause);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(int *)(type metadata accessor for PgQuery_OnConflictClause(0) + 20);
  uint64_t v25 = v3;
  uint64_t v17 = *(void *)(v3 + v16);
  uint64_t v18 = *(void *)(v17 + 16);
  uint64_t v32 = a3;
  if (v18)
  {
    char v19 = *(unsigned char *)(v17 + 24);
    uint64_t v30 = v18;
    char v31 = v19;
    lazy protocol witness table accessor for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction();
    swift_retain();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  else
  {
    swift_retain();
  }
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infer, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_InferClause?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, InferClause) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_InferClause?);
  }
  else
  {
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v15, type metadata accessor for PgQuery_InferClause);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferClause and conformance PgQuery_InferClause, (void (*)(uint64_t))type metadata accessor for PgQuery_InferClause);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias((uint64_t)v15, type metadata accessor for PgQuery_InferClause);
    if (v4) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v17
                             + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_release();
    }
  }
  uint64_t v20 = v28;
  outlined init with copy of PgQuery_Alias?(v17+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, v28, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v20, 1, Node) != 1)
  {
    uint64_t v21 = v20;
    uint64_t v22 = v26;
    outlined init with take of PgQuery_OidList(v21, v26, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v22, type metadata accessor for PgQuery_Node);
    if (!v4) {
      goto LABEL_13;
    }
    return swift_release();
  }
  outlined destroy of AnyValue?(v20, &demangling cache variable for type metadata for PgQuery_Node?);
LABEL_13:
  if (*(_DWORD *)(v17
                 + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v4) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_OnConflictClause@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_OnConflictClause._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_OnConflictClause()
{
  return 0xD000000000000019;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_OnConflictClause()
{
  return PgQuery_OnConflictClause.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_OnConflictClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_OnConflictClause.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_OnConflictClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OnConflictClause@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OnConflictClause._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_OnConflictClause(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OnConflictClause(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictClause and conformance PgQuery_OnConflictClause, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictClause);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_CommonTableExpr._StorageClass.init()()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 48) = 1;
  uint64_t v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v2, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames) = v1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes) = v1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods) = v1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations) = v1;
  return v0;
}

uint64_t PgQuery_CommonTableExpr._StorageClass.init(copying:)(uint64_t a1)
{
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xE000000000000000;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(v1 + 40) = 0;
  *(unsigned char *)(v1 + 48) = 1;
  uint64_t v4 = v1
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery;
  uint64_t v17 = v1
      + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery;
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v4, 1, 1, Node);
  uint64_t v6 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  uint64_t v7 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive;
  *(unsigned char *)(v1
           + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive) = 0;
  uint64_t v8 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount;
  *(_DWORD *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount) = 0;
  uint64_t v9 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames) = v3;
  uint64_t v10 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes) = v3;
  uint64_t v11 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods) = v3;
  uint64_t v12 = OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations;
  *(void *)(v1
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations) = v3;
  uint64_t v13 = *(void *)(a1 + 24);
  *(void *)(v1 + 16) = *(void *)(a1 + 16);
  *(void *)(v1 + 24) = v13;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + 32) = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v14 = *(unsigned char *)(a1 + 48);
  *(void *)(v1 + 40) = *(void *)(a1 + 40);
  *(unsigned char *)(v1 + 48) = v14;
  outlined assign with copy of PgQuery_Node?(a1+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery, v17, &demangling cache variable for type metadata for PgQuery_Node?);
  *(_DWORD *)(v1 + v6) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location);
  *(unsigned char *)(v1 + v7) = *(unsigned char *)(a1
                                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive);
  *(_DWORD *)(v1 + v8) = *(_DWORD *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount);
  *(void *)(v1 + v9) = *(void *)(a1
                                   + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v10) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v1 + v11) = *(void *)(a1
                                    + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(a1
                  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations);
  swift_bridgeObjectRetain();
  swift_release();
  *(void *)(v1 + v12) = v15;
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t PgQuery_CommonTableExpr._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_CommonTableExpr._StorageClass()
{
  return type metadata accessor for PgQuery_CommonTableExpr._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_CommonTableExpr._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CommonTableExpr._StorageClass);
}

void type metadata completion function for PgQuery_CommonTableExpr._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_CommonTableExpr.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_SubscriptingRef.decodeMessage<A>(decoder:)(a1, a2, a3, type metadata accessor for PgQuery_CommonTableExpr, (void (*)(void))type metadata accessor for PgQuery_CommonTableExpr._StorageClass, PgQuery_CommonTableExpr._StorageClass.init(copying:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in PgQuery_CommonTableExpr.decodeMessage<A>(decoder:));
}

uint64_t closure #1 in PgQuery_CommonTableExpr.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_11;
        case 2:
        case 8:
        case 9:
        case 10:
        case 11:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_11;
        case 3:
          lazy protocol witness table accessor for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize();
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
          goto LABEL_11;
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_11;
        case 5:
        case 7:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          goto LABEL_11;
        case 6:
          uint64_t v4 = v3;
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
LABEL_11:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_CommonTableExpr.traverse<A>(visitor:)()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v18 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v15 = (uint64_t)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(int *)(type metadata accessor for PgQuery_CommonTableExpr(0) + 20);
  uint64_t v14 = v0;
  uint64_t v8 = *(void *)(v0 + v7);
  unint64_t v9 = *(void *)(v8 + 24);
  if ((v9 & 0x2000000000000000) != 0) {
    uint64_t v10 = HIBYTE(v9) & 0xF;
  }
  else {
    uint64_t v10 = *(void *)(v8 + 16) & 0xFFFFFFFFFFFFLL;
  }
  swift_retain();
  if (v10)
  {
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    if (v1)
    {
LABEL_9:
      swift_bridgeObjectRelease();
      return swift_release();
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(*(void *)(v8 + 32) + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    if (v1) {
      goto LABEL_9;
    }
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v8 + 40))
  {
    char v12 = *(unsigned char *)(v8 + 48);
    uint64_t v16 = *(void *)(v8 + 40);
    char v17 = v12;
    lazy protocol witness table accessor for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize();
    dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  outlined init with copy of PgQuery_Alias?(v8+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctequery, (uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v4, 1, Node) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v4, &demangling cache variable for type metadata for PgQuery_Node?);
  }
  else
  {
    uint64_t v13 = v15;
    outlined init with take of PgQuery_OidList((uint64_t)v4, v15, type metadata accessor for PgQuery_Node);
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
    outlined destroy of PgQuery_Alias(v13, type metadata accessor for PgQuery_Node);
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*(unsigned char *)(v8
                + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterecursive) == 1)
  {
    dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v8
                 + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cterefcount))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v1) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v8
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolnames)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v8
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypes)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v8
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecoltypmods)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v8
                             + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_CommonTableExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ctecolcollations)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v1) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_CommonTableExpr@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_CommonTableExpr._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_CommonTableExpr()
{
  return 0xD000000000000018;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_CommonTableExpr()
{
  return PgQuery_CommonTableExpr.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_CommonTableExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CommonTableExpr);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CommonTableExpr@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CommonTableExpr._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_CommonTableExpr(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CommonTableExpr);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CommonTableExpr(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommonTableExpr and conformance PgQuery_CommonTableExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CommonTableExpr);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_RoleSpec.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        lazy protocol witness table accessor for type PgQuery_RoleSpecType and conformance PgQuery_RoleSpecType();
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularEnumField<A>(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_RoleSpec.traverse<A>(visitor:)()
{
  if (!*(void *)v0
    || (lazy protocol witness table accessor for type PgQuery_RoleSpecType and conformance PgQuery_RoleSpecType(),
        uint64_t result = dispatch thunk of Visitor.visitSingularEnumField<A>(value:fieldNumber:)(),
        !v1))
  {
    unint64_t v3 = *(void *)(v0 + 24);
    uint64_t v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0) {
      uint64_t v4 = *(void *)(v0 + 16) & 0xFFFFFFFFFFFFLL;
    }
    if (!v4 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 32)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_RoleSpec(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_RoleSpec@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0xE000000000000000;
  *(_DWORD *)(a1 + 32) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_RoleSpec()
{
  return 0xD000000000000011;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_RoleSpec()
{
  return PgQuery_RoleSpec.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_RoleSpec()
{
  return PgQuery_RoleSpec.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_RoleSpec(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RoleSpec@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RoleSpec._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_RoleSpec(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RoleSpec(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RoleSpec and conformance PgQuery_RoleSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_RoleSpec);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_TriggerTransition.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        dispatch thunk of Decoder.decodeSingularBoolField(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_TriggerTransition.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (*(unsigned char *)(v0 + 16) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (*(unsigned char *)(v0 + 17) != 1
        || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_TriggerTransition(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_TriggerTransition@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_WORD *)(a1 + 16) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_TriggerTransition()
{
  return 0xD00000000000001ALL;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_TriggerTransition()
{
  return PgQuery_TriggerTransition.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_TriggerTransition()
{
  return PgQuery_TriggerTransition.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_TriggerTransition(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, (void (*)(uint64_t))type metadata accessor for PgQuery_TriggerTransition);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TriggerTransition@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TriggerTransition._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_TriggerTransition(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, (void (*)(uint64_t))type metadata accessor for PgQuery_TriggerTransition);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TriggerTransition(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TriggerTransition and conformance PgQuery_TriggerTransition, (void (*)(uint64_t))type metadata accessor for PgQuery_TriggerTransition);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_PartitionElem._StorageClass.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  outlined destroy of AnyValue?(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, &demangling cache variable for type metadata for PgQuery_Node?);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for PgQuery_PartitionElem._StorageClass()
{
  return type metadata accessor for PgQuery_PartitionElem._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_PartitionElem._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionElem._StorageClass);
}

void type metadata completion function for PgQuery_PartitionElem._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t PgQuery_PartitionElem.decodeMessage<A>(decoder:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = *(int *)(type metadata accessor for PgQuery_PartitionElem(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PgQuery_PartitionElem._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    uint64_t v6 = specialized PgQuery_PartitionElem._StorageClass.init(copying:)(v5);
    swift_release();
    *(void *)(v3 + v4) = v6;
    swift_release();
  }
  swift_retain();
  uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v1)
  {
    while ((v8 & 1) == 0)
    {
      switch(v7)
      {
        case 1:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          goto LABEL_7;
        case 2:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
          goto LABEL_7;
        case 3:
        case 4:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          goto LABEL_7;
        case 5:
          uint64_t v10 = v2;
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_7:
          uint64_t v2 = v10;
          break;
        default:
          break;
      }
      uint64_t v7 = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return swift_release();
}

uint64_t PgQuery_PartitionElem.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v8 = *(void *)(Node - 8);
  MEMORY[0x1F4188790](Node);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(int *)(type metadata accessor for PgQuery_PartitionElem(0) + 20);
  uint64_t v22 = v3;
  uint64_t v12 = *(void *)(v3 + v11);
  unint64_t v13 = *(void *)(v12 + 24);
  if ((v13 & 0x2000000000000000) != 0) {
    uint64_t v14 = HIBYTE(v13) & 0xF;
  }
  else {
    uint64_t v14 = *(void *)(v12 + 16) & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v15 = *(void *)(v3 + v11);
  swift_retain();
  uint64_t v23 = a3;
  if (v14)
  {
    uint64_t v16 = (uint64_t)v10;
    swift_bridgeObjectRetain();
    uint64_t v17 = v24;
    dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)();
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    uint64_t v19 = Node;
    if (v17) {
      return swift_release();
    }
  }
  else
  {
    uint64_t v16 = (uint64_t)v10;
    uint64_t v18 = v24;
    uint64_t v19 = Node;
  }
  outlined init with copy of PgQuery_Alias?(v15+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, (uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v19) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v7, &demangling cache variable for type metadata for PgQuery_Node?);
    goto LABEL_11;
  }
  outlined init with take of PgQuery_OidList((uint64_t)v7, v16, type metadata accessor for PgQuery_Node);
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
  dispatch thunk of Visitor.visitSingularMessageField<A>(value:fieldNumber:)();
  outlined destroy of PgQuery_Alias(v16, type metadata accessor for PgQuery_Node);
  if (v18) {
    return swift_release();
  }
LABEL_11:
  if (*(void *)(*(void *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v18) {
      return swift_release();
    }
  }
  if (*(void *)(*(void *)(v15
                             + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass)
                 + 16))
  {
    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
    swift_bridgeObjectRetain();
    dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)();
    swift_bridgeObjectRelease();
    if (v18) {
      return swift_release();
    }
  }
  if (*(_DWORD *)(v15
                 + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location))
  {
    dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)();
    if (v18) {
      return swift_release();
    }
  }
  swift_release();
  return UnknownStorage.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.init() in conformance PgQuery_PartitionElem@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for Message.init() in conformance PgQuery_Node(a1, &one-time initialization token for defaultInstance, &static PgQuery_PartitionElem._StorageClass.defaultInstance, a2);
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_PartitionElem()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_PartitionElem()
{
  return PgQuery_PartitionElem.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_PartitionElem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_PartitionElem.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_PartitionElem(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionElem);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PartitionElem@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PartitionElem._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_PartitionElem(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionElem);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PartitionElem(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionElem and conformance PgQuery_PartitionElem, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionElem);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_PartitionSpec.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  uint64_t v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if (v2) {
        return result;
      }
      if (result == 3) {
        break;
      }
      if (result == 2)
      {
        type metadata accessor for PgQuery_Node(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
        goto LABEL_5;
      }
      if (result == 1)
      {
        uint64_t v4 = v3;
        dispatch thunk of Decoder.decodeSingularStringField(value:)();
        goto LABEL_5;
      }
LABEL_6:
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
    uint64_t v4 = v3;
    dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
LABEL_5:
    uint64_t v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t PgQuery_PartitionSpec.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(*(void *)(v0 + 16) + 16)
      || (type metadata accessor for PgQuery_Node(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 24)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        type metadata accessor for PgQuery_PartitionSpec(0);
        return UnknownStorage.traverse<A>(visitor:)();
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_PartitionSpec@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(a1 + 24) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_PartitionSpec()
{
  return 0xD000000000000016;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_AlterTableStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_AlterTableStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_PartitionSpec()
{
  return PgQuery_PartitionSpec.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_PartitionSpec()
{
  return PgQuery_PartitionSpec.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_PartitionSpec(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PartitionSpec@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PartitionSpec._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_PartitionSpec(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PartitionSpec(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionSpec and conformance PgQuery_PartitionSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionSpec);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_PartitionBoundSpec.decodeMessage<A>(decoder:)()
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          dispatch thunk of Decoder.decodeSingularStringField(value:)();
          break;
        case 2:
          dispatch thunk of Decoder.decodeSingularBoolField(value:)();
          break;
        case 3:
        case 4:
        case 8:
          dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
          break;
        case 5:
        case 6:
        case 7:
          type metadata accessor for PgQuery_Node(0);
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node);
          dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
          break;
        default:
          break;
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_PartitionBoundSpec.traverse<A>(visitor:)()
{
  unint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *(void *)v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = dispatch thunk of Visitor.visitSingularStringField(value:fieldNumber:)(), !v1))
  {
    if (*(unsigned char *)(v0 + 16) != 1
      || (uint64_t result = dispatch thunk of Visitor.visitSingularBoolField(value:fieldNumber:)(), !v1))
    {
      if (!*(_DWORD *)(v0 + 20)
        || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
      {
        if (!*(_DWORD *)(v0 + 24)
          || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
        {
          if (!*(void *)(*(void *)(v0 + 32) + 16)
            || (type metadata accessor for PgQuery_Node(0),
                lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
          {
            if (!*(void *)(*(void *)(v0 + 40) + 16)
              || (type metadata accessor for PgQuery_Node(0),
                  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
            {
              if (!*(void *)(*(void *)(v0 + 48) + 16)
                || (type metadata accessor for PgQuery_Node(0),
                    lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Node and conformance PgQuery_Node, (void (*)(uint64_t))type metadata accessor for PgQuery_Node), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
              {
                if (!*(_DWORD *)(v0 + 56)
                  || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
                {
                  type metadata accessor for PgQuery_PartitionBoundSpec(0);
                  return UnknownStorage.traverse<A>(visitor:)();
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_PartitionBoundSpec@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 32) = MEMORY[0x1E4FBC860];
  *(void *)(a1 + 40) = v1;
  *(void *)(a1 + 48) = v1;
  *(_DWORD *)(a1 + 56) = 0;
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_PartitionBoundSpec()
{
  return 0xD00000000000001BLL;
}

uint64_t protocol witness for Message.unknownFields.getter in conformance PgQuery_GrantStmt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t protocol witness for Message.unknownFields.setter in conformance PgQuery_GrantStmt(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t protocol witness for Message.decodeMessage<A>(decoder:) in conformance PgQuery_PartitionBoundSpec()
{
  return PgQuery_PartitionBoundSpec.decodeMessage<A>(decoder:)();
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_PartitionBoundSpec()
{
  return PgQuery_PartitionBoundSpec.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PartitionBoundSpec@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PartitionBoundSpec._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_PartitionBoundSpec(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PartitionBoundSpec and conformance PgQuery_PartitionBoundSpec, (void (*)(uint64_t))type metadata accessor for PgQuery_PartitionBoundSpec);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t PgQuery_PartitionRangeDatum._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__value, &demangling cache variable for type metadata for PgQuery_Node?);
}

uint64_t ObjC metadata update function for PgQuery_PartitionRangeDatum._StorageClass()
{
  return type metadata accessor for PgQuery_PartitionRangeDatum._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_PartitionRangeDatum._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionRangeDatum._StorageClass);
}

void type metadata completion function for PgQuery_PartitionRangeDatum._StorageClass()
{
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for PgQuery_PartitionRangeDatumKind()
{
  return &type metadata for PgQuery_PartitionRangeDatumKind;
}

ValueMetadata *type metadata accessor for PgQuery_CTEMaterialize()
{
  return &type metadata for PgQuery_CTEMaterialize;
}

uint64_t getEnumTagSinglePayload for PgQuery_InferClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_0);
}

uint64_t storeEnumTagSinglePayload for PgQuery_InferClause(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_0);
}

ValueMetadata *type metadata accessor for PgQuery_FunctionParameterMode()
{
  return &type metadata for PgQuery_FunctionParameterMode;
}

ValueMetadata *type metadata accessor for PgQuery_WCOKind()
{
  return &type metadata for PgQuery_WCOKind;
}

ValueMetadata *type metadata accessor for PgQuery_RTEKind()
{
  return &type metadata for PgQuery_RTEKind;
}

uint64_t getEnumTagSinglePayload for PgQuery_TableFunc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_1);
}

uint64_t storeEnumTagSinglePayload for PgQuery_TableFunc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_1);
}

uint64_t getEnumTagSinglePayload for PgQuery_Query(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_2);
}

uint64_t storeEnumTagSinglePayload for PgQuery_Query(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_2);
}

uint64_t getEnumTagSinglePayload for PgQuery_TableSampleClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_3);
}

uint64_t storeEnumTagSinglePayload for PgQuery_TableSampleClause(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_3);
}

ValueMetadata *type metadata accessor for PgQuery_DefElemAction()
{
  return &type metadata for PgQuery_DefElemAction;
}

ValueMetadata *type metadata accessor for PgQuery_ConstrType()
{
  return &type metadata for PgQuery_ConstrType;
}

ValueMetadata *type metadata accessor for PgQuery_SortByNulls()
{
  return &type metadata for PgQuery_SortByNulls;
}

ValueMetadata *type metadata accessor for PgQuery_SortByDir()
{
  return &type metadata for PgQuery_SortByDir;
}

uint64_t getEnumTagSinglePayload for PgQuery_WindowDef(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_4);
}

uint64_t storeEnumTagSinglePayload for PgQuery_WindowDef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_4);
}

ValueMetadata *type metadata accessor for PgQuery_A_Expr_Kind()
{
  return &type metadata for PgQuery_A_Expr_Kind;
}

uint64_t getEnumTagSinglePayload for PgQuery_FuncExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_5);
}

uint64_t storeEnumTagSinglePayload for PgQuery_FuncExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_5);
}

uint64_t getEnumTagSinglePayload for PgQuery_FuncCall(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_6);
}

uint64_t storeEnumTagSinglePayload for PgQuery_FuncCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_6);
}

ValueMetadata *type metadata accessor for PgQuery_CoercionContext()
{
  return &type metadata for PgQuery_CoercionContext;
}

uint64_t getEnumTagSinglePayload for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3296Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_ObjectWithArgs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3297Tm);
}

uint64_t type metadata completion function for PgQuery_ObjectWithArgs()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PgQuery_CollateClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_7);
}

uint64_t storeEnumTagSinglePayload for PgQuery_CollateClause(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_7);
}

ValueMetadata *type metadata accessor for PgQuery_ViewCheckOption()
{
  return &type metadata for PgQuery_ViewCheckOption;
}

ValueMetadata *type metadata accessor for PgQuery_ObjectType()
{
  return &type metadata for PgQuery_ObjectType;
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_TypeName(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
    *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
    *(void *)(a1 + 16) = a2[2];
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    *(void *)(a1 + 32) = a2[4];
    uint64_t v6 = *(int *)(a3 + 48);
    uint64_t v7 = (uint64_t)a2 + v6;
    uint64_t v8 = a1 + v6;
    *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v8, v7, v9);
  }
  return v5;
}

uint64_t destroy for PgQuery_TypeName(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_TypeName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 48);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8(v6, v5, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_TypeName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_TypeName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 48);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_TypeName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
  *(unsigned char *)(a1 + 13) = *(unsigned char *)(a2 + 13);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_TypeName(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E920B78);
}

uint64_t sub_18E920B78(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 48);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_TypeName(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E920C3C);
}

void *sub_18E920C3C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 48);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_TypeName()
{
  return type metadata completion function for PgQuery_TypeName();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PgQuery_PartitionSpec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = a2[2];
    *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t initializeWithCopy for PgQuery_PartitionSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_PartitionSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_PartitionSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_PartitionSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_PartitionSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3317Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_PartitionSpec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3318Tm);
}

uint64_t type metadata completion function for PgQuery_PartitionSpec()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

void *initializeBufferWithCopyOfBuffer for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(void *)(a1 + 20) = *(uint64_t *)((char *)a2 + 20);
    uint64_t v6 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = a2[6];
    uint64_t v7 = *(int *)(a3 + 48);
    uint64_t v8 = (uint64_t)a2 + v7;
    uint64_t v9 = a1 + v7;
    *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
    uint64_t v10 = type metadata accessor for UnknownStorage();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v9, v8, v10);
  }
  return v3;
}

uint64_t destroy for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 48);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = a2 + v6;
  uint64_t v8 = a1 + v6;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v8, v7, v9);
  return a1;
}

uint64_t assignWithCopy for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  uint64_t v6 = *(int *)(a3 + 48);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(int *)(a3 + 48);
  uint64_t v5 = a2 + v4;
  uint64_t v6 = a1 + v4;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  uint64_t v7 = *(int *)(a3 + 48);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E921630);
}

uint64_t sub_18E921630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 48);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_PartitionBoundSpec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E9216F4);
}

uint64_t sub_18E9216F4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UnknownStorage();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 48);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for PgQuery_PartitionBoundSpec()
{
  return type metadata completion function for PgQuery_TypeName();
}

ValueMetadata *type metadata accessor for PgQuery_DropBehavior()
{
  return &type metadata for PgQuery_DropBehavior;
}

ValueMetadata *type metadata accessor for PgQuery_AlterTableType()
{
  return &type metadata for PgQuery_AlterTableType;
}

void *initializeBufferWithCopyOfBuffer for PgQuery_RoleSpec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v5;
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t destroy for PgQuery_RoleSpec(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for PgQuery_RoleSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for UnknownStorage();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t assignWithCopy for PgQuery_RoleSpec(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t)a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for PgQuery_RoleSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_RoleSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_RoleSpec(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3335Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_RoleSpec(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3336Tm);
}

uint64_t type metadata completion function for PgQuery_RoleSpec()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

ValueMetadata *type metadata accessor for PgQuery_SetOperation()
{
  return &type metadata for PgQuery_SetOperation;
}

uint64_t getEnumTagSinglePayload for PgQuery_SelectStmt(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_8);
}

uint64_t storeEnumTagSinglePayload for PgQuery_SelectStmt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_8);
}

uint64_t getEnumTagSinglePayload for PgQuery_IntoClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_9);
}

uint64_t storeEnumTagSinglePayload for PgQuery_IntoClause(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_9);
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_WithClause(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
    uint64_t v6 = *(int *)(a3 + 28);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for UnknownStorage();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t initializeWithCopy for PgQuery_WithClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

uint64_t assignWithCopy for PgQuery_WithClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for PgQuery_WithClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PgQuery_WithClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_WithClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3296Tm_0);
}

uint64_t storeEnumTagSinglePayload for PgQuery_WithClause(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3297Tm_0);
}

uint64_t type metadata completion function for PgQuery_WithClause()
{
  return type metadata completion function for PgQuery_ObjectWithArgs();
}

uint64_t getEnumTagSinglePayload for PgQuery_OnConflictClause(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_10);
}

uint64_t storeEnumTagSinglePayload for PgQuery_OnConflictClause(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_10);
}

ValueMetadata *type metadata accessor for PgQuery_LimitOption()
{
  return &type metadata for PgQuery_LimitOption;
}

ValueMetadata *type metadata accessor for PgQuery_OverridingKind()
{
  return &type metadata for PgQuery_OverridingKind;
}

uint64_t getEnumTagSinglePayload for PgQuery_QuerySource(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_QuerySource(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t getEnumTag for PgQuery_QuerySource(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for PgQuery_QuerySource(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PgQuery_QuerySource()
{
  return &type metadata for PgQuery_QuerySource;
}

ValueMetadata *type metadata accessor for PgQuery_CmdType()
{
  return &type metadata for PgQuery_CmdType;
}

uint64_t getEnumTagSinglePayload for PgQuery_OnConflictExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_11);
}

uint64_t storeEnumTagSinglePayload for PgQuery_OnConflictExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_11);
}

uint64_t getEnumTagSinglePayload for PgQuery_FromExpr(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_12);
}

uint64_t storeEnumTagSinglePayload for PgQuery_FromExpr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_12);
}

ValueMetadata *type metadata accessor for PgQuery_OnCommitAction()
{
  return &type metadata for PgQuery_OnCommitAction;
}

void *initializeBufferWithCopyOfBuffer for PgQuery_RangeVar(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v8;
    uint64_t v9 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v9;
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v10 = a2[7];
    uint64_t v11 = a2[8];
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    uint64_t v12 = *(int *)(a3 + 40);
    uint64_t v27 = (uint64_t)a2 + v12;
    uint64_t v28 = a1 + v12;
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v11;
    uint64_t v13 = type metadata accessor for UnknownStorage();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v28, v27, v13);
    uint64_t v15 = *(int *)(a3 + 44);
    uint64_t v16 = (void *)((char *)v4 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
    uint64_t v19 = *(void *)(Alias - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, Alias))
    {
      uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v22 = v17[1];
      void *v16 = *v17;
      v16[1] = v22;
      void v16[2] = v17[2];
      uint64_t v23 = *(int *)(Alias + 24);
      uint64_t v24 = (char *)v16 + v23;
      uint64_t v25 = (char *)v17 + v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v14((uint64_t)v24, (uint64_t)v25, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, Alias);
    }
  }
  return v4;
}

uint64_t destroy for PgQuery_RangeVar(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 40);
  uint64_t v5 = type metadata accessor for UnknownStorage();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v10(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 44);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 48))(v6, 1, Alias);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v6 + *(int *)(Alias + 24);
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v9, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_RangeVar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  uint64_t v9 = *(void *)(a2 + 64);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = a1 + v10;
  uint64_t v25 = a2 + v10;
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  uint64_t v12 = type metadata accessor for UnknownStorage();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v11, v25, v12);
  uint64_t v14 = *(int *)(a3 + 44);
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v18 = *(void *)(Alias - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, Alias))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    uint64_t v20 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v20;
    v15[2] = v16[2];
    uint64_t v21 = *(int *)(Alias + 24);
    uint64_t v22 = (char *)v15 + v21;
    uint64_t v23 = (char *)v16 + v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13((uint64_t)v22, (uint64_t)v23, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, Alias);
  }
  return a1;
}

uint64_t assignWithCopy for PgQuery_RangeVar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v6 = *(int *)(a3 + 40);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UnknownStorage();
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v25 = v9;
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(v24 + 24);
  ((void (*)(uint64_t, uint64_t))v10)(v7, v8);
  uint64_t v11 = *(int *)(a3 + 44);
  uint64_t v12 = (char *)(a1 + v11);
  uint64_t v13 = (char *)(a2 + v11);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v15 = *(void *)(Alias - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v8) = v16(v12, 1, Alias);
  int v17 = v16(v13, 1, Alias);
  if (!v8)
  {
    if (!v17)
    {
      *(void *)uint64_t v12 = *(void *)v13;
      *((void *)v12 + 1) = *((void *)v13 + 1);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *((void *)v12 + 2) = *((void *)v13 + 2);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v10(&v12[*(int *)(Alias + 24)], &v13[*(int *)(Alias + 24)], v25);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v12, type metadata accessor for PgQuery_Alias);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v12, v13, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *((void *)v12 + 1) = *((void *)v13 + 1);
  *((void *)v12 + 2) = *((void *)v13 + 2);
  uint64_t v18 = *(int *)(Alias + 24);
  uint64_t v19 = &v12[v18];
  uint64_t v20 = &v13[v18];
  uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v21(v19, v20, v25);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, Alias);
  return a1;
}

uint64_t initializeWithTake for PgQuery_RangeVar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v8 = *(int *)(a3 + 40);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (char *)(a2 + v8);
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v11 = type metadata accessor for UnknownStorage();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  uint64_t v13 = *(int *)(a3 + 44);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v17 = *(void *)(Alias - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, Alias))
  {
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    void v14[2] = v15[2];
    v12((char *)v14 + *(int *)(Alias + 24), (char *)v15 + *(int *)(Alias + 24), v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, Alias);
  }
  return a1;
}

uint64_t assignWithTake for PgQuery_RangeVar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  uint64_t v10 = *(int *)(a3 + 40);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UnknownStorage();
  uint64_t v25 = *(void *)(v13 - 8);
  uint64_t v26 = v13;
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v25 + 40);
  ((void (*)(uint64_t, uint64_t))v14)(v11, v12);
  uint64_t v15 = *(int *)(a3 + 44);
  uint64_t v16 = (char *)(a1 + v15);
  uint64_t v17 = (char *)(a2 + v15);
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v19 = *(void *)(Alias - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v12) = v20(v16, 1, Alias);
  int v21 = v20(v17, 1, Alias);
  if (!v12)
  {
    if (!v21)
    {
      uint64_t v24 = *((void *)v17 + 1);
      *(void *)uint64_t v16 = *(void *)v17;
      *((void *)v16 + 1) = v24;
      swift_bridgeObjectRelease();
      *((void *)v16 + 2) = *((void *)v17 + 2);
      swift_bridgeObjectRelease();
      v14(&v16[*(int *)(Alias + 24)], &v17[*(int *)(Alias + 24)], v26);
      return a1;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Alias);
    goto LABEL_6;
  }
  if (v21)
  {
LABEL_6:
    uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
    memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64));
    return a1;
  }
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *((void *)v16 + 2) = *((void *)v17 + 2);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(&v16[*(int *)(Alias + 24)], &v17[*(int *)(Alias + 24)], v26);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, Alias);
  return a1;
}

uint64_t getEnumTagSinglePayload for PgQuery_RangeVar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E922EF8);
}

uint64_t sub_18E922EF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a1 + *(int *)(a3 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = a1 + *(int *)(a3 + 44);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t storeEnumTagSinglePayload for PgQuery_RangeVar(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E92303C);
}

uint64_t sub_18E92303C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UnknownStorage();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = v5 + *(int *)(a4 + 40);
      uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
      uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = v5 + *(int *)(a4 + 44);
      return v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void type metadata completion function for PgQuery_RangeVar()
{
  type metadata accessor for UnknownStorage();
  if (v0 <= 0x3F)
  {
    type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Alias?, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for PgQuery_OnConflictAction()
{
  return &type metadata for PgQuery_OnConflictAction;
}

ValueMetadata *type metadata accessor for PgQuery_JoinType()
{
  return &type metadata for PgQuery_JoinType;
}

uint64_t getEnumTagSinglePayload for PgQuery_Alias(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_index_3407Tm);
}

uint64_t storeEnumTagSinglePayload for PgQuery_Alias(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_3408Tm);
}

uint64_t type metadata completion function for PgQuery_Alias()
{
  return type metadata completion function for PgQuery_Alias();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UnknownStorage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PgQuery_BoolTestType()
{
  return &type metadata for PgQuery_BoolTestType;
}

ValueMetadata *type metadata accessor for PgQuery_NullTestType()
{
  return &type metadata for PgQuery_NullTestType;
}

ValueMetadata *type metadata accessor for PgQuery_XmlOptionType()
{
  return &type metadata for PgQuery_XmlOptionType;
}

ValueMetadata *type metadata accessor for PgQuery_XmlExprOp()
{
  return &type metadata for PgQuery_XmlExprOp;
}

ValueMetadata *type metadata accessor for PgQuery_SQLValueFunctionOp()
{
  return &type metadata for PgQuery_SQLValueFunctionOp;
}

ValueMetadata *type metadata accessor for PgQuery_MinMaxOp()
{
  return &type metadata for PgQuery_MinMaxOp;
}

ValueMetadata *type metadata accessor for PgQuery_RowCompareType()
{
  return &type metadata for PgQuery_RowCompareType;
}

ValueMetadata *type metadata accessor for PgQuery_SubLinkType()
{
  return &type metadata for PgQuery_SubLinkType;
}

ValueMetadata *type metadata accessor for PgQuery_BoolExprType()
{
  return &type metadata for PgQuery_BoolExprType;
}

ValueMetadata *type metadata accessor for PgQuery_CoercionForm()
{
  return &type metadata for PgQuery_CoercionForm;
}

ValueMetadata *type metadata accessor for PgQuery_AggSplit()
{
  return &type metadata for PgQuery_AggSplit;
}

ValueMetadata *type metadata accessor for PgQuery_ParamKind()
{
  return &type metadata for PgQuery_ParamKind;
}

uint64_t getEnumTagSinglePayload for PgQuery_Node(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1_13);
}

uint64_t storeEnumTagSinglePayload for PgQuery_Node(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1_13);
}

uint64_t initializeBufferWithCopyOfBuffer for PgQuery_Node.OneOf_Node(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *(void *)a1 = *a2;
    a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v13 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v13;
        uint64_t v14 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v14;
        uint64_t v15 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v15;
        *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
        uint64_t v16 = a2[8];
        *(void *)(a1 + 56) = a2[7];
        *(void *)(a1 + 64) = v16;
        *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
        uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v18 = *(int *)(RangeVar + 40);
        uint64_t v1200 = (uint64_t)a2 + v18;
        uint64_t v1214 = a1 + v18;
        uint64_t v19 = type metadata accessor for UnknownStorage();
        uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20(v1214, v1200, v19);
        uint64_t v21 = *(int *)(RangeVar + 44);
        uint64_t v22 = (void *)(a1 + v21);
        uint64_t v23 = (uint64_t *)((char *)a2 + v21);
        uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
        uint64_t v25 = *(void *)(Alias - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, Alias)) {
          goto LABEL_6;
        }
        uint64_t v998 = v23[1];
        *uint64_t v22 = *v23;
        v22[1] = v998;
        v22[2] = v23[2];
        uint64_t v999 = *(int *)(Alias + 24);
        v1000 = (char *)v22 + v999;
        v1001 = (char *)v23 + v999;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20((uint64_t)v1000, (uint64_t)v1001, v19);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, Alias);
        goto LABEL_326;
      case 2u:
        uint64_t v27 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
        uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
        *(void *)(a1 + *(int *)(TableFunc + 20)) = *(uint64_t *)((char *)a2 + *(int *)(TableFunc + 20));
        swift_retain();
        goto LABEL_326;
      case 3u:
      case 0x68u:
      case 0xABu:
      case 0xE0u:
        uint64_t v982 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v982 - 8) + 16))(a1, a2, v982);
        goto LABEL_326;
      case 4u:
        uint64_t v29 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v29 - 8) + 16))(a1, a2, v29);
        uint64_t Var = type metadata accessor for PgQuery_Var(0);
        *(void *)(a1 + *(int *)(Var + 20)) = *(uint64_t *)((char *)a2 + *(int *)(Var + 20));
        swift_retain();
        goto LABEL_326;
      case 5u:
        uint64_t v31 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v31 - 8) + 16))(a1, a2, v31);
        uint64_t Param = type metadata accessor for PgQuery_Param(0);
        *(void *)(a1 + *(int *)(Param + 20)) = *(uint64_t *)((char *)a2 + *(int *)(Param + 20));
        swift_retain();
        goto LABEL_326;
      case 6u:
        uint64_t v33 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v33 - 8) + 16))(a1, a2, v33);
        uint64_t Aggref = type metadata accessor for PgQuery_Aggref(0);
        *(void *)(a1 + *(int *)(Aggref + 20)) = *(uint64_t *)((char *)a2 + *(int *)(Aggref + 20));
        swift_retain();
        goto LABEL_326;
      case 7u:
        uint64_t v35 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v35 - 8) + 16))(a1, a2, v35);
        uint64_t GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
        *(void *)(a1 + *(int *)(GroupingFunc + 20)) = *(uint64_t *)((char *)a2 + *(int *)(GroupingFunc + 20));
        swift_retain();
        goto LABEL_326;
      case 8u:
        uint64_t v37 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
        uint64_t WindowFunc = type metadata accessor for PgQuery_WindowFunc(0);
        *(void *)(a1 + *(int *)(WindowFunc + 20)) = *(uint64_t *)((char *)a2 + *(int *)(WindowFunc + 20));
        swift_retain();
        goto LABEL_326;
      case 9u:
        uint64_t v39 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
        uint64_t SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
        *(void *)(a1 + *(int *)(SubscriptingRef + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SubscriptingRef + 20));
        swift_retain();
        goto LABEL_326;
      case 0xAu:
        uint64_t v41 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
        Funcuint64_t Expr = type metadata accessor for PgQuery_FuncExpr(0);
        *(void *)(a1 + *(int *)(FuncExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(FuncExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0xBu:
        uint64_t v43 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v43 - 8) + 16))(a1, a2, v43);
        NamedArguint64_t Expr = type metadata accessor for PgQuery_NamedArgExpr(0);
        *(void *)(a1 + *(int *)(NamedArgExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(NamedArgExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0xCu:
        uint64_t v45 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v45 - 8) + 16))(a1, a2, v45);
        Opuint64_t Expr = type metadata accessor for PgQuery_OpExpr(0);
        *(void *)(a1 + *(int *)(OpExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(OpExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0xDu:
        uint64_t v47 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v47 - 8) + 16))(a1, a2, v47);
        Distinctuint64_t Expr = type metadata accessor for PgQuery_DistinctExpr(0);
        *(void *)(a1 + *(int *)(DistinctExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(DistinctExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0xEu:
        uint64_t v49 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v49 - 8) + 16))(a1, a2, v49);
        NullIfuint64_t Expr = type metadata accessor for PgQuery_NullIfExpr(0);
        *(void *)(a1 + *(int *)(NullIfExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(NullIfExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0xFu:
        uint64_t v51 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v51 - 8) + 16))(a1, a2, v51);
        ScalarArrayOpuint64_t Expr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
        *(void *)(a1 + *(int *)(ScalarArrayOpExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ScalarArrayOpExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x10u:
        uint64_t v53 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v53 - 8) + 16))(a1, a2, v53);
        Booluint64_t Expr = type metadata accessor for PgQuery_BoolExpr(0);
        *(void *)(a1 + *(int *)(BoolExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(BoolExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x11u:
        uint64_t v55 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v55 - 8) + 16))(a1, a2, v55);
        uint64_t SubLink = type metadata accessor for PgQuery_SubLink(0);
        *(void *)(a1 + *(int *)(SubLink + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SubLink + 20));
        swift_retain();
        goto LABEL_326;
      case 0x12u:
        uint64_t v57 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v57 - 8) + 16))(a1, a2, v57);
        uint64_t SubPlan = type metadata accessor for PgQuery_SubPlan(0);
        *(void *)(a1 + *(int *)(SubPlan + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SubPlan + 20));
        swift_retain();
        goto LABEL_326;
      case 0x13u:
        uint64_t v59 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v59 - 8) + 16))(a1, a2, v59);
        Alternativeuint64_t SubPlan = type metadata accessor for PgQuery_AlternativeSubPlan(0);
        *(void *)(a1 + *(int *)(AlternativeSubPlan + 20)) = *(uint64_t *)((char *)a2 + *(int *)(AlternativeSubPlan + 20));
        swift_retain();
        goto LABEL_326;
      case 0x14u:
        uint64_t v61 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v61 - 8) + 16))(a1, a2, v61);
        uint64_t FieldSelect = type metadata accessor for PgQuery_FieldSelect(0);
        *(void *)(a1 + *(int *)(FieldSelect + 20)) = *(uint64_t *)((char *)a2 + *(int *)(FieldSelect + 20));
        swift_retain();
        goto LABEL_326;
      case 0x15u:
        uint64_t v63 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v63 - 8) + 16))(a1, a2, v63);
        uint64_t FieldStore = type metadata accessor for PgQuery_FieldStore(0);
        *(void *)(a1 + *(int *)(FieldStore + 20)) = *(uint64_t *)((char *)a2 + *(int *)(FieldStore + 20));
        swift_retain();
        goto LABEL_326;
      case 0x16u:
        uint64_t v65 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v65 - 8) + 16))(a1, a2, v65);
        uint64_t RelabelType = type metadata accessor for PgQuery_RelabelType(0);
        *(void *)(a1 + *(int *)(RelabelType + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RelabelType + 20));
        swift_retain();
        goto LABEL_326;
      case 0x17u:
        uint64_t v67 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v67 - 8) + 16))(a1, a2, v67);
        uint64_t CoerceViaIO = type metadata accessor for PgQuery_CoerceViaIO(0);
        *(void *)(a1 + *(int *)(CoerceViaIO + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CoerceViaIO + 20));
        swift_retain();
        goto LABEL_326;
      case 0x18u:
        uint64_t v69 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v69 - 8) + 16))(a1, a2, v69);
        ArrayCoerceuint64_t Expr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
        *(void *)(a1 + *(int *)(ArrayCoerceExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ArrayCoerceExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x19u:
        uint64_t v71 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v71 - 8) + 16))(a1, a2, v71);
        ConvertRowtypeuint64_t Expr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
        *(void *)(a1 + *(int *)(ConvertRowtypeExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ConvertRowtypeExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x1Au:
        uint64_t v73 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v73 - 8) + 16))(a1, a2, v73);
        Collateuint64_t Expr = type metadata accessor for PgQuery_CollateExpr(0);
        *(void *)(a1 + *(int *)(CollateExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CollateExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x1Bu:
        uint64_t v75 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v75 - 8) + 16))(a1, a2, v75);
        Caseuint64_t Expr = type metadata accessor for PgQuery_CaseExpr(0);
        *(void *)(a1 + *(int *)(CaseExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CaseExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x1Cu:
        uint64_t v77 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v77 - 8) + 16))(a1, a2, v77);
        uint64_t CaseWhen = type metadata accessor for PgQuery_CaseWhen(0);
        *(void *)(a1 + *(int *)(CaseWhen + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CaseWhen + 20));
        swift_retain();
        goto LABEL_326;
      case 0x1Du:
        uint64_t v79 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v79 - 8) + 16))(a1, a2, v79);
        CaseTestuint64_t Expr = type metadata accessor for PgQuery_CaseTestExpr(0);
        *(void *)(a1 + *(int *)(CaseTestExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CaseTestExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x1Eu:
        uint64_t v81 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v81 - 8) + 16))(a1, a2, v81);
        Arrayuint64_t Expr = type metadata accessor for PgQuery_ArrayExpr(0);
        *(void *)(a1 + *(int *)(ArrayExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ArrayExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x1Fu:
        uint64_t v83 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v83 - 8) + 16))(a1, a2, v83);
        Rowuint64_t Expr = type metadata accessor for PgQuery_RowExpr(0);
        *(void *)(a1 + *(int *)(RowExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RowExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x20u:
        uint64_t v85 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v85 - 8) + 16))(a1, a2, v85);
        RowCompareuint64_t Expr = type metadata accessor for PgQuery_RowCompareExpr(0);
        *(void *)(a1 + *(int *)(RowCompareExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RowCompareExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x21u:
        uint64_t v87 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v87 - 8) + 16))(a1, a2, v87);
        Coalesceuint64_t Expr = type metadata accessor for PgQuery_CoalesceExpr(0);
        *(void *)(a1 + *(int *)(CoalesceExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CoalesceExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x22u:
        uint64_t v89 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v89 - 8) + 16))(a1, a2, v89);
        MinMaxuint64_t Expr = type metadata accessor for PgQuery_MinMaxExpr(0);
        *(void *)(a1 + *(int *)(MinMaxExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(MinMaxExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x23u:
        uint64_t v91 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v91 - 8) + 16))(a1, a2, v91);
        uint64_t SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
        *(void *)(a1 + *(int *)(SQLValueFunction + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SQLValueFunction + 20));
        swift_retain();
        goto LABEL_326;
      case 0x24u:
        uint64_t v93 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v93 - 8) + 16))(a1, a2, v93);
        Xmluint64_t Expr = type metadata accessor for PgQuery_XmlExpr(0);
        *(void *)(a1 + *(int *)(XmlExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(XmlExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x25u:
        uint64_t v95 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v95 - 8) + 16))(a1, a2, v95);
        uint64_t NullTest = type metadata accessor for PgQuery_NullTest(0);
        *(void *)(a1 + *(int *)(NullTest + 20)) = *(uint64_t *)((char *)a2 + *(int *)(NullTest + 20));
        swift_retain();
        goto LABEL_326;
      case 0x26u:
        uint64_t v97 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v97 - 8) + 16))(a1, a2, v97);
        uint64_t BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
        *(void *)(a1 + *(int *)(BooleanTest + 20)) = *(uint64_t *)((char *)a2 + *(int *)(BooleanTest + 20));
        swift_retain();
        goto LABEL_326;
      case 0x27u:
        uint64_t v99 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v99 - 8) + 16))(a1, a2, v99);
        uint64_t CoerceToDomain = type metadata accessor for PgQuery_CoerceToDomain(0);
        *(void *)(a1 + *(int *)(CoerceToDomain + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CoerceToDomain + 20));
        swift_retain();
        goto LABEL_326;
      case 0x28u:
        uint64_t v101 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v101 - 8) + 16))(a1, a2, v101);
        uint64_t CoerceToDomainValue = type metadata accessor for PgQuery_CoerceToDomainValue(0);
        *(void *)(a1 + *(int *)(CoerceToDomainValue + 20)) = *(uint64_t *)((char *)a2
                                                                          + *(int *)(CoerceToDomainValue + 20));
        swift_retain();
        goto LABEL_326;
      case 0x29u:
        uint64_t v103 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v103 - 8) + 16))(a1, a2, v103);
        uint64_t SetToDefault = type metadata accessor for PgQuery_SetToDefault(0);
        *(void *)(a1 + *(int *)(SetToDefault + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SetToDefault + 20));
        swift_retain();
        goto LABEL_326;
      case 0x2Au:
        uint64_t v105 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v105 - 8) + 16))(a1, a2, v105);
        CurrentOfuint64_t Expr = type metadata accessor for PgQuery_CurrentOfExpr(0);
        *(void *)(a1 + *(int *)(CurrentOfExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CurrentOfExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x2Bu:
        uint64_t v107 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v107 - 8) + 16))(a1, a2, v107);
        NextValueuint64_t Expr = type metadata accessor for PgQuery_NextValueExpr(0);
        *(void *)(a1 + *(int *)(NextValueExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(NextValueExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x2Cu:
        uint64_t v109 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v109 - 8) + 16))(a1, a2, v109);
        uint64_t InferenceElem = type metadata accessor for PgQuery_InferenceElem(0);
        *(void *)(a1 + *(int *)(InferenceElem + 20)) = *(uint64_t *)((char *)a2 + *(int *)(InferenceElem + 20));
        swift_retain();
        goto LABEL_326;
      case 0x2Du:
        uint64_t v111 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v111 - 8) + 16))(a1, a2, v111);
        uint64_t TargetEntry = type metadata accessor for PgQuery_TargetEntry(0);
        *(void *)(a1 + *(int *)(TargetEntry + 20)) = *(uint64_t *)((char *)a2 + *(int *)(TargetEntry + 20));
        swift_retain();
        goto LABEL_326;
      case 0x2Eu:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        uint64_t v113 = *(int *)(type metadata accessor for PgQuery_RangeTblRef(0) + 20);
        uint64_t v114 = a1 + v113;
        uint64_t v115 = (uint64_t)a2 + v113;
        uint64_t v116 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 16))(v114, v115, v116);
        goto LABEL_326;
      case 0x2Fu:
        uint64_t v117 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v117 - 8) + 16))(a1, a2, v117);
        Joinuint64_t Expr = type metadata accessor for PgQuery_JoinExpr(0);
        *(void *)(a1 + *(int *)(JoinExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(JoinExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0x30u:
        uint64_t v119 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v119 - 8) + 16))(a1, a2, v119);
        uint64_t v120 = type metadata accessor for PgQuery_FromExpr(0);
        *(void *)(a1 + *(int *)(v120 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v120 + 20));
        swift_retain();
        goto LABEL_326;
      case 0x31u:
        uint64_t v121 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v121 - 8) + 16))(a1, a2, v121);
        uint64_t v122 = type metadata accessor for PgQuery_OnConflictExpr(0);
        *(void *)(a1 + *(int *)(v122 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v122 + 20));
        swift_retain();
        goto LABEL_326;
      case 0x32u:
        uint64_t v123 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v123 - 8) + 16))(a1, a2, v123);
        uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
        *(void *)(a1 + *(int *)(IntoClause + 20)) = *(uint64_t *)((char *)a2 + *(int *)(IntoClause + 20));
        swift_retain();
        goto LABEL_326;
      case 0x33u:
        uint64_t v125 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v125 - 8) + 16))(a1, a2, v125);
        uint64_t RawStmt = type metadata accessor for PgQuery_RawStmt(0);
        *(void *)(a1 + *(int *)(RawStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RawStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x34u:
        uint64_t v127 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v127 - 8) + 16))(a1, a2, v127);
        uint64_t Query = type metadata accessor for PgQuery_Query(0);
        *(void *)(a1 + *(int *)(Query + 20)) = *(uint64_t *)((char *)a2 + *(int *)(Query + 20));
        swift_retain();
        goto LABEL_326;
      case 0x35u:
        uint64_t v129 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v129 - 8) + 16))(a1, a2, v129);
        uint64_t InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
        *(void *)(a1 + *(int *)(InsertStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(InsertStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x36u:
        uint64_t v131 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v131 - 8) + 16))(a1, a2, v131);
        uint64_t v132 = type metadata accessor for PgQuery_DeleteStmt(0);
        *(void *)(a1 + *(int *)(v132 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v132 + 20));
        swift_retain();
        goto LABEL_326;
      case 0x37u:
        uint64_t v133 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v133 - 8) + 16))(a1, a2, v133);
        uint64_t UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
        *(void *)(a1 + *(int *)(UpdateStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(UpdateStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x38u:
        uint64_t v135 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v135 - 8) + 16))(a1, a2, v135);
        uint64_t SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
        *(void *)(a1 + *(int *)(SelectStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SelectStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x39u:
        uint64_t v137 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v137;
        *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
        uint64_t AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
        uint64_t v139 = *(int *)(AlterTableStmt + 28);
        uint64_t v140 = a1 + v139;
        uint64_t v141 = (uint64_t)a2 + v139;
        uint64_t v142 = type metadata accessor for UnknownStorage();
        uint64_t v143 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v142 - 8) + 16);
        swift_bridgeObjectRetain();
        v143(v140, v141, v142);
        uint64_t v144 = *(int *)(AlterTableStmt + 32);
        uint64_t v145 = a1 + v144;
        uint64_t v146 = (uint64_t)a2 + v144;
        uint64_t v147 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v148 = *(void *)(v147 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147)) {
          goto LABEL_231;
        }
        uint64_t v1224 = v148;
        uint64_t v1002 = *(void *)(v146 + 8);
        *(void *)uint64_t v145 = *(void *)v146;
        *(void *)(v145 + 8) = v1002;
        uint64_t v1003 = *(void *)(v146 + 24);
        *(void *)(v145 + 16) = *(void *)(v146 + 16);
        *(void *)(v145 + 24) = v1003;
        uint64_t v1004 = *(void *)(v146 + 40);
        *(void *)(v145 + 32) = *(void *)(v146 + 32);
        *(void *)(v145 + 40) = v1004;
        *(unsigned char *)(v145 + 48) = *(unsigned char *)(v146 + 48);
        v1005 = v143;
        uint64_t v1006 = *(void *)(v146 + 64);
        *(void *)(v145 + 56) = *(void *)(v146 + 56);
        *(void *)(v145 + 64) = v1006;
        *(_DWORD *)(v145 + 72) = *(_DWORD *)(v146 + 72);
        uint64_t v1007 = *(int *)(v147 + 40);
        uint64_t v1187 = v146 + v1007;
        uint64_t v1203 = v145 + v1007;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v1008 = v1187;
        uint64_t v1188 = v142;
        v1005(v1203, v1008, v142);
        uint64_t v1009 = *(int *)(v147 + 44);
        v1010 = (void *)(v145 + v1009);
        v1011 = (void *)(v146 + v1009);
        uint64_t v1012 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v1013 = *(void *)(v1012 - 8);
        if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(v1013 + 48))(v1011, 1, v1012)) {
          goto LABEL_324;
        }
        goto LABEL_305;
      case 0x3Au:
        uint64_t v149 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v149 - 8) + 16))(a1, a2, v149);
        uint64_t AlterTableCmd = type metadata accessor for PgQuery_AlterTableCmd(0);
        *(void *)(a1 + *(int *)(AlterTableCmd + 20)) = *(uint64_t *)((char *)a2 + *(int *)(AlterTableCmd + 20));
        swift_retain();
        goto LABEL_326;
      case 0x3Bu:
        uint64_t v151 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v151 - 8) + 16))(a1, a2, v151);
        uint64_t AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
        *(void *)(a1 + *(int *)(AlterDomainStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(AlterDomainStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x3Cu:
        uint64_t v153 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v153 - 8) + 16))(a1, a2, v153);
        uint64_t SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
        *(void *)(a1 + *(int *)(SetOperationStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SetOperationStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x3Du:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t v155 = a2[6];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = v155;
        *(void *)(a1 + 56) = a2[7];
        *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
        *(void *)(a1 + 72) = a2[9];
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        uint64_t v156 = *(int *)(type metadata accessor for PgQuery_GrantStmt(0) + 48);
        uint64_t v157 = a1 + v156;
        uint64_t v158 = (uint64_t)a2 + v156;
        uint64_t v159 = type metadata accessor for UnknownStorage();
        uint64_t v160 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v160(v157, v158, v159);
        goto LABEL_326;
      case 0x3Eu:
        uint64_t v161 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v161;
        *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
        *(void *)(a1 + 24) = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
        uint64_t v163 = *(int *)(GrantRoleStmt + 36);
        uint64_t v164 = a1 + v163;
        uint64_t v1226 = (uint64_t)a2 + v163;
        uint64_t v165 = type metadata accessor for UnknownStorage();
        uint64_t v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v165 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v166(v164, v1226, v165);
        uint64_t v167 = *(int *)(GrantRoleStmt + 40);
        uint64_t v168 = (void *)(a1 + v167);
        uint64_t v169 = (uint64_t *)((char *)a2 + v167);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v171 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v171 + 48))(v169, 1, RoleSpec)) {
          goto LABEL_161;
        }
        goto LABEL_287;
      case 0x3Fu:
        *(void *)a1 = *a2;
        uint64_t AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
        uint64_t v173 = *(int *)(AlterDefaultPrivilegesStmt + 20);
        v174 = (unsigned char *)(a1 + v173);
        v175 = (char *)a2 + v173;
        uint64_t v176 = type metadata accessor for UnknownStorage();
        v177 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v176 - 8) + 16);
        swift_bridgeObjectRetain();
        v1227 = v177;
        v177(v174, v175, v176);
        uint64_t v178 = *(int *)(AlterDefaultPrivilegesStmt + 24);
        v179 = (unsigned char *)(a1 + v178);
        v180 = (char *)a2 + v178;
        uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
        uint64_t v182 = *(void *)(GrantStmt - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v182 + 48))(v180, 1, GrantStmt))
        {
          uint64_t v183 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
          memcpy(v179, v180, *(void *)(*(void *)(v183 - 8) + 64));
        }
        else
        {
          unsigned char *v179 = *v180;
          *((void *)v179 + 1) = *((void *)v180 + 1);
          v179[16] = v180[16];
          *((void *)v179 + 3) = *((void *)v180 + 3);
          v179[32] = v180[32];
          uint64_t v1014 = *((void *)v180 + 6);
          *((void *)v179 + 5) = *((void *)v180 + 5);
          *((void *)v179 + 6) = v1014;
          *((void *)v179 + 7) = *((void *)v180 + 7);
          v179[64] = v180[64];
          *((void *)v179 + 9) = *((void *)v180 + 9);
          v179[80] = v180[80];
          uint64_t v1015 = *(int *)(GrantStmt + 48);
          v1225 = &v179[v1015];
          v1016 = &v180[v1015];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1227(v1225, v1016, v176);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v182 + 56))(v179, 0, 1, GrantStmt);
        }
        goto LABEL_326;
      case 0x40u:
        uint64_t v184 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v184;
        uint64_t v185 = *(int *)(type metadata accessor for PgQuery_ClosePortalStmt(0) + 20);
        uint64_t v186 = a1 + v185;
        uint64_t v187 = (uint64_t)a2 + v185;
        uint64_t v188 = type metadata accessor for UnknownStorage();
        v189 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v188 - 8) + 16);
        swift_bridgeObjectRetain();
        v189(v186, v187, v188);
        goto LABEL_326;
      case 0x41u:
        uint64_t v190 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v190;
        *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
        uint64_t ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
        uint64_t v192 = *(int *)(ClusterStmt + 24);
        uint64_t v193 = a1 + v192;
        uint64_t v194 = (uint64_t)a2 + v192;
        uint64_t v195 = type metadata accessor for UnknownStorage();
        v196 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v195 - 8) + 16);
        swift_bridgeObjectRetain();
        v196(v193, v194, v195);
        uint64_t v197 = *(int *)(ClusterStmt + 28);
        uint64_t v145 = a1 + v197;
        uint64_t v146 = (uint64_t)a2 + v197;
        uint64_t v147 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v198 = *(void *)(v147 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v198 + 48))(v146, 1, v147)) {
          goto LABEL_231;
        }
        uint64_t v1224 = v198;
        uint64_t v1017 = *(void *)(v146 + 8);
        *(void *)uint64_t v145 = *(void *)v146;
        *(void *)(v145 + 8) = v1017;
        uint64_t v1018 = *(void *)(v146 + 24);
        *(void *)(v145 + 16) = *(void *)(v146 + 16);
        *(void *)(v145 + 24) = v1018;
        uint64_t v1019 = *(void *)(v146 + 40);
        *(void *)(v145 + 32) = *(void *)(v146 + 32);
        *(void *)(v145 + 40) = v1019;
        *(unsigned char *)(v145 + 48) = *(unsigned char *)(v146 + 48);
        v1005 = v196;
        uint64_t v1020 = *(void *)(v146 + 64);
        *(void *)(v145 + 56) = *(void *)(v146 + 56);
        *(void *)(v145 + 64) = v1020;
        *(_DWORD *)(v145 + 72) = *(_DWORD *)(v146 + 72);
        uint64_t v1021 = *(int *)(v147 + 40);
        uint64_t v1189 = v146 + v1021;
        uint64_t v1204 = v145 + v1021;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v1022 = v1189;
        uint64_t v1188 = v195;
        v1005(v1204, v1022, v195);
        uint64_t v1023 = *(int *)(v147 + 44);
        v1010 = (void *)(v145 + v1023);
        v1011 = (void *)(v146 + v1023);
        uint64_t v1012 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v1013 = *(void *)(v1012 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1013 + 48))(v1011, 1, v1012)) {
          goto LABEL_305;
        }
        goto LABEL_324;
      case 0x42u:
        uint64_t v199 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v199 - 8) + 16))(a1, a2, v199);
        uint64_t CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
        *(void *)(a1 + *(int *)(CopyStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CopyStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x43u:
        uint64_t v201 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v201 - 8) + 16))(a1, a2, v201);
        uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
        *(void *)(a1 + *(int *)(Stmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(Stmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x44u:
        *(void *)a1 = *a2;
        *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
        uint64_t v203 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v203;
        *(void *)(a1 + 32) = a2[4];
        *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
        uint64_t v204 = *(int *)(type metadata accessor for PgQuery_DefineStmt(0) + 44);
        uint64_t v205 = a1 + v204;
        uint64_t v206 = (uint64_t)a2 + v204;
        uint64_t v207 = type metadata accessor for UnknownStorage();
        v208 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v207 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v208(v205, v206, v207);
        goto LABEL_326;
      case 0x45u:
        uint64_t v209 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v209;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        *(_WORD *)(a1 + 33) = *(_WORD *)((char *)a2 + 33);
        uint64_t v210 = *(int *)(type metadata accessor for PgQuery_DropStmt(0) + 36);
        uint64_t v211 = a1 + v210;
        uint64_t v212 = (uint64_t)a2 + v210;
        uint64_t v213 = type metadata accessor for UnknownStorage();
        v214 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v213 - 8) + 16);
        swift_bridgeObjectRetain();
        v214(v211, v212, v213);
        goto LABEL_326;
      case 0x46u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)(a1 + 16) = a2[2];
        *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
        uint64_t v215 = *(int *)(type metadata accessor for PgQuery_TruncateStmt(0) + 28);
        uint64_t v216 = a1 + v215;
        uint64_t v217 = (uint64_t)a2 + v215;
        uint64_t v218 = type metadata accessor for UnknownStorage();
        v219 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v218 - 8) + 16);
        swift_bridgeObjectRetain();
        v219(v216, v217, v218);
        goto LABEL_326;
      case 0x47u:
        uint64_t v220 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v220 - 8) + 16))(a1, a2, v220);
        Commentuint64_t Stmt = type metadata accessor for PgQuery_CommentStmt(0);
        *(void *)(a1 + *(int *)(CommentStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CommentStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x48u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        uint64_t v222 = *(int *)(type metadata accessor for PgQuery_FetchStmt(0) + 32);
        uint64_t v223 = a1 + v222;
        uint64_t v224 = (uint64_t)a2 + v222;
        uint64_t v225 = type metadata accessor for UnknownStorage();
        v226 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v225 - 8) + 16);
        swift_bridgeObjectRetain();
        v226(v223, v224, v225);
        goto LABEL_326;
      case 0x49u:
        uint64_t v227 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v227 - 8) + 16))(a1, a2, v227);
        Indexuint64_t Stmt = type metadata accessor for PgQuery_IndexStmt(0);
        *(void *)(a1 + *(int *)(IndexStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(IndexStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x4Au:
        *(_WORD *)a1 = *(_WORD *)a2;
        uint64_t v229 = a2[2];
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = v229;
        *(void *)(a1 + 24) = a2[3];
        Functionuint64_t Stmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
        uint64_t v231 = *(int *)(FunctionStmt + 36);
        uint64_t v1215 = (uint64_t)a2 + v231;
        uint64_t v1228 = a1 + v231;
        uint64_t v232 = type metadata accessor for UnknownStorage();
        v233 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v232 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v234 = v1215;
        uint64_t v1216 = v232;
        v233(v1228, v234, v232);
        uint64_t v235 = *(int *)(FunctionStmt + 40);
        uint64_t v236 = a1 + v235;
        uint64_t v237 = (uint64_t)a2 + v235;
        uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
        uint64_t v239 = *(void *)(TypeName - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v239 + 48))(v237, 1, TypeName)) {
          goto LABEL_299;
        }
        *(void *)uint64_t v236 = *(void *)v237;
        *(_DWORD *)(v236 + 8) = *(_DWORD *)(v237 + 8);
        *(_WORD *)(v236 + 12) = *(_WORD *)(v237 + 12);
        *(void *)(v236 + 16) = *(void *)(v237 + 16);
        *(_DWORD *)(v236 + 24) = *(_DWORD *)(v237 + 24);
        *(void *)(v236 + 32) = *(void *)(v237 + 32);
        *(_DWORD *)(v236 + 40) = *(_DWORD *)(v237 + 40);
        uint64_t v1024 = *(int *)(TypeName + 48);
        uint64_t v1025 = v236 + v1024;
        uint64_t v1026 = v237 + v1024;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v233(v1025, v1026, v1216);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v239 + 56))(v236, 0, 1, TypeName);
        goto LABEL_326;
      case 0x4Bu:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)(a1 + 16) = a2[2];
        AlterFunctionuint64_t Stmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
        uint64_t v241 = *(int *)(AlterFunctionStmt + 24);
        uint64_t v242 = a1 + v241;
        uint64_t v243 = (uint64_t)a2 + v241;
        uint64_t v244 = type metadata accessor for UnknownStorage();
        v245 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v244 - 8) + 16);
        swift_bridgeObjectRetain();
        v245(v242, v243, v244);
        uint64_t v246 = *(int *)(AlterFunctionStmt + 28);
        v247 = (void *)(a1 + v246);
        v248 = (uint64_t *)((char *)a2 + v246);
        uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
        uint64_t v250 = *(void *)(ObjectWithArgs - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v250 + 48))(v248, 1, ObjectWithArgs)) {
          goto LABEL_85;
        }
        goto LABEL_268;
      case 0x4Cu:
        *(void *)a1 = *a2;
        uint64_t v252 = *(int *)(type metadata accessor for PgQuery_DoStmt(0) + 20);
        uint64_t v253 = a1 + v252;
        uint64_t v254 = (uint64_t)a2 + v252;
        uint64_t v255 = type metadata accessor for UnknownStorage();
        v256 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v255 - 8) + 16);
        swift_bridgeObjectRetain();
        v256(v253, v254, v255);
        goto LABEL_326;
      case 0x4Du:
        uint64_t v257 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v257 - 8) + 16))(a1, a2, v257);
        Renameuint64_t Stmt = type metadata accessor for PgQuery_RenameStmt(0);
        *(void *)(a1 + *(int *)(RenameStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RenameStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x4Eu:
        uint64_t v259 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v259 - 8) + 16))(a1, a2, v259);
        Ruleuint64_t Stmt = type metadata accessor for PgQuery_RuleStmt(0);
        *(void *)(a1 + *(int *)(RuleStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RuleStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x4Fu:
        uint64_t v261 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v261;
        uint64_t v262 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v262;
        uint64_t v263 = *(int *)(type metadata accessor for PgQuery_NotifyStmt(0) + 24);
        uint64_t v264 = a1 + v263;
        uint64_t v265 = (uint64_t)a2 + v263;
        uint64_t v266 = type metadata accessor for UnknownStorage();
        v267 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v266 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v267(v264, v265, v266);
        goto LABEL_326;
      case 0x50u:
        uint64_t v268 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v268;
        uint64_t v269 = *(int *)(type metadata accessor for PgQuery_ListenStmt(0) + 20);
        uint64_t v270 = a1 + v269;
        uint64_t v271 = (uint64_t)a2 + v269;
        uint64_t v272 = type metadata accessor for UnknownStorage();
        v273 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v272 - 8) + 16);
        swift_bridgeObjectRetain();
        v273(v270, v271, v272);
        goto LABEL_326;
      case 0x51u:
        uint64_t v274 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v274;
        uint64_t v275 = *(int *)(type metadata accessor for PgQuery_UnlistenStmt(0) + 20);
        uint64_t v276 = a1 + v275;
        uint64_t v277 = (uint64_t)a2 + v275;
        uint64_t v278 = type metadata accessor for UnknownStorage();
        v279 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v278 - 8) + 16);
        swift_bridgeObjectRetain();
        v279(v276, v277, v278);
        goto LABEL_326;
      case 0x52u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v280 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v280;
        uint64_t v281 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v281;
        *(void *)(a1 + 48) = a2[6];
        *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
        uint64_t v282 = *(int *)(type metadata accessor for PgQuery_TransactionStmt(0) + 36);
        uint64_t v283 = a1 + v282;
        uint64_t v284 = (uint64_t)a2 + v282;
        uint64_t v285 = type metadata accessor for UnknownStorage();
        v286 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v285 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v286(v283, v284, v285);
        goto LABEL_326;
      case 0x53u:
        uint64_t v287 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v287 - 8) + 16))(a1, a2, v287);
        Viewuint64_t Stmt = type metadata accessor for PgQuery_ViewStmt(0);
        *(void *)(a1 + *(int *)(ViewStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ViewStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x54u:
        uint64_t v289 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v289;
        uint64_t v290 = *(int *)(type metadata accessor for PgQuery_LoadStmt(0) + 20);
        uint64_t v291 = a1 + v290;
        uint64_t v292 = (uint64_t)a2 + v290;
        uint64_t v293 = type metadata accessor for UnknownStorage();
        v294 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v293 - 8) + 16);
        swift_bridgeObjectRetain();
        v294(v291, v292, v293);
        goto LABEL_326;
      case 0x55u:
        uint64_t v295 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v295 - 8) + 16))(a1, a2, v295);
        Domainuint64_t Stmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
        *(void *)(a1 + *(int *)(DomainStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(DomainStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x56u:
        uint64_t v297 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v297;
        *(void *)(a1 + 16) = a2[2];
        uint64_t v298 = *(int *)(type metadata accessor for PgQuery_CreatedbStmt(0) + 24);
        uint64_t v299 = a1 + v298;
        uint64_t v300 = (uint64_t)a2 + v298;
        uint64_t v301 = type metadata accessor for UnknownStorage();
        v302 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v301 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v302(v299, v300, v301);
        goto LABEL_326;
      case 0x57u:
        uint64_t v303 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v303;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        uint64_t v304 = *(int *)(type metadata accessor for PgQuery_DropdbStmt(0) + 28);
        uint64_t v305 = a1 + v304;
        uint64_t v306 = (uint64_t)a2 + v304;
        uint64_t v307 = type metadata accessor for UnknownStorage();
        v308 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v307 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v308(v305, v306, v307);
        goto LABEL_326;
      case 0x58u:
        uint64_t v309 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v309;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v310 = *(int *)(type metadata accessor for PgQuery_VacuumStmt(0) + 28);
        uint64_t v311 = a1 + v310;
        uint64_t v312 = (uint64_t)a2 + v310;
        uint64_t v313 = type metadata accessor for UnknownStorage();
        v314 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v313 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v314(v311, v312, v313);
        goto LABEL_326;
      case 0x59u:
        uint64_t v315 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v315 - 8) + 16))(a1, a2, v315);
        Explainuint64_t Stmt = type metadata accessor for PgQuery_ExplainStmt(0);
        *(void *)(a1 + *(int *)(ExplainStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ExplainStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x5Au:
        uint64_t v317 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v317 - 8) + 16))(a1, a2, v317);
        TableAsuint64_t Stmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
        *(void *)(a1 + *(int *)(TableAsStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(TableAsStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x5Bu:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
        Sequint64_t Stmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
        uint64_t v320 = *(int *)(SeqStmt + 32);
        uint64_t v321 = a1 + v320;
        uint64_t v322 = (uint64_t)a2 + v320;
        uint64_t v323 = type metadata accessor for UnknownStorage();
        v324 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v323 - 8) + 16);
        swift_bridgeObjectRetain();
        v324(v321, v322, v323);
        uint64_t v325 = *(int *)(SeqStmt + 36);
        uint64_t v145 = a1 + v325;
        uint64_t v146 = (uint64_t)a2 + v325;
        uint64_t v147 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v326 = *(void *)(v147 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v326 + 48))(v146, 1, v147)) {
          goto LABEL_231;
        }
        uint64_t v1224 = v326;
        uint64_t v1030 = *(void *)(v146 + 8);
        *(void *)uint64_t v145 = *(void *)v146;
        *(void *)(v145 + 8) = v1030;
        uint64_t v1031 = *(void *)(v146 + 24);
        *(void *)(v145 + 16) = *(void *)(v146 + 16);
        *(void *)(v145 + 24) = v1031;
        uint64_t v1032 = *(void *)(v146 + 40);
        *(void *)(v145 + 32) = *(void *)(v146 + 32);
        *(void *)(v145 + 40) = v1032;
        *(unsigned char *)(v145 + 48) = *(unsigned char *)(v146 + 48);
        v1005 = v324;
        uint64_t v1033 = *(void *)(v146 + 64);
        *(void *)(v145 + 56) = *(void *)(v146 + 56);
        *(void *)(v145 + 64) = v1033;
        *(_DWORD *)(v145 + 72) = *(_DWORD *)(v146 + 72);
        uint64_t v1034 = *(int *)(v147 + 40);
        uint64_t v1190 = v146 + v1034;
        uint64_t v1205 = v145 + v1034;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v1035 = v1190;
        uint64_t v1188 = v323;
        v1005(v1205, v1035, v323);
        uint64_t v1036 = *(int *)(v147 + 44);
        v1010 = (void *)(v145 + v1036);
        v1011 = (void *)(v146 + v1036);
        uint64_t v1012 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v1013 = *(void *)(v1012 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1013 + 48))(v1011, 1, v1012)) {
          goto LABEL_305;
        }
        goto LABEL_324;
      case 0x5Cu:
        *(void *)a1 = *a2;
        *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
        AlterSequint64_t Stmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
        uint64_t v328 = *(int *)(AlterSeqStmt + 28);
        uint64_t v329 = a1 + v328;
        uint64_t v330 = (uint64_t)a2 + v328;
        uint64_t v331 = type metadata accessor for UnknownStorage();
        v332 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v331 - 8) + 16);
        swift_bridgeObjectRetain();
        v332(v329, v330, v331);
        uint64_t v333 = *(int *)(AlterSeqStmt + 32);
        uint64_t v145 = a1 + v333;
        uint64_t v146 = (uint64_t)a2 + v333;
        uint64_t v147 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v334 = *(void *)(v147 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v334 + 48))(v146, 1, v147)) {
          goto LABEL_231;
        }
        uint64_t v1224 = v334;
        uint64_t v1037 = *(void *)(v146 + 8);
        *(void *)uint64_t v145 = *(void *)v146;
        *(void *)(v145 + 8) = v1037;
        uint64_t v1038 = *(void *)(v146 + 24);
        *(void *)(v145 + 16) = *(void *)(v146 + 16);
        *(void *)(v145 + 24) = v1038;
        uint64_t v1039 = *(void *)(v146 + 40);
        *(void *)(v145 + 32) = *(void *)(v146 + 32);
        *(void *)(v145 + 40) = v1039;
        *(unsigned char *)(v145 + 48) = *(unsigned char *)(v146 + 48);
        v1005 = v332;
        uint64_t v1040 = *(void *)(v146 + 64);
        *(void *)(v145 + 56) = *(void *)(v146 + 56);
        *(void *)(v145 + 64) = v1040;
        *(_DWORD *)(v145 + 72) = *(_DWORD *)(v146 + 72);
        uint64_t v1041 = *(int *)(v147 + 40);
        uint64_t v1191 = v146 + v1041;
        uint64_t v1206 = v145 + v1041;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v1042 = v1191;
        uint64_t v1188 = v331;
        v1005(v1206, v1042, v331);
        uint64_t v1043 = *(int *)(v147 + 44);
        v1010 = (void *)(v145 + v1043);
        v1011 = (void *)(v146 + v1043);
        uint64_t v1012 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v1013 = *(void *)(v1012 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1013 + 48))(v1011, 1, v1012)) {
          goto LABEL_305;
        }
        goto LABEL_324;
      case 0x5Du:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v335 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v335;
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        uint64_t v336 = *(int *)(type metadata accessor for PgQuery_VariableSetStmt(0) + 32);
        uint64_t v337 = a1 + v336;
        uint64_t v338 = (uint64_t)a2 + v336;
        uint64_t v339 = type metadata accessor for UnknownStorage();
        v340 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v339 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v340(v337, v338, v339);
        goto LABEL_326;
      case 0x5Eu:
        uint64_t v341 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v341;
        uint64_t v342 = *(int *)(type metadata accessor for PgQuery_VariableShowStmt(0) + 20);
        uint64_t v343 = a1 + v342;
        uint64_t v344 = (uint64_t)a2 + v342;
        uint64_t v345 = type metadata accessor for UnknownStorage();
        v346 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v345 - 8) + 16);
        swift_bridgeObjectRetain();
        v346(v343, v344, v345);
        goto LABEL_326;
      case 0x5Fu:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v347 = *(int *)(type metadata accessor for PgQuery_DiscardStmt(0) + 20);
        uint64_t v348 = a1 + v347;
        uint64_t v349 = (uint64_t)a2 + v347;
        uint64_t v350 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v350 - 8) + 16))(v348, v349, v350);
        goto LABEL_326;
      case 0x60u:
        uint64_t v351 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v351 - 8) + 16))(a1, a2, v351);
        Triguint64_t Stmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
        *(void *)(a1 + *(int *)(TrigStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(TrigStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x61u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v353 = a2[2];
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = v353;
        uint64_t v354 = a2[4];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = v354;
        *(void *)(a1 + 40) = a2[5];
        *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
        uint64_t v355 = *(int *)(type metadata accessor for PgQuery_CreatePLangStmt(0) + 40);
        uint64_t v356 = a1 + v355;
        uint64_t v1229 = (uint64_t)a2 + v355;
        uint64_t v357 = type metadata accessor for UnknownStorage();
        v358 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v357 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v358(v356, v1229, v357);
        goto LABEL_326;
      case 0x62u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v359 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v359;
        *(void *)(a1 + 32) = a2[4];
        uint64_t v360 = *(int *)(type metadata accessor for PgQuery_CreateRoleStmt(0) + 28);
        uint64_t v361 = a1 + v360;
        uint64_t v362 = (uint64_t)a2 + v360;
        uint64_t v363 = type metadata accessor for UnknownStorage();
        v364 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v363 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v364(v361, v362, v363);
        goto LABEL_326;
      case 0x63u:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        AlterRoleuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
        uint64_t v366 = *(int *)(AlterRoleStmt + 24);
        uint64_t v367 = a1 + v366;
        uint64_t v368 = (uint64_t)a2 + v366;
        uint64_t v369 = type metadata accessor for UnknownStorage();
        v370 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v369 - 8) + 16);
        swift_bridgeObjectRetain();
        v370(v367, v368, v369);
        uint64_t v371 = *(int *)(AlterRoleStmt + 28);
        v372 = (void *)(a1 + v371);
        v373 = (uint64_t *)((char *)a2 + v371);
        uint64_t v374 = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v375 = *(void *)(v374 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v375 + 48))(v373, 1, v374)) {
          goto LABEL_163;
        }
        goto LABEL_288;
      case 0x64u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v376 = *(int *)(type metadata accessor for PgQuery_DropRoleStmt(0) + 24);
        uint64_t v377 = a1 + v376;
        uint64_t v378 = (uint64_t)a2 + v376;
        uint64_t v379 = type metadata accessor for UnknownStorage();
        v380 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v379 - 8) + 16);
        swift_bridgeObjectRetain();
        v380(v377, v378, v379);
        goto LABEL_326;
      case 0x65u:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
        uint64_t v381 = *(int *)(type metadata accessor for PgQuery_LockStmt(0) + 28);
        uint64_t v382 = a1 + v381;
        uint64_t v383 = (uint64_t)a2 + v381;
        uint64_t v384 = type metadata accessor for UnknownStorage();
        v385 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v384 - 8) + 16);
        swift_bridgeObjectRetain();
        v385(v382, v383, v384);
        goto LABEL_326;
      case 0x66u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v386 = *(int *)(type metadata accessor for PgQuery_ConstraintsSetStmt(0) + 24);
        uint64_t v387 = a1 + v386;
        uint64_t v388 = (uint64_t)a2 + v386;
        uint64_t v389 = type metadata accessor for UnknownStorage();
        v390 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v389 - 8) + 16);
        swift_bridgeObjectRetain();
        v390(v387, v388, v389);
        goto LABEL_326;
      case 0x67u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v391 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v391;
        *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
        *(unsigned char *)(a1 + 36) = *((unsigned char *)a2 + 36);
        Reindexuint64_t Stmt = type metadata accessor for PgQuery_ReindexStmt(0);
        uint64_t v393 = *(int *)(ReindexStmt + 32);
        uint64_t v394 = a1 + v393;
        uint64_t v395 = (uint64_t)a2 + v393;
        uint64_t v396 = type metadata accessor for UnknownStorage();
        v397 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v396 - 8) + 16);
        swift_bridgeObjectRetain();
        v397(v394, v395, v396);
        uint64_t v398 = *(int *)(ReindexStmt + 36);
        uint64_t v145 = a1 + v398;
        uint64_t v146 = (uint64_t)a2 + v398;
        uint64_t v147 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v399 = *(void *)(v147 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v399 + 48))(v146, 1, v147)) {
          goto LABEL_231;
        }
        uint64_t v1224 = v399;
        uint64_t v1044 = *(void *)(v146 + 8);
        *(void *)uint64_t v145 = *(void *)v146;
        *(void *)(v145 + 8) = v1044;
        uint64_t v1045 = *(void *)(v146 + 24);
        *(void *)(v145 + 16) = *(void *)(v146 + 16);
        *(void *)(v145 + 24) = v1045;
        uint64_t v1046 = *(void *)(v146 + 40);
        *(void *)(v145 + 32) = *(void *)(v146 + 32);
        *(void *)(v145 + 40) = v1046;
        *(unsigned char *)(v145 + 48) = *(unsigned char *)(v146 + 48);
        v1005 = v397;
        uint64_t v1047 = *(void *)(v146 + 64);
        *(void *)(v145 + 56) = *(void *)(v146 + 56);
        *(void *)(v145 + 64) = v1047;
        *(_DWORD *)(v145 + 72) = *(_DWORD *)(v146 + 72);
        uint64_t v1048 = *(int *)(v147 + 40);
        uint64_t v1192 = v146 + v1048;
        uint64_t v1207 = v145 + v1048;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v1049 = v1192;
        uint64_t v1188 = v396;
        v1005(v1207, v1049, v396);
        uint64_t v1050 = *(int *)(v147 + 44);
        v1010 = (void *)(v145 + v1050);
        v1011 = (void *)(v146 + v1050);
        uint64_t v1012 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v1013 = *(void *)(v1012 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1013 + 48))(v1011, 1, v1012)) {
          goto LABEL_305;
        }
        goto LABEL_324;
      case 0x69u:
        uint64_t v400 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v400;
        *(void *)(a1 + 16) = a2[2];
        *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
        Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
        uint64_t v402 = *(int *)(SchemaStmt + 28);
        uint64_t v403 = a1 + v402;
        uint64_t v1230 = (uint64_t)a2 + v402;
        uint64_t v165 = type metadata accessor for UnknownStorage();
        uint64_t v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v165 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v166(v403, v1230, v165);
        uint64_t v404 = *(int *)(SchemaStmt + 32);
        uint64_t v168 = (void *)(a1 + v404);
        uint64_t v169 = (uint64_t *)((char *)a2 + v404);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v171 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v171 + 48))(v169, 1, RoleSpec)) {
          goto LABEL_161;
        }
        goto LABEL_287;
      case 0x6Au:
        uint64_t v405 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v405;
        *(void *)(a1 + 16) = a2[2];
        uint64_t v406 = *(int *)(type metadata accessor for PgQuery_AlterDatabaseStmt(0) + 24);
        uint64_t v407 = a1 + v406;
        uint64_t v408 = (uint64_t)a2 + v406;
        uint64_t v409 = type metadata accessor for UnknownStorage();
        v410 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v409 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v410(v407, v408, v409);
        goto LABEL_326;
      case 0x6Bu:
        uint64_t v411 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v411;
        AlterDatabaseSetuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
        uint64_t v413 = *(int *)(AlterDatabaseSetStmt + 20);
        uint64_t v414 = a1 + v413;
        uint64_t v415 = (uint64_t)a2 + v413;
        uint64_t v416 = type metadata accessor for UnknownStorage();
        v417 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v416 - 8) + 16);
        swift_bridgeObjectRetain();
        v417(v414, v415, v416);
        uint64_t v418 = *(int *)(AlterDatabaseSetStmt + 24);
        v419 = (void *)(a1 + v418);
        v420 = (uint64_t *)((char *)a2 + v418);
        VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
        uint64_t v422 = *(void *)(VariableSetStmt - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v422 + 48))(v420, 1, VariableSetStmt)) {
          goto LABEL_122;
        }
        goto LABEL_277;
      case 0x6Cu:
        uint64_t v424 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v424;
        AlterRoleSetuint64_t Stmt = (int *)type metadata accessor for PgQuery_AlterRoleSetStmt(0);
        uint64_t v426 = AlterRoleSetStmt[5];
        uint64_t v427 = a1 + v426;
        uint64_t v428 = (uint64_t)a2 + v426;
        uint64_t v429 = type metadata accessor for UnknownStorage();
        v430 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v429 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v1231 = v429;
        v430(v427, v428, v429);
        uint64_t v431 = AlterRoleSetStmt[6];
        v432 = (void *)(a1 + v431);
        v433 = (uint64_t *)((char *)a2 + v431);
        uint64_t v434 = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v435 = *(void *)(v434 - 8);
        v1217 = (void (*)(char *, char *, uint64_t))v430;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v435 + 48))(v433, 1, v434))
        {
          uint64_t v436 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
          memcpy(v432, v433, *(void *)(*(void *)(v436 - 8) + 64));
        }
        else
        {
          void *v432 = *v433;
          *((unsigned char *)v432 + 8) = *((unsigned char *)v433 + 8);
          uint64_t v1054 = v433[3];
          v432[2] = v433[2];
          v432[3] = v1054;
          *((_DWORD *)v432 + 8) = *((_DWORD *)v433 + 8);
          uint64_t v1055 = *(int *)(v434 + 28);
          v1208 = (char *)v432 + v1055;
          v1056 = (char *)v433 + v1055;
          swift_bridgeObjectRetain();
          v430((uint64_t)v1208, (uint64_t)v1056, v1231);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v435 + 56))(v432, 0, 1, v434);
        }
        uint64_t v1057 = AlterRoleSetStmt[7];
        v1058 = (void *)(a1 + v1057);
        v1059 = (uint64_t *)((char *)a2 + v1057);
        uint64_t v1060 = type metadata accessor for PgQuery_VariableSetStmt(0);
        uint64_t v1061 = *(void *)(v1060 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1061 + 48))(v1059, 1, v1060))
        {
          uint64_t v1062 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
          memcpy(v1058, v1059, *(void *)(*(void *)(v1062 - 8) + 64));
        }
        else
        {
          void *v1058 = *v1059;
          *((unsigned char *)v1058 + 8) = *((unsigned char *)v1059 + 8);
          uint64_t v1137 = v1059[3];
          v1058[2] = v1059[2];
          v1058[3] = v1137;
          v1058[4] = v1059[4];
          *((unsigned char *)v1058 + 40) = *((unsigned char *)v1059 + 40);
          uint64_t v1138 = *(int *)(v1060 + 32);
          v1139 = (char *)v1058 + v1138;
          v1140 = (char *)v1059 + v1138;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1217(v1139, v1140, v1231);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1061 + 56))(v1058, 0, 1, v1060);
        }
        goto LABEL_326;
      case 0x6Du:
        uint64_t v437 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v437;
        uint64_t v438 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v438;
        uint64_t v439 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v439;
        *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
        uint64_t v440 = *(int *)(type metadata accessor for PgQuery_CreateConversionStmt(0) + 36);
        uint64_t v441 = a1 + v440;
        uint64_t v1232 = (uint64_t)a2 + v440;
        uint64_t v442 = type metadata accessor for UnknownStorage();
        v443 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v442 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v443(v441, v1232, v442);
        goto LABEL_326;
      case 0x6Eu:
        uint64_t v444 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v444 - 8) + 16))(a1, a2, v444);
        Castuint64_t Stmt = type metadata accessor for PgQuery_CreateCastStmt(0);
        *(void *)(a1 + *(int *)(CastStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CastStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x6Fu:
        uint64_t v446 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v446;
        uint64_t v447 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v447;
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        OpClassuint64_t Stmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
        uint64_t v449 = *(int *)(OpClassStmt + 36);
        uint64_t v1201 = (uint64_t)a2 + v449;
        uint64_t v1218 = a1 + v449;
        uint64_t v450 = type metadata accessor for UnknownStorage();
        v451 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v450 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v451(v1218, v1201, v450);
        uint64_t v452 = *(int *)(OpClassStmt + 40);
        uint64_t v236 = a1 + v452;
        uint64_t v237 = (uint64_t)a2 + v452;
        uint64_t v453 = type metadata accessor for PgQuery_TypeName(0);
        uint64_t v454 = *(void *)(v453 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v454 + 48))(v237, 1, v453)) {
          goto LABEL_299;
        }
        *(void *)uint64_t v236 = *(void *)v237;
        *(_DWORD *)(v236 + 8) = *(_DWORD *)(v237 + 8);
        *(_WORD *)(v236 + 12) = *(_WORD *)(v237 + 12);
        *(void *)(v236 + 16) = *(void *)(v237 + 16);
        *(_DWORD *)(v236 + 24) = *(_DWORD *)(v237 + 24);
        *(void *)(v236 + 32) = *(void *)(v237 + 32);
        *(_DWORD *)(v236 + 40) = *(_DWORD *)(v237 + 40);
        uint64_t v1063 = *(int *)(v453 + 48);
        uint64_t v1064 = v236 + v1063;
        uint64_t v1065 = v237 + v1063;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v451(v1064, v1065, v450);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v454 + 56))(v236, 0, 1, v453);
        goto LABEL_326;
      case 0x70u:
        uint64_t v455 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v455;
        *(void *)(a1 + 16) = a2[2];
        uint64_t v456 = *(int *)(type metadata accessor for PgQuery_CreateOpFamilyStmt(0) + 24);
        uint64_t v457 = a1 + v456;
        uint64_t v458 = (uint64_t)a2 + v456;
        uint64_t v459 = type metadata accessor for UnknownStorage();
        v460 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v459 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v460(v457, v458, v459);
        goto LABEL_326;
      case 0x71u:
        uint64_t v461 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v461;
        *(void *)(a1 + 16) = a2[2];
        *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
        *(void *)(a1 + 32) = a2[4];
        uint64_t v462 = *(int *)(type metadata accessor for PgQuery_AlterOpFamilyStmt(0) + 32);
        uint64_t v463 = a1 + v462;
        uint64_t v464 = (uint64_t)a2 + v462;
        uint64_t v465 = type metadata accessor for UnknownStorage();
        v466 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v465 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v466(v463, v464, v465);
        goto LABEL_326;
      case 0x72u:
        uint64_t v467 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v467 - 8) + 16))(a1, a2, v467);
        Prepareuint64_t Stmt = type metadata accessor for PgQuery_PrepareStmt(0);
        *(void *)(a1 + *(int *)(PrepareStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(PrepareStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x73u:
        uint64_t v469 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v469;
        *(void *)(a1 + 16) = a2[2];
        uint64_t v470 = *(int *)(type metadata accessor for PgQuery_ExecuteStmt(0) + 24);
        uint64_t v471 = a1 + v470;
        uint64_t v472 = (uint64_t)a2 + v470;
        uint64_t v473 = type metadata accessor for UnknownStorage();
        v474 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v473 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v474(v471, v472, v473);
        goto LABEL_326;
      case 0x74u:
        uint64_t v475 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v475;
        uint64_t v476 = *(int *)(type metadata accessor for PgQuery_DeallocateStmt(0) + 20);
        uint64_t v477 = a1 + v476;
        uint64_t v478 = (uint64_t)a2 + v476;
        uint64_t v479 = type metadata accessor for UnknownStorage();
        v480 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v479 - 8) + 16);
        swift_bridgeObjectRetain();
        v480(v477, v478, v479);
        goto LABEL_326;
      case 0x75u:
        uint64_t v481 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v481 - 8) + 16))(a1, a2, v481);
        DeclareCursoruint64_t Stmt = type metadata accessor for PgQuery_DeclareCursorStmt(0);
        *(void *)(a1 + *(int *)(DeclareCursorStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(DeclareCursorStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x76u:
        uint64_t v483 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v483;
        uint64_t v484 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v484;
        *(void *)(a1 + 32) = a2[4];
        TableSpaceuint64_t Stmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
        uint64_t v486 = *(int *)(TableSpaceStmt + 28);
        uint64_t v1219 = (uint64_t)a2 + v486;
        uint64_t v1233 = a1 + v486;
        uint64_t v165 = type metadata accessor for UnknownStorage();
        uint64_t v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v165 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v166(v1233, v1219, v165);
        uint64_t v487 = *(int *)(TableSpaceStmt + 32);
        uint64_t v168 = (void *)(a1 + v487);
        uint64_t v169 = (uint64_t *)((char *)a2 + v487);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v171 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v171 + 48))(v169, 1, RoleSpec)) {
          goto LABEL_161;
        }
        goto LABEL_287;
      case 0x77u:
        uint64_t v488 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v488;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v489 = *(int *)(type metadata accessor for PgQuery_DropTableSpaceStmt(0) + 24);
        uint64_t v490 = a1 + v489;
        uint64_t v491 = (uint64_t)a2 + v489;
        uint64_t v492 = type metadata accessor for UnknownStorage();
        v493 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v492 - 8) + 16);
        swift_bridgeObjectRetain();
        v493(v490, v491, v492);
        goto LABEL_326;
      case 0x78u:
        uint64_t v494 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v494 - 8) + 16))(a1, a2, v494);
        AlterObjectDependsuint64_t Stmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
        *(void *)(a1 + *(int *)(AlterObjectDependsStmt + 20)) = *(uint64_t *)((char *)a2
                                                                             + *(int *)(AlterObjectDependsStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x79u:
        uint64_t v496 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v496 - 8) + 16))(a1, a2, v496);
        AlterObjectSchemauint64_t Stmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
        *(void *)(a1 + *(int *)(AlterObjectSchemaStmt + 20)) = *(uint64_t *)((char *)a2
                                                                            + *(int *)(AlterObjectSchemaStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x7Au:
        uint64_t v498 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v498 - 8) + 16))(a1, a2, v498);
        AlterOwneruint64_t Stmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
        *(void *)(a1 + *(int *)(AlterOwnerStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(AlterOwnerStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x7Bu:
        *(void *)a1 = *a2;
        AlterOperatoruint64_t Stmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
        uint64_t v501 = *(int *)(AlterOperatorStmt + 20);
        uint64_t v502 = a1 + v501;
        uint64_t v503 = (uint64_t)a2 + v501;
        uint64_t v244 = type metadata accessor for UnknownStorage();
        v245 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v244 - 8) + 16);
        swift_bridgeObjectRetain();
        v245(v502, v503, v244);
        uint64_t v504 = *(int *)(AlterOperatorStmt + 24);
        v247 = (void *)(a1 + v504);
        v248 = (uint64_t *)((char *)a2 + v504);
        uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
        uint64_t v250 = *(void *)(ObjectWithArgs - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v250 + 48))(v248, 1, ObjectWithArgs))
        {
LABEL_85:
          uint64_t v251 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          memcpy(v247, v248, *(void *)(*(void *)(v251 - 8) + 64));
        }
        else
        {
LABEL_268:
          uint64_t v1027 = v248[1];
          void *v247 = *v248;
          v247[1] = v1027;
          *((unsigned char *)v247 + 16) = *((unsigned char *)v248 + 16);
          uint64_t v1028 = *(int *)(ObjectWithArgs + 28);
          v1248 = (char *)v247 + v1028;
          v1029 = (char *)v248 + v1028;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v245((uint64_t)v1248, (uint64_t)v1029, v244);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v250 + 56))(v247, 0, 1, ObjectWithArgs);
        }
        goto LABEL_326;
      case 0x7Cu:
        uint64_t v505 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v505;
        uint64_t v506 = *(int *)(type metadata accessor for PgQuery_AlterTypeStmt(0) + 24);
        uint64_t v507 = a1 + v506;
        uint64_t v508 = (uint64_t)a2 + v506;
        uint64_t v509 = type metadata accessor for UnknownStorage();
        v510 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v509 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v510(v507, v508, v509);
        goto LABEL_326;
      case 0x7Du:
        uint64_t v511 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v511;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v512 = *(int *)(type metadata accessor for PgQuery_DropOwnedStmt(0) + 24);
        uint64_t v513 = a1 + v512;
        uint64_t v514 = (uint64_t)a2 + v512;
        uint64_t v515 = type metadata accessor for UnknownStorage();
        v516 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v515 - 8) + 16);
        swift_bridgeObjectRetain();
        v516(v513, v514, v515);
        goto LABEL_326;
      case 0x7Eu:
        *(void *)a1 = *a2;
        ReassignOwneduint64_t Stmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
        uint64_t v518 = *(int *)(ReassignOwnedStmt + 20);
        uint64_t v519 = a1 + v518;
        uint64_t v520 = (uint64_t)a2 + v518;
        uint64_t v369 = type metadata accessor for UnknownStorage();
        v370 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v369 - 8) + 16);
        swift_bridgeObjectRetain();
        v370(v519, v520, v369);
        uint64_t v521 = *(int *)(ReassignOwnedStmt + 24);
        v372 = (void *)(a1 + v521);
        v373 = (uint64_t *)((char *)a2 + v521);
        uint64_t v374 = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v375 = *(void *)(v374 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v375 + 48))(v373, 1, v374)) {
          goto LABEL_163;
        }
        goto LABEL_288;
      case 0x7Fu:
        *(void *)a1 = *a2;
        CompositeTypeuint64_t Stmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
        uint64_t v523 = *(int *)(CompositeTypeStmt + 20);
        uint64_t v524 = a1 + v523;
        uint64_t v525 = (uint64_t)a2 + v523;
        uint64_t v526 = type metadata accessor for UnknownStorage();
        v527 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v526 - 8) + 16);
        swift_bridgeObjectRetain();
        v527(v524, v525, v526);
        uint64_t v528 = *(int *)(CompositeTypeStmt + 24);
        uint64_t v145 = a1 + v528;
        uint64_t v146 = (uint64_t)a2 + v528;
        uint64_t v147 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v529 = *(void *)(v147 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v529 + 48))(v146, 1, v147)) {
          goto LABEL_231;
        }
        uint64_t v1224 = v529;
        uint64_t v1066 = *(void *)(v146 + 8);
        *(void *)uint64_t v145 = *(void *)v146;
        *(void *)(v145 + 8) = v1066;
        uint64_t v1067 = *(void *)(v146 + 24);
        *(void *)(v145 + 16) = *(void *)(v146 + 16);
        *(void *)(v145 + 24) = v1067;
        uint64_t v1068 = *(void *)(v146 + 40);
        *(void *)(v145 + 32) = *(void *)(v146 + 32);
        *(void *)(v145 + 40) = v1068;
        *(unsigned char *)(v145 + 48) = *(unsigned char *)(v146 + 48);
        v1005 = v527;
        uint64_t v1069 = *(void *)(v146 + 64);
        *(void *)(v145 + 56) = *(void *)(v146 + 56);
        *(void *)(v145 + 64) = v1069;
        *(_DWORD *)(v145 + 72) = *(_DWORD *)(v146 + 72);
        uint64_t v1070 = *(int *)(v147 + 40);
        uint64_t v1193 = v146 + v1070;
        uint64_t v1209 = v145 + v1070;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v1071 = v1193;
        uint64_t v1188 = v526;
        v1005(v1209, v1071, v526);
        uint64_t v1072 = *(int *)(v147 + 44);
        v1010 = (void *)(v145 + v1072);
        v1011 = (void *)(v146 + v1072);
        uint64_t v1012 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v1013 = *(void *)(v1012 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1013 + 48))(v1011, 1, v1012)) {
          goto LABEL_305;
        }
        goto LABEL_324;
      case 0x80u:
        uint64_t v530 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v530;
        uint64_t v531 = *(int *)(type metadata accessor for PgQuery_CreateEnumStmt(0) + 24);
        uint64_t v532 = a1 + v531;
        uint64_t v533 = (uint64_t)a2 + v531;
        uint64_t v534 = type metadata accessor for UnknownStorage();
        v535 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v534 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v535(v532, v533, v534);
        goto LABEL_326;
      case 0x81u:
        uint64_t v536 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v536;
        uint64_t v537 = *(int *)(type metadata accessor for PgQuery_CreateRangeStmt(0) + 24);
        uint64_t v538 = a1 + v537;
        uint64_t v539 = (uint64_t)a2 + v537;
        uint64_t v540 = type metadata accessor for UnknownStorage();
        v541 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v540 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v541(v538, v539, v540);
        goto LABEL_326;
      case 0x82u:
        uint64_t v542 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v542;
        uint64_t v543 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v543;
        uint64_t v544 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v544;
        *(void *)(a1 + 48) = a2[6];
        *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
        uint64_t v545 = *(int *)(type metadata accessor for PgQuery_AlterEnumStmt(0) + 40);
        uint64_t v546 = a1 + v545;
        uint64_t v1234 = (uint64_t)a2 + v545;
        uint64_t v547 = type metadata accessor for UnknownStorage();
        v548 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v547 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v548(v546, v1234, v547);
        goto LABEL_326;
      case 0x83u:
        uint64_t v549 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v549;
        uint64_t v550 = *(int *)(type metadata accessor for PgQuery_AlterTSDictionaryStmt(0) + 24);
        uint64_t v551 = a1 + v550;
        uint64_t v552 = (uint64_t)a2 + v550;
        uint64_t v553 = type metadata accessor for UnknownStorage();
        v554 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v553 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v554(v551, v552, v553);
        goto LABEL_326;
      case 0x84u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v555 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v555;
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(_WORD *)(a1 + 41) = *(_WORD *)((char *)a2 + 41);
        uint64_t v556 = *(int *)(type metadata accessor for PgQuery_AlterTSConfigurationStmt(0) + 44);
        uint64_t v557 = a1 + v556;
        uint64_t v558 = (uint64_t)a2 + v556;
        uint64_t v559 = type metadata accessor for UnknownStorage();
        v560 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v559 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v560(v557, v558, v559);
        goto LABEL_326;
      case 0x85u:
        uint64_t v561 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v561;
        uint64_t v562 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v562;
        uint64_t v563 = *(int *)(type metadata accessor for PgQuery_CreateFdwStmt(0) + 28);
        uint64_t v564 = a1 + v563;
        uint64_t v565 = (uint64_t)a2 + v563;
        uint64_t v566 = type metadata accessor for UnknownStorage();
        v567 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v566 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v567(v564, v565, v566);
        goto LABEL_326;
      case 0x86u:
        uint64_t v568 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v568;
        uint64_t v569 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v569;
        uint64_t v570 = *(int *)(type metadata accessor for PgQuery_AlterFdwStmt(0) + 28);
        uint64_t v571 = a1 + v570;
        uint64_t v572 = (uint64_t)a2 + v570;
        uint64_t v573 = type metadata accessor for UnknownStorage();
        v574 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v573 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v574(v571, v572, v573);
        goto LABEL_326;
      case 0x87u:
        uint64_t v575 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v575;
        uint64_t v576 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v576;
        uint64_t v577 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v577;
        uint64_t v578 = a2[7];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = v578;
        *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
        *(void *)(a1 + 72) = a2[9];
        uint64_t v579 = *(int *)(type metadata accessor for PgQuery_CreateForeignServerStmt(0) + 40);
        uint64_t v1220 = (uint64_t)a2 + v579;
        uint64_t v1235 = a1 + v579;
        uint64_t v580 = type metadata accessor for UnknownStorage();
        v581 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v580 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v581(v1235, v1220, v580);
        goto LABEL_326;
      case 0x88u:
        uint64_t v582 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v582;
        uint64_t v583 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v583;
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        uint64_t v584 = *(int *)(type metadata accessor for PgQuery_AlterForeignServerStmt(0) + 32);
        uint64_t v585 = a1 + v584;
        uint64_t v586 = (uint64_t)a2 + v584;
        uint64_t v587 = type metadata accessor for UnknownStorage();
        v588 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v587 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v588(v585, v586, v587);
        goto LABEL_326;
      case 0x89u:
        uint64_t v589 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v589;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        UserMappinguint64_t Stmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
        uint64_t v591 = *(int *)(UserMappingStmt + 28);
        uint64_t v592 = a1 + v591;
        uint64_t v1236 = (uint64_t)a2 + v591;
        uint64_t v165 = type metadata accessor for UnknownStorage();
        uint64_t v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v165 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v166(v592, v1236, v165);
        uint64_t v593 = *(int *)(UserMappingStmt + 32);
        uint64_t v168 = (void *)(a1 + v593);
        uint64_t v169 = (uint64_t *)((char *)a2 + v593);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v171 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v171 + 48))(v169, 1, RoleSpec)) {
          goto LABEL_161;
        }
        goto LABEL_287;
      case 0x8Au:
        uint64_t v594 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v594;
        *(void *)(a1 + 16) = a2[2];
        AlterUserMappinguint64_t Stmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
        uint64_t v596 = *(int *)(AlterUserMappingStmt + 24);
        uint64_t v597 = a1 + v596;
        uint64_t v1237 = (uint64_t)a2 + v596;
        uint64_t v165 = type metadata accessor for UnknownStorage();
        uint64_t v166 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v165 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v166(v597, v1237, v165);
        uint64_t v598 = *(int *)(AlterUserMappingStmt + 28);
        uint64_t v168 = (void *)(a1 + v598);
        uint64_t v169 = (uint64_t *)((char *)a2 + v598);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v171 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v171 + 48))(v169, 1, RoleSpec))
        {
LABEL_161:
          uint64_t v599 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
          memcpy(v168, v169, *(void *)(*(void *)(v599 - 8) + 64));
        }
        else
        {
LABEL_287:
          *uint64_t v168 = *v169;
          *((unsigned char *)v168 + 8) = *((unsigned char *)v169 + 8);
          uint64_t v1073 = v169[3];
          v168[2] = v169[2];
          v168[3] = v1073;
          *((_DWORD *)v168 + 8) = *((_DWORD *)v169 + 8);
          uint64_t v1074 = *(int *)(RoleSpec + 28);
          v1075 = (char *)v168 + v1074;
          v1076 = (char *)v169 + v1074;
          swift_bridgeObjectRetain();
          v166((uint64_t)v1075, (uint64_t)v1076, v165);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v171 + 56))(v168, 0, 1, RoleSpec);
        }
        goto LABEL_326;
      case 0x8Bu:
        uint64_t v600 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v600;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        DropUserMappinguint64_t Stmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
        uint64_t v602 = *(int *)(DropUserMappingStmt + 24);
        uint64_t v603 = a1 + v602;
        uint64_t v604 = (uint64_t)a2 + v602;
        uint64_t v369 = type metadata accessor for UnknownStorage();
        v370 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v369 - 8) + 16);
        swift_bridgeObjectRetain();
        v370(v603, v604, v369);
        uint64_t v605 = *(int *)(DropUserMappingStmt + 28);
        v372 = (void *)(a1 + v605);
        v373 = (uint64_t *)((char *)a2 + v605);
        uint64_t v374 = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v375 = *(void *)(v374 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v375 + 48))(v373, 1, v374))
        {
LABEL_163:
          uint64_t v606 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
          memcpy(v372, v373, *(void *)(*(void *)(v606 - 8) + 64));
        }
        else
        {
LABEL_288:
          void *v372 = *v373;
          *((unsigned char *)v372 + 8) = *((unsigned char *)v373 + 8);
          uint64_t v1077 = v373[3];
          v372[2] = v373[2];
          v372[3] = v1077;
          *((_DWORD *)v372 + 8) = *((_DWORD *)v373 + 8);
          uint64_t v1078 = *(int *)(v374 + 28);
          v1079 = (char *)v372 + v1078;
          v1080 = (char *)v373 + v1078;
          swift_bridgeObjectRetain();
          v370((uint64_t)v1079, (uint64_t)v1080, v369);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v375 + 56))(v372, 0, 1, v374);
        }
        goto LABEL_326;
      case 0x8Cu:
        uint64_t v607 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v607;
        *(void *)(a1 + 16) = a2[2];
        *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
        uint64_t v608 = *(int *)(type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0) + 28);
        uint64_t v609 = a1 + v608;
        uint64_t v610 = (uint64_t)a2 + v608;
        uint64_t v611 = type metadata accessor for UnknownStorage();
        v612 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v611 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v612(v609, v610, v611);
        goto LABEL_326;
      case 0x8Du:
        uint64_t v613 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v613;
        *(void *)(a1 + 16) = a2[2];
        *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
        uint64_t v614 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v614;
        *(void *)(a1 + 48) = a2[6];
        *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
        uint64_t v615 = *(int *)(type metadata accessor for PgQuery_AlterTableMoveAllStmt(0) + 36);
        uint64_t v616 = a1 + v615;
        uint64_t v617 = (uint64_t)a2 + v615;
        uint64_t v618 = type metadata accessor for UnknownStorage();
        v619 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v618 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v619(v616, v617, v618);
        goto LABEL_326;
      case 0x8Eu:
        uint64_t v620 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v620 - 8) + 16))(a1, a2, v620);
        SecLabeluint64_t Stmt = type metadata accessor for PgQuery_SecLabelStmt(0);
        *(void *)(a1 + *(int *)(SecLabelStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SecLabelStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x8Fu:
        uint64_t v622 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v622;
        *(void *)(a1 + 16) = a2[2];
        ForeignTableuint64_t Stmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
        uint64_t v624 = *(int *)(ForeignTableStmt + 24);
        uint64_t v625 = a1 + v624;
        uint64_t v1238 = (uint64_t)a2 + v624;
        uint64_t v626 = type metadata accessor for UnknownStorage();
        v627 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v626 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v627(v625, v1238, v626);
        uint64_t v628 = *(int *)(ForeignTableStmt + 28);
        v629 = (char *)(a1 + v628);
        v630 = (char *)a2 + v628;
        uint64_t v631 = type metadata accessor for PgQuery_CreateStmt(0);
        uint64_t v632 = *(void *)(v631 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v632 + 48))(v630, 1, v631))
        {
          uint64_t v633 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
          memcpy(v629, v630, *(void *)(*(void *)(v633 - 8) + 64));
        }
        else
        {
          v627((uint64_t)v629, (uint64_t)v630, v626);
          *(void *)&v629[*(int *)(v631 + 20)] = *(void *)&v630[*(int *)(v631 + 20)];
          v1081 = *(void (**)(char *, void, uint64_t, uint64_t))(v632 + 56);
          swift_retain();
          v1081(v629, 0, 1, v631);
        }
        goto LABEL_326;
      case 0x90u:
        uint64_t v634 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v634;
        uint64_t v635 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v635;
        uint64_t v636 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v636;
        *(void *)(a1 + 48) = a2[6];
        *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
        uint64_t v637 = a2[9];
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = v637;
        uint64_t v638 = *(int *)(type metadata accessor for PgQuery_ImportForeignSchemaStmt(0) + 40);
        uint64_t v1221 = (uint64_t)a2 + v638;
        uint64_t v1239 = a1 + v638;
        uint64_t v639 = type metadata accessor for UnknownStorage();
        v640 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v639 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v640(v1239, v1221, v639);
        goto LABEL_326;
      case 0x91u:
        uint64_t v641 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v641;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        uint64_t v642 = *(int *)(type metadata accessor for PgQuery_CreateExtensionStmt(0) + 28);
        uint64_t v643 = a1 + v642;
        uint64_t v644 = (uint64_t)a2 + v642;
        uint64_t v645 = type metadata accessor for UnknownStorage();
        v646 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v645 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v646(v643, v644, v645);
        goto LABEL_326;
      case 0x92u:
        uint64_t v647 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v647;
        *(void *)(a1 + 16) = a2[2];
        uint64_t v648 = *(int *)(type metadata accessor for PgQuery_AlterExtensionStmt(0) + 24);
        uint64_t v649 = a1 + v648;
        uint64_t v650 = (uint64_t)a2 + v648;
        uint64_t v651 = type metadata accessor for UnknownStorage();
        v652 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v651 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v652(v649, v650, v651);
        goto LABEL_326;
      case 0x93u:
        uint64_t v653 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v653 - 8) + 16))(a1, a2, v653);
        AlterExtensionContentsuint64_t Stmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
        *(void *)(a1 + *(int *)(AlterExtensionContentsStmt + 20)) = *(uint64_t *)((char *)a2
                                                                                 + *(int *)(AlterExtensionContentsStmt
                                                                                          + 20));
        swift_retain();
        goto LABEL_326;
      case 0x94u:
        uint64_t v655 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v655;
        uint64_t v656 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v656;
        uint64_t v657 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v657;
        uint64_t v658 = *(int *)(type metadata accessor for PgQuery_CreateEventTrigStmt(0) + 32);
        uint64_t v659 = a1 + v658;
        uint64_t v1240 = (uint64_t)a2 + v658;
        uint64_t v660 = type metadata accessor for UnknownStorage();
        v661 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v660 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v661(v659, v1240, v660);
        goto LABEL_326;
      case 0x95u:
        uint64_t v662 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v662;
        uint64_t v663 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v663;
        uint64_t v664 = *(int *)(type metadata accessor for PgQuery_AlterEventTrigStmt(0) + 24);
        uint64_t v665 = a1 + v664;
        uint64_t v666 = (uint64_t)a2 + v664;
        uint64_t v667 = type metadata accessor for UnknownStorage();
        v668 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v667 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v668(v665, v666, v667);
        goto LABEL_326;
      case 0x96u:
        *(_WORD *)a1 = *(_WORD *)a2;
        RefreshMatViewuint64_t Stmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
        uint64_t v670 = *(int *)(RefreshMatViewStmt + 24);
        uint64_t v671 = a1 + v670;
        uint64_t v672 = (uint64_t)a2 + v670;
        uint64_t v673 = type metadata accessor for UnknownStorage();
        v674 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v673 - 8) + 16);
        v674(v671, v672, v673);
        uint64_t v675 = *(int *)(RefreshMatViewStmt + 28);
        uint64_t v145 = a1 + v675;
        uint64_t v146 = (uint64_t)a2 + v675;
        uint64_t v147 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v676 = *(void *)(v147 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v676 + 48))(v146, 1, v147)) {
          goto LABEL_231;
        }
        uint64_t v1224 = v676;
        uint64_t v1082 = *(void *)(v146 + 8);
        *(void *)uint64_t v145 = *(void *)v146;
        *(void *)(v145 + 8) = v1082;
        uint64_t v1083 = *(void *)(v146 + 24);
        *(void *)(v145 + 16) = *(void *)(v146 + 16);
        *(void *)(v145 + 24) = v1083;
        uint64_t v1084 = *(void *)(v146 + 40);
        *(void *)(v145 + 32) = *(void *)(v146 + 32);
        *(void *)(v145 + 40) = v1084;
        *(unsigned char *)(v145 + 48) = *(unsigned char *)(v146 + 48);
        uint64_t v1085 = *(void *)(v146 + 64);
        *(void *)(v145 + 56) = *(void *)(v146 + 56);
        *(void *)(v145 + 64) = v1085;
        *(_DWORD *)(v145 + 72) = *(_DWORD *)(v146 + 72);
        uint64_t v1086 = *(int *)(v147 + 40);
        uint64_t v1194 = v146 + v1086;
        uint64_t v1210 = v145 + v1086;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v674(v1210, v1194, v673);
        uint64_t v1087 = *(int *)(v147 + 44);
        v1010 = (void *)(v145 + v1087);
        v1011 = (void *)(v146 + v1087);
        uint64_t v1088 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v1089 = *(void *)(v1088 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1089 + 48))(v1011, 1, v1088)) {
          goto LABEL_305;
        }
        goto LABEL_318;
      case 0x97u:
        uint64_t v677 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v677;
        uint64_t v678 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v678;
        uint64_t v679 = *(int *)(type metadata accessor for PgQuery_ReplicaIdentityStmt(0) + 24);
        uint64_t v680 = a1 + v679;
        uint64_t v681 = (uint64_t)a2 + v679;
        uint64_t v682 = type metadata accessor for UnknownStorage();
        v683 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v682 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v683(v680, v681, v682);
        goto LABEL_326;
      case 0x98u:
        uint64_t v416 = type metadata accessor for UnknownStorage();
        v417 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v416 - 8) + 16);
        v417(a1, (uint64_t)a2, v416);
        uint64_t v684 = *(int *)(type metadata accessor for PgQuery_AlterSystemStmt(0) + 20);
        v419 = (void *)(a1 + v684);
        v420 = (uint64_t *)((char *)a2 + v684);
        VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
        uint64_t v422 = *(void *)(VariableSetStmt - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v422 + 48))(v420, 1, VariableSetStmt))
        {
LABEL_122:
          uint64_t v423 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
          memcpy(v419, v420, *(void *)(*(void *)(v423 - 8) + 64));
        }
        else
        {
LABEL_277:
          void *v419 = *v420;
          *((unsigned char *)v419 + 8) = *((unsigned char *)v420 + 8);
          uint64_t v1051 = v420[3];
          v419[2] = v420[2];
          v419[3] = v1051;
          v419[4] = v420[4];
          *((unsigned char *)v419 + 40) = *((unsigned char *)v420 + 40);
          uint64_t v1052 = *(int *)(VariableSetStmt + 32);
          v1249 = (char *)v419 + v1052;
          v1053 = (char *)v420 + v1052;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v417((uint64_t)v1249, (uint64_t)v1053, v416);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v422 + 56))(v419, 0, 1, VariableSetStmt);
        }
        goto LABEL_326;
      case 0x99u:
        uint64_t v685 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v685 - 8) + 16))(a1, a2, v685);
        Policyuint64_t Stmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
        *(void *)(a1 + *(int *)(PolicyStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(PolicyStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x9Au:
        uint64_t v687 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v687 - 8) + 16))(a1, a2, v687);
        AlterPolicyuint64_t Stmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
        *(void *)(a1 + *(int *)(AlterPolicyStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(AlterPolicyStmt + 20));
        swift_retain();
        goto LABEL_326;
      case 0x9Bu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v689 = a2[2];
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = v689;
        Transformuint64_t Stmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
        uint64_t v691 = *(int *)(TransformStmt + 24);
        uint64_t v692 = a1 + v691;
        uint64_t v693 = (uint64_t)a2 + v691;
        uint64_t v694 = type metadata accessor for UnknownStorage();
        v695 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v694 - 8) + 16);
        swift_bridgeObjectRetain();
        v695(v692, v693, v694);
        uint64_t v1186 = TransformStmt;
        uint64_t v696 = *(int *)(TransformStmt + 28);
        v697 = (void *)(a1 + v696);
        v698 = (uint64_t *)((char *)a2 + v696);
        uint64_t v699 = type metadata accessor for PgQuery_TypeName(0);
        uint64_t v700 = *(void *)(v699 - 8);
        v1241 = (void (*)(char *, char *, uint64_t))v695;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v700 + 48))(v698, 1, v699))
        {
          uint64_t v701 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
          memcpy(v697, v698, *(void *)(*(void *)(v701 - 8) + 64));
        }
        else
        {
          void *v697 = *v698;
          *((_DWORD *)v697 + 2) = *((_DWORD *)v698 + 2);
          *((_WORD *)v697 + 6) = *((_WORD *)v698 + 6);
          v697[2] = v698[2];
          *((_DWORD *)v697 + 6) = *((_DWORD *)v698 + 6);
          v697[4] = v698[4];
          *((_DWORD *)v697 + 10) = *((_DWORD *)v698 + 10);
          uint64_t v1090 = *(int *)(v699 + 48);
          v1183 = (char *)v697 + v1090;
          v1091 = (char *)v698 + v1090;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v695((uint64_t)v1183, (uint64_t)v1091, v694);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v700 + 56))(v697, 0, 1, v699);
        }
        uint64_t v1092 = *(int *)(v1186 + 32);
        v1093 = (void *)(a1 + v1092);
        v1094 = (uint64_t *)((char *)a2 + v1092);
        uint64_t v1095 = type metadata accessor for PgQuery_ObjectWithArgs(0);
        uint64_t v1096 = *(void *)(v1095 - 8);
        v1097 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v1096 + 48);
        if (v1097(v1094, 1, v1095))
        {
          uint64_t v1098 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          memcpy(v1093, v1094, *(void *)(*(void *)(v1098 - 8) + 64));
          uint64_t v1099 = v694;
        }
        else
        {
          uint64_t v1185 = v1096;
          uint64_t v1141 = v1094[1];
          void *v1093 = *v1094;
          v1093[1] = v1141;
          *((unsigned char *)v1093 + 16) = *((unsigned char *)v1094 + 16);
          uint64_t v1142 = *(int *)(v1095 + 28);
          v1181 = (char *)v1093 + v1142;
          v1143 = (char *)v1094 + v1142;
          swift_bridgeObjectRetain();
          uint64_t v1096 = v1185;
          swift_bridgeObjectRetain();
          v1144 = v1143;
          uint64_t v1099 = v694;
          v695((uint64_t)v1181, (uint64_t)v1144, v694);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1185 + 56))(v1093, 0, 1, v1095);
        }
        uint64_t v1145 = *(int *)(v1186 + 36);
        v1146 = (void *)(a1 + v1145);
        v1147 = (uint64_t *)((char *)a2 + v1145);
        if (v1097(v1147, 1, v1095))
        {
          uint64_t v1148 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          memcpy(v1146, v1147, *(void *)(*(void *)(v1148 - 8) + 64));
        }
        else
        {
          uint64_t v1153 = v1096;
          uint64_t v1154 = v1147[1];
          void *v1146 = *v1147;
          v1146[1] = v1154;
          *((unsigned char *)v1146 + 16) = *((unsigned char *)v1147 + 16);
          uint64_t v1155 = *(int *)(v1095 + 28);
          v1156 = (char *)v1146 + v1155;
          v1157 = (char *)v1147 + v1155;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1241(v1156, v1157, v1099);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1153 + 56))(v1146, 0, 1, v1095);
        }
        goto LABEL_326;
      case 0x9Cu:
        uint64_t v702 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v702;
        uint64_t v703 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v703;
        *(void *)(a1 + 32) = a2[4];
        uint64_t v704 = *(int *)(type metadata accessor for PgQuery_CreateAmStmt(0) + 28);
        uint64_t v705 = a1 + v704;
        uint64_t v706 = (uint64_t)a2 + v704;
        uint64_t v707 = type metadata accessor for UnknownStorage();
        v708 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v707 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v708(v705, v706, v707);
        goto LABEL_326;
      case 0x9Du:
        uint64_t v709 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v709;
        uint64_t v710 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v710;
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t v711 = *(int *)(type metadata accessor for PgQuery_CreatePublicationStmt(0) + 32);
        uint64_t v712 = a1 + v711;
        uint64_t v713 = (uint64_t)a2 + v711;
        uint64_t v714 = type metadata accessor for UnknownStorage();
        v715 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v714 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v715(v712, v713, v714);
        goto LABEL_326;
      case 0x9Eu:
        uint64_t v716 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v716;
        uint64_t v717 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v717;
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        *(void *)(a1 + 40) = a2[5];
        *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
        uint64_t v718 = *(int *)(type metadata accessor for PgQuery_AlterPublicationStmt(0) + 36);
        uint64_t v719 = a1 + v718;
        uint64_t v720 = (uint64_t)a2 + v718;
        uint64_t v721 = type metadata accessor for UnknownStorage();
        v722 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v721 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v722(v719, v720, v721);
        goto LABEL_326;
      case 0x9Fu:
        uint64_t v723 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v723;
        uint64_t v724 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v724;
        uint64_t v725 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v725;
        uint64_t v726 = *(int *)(type metadata accessor for PgQuery_CreateSubscriptionStmt(0) + 32);
        uint64_t v727 = a1 + v726;
        uint64_t v1242 = (uint64_t)a2 + v726;
        uint64_t v728 = type metadata accessor for UnknownStorage();
        v729 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v728 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v729(v727, v1242, v728);
        goto LABEL_326;
      case 0xA0u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v730 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v730;
        uint64_t v731 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v731;
        uint64_t v732 = a2[7];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = v732;
        uint64_t v733 = *(int *)(type metadata accessor for PgQuery_AlterSubscriptionStmt(0) + 36);
        uint64_t v734 = a1 + v733;
        uint64_t v1243 = (uint64_t)a2 + v733;
        uint64_t v735 = type metadata accessor for UnknownStorage();
        v736 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v735 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v736(v734, v1243, v735);
        goto LABEL_326;
      case 0xA1u:
        uint64_t v737 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v737;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t v738 = *(int *)(type metadata accessor for PgQuery_DropSubscriptionStmt(0) + 28);
        uint64_t v739 = a1 + v738;
        uint64_t v740 = (uint64_t)a2 + v738;
        uint64_t v741 = type metadata accessor for UnknownStorage();
        v742 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v741 - 8) + 16);
        swift_bridgeObjectRetain();
        v742(v739, v740, v741);
        goto LABEL_326;
      case 0xA2u:
        uint64_t v743 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v743;
        uint64_t v744 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v744;
        uint64_t v745 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v745;
        *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
        uint64_t v746 = *(int *)(type metadata accessor for PgQuery_CreateStatsStmt(0) + 40);
        uint64_t v1222 = (uint64_t)a2 + v746;
        uint64_t v1244 = a1 + v746;
        uint64_t v747 = type metadata accessor for UnknownStorage();
        v748 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v747 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v748(v1244, v1222, v747);
        goto LABEL_326;
      case 0xA3u:
        *(void *)a1 = *a2;
        uint64_t v749 = *(int *)(type metadata accessor for PgQuery_AlterCollationStmt(0) + 20);
        uint64_t v750 = a1 + v749;
        uint64_t v751 = (uint64_t)a2 + v749;
        uint64_t v752 = type metadata accessor for UnknownStorage();
        v753 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v752 - 8) + 16);
        swift_bridgeObjectRetain();
        v753(v750, v751, v752);
        goto LABEL_326;
      case 0xA4u:
        uint64_t v754 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v754 - 8) + 16))(a1, a2, v754);
        uint64_t v755 = type metadata accessor for PgQuery_CallStmt(0);
        *(void *)(a1 + *(int *)(v755 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v755 + 20));
        swift_retain();
        goto LABEL_326;
      case 0xA5u:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
        uint64_t v756 = *(int *)(type metadata accessor for PgQuery_AlterStatsStmt(0) + 28);
        uint64_t v757 = a1 + v756;
        uint64_t v758 = (uint64_t)a2 + v756;
        uint64_t v759 = type metadata accessor for UnknownStorage();
        v760 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v759 - 8) + 16);
        swift_bridgeObjectRetain();
        v760(v757, v758, v759);
        goto LABEL_326;
      case 0xA6u:
        uint64_t v761 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v761 - 8) + 16))(a1, a2, v761);
        A_uint64_t Expr = type metadata accessor for PgQuery_A_Expr(0);
        *(void *)(a1 + *(int *)(A_Expr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(A_Expr + 20));
        swift_retain();
        goto LABEL_326;
      case 0xA7u:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        uint64_t v763 = *(int *)(type metadata accessor for PgQuery_ColumnRef(0) + 24);
        uint64_t v764 = a1 + v763;
        uint64_t v765 = (uint64_t)a2 + v763;
        uint64_t v766 = type metadata accessor for UnknownStorage();
        v767 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v766 - 8) + 16);
        swift_bridgeObjectRetain();
        v767(v764, v765, v766);
        goto LABEL_326;
      case 0xA8u:
        *(void *)a1 = *a2;
        uint64_t v768 = *(int *)(type metadata accessor for PgQuery_ParamRef(0) + 24);
        uint64_t v769 = a1 + v768;
        uint64_t v770 = (uint64_t)a2 + v768;
        uint64_t v771 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v771 - 8) + 16))(v769, v770, v771);
        goto LABEL_326;
      case 0xA9u:
        uint64_t v772 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v772 - 8) + 16))(a1, a2, v772);
        uint64_t A_Const = type metadata accessor for PgQuery_A_Const(0);
        *(void *)(a1 + *(int *)(A_Const + 20)) = *(uint64_t *)((char *)a2 + *(int *)(A_Const + 20));
        swift_retain();
        goto LABEL_326;
      case 0xAAu:
        uint64_t v774 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v774 - 8) + 16))(a1, a2, v774);
        uint64_t v775 = type metadata accessor for PgQuery_FuncCall(0);
        *(void *)(a1 + *(int *)(v775 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v775 + 20));
        swift_retain();
        goto LABEL_326;
      case 0xACu:
        uint64_t v776 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v776 - 8) + 16))(a1, a2, v776);
        uint64_t A_Indices = type metadata accessor for PgQuery_A_Indices(0);
        *(void *)(a1 + *(int *)(A_Indices + 20)) = *(uint64_t *)((char *)a2 + *(int *)(A_Indices + 20));
        swift_retain();
        goto LABEL_326;
      case 0xADu:
        uint64_t v778 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v778 - 8) + 16))(a1, a2, v778);
        uint64_t A_Indirection = type metadata accessor for PgQuery_A_Indirection(0);
        *(void *)(a1 + *(int *)(A_Indirection + 20)) = *(uint64_t *)((char *)a2 + *(int *)(A_Indirection + 20));
        swift_retain();
        goto LABEL_326;
      case 0xAEu:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        uint64_t v780 = *(int *)(type metadata accessor for PgQuery_A_ArrayExpr(0) + 24);
        uint64_t v781 = a1 + v780;
        uint64_t v782 = (uint64_t)a2 + v780;
        uint64_t v783 = type metadata accessor for UnknownStorage();
        v784 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v783 - 8) + 16);
        swift_bridgeObjectRetain();
        v784(v781, v782, v783);
        goto LABEL_326;
      case 0xAFu:
        uint64_t v785 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v785 - 8) + 16))(a1, a2, v785);
        uint64_t ResTarget = type metadata accessor for PgQuery_ResTarget(0);
        *(void *)(a1 + *(int *)(ResTarget + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ResTarget + 20));
        swift_retain();
        goto LABEL_326;
      case 0xB0u:
        uint64_t v787 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v787 - 8) + 16))(a1, a2, v787);
        uint64_t MultiAssignRef = type metadata accessor for PgQuery_MultiAssignRef(0);
        *(void *)(a1 + *(int *)(MultiAssignRef + 20)) = *(uint64_t *)((char *)a2 + *(int *)(MultiAssignRef + 20));
        swift_retain();
        goto LABEL_326;
      case 0xB1u:
        uint64_t v789 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v789 - 8) + 16))(a1, a2, v789);
        uint64_t TypeCast = type metadata accessor for PgQuery_TypeCast(0);
        *(void *)(a1 + *(int *)(TypeCast + 20)) = *(uint64_t *)((char *)a2 + *(int *)(TypeCast + 20));
        swift_retain();
        goto LABEL_326;
      case 0xB2u:
        uint64_t v791 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v791 - 8) + 16))(a1, a2, v791);
        uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
        *(void *)(a1 + *(int *)(CollateClause + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CollateClause + 20));
        swift_retain();
        goto LABEL_326;
      case 0xB3u:
        uint64_t v793 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v793 - 8) + 16))(a1, a2, v793);
        uint64_t SortBy = type metadata accessor for PgQuery_SortBy(0);
        *(void *)(a1 + *(int *)(SortBy + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SortBy + 20));
        swift_retain();
        goto LABEL_326;
      case 0xB4u:
        uint64_t v795 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v795 - 8) + 16))(a1, a2, v795);
        uint64_t WindowDef = type metadata accessor for PgQuery_WindowDef(0);
        *(void *)(a1 + *(int *)(WindowDef + 20)) = *(uint64_t *)((char *)a2 + *(int *)(WindowDef + 20));
        swift_retain();
        goto LABEL_326;
      case 0xB5u:
        uint64_t v797 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v797 - 8) + 16))(a1, a2, v797);
        uint64_t RangeSubselect = type metadata accessor for PgQuery_RangeSubselect(0);
        *(void *)(a1 + *(int *)(RangeSubselect + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RangeSubselect + 20));
        swift_retain();
        goto LABEL_326;
      case 0xB6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
        uint64_t v799 = a2[2];
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = v799;
        uint64_t RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
        uint64_t v801 = *(int *)(RangeFunction + 36);
        uint64_t v1245 = a1 + v801;
        uint64_t v802 = (uint64_t)a2 + v801;
        uint64_t v803 = type metadata accessor for UnknownStorage();
        v804 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v803 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v1223 = v803;
        v804(v1245, v802, v803);
        uint64_t v805 = *(int *)(RangeFunction + 40);
        uint64_t v22 = (void *)(a1 + v805);
        uint64_t v23 = (uint64_t *)((char *)a2 + v805);
        uint64_t v806 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v807 = *(void *)(v806 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v807 + 48))(v23, 1, v806))
        {
LABEL_6:
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
          memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          uint64_t v1100 = v23[1];
          *uint64_t v22 = *v23;
          v22[1] = v1100;
          v22[2] = v23[2];
          uint64_t v1101 = *(int *)(v806 + 24);
          v1102 = (char *)v22 + v1101;
          v1103 = (char *)v23 + v1101;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v804((uint64_t)v1102, (uint64_t)v1103, v1223);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v807 + 56))(v22, 0, 1, v806);
        }
        goto LABEL_326;
      case 0xB7u:
        uint64_t v808 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v808 - 8) + 16))(a1, a2, v808);
        uint64_t RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
        *(void *)(a1 + *(int *)(RangeTableSample + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RangeTableSample + 20));
        swift_retain();
        goto LABEL_326;
      case 0xB8u:
        uint64_t v810 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v810 - 8) + 16))(a1, a2, v810);
        uint64_t RangeTableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
        *(void *)(a1 + *(int *)(RangeTableFunc + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RangeTableFunc + 20));
        swift_retain();
        goto LABEL_326;
      case 0xB9u:
        uint64_t v812 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v812 - 8) + 16))(a1, a2, v812);
        uint64_t RangeTableFuncCol = type metadata accessor for PgQuery_RangeTableFuncCol(0);
        *(void *)(a1 + *(int *)(RangeTableFuncCol + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RangeTableFuncCol + 20));
        swift_retain();
        goto LABEL_326;
      case 0xBAu:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
        *(void *)(a1 + 16) = a2[2];
        *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
        *(void *)(a1 + 32) = a2[4];
        *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
        uint64_t v814 = *(int *)(type metadata accessor for PgQuery_TypeName(0) + 48);
        uint64_t v815 = a1 + v814;
        uint64_t v816 = (uint64_t)a2 + v814;
        uint64_t v817 = type metadata accessor for UnknownStorage();
        v818 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v817 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v818(v815, v816, v817);
        goto LABEL_326;
      case 0xBBu:
        uint64_t v819 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v819 - 8) + 16))(a1, a2, v819);
        uint64_t ColumnDef = type metadata accessor for PgQuery_ColumnDef(0);
        *(void *)(a1 + *(int *)(ColumnDef + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ColumnDef + 20));
        swift_retain();
        goto LABEL_326;
      case 0xBCu:
        uint64_t v821 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v821 - 8) + 16))(a1, a2, v821);
        uint64_t IndexElem = type metadata accessor for PgQuery_IndexElem(0);
        *(void *)(a1 + *(int *)(IndexElem + 20)) = *(uint64_t *)((char *)a2 + *(int *)(IndexElem + 20));
        swift_retain();
        goto LABEL_326;
      case 0xBDu:
        uint64_t v823 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v823 - 8) + 16))(a1, a2, v823);
        uint64_t Constraint = type metadata accessor for PgQuery_Constraint(0);
        *(void *)(a1 + *(int *)(Constraint + 20)) = *(uint64_t *)((char *)a2 + *(int *)(Constraint + 20));
        swift_retain();
        goto LABEL_326;
      case 0xBEu:
        uint64_t v825 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v825 - 8) + 16))(a1, a2, v825);
        uint64_t DefElem = type metadata accessor for PgQuery_DefElem(0);
        *(void *)(a1 + *(int *)(DefElem + 20)) = *(uint64_t *)((char *)a2 + *(int *)(DefElem + 20));
        swift_retain();
        goto LABEL_326;
      case 0xBFu:
        uint64_t v827 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v827 - 8) + 16))(a1, a2, v827);
        uint64_t RangeTblEntry = type metadata accessor for PgQuery_RangeTblEntry(0);
        *(void *)(a1 + *(int *)(RangeTblEntry + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RangeTblEntry + 20));
        swift_retain();
        goto LABEL_326;
      case 0xC0u:
        uint64_t v829 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v829 - 8) + 16))(a1, a2, v829);
        uint64_t RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
        *(void *)(a1 + *(int *)(RangeTblFunction + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RangeTblFunction + 20));
        swift_retain();
        goto LABEL_326;
      case 0xC1u:
        uint64_t v831 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v831 - 8) + 16))(a1, a2, v831);
        uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
        *(void *)(a1 + *(int *)(TableSampleClause + 20)) = *(uint64_t *)((char *)a2 + *(int *)(TableSampleClause + 20));
        swift_retain();
        goto LABEL_326;
      case 0xC2u:
        uint64_t v833 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v833 - 8) + 16))(a1, a2, v833);
        uint64_t v834 = type metadata accessor for PgQuery_WithCheckOption(0);
        *(void *)(a1 + *(int *)(v834 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v834 + 20));
        swift_retain();
        goto LABEL_326;
      case 0xC3u:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(_WORD *)(a1 + 12) = *((_WORD *)a2 + 6);
        uint64_t v835 = *(int *)(type metadata accessor for PgQuery_SortGroupClause(0) + 36);
        uint64_t v836 = a1 + v835;
        uint64_t v837 = (uint64_t)a2 + v835;
        uint64_t v838 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v838 - 8) + 16))(v836, v837, v838);
        goto LABEL_326;
      case 0xC4u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)(a1 + 16) = a2[2];
        *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
        uint64_t v839 = *(int *)(type metadata accessor for PgQuery_GroupingSet(0) + 28);
        uint64_t v840 = a1 + v839;
        uint64_t v841 = (uint64_t)a2 + v839;
        uint64_t v842 = type metadata accessor for UnknownStorage();
        v843 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v842 - 8) + 16);
        swift_bridgeObjectRetain();
        v843(v840, v841, v842);
        goto LABEL_326;
      case 0xC5u:
        uint64_t v844 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v844 - 8) + 16))(a1, a2, v844);
        uint64_t WindowClause = type metadata accessor for PgQuery_WindowClause(0);
        *(void *)(a1 + *(int *)(WindowClause + 20)) = *(uint64_t *)((char *)a2 + *(int *)(WindowClause + 20));
        swift_retain();
        goto LABEL_326;
      case 0xC6u:
        uint64_t v846 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v846;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v847 = *(int *)(type metadata accessor for PgQuery_ObjectWithArgs(0) + 28);
        uint64_t v848 = a1 + v847;
        uint64_t v849 = (uint64_t)a2 + v847;
        uint64_t v850 = type metadata accessor for UnknownStorage();
        v851 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v850 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v851(v848, v849, v850);
        goto LABEL_326;
      case 0xC7u:
        uint64_t v852 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v852;
        *(void *)(a1 + 16) = a2[2];
        uint64_t v853 = *(int *)(type metadata accessor for PgQuery_AccessPriv(0) + 24);
        uint64_t v854 = a1 + v853;
        uint64_t v855 = (uint64_t)a2 + v853;
        uint64_t v856 = type metadata accessor for UnknownStorage();
        v857 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v856 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v857(v854, v855, v856);
        goto LABEL_326;
      case 0xC8u:
        *(void *)a1 = *a2;
        uint64_t v858 = a2[2];
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = v858;
        uint64_t OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
        uint64_t v860 = *(int *)(OpClassItem + 32);
        uint64_t v1246 = a1 + v860;
        uint64_t v861 = (uint64_t)a2 + v860;
        uint64_t v862 = type metadata accessor for UnknownStorage();
        v863 = *(void (**)(void, void, void))(*(void *)(v862 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v864 = v861;
        v865 = v863;
        v863(v1246, v864, v862);
        uint64_t v866 = OpClassItem;
        uint64_t v867 = *(int *)(OpClassItem + 36);
        v868 = (void *)(a1 + v867);
        v869 = (uint64_t *)((char *)a2 + v867);
        uint64_t v870 = type metadata accessor for PgQuery_ObjectWithArgs(0);
        uint64_t v871 = *(void *)(v870 - 8);
        uint64_t v1202 = v862;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v871 + 48))(v869, 1, v870))
        {
          uint64_t v872 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          memcpy(v868, v869, *(void *)(*(void *)(v872 - 8) + 64));
        }
        else
        {
          v1250 = v865;
          uint64_t v1104 = v869[1];
          void *v868 = *v869;
          v868[1] = v1104;
          *((unsigned char *)v868 + 16) = *((unsigned char *)v869 + 16);
          uint64_t v1105 = *(int *)(v870 + 28);
          v1195 = (char *)v868 + v1105;
          v1106 = (char *)v869 + v1105;
          swift_bridgeObjectRetain();
          v865 = v1250;
          swift_bridgeObjectRetain();
          v1250(v1195, v1106, v862);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v871 + 56))(v868, 0, 1, v870);
        }
        uint64_t v1107 = *(int *)(v866 + 40);
        uint64_t v236 = a1 + v1107;
        uint64_t v237 = (uint64_t)a2 + v1107;
        uint64_t v1108 = type metadata accessor for PgQuery_TypeName(0);
        uint64_t v1109 = *(void *)(v1108 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1109 + 48))(v237, 1, v1108))
        {
LABEL_299:
          uint64_t v1110 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
          memcpy((void *)v236, (const void *)v237, *(void *)(*(void *)(v1110 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v236 = *(void *)v237;
          *(_DWORD *)(v236 + 8) = *(_DWORD *)(v237 + 8);
          *(_WORD *)(v236 + 12) = *(_WORD *)(v237 + 12);
          *(void *)(v236 + 16) = *(void *)(v237 + 16);
          *(_DWORD *)(v236 + 24) = *(_DWORD *)(v237 + 24);
          *(void *)(v236 + 32) = *(void *)(v237 + 32);
          *(_DWORD *)(v236 + 40) = *(_DWORD *)(v237 + 40);
          uint64_t v1149 = *(int *)(v1108 + 48);
          v1150 = v865;
          uint64_t v1151 = v236 + v1149;
          uint64_t v1152 = v237 + v1149;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1150(v1151, v1152, v1202);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1109 + 56))(v236, 0, 1, v1108);
        }
        goto LABEL_326;
      case 0xC9u:
        *(void *)a1 = *a2;
        uint64_t TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
        uint64_t v874 = *(int *)(TableLikeClause + 24);
        uint64_t v875 = a1 + v874;
        uint64_t v876 = (uint64_t)a2 + v874;
        uint64_t v673 = type metadata accessor for UnknownStorage();
        v674 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v673 - 8) + 16);
        v674(v875, v876, v673);
        uint64_t v877 = *(int *)(TableLikeClause + 28);
        uint64_t v145 = a1 + v877;
        uint64_t v146 = (uint64_t)a2 + v877;
        uint64_t v147 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v878 = *(void *)(v147 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v878 + 48))(v146, 1, v147)) {
          goto LABEL_231;
        }
        uint64_t v1224 = v878;
        uint64_t v1111 = *(void *)(v146 + 8);
        *(void *)uint64_t v145 = *(void *)v146;
        *(void *)(v145 + 8) = v1111;
        uint64_t v1112 = *(void *)(v146 + 24);
        *(void *)(v145 + 16) = *(void *)(v146 + 16);
        *(void *)(v145 + 24) = v1112;
        uint64_t v1113 = *(void *)(v146 + 40);
        *(void *)(v145 + 32) = *(void *)(v146 + 32);
        *(void *)(v145 + 40) = v1113;
        *(unsigned char *)(v145 + 48) = *(unsigned char *)(v146 + 48);
        uint64_t v1114 = *(void *)(v146 + 64);
        *(void *)(v145 + 56) = *(void *)(v146 + 56);
        *(void *)(v145 + 64) = v1114;
        *(_DWORD *)(v145 + 72) = *(_DWORD *)(v146 + 72);
        uint64_t v1115 = *(int *)(v147 + 40);
        uint64_t v1196 = v146 + v1115;
        uint64_t v1211 = v145 + v1115;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v674(v1211, v1196, v673);
        uint64_t v1116 = *(int *)(v147 + 44);
        v1010 = (void *)(v145 + v1116);
        v1011 = (void *)(v146 + v1116);
        uint64_t v1088 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v1089 = *(void *)(v1088 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1089 + 48))(v1011, 1, v1088)) {
          goto LABEL_305;
        }
LABEL_318:
        uint64_t v1158 = v1011[1];
        void *v1010 = *v1011;
        v1010[1] = v1158;
        v1010[2] = v1011[2];
        uint64_t v1159 = *(int *)(v1088 + 24);
        v1199 = (char *)v1010 + v1159;
        v1160 = (char *)v1011 + v1159;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v674((uint64_t)v1199, (uint64_t)v1160, v673);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1089 + 56))(v1010, 0, 1, v1088);
        goto LABEL_325;
      case 0xCAu:
        uint64_t v880 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v880 - 8) + 16))(a1, a2, v880);
        uint64_t FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
        *(void *)(a1 + *(int *)(FunctionParameter + 20)) = *(uint64_t *)((char *)a2 + *(int *)(FunctionParameter + 20));
        swift_retain();
        goto LABEL_326;
      case 0xCBu:
        uint64_t v882 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v882;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t v883 = *(int *)(type metadata accessor for PgQuery_LockingClause(0) + 28);
        uint64_t v884 = a1 + v883;
        uint64_t v885 = (uint64_t)a2 + v883;
        uint64_t v886 = type metadata accessor for UnknownStorage();
        v887 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v886 - 8) + 16);
        swift_bridgeObjectRetain();
        v887(v884, v885, v886);
        goto LABEL_326;
      case 0xCCu:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        *(_WORD *)(a1 + 32) = *((_WORD *)a2 + 16);
        uint64_t v888 = *(int *)(type metadata accessor for PgQuery_RowMarkClause(0) + 32);
        uint64_t v889 = a1 + v888;
        uint64_t v890 = (uint64_t)a2 + v888;
        uint64_t v891 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v891 - 8) + 16))(v889, v890, v891);
        goto LABEL_326;
      case 0xCDu:
        uint64_t v892 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v892 - 8) + 16))(a1, a2, v892);
        uint64_t XmlSerialize = type metadata accessor for PgQuery_XmlSerialize(0);
        *(void *)(a1 + *(int *)(XmlSerialize + 20)) = *(uint64_t *)((char *)a2 + *(int *)(XmlSerialize + 20));
        swift_retain();
        goto LABEL_326;
      case 0xCEu:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
        uint64_t v894 = *(int *)(type metadata accessor for PgQuery_WithClause(0) + 28);
        uint64_t v895 = a1 + v894;
        uint64_t v896 = (uint64_t)a2 + v894;
        uint64_t v897 = type metadata accessor for UnknownStorage();
        v898 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v897 - 8) + 16);
        swift_bridgeObjectRetain();
        v898(v895, v896, v897);
        goto LABEL_326;
      case 0xCFu:
        uint64_t v899 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v899 - 8) + 16))(a1, a2, v899);
        uint64_t InferClause = type metadata accessor for PgQuery_InferClause(0);
        *(void *)(a1 + *(int *)(InferClause + 20)) = *(uint64_t *)((char *)a2 + *(int *)(InferClause + 20));
        swift_retain();
        goto LABEL_326;
      case 0xD0u:
        uint64_t v901 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v901 - 8) + 16))(a1, a2, v901);
        uint64_t v902 = type metadata accessor for PgQuery_OnConflictClause(0);
        *(void *)(a1 + *(int *)(v902 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v902 + 20));
        swift_retain();
        goto LABEL_326;
      case 0xD1u:
        uint64_t v903 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v903 - 8) + 16))(a1, a2, v903);
        uint64_t CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
        *(void *)(a1 + *(int *)(CommonTableExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CommonTableExpr + 20));
        swift_retain();
        goto LABEL_326;
      case 0xD2u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v905 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v905;
        *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
        uint64_t v906 = *(int *)(type metadata accessor for PgQuery_RoleSpec(0) + 28);
        uint64_t v907 = a1 + v906;
        uint64_t v908 = (uint64_t)a2 + v906;
        uint64_t v909 = type metadata accessor for UnknownStorage();
        v910 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v909 - 8) + 16);
        swift_bridgeObjectRetain();
        v910(v907, v908, v909);
        goto LABEL_326;
      case 0xD3u:
        uint64_t v911 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v911;
        *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
        uint64_t v912 = *(int *)(type metadata accessor for PgQuery_TriggerTransition(0) + 28);
        uint64_t v913 = a1 + v912;
        uint64_t v914 = (uint64_t)a2 + v912;
        uint64_t v915 = type metadata accessor for UnknownStorage();
        v916 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v915 - 8) + 16);
        swift_bridgeObjectRetain();
        v916(v913, v914, v915);
        goto LABEL_326;
      case 0xD4u:
        uint64_t v917 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v917 - 8) + 16))(a1, a2, v917);
        uint64_t PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
        *(void *)(a1 + *(int *)(PartitionElem + 20)) = *(uint64_t *)((char *)a2 + *(int *)(PartitionElem + 20));
        swift_retain();
        goto LABEL_326;
      case 0xD5u:
        uint64_t v919 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v919;
        *(void *)(a1 + 16) = a2[2];
        *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
        uint64_t v920 = *(int *)(type metadata accessor for PgQuery_PartitionSpec(0) + 28);
        uint64_t v921 = a1 + v920;
        uint64_t v922 = (uint64_t)a2 + v920;
        uint64_t v923 = type metadata accessor for UnknownStorage();
        v924 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v923 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v924(v921, v922, v923);
        goto LABEL_326;
      case 0xD6u:
        uint64_t v925 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v925;
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 20) = *(uint64_t *)((char *)a2 + 20);
        uint64_t v926 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v926;
        *(void *)(a1 + 48) = a2[6];
        *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
        uint64_t v927 = *(int *)(type metadata accessor for PgQuery_PartitionBoundSpec(0) + 48);
        uint64_t v928 = a1 + v927;
        uint64_t v1247 = (uint64_t)a2 + v927;
        uint64_t v929 = type metadata accessor for UnknownStorage();
        v930 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v929 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v930(v928, v1247, v929);
        goto LABEL_326;
      case 0xD7u:
        uint64_t v931 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v931 - 8) + 16))(a1, a2, v931);
        uint64_t PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
        *(void *)(a1 + *(int *)(PartitionRangeDatum + 20)) = *(uint64_t *)((char *)a2
                                                                          + *(int *)(PartitionRangeDatum + 20));
        swift_retain();
        goto LABEL_326;
      case 0xD8u:
        uint64_t v933 = type metadata accessor for UnknownStorage();
        v934 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v933 - 8) + 16);
        v934(a1, a2, v933);
        uint64_t PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
        uint64_t v936 = *(int *)(PartitionCmd + 20);
        v937 = (void *)(a1 + v936);
        v938 = (uint64_t *)((char *)a2 + v936);
        uint64_t v939 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v940 = *(void *)(v939 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v940 + 48))(v938, 1, v939))
        {
          uint64_t v941 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
          memcpy(v937, v938, *(void *)(*(void *)(v941 - 8) + 64));
        }
        else
        {
          uint64_t v1184 = v940;
          uint64_t v1197 = PartitionCmd;
          uint64_t v1117 = v938[1];
          void *v937 = *v938;
          v937[1] = v1117;
          v1251 = (void (*)(char *, char *, uint64_t))v934;
          uint64_t v1118 = v938[3];
          v937[2] = v938[2];
          v937[3] = v1118;
          uint64_t v1119 = v938[5];
          v937[4] = v938[4];
          v937[5] = v1119;
          *((unsigned char *)v937 + 48) = *((unsigned char *)v938 + 48);
          uint64_t v1120 = v933;
          uint64_t v1121 = v938[8];
          v937[7] = v938[7];
          v937[8] = v1121;
          *((_DWORD *)v937 + 18) = *((_DWORD *)v938 + 18);
          uint64_t v1122 = *(int *)(v939 + 40);
          v1212 = (char *)v937 + v1122;
          v1180 = (char *)v938 + v1122;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1251(v1212, v1180, v1120);
          uint64_t v1123 = *(int *)(v939 + 44);
          v1124 = (void *)((char *)v937 + v1123);
          v1125 = (void *)((char *)v938 + v1123);
          uint64_t v1126 = type metadata accessor for PgQuery_Alias(0);
          uint64_t v1127 = *(void *)(v1126 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1127 + 48))(v1125, 1, v1126))
          {
            uint64_t v1128 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
            memcpy(v1124, v1125, *(void *)(*(void *)(v1128 - 8) + 64));
          }
          else
          {
            uint64_t v1161 = v1125[1];
            void *v1124 = *v1125;
            v1124[1] = v1161;
            v1124[2] = v1125[2];
            uint64_t v1162 = *(int *)(v1126 + 24);
            v1182 = (char *)v1124 + v1162;
            v1163 = (char *)v1125 + v1162;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1251(v1182, v1163, v1120);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1127 + 56))(v1124, 0, 1, v1126);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1184 + 56))(v937, 0, 1, v939);
          uint64_t PartitionCmd = v1197;
          uint64_t v933 = v1120;
          v934 = (void (*)(uint64_t, uint64_t *, uint64_t))v1251;
        }
        uint64_t v1164 = *(int *)(PartitionCmd + 24);
        v1165 = (void *)(a1 + v1164);
        v1166 = (uint64_t *)((char *)a2 + v1164);
        uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
        uint64_t v1168 = *(void *)(PartitionBoundSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1168 + 48))(v1166, 1, PartitionBoundSpec))
        {
          uint64_t v1169 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
          memcpy(v1165, v1166, *(void *)(*(void *)(v1169 - 8) + 64));
        }
        else
        {
          uint64_t v1170 = v1166[1];
          void *v1165 = *v1166;
          v1165[1] = v1170;
          *((unsigned char *)v1165 + 16) = *((unsigned char *)v1166 + 16);
          *(void *)((char *)v1165 + 20) = *(void *)((char *)v1166 + 20);
          uint64_t v1171 = v1166[5];
          v1165[4] = v1166[4];
          v1165[5] = v1171;
          v1165[6] = v1166[6];
          *((_DWORD *)v1165 + 14) = *((_DWORD *)v1166 + 14);
          uint64_t v1172 = *(int *)(PartitionBoundSpec + 48);
          v1252 = (void (*)(char *, char *, uint64_t))v934;
          v1173 = (char *)v1165 + v1172;
          v1174 = (char *)v1166 + v1172;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1252(v1173, v1174, v933);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1168 + 56))(v1165, 0, 1, PartitionBoundSpec);
        }
        goto LABEL_326;
      case 0xD9u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
        uint64_t v943 = *(int *)(VacuumRelation + 24);
        uint64_t v944 = a1 + v943;
        uint64_t v945 = (uint64_t)a2 + v943;
        uint64_t v946 = type metadata accessor for UnknownStorage();
        v947 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v946 - 8) + 16);
        swift_bridgeObjectRetain();
        v947(v944, v945, v946);
        uint64_t v948 = *(int *)(VacuumRelation + 28);
        uint64_t v145 = a1 + v948;
        uint64_t v146 = (uint64_t)a2 + v948;
        uint64_t v147 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v949 = *(void *)(v147 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v949 + 48))(v146, 1, v147))
        {
LABEL_231:
          uint64_t v879 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
          memcpy((void *)v145, (const void *)v146, *(void *)(*(void *)(v879 - 8) + 64));
        }
        else
        {
          uint64_t v1224 = v949;
          uint64_t v1129 = *(void *)(v146 + 8);
          *(void *)uint64_t v145 = *(void *)v146;
          *(void *)(v145 + 8) = v1129;
          uint64_t v1130 = *(void *)(v146 + 24);
          *(void *)(v145 + 16) = *(void *)(v146 + 16);
          *(void *)(v145 + 24) = v1130;
          uint64_t v1131 = *(void *)(v146 + 40);
          *(void *)(v145 + 32) = *(void *)(v146 + 32);
          *(void *)(v145 + 40) = v1131;
          *(unsigned char *)(v145 + 48) = *(unsigned char *)(v146 + 48);
          v1005 = v947;
          uint64_t v1132 = *(void *)(v146 + 64);
          *(void *)(v145 + 56) = *(void *)(v146 + 56);
          *(void *)(v145 + 64) = v1132;
          *(_DWORD *)(v145 + 72) = *(_DWORD *)(v146 + 72);
          uint64_t v1133 = *(int *)(v147 + 40);
          uint64_t v1198 = v146 + v1133;
          uint64_t v1213 = v145 + v1133;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v1134 = v1198;
          uint64_t v1188 = v946;
          v1005(v1213, v1134, v946);
          uint64_t v1135 = *(int *)(v147 + 44);
          v1010 = (void *)(v145 + v1135);
          v1011 = (void *)(v146 + v1135);
          uint64_t v1012 = type metadata accessor for PgQuery_Alias(0);
          uint64_t v1013 = *(void *)(v1012 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1013 + 48))(v1011, 1, v1012))
          {
LABEL_305:
            uint64_t v1136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
            memcpy(v1010, v1011, *(void *)(*(void *)(v1136 - 8) + 64));
          }
          else
          {
LABEL_324:
            uint64_t v1175 = v1011[1];
            void *v1010 = *v1011;
            v1010[1] = v1175;
            v1010[2] = v1011[2];
            uint64_t v1176 = *(int *)(v1012 + 24);
            v1177 = (char *)v1010 + v1176;
            v1178 = (char *)v1011 + v1176;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1005((uint64_t)v1177, (uint64_t)v1178, v1188);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1013 + 56))(v1010, 0, 1, v1012);
          }
LABEL_325:
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1224 + 56))(v145, 0, 1, v147);
        }
LABEL_326:
        swift_storeEnumTagMultiPayload();
        break;
      case 0xDAu:
        uint64_t v950 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v950;
        *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
        *(_WORD *)(a1 + 20) = *((_WORD *)a2 + 10);
        uint64_t v951 = *(int *)(type metadata accessor for PgQuery_InlineCodeBlock(0) + 32);
        uint64_t v952 = a1 + v951;
        uint64_t v953 = (uint64_t)a2 + v951;
        uint64_t v954 = type metadata accessor for UnknownStorage();
        v955 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v954 - 8) + 16);
        swift_bridgeObjectRetain();
        v955(v952, v953, v954);
        goto LABEL_326;
      case 0xDBu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v956 = *(int *)(type metadata accessor for PgQuery_CallContext(0) + 20);
        uint64_t v957 = a1 + v956;
        uint64_t v958 = (uint64_t)a2 + v956;
        uint64_t v959 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v959 - 8) + 16))(v957, v958, v959);
        goto LABEL_326;
      case 0xDCu:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        uint64_t v960 = *(int *)(type metadata accessor for PgQuery_Integer(0) + 20);
        uint64_t v961 = a1 + v960;
        uint64_t v962 = (uint64_t)a2 + v960;
        uint64_t v963 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v963 - 8) + 16))(v961, v962, v963);
        goto LABEL_326;
      case 0xDDu:
        uint64_t v964 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v964;
        uint64_t v965 = *(int *)(type metadata accessor for PgQuery_Float(0) + 20);
        uint64_t v966 = a1 + v965;
        uint64_t v967 = (uint64_t)a2 + v965;
        uint64_t v968 = type metadata accessor for UnknownStorage();
        v969 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v968 - 8) + 16);
        swift_bridgeObjectRetain();
        v969(v966, v967, v968);
        goto LABEL_326;
      case 0xDEu:
        uint64_t v970 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v970;
        uint64_t v971 = *(int *)(type metadata accessor for PgQuery_String(0) + 20);
        uint64_t v972 = a1 + v971;
        uint64_t v973 = (uint64_t)a2 + v971;
        uint64_t v974 = type metadata accessor for UnknownStorage();
        v975 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v974 - 8) + 16);
        swift_bridgeObjectRetain();
        v975(v972, v973, v974);
        goto LABEL_326;
      case 0xDFu:
        uint64_t v976 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v976;
        uint64_t v977 = *(int *)(type metadata accessor for PgQuery_BitString(0) + 20);
        uint64_t v978 = a1 + v977;
        uint64_t v979 = (uint64_t)a2 + v977;
        uint64_t v980 = type metadata accessor for UnknownStorage();
        v981 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v980 - 8) + 16);
        swift_bridgeObjectRetain();
        v981(v978, v979, v980);
        goto LABEL_326;
      case 0xE1u:
        *(void *)a1 = *a2;
        uint64_t v983 = *(int *)(type metadata accessor for PgQuery_List(0) + 20);
        uint64_t v984 = a1 + v983;
        uint64_t v985 = (uint64_t)a2 + v983;
        uint64_t v986 = type metadata accessor for UnknownStorage();
        v987 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v986 - 8) + 16);
        swift_bridgeObjectRetain();
        v987(v984, v985, v986);
        goto LABEL_326;
      case 0xE2u:
        *(void *)a1 = *a2;
        uint64_t v988 = *(int *)(type metadata accessor for PgQuery_IntList(0) + 20);
        uint64_t v989 = a1 + v988;
        uint64_t v990 = (uint64_t)a2 + v988;
        uint64_t v991 = type metadata accessor for UnknownStorage();
        v992 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v991 - 8) + 16);
        swift_bridgeObjectRetain();
        v992(v989, v990, v991);
        goto LABEL_326;
      case 0xE3u:
        *(void *)a1 = *a2;
        uint64_t v993 = *(int *)(type metadata accessor for PgQuery_OidList(0) + 20);
        uint64_t v994 = a1 + v993;
        uint64_t v995 = (uint64_t)a2 + v993;
        uint64_t v996 = type metadata accessor for UnknownStorage();
        v997 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v996 - 8) + 16);
        swift_bridgeObjectRetain();
        v997(v994, v995, v996);
        goto LABEL_326;
      default:
        uint64_t v6 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v6;
        *(void *)(a1 + 16) = a2[2];
        uint64_t v7 = *(int *)(type metadata accessor for PgQuery_Alias(0) + 24);
        uint64_t v8 = a1 + v7;
        uint64_t v9 = (uint64_t)a2 + v7;
        uint64_t v10 = type metadata accessor for UnknownStorage();
        uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v11(v8, v9, v10);
        goto LABEL_326;
    }
  }
  return a1;
}

uint64_t type metadata accessor for PgQuery_Var(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Var);
}

uint64_t type metadata accessor for PgQuery_Param(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Param);
}

uint64_t type metadata accessor for PgQuery_Aggref(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Aggref);
}

uint64_t type metadata accessor for PgQuery_GroupingFunc(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_GroupingFunc);
}

uint64_t type metadata accessor for PgQuery_WindowFunc(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WindowFunc);
}

uint64_t type metadata accessor for PgQuery_SubscriptingRef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SubscriptingRef);
}

uint64_t type metadata accessor for PgQuery_NamedArgExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NamedArgExpr);
}

uint64_t type metadata accessor for PgQuery_OpExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OpExpr);
}

uint64_t type metadata accessor for PgQuery_DistinctExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DistinctExpr);
}

uint64_t type metadata accessor for PgQuery_NullIfExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NullIfExpr);
}

uint64_t type metadata accessor for PgQuery_ScalarArrayOpExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ScalarArrayOpExpr);
}

uint64_t type metadata accessor for PgQuery_BoolExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_BoolExpr);
}

uint64_t type metadata accessor for PgQuery_SubLink(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SubLink);
}

uint64_t type metadata accessor for PgQuery_SubPlan(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SubPlan);
}

uint64_t type metadata accessor for PgQuery_AlternativeSubPlan(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlternativeSubPlan);
}

uint64_t type metadata accessor for PgQuery_FieldSelect(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FieldSelect);
}

uint64_t type metadata accessor for PgQuery_FieldStore(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FieldStore);
}

uint64_t type metadata accessor for PgQuery_RelabelType(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RelabelType);
}

uint64_t type metadata accessor for PgQuery_CoerceViaIO(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoerceViaIO);
}

uint64_t type metadata accessor for PgQuery_ArrayCoerceExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ArrayCoerceExpr);
}

uint64_t type metadata accessor for PgQuery_ConvertRowtypeExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ConvertRowtypeExpr);
}

uint64_t type metadata accessor for PgQuery_CollateExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CollateExpr);
}

uint64_t type metadata accessor for PgQuery_CaseExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CaseExpr);
}

uint64_t type metadata accessor for PgQuery_CaseWhen(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CaseWhen);
}

uint64_t type metadata accessor for PgQuery_CaseTestExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CaseTestExpr);
}

uint64_t type metadata accessor for PgQuery_ArrayExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ArrayExpr);
}

uint64_t type metadata accessor for PgQuery_RowExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RowExpr);
}

uint64_t type metadata accessor for PgQuery_RowCompareExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RowCompareExpr);
}

uint64_t type metadata accessor for PgQuery_CoalesceExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoalesceExpr);
}

uint64_t type metadata accessor for PgQuery_MinMaxExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_MinMaxExpr);
}

uint64_t type metadata accessor for PgQuery_SQLValueFunction(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SQLValueFunction);
}

uint64_t type metadata accessor for PgQuery_XmlExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_XmlExpr);
}

uint64_t type metadata accessor for PgQuery_NullTest(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NullTest);
}

uint64_t type metadata accessor for PgQuery_BooleanTest(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_BooleanTest);
}

uint64_t type metadata accessor for PgQuery_CoerceToDomain(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoerceToDomain);
}

uint64_t type metadata accessor for PgQuery_CoerceToDomainValue(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CoerceToDomainValue);
}

uint64_t type metadata accessor for PgQuery_SetToDefault(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SetToDefault);
}

uint64_t type metadata accessor for PgQuery_CurrentOfExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CurrentOfExpr);
}

uint64_t type metadata accessor for PgQuery_NextValueExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NextValueExpr);
}

uint64_t type metadata accessor for PgQuery_InferenceElem(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InferenceElem);
}

uint64_t type metadata accessor for PgQuery_TargetEntry(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TargetEntry);
}

uint64_t type metadata accessor for PgQuery_RangeTblRef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTblRef);
}

uint64_t type metadata accessor for PgQuery_JoinExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_JoinExpr);
}

uint64_t type metadata accessor for PgQuery_RawStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RawStmt);
}

uint64_t type metadata accessor for PgQuery_InsertStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InsertStmt);
}

uint64_t type metadata accessor for PgQuery_DeleteStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DeleteStmt);
}

uint64_t type metadata accessor for PgQuery_UpdateStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_UpdateStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTableStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTableStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTableCmd(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTableCmd);
}

uint64_t type metadata accessor for PgQuery_AlterDomainStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterDomainStmt);
}

uint64_t type metadata accessor for PgQuery_SetOperationStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SetOperationStmt);
}

uint64_t type metadata accessor for PgQuery_GrantStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_GrantStmt);
}

uint64_t type metadata accessor for PgQuery_GrantRoleStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_GrantRoleStmt);
}

uint64_t type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterDefaultPrivilegesStmt);
}

uint64_t type metadata accessor for PgQuery_ClosePortalStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ClosePortalStmt);
}

uint64_t type metadata accessor for PgQuery_ClusterStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ClusterStmt);
}

uint64_t type metadata accessor for PgQuery_CopyStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CopyStmt);
}

uint64_t type metadata accessor for PgQuery_CreateStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateStmt);
}

uint64_t type metadata accessor for PgQuery_DefineStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DefineStmt);
}

uint64_t type metadata accessor for PgQuery_DropStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropStmt);
}

uint64_t type metadata accessor for PgQuery_TruncateStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TruncateStmt);
}

uint64_t type metadata accessor for PgQuery_CommentStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CommentStmt);
}

uint64_t type metadata accessor for PgQuery_FetchStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FetchStmt);
}

uint64_t type metadata accessor for PgQuery_IndexStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IndexStmt);
}

uint64_t type metadata accessor for PgQuery_CreateFunctionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateFunctionStmt);
}

uint64_t type metadata accessor for PgQuery_AlterFunctionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterFunctionStmt);
}

uint64_t type metadata accessor for PgQuery_DoStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DoStmt);
}

uint64_t type metadata accessor for PgQuery_RenameStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RenameStmt);
}

uint64_t type metadata accessor for PgQuery_RuleStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RuleStmt);
}

uint64_t type metadata accessor for PgQuery_NotifyStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_NotifyStmt);
}

uint64_t type metadata accessor for PgQuery_ListenStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ListenStmt);
}

uint64_t type metadata accessor for PgQuery_UnlistenStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_UnlistenStmt);
}

uint64_t type metadata accessor for PgQuery_TransactionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TransactionStmt);
}

uint64_t type metadata accessor for PgQuery_ViewStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ViewStmt);
}

uint64_t type metadata accessor for PgQuery_LoadStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_LoadStmt);
}

uint64_t type metadata accessor for PgQuery_CreateDomainStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateDomainStmt);
}

uint64_t type metadata accessor for PgQuery_CreatedbStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreatedbStmt);
}

uint64_t type metadata accessor for PgQuery_DropdbStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropdbStmt);
}

uint64_t type metadata accessor for PgQuery_VacuumStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_VacuumStmt);
}

uint64_t type metadata accessor for PgQuery_ExplainStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ExplainStmt);
}

uint64_t type metadata accessor for PgQuery_CreateTableAsStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateTableAsStmt);
}

uint64_t type metadata accessor for PgQuery_CreateSeqStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateSeqStmt);
}

uint64_t type metadata accessor for PgQuery_AlterSeqStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterSeqStmt);
}

uint64_t type metadata accessor for PgQuery_VariableSetStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_VariableSetStmt);
}

uint64_t type metadata accessor for PgQuery_VariableShowStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_VariableShowStmt);
}

uint64_t type metadata accessor for PgQuery_DiscardStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DiscardStmt);
}

uint64_t type metadata accessor for PgQuery_CreateTrigStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateTrigStmt);
}

uint64_t type metadata accessor for PgQuery_CreatePLangStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreatePLangStmt);
}

uint64_t type metadata accessor for PgQuery_CreateRoleStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateRoleStmt);
}

uint64_t type metadata accessor for PgQuery_AlterRoleStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterRoleStmt);
}

uint64_t type metadata accessor for PgQuery_DropRoleStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropRoleStmt);
}

uint64_t type metadata accessor for PgQuery_LockStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_LockStmt);
}

uint64_t type metadata accessor for PgQuery_ConstraintsSetStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ConstraintsSetStmt);
}

uint64_t type metadata accessor for PgQuery_ReindexStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ReindexStmt);
}

uint64_t type metadata accessor for PgQuery_CreateSchemaStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateSchemaStmt);
}

uint64_t type metadata accessor for PgQuery_AlterDatabaseStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterDatabaseStmt);
}

uint64_t type metadata accessor for PgQuery_AlterDatabaseSetStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterDatabaseSetStmt);
}

uint64_t type metadata accessor for PgQuery_AlterRoleSetStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterRoleSetStmt);
}

uint64_t type metadata accessor for PgQuery_CreateConversionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateConversionStmt);
}

uint64_t type metadata accessor for PgQuery_CreateCastStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateCastStmt);
}

uint64_t type metadata accessor for PgQuery_CreateOpClassStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateOpClassStmt);
}

uint64_t type metadata accessor for PgQuery_CreateOpFamilyStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateOpFamilyStmt);
}

uint64_t type metadata accessor for PgQuery_AlterOpFamilyStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterOpFamilyStmt);
}

uint64_t type metadata accessor for PgQuery_PrepareStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PrepareStmt);
}

uint64_t type metadata accessor for PgQuery_ExecuteStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ExecuteStmt);
}

uint64_t type metadata accessor for PgQuery_DeallocateStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DeallocateStmt);
}

uint64_t type metadata accessor for PgQuery_DeclareCursorStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DeclareCursorStmt);
}

uint64_t type metadata accessor for PgQuery_CreateTableSpaceStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateTableSpaceStmt);
}

uint64_t type metadata accessor for PgQuery_DropTableSpaceStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropTableSpaceStmt);
}

uint64_t type metadata accessor for PgQuery_AlterObjectDependsStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, type metadata singleton initialization cache for PgQuery_AlterObjectDependsStmt);
}

uint64_t type metadata accessor for PgQuery_AlterObjectSchemaStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterObjectSchemaStmt);
}

uint64_t type metadata accessor for PgQuery_AlterOwnerStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterOwnerStmt);
}

uint64_t type metadata accessor for PgQuery_AlterOperatorStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterOperatorStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTypeStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTypeStmt);
}

uint64_t type metadata accessor for PgQuery_DropOwnedStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropOwnedStmt);
}

uint64_t type metadata accessor for PgQuery_ReassignOwnedStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ReassignOwnedStmt);
}

uint64_t type metadata accessor for PgQuery_CompositeTypeStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CompositeTypeStmt);
}

uint64_t type metadata accessor for PgQuery_CreateEnumStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateEnumStmt);
}

uint64_t type metadata accessor for PgQuery_CreateRangeStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateRangeStmt);
}

uint64_t type metadata accessor for PgQuery_AlterEnumStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterEnumStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTSDictionaryStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTSDictionaryStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTSConfigurationStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTSConfigurationStmt);
}

uint64_t type metadata accessor for PgQuery_CreateFdwStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateFdwStmt);
}

uint64_t type metadata accessor for PgQuery_AlterFdwStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterFdwStmt);
}

uint64_t type metadata accessor for PgQuery_CreateForeignServerStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateForeignServerStmt);
}

uint64_t type metadata accessor for PgQuery_AlterForeignServerStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterForeignServerStmt);
}

uint64_t type metadata accessor for PgQuery_CreateUserMappingStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateUserMappingStmt);
}

uint64_t type metadata accessor for PgQuery_AlterUserMappingStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterUserMappingStmt);
}

uint64_t type metadata accessor for PgQuery_DropUserMappingStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropUserMappingStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, type metadata singleton initialization cache for PgQuery_AlterTableSpaceOptionsStmt);
}

uint64_t type metadata accessor for PgQuery_AlterTableMoveAllStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterTableMoveAllStmt);
}

uint64_t type metadata accessor for PgQuery_SecLabelStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SecLabelStmt);
}

uint64_t type metadata accessor for PgQuery_CreateForeignTableStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateForeignTableStmt);
}

uint64_t type metadata accessor for PgQuery_ImportForeignSchemaStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ImportForeignSchemaStmt);
}

uint64_t type metadata accessor for PgQuery_CreateExtensionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateExtensionStmt);
}

uint64_t type metadata accessor for PgQuery_AlterExtensionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterExtensionStmt);
}

uint64_t type metadata accessor for PgQuery_AlterExtensionContentsStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterExtensionContentsStmt);
}

uint64_t type metadata accessor for PgQuery_CreateEventTrigStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateEventTrigStmt);
}

uint64_t type metadata accessor for PgQuery_AlterEventTrigStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterEventTrigStmt);
}

uint64_t type metadata accessor for PgQuery_RefreshMatViewStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RefreshMatViewStmt);
}

uint64_t type metadata accessor for PgQuery_ReplicaIdentityStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ReplicaIdentityStmt);
}

uint64_t type metadata accessor for PgQuery_AlterSystemStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterSystemStmt);
}

uint64_t type metadata accessor for PgQuery_CreatePolicyStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreatePolicyStmt);
}

uint64_t type metadata accessor for PgQuery_AlterPolicyStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterPolicyStmt);
}

uint64_t type metadata accessor for PgQuery_CreateTransformStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateTransformStmt);
}

uint64_t type metadata accessor for PgQuery_CreateAmStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateAmStmt);
}

uint64_t type metadata accessor for PgQuery_CreatePublicationStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreatePublicationStmt);
}

uint64_t type metadata accessor for PgQuery_AlterPublicationStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterPublicationStmt);
}

uint64_t type metadata accessor for PgQuery_CreateSubscriptionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateSubscriptionStmt);
}

uint64_t type metadata accessor for PgQuery_AlterSubscriptionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterSubscriptionStmt);
}

uint64_t type metadata accessor for PgQuery_DropSubscriptionStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DropSubscriptionStmt);
}

uint64_t type metadata accessor for PgQuery_CreateStatsStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateStatsStmt);
}

uint64_t type metadata accessor for PgQuery_AlterCollationStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterCollationStmt);
}

uint64_t type metadata accessor for PgQuery_CallStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CallStmt);
}

uint64_t type metadata accessor for PgQuery_AlterStatsStmt(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AlterStatsStmt);
}

uint64_t type metadata accessor for PgQuery_A_Expr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Expr);
}

uint64_t type metadata accessor for PgQuery_ColumnRef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ColumnRef);
}

uint64_t type metadata accessor for PgQuery_ParamRef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ParamRef);
}

uint64_t type metadata accessor for PgQuery_A_Const(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Const);
}

uint64_t type metadata accessor for PgQuery_A_Indices(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Indices);
}

uint64_t type metadata accessor for PgQuery_A_Indirection(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_Indirection);
}

uint64_t type metadata accessor for PgQuery_A_ArrayExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_A_ArrayExpr);
}

uint64_t type metadata accessor for PgQuery_ResTarget(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ResTarget);
}

uint64_t type metadata accessor for PgQuery_MultiAssignRef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_MultiAssignRef);
}

uint64_t type metadata accessor for PgQuery_TypeCast(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TypeCast);
}

uint64_t type metadata accessor for PgQuery_SortBy(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SortBy);
}

uint64_t type metadata accessor for PgQuery_RangeSubselect(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeSubselect);
}

uint64_t type metadata accessor for PgQuery_RangeFunction(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeFunction);
}

uint64_t type metadata accessor for PgQuery_RangeTableSample(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTableSample);
}

uint64_t type metadata accessor for PgQuery_RangeTableFunc(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTableFunc);
}

uint64_t type metadata accessor for PgQuery_RangeTableFuncCol(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTableFuncCol);
}

uint64_t type metadata accessor for PgQuery_ColumnDef(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_ColumnDef);
}

uint64_t type metadata accessor for PgQuery_IndexElem(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IndexElem);
}

uint64_t type metadata accessor for PgQuery_Constraint(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Constraint);
}

uint64_t type metadata accessor for PgQuery_DefElem(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_DefElem);
}

uint64_t type metadata accessor for PgQuery_RangeTblEntry(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTblEntry);
}

uint64_t type metadata accessor for PgQuery_RangeTblFunction(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RangeTblFunction);
}

uint64_t type metadata accessor for PgQuery_WithCheckOption(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WithCheckOption);
}

uint64_t type metadata accessor for PgQuery_SortGroupClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_SortGroupClause);
}

uint64_t type metadata accessor for PgQuery_GroupingSet(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_GroupingSet);
}

uint64_t type metadata accessor for PgQuery_WindowClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_WindowClause);
}

uint64_t type metadata accessor for PgQuery_AccessPriv(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_AccessPriv);
}

uint64_t type metadata accessor for PgQuery_CreateOpClassItem(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CreateOpClassItem);
}

uint64_t type metadata accessor for PgQuery_TableLikeClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TableLikeClause);
}

uint64_t type metadata accessor for PgQuery_FunctionParameter(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_FunctionParameter);
}

uint64_t type metadata accessor for PgQuery_LockingClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_LockingClause);
}

uint64_t type metadata accessor for PgQuery_RowMarkClause(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_RowMarkClause);
}

uint64_t type metadata accessor for PgQuery_XmlSerialize(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_XmlSerialize);
}

uint64_t type metadata accessor for PgQuery_CommonTableExpr(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CommonTableExpr);
}

uint64_t type metadata accessor for PgQuery_TriggerTransition(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_TriggerTransition);
}

uint64_t type metadata accessor for PgQuery_PartitionElem(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionElem);
}

uint64_t type metadata accessor for PgQuery_PartitionRangeDatum(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionRangeDatum);
}

uint64_t type metadata accessor for PgQuery_PartitionCmd(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_PartitionCmd);
}

uint64_t type metadata accessor for PgQuery_VacuumRelation(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_VacuumRelation);
}

uint64_t type metadata accessor for PgQuery_InlineCodeBlock(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_InlineCodeBlock);
}

uint64_t type metadata accessor for PgQuery_CallContext(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_CallContext);
}

uint64_t type metadata accessor for PgQuery_Integer(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Integer);
}

uint64_t type metadata accessor for PgQuery_Float(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Float);
}

uint64_t type metadata accessor for PgQuery_String(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_String);
}

uint64_t type metadata accessor for PgQuery_BitString(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_BitString);
}

uint64_t type metadata accessor for PgQuery_List(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_List);
}

uint64_t type metadata accessor for PgQuery_IntList(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_IntList);
}

uint64_t type metadata accessor for PgQuery_OidList(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_OidList);
}

uint64_t destroy for PgQuery_Node.OneOf_Node(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_Alias(0) + 24);
      goto LABEL_267;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v5 = a1 + *(int *)(RangeVar + 40);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v5, v6);
      goto LABEL_252;
    case 2:
      uint64_t v7 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
      type metadata accessor for PgQuery_TableFunc(0);
      goto LABEL_239;
    case 3:
    case 104:
    case 171:
    case 224:
      goto LABEL_268;
    case 4:
      uint64_t v8 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
      type metadata accessor for PgQuery_Var(0);
      goto LABEL_239;
    case 5:
      uint64_t v9 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
      type metadata accessor for PgQuery_Param(0);
      goto LABEL_239;
    case 6:
      uint64_t v10 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
      type metadata accessor for PgQuery_Aggref(0);
      goto LABEL_239;
    case 7:
      uint64_t v11 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(a1, v11);
      type metadata accessor for PgQuery_GroupingFunc(0);
      goto LABEL_239;
    case 8:
      uint64_t v12 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
      type metadata accessor for PgQuery_WindowFunc(0);
      goto LABEL_239;
    case 9:
      uint64_t v13 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(a1, v13);
      type metadata accessor for PgQuery_SubscriptingRef(0);
      goto LABEL_239;
    case 10:
      uint64_t v14 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(a1, v14);
      type metadata accessor for PgQuery_FuncExpr(0);
      goto LABEL_239;
    case 11:
      uint64_t v15 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
      type metadata accessor for PgQuery_NamedArgExpr(0);
      goto LABEL_239;
    case 12:
      uint64_t v16 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
      type metadata accessor for PgQuery_OpExpr(0);
      goto LABEL_239;
    case 13:
      uint64_t v17 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(a1, v17);
      type metadata accessor for PgQuery_DistinctExpr(0);
      goto LABEL_239;
    case 14:
      uint64_t v18 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(a1, v18);
      type metadata accessor for PgQuery_NullIfExpr(0);
      goto LABEL_239;
    case 15:
      uint64_t v19 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
      type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
      goto LABEL_239;
    case 16:
      uint64_t v20 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(a1, v20);
      type metadata accessor for PgQuery_BoolExpr(0);
      goto LABEL_239;
    case 17:
      uint64_t v21 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a1, v21);
      type metadata accessor for PgQuery_SubLink(0);
      goto LABEL_239;
    case 18:
      uint64_t v22 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8))(a1, v22);
      type metadata accessor for PgQuery_SubPlan(0);
      goto LABEL_239;
    case 19:
      uint64_t v23 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(a1, v23);
      type metadata accessor for PgQuery_AlternativeSubPlan(0);
      goto LABEL_239;
    case 20:
      uint64_t v24 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(a1, v24);
      type metadata accessor for PgQuery_FieldSelect(0);
      goto LABEL_239;
    case 21:
      uint64_t v25 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(a1, v25);
      type metadata accessor for PgQuery_FieldStore(0);
      goto LABEL_239;
    case 22:
      uint64_t v26 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(a1, v26);
      type metadata accessor for PgQuery_RelabelType(0);
      goto LABEL_239;
    case 23:
      uint64_t v27 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(a1, v27);
      type metadata accessor for PgQuery_CoerceViaIO(0);
      goto LABEL_239;
    case 24:
      uint64_t v28 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(a1, v28);
      type metadata accessor for PgQuery_ArrayCoerceExpr(0);
      goto LABEL_239;
    case 25:
      uint64_t v29 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(a1, v29);
      type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
      goto LABEL_239;
    case 26:
      uint64_t v30 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(a1, v30);
      type metadata accessor for PgQuery_CollateExpr(0);
      goto LABEL_239;
    case 27:
      uint64_t v31 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(a1, v31);
      type metadata accessor for PgQuery_CaseExpr(0);
      goto LABEL_239;
    case 28:
      uint64_t v32 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(a1, v32);
      type metadata accessor for PgQuery_CaseWhen(0);
      goto LABEL_239;
    case 29:
      uint64_t v33 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8))(a1, v33);
      type metadata accessor for PgQuery_CaseTestExpr(0);
      goto LABEL_239;
    case 30:
      uint64_t v34 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(a1, v34);
      type metadata accessor for PgQuery_ArrayExpr(0);
      goto LABEL_239;
    case 31:
      uint64_t v35 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v35 - 8) + 8))(a1, v35);
      type metadata accessor for PgQuery_RowExpr(0);
      goto LABEL_239;
    case 32:
      uint64_t v36 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(a1, v36);
      type metadata accessor for PgQuery_RowCompareExpr(0);
      goto LABEL_239;
    case 33:
      uint64_t v37 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8))(a1, v37);
      type metadata accessor for PgQuery_CoalesceExpr(0);
      goto LABEL_239;
    case 34:
      uint64_t v38 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v38 - 8) + 8))(a1, v38);
      type metadata accessor for PgQuery_MinMaxExpr(0);
      goto LABEL_239;
    case 35:
      uint64_t v39 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(a1, v39);
      type metadata accessor for PgQuery_SQLValueFunction(0);
      goto LABEL_239;
    case 36:
      uint64_t v40 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v40 - 8) + 8))(a1, v40);
      type metadata accessor for PgQuery_XmlExpr(0);
      goto LABEL_239;
    case 37:
      uint64_t v41 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(a1, v41);
      type metadata accessor for PgQuery_NullTest(0);
      goto LABEL_239;
    case 38:
      uint64_t v42 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v42 - 8) + 8))(a1, v42);
      type metadata accessor for PgQuery_BooleanTest(0);
      goto LABEL_239;
    case 39:
      uint64_t v43 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(a1, v43);
      type metadata accessor for PgQuery_CoerceToDomain(0);
      goto LABEL_239;
    case 40:
      uint64_t v44 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v44 - 8) + 8))(a1, v44);
      type metadata accessor for PgQuery_CoerceToDomainValue(0);
      goto LABEL_239;
    case 41:
      uint64_t v45 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v45 - 8) + 8))(a1, v45);
      type metadata accessor for PgQuery_SetToDefault(0);
      goto LABEL_239;
    case 42:
      uint64_t v46 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v46 - 8) + 8))(a1, v46);
      type metadata accessor for PgQuery_CurrentOfExpr(0);
      goto LABEL_239;
    case 43:
      uint64_t v47 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v47 - 8) + 8))(a1, v47);
      type metadata accessor for PgQuery_NextValueExpr(0);
      goto LABEL_239;
    case 44:
      uint64_t v48 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v48 - 8) + 8))(a1, v48);
      type metadata accessor for PgQuery_InferenceElem(0);
      goto LABEL_239;
    case 45:
      uint64_t v49 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v49 - 8) + 8))(a1, v49);
      type metadata accessor for PgQuery_TargetEntry(0);
      goto LABEL_239;
    case 46:
      uint64_t RangeTblRef = type metadata accessor for PgQuery_RangeTblRef(0);
      goto LABEL_266;
    case 47:
      uint64_t v51 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v51 - 8) + 8))(a1, v51);
      type metadata accessor for PgQuery_JoinExpr(0);
      goto LABEL_239;
    case 48:
      uint64_t v52 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8))(a1, v52);
      type metadata accessor for PgQuery_FromExpr(0);
      goto LABEL_239;
    case 49:
      uint64_t v53 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(a1, v53);
      type metadata accessor for PgQuery_OnConflictExpr(0);
      goto LABEL_239;
    case 50:
      uint64_t v54 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v54 - 8) + 8))(a1, v54);
      type metadata accessor for PgQuery_IntoClause(0);
      goto LABEL_239;
    case 51:
      uint64_t v55 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v55 - 8) + 8))(a1, v55);
      type metadata accessor for PgQuery_RawStmt(0);
      goto LABEL_239;
    case 52:
      uint64_t v56 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v56 - 8) + 8))(a1, v56);
      type metadata accessor for PgQuery_Query(0);
      goto LABEL_239;
    case 53:
      uint64_t v57 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v57 - 8) + 8))(a1, v57);
      type metadata accessor for PgQuery_InsertStmt(0);
      goto LABEL_239;
    case 54:
      uint64_t v58 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v58 - 8) + 8))(a1, v58);
      type metadata accessor for PgQuery_DeleteStmt(0);
      goto LABEL_239;
    case 55:
      uint64_t v59 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v59 - 8) + 8))(a1, v59);
      type metadata accessor for PgQuery_UpdateStmt(0);
      goto LABEL_239;
    case 56:
      uint64_t v60 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v60 - 8) + 8))(a1, v60);
      type metadata accessor for PgQuery_SelectStmt(0);
      goto LABEL_239;
    case 57:
      swift_bridgeObjectRelease();
      uint64_t AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
      goto LABEL_95;
    case 58:
      uint64_t v62 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8))(a1, v62);
      type metadata accessor for PgQuery_AlterTableCmd(0);
      goto LABEL_239;
    case 59:
      uint64_t v63 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v63 - 8) + 8))(a1, v63);
      type metadata accessor for PgQuery_AlterDomainStmt(0);
      goto LABEL_239;
    case 60:
      uint64_t v64 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8))(a1, v64);
      type metadata accessor for PgQuery_SetOperationStmt(0);
      goto LABEL_239;
    case 61:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_GrantStmt(0) + 48);
      goto LABEL_267;
    case 62:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
      uint64_t v66 = a1 + *(int *)(GrantRoleStmt + 36);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v66, v6);
      uint64_t v67 = *(int *)(GrantRoleStmt + 40);
      goto LABEL_150;
    case 63:
      swift_bridgeObjectRelease();
      uint64_t AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
      uint64_t v69 = a1 + *(int *)(AlterDefaultPrivilegesStmt + 20);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v69, v6);
      uint64_t v70 = a1 + *(int *)(AlterDefaultPrivilegesStmt + 24);
      uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(GrantStmt - 8) + 48))(v70, 1, GrantStmt);
      if (!result) {
        goto LABEL_65;
      }
      return result;
    case 64:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_ClosePortalStmt(0);
      goto LABEL_266;
    case 65:
      swift_bridgeObjectRelease();
      uint64_t ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
      goto LABEL_249;
    case 66:
      uint64_t v73 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v73 - 8) + 8))(a1, v73);
      type metadata accessor for PgQuery_CopyStmt(0);
      goto LABEL_239;
    case 67:
      uint64_t v74 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v74 - 8) + 8))(a1, v74);
      type metadata accessor for PgQuery_CreateStmt(0);
      goto LABEL_239;
    case 68:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_DefineStmt(0) + 44);
      goto LABEL_267;
    case 69:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_DropStmt(0) + 36);
      goto LABEL_267;
    case 70:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_TruncateStmt(0) + 28);
      goto LABEL_267;
    case 71:
      uint64_t v75 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v75 - 8) + 8))(a1, v75);
      type metadata accessor for PgQuery_CommentStmt(0);
      goto LABEL_239;
    case 72:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_FetchStmt(0) + 32);
      goto LABEL_267;
    case 73:
      uint64_t v76 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v76 - 8) + 8))(a1, v76);
      type metadata accessor for PgQuery_IndexStmt(0);
      goto LABEL_239;
    case 74:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Functionuint64_t Stmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
      goto LABEL_117;
    case 75:
      swift_bridgeObjectRelease();
      AlterFunctionuint64_t Stmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
      uint64_t v79 = a1 + *(int *)(AlterFunctionStmt + 24);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v79, v6);
      uint64_t v80 = *(int *)(AlterFunctionStmt + 28);
      goto LABEL_130;
    case 76:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_DoStmt(0);
      goto LABEL_266;
    case 77:
      uint64_t v81 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v81 - 8) + 8))(a1, v81);
      type metadata accessor for PgQuery_RenameStmt(0);
      goto LABEL_239;
    case 78:
      uint64_t v82 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v82 - 8) + 8))(a1, v82);
      type metadata accessor for PgQuery_RuleStmt(0);
      goto LABEL_239;
    case 79:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_NotifyStmt(0) + 24);
      goto LABEL_267;
    case 80:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_ListenStmt(0);
      goto LABEL_266;
    case 81:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_UnlistenStmt(0);
      goto LABEL_266;
    case 82:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_TransactionStmt(0) + 36);
      goto LABEL_267;
    case 83:
      uint64_t v83 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v83 - 8) + 8))(a1, v83);
      type metadata accessor for PgQuery_ViewStmt(0);
      goto LABEL_239;
    case 84:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_LoadStmt(0);
      goto LABEL_266;
    case 85:
      uint64_t v84 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v84 - 8) + 8))(a1, v84);
      type metadata accessor for PgQuery_CreateDomainStmt(0);
      goto LABEL_239;
    case 86:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreatedbStmt(0) + 24);
      goto LABEL_267;
    case 87:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_DropdbStmt(0) + 28);
      goto LABEL_267;
    case 88:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_VacuumStmt(0) + 28);
      goto LABEL_267;
    case 89:
      uint64_t v85 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v85 - 8) + 8))(a1, v85);
      type metadata accessor for PgQuery_ExplainStmt(0);
      goto LABEL_239;
    case 90:
      uint64_t v86 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v86 - 8) + 8))(a1, v86);
      type metadata accessor for PgQuery_CreateTableAsStmt(0);
      goto LABEL_239;
    case 91:
      swift_bridgeObjectRelease();
      Sequint64_t Stmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
      goto LABEL_107;
    case 92:
      swift_bridgeObjectRelease();
      uint64_t AlterTableStmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
LABEL_95:
      uint64_t v88 = AlterTableStmt;
      uint64_t v89 = a1 + *(int *)(AlterTableStmt + 28);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v89, v6);
      uint64_t v90 = *(int *)(v88 + 32);
      goto LABEL_250;
    case 93:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_VariableSetStmt(0) + 32);
      goto LABEL_267;
    case 94:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_VariableShowStmt(0);
      goto LABEL_266;
    case 95:
      uint64_t RangeTblRef = type metadata accessor for PgQuery_DiscardStmt(0);
      goto LABEL_266;
    case 96:
      uint64_t v91 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v91 - 8) + 8))(a1, v91);
      type metadata accessor for PgQuery_CreateTrigStmt(0);
      goto LABEL_239;
    case 97:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreatePLangStmt(0) + 40);
      goto LABEL_267;
    case 98:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreateRoleStmt(0) + 28);
      goto LABEL_267;
    case 99:
      swift_bridgeObjectRelease();
      AlterRoleuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
      goto LABEL_149;
    case 100:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_DropRoleStmt(0) + 24);
      goto LABEL_267;
    case 101:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_LockStmt(0) + 28);
      goto LABEL_267;
    case 102:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_ConstraintsSetStmt(0) + 24);
      goto LABEL_267;
    case 103:
      swift_bridgeObjectRelease();
      Sequint64_t Stmt = type metadata accessor for PgQuery_ReindexStmt(0);
LABEL_107:
      uint64_t v93 = SeqStmt;
      uint64_t v94 = a1 + *(int *)(SeqStmt + 32);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v94, v6);
      uint64_t v90 = *(int *)(v93 + 36);
      goto LABEL_250;
    case 105:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
      goto LABEL_146;
    case 106:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterDatabaseStmt(0) + 24);
      goto LABEL_267;
    case 107:
      swift_bridgeObjectRelease();
      AlterDatabaseSetuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
      uint64_t v97 = a1 + *(int *)(AlterDatabaseSetStmt + 20);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v97, v6);
      uint64_t v98 = *(int *)(AlterDatabaseSetStmt + 24);
      goto LABEL_166;
    case 108:
      swift_bridgeObjectRelease();
      AlterRoleSetuint64_t Stmt = (int *)type metadata accessor for PgQuery_AlterRoleSetStmt(0);
      uint64_t v100 = a1 + AlterRoleSetStmt[5];
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v100, v6);
      uint64_t v101 = a1 + AlterRoleSetStmt[6];
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 48))(v101, 1, RoleSpec))
      {
        swift_bridgeObjectRelease();
        v192(v101 + *(int *)(RoleSpec + 28), v6);
      }
      uint64_t v98 = AlterRoleSetStmt[7];
      goto LABEL_166;
    case 109:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreateConversionStmt(0) + 36);
      goto LABEL_267;
    case 110:
      uint64_t v103 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v103 - 8) + 8))(a1, v103);
      type metadata accessor for PgQuery_CreateCastStmt(0);
      goto LABEL_239;
    case 111:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Functionuint64_t Stmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
LABEL_117:
      uint64_t OpClassItem = (int *)FunctionStmt;
      uint64_t v105 = a1 + *(int *)(FunctionStmt + 36);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v105, v6);
      goto LABEL_221;
    case 112:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreateOpFamilyStmt(0) + 24);
      goto LABEL_267;
    case 113:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterOpFamilyStmt(0) + 32);
      goto LABEL_267;
    case 114:
      uint64_t v106 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v106 - 8) + 8))(a1, v106);
      type metadata accessor for PgQuery_PrepareStmt(0);
      goto LABEL_239;
    case 115:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_ExecuteStmt(0) + 24);
      goto LABEL_267;
    case 116:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_DeallocateStmt(0);
      goto LABEL_266;
    case 117:
      uint64_t v107 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v107 - 8) + 8))(a1, v107);
      type metadata accessor for PgQuery_DeclareCursorStmt(0);
      goto LABEL_239;
    case 118:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
      goto LABEL_146;
    case 119:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_DropTableSpaceStmt(0) + 24);
      goto LABEL_267;
    case 120:
      uint64_t v108 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v108 - 8) + 8))(a1, v108);
      type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
      goto LABEL_239;
    case 121:
      uint64_t v109 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v109 - 8) + 8))(a1, v109);
      type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
      goto LABEL_239;
    case 122:
      uint64_t v110 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v110 - 8) + 8))(a1, v110);
      type metadata accessor for PgQuery_AlterOwnerStmt(0);
      goto LABEL_239;
    case 123:
      swift_bridgeObjectRelease();
      AlterOperatoruint64_t Stmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
      uint64_t v112 = a1 + *(int *)(AlterOperatorStmt + 20);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v112, v6);
      uint64_t v80 = *(int *)(AlterOperatorStmt + 24);
LABEL_130:
      uint64_t v70 = a1 + v80;
      uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ObjectWithArgs - 8) + 48))(v70, 1, ObjectWithArgs);
      if (result) {
        return result;
      }
      swift_bridgeObjectRelease();
      goto LABEL_151;
    case 124:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterTypeStmt(0) + 24);
      goto LABEL_267;
    case 125:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_DropOwnedStmt(0) + 24);
      goto LABEL_267;
    case 126:
      swift_bridgeObjectRelease();
      ReassignOwneduint64_t Stmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
      uint64_t v115 = a1 + *(int *)(ReassignOwnedStmt + 20);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v115, v6);
      uint64_t v67 = *(int *)(ReassignOwnedStmt + 24);
      goto LABEL_150;
    case 127:
      swift_bridgeObjectRelease();
      CompositeTypeuint64_t Stmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
      uint64_t v117 = a1 + *(int *)(CompositeTypeStmt + 20);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v117, v6);
      uint64_t v90 = *(int *)(CompositeTypeStmt + 24);
      goto LABEL_250;
    case 128:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreateEnumStmt(0) + 24);
      goto LABEL_267;
    case 129:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreateRangeStmt(0) + 24);
      goto LABEL_267;
    case 130:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterEnumStmt(0) + 40);
      goto LABEL_267;
    case 131:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterTSDictionaryStmt(0) + 24);
      goto LABEL_267;
    case 132:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterTSConfigurationStmt(0) + 44);
      goto LABEL_267;
    case 133:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreateFdwStmt(0) + 28);
      goto LABEL_267;
    case 134:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterFdwStmt(0) + 28);
      goto LABEL_267;
    case 135:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreateForeignServerStmt(0) + 40);
      goto LABEL_267;
    case 136:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterForeignServerStmt(0) + 32);
      goto LABEL_267;
    case 137:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
LABEL_146:
      uint64_t v118 = SchemaStmt;
      uint64_t v119 = a1 + *(int *)(SchemaStmt + 28);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v119, v6);
      uint64_t v67 = *(int *)(v118 + 32);
      goto LABEL_150;
    case 138:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      AlterRoleuint64_t Stmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
      goto LABEL_149;
    case 139:
      swift_bridgeObjectRelease();
      AlterRoleuint64_t Stmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
LABEL_149:
      uint64_t v120 = AlterRoleStmt;
      uint64_t v121 = a1 + *(int *)(AlterRoleStmt + 24);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v121, v6);
      uint64_t v67 = *(int *)(v120 + 28);
LABEL_150:
      uint64_t v70 = a1 + v67;
      uint64_t ObjectWithArgs = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(ObjectWithArgs - 8) + 48))(v70, 1, ObjectWithArgs);
      if (result) {
        return result;
      }
LABEL_151:
      swift_bridgeObjectRelease();
      uint64_t v122 = *(int *)(ObjectWithArgs + 28);
      goto LABEL_256;
    case 140:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0) + 28);
      goto LABEL_267;
    case 141:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterTableMoveAllStmt(0) + 36);
      goto LABEL_267;
    case 142:
      uint64_t v123 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v123 - 8) + 8))(a1, v123);
      type metadata accessor for PgQuery_SecLabelStmt(0);
      goto LABEL_239;
    case 143:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      ForeignTableuint64_t Stmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
      uint64_t v125 = a1 + *(int *)(ForeignTableStmt + 24);
      uint64_t v126 = type metadata accessor for UnknownStorage();
      uint64_t v127 = *(void (**)(uint64_t, uint64_t))(*(void *)(v126 - 8) + 8);
      v127(v125, v126);
      uint64_t v128 = a1 + *(int *)(ForeignTableStmt + 28);
      uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Stmt - 8) + 48))(v128, 1, Stmt);
      if (result) {
        return result;
      }
      v127(v128, v126);
      goto LABEL_239;
    case 144:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_ImportForeignSchemaStmt(0) + 40);
      goto LABEL_267;
    case 145:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreateExtensionStmt(0) + 28);
      goto LABEL_267;
    case 146:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterExtensionStmt(0) + 24);
      goto LABEL_267;
    case 147:
      uint64_t v130 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v130 - 8) + 8))(a1, v130);
      type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
      goto LABEL_239;
    case 148:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreateEventTrigStmt(0) + 32);
      goto LABEL_267;
    case 149:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterEventTrigStmt(0) + 24);
      goto LABEL_267;
    case 150:
      uint64_t ClusterStmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
      goto LABEL_249;
    case 151:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_ReplicaIdentityStmt(0) + 24);
      goto LABEL_267;
    case 152:
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(a1, v6);
      uint64_t v98 = *(int *)(type metadata accessor for PgQuery_AlterSystemStmt(0) + 20);
LABEL_166:
      uint64_t v70 = a1 + v98;
      VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(VariableSetStmt - 8) + 48))(v70, 1, VariableSetStmt);
      if (result) {
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v122 = *(int *)(VariableSetStmt + 32);
      goto LABEL_256;
    case 153:
      uint64_t v132 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v132 - 8) + 8))(a1, v132);
      type metadata accessor for PgQuery_CreatePolicyStmt(0);
      goto LABEL_239;
    case 154:
      uint64_t v133 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v133 - 8) + 8))(a1, v133);
      type metadata accessor for PgQuery_AlterPolicyStmt(0);
      goto LABEL_239;
    case 155:
      swift_bridgeObjectRelease();
      Transformuint64_t Stmt = (int *)type metadata accessor for PgQuery_CreateTransformStmt(0);
      uint64_t v135 = a1 + TransformStmt[6];
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v135, v6);
      uint64_t v136 = a1 + TransformStmt[7];
      uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 48))(v136, 1, TypeName))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v192(v136 + *(int *)(TypeName + 48), v6);
      }
      uint64_t v138 = a1 + TransformStmt[8];
      uint64_t v139 = type metadata accessor for PgQuery_ObjectWithArgs(0);
      uint64_t v140 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 48);
      if (!v140(v138, 1, v139))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v192(v138 + *(int *)(v139 + 28), v6);
      }
      uint64_t v70 = a1 + TransformStmt[9];
      uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v140)(v70, 1, v139);
      if (result) {
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v122 = *(int *)(v139 + 28);
      goto LABEL_256;
    case 156:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Amuint64_t Stmt = type metadata accessor for PgQuery_CreateAmStmt(0);
      goto LABEL_236;
    case 157:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreatePublicationStmt(0) + 32);
      goto LABEL_267;
    case 158:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterPublicationStmt(0) + 36);
      goto LABEL_267;
    case 159:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreateSubscriptionStmt(0) + 32);
      goto LABEL_267;
    case 160:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AlterSubscriptionStmt(0) + 36);
      goto LABEL_267;
    case 161:
      swift_bridgeObjectRelease();
      Amuint64_t Stmt = type metadata accessor for PgQuery_DropSubscriptionStmt(0);
      goto LABEL_236;
    case 162:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_CreateStatsStmt(0) + 40);
      goto LABEL_267;
    case 163:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_AlterCollationStmt(0);
      goto LABEL_266;
    case 164:
      uint64_t v142 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v142 - 8) + 8))(a1, v142);
      type metadata accessor for PgQuery_CallStmt(0);
      goto LABEL_239;
    case 165:
      swift_bridgeObjectRelease();
      Amuint64_t Stmt = type metadata accessor for PgQuery_AlterStatsStmt(0);
      goto LABEL_236;
    case 166:
      uint64_t v143 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v143 - 8) + 8))(a1, v143);
      type metadata accessor for PgQuery_A_Expr(0);
      goto LABEL_239;
    case 167:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_ColumnRef(0) + 24);
      goto LABEL_267;
    case 168:
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_ParamRef(0) + 24);
      goto LABEL_267;
    case 169:
      uint64_t v144 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v144 - 8) + 8))(a1, v144);
      type metadata accessor for PgQuery_A_Const(0);
      goto LABEL_239;
    case 170:
      uint64_t v145 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v145 - 8) + 8))(a1, v145);
      type metadata accessor for PgQuery_FuncCall(0);
      goto LABEL_239;
    case 172:
      uint64_t v146 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v146 - 8) + 8))(a1, v146);
      type metadata accessor for PgQuery_A_Indices(0);
      goto LABEL_239;
    case 173:
      uint64_t v147 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v147 - 8) + 8))(a1, v147);
      type metadata accessor for PgQuery_A_Indirection(0);
      goto LABEL_239;
    case 174:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_A_ArrayExpr(0) + 24);
      goto LABEL_267;
    case 175:
      uint64_t v148 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v148 - 8) + 8))(a1, v148);
      type metadata accessor for PgQuery_ResTarget(0);
      goto LABEL_239;
    case 176:
      uint64_t v149 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v149 - 8) + 8))(a1, v149);
      type metadata accessor for PgQuery_MultiAssignRef(0);
      goto LABEL_239;
    case 177:
      uint64_t v150 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v150 - 8) + 8))(a1, v150);
      type metadata accessor for PgQuery_TypeCast(0);
      goto LABEL_239;
    case 178:
      uint64_t v151 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v151 - 8) + 8))(a1, v151);
      type metadata accessor for PgQuery_CollateClause(0);
      goto LABEL_239;
    case 179:
      uint64_t v152 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v152 - 8) + 8))(a1, v152);
      type metadata accessor for PgQuery_SortBy(0);
      goto LABEL_239;
    case 180:
      uint64_t v153 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v153 - 8) + 8))(a1, v153);
      type metadata accessor for PgQuery_WindowDef(0);
      goto LABEL_239;
    case 181:
      uint64_t v154 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v154 - 8) + 8))(a1, v154);
      type metadata accessor for PgQuery_RangeSubselect(0);
      goto LABEL_239;
    case 182:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
      uint64_t v156 = a1 + *(int *)(RangeFunction + 36);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v156, v6);
      uint64_t v157 = *(int *)(RangeFunction + 40);
      goto LABEL_253;
    case 183:
      uint64_t v158 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v158 - 8) + 8))(a1, v158);
      type metadata accessor for PgQuery_RangeTableSample(0);
      goto LABEL_239;
    case 184:
      uint64_t v159 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v159 - 8) + 8))(a1, v159);
      type metadata accessor for PgQuery_RangeTableFunc(0);
      goto LABEL_239;
    case 185:
      uint64_t v160 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v160 - 8) + 8))(a1, v160);
      type metadata accessor for PgQuery_RangeTableFuncCol(0);
      goto LABEL_239;
    case 186:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_TypeName(0) + 48);
      goto LABEL_267;
    case 187:
      uint64_t v161 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v161 - 8) + 8))(a1, v161);
      type metadata accessor for PgQuery_ColumnDef(0);
      goto LABEL_239;
    case 188:
      uint64_t v162 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v162 - 8) + 8))(a1, v162);
      type metadata accessor for PgQuery_IndexElem(0);
      goto LABEL_239;
    case 189:
      uint64_t v163 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v163 - 8) + 8))(a1, v163);
      type metadata accessor for PgQuery_Constraint(0);
      goto LABEL_239;
    case 190:
      uint64_t v164 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v164 - 8) + 8))(a1, v164);
      type metadata accessor for PgQuery_DefElem(0);
      goto LABEL_239;
    case 191:
      uint64_t v165 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v165 - 8) + 8))(a1, v165);
      type metadata accessor for PgQuery_RangeTblEntry(0);
      goto LABEL_239;
    case 192:
      uint64_t v166 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v166 - 8) + 8))(a1, v166);
      type metadata accessor for PgQuery_RangeTblFunction(0);
      goto LABEL_239;
    case 193:
      uint64_t v167 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v167 - 8) + 8))(a1, v167);
      type metadata accessor for PgQuery_TableSampleClause(0);
      goto LABEL_239;
    case 194:
      uint64_t v168 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v168 - 8) + 8))(a1, v168);
      type metadata accessor for PgQuery_WithCheckOption(0);
      goto LABEL_239;
    case 195:
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_SortGroupClause(0) + 36);
      goto LABEL_267;
    case 196:
      swift_bridgeObjectRelease();
      Amuint64_t Stmt = type metadata accessor for PgQuery_GroupingSet(0);
      goto LABEL_236;
    case 197:
      uint64_t v169 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v169 - 8) + 8))(a1, v169);
      type metadata accessor for PgQuery_WindowClause(0);
      goto LABEL_239;
    case 198:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Amuint64_t Stmt = type metadata accessor for PgQuery_ObjectWithArgs(0);
      goto LABEL_236;
    case 199:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_AccessPriv(0) + 24);
      goto LABEL_267;
    case 200:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t OpClassItem = (int *)type metadata accessor for PgQuery_CreateOpClassItem(0);
      uint64_t v170 = a1 + OpClassItem[8];
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v170, v6);
      uint64_t v171 = a1 + OpClassItem[9];
      uint64_t v172 = type metadata accessor for PgQuery_ObjectWithArgs(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v172 - 8) + 48))(v171, 1, v172))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v192(v171 + *(int *)(v172 + 28), v6);
      }
LABEL_221:
      uint64_t v70 = a1 + OpClassItem[10];
      uint64_t GrantStmt = type metadata accessor for PgQuery_TypeName(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(GrantStmt - 8) + 48))(v70, 1, GrantStmt);
      if (result) {
        return result;
      }
LABEL_65:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_247;
    case 201:
      uint64_t ClusterStmt = type metadata accessor for PgQuery_TableLikeClause(0);
      goto LABEL_249;
    case 202:
      uint64_t v173 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v173 - 8) + 8))(a1, v173);
      type metadata accessor for PgQuery_FunctionParameter(0);
      goto LABEL_239;
    case 203:
      swift_bridgeObjectRelease();
      Amuint64_t Stmt = type metadata accessor for PgQuery_LockingClause(0);
      goto LABEL_236;
    case 204:
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_RowMarkClause(0) + 32);
      goto LABEL_267;
    case 205:
      uint64_t v174 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v174 - 8) + 8))(a1, v174);
      type metadata accessor for PgQuery_XmlSerialize(0);
      goto LABEL_239;
    case 206:
      swift_bridgeObjectRelease();
      Amuint64_t Stmt = type metadata accessor for PgQuery_WithClause(0);
      goto LABEL_236;
    case 207:
      uint64_t v175 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v175 - 8) + 8))(a1, v175);
      type metadata accessor for PgQuery_InferClause(0);
      goto LABEL_239;
    case 208:
      uint64_t v176 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v176 - 8) + 8))(a1, v176);
      type metadata accessor for PgQuery_OnConflictClause(0);
      goto LABEL_239;
    case 209:
      uint64_t v177 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v177 - 8) + 8))(a1, v177);
      type metadata accessor for PgQuery_CommonTableExpr(0);
      goto LABEL_239;
    case 210:
      swift_bridgeObjectRelease();
      Amuint64_t Stmt = type metadata accessor for PgQuery_RoleSpec(0);
      goto LABEL_236;
    case 211:
      swift_bridgeObjectRelease();
      Amuint64_t Stmt = type metadata accessor for PgQuery_TriggerTransition(0);
      goto LABEL_236;
    case 212:
      uint64_t v178 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v178 - 8) + 8))(a1, v178);
      type metadata accessor for PgQuery_PartitionElem(0);
      goto LABEL_239;
    case 213:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Amuint64_t Stmt = type metadata accessor for PgQuery_PartitionSpec(0);
LABEL_236:
      uint64_t v3 = *(int *)(AmStmt + 28);
      goto LABEL_267;
    case 214:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_PartitionBoundSpec(0) + 48);
      goto LABEL_267;
    case 215:
      uint64_t v179 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v179 - 8) + 8))(a1, v179);
      type metadata accessor for PgQuery_PartitionRangeDatum(0);
LABEL_239:
      return swift_release();
    case 216:
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(a1, v6);
      uint64_t PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
      uint64_t v181 = a1 + *(int *)(PartitionCmd + 20);
      uint64_t v182 = type metadata accessor for PgQuery_RangeVar(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v182 - 8) + 48))(v181, 1, v182))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v192(v181 + *(int *)(v182 + 40), v6);
        uint64_t v183 = v181 + *(int *)(v182 + 44);
        uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 48))(v183, 1, Alias))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v192(v183 + *(int *)(Alias + 24), v6);
        }
      }
      uint64_t v70 = a1 + *(int *)(PartitionCmd + 24);
      uint64_t GrantStmt = type metadata accessor for PgQuery_PartitionBoundSpec(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(GrantStmt - 8) + 48))(v70, 1, GrantStmt);
      if (result) {
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_247:
      swift_bridgeObjectRelease();
      uint64_t v122 = *(int *)(GrantStmt + 48);
      goto LABEL_256;
    case 217:
      swift_bridgeObjectRelease();
      uint64_t ClusterStmt = type metadata accessor for PgQuery_VacuumRelation(0);
LABEL_249:
      uint64_t v185 = ClusterStmt;
      uint64_t v186 = a1 + *(int *)(ClusterStmt + 24);
      uint64_t v6 = type metadata accessor for UnknownStorage();
      uint64_t v192 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
      v192(v186, v6);
      uint64_t v90 = *(int *)(v185 + 28);
LABEL_250:
      a1 += v90;
      uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 48))(a1, 1, RangeVar);
      if (result) {
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v192(a1 + *(int *)(RangeVar + 40), v6);
LABEL_252:
      uint64_t v157 = *(int *)(RangeVar + 44);
LABEL_253:
      uint64_t v70 = a1 + v157;
      uint64_t v187 = type metadata accessor for PgQuery_Alias(0);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v187 - 8) + 48))(v70, 1, v187);
      if (result) {
        return result;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v122 = *(int *)(v187 + 24);
LABEL_256:
      uint64_t v188 = v70 + v122;
      uint64_t v189 = v6;
      uint64_t v190 = (uint64_t (*)(uint64_t, uint64_t))v192;
      goto LABEL_269;
    case 218:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(int *)(type metadata accessor for PgQuery_InlineCodeBlock(0) + 32);
      goto LABEL_267;
    case 219:
      uint64_t RangeTblRef = type metadata accessor for PgQuery_CallContext(0);
      goto LABEL_266;
    case 220:
      uint64_t RangeTblRef = type metadata accessor for PgQuery_Integer(0);
      goto LABEL_266;
    case 221:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_Float(0);
      goto LABEL_266;
    case 222:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_String(0);
      goto LABEL_266;
    case 223:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_BitString(0);
      goto LABEL_266;
    case 225:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_List(0);
      goto LABEL_266;
    case 226:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_IntList(0);
      goto LABEL_266;
    case 227:
      swift_bridgeObjectRelease();
      uint64_t RangeTblRef = type metadata accessor for PgQuery_OidList(0);
LABEL_266:
      uint64_t v3 = *(int *)(RangeTblRef + 20);
LABEL_267:
      a1 += v3;
LABEL_268:
      uint64_t v191 = type metadata accessor for UnknownStorage();
      uint64_t v190 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v191 - 8) + 8);
      uint64_t v189 = v191;
      uint64_t v188 = a1;
LABEL_269:
      uint64_t result = v190(v188, v189);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for PgQuery_Node.OneOf_Node(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v10 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v10;
      uint64_t v11 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v11;
      uint64_t v12 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v12;
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      uint64_t v13 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v13;
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v15 = *(int *)(RangeVar + 40);
      uint64_t v1197 = a2 + v15;
      uint64_t v1211 = a1 + v15;
      uint64_t v16 = type metadata accessor for UnknownStorage();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17(v1211, v1197, v16);
      uint64_t v18 = *(int *)(RangeVar + 44);
      uint64_t v19 = (void *)(a1 + v18);
      uint64_t v20 = (void *)(a2 + v18);
      uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
      uint64_t v22 = *(void *)(Alias - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, Alias)) {
        goto LABEL_4;
      }
      uint64_t v995 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v995;
      v19[2] = v20[2];
      uint64_t v996 = *(int *)(Alias + 24);
      v997 = (char *)v19 + v996;
      uint64_t v998 = (char *)v20 + v996;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17((uint64_t)v997, (uint64_t)v998, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, Alias);
      goto LABEL_324;
    case 2u:
      uint64_t v24 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(a1, a2, v24);
      uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
      *(void *)(a1 + *(int *)(TableFunc + 20)) = *(void *)(a2 + *(int *)(TableFunc + 20));
      swift_retain();
      goto LABEL_324;
    case 3u:
    case 0x68u:
    case 0xABu:
    case 0xE0u:
      uint64_t v979 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v979 - 8) + 16))(a1, a2, v979);
      goto LABEL_324;
    case 4u:
      uint64_t v26 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(a1, a2, v26);
      uint64_t Var = type metadata accessor for PgQuery_Var(0);
      *(void *)(a1 + *(int *)(Var + 20)) = *(void *)(a2 + *(int *)(Var + 20));
      swift_retain();
      goto LABEL_324;
    case 5u:
      uint64_t v28 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(a1, a2, v28);
      uint64_t Param = type metadata accessor for PgQuery_Param(0);
      *(void *)(a1 + *(int *)(Param + 20)) = *(void *)(a2 + *(int *)(Param + 20));
      swift_retain();
      goto LABEL_324;
    case 6u:
      uint64_t v30 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(a1, a2, v30);
      uint64_t Aggref = type metadata accessor for PgQuery_Aggref(0);
      *(void *)(a1 + *(int *)(Aggref + 20)) = *(void *)(a2 + *(int *)(Aggref + 20));
      swift_retain();
      goto LABEL_324;
    case 7u:
      uint64_t v32 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(a1, a2, v32);
      uint64_t GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
      *(void *)(a1 + *(int *)(GroupingFunc + 20)) = *(void *)(a2 + *(int *)(GroupingFunc + 20));
      swift_retain();
      goto LABEL_324;
    case 8u:
      uint64_t v34 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 16))(a1, a2, v34);
      uint64_t WindowFunc = type metadata accessor for PgQuery_WindowFunc(0);
      *(void *)(a1 + *(int *)(WindowFunc + 20)) = *(void *)(a2 + *(int *)(WindowFunc + 20));
      swift_retain();
      goto LABEL_324;
    case 9u:
      uint64_t v36 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16))(a1, a2, v36);
      uint64_t SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
      *(void *)(a1 + *(int *)(SubscriptingRef + 20)) = *(void *)(a2 + *(int *)(SubscriptingRef + 20));
      swift_retain();
      goto LABEL_324;
    case 0xAu:
      uint64_t v38 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(a1, a2, v38);
      Funcuint64_t Expr = type metadata accessor for PgQuery_FuncExpr(0);
      *(void *)(a1 + *(int *)(FuncExpr + 20)) = *(void *)(a2 + *(int *)(FuncExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0xBu:
      uint64_t v40 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(a1, a2, v40);
      NamedArguint64_t Expr = type metadata accessor for PgQuery_NamedArgExpr(0);
      *(void *)(a1 + *(int *)(NamedArgExpr + 20)) = *(void *)(a2 + *(int *)(NamedArgExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0xCu:
      uint64_t v42 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(a1, a2, v42);
      Opuint64_t Expr = type metadata accessor for PgQuery_OpExpr(0);
      *(void *)(a1 + *(int *)(OpExpr + 20)) = *(void *)(a2 + *(int *)(OpExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0xDu:
      uint64_t v44 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 16))(a1, a2, v44);
      Distinctuint64_t Expr = type metadata accessor for PgQuery_DistinctExpr(0);
      *(void *)(a1 + *(int *)(DistinctExpr + 20)) = *(void *)(a2 + *(int *)(DistinctExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0xEu:
      uint64_t v46 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 16))(a1, a2, v46);
      NullIfuint64_t Expr = type metadata accessor for PgQuery_NullIfExpr(0);
      *(void *)(a1 + *(int *)(NullIfExpr + 20)) = *(void *)(a2 + *(int *)(NullIfExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0xFu:
      uint64_t v48 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16))(a1, a2, v48);
      ScalarArrayOpuint64_t Expr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
      *(void *)(a1 + *(int *)(ScalarArrayOpExpr + 20)) = *(void *)(a2 + *(int *)(ScalarArrayOpExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x10u:
      uint64_t v50 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16))(a1, a2, v50);
      Booluint64_t Expr = type metadata accessor for PgQuery_BoolExpr(0);
      *(void *)(a1 + *(int *)(BoolExpr + 20)) = *(void *)(a2 + *(int *)(BoolExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x11u:
      uint64_t v52 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16))(a1, a2, v52);
      uint64_t SubLink = type metadata accessor for PgQuery_SubLink(0);
      *(void *)(a1 + *(int *)(SubLink + 20)) = *(void *)(a2 + *(int *)(SubLink + 20));
      swift_retain();
      goto LABEL_324;
    case 0x12u:
      uint64_t v54 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 16))(a1, a2, v54);
      uint64_t SubPlan = type metadata accessor for PgQuery_SubPlan(0);
      *(void *)(a1 + *(int *)(SubPlan + 20)) = *(void *)(a2 + *(int *)(SubPlan + 20));
      swift_retain();
      goto LABEL_324;
    case 0x13u:
      uint64_t v56 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16))(a1, a2, v56);
      Alternativeuint64_t SubPlan = type metadata accessor for PgQuery_AlternativeSubPlan(0);
      *(void *)(a1 + *(int *)(AlternativeSubPlan + 20)) = *(void *)(a2 + *(int *)(AlternativeSubPlan + 20));
      swift_retain();
      goto LABEL_324;
    case 0x14u:
      uint64_t v58 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 16))(a1, a2, v58);
      uint64_t FieldSelect = type metadata accessor for PgQuery_FieldSelect(0);
      *(void *)(a1 + *(int *)(FieldSelect + 20)) = *(void *)(a2 + *(int *)(FieldSelect + 20));
      swift_retain();
      goto LABEL_324;
    case 0x15u:
      uint64_t v60 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 16))(a1, a2, v60);
      uint64_t FieldStore = type metadata accessor for PgQuery_FieldStore(0);
      *(void *)(a1 + *(int *)(FieldStore + 20)) = *(void *)(a2 + *(int *)(FieldStore + 20));
      swift_retain();
      goto LABEL_324;
    case 0x16u:
      uint64_t v62 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16))(a1, a2, v62);
      uint64_t RelabelType = type metadata accessor for PgQuery_RelabelType(0);
      *(void *)(a1 + *(int *)(RelabelType + 20)) = *(void *)(a2 + *(int *)(RelabelType + 20));
      swift_retain();
      goto LABEL_324;
    case 0x17u:
      uint64_t v64 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16))(a1, a2, v64);
      uint64_t CoerceViaIO = type metadata accessor for PgQuery_CoerceViaIO(0);
      *(void *)(a1 + *(int *)(CoerceViaIO + 20)) = *(void *)(a2 + *(int *)(CoerceViaIO + 20));
      swift_retain();
      goto LABEL_324;
    case 0x18u:
      uint64_t v66 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16))(a1, a2, v66);
      ArrayCoerceuint64_t Expr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
      *(void *)(a1 + *(int *)(ArrayCoerceExpr + 20)) = *(void *)(a2 + *(int *)(ArrayCoerceExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x19u:
      uint64_t v68 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 16))(a1, a2, v68);
      ConvertRowtypeuint64_t Expr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
      *(void *)(a1 + *(int *)(ConvertRowtypeExpr + 20)) = *(void *)(a2 + *(int *)(ConvertRowtypeExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x1Au:
      uint64_t v70 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 16))(a1, a2, v70);
      Collateuint64_t Expr = type metadata accessor for PgQuery_CollateExpr(0);
      *(void *)(a1 + *(int *)(CollateExpr + 20)) = *(void *)(a2 + *(int *)(CollateExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x1Bu:
      uint64_t v72 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 16))(a1, a2, v72);
      Caseuint64_t Expr = type metadata accessor for PgQuery_CaseExpr(0);
      *(void *)(a1 + *(int *)(CaseExpr + 20)) = *(void *)(a2 + *(int *)(CaseExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x1Cu:
      uint64_t v74 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 16))(a1, a2, v74);
      uint64_t CaseWhen = type metadata accessor for PgQuery_CaseWhen(0);
      *(void *)(a1 + *(int *)(CaseWhen + 20)) = *(void *)(a2 + *(int *)(CaseWhen + 20));
      swift_retain();
      goto LABEL_324;
    case 0x1Du:
      uint64_t v76 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 16))(a1, a2, v76);
      CaseTestuint64_t Expr = type metadata accessor for PgQuery_CaseTestExpr(0);
      *(void *)(a1 + *(int *)(CaseTestExpr + 20)) = *(void *)(a2 + *(int *)(CaseTestExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x1Eu:
      uint64_t v78 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 16))(a1, a2, v78);
      Arrayuint64_t Expr = type metadata accessor for PgQuery_ArrayExpr(0);
      *(void *)(a1 + *(int *)(ArrayExpr + 20)) = *(void *)(a2 + *(int *)(ArrayExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x1Fu:
      uint64_t v80 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 16))(a1, a2, v80);
      Rowuint64_t Expr = type metadata accessor for PgQuery_RowExpr(0);
      *(void *)(a1 + *(int *)(RowExpr + 20)) = *(void *)(a2 + *(int *)(RowExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x20u:
      uint64_t v82 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 16))(a1, a2, v82);
      RowCompareuint64_t Expr = type metadata accessor for PgQuery_RowCompareExpr(0);
      *(void *)(a1 + *(int *)(RowCompareExpr + 20)) = *(void *)(a2 + *(int *)(RowCompareExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x21u:
      uint64_t v84 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 16))(a1, a2, v84);
      Coalesceuint64_t Expr = type metadata accessor for PgQuery_CoalesceExpr(0);
      *(void *)(a1 + *(int *)(CoalesceExpr + 20)) = *(void *)(a2 + *(int *)(CoalesceExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x22u:
      uint64_t v86 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 16))(a1, a2, v86);
      MinMaxuint64_t Expr = type metadata accessor for PgQuery_MinMaxExpr(0);
      *(void *)(a1 + *(int *)(MinMaxExpr + 20)) = *(void *)(a2 + *(int *)(MinMaxExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x23u:
      uint64_t v88 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 16))(a1, a2, v88);
      uint64_t SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
      *(void *)(a1 + *(int *)(SQLValueFunction + 20)) = *(void *)(a2 + *(int *)(SQLValueFunction + 20));
      swift_retain();
      goto LABEL_324;
    case 0x24u:
      uint64_t v90 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 16))(a1, a2, v90);
      Xmluint64_t Expr = type metadata accessor for PgQuery_XmlExpr(0);
      *(void *)(a1 + *(int *)(XmlExpr + 20)) = *(void *)(a2 + *(int *)(XmlExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x25u:
      uint64_t v92 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 16))(a1, a2, v92);
      uint64_t NullTest = type metadata accessor for PgQuery_NullTest(0);
      *(void *)(a1 + *(int *)(NullTest + 20)) = *(void *)(a2 + *(int *)(NullTest + 20));
      swift_retain();
      goto LABEL_324;
    case 0x26u:
      uint64_t v94 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v94 - 8) + 16))(a1, a2, v94);
      uint64_t BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
      *(void *)(a1 + *(int *)(BooleanTest + 20)) = *(void *)(a2 + *(int *)(BooleanTest + 20));
      swift_retain();
      goto LABEL_324;
    case 0x27u:
      uint64_t v96 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 16))(a1, a2, v96);
      uint64_t CoerceToDomain = type metadata accessor for PgQuery_CoerceToDomain(0);
      *(void *)(a1 + *(int *)(CoerceToDomain + 20)) = *(void *)(a2 + *(int *)(CoerceToDomain + 20));
      swift_retain();
      goto LABEL_324;
    case 0x28u:
      uint64_t v98 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 16))(a1, a2, v98);
      uint64_t CoerceToDomainValue = type metadata accessor for PgQuery_CoerceToDomainValue(0);
      *(void *)(a1 + *(int *)(CoerceToDomainValue + 20)) = *(void *)(a2 + *(int *)(CoerceToDomainValue + 20));
      swift_retain();
      goto LABEL_324;
    case 0x29u:
      uint64_t v100 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 16))(a1, a2, v100);
      uint64_t SetToDefault = type metadata accessor for PgQuery_SetToDefault(0);
      *(void *)(a1 + *(int *)(SetToDefault + 20)) = *(void *)(a2 + *(int *)(SetToDefault + 20));
      swift_retain();
      goto LABEL_324;
    case 0x2Au:
      uint64_t v102 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 16))(a1, a2, v102);
      CurrentOfuint64_t Expr = type metadata accessor for PgQuery_CurrentOfExpr(0);
      *(void *)(a1 + *(int *)(CurrentOfExpr + 20)) = *(void *)(a2 + *(int *)(CurrentOfExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x2Bu:
      uint64_t v104 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 16))(a1, a2, v104);
      NextValueuint64_t Expr = type metadata accessor for PgQuery_NextValueExpr(0);
      *(void *)(a1 + *(int *)(NextValueExpr + 20)) = *(void *)(a2 + *(int *)(NextValueExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x2Cu:
      uint64_t v106 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 16))(a1, a2, v106);
      uint64_t InferenceElem = type metadata accessor for PgQuery_InferenceElem(0);
      *(void *)(a1 + *(int *)(InferenceElem + 20)) = *(void *)(a2 + *(int *)(InferenceElem + 20));
      swift_retain();
      goto LABEL_324;
    case 0x2Du:
      uint64_t v108 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 16))(a1, a2, v108);
      uint64_t TargetEntry = type metadata accessor for PgQuery_TargetEntry(0);
      *(void *)(a1 + *(int *)(TargetEntry + 20)) = *(void *)(a2 + *(int *)(TargetEntry + 20));
      swift_retain();
      goto LABEL_324;
    case 0x2Eu:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      uint64_t v110 = *(int *)(type metadata accessor for PgQuery_RangeTblRef(0) + 20);
      uint64_t v111 = a1 + v110;
      uint64_t v112 = a2 + v110;
      uint64_t v113 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v113 - 8) + 16))(v111, v112, v113);
      goto LABEL_324;
    case 0x2Fu:
      uint64_t v114 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v114 - 8) + 16))(a1, a2, v114);
      Joinuint64_t Expr = type metadata accessor for PgQuery_JoinExpr(0);
      *(void *)(a1 + *(int *)(JoinExpr + 20)) = *(void *)(a2 + *(int *)(JoinExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0x30u:
      uint64_t v116 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 16))(a1, a2, v116);
      uint64_t v117 = type metadata accessor for PgQuery_FromExpr(0);
      *(void *)(a1 + *(int *)(v117 + 20)) = *(void *)(a2 + *(int *)(v117 + 20));
      swift_retain();
      goto LABEL_324;
    case 0x31u:
      uint64_t v118 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v118 - 8) + 16))(a1, a2, v118);
      uint64_t v119 = type metadata accessor for PgQuery_OnConflictExpr(0);
      *(void *)(a1 + *(int *)(v119 + 20)) = *(void *)(a2 + *(int *)(v119 + 20));
      swift_retain();
      goto LABEL_324;
    case 0x32u:
      uint64_t v120 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 16))(a1, a2, v120);
      uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
      *(void *)(a1 + *(int *)(IntoClause + 20)) = *(void *)(a2 + *(int *)(IntoClause + 20));
      swift_retain();
      goto LABEL_324;
    case 0x33u:
      uint64_t v122 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v122 - 8) + 16))(a1, a2, v122);
      uint64_t RawStmt = type metadata accessor for PgQuery_RawStmt(0);
      *(void *)(a1 + *(int *)(RawStmt + 20)) = *(void *)(a2 + *(int *)(RawStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x34u:
      uint64_t v124 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v124 - 8) + 16))(a1, a2, v124);
      uint64_t Query = type metadata accessor for PgQuery_Query(0);
      *(void *)(a1 + *(int *)(Query + 20)) = *(void *)(a2 + *(int *)(Query + 20));
      swift_retain();
      goto LABEL_324;
    case 0x35u:
      uint64_t v126 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v126 - 8) + 16))(a1, a2, v126);
      uint64_t InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
      *(void *)(a1 + *(int *)(InsertStmt + 20)) = *(void *)(a2 + *(int *)(InsertStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x36u:
      uint64_t v128 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v128 - 8) + 16))(a1, a2, v128);
      uint64_t v129 = type metadata accessor for PgQuery_DeleteStmt(0);
      *(void *)(a1 + *(int *)(v129 + 20)) = *(void *)(a2 + *(int *)(v129 + 20));
      swift_retain();
      goto LABEL_324;
    case 0x37u:
      uint64_t v130 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v130 - 8) + 16))(a1, a2, v130);
      uint64_t UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
      *(void *)(a1 + *(int *)(UpdateStmt + 20)) = *(void *)(a2 + *(int *)(UpdateStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x38u:
      uint64_t v132 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v132 - 8) + 16))(a1, a2, v132);
      uint64_t SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
      *(void *)(a1 + *(int *)(SelectStmt + 20)) = *(void *)(a2 + *(int *)(SelectStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x39u:
      uint64_t v134 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v134;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      uint64_t AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
      uint64_t v136 = *(int *)(AlterTableStmt + 28);
      uint64_t v137 = a1 + v136;
      uint64_t v138 = a2 + v136;
      uint64_t v139 = type metadata accessor for UnknownStorage();
      uint64_t v140 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 16);
      swift_bridgeObjectRetain();
      v140(v137, v138, v139);
      uint64_t v141 = *(int *)(AlterTableStmt + 32);
      uint64_t v142 = a1 + v141;
      uint64_t v143 = a2 + v141;
      uint64_t v144 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v145 = *(void *)(v144 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48))(v143, 1, v144)) {
        goto LABEL_229;
      }
      uint64_t v1221 = v145;
      uint64_t v999 = *(void *)(v143 + 8);
      *(void *)uint64_t v142 = *(void *)v143;
      *(void *)(v142 + 8) = v999;
      uint64_t v1000 = *(void *)(v143 + 24);
      *(void *)(v142 + 16) = *(void *)(v143 + 16);
      *(void *)(v142 + 24) = v1000;
      uint64_t v1001 = *(void *)(v143 + 40);
      *(void *)(v142 + 32) = *(void *)(v143 + 32);
      *(void *)(v142 + 40) = v1001;
      *(unsigned char *)(v142 + 48) = *(unsigned char *)(v143 + 48);
      uint64_t v1002 = v140;
      uint64_t v1003 = *(void *)(v143 + 64);
      *(void *)(v142 + 56) = *(void *)(v143 + 56);
      *(void *)(v142 + 64) = v1003;
      *(_DWORD *)(v142 + 72) = *(_DWORD *)(v143 + 72);
      uint64_t v1004 = *(int *)(v144 + 40);
      uint64_t v1184 = v143 + v1004;
      uint64_t v1200 = v142 + v1004;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v1005 = v1184;
      uint64_t v1185 = v139;
      v1002(v1200, v1005, v139);
      uint64_t v1006 = *(int *)(v144 + 44);
      uint64_t v1007 = (void *)(v142 + v1006);
      uint64_t v1008 = (void *)(v143 + v1006);
      uint64_t v1009 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v1010 = *(void *)(v1009 - 8);
      if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(v1010 + 48))(v1008, 1, v1009)) {
        goto LABEL_322;
      }
      goto LABEL_303;
    case 0x3Au:
      uint64_t v146 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v146 - 8) + 16))(a1, a2, v146);
      uint64_t AlterTableCmd = type metadata accessor for PgQuery_AlterTableCmd(0);
      *(void *)(a1 + *(int *)(AlterTableCmd + 20)) = *(void *)(a2 + *(int *)(AlterTableCmd + 20));
      swift_retain();
      goto LABEL_324;
    case 0x3Bu:
      uint64_t v148 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v148 - 8) + 16))(a1, a2, v148);
      uint64_t AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
      *(void *)(a1 + *(int *)(AlterDomainStmt + 20)) = *(void *)(a2 + *(int *)(AlterDomainStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x3Cu:
      uint64_t v150 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 16))(a1, a2, v150);
      uint64_t SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
      *(void *)(a1 + *(int *)(SetOperationStmt + 20)) = *(void *)(a2 + *(int *)(SetOperationStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x3Du:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v152 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v152;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
      uint64_t v153 = *(int *)(type metadata accessor for PgQuery_GrantStmt(0) + 48);
      uint64_t v154 = a1 + v153;
      uint64_t v155 = a2 + v153;
      uint64_t v156 = type metadata accessor for UnknownStorage();
      uint64_t v157 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v156 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v157(v154, v155, v156);
      goto LABEL_324;
    case 0x3Eu:
      uint64_t v158 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v158;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
      uint64_t v160 = *(int *)(GrantRoleStmt + 36);
      uint64_t v161 = a1 + v160;
      uint64_t v1223 = a2 + v160;
      uint64_t v162 = type metadata accessor for UnknownStorage();
      uint64_t v163 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v162 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v163(v161, v1223, v162);
      uint64_t v164 = *(int *)(GrantRoleStmt + 40);
      uint64_t v165 = (void *)(a1 + v164);
      uint64_t v166 = (void *)(a2 + v164);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v168 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v168 + 48))(v166, 1, RoleSpec)) {
        goto LABEL_159;
      }
      goto LABEL_285;
    case 0x3Fu:
      *(void *)a1 = *(void *)a2;
      uint64_t AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
      uint64_t v170 = *(int *)(AlterDefaultPrivilegesStmt + 20);
      uint64_t v171 = (unsigned char *)(a1 + v170);
      uint64_t v172 = (unsigned char *)(a2 + v170);
      uint64_t v173 = type metadata accessor for UnknownStorage();
      uint64_t v174 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v173 - 8) + 16);
      swift_bridgeObjectRetain();
      uint64_t v1224 = v174;
      v174(v171, v172, v173);
      uint64_t v175 = *(int *)(AlterDefaultPrivilegesStmt + 24);
      uint64_t v176 = (unsigned char *)(a1 + v175);
      uint64_t v177 = (unsigned char *)(a2 + v175);
      uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
      uint64_t v179 = *(void *)(GrantStmt - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v179 + 48))(v177, 1, GrantStmt))
      {
        uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
        memcpy(v176, v177, *(void *)(*(void *)(v180 - 8) + 64));
      }
      else
      {
        *uint64_t v176 = *v177;
        *((void *)v176 + 1) = *((void *)v177 + 1);
        v176[16] = v177[16];
        *((void *)v176 + 3) = *((void *)v177 + 3);
        v176[32] = v177[32];
        uint64_t v1011 = *((void *)v177 + 6);
        *((void *)v176 + 5) = *((void *)v177 + 5);
        *((void *)v176 + 6) = v1011;
        *((void *)v176 + 7) = *((void *)v177 + 7);
        v176[64] = v177[64];
        *((void *)v176 + 9) = *((void *)v177 + 9);
        v176[80] = v177[80];
        uint64_t v1012 = *(int *)(GrantStmt + 48);
        uint64_t v1222 = &v176[v1012];
        uint64_t v1013 = &v177[v1012];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v1224(v1222, v1013, v173);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v179 + 56))(v176, 0, 1, GrantStmt);
      }
      goto LABEL_324;
    case 0x40u:
      uint64_t v181 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v181;
      uint64_t v182 = *(int *)(type metadata accessor for PgQuery_ClosePortalStmt(0) + 20);
      uint64_t v183 = a1 + v182;
      uint64_t v184 = a2 + v182;
      uint64_t v185 = type metadata accessor for UnknownStorage();
      uint64_t v186 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v185 - 8) + 16);
      swift_bridgeObjectRetain();
      v186(v183, v184, v185);
      goto LABEL_324;
    case 0x41u:
      uint64_t v187 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v187;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      uint64_t ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
      uint64_t v189 = *(int *)(ClusterStmt + 24);
      uint64_t v190 = a1 + v189;
      uint64_t v191 = a2 + v189;
      uint64_t v192 = type metadata accessor for UnknownStorage();
      uint64_t v193 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v192 - 8) + 16);
      swift_bridgeObjectRetain();
      v193(v190, v191, v192);
      uint64_t v194 = *(int *)(ClusterStmt + 28);
      uint64_t v142 = a1 + v194;
      uint64_t v143 = a2 + v194;
      uint64_t v144 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v195 = *(void *)(v144 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v195 + 48))(v143, 1, v144)) {
        goto LABEL_229;
      }
      uint64_t v1221 = v195;
      uint64_t v1014 = *(void *)(v143 + 8);
      *(void *)uint64_t v142 = *(void *)v143;
      *(void *)(v142 + 8) = v1014;
      uint64_t v1015 = *(void *)(v143 + 24);
      *(void *)(v142 + 16) = *(void *)(v143 + 16);
      *(void *)(v142 + 24) = v1015;
      uint64_t v1016 = *(void *)(v143 + 40);
      *(void *)(v142 + 32) = *(void *)(v143 + 32);
      *(void *)(v142 + 40) = v1016;
      *(unsigned char *)(v142 + 48) = *(unsigned char *)(v143 + 48);
      uint64_t v1002 = v193;
      uint64_t v1017 = *(void *)(v143 + 64);
      *(void *)(v142 + 56) = *(void *)(v143 + 56);
      *(void *)(v142 + 64) = v1017;
      *(_DWORD *)(v142 + 72) = *(_DWORD *)(v143 + 72);
      uint64_t v1018 = *(int *)(v144 + 40);
      uint64_t v1186 = v143 + v1018;
      uint64_t v1201 = v142 + v1018;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v1019 = v1186;
      uint64_t v1185 = v192;
      v1002(v1201, v1019, v192);
      uint64_t v1020 = *(int *)(v144 + 44);
      uint64_t v1007 = (void *)(v142 + v1020);
      uint64_t v1008 = (void *)(v143 + v1020);
      uint64_t v1009 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v1010 = *(void *)(v1009 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1010 + 48))(v1008, 1, v1009)) {
        goto LABEL_303;
      }
      goto LABEL_322;
    case 0x42u:
      uint64_t v196 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v196 - 8) + 16))(a1, a2, v196);
      uint64_t CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
      *(void *)(a1 + *(int *)(CopyStmt + 20)) = *(void *)(a2 + *(int *)(CopyStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x43u:
      uint64_t v198 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v198 - 8) + 16))(a1, a2, v198);
      uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
      *(void *)(a1 + *(int *)(Stmt + 20)) = *(void *)(a2 + *(int *)(Stmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x44u:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      uint64_t v200 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v200;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
      uint64_t v201 = *(int *)(type metadata accessor for PgQuery_DefineStmt(0) + 44);
      uint64_t v202 = a1 + v201;
      uint64_t v203 = a2 + v201;
      uint64_t v204 = type metadata accessor for UnknownStorage();
      uint64_t v205 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v204 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v205(v202, v203, v204);
      goto LABEL_324;
    case 0x45u:
      uint64_t v206 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v206;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
      uint64_t v207 = *(int *)(type metadata accessor for PgQuery_DropStmt(0) + 36);
      uint64_t v208 = a1 + v207;
      uint64_t v209 = a2 + v207;
      uint64_t v210 = type metadata accessor for UnknownStorage();
      uint64_t v211 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v210 - 8) + 16);
      swift_bridgeObjectRetain();
      v211(v208, v209, v210);
      goto LABEL_324;
    case 0x46u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v212 = *(int *)(type metadata accessor for PgQuery_TruncateStmt(0) + 28);
      uint64_t v213 = a1 + v212;
      uint64_t v214 = a2 + v212;
      uint64_t v215 = type metadata accessor for UnknownStorage();
      uint64_t v216 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v215 - 8) + 16);
      swift_bridgeObjectRetain();
      v216(v213, v214, v215);
      goto LABEL_324;
    case 0x47u:
      uint64_t v217 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v217 - 8) + 16))(a1, a2, v217);
      Commentuint64_t Stmt = type metadata accessor for PgQuery_CommentStmt(0);
      *(void *)(a1 + *(int *)(CommentStmt + 20)) = *(void *)(a2 + *(int *)(CommentStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x48u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      uint64_t v219 = *(int *)(type metadata accessor for PgQuery_FetchStmt(0) + 32);
      uint64_t v220 = a1 + v219;
      uint64_t v221 = a2 + v219;
      uint64_t v222 = type metadata accessor for UnknownStorage();
      uint64_t v223 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v222 - 8) + 16);
      swift_bridgeObjectRetain();
      v223(v220, v221, v222);
      goto LABEL_324;
    case 0x49u:
      uint64_t v224 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v224 - 8) + 16))(a1, a2, v224);
      Indexuint64_t Stmt = type metadata accessor for PgQuery_IndexStmt(0);
      *(void *)(a1 + *(int *)(IndexStmt + 20)) = *(void *)(a2 + *(int *)(IndexStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x4Au:
      *(_WORD *)a1 = *(_WORD *)a2;
      uint64_t v226 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v226;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      Functionuint64_t Stmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
      uint64_t v228 = *(int *)(FunctionStmt + 36);
      uint64_t v1212 = a2 + v228;
      uint64_t v1225 = a1 + v228;
      uint64_t v229 = type metadata accessor for UnknownStorage();
      v230 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v229 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v231 = v1212;
      uint64_t v1213 = v229;
      v230(v1225, v231, v229);
      uint64_t v232 = *(int *)(FunctionStmt + 40);
      uint64_t v233 = a1 + v232;
      uint64_t v234 = a2 + v232;
      uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
      uint64_t v236 = *(void *)(TypeName - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v236 + 48))(v234, 1, TypeName)) {
        goto LABEL_297;
      }
      *(void *)uint64_t v233 = *(void *)v234;
      *(_DWORD *)(v233 + 8) = *(_DWORD *)(v234 + 8);
      *(_WORD *)(v233 + 12) = *(_WORD *)(v234 + 12);
      *(void *)(v233 + 16) = *(void *)(v234 + 16);
      *(_DWORD *)(v233 + 24) = *(_DWORD *)(v234 + 24);
      *(void *)(v233 + 32) = *(void *)(v234 + 32);
      *(_DWORD *)(v233 + 40) = *(_DWORD *)(v234 + 40);
      uint64_t v1021 = *(int *)(TypeName + 48);
      uint64_t v1022 = v233 + v1021;
      uint64_t v1023 = v234 + v1021;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v230(v1022, v1023, v1213);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v236 + 56))(v233, 0, 1, TypeName);
      goto LABEL_324;
    case 0x4Bu:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      AlterFunctionuint64_t Stmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
      uint64_t v238 = *(int *)(AlterFunctionStmt + 24);
      uint64_t v239 = a1 + v238;
      uint64_t v240 = a2 + v238;
      uint64_t v241 = type metadata accessor for UnknownStorage();
      uint64_t v242 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v241 - 8) + 16);
      swift_bridgeObjectRetain();
      v242(v239, v240, v241);
      uint64_t v243 = *(int *)(AlterFunctionStmt + 28);
      uint64_t v244 = (void *)(a1 + v243);
      v245 = (void *)(a2 + v243);
      uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
      uint64_t v247 = *(void *)(ObjectWithArgs - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v247 + 48))(v245, 1, ObjectWithArgs)) {
        goto LABEL_83;
      }
      goto LABEL_266;
    case 0x4Cu:
      *(void *)a1 = *(void *)a2;
      uint64_t v249 = *(int *)(type metadata accessor for PgQuery_DoStmt(0) + 20);
      uint64_t v250 = a1 + v249;
      uint64_t v251 = a2 + v249;
      uint64_t v252 = type metadata accessor for UnknownStorage();
      uint64_t v253 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v252 - 8) + 16);
      swift_bridgeObjectRetain();
      v253(v250, v251, v252);
      goto LABEL_324;
    case 0x4Du:
      uint64_t v254 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v254 - 8) + 16))(a1, a2, v254);
      Renameuint64_t Stmt = type metadata accessor for PgQuery_RenameStmt(0);
      *(void *)(a1 + *(int *)(RenameStmt + 20)) = *(void *)(a2 + *(int *)(RenameStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x4Eu:
      uint64_t v256 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v256 - 8) + 16))(a1, a2, v256);
      Ruleuint64_t Stmt = type metadata accessor for PgQuery_RuleStmt(0);
      *(void *)(a1 + *(int *)(RuleStmt + 20)) = *(void *)(a2 + *(int *)(RuleStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x4Fu:
      uint64_t v258 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v258;
      uint64_t v259 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v259;
      uint64_t v260 = *(int *)(type metadata accessor for PgQuery_NotifyStmt(0) + 24);
      uint64_t v261 = a1 + v260;
      uint64_t v262 = a2 + v260;
      uint64_t v263 = type metadata accessor for UnknownStorage();
      uint64_t v264 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v263 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v264(v261, v262, v263);
      goto LABEL_324;
    case 0x50u:
      uint64_t v265 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v265;
      uint64_t v266 = *(int *)(type metadata accessor for PgQuery_ListenStmt(0) + 20);
      uint64_t v267 = a1 + v266;
      uint64_t v268 = a2 + v266;
      uint64_t v269 = type metadata accessor for UnknownStorage();
      uint64_t v270 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v269 - 8) + 16);
      swift_bridgeObjectRetain();
      v270(v267, v268, v269);
      goto LABEL_324;
    case 0x51u:
      uint64_t v271 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v271;
      uint64_t v272 = *(int *)(type metadata accessor for PgQuery_UnlistenStmt(0) + 20);
      uint64_t v273 = a1 + v272;
      uint64_t v274 = a2 + v272;
      uint64_t v275 = type metadata accessor for UnknownStorage();
      uint64_t v276 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v275 - 8) + 16);
      swift_bridgeObjectRetain();
      v276(v273, v274, v275);
      goto LABEL_324;
    case 0x52u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v277 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v277;
      uint64_t v278 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v278;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v279 = *(int *)(type metadata accessor for PgQuery_TransactionStmt(0) + 36);
      uint64_t v280 = a1 + v279;
      uint64_t v281 = a2 + v279;
      uint64_t v282 = type metadata accessor for UnknownStorage();
      uint64_t v283 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v282 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v283(v280, v281, v282);
      goto LABEL_324;
    case 0x53u:
      uint64_t v284 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v284 - 8) + 16))(a1, a2, v284);
      Viewuint64_t Stmt = type metadata accessor for PgQuery_ViewStmt(0);
      *(void *)(a1 + *(int *)(ViewStmt + 20)) = *(void *)(a2 + *(int *)(ViewStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x54u:
      uint64_t v286 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v286;
      uint64_t v287 = *(int *)(type metadata accessor for PgQuery_LoadStmt(0) + 20);
      uint64_t v288 = a1 + v287;
      uint64_t v289 = a2 + v287;
      uint64_t v290 = type metadata accessor for UnknownStorage();
      uint64_t v291 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v290 - 8) + 16);
      swift_bridgeObjectRetain();
      v291(v288, v289, v290);
      goto LABEL_324;
    case 0x55u:
      uint64_t v292 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v292 - 8) + 16))(a1, a2, v292);
      Domainuint64_t Stmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
      *(void *)(a1 + *(int *)(DomainStmt + 20)) = *(void *)(a2 + *(int *)(DomainStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x56u:
      uint64_t v294 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v294;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v295 = *(int *)(type metadata accessor for PgQuery_CreatedbStmt(0) + 24);
      uint64_t v296 = a1 + v295;
      uint64_t v297 = a2 + v295;
      uint64_t v298 = type metadata accessor for UnknownStorage();
      uint64_t v299 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v298 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v299(v296, v297, v298);
      goto LABEL_324;
    case 0x57u:
      uint64_t v300 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v300;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v301 = *(int *)(type metadata accessor for PgQuery_DropdbStmt(0) + 28);
      uint64_t v302 = a1 + v301;
      uint64_t v303 = a2 + v301;
      uint64_t v304 = type metadata accessor for UnknownStorage();
      uint64_t v305 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v304 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v305(v302, v303, v304);
      goto LABEL_324;
    case 0x58u:
      uint64_t v306 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v306;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      uint64_t v307 = *(int *)(type metadata accessor for PgQuery_VacuumStmt(0) + 28);
      uint64_t v308 = a1 + v307;
      uint64_t v309 = a2 + v307;
      uint64_t v310 = type metadata accessor for UnknownStorage();
      uint64_t v311 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v310 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v311(v308, v309, v310);
      goto LABEL_324;
    case 0x59u:
      uint64_t v312 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v312 - 8) + 16))(a1, a2, v312);
      Explainuint64_t Stmt = type metadata accessor for PgQuery_ExplainStmt(0);
      *(void *)(a1 + *(int *)(ExplainStmt + 20)) = *(void *)(a2 + *(int *)(ExplainStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x5Au:
      uint64_t v314 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v314 - 8) + 16))(a1, a2, v314);
      TableAsuint64_t Stmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
      *(void *)(a1 + *(int *)(TableAsStmt + 20)) = *(void *)(a2 + *(int *)(TableAsStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x5Bu:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
      Sequint64_t Stmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
      uint64_t v317 = *(int *)(SeqStmt + 32);
      uint64_t v318 = a1 + v317;
      uint64_t v319 = a2 + v317;
      uint64_t v320 = type metadata accessor for UnknownStorage();
      uint64_t v321 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v320 - 8) + 16);
      swift_bridgeObjectRetain();
      v321(v318, v319, v320);
      uint64_t v322 = *(int *)(SeqStmt + 36);
      uint64_t v142 = a1 + v322;
      uint64_t v143 = a2 + v322;
      uint64_t v144 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v323 = *(void *)(v144 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v323 + 48))(v143, 1, v144)) {
        goto LABEL_229;
      }
      uint64_t v1221 = v323;
      uint64_t v1027 = *(void *)(v143 + 8);
      *(void *)uint64_t v142 = *(void *)v143;
      *(void *)(v142 + 8) = v1027;
      uint64_t v1028 = *(void *)(v143 + 24);
      *(void *)(v142 + 16) = *(void *)(v143 + 16);
      *(void *)(v142 + 24) = v1028;
      uint64_t v1029 = *(void *)(v143 + 40);
      *(void *)(v142 + 32) = *(void *)(v143 + 32);
      *(void *)(v142 + 40) = v1029;
      *(unsigned char *)(v142 + 48) = *(unsigned char *)(v143 + 48);
      uint64_t v1002 = v321;
      uint64_t v1030 = *(void *)(v143 + 64);
      *(void *)(v142 + 56) = *(void *)(v143 + 56);
      *(void *)(v142 + 64) = v1030;
      *(_DWORD *)(v142 + 72) = *(_DWORD *)(v143 + 72);
      uint64_t v1031 = *(int *)(v144 + 40);
      uint64_t v1187 = v143 + v1031;
      uint64_t v1202 = v142 + v1031;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v1032 = v1187;
      uint64_t v1185 = v320;
      v1002(v1202, v1032, v320);
      uint64_t v1033 = *(int *)(v144 + 44);
      uint64_t v1007 = (void *)(v142 + v1033);
      uint64_t v1008 = (void *)(v143 + v1033);
      uint64_t v1009 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v1010 = *(void *)(v1009 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1010 + 48))(v1008, 1, v1009)) {
        goto LABEL_303;
      }
      goto LABEL_322;
    case 0x5Cu:
      *(void *)a1 = *(void *)a2;
      *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
      AlterSequint64_t Stmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
      uint64_t v325 = *(int *)(AlterSeqStmt + 28);
      uint64_t v326 = a1 + v325;
      uint64_t v327 = a2 + v325;
      uint64_t v328 = type metadata accessor for UnknownStorage();
      uint64_t v329 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v328 - 8) + 16);
      swift_bridgeObjectRetain();
      v329(v326, v327, v328);
      uint64_t v330 = *(int *)(AlterSeqStmt + 32);
      uint64_t v142 = a1 + v330;
      uint64_t v143 = a2 + v330;
      uint64_t v144 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v331 = *(void *)(v144 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v331 + 48))(v143, 1, v144)) {
        goto LABEL_229;
      }
      uint64_t v1221 = v331;
      uint64_t v1034 = *(void *)(v143 + 8);
      *(void *)uint64_t v142 = *(void *)v143;
      *(void *)(v142 + 8) = v1034;
      uint64_t v1035 = *(void *)(v143 + 24);
      *(void *)(v142 + 16) = *(void *)(v143 + 16);
      *(void *)(v142 + 24) = v1035;
      uint64_t v1036 = *(void *)(v143 + 40);
      *(void *)(v142 + 32) = *(void *)(v143 + 32);
      *(void *)(v142 + 40) = v1036;
      *(unsigned char *)(v142 + 48) = *(unsigned char *)(v143 + 48);
      uint64_t v1002 = v329;
      uint64_t v1037 = *(void *)(v143 + 64);
      *(void *)(v142 + 56) = *(void *)(v143 + 56);
      *(void *)(v142 + 64) = v1037;
      *(_DWORD *)(v142 + 72) = *(_DWORD *)(v143 + 72);
      uint64_t v1038 = *(int *)(v144 + 40);
      uint64_t v1188 = v143 + v1038;
      uint64_t v1203 = v142 + v1038;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v1039 = v1188;
      uint64_t v1185 = v328;
      v1002(v1203, v1039, v328);
      uint64_t v1040 = *(int *)(v144 + 44);
      uint64_t v1007 = (void *)(v142 + v1040);
      uint64_t v1008 = (void *)(v143 + v1040);
      uint64_t v1009 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v1010 = *(void *)(v1009 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1010 + 48))(v1008, 1, v1009)) {
        goto LABEL_303;
      }
      goto LABEL_322;
    case 0x5Du:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v332 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v332;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      uint64_t v333 = *(int *)(type metadata accessor for PgQuery_VariableSetStmt(0) + 32);
      uint64_t v334 = a1 + v333;
      uint64_t v335 = a2 + v333;
      uint64_t v336 = type metadata accessor for UnknownStorage();
      uint64_t v337 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v336 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v337(v334, v335, v336);
      goto LABEL_324;
    case 0x5Eu:
      uint64_t v338 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v338;
      uint64_t v339 = *(int *)(type metadata accessor for PgQuery_VariableShowStmt(0) + 20);
      uint64_t v340 = a1 + v339;
      uint64_t v341 = a2 + v339;
      uint64_t v342 = type metadata accessor for UnknownStorage();
      uint64_t v343 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v342 - 8) + 16);
      swift_bridgeObjectRetain();
      v343(v340, v341, v342);
      goto LABEL_324;
    case 0x5Fu:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v344 = *(int *)(type metadata accessor for PgQuery_DiscardStmt(0) + 20);
      uint64_t v345 = a1 + v344;
      uint64_t v346 = a2 + v344;
      uint64_t v347 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v347 - 8) + 16))(v345, v346, v347);
      goto LABEL_324;
    case 0x60u:
      uint64_t v348 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v348 - 8) + 16))(a1, a2, v348);
      Triguint64_t Stmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
      *(void *)(a1 + *(int *)(TrigStmt + 20)) = *(void *)(a2 + *(int *)(TrigStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x61u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v350 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v350;
      uint64_t v351 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v351;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      uint64_t v352 = *(int *)(type metadata accessor for PgQuery_CreatePLangStmt(0) + 40);
      uint64_t v353 = a1 + v352;
      uint64_t v1226 = a2 + v352;
      uint64_t v354 = type metadata accessor for UnknownStorage();
      uint64_t v355 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v354 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v355(v353, v1226, v354);
      goto LABEL_324;
    case 0x62u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v356 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v356;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v357 = *(int *)(type metadata accessor for PgQuery_CreateRoleStmt(0) + 28);
      uint64_t v358 = a1 + v357;
      uint64_t v359 = a2 + v357;
      uint64_t v360 = type metadata accessor for UnknownStorage();
      uint64_t v361 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v360 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v361(v358, v359, v360);
      goto LABEL_324;
    case 0x63u:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      AlterRoleuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
      uint64_t v363 = *(int *)(AlterRoleStmt + 24);
      uint64_t v364 = a1 + v363;
      uint64_t v365 = a2 + v363;
      uint64_t v366 = type metadata accessor for UnknownStorage();
      uint64_t v367 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v366 - 8) + 16);
      swift_bridgeObjectRetain();
      v367(v364, v365, v366);
      uint64_t v368 = *(int *)(AlterRoleStmt + 28);
      uint64_t v369 = (void *)(a1 + v368);
      v370 = (void *)(a2 + v368);
      uint64_t v371 = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v372 = *(void *)(v371 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v372 + 48))(v370, 1, v371)) {
        goto LABEL_161;
      }
      goto LABEL_286;
    case 0x64u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v373 = *(int *)(type metadata accessor for PgQuery_DropRoleStmt(0) + 24);
      uint64_t v374 = a1 + v373;
      uint64_t v375 = a2 + v373;
      uint64_t v376 = type metadata accessor for UnknownStorage();
      uint64_t v377 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v376 - 8) + 16);
      swift_bridgeObjectRetain();
      v377(v374, v375, v376);
      goto LABEL_324;
    case 0x65u:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
      uint64_t v378 = *(int *)(type metadata accessor for PgQuery_LockStmt(0) + 28);
      uint64_t v379 = a1 + v378;
      uint64_t v380 = a2 + v378;
      uint64_t v381 = type metadata accessor for UnknownStorage();
      uint64_t v382 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v381 - 8) + 16);
      swift_bridgeObjectRetain();
      v382(v379, v380, v381);
      goto LABEL_324;
    case 0x66u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v383 = *(int *)(type metadata accessor for PgQuery_ConstraintsSetStmt(0) + 24);
      uint64_t v384 = a1 + v383;
      uint64_t v385 = a2 + v383;
      uint64_t v386 = type metadata accessor for UnknownStorage();
      uint64_t v387 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v386 - 8) + 16);
      swift_bridgeObjectRetain();
      v387(v384, v385, v386);
      goto LABEL_324;
    case 0x67u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v388 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v388;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      *(unsigned char *)(a1 + 36) = *(unsigned char *)(a2 + 36);
      Reindexuint64_t Stmt = type metadata accessor for PgQuery_ReindexStmt(0);
      uint64_t v390 = *(int *)(ReindexStmt + 32);
      uint64_t v391 = a1 + v390;
      uint64_t v392 = a2 + v390;
      uint64_t v393 = type metadata accessor for UnknownStorage();
      uint64_t v394 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v393 - 8) + 16);
      swift_bridgeObjectRetain();
      v394(v391, v392, v393);
      uint64_t v395 = *(int *)(ReindexStmt + 36);
      uint64_t v142 = a1 + v395;
      uint64_t v143 = a2 + v395;
      uint64_t v144 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v396 = *(void *)(v144 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v396 + 48))(v143, 1, v144)) {
        goto LABEL_229;
      }
      uint64_t v1221 = v396;
      uint64_t v1041 = *(void *)(v143 + 8);
      *(void *)uint64_t v142 = *(void *)v143;
      *(void *)(v142 + 8) = v1041;
      uint64_t v1042 = *(void *)(v143 + 24);
      *(void *)(v142 + 16) = *(void *)(v143 + 16);
      *(void *)(v142 + 24) = v1042;
      uint64_t v1043 = *(void *)(v143 + 40);
      *(void *)(v142 + 32) = *(void *)(v143 + 32);
      *(void *)(v142 + 40) = v1043;
      *(unsigned char *)(v142 + 48) = *(unsigned char *)(v143 + 48);
      uint64_t v1002 = v394;
      uint64_t v1044 = *(void *)(v143 + 64);
      *(void *)(v142 + 56) = *(void *)(v143 + 56);
      *(void *)(v142 + 64) = v1044;
      *(_DWORD *)(v142 + 72) = *(_DWORD *)(v143 + 72);
      uint64_t v1045 = *(int *)(v144 + 40);
      uint64_t v1189 = v143 + v1045;
      uint64_t v1204 = v142 + v1045;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v1046 = v1189;
      uint64_t v1185 = v393;
      v1002(v1204, v1046, v393);
      uint64_t v1047 = *(int *)(v144 + 44);
      uint64_t v1007 = (void *)(v142 + v1047);
      uint64_t v1008 = (void *)(v143 + v1047);
      uint64_t v1009 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v1010 = *(void *)(v1009 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1010 + 48))(v1008, 1, v1009)) {
        goto LABEL_303;
      }
      goto LABEL_322;
    case 0x69u:
      uint64_t v397 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v397;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
      uint64_t v399 = *(int *)(SchemaStmt + 28);
      uint64_t v400 = a1 + v399;
      uint64_t v1227 = a2 + v399;
      uint64_t v162 = type metadata accessor for UnknownStorage();
      uint64_t v163 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v162 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v163(v400, v1227, v162);
      uint64_t v401 = *(int *)(SchemaStmt + 32);
      uint64_t v165 = (void *)(a1 + v401);
      uint64_t v166 = (void *)(a2 + v401);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v168 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v168 + 48))(v166, 1, RoleSpec)) {
        goto LABEL_159;
      }
      goto LABEL_285;
    case 0x6Au:
      uint64_t v402 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v402;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v403 = *(int *)(type metadata accessor for PgQuery_AlterDatabaseStmt(0) + 24);
      uint64_t v404 = a1 + v403;
      uint64_t v405 = a2 + v403;
      uint64_t v406 = type metadata accessor for UnknownStorage();
      uint64_t v407 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v406 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v407(v404, v405, v406);
      goto LABEL_324;
    case 0x6Bu:
      uint64_t v408 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v408;
      AlterDatabaseSetuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
      uint64_t v410 = *(int *)(AlterDatabaseSetStmt + 20);
      uint64_t v411 = a1 + v410;
      uint64_t v412 = a2 + v410;
      uint64_t v413 = type metadata accessor for UnknownStorage();
      uint64_t v414 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v413 - 8) + 16);
      swift_bridgeObjectRetain();
      v414(v411, v412, v413);
      uint64_t v415 = *(int *)(AlterDatabaseSetStmt + 24);
      uint64_t v416 = (void *)(a1 + v415);
      v417 = (void *)(a2 + v415);
      VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
      uint64_t v419 = *(void *)(VariableSetStmt - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v419 + 48))(v417, 1, VariableSetStmt)) {
        goto LABEL_120;
      }
      goto LABEL_275;
    case 0x6Cu:
      uint64_t v421 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v421;
      AlterRoleSetuint64_t Stmt = (int *)type metadata accessor for PgQuery_AlterRoleSetStmt(0);
      uint64_t v423 = AlterRoleSetStmt[5];
      uint64_t v424 = a1 + v423;
      uint64_t v425 = a2 + v423;
      uint64_t v426 = type metadata accessor for UnknownStorage();
      uint64_t v427 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v426 - 8) + 16);
      swift_bridgeObjectRetain();
      uint64_t v1228 = v426;
      v427(v424, v425, v426);
      uint64_t v428 = AlterRoleSetStmt[6];
      uint64_t v429 = (void *)(a1 + v428);
      v430 = (void *)(a2 + v428);
      uint64_t v431 = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v432 = *(void *)(v431 - 8);
      uint64_t v1214 = (void (*)(char *, char *, uint64_t))v427;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v432 + 48))(v430, 1, v431))
      {
        uint64_t v433 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
        memcpy(v429, v430, *(void *)(*(void *)(v433 - 8) + 64));
      }
      else
      {
        *uint64_t v429 = *v430;
        *((unsigned char *)v429 + 8) = *((unsigned char *)v430 + 8);
        uint64_t v1051 = v430[3];
        v429[2] = v430[2];
        v429[3] = v1051;
        *((_DWORD *)v429 + 8) = *((_DWORD *)v430 + 8);
        uint64_t v1052 = *(int *)(v431 + 28);
        uint64_t v1205 = (char *)v429 + v1052;
        v1053 = (char *)v430 + v1052;
        swift_bridgeObjectRetain();
        v427((uint64_t)v1205, (uint64_t)v1053, v1228);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v432 + 56))(v429, 0, 1, v431);
      }
      uint64_t v1054 = AlterRoleSetStmt[7];
      uint64_t v1055 = (void *)(a1 + v1054);
      v1056 = (void *)(a2 + v1054);
      uint64_t v1057 = type metadata accessor for PgQuery_VariableSetStmt(0);
      uint64_t v1058 = *(void *)(v1057 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1058 + 48))(v1056, 1, v1057))
      {
        uint64_t v1059 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        memcpy(v1055, v1056, *(void *)(*(void *)(v1059 - 8) + 64));
      }
      else
      {
        *uint64_t v1055 = *v1056;
        *((unsigned char *)v1055 + 8) = *((unsigned char *)v1056 + 8);
        uint64_t v1134 = v1056[3];
        v1055[2] = v1056[2];
        v1055[3] = v1134;
        v1055[4] = v1056[4];
        *((unsigned char *)v1055 + 40) = *((unsigned char *)v1056 + 40);
        uint64_t v1135 = *(int *)(v1057 + 32);
        uint64_t v1136 = (char *)v1055 + v1135;
        uint64_t v1137 = (char *)v1056 + v1135;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v1214(v1136, v1137, v1228);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1058 + 56))(v1055, 0, 1, v1057);
      }
      goto LABEL_324;
    case 0x6Du:
      uint64_t v434 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v434;
      uint64_t v435 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v435;
      uint64_t v436 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v436;
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      uint64_t v437 = *(int *)(type metadata accessor for PgQuery_CreateConversionStmt(0) + 36);
      uint64_t v438 = a1 + v437;
      uint64_t v1229 = a2 + v437;
      uint64_t v439 = type metadata accessor for UnknownStorage();
      uint64_t v440 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v439 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v440(v438, v1229, v439);
      goto LABEL_324;
    case 0x6Eu:
      uint64_t v441 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v441 - 8) + 16))(a1, a2, v441);
      Castuint64_t Stmt = type metadata accessor for PgQuery_CreateCastStmt(0);
      *(void *)(a1 + *(int *)(CastStmt + 20)) = *(void *)(a2 + *(int *)(CastStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x6Fu:
      uint64_t v443 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v443;
      uint64_t v444 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v444;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      OpClassuint64_t Stmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
      uint64_t v446 = *(int *)(OpClassStmt + 36);
      uint64_t v1198 = a2 + v446;
      uint64_t v1215 = a1 + v446;
      uint64_t v447 = type metadata accessor for UnknownStorage();
      v448 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v447 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v448(v1215, v1198, v447);
      uint64_t v449 = *(int *)(OpClassStmt + 40);
      uint64_t v233 = a1 + v449;
      uint64_t v234 = a2 + v449;
      uint64_t v450 = type metadata accessor for PgQuery_TypeName(0);
      uint64_t v451 = *(void *)(v450 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v451 + 48))(v234, 1, v450)) {
        goto LABEL_297;
      }
      *(void *)uint64_t v233 = *(void *)v234;
      *(_DWORD *)(v233 + 8) = *(_DWORD *)(v234 + 8);
      *(_WORD *)(v233 + 12) = *(_WORD *)(v234 + 12);
      *(void *)(v233 + 16) = *(void *)(v234 + 16);
      *(_DWORD *)(v233 + 24) = *(_DWORD *)(v234 + 24);
      *(void *)(v233 + 32) = *(void *)(v234 + 32);
      *(_DWORD *)(v233 + 40) = *(_DWORD *)(v234 + 40);
      uint64_t v1060 = *(int *)(v450 + 48);
      uint64_t v1061 = v233 + v1060;
      uint64_t v1062 = v234 + v1060;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v448(v1061, v1062, v447);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v451 + 56))(v233, 0, 1, v450);
      goto LABEL_324;
    case 0x70u:
      uint64_t v452 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v452;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v453 = *(int *)(type metadata accessor for PgQuery_CreateOpFamilyStmt(0) + 24);
      uint64_t v454 = a1 + v453;
      uint64_t v455 = a2 + v453;
      uint64_t v456 = type metadata accessor for UnknownStorage();
      uint64_t v457 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v456 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v457(v454, v455, v456);
      goto LABEL_324;
    case 0x71u:
      uint64_t v458 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v458;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v459 = *(int *)(type metadata accessor for PgQuery_AlterOpFamilyStmt(0) + 32);
      uint64_t v460 = a1 + v459;
      uint64_t v461 = a2 + v459;
      uint64_t v462 = type metadata accessor for UnknownStorage();
      uint64_t v463 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v462 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v463(v460, v461, v462);
      goto LABEL_324;
    case 0x72u:
      uint64_t v464 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v464 - 8) + 16))(a1, a2, v464);
      Prepareuint64_t Stmt = type metadata accessor for PgQuery_PrepareStmt(0);
      *(void *)(a1 + *(int *)(PrepareStmt + 20)) = *(void *)(a2 + *(int *)(PrepareStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x73u:
      uint64_t v466 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v466;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v467 = *(int *)(type metadata accessor for PgQuery_ExecuteStmt(0) + 24);
      uint64_t v468 = a1 + v467;
      uint64_t v469 = a2 + v467;
      uint64_t v470 = type metadata accessor for UnknownStorage();
      uint64_t v471 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v470 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v471(v468, v469, v470);
      goto LABEL_324;
    case 0x74u:
      uint64_t v472 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v472;
      uint64_t v473 = *(int *)(type metadata accessor for PgQuery_DeallocateStmt(0) + 20);
      uint64_t v474 = a1 + v473;
      uint64_t v475 = a2 + v473;
      uint64_t v476 = type metadata accessor for UnknownStorage();
      uint64_t v477 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v476 - 8) + 16);
      swift_bridgeObjectRetain();
      v477(v474, v475, v476);
      goto LABEL_324;
    case 0x75u:
      uint64_t v478 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v478 - 8) + 16))(a1, a2, v478);
      DeclareCursoruint64_t Stmt = type metadata accessor for PgQuery_DeclareCursorStmt(0);
      *(void *)(a1 + *(int *)(DeclareCursorStmt + 20)) = *(void *)(a2 + *(int *)(DeclareCursorStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x76u:
      uint64_t v480 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v480;
      uint64_t v481 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v481;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      TableSpaceuint64_t Stmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
      uint64_t v483 = *(int *)(TableSpaceStmt + 28);
      uint64_t v1216 = a2 + v483;
      uint64_t v1230 = a1 + v483;
      uint64_t v162 = type metadata accessor for UnknownStorage();
      uint64_t v163 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v162 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v163(v1230, v1216, v162);
      uint64_t v484 = *(int *)(TableSpaceStmt + 32);
      uint64_t v165 = (void *)(a1 + v484);
      uint64_t v166 = (void *)(a2 + v484);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v168 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v168 + 48))(v166, 1, RoleSpec)) {
        goto LABEL_159;
      }
      goto LABEL_285;
    case 0x77u:
      uint64_t v485 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v485;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      uint64_t v486 = *(int *)(type metadata accessor for PgQuery_DropTableSpaceStmt(0) + 24);
      uint64_t v487 = a1 + v486;
      uint64_t v488 = a2 + v486;
      uint64_t v489 = type metadata accessor for UnknownStorage();
      uint64_t v490 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v489 - 8) + 16);
      swift_bridgeObjectRetain();
      v490(v487, v488, v489);
      goto LABEL_324;
    case 0x78u:
      uint64_t v491 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v491 - 8) + 16))(a1, a2, v491);
      AlterObjectDependsuint64_t Stmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
      *(void *)(a1 + *(int *)(AlterObjectDependsStmt + 20)) = *(void *)(a2 + *(int *)(AlterObjectDependsStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x79u:
      uint64_t v493 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v493 - 8) + 16))(a1, a2, v493);
      AlterObjectSchemauint64_t Stmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
      *(void *)(a1 + *(int *)(AlterObjectSchemaStmt + 20)) = *(void *)(a2 + *(int *)(AlterObjectSchemaStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x7Au:
      uint64_t v495 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v495 - 8) + 16))(a1, a2, v495);
      AlterOwneruint64_t Stmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
      *(void *)(a1 + *(int *)(AlterOwnerStmt + 20)) = *(void *)(a2 + *(int *)(AlterOwnerStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x7Bu:
      *(void *)a1 = *(void *)a2;
      AlterOperatoruint64_t Stmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
      uint64_t v498 = *(int *)(AlterOperatorStmt + 20);
      uint64_t v499 = a1 + v498;
      uint64_t v500 = a2 + v498;
      uint64_t v241 = type metadata accessor for UnknownStorage();
      uint64_t v242 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v241 - 8) + 16);
      swift_bridgeObjectRetain();
      v242(v499, v500, v241);
      uint64_t v501 = *(int *)(AlterOperatorStmt + 24);
      uint64_t v244 = (void *)(a1 + v501);
      v245 = (void *)(a2 + v501);
      uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
      uint64_t v247 = *(void *)(ObjectWithArgs - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v247 + 48))(v245, 1, ObjectWithArgs))
      {
LABEL_83:
        uint64_t v248 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        memcpy(v244, v245, *(void *)(*(void *)(v248 - 8) + 64));
      }
      else
      {
LABEL_266:
        uint64_t v1024 = v245[1];
        *uint64_t v244 = *v245;
        v244[1] = v1024;
        *((unsigned char *)v244 + 16) = *((unsigned char *)v245 + 16);
        uint64_t v1025 = *(int *)(ObjectWithArgs + 28);
        uint64_t v1245 = (char *)v244 + v1025;
        uint64_t v1026 = (char *)v245 + v1025;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v242((uint64_t)v1245, (uint64_t)v1026, v241);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v247 + 56))(v244, 0, 1, ObjectWithArgs);
      }
      goto LABEL_324;
    case 0x7Cu:
      uint64_t v502 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v502;
      uint64_t v503 = *(int *)(type metadata accessor for PgQuery_AlterTypeStmt(0) + 24);
      uint64_t v504 = a1 + v503;
      uint64_t v505 = a2 + v503;
      uint64_t v506 = type metadata accessor for UnknownStorage();
      uint64_t v507 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v506 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v507(v504, v505, v506);
      goto LABEL_324;
    case 0x7Du:
      uint64_t v508 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v508;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      uint64_t v509 = *(int *)(type metadata accessor for PgQuery_DropOwnedStmt(0) + 24);
      uint64_t v510 = a1 + v509;
      uint64_t v511 = a2 + v509;
      uint64_t v512 = type metadata accessor for UnknownStorage();
      uint64_t v513 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v512 - 8) + 16);
      swift_bridgeObjectRetain();
      v513(v510, v511, v512);
      goto LABEL_324;
    case 0x7Eu:
      *(void *)a1 = *(void *)a2;
      ReassignOwneduint64_t Stmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
      uint64_t v515 = *(int *)(ReassignOwnedStmt + 20);
      uint64_t v516 = a1 + v515;
      uint64_t v517 = a2 + v515;
      uint64_t v366 = type metadata accessor for UnknownStorage();
      uint64_t v367 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v366 - 8) + 16);
      swift_bridgeObjectRetain();
      v367(v516, v517, v366);
      uint64_t v518 = *(int *)(ReassignOwnedStmt + 24);
      uint64_t v369 = (void *)(a1 + v518);
      v370 = (void *)(a2 + v518);
      uint64_t v371 = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v372 = *(void *)(v371 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v372 + 48))(v370, 1, v371)) {
        goto LABEL_161;
      }
      goto LABEL_286;
    case 0x7Fu:
      *(void *)a1 = *(void *)a2;
      CompositeTypeuint64_t Stmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
      uint64_t v520 = *(int *)(CompositeTypeStmt + 20);
      uint64_t v521 = a1 + v520;
      uint64_t v522 = a2 + v520;
      uint64_t v523 = type metadata accessor for UnknownStorage();
      uint64_t v524 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v523 - 8) + 16);
      swift_bridgeObjectRetain();
      v524(v521, v522, v523);
      uint64_t v525 = *(int *)(CompositeTypeStmt + 24);
      uint64_t v142 = a1 + v525;
      uint64_t v143 = a2 + v525;
      uint64_t v144 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v526 = *(void *)(v144 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v526 + 48))(v143, 1, v144)) {
        goto LABEL_229;
      }
      uint64_t v1221 = v526;
      uint64_t v1063 = *(void *)(v143 + 8);
      *(void *)uint64_t v142 = *(void *)v143;
      *(void *)(v142 + 8) = v1063;
      uint64_t v1064 = *(void *)(v143 + 24);
      *(void *)(v142 + 16) = *(void *)(v143 + 16);
      *(void *)(v142 + 24) = v1064;
      uint64_t v1065 = *(void *)(v143 + 40);
      *(void *)(v142 + 32) = *(void *)(v143 + 32);
      *(void *)(v142 + 40) = v1065;
      *(unsigned char *)(v142 + 48) = *(unsigned char *)(v143 + 48);
      uint64_t v1002 = v524;
      uint64_t v1066 = *(void *)(v143 + 64);
      *(void *)(v142 + 56) = *(void *)(v143 + 56);
      *(void *)(v142 + 64) = v1066;
      *(_DWORD *)(v142 + 72) = *(_DWORD *)(v143 + 72);
      uint64_t v1067 = *(int *)(v144 + 40);
      uint64_t v1190 = v143 + v1067;
      uint64_t v1206 = v142 + v1067;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v1068 = v1190;
      uint64_t v1185 = v523;
      v1002(v1206, v1068, v523);
      uint64_t v1069 = *(int *)(v144 + 44);
      uint64_t v1007 = (void *)(v142 + v1069);
      uint64_t v1008 = (void *)(v143 + v1069);
      uint64_t v1009 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v1010 = *(void *)(v1009 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1010 + 48))(v1008, 1, v1009)) {
        goto LABEL_303;
      }
      goto LABEL_322;
    case 0x80u:
      uint64_t v527 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v527;
      uint64_t v528 = *(int *)(type metadata accessor for PgQuery_CreateEnumStmt(0) + 24);
      uint64_t v529 = a1 + v528;
      uint64_t v530 = a2 + v528;
      uint64_t v531 = type metadata accessor for UnknownStorage();
      uint64_t v532 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v531 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v532(v529, v530, v531);
      goto LABEL_324;
    case 0x81u:
      uint64_t v533 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v533;
      uint64_t v534 = *(int *)(type metadata accessor for PgQuery_CreateRangeStmt(0) + 24);
      uint64_t v535 = a1 + v534;
      uint64_t v536 = a2 + v534;
      uint64_t v537 = type metadata accessor for UnknownStorage();
      uint64_t v538 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v537 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v538(v535, v536, v537);
      goto LABEL_324;
    case 0x82u:
      uint64_t v539 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v539;
      uint64_t v540 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v540;
      uint64_t v541 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v541;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
      uint64_t v542 = *(int *)(type metadata accessor for PgQuery_AlterEnumStmt(0) + 40);
      uint64_t v543 = a1 + v542;
      uint64_t v1231 = a2 + v542;
      uint64_t v544 = type metadata accessor for UnknownStorage();
      uint64_t v545 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v544 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v545(v543, v1231, v544);
      goto LABEL_324;
    case 0x83u:
      uint64_t v546 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v546;
      uint64_t v547 = *(int *)(type metadata accessor for PgQuery_AlterTSDictionaryStmt(0) + 24);
      uint64_t v548 = a1 + v547;
      uint64_t v549 = a2 + v547;
      uint64_t v550 = type metadata accessor for UnknownStorage();
      uint64_t v551 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v550 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v551(v548, v549, v550);
      goto LABEL_324;
    case 0x84u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v552 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v552;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
      uint64_t v553 = *(int *)(type metadata accessor for PgQuery_AlterTSConfigurationStmt(0) + 44);
      uint64_t v554 = a1 + v553;
      uint64_t v555 = a2 + v553;
      uint64_t v556 = type metadata accessor for UnknownStorage();
      uint64_t v557 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v556 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v557(v554, v555, v556);
      goto LABEL_324;
    case 0x85u:
      uint64_t v558 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v558;
      uint64_t v559 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v559;
      uint64_t v560 = *(int *)(type metadata accessor for PgQuery_CreateFdwStmt(0) + 28);
      uint64_t v561 = a1 + v560;
      uint64_t v562 = a2 + v560;
      uint64_t v563 = type metadata accessor for UnknownStorage();
      uint64_t v564 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v563 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v564(v561, v562, v563);
      goto LABEL_324;
    case 0x86u:
      uint64_t v565 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v565;
      uint64_t v566 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v566;
      uint64_t v567 = *(int *)(type metadata accessor for PgQuery_AlterFdwStmt(0) + 28);
      uint64_t v568 = a1 + v567;
      uint64_t v569 = a2 + v567;
      uint64_t v570 = type metadata accessor for UnknownStorage();
      uint64_t v571 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v570 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v571(v568, v569, v570);
      goto LABEL_324;
    case 0x87u:
      uint64_t v572 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v572;
      uint64_t v573 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v573;
      uint64_t v574 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v574;
      uint64_t v575 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v575;
      *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      uint64_t v576 = *(int *)(type metadata accessor for PgQuery_CreateForeignServerStmt(0) + 40);
      uint64_t v1217 = a2 + v576;
      uint64_t v1232 = a1 + v576;
      uint64_t v577 = type metadata accessor for UnknownStorage();
      uint64_t v578 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v577 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v578(v1232, v1217, v577);
      goto LABEL_324;
    case 0x88u:
      uint64_t v579 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v579;
      uint64_t v580 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v580;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      uint64_t v581 = *(int *)(type metadata accessor for PgQuery_AlterForeignServerStmt(0) + 32);
      uint64_t v582 = a1 + v581;
      uint64_t v583 = a2 + v581;
      uint64_t v584 = type metadata accessor for UnknownStorage();
      uint64_t v585 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v584 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v585(v582, v583, v584);
      goto LABEL_324;
    case 0x89u:
      uint64_t v586 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v586;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      UserMappinguint64_t Stmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
      uint64_t v588 = *(int *)(UserMappingStmt + 28);
      uint64_t v589 = a1 + v588;
      uint64_t v1233 = a2 + v588;
      uint64_t v162 = type metadata accessor for UnknownStorage();
      uint64_t v163 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v162 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v163(v589, v1233, v162);
      uint64_t v590 = *(int *)(UserMappingStmt + 32);
      uint64_t v165 = (void *)(a1 + v590);
      uint64_t v166 = (void *)(a2 + v590);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v168 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v168 + 48))(v166, 1, RoleSpec)) {
        goto LABEL_159;
      }
      goto LABEL_285;
    case 0x8Au:
      uint64_t v591 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v591;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      AlterUserMappinguint64_t Stmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
      uint64_t v593 = *(int *)(AlterUserMappingStmt + 24);
      uint64_t v594 = a1 + v593;
      uint64_t v1234 = a2 + v593;
      uint64_t v162 = type metadata accessor for UnknownStorage();
      uint64_t v163 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v162 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v163(v594, v1234, v162);
      uint64_t v595 = *(int *)(AlterUserMappingStmt + 28);
      uint64_t v165 = (void *)(a1 + v595);
      uint64_t v166 = (void *)(a2 + v595);
      uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v168 = *(void *)(RoleSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v168 + 48))(v166, 1, RoleSpec))
      {
LABEL_159:
        uint64_t v596 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
        memcpy(v165, v166, *(void *)(*(void *)(v596 - 8) + 64));
      }
      else
      {
LABEL_285:
        *uint64_t v165 = *v166;
        *((unsigned char *)v165 + 8) = *((unsigned char *)v166 + 8);
        uint64_t v1070 = v166[3];
        v165[2] = v166[2];
        v165[3] = v1070;
        *((_DWORD *)v165 + 8) = *((_DWORD *)v166 + 8);
        uint64_t v1071 = *(int *)(RoleSpec + 28);
        uint64_t v1072 = (char *)v165 + v1071;
        uint64_t v1073 = (char *)v166 + v1071;
        swift_bridgeObjectRetain();
        v163((uint64_t)v1072, (uint64_t)v1073, v162);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v168 + 56))(v165, 0, 1, RoleSpec);
      }
      goto LABEL_324;
    case 0x8Bu:
      uint64_t v597 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v597;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      DropUserMappinguint64_t Stmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
      uint64_t v599 = *(int *)(DropUserMappingStmt + 24);
      uint64_t v600 = a1 + v599;
      uint64_t v601 = a2 + v599;
      uint64_t v366 = type metadata accessor for UnknownStorage();
      uint64_t v367 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v366 - 8) + 16);
      swift_bridgeObjectRetain();
      v367(v600, v601, v366);
      uint64_t v602 = *(int *)(DropUserMappingStmt + 28);
      uint64_t v369 = (void *)(a1 + v602);
      v370 = (void *)(a2 + v602);
      uint64_t v371 = type metadata accessor for PgQuery_RoleSpec(0);
      uint64_t v372 = *(void *)(v371 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v372 + 48))(v370, 1, v371))
      {
LABEL_161:
        uint64_t v603 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
        memcpy(v369, v370, *(void *)(*(void *)(v603 - 8) + 64));
      }
      else
      {
LABEL_286:
        *uint64_t v369 = *v370;
        *((unsigned char *)v369 + 8) = *((unsigned char *)v370 + 8);
        uint64_t v1074 = v370[3];
        v369[2] = v370[2];
        v369[3] = v1074;
        *((_DWORD *)v369 + 8) = *((_DWORD *)v370 + 8);
        uint64_t v1075 = *(int *)(v371 + 28);
        v1076 = (char *)v369 + v1075;
        uint64_t v1077 = (char *)v370 + v1075;
        swift_bridgeObjectRetain();
        v367((uint64_t)v1076, (uint64_t)v1077, v366);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v372 + 56))(v369, 0, 1, v371);
      }
      goto LABEL_324;
    case 0x8Cu:
      uint64_t v604 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v604;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v605 = *(int *)(type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0) + 28);
      uint64_t v606 = a1 + v605;
      uint64_t v607 = a2 + v605;
      uint64_t v608 = type metadata accessor for UnknownStorage();
      uint64_t v609 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v608 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v609(v606, v607, v608);
      goto LABEL_324;
    case 0x8Du:
      uint64_t v610 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v610;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      uint64_t v611 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v611;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v612 = *(int *)(type metadata accessor for PgQuery_AlterTableMoveAllStmt(0) + 36);
      uint64_t v613 = a1 + v612;
      uint64_t v614 = a2 + v612;
      uint64_t v615 = type metadata accessor for UnknownStorage();
      uint64_t v616 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v615 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v616(v613, v614, v615);
      goto LABEL_324;
    case 0x8Eu:
      uint64_t v617 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v617 - 8) + 16))(a1, a2, v617);
      SecLabeluint64_t Stmt = type metadata accessor for PgQuery_SecLabelStmt(0);
      *(void *)(a1 + *(int *)(SecLabelStmt + 20)) = *(void *)(a2 + *(int *)(SecLabelStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x8Fu:
      uint64_t v619 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v619;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      ForeignTableuint64_t Stmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
      uint64_t v621 = *(int *)(ForeignTableStmt + 24);
      uint64_t v622 = a1 + v621;
      uint64_t v1235 = a2 + v621;
      uint64_t v623 = type metadata accessor for UnknownStorage();
      uint64_t v624 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v623 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v624(v622, v1235, v623);
      uint64_t v625 = *(int *)(ForeignTableStmt + 28);
      uint64_t v626 = (char *)(a1 + v625);
      v627 = (char *)(a2 + v625);
      uint64_t v628 = type metadata accessor for PgQuery_CreateStmt(0);
      uint64_t v629 = *(void *)(v628 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v629 + 48))(v627, 1, v628))
      {
        uint64_t v630 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
        memcpy(v626, v627, *(void *)(*(void *)(v630 - 8) + 64));
      }
      else
      {
        v624((uint64_t)v626, (uint64_t)v627, v623);
        *(void *)&v626[*(int *)(v628 + 20)] = *(void *)&v627[*(int *)(v628 + 20)];
        uint64_t v1078 = *(void (**)(char *, void, uint64_t, uint64_t))(v629 + 56);
        swift_retain();
        v1078(v626, 0, 1, v628);
      }
      goto LABEL_324;
    case 0x90u:
      uint64_t v631 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v631;
      uint64_t v632 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v632;
      uint64_t v633 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v633;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v634 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v634;
      uint64_t v635 = *(int *)(type metadata accessor for PgQuery_ImportForeignSchemaStmt(0) + 40);
      uint64_t v1218 = a2 + v635;
      uint64_t v1236 = a1 + v635;
      uint64_t v636 = type metadata accessor for UnknownStorage();
      uint64_t v637 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v636 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v637(v1236, v1218, v636);
      goto LABEL_324;
    case 0x91u:
      uint64_t v638 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v638;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      uint64_t v639 = *(int *)(type metadata accessor for PgQuery_CreateExtensionStmt(0) + 28);
      uint64_t v640 = a1 + v639;
      uint64_t v641 = a2 + v639;
      uint64_t v642 = type metadata accessor for UnknownStorage();
      uint64_t v643 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v642 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v643(v640, v641, v642);
      goto LABEL_324;
    case 0x92u:
      uint64_t v644 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v644;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v645 = *(int *)(type metadata accessor for PgQuery_AlterExtensionStmt(0) + 24);
      uint64_t v646 = a1 + v645;
      uint64_t v647 = a2 + v645;
      uint64_t v648 = type metadata accessor for UnknownStorage();
      uint64_t v649 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v648 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v649(v646, v647, v648);
      goto LABEL_324;
    case 0x93u:
      uint64_t v650 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v650 - 8) + 16))(a1, a2, v650);
      AlterExtensionContentsuint64_t Stmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
      *(void *)(a1 + *(int *)(AlterExtensionContentsStmt + 20)) = *(void *)(a2
                                                                              + *(int *)(AlterExtensionContentsStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x94u:
      uint64_t v652 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v652;
      uint64_t v653 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v653;
      uint64_t v654 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v654;
      uint64_t v655 = *(int *)(type metadata accessor for PgQuery_CreateEventTrigStmt(0) + 32);
      uint64_t v656 = a1 + v655;
      uint64_t v1237 = a2 + v655;
      uint64_t v657 = type metadata accessor for UnknownStorage();
      uint64_t v658 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v657 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v658(v656, v1237, v657);
      goto LABEL_324;
    case 0x95u:
      uint64_t v659 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v659;
      uint64_t v660 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v660;
      uint64_t v661 = *(int *)(type metadata accessor for PgQuery_AlterEventTrigStmt(0) + 24);
      uint64_t v662 = a1 + v661;
      uint64_t v663 = a2 + v661;
      uint64_t v664 = type metadata accessor for UnknownStorage();
      uint64_t v665 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v664 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v665(v662, v663, v664);
      goto LABEL_324;
    case 0x96u:
      *(_WORD *)a1 = *(_WORD *)a2;
      RefreshMatViewuint64_t Stmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
      uint64_t v667 = *(int *)(RefreshMatViewStmt + 24);
      uint64_t v668 = a1 + v667;
      uint64_t v669 = a2 + v667;
      uint64_t v670 = type metadata accessor for UnknownStorage();
      uint64_t v671 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v670 - 8) + 16);
      v671(v668, v669, v670);
      uint64_t v672 = *(int *)(RefreshMatViewStmt + 28);
      uint64_t v142 = a1 + v672;
      uint64_t v143 = a2 + v672;
      uint64_t v144 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v673 = *(void *)(v144 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v673 + 48))(v143, 1, v144)) {
        goto LABEL_229;
      }
      uint64_t v1221 = v673;
      uint64_t v1079 = *(void *)(v143 + 8);
      *(void *)uint64_t v142 = *(void *)v143;
      *(void *)(v142 + 8) = v1079;
      uint64_t v1080 = *(void *)(v143 + 24);
      *(void *)(v142 + 16) = *(void *)(v143 + 16);
      *(void *)(v142 + 24) = v1080;
      uint64_t v1081 = *(void *)(v143 + 40);
      *(void *)(v142 + 32) = *(void *)(v143 + 32);
      *(void *)(v142 + 40) = v1081;
      *(unsigned char *)(v142 + 48) = *(unsigned char *)(v143 + 48);
      uint64_t v1082 = *(void *)(v143 + 64);
      *(void *)(v142 + 56) = *(void *)(v143 + 56);
      *(void *)(v142 + 64) = v1082;
      *(_DWORD *)(v142 + 72) = *(_DWORD *)(v143 + 72);
      uint64_t v1083 = *(int *)(v144 + 40);
      uint64_t v1191 = v143 + v1083;
      uint64_t v1207 = v142 + v1083;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v671(v1207, v1191, v670);
      uint64_t v1084 = *(int *)(v144 + 44);
      uint64_t v1007 = (void *)(v142 + v1084);
      uint64_t v1008 = (void *)(v143 + v1084);
      uint64_t v1085 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v1086 = *(void *)(v1085 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1086 + 48))(v1008, 1, v1085)) {
        goto LABEL_303;
      }
      goto LABEL_316;
    case 0x97u:
      uint64_t v674 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v674;
      uint64_t v675 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v675;
      uint64_t v676 = *(int *)(type metadata accessor for PgQuery_ReplicaIdentityStmt(0) + 24);
      uint64_t v677 = a1 + v676;
      uint64_t v678 = a2 + v676;
      uint64_t v679 = type metadata accessor for UnknownStorage();
      uint64_t v680 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v679 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v680(v677, v678, v679);
      goto LABEL_324;
    case 0x98u:
      uint64_t v413 = type metadata accessor for UnknownStorage();
      uint64_t v414 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v413 - 8) + 16);
      v414(a1, a2, v413);
      uint64_t v681 = *(int *)(type metadata accessor for PgQuery_AlterSystemStmt(0) + 20);
      uint64_t v416 = (void *)(a1 + v681);
      v417 = (void *)(a2 + v681);
      VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
      uint64_t v419 = *(void *)(VariableSetStmt - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v419 + 48))(v417, 1, VariableSetStmt))
      {
LABEL_120:
        uint64_t v420 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
        memcpy(v416, v417, *(void *)(*(void *)(v420 - 8) + 64));
      }
      else
      {
LABEL_275:
        *uint64_t v416 = *v417;
        *((unsigned char *)v416 + 8) = *((unsigned char *)v417 + 8);
        uint64_t v1048 = v417[3];
        v416[2] = v417[2];
        v416[3] = v1048;
        v416[4] = v417[4];
        *((unsigned char *)v416 + 40) = *((unsigned char *)v417 + 40);
        uint64_t v1049 = *(int *)(VariableSetStmt + 32);
        uint64_t v1246 = (char *)v416 + v1049;
        uint64_t v1050 = (char *)v417 + v1049;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v414((uint64_t)v1246, (uint64_t)v1050, v413);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v419 + 56))(v416, 0, 1, VariableSetStmt);
      }
      goto LABEL_324;
    case 0x99u:
      uint64_t v682 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v682 - 8) + 16))(a1, a2, v682);
      Policyuint64_t Stmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
      *(void *)(a1 + *(int *)(PolicyStmt + 20)) = *(void *)(a2 + *(int *)(PolicyStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x9Au:
      uint64_t v684 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v684 - 8) + 16))(a1, a2, v684);
      AlterPolicyuint64_t Stmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
      *(void *)(a1 + *(int *)(AlterPolicyStmt + 20)) = *(void *)(a2 + *(int *)(AlterPolicyStmt + 20));
      swift_retain();
      goto LABEL_324;
    case 0x9Bu:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v686 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v686;
      Transformuint64_t Stmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
      uint64_t v688 = *(int *)(TransformStmt + 24);
      uint64_t v689 = a1 + v688;
      uint64_t v690 = a2 + v688;
      uint64_t v691 = type metadata accessor for UnknownStorage();
      uint64_t v692 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v691 - 8) + 16);
      swift_bridgeObjectRetain();
      v692(v689, v690, v691);
      uint64_t v1183 = TransformStmt;
      uint64_t v693 = *(int *)(TransformStmt + 28);
      uint64_t v694 = (void *)(a1 + v693);
      v695 = (void *)(a2 + v693);
      uint64_t v696 = type metadata accessor for PgQuery_TypeName(0);
      uint64_t v697 = *(void *)(v696 - 8);
      uint64_t v1238 = (void (*)(char *, char *, uint64_t))v692;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v697 + 48))(v695, 1, v696))
      {
        uint64_t v698 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
        memcpy(v694, v695, *(void *)(*(void *)(v698 - 8) + 64));
      }
      else
      {
        *uint64_t v694 = *v695;
        *((_DWORD *)v694 + 2) = *((_DWORD *)v695 + 2);
        *((_WORD *)v694 + 6) = *((_WORD *)v695 + 6);
        v694[2] = v695[2];
        *((_DWORD *)v694 + 6) = *((_DWORD *)v695 + 6);
        v694[4] = v695[4];
        *((_DWORD *)v694 + 10) = *((_DWORD *)v695 + 10);
        uint64_t v1087 = *(int *)(v696 + 48);
        v1180 = (char *)v694 + v1087;
        uint64_t v1088 = (char *)v695 + v1087;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v692((uint64_t)v1180, (uint64_t)v1088, v691);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v697 + 56))(v694, 0, 1, v696);
      }
      uint64_t v1089 = *(int *)(v1183 + 32);
      uint64_t v1090 = (void *)(a1 + v1089);
      v1091 = (void *)(a2 + v1089);
      uint64_t v1092 = type metadata accessor for PgQuery_ObjectWithArgs(0);
      uint64_t v1093 = *(void *)(v1092 - 8);
      v1094 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v1093 + 48);
      if (v1094(v1091, 1, v1092))
      {
        uint64_t v1095 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        memcpy(v1090, v1091, *(void *)(*(void *)(v1095 - 8) + 64));
        uint64_t v1096 = v691;
      }
      else
      {
        uint64_t v1182 = v1093;
        uint64_t v1138 = v1091[1];
        *uint64_t v1090 = *v1091;
        v1090[1] = v1138;
        *((unsigned char *)v1090 + 16) = *((unsigned char *)v1091 + 16);
        uint64_t v1139 = *(int *)(v1092 + 28);
        v1178 = (char *)v1090 + v1139;
        v1140 = (char *)v1091 + v1139;
        swift_bridgeObjectRetain();
        uint64_t v1093 = v1182;
        swift_bridgeObjectRetain();
        uint64_t v1141 = v1140;
        uint64_t v1096 = v691;
        v692((uint64_t)v1178, (uint64_t)v1141, v691);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1182 + 56))(v1090, 0, 1, v1092);
      }
      uint64_t v1142 = *(int *)(v1183 + 36);
      v1143 = (void *)(a1 + v1142);
      v1144 = (void *)(a2 + v1142);
      if (v1094(v1144, 1, v1092))
      {
        uint64_t v1145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        memcpy(v1143, v1144, *(void *)(*(void *)(v1145 - 8) + 64));
      }
      else
      {
        uint64_t v1150 = v1093;
        uint64_t v1151 = v1144[1];
        void *v1143 = *v1144;
        v1143[1] = v1151;
        *((unsigned char *)v1143 + 16) = *((unsigned char *)v1144 + 16);
        uint64_t v1152 = *(int *)(v1092 + 28);
        uint64_t v1153 = (char *)v1143 + v1152;
        uint64_t v1154 = (char *)v1144 + v1152;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v1238(v1153, v1154, v1096);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1150 + 56))(v1143, 0, 1, v1092);
      }
      goto LABEL_324;
    case 0x9Cu:
      uint64_t v699 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v699;
      uint64_t v700 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v700;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      uint64_t v701 = *(int *)(type metadata accessor for PgQuery_CreateAmStmt(0) + 28);
      uint64_t v702 = a1 + v701;
      uint64_t v703 = a2 + v701;
      uint64_t v704 = type metadata accessor for UnknownStorage();
      uint64_t v705 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v704 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v705(v702, v703, v704);
      goto LABEL_324;
    case 0x9Du:
      uint64_t v706 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v706;
      uint64_t v707 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v707;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v708 = *(int *)(type metadata accessor for PgQuery_CreatePublicationStmt(0) + 32);
      uint64_t v709 = a1 + v708;
      uint64_t v710 = a2 + v708;
      uint64_t v711 = type metadata accessor for UnknownStorage();
      uint64_t v712 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v711 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v712(v709, v710, v711);
      goto LABEL_324;
    case 0x9Eu:
      uint64_t v713 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v713;
      uint64_t v714 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v714;
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      uint64_t v715 = *(int *)(type metadata accessor for PgQuery_AlterPublicationStmt(0) + 36);
      uint64_t v716 = a1 + v715;
      uint64_t v717 = a2 + v715;
      uint64_t v718 = type metadata accessor for UnknownStorage();
      uint64_t v719 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v718 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v719(v716, v717, v718);
      goto LABEL_324;
    case 0x9Fu:
      uint64_t v720 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v720;
      uint64_t v721 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v721;
      uint64_t v722 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v722;
      uint64_t v723 = *(int *)(type metadata accessor for PgQuery_CreateSubscriptionStmt(0) + 32);
      uint64_t v724 = a1 + v723;
      uint64_t v1239 = a2 + v723;
      uint64_t v725 = type metadata accessor for UnknownStorage();
      uint64_t v726 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v725 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v726(v724, v1239, v725);
      goto LABEL_324;
    case 0xA0u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v727 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v727;
      uint64_t v728 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v728;
      uint64_t v729 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = v729;
      uint64_t v730 = *(int *)(type metadata accessor for PgQuery_AlterSubscriptionStmt(0) + 36);
      uint64_t v731 = a1 + v730;
      uint64_t v1240 = a2 + v730;
      uint64_t v732 = type metadata accessor for UnknownStorage();
      uint64_t v733 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v732 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v733(v731, v1240, v732);
      goto LABEL_324;
    case 0xA1u:
      uint64_t v734 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v734;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v735 = *(int *)(type metadata accessor for PgQuery_DropSubscriptionStmt(0) + 28);
      uint64_t v736 = a1 + v735;
      uint64_t v737 = a2 + v735;
      uint64_t v738 = type metadata accessor for UnknownStorage();
      uint64_t v739 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v738 - 8) + 16);
      swift_bridgeObjectRetain();
      v739(v736, v737, v738);
      goto LABEL_324;
    case 0xA2u:
      uint64_t v740 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v740;
      uint64_t v741 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v741;
      uint64_t v742 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v742;
      *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
      uint64_t v743 = *(int *)(type metadata accessor for PgQuery_CreateStatsStmt(0) + 40);
      uint64_t v1219 = a2 + v743;
      uint64_t v1241 = a1 + v743;
      uint64_t v744 = type metadata accessor for UnknownStorage();
      uint64_t v745 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v744 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v745(v1241, v1219, v744);
      goto LABEL_324;
    case 0xA3u:
      *(void *)a1 = *(void *)a2;
      uint64_t v746 = *(int *)(type metadata accessor for PgQuery_AlterCollationStmt(0) + 20);
      uint64_t v747 = a1 + v746;
      uint64_t v748 = a2 + v746;
      uint64_t v749 = type metadata accessor for UnknownStorage();
      uint64_t v750 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v749 - 8) + 16);
      swift_bridgeObjectRetain();
      v750(v747, v748, v749);
      goto LABEL_324;
    case 0xA4u:
      uint64_t v751 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v751 - 8) + 16))(a1, a2, v751);
      uint64_t v752 = type metadata accessor for PgQuery_CallStmt(0);
      *(void *)(a1 + *(int *)(v752 + 20)) = *(void *)(a2 + *(int *)(v752 + 20));
      swift_retain();
      goto LABEL_324;
    case 0xA5u:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(unsigned char *)(a1 + 12) = *(unsigned char *)(a2 + 12);
      uint64_t v753 = *(int *)(type metadata accessor for PgQuery_AlterStatsStmt(0) + 28);
      uint64_t v754 = a1 + v753;
      uint64_t v755 = a2 + v753;
      uint64_t v756 = type metadata accessor for UnknownStorage();
      uint64_t v757 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v756 - 8) + 16);
      swift_bridgeObjectRetain();
      v757(v754, v755, v756);
      goto LABEL_324;
    case 0xA6u:
      uint64_t v758 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v758 - 8) + 16))(a1, a2, v758);
      A_uint64_t Expr = type metadata accessor for PgQuery_A_Expr(0);
      *(void *)(a1 + *(int *)(A_Expr + 20)) = *(void *)(a2 + *(int *)(A_Expr + 20));
      swift_retain();
      goto LABEL_324;
    case 0xA7u:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v760 = *(int *)(type metadata accessor for PgQuery_ColumnRef(0) + 24);
      uint64_t v761 = a1 + v760;
      uint64_t v762 = a2 + v760;
      uint64_t v763 = type metadata accessor for UnknownStorage();
      uint64_t v764 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v763 - 8) + 16);
      swift_bridgeObjectRetain();
      v764(v761, v762, v763);
      goto LABEL_324;
    case 0xA8u:
      *(void *)a1 = *(void *)a2;
      uint64_t v765 = *(int *)(type metadata accessor for PgQuery_ParamRef(0) + 24);
      uint64_t v766 = a1 + v765;
      uint64_t v767 = a2 + v765;
      uint64_t v768 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v768 - 8) + 16))(v766, v767, v768);
      goto LABEL_324;
    case 0xA9u:
      uint64_t v769 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v769 - 8) + 16))(a1, a2, v769);
      uint64_t A_Const = type metadata accessor for PgQuery_A_Const(0);
      *(void *)(a1 + *(int *)(A_Const + 20)) = *(void *)(a2 + *(int *)(A_Const + 20));
      swift_retain();
      goto LABEL_324;
    case 0xAAu:
      uint64_t v771 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v771 - 8) + 16))(a1, a2, v771);
      uint64_t v772 = type metadata accessor for PgQuery_FuncCall(0);
      *(void *)(a1 + *(int *)(v772 + 20)) = *(void *)(a2 + *(int *)(v772 + 20));
      swift_retain();
      goto LABEL_324;
    case 0xACu:
      uint64_t v773 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v773 - 8) + 16))(a1, a2, v773);
      uint64_t A_Indices = type metadata accessor for PgQuery_A_Indices(0);
      *(void *)(a1 + *(int *)(A_Indices + 20)) = *(void *)(a2 + *(int *)(A_Indices + 20));
      swift_retain();
      goto LABEL_324;
    case 0xADu:
      uint64_t v775 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v775 - 8) + 16))(a1, a2, v775);
      uint64_t A_Indirection = type metadata accessor for PgQuery_A_Indirection(0);
      *(void *)(a1 + *(int *)(A_Indirection + 20)) = *(void *)(a2 + *(int *)(A_Indirection + 20));
      swift_retain();
      goto LABEL_324;
    case 0xAEu:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v777 = *(int *)(type metadata accessor for PgQuery_A_ArrayExpr(0) + 24);
      uint64_t v778 = a1 + v777;
      uint64_t v779 = a2 + v777;
      uint64_t v780 = type metadata accessor for UnknownStorage();
      uint64_t v781 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v780 - 8) + 16);
      swift_bridgeObjectRetain();
      v781(v778, v779, v780);
      goto LABEL_324;
    case 0xAFu:
      uint64_t v782 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v782 - 8) + 16))(a1, a2, v782);
      uint64_t ResTarget = type metadata accessor for PgQuery_ResTarget(0);
      *(void *)(a1 + *(int *)(ResTarget + 20)) = *(void *)(a2 + *(int *)(ResTarget + 20));
      swift_retain();
      goto LABEL_324;
    case 0xB0u:
      uint64_t v784 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v784 - 8) + 16))(a1, a2, v784);
      uint64_t MultiAssignRef = type metadata accessor for PgQuery_MultiAssignRef(0);
      *(void *)(a1 + *(int *)(MultiAssignRef + 20)) = *(void *)(a2 + *(int *)(MultiAssignRef + 20));
      swift_retain();
      goto LABEL_324;
    case 0xB1u:
      uint64_t v786 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v786 - 8) + 16))(a1, a2, v786);
      uint64_t TypeCast = type metadata accessor for PgQuery_TypeCast(0);
      *(void *)(a1 + *(int *)(TypeCast + 20)) = *(void *)(a2 + *(int *)(TypeCast + 20));
      swift_retain();
      goto LABEL_324;
    case 0xB2u:
      uint64_t v788 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v788 - 8) + 16))(a1, a2, v788);
      uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
      *(void *)(a1 + *(int *)(CollateClause + 20)) = *(void *)(a2 + *(int *)(CollateClause + 20));
      swift_retain();
      goto LABEL_324;
    case 0xB3u:
      uint64_t v790 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v790 - 8) + 16))(a1, a2, v790);
      uint64_t SortBy = type metadata accessor for PgQuery_SortBy(0);
      *(void *)(a1 + *(int *)(SortBy + 20)) = *(void *)(a2 + *(int *)(SortBy + 20));
      swift_retain();
      goto LABEL_324;
    case 0xB4u:
      uint64_t v792 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v792 - 8) + 16))(a1, a2, v792);
      uint64_t WindowDef = type metadata accessor for PgQuery_WindowDef(0);
      *(void *)(a1 + *(int *)(WindowDef + 20)) = *(void *)(a2 + *(int *)(WindowDef + 20));
      swift_retain();
      goto LABEL_324;
    case 0xB5u:
      uint64_t v794 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v794 - 8) + 16))(a1, a2, v794);
      uint64_t RangeSubselect = type metadata accessor for PgQuery_RangeSubselect(0);
      *(void *)(a1 + *(int *)(RangeSubselect + 20)) = *(void *)(a2 + *(int *)(RangeSubselect + 20));
      swift_retain();
      goto LABEL_324;
    case 0xB6u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
      uint64_t v796 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v796;
      uint64_t RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
      uint64_t v798 = *(int *)(RangeFunction + 36);
      uint64_t v1242 = a1 + v798;
      uint64_t v799 = a2 + v798;
      uint64_t v800 = type metadata accessor for UnknownStorage();
      uint64_t v801 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v800 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v1220 = v800;
      v801(v1242, v799, v800);
      uint64_t v802 = *(int *)(RangeFunction + 40);
      uint64_t v19 = (void *)(a1 + v802);
      uint64_t v20 = (void *)(a2 + v802);
      uint64_t v803 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v804 = *(void *)(v803 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v804 + 48))(v20, 1, v803))
      {
LABEL_4:
        uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
        memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        uint64_t v1097 = v20[1];
        *uint64_t v19 = *v20;
        v19[1] = v1097;
        v19[2] = v20[2];
        uint64_t v1098 = *(int *)(v803 + 24);
        uint64_t v1099 = (char *)v19 + v1098;
        uint64_t v1100 = (char *)v20 + v1098;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v801((uint64_t)v1099, (uint64_t)v1100, v1220);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v804 + 56))(v19, 0, 1, v803);
      }
      goto LABEL_324;
    case 0xB7u:
      uint64_t v805 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v805 - 8) + 16))(a1, a2, v805);
      uint64_t RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
      *(void *)(a1 + *(int *)(RangeTableSample + 20)) = *(void *)(a2 + *(int *)(RangeTableSample + 20));
      swift_retain();
      goto LABEL_324;
    case 0xB8u:
      uint64_t v807 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v807 - 8) + 16))(a1, a2, v807);
      uint64_t RangeTableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
      *(void *)(a1 + *(int *)(RangeTableFunc + 20)) = *(void *)(a2 + *(int *)(RangeTableFunc + 20));
      swift_retain();
      goto LABEL_324;
    case 0xB9u:
      uint64_t v809 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v809 - 8) + 16))(a1, a2, v809);
      uint64_t RangeTableFuncCol = type metadata accessor for PgQuery_RangeTableFuncCol(0);
      *(void *)(a1 + *(int *)(RangeTableFuncCol + 20)) = *(void *)(a2 + *(int *)(RangeTableFuncCol + 20));
      swift_retain();
      goto LABEL_324;
    case 0xBAu:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      uint64_t v811 = *(int *)(type metadata accessor for PgQuery_TypeName(0) + 48);
      uint64_t v812 = a1 + v811;
      uint64_t v813 = a2 + v811;
      uint64_t v814 = type metadata accessor for UnknownStorage();
      uint64_t v815 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v814 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v815(v812, v813, v814);
      goto LABEL_324;
    case 0xBBu:
      uint64_t v816 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v816 - 8) + 16))(a1, a2, v816);
      uint64_t ColumnDef = type metadata accessor for PgQuery_ColumnDef(0);
      *(void *)(a1 + *(int *)(ColumnDef + 20)) = *(void *)(a2 + *(int *)(ColumnDef + 20));
      swift_retain();
      goto LABEL_324;
    case 0xBCu:
      uint64_t v818 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v818 - 8) + 16))(a1, a2, v818);
      uint64_t IndexElem = type metadata accessor for PgQuery_IndexElem(0);
      *(void *)(a1 + *(int *)(IndexElem + 20)) = *(void *)(a2 + *(int *)(IndexElem + 20));
      swift_retain();
      goto LABEL_324;
    case 0xBDu:
      uint64_t v820 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v820 - 8) + 16))(a1, a2, v820);
      uint64_t Constraint = type metadata accessor for PgQuery_Constraint(0);
      *(void *)(a1 + *(int *)(Constraint + 20)) = *(void *)(a2 + *(int *)(Constraint + 20));
      swift_retain();
      goto LABEL_324;
    case 0xBEu:
      uint64_t v822 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v822 - 8) + 16))(a1, a2, v822);
      uint64_t DefElem = type metadata accessor for PgQuery_DefElem(0);
      *(void *)(a1 + *(int *)(DefElem + 20)) = *(void *)(a2 + *(int *)(DefElem + 20));
      swift_retain();
      goto LABEL_324;
    case 0xBFu:
      uint64_t v824 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v824 - 8) + 16))(a1, a2, v824);
      uint64_t RangeTblEntry = type metadata accessor for PgQuery_RangeTblEntry(0);
      *(void *)(a1 + *(int *)(RangeTblEntry + 20)) = *(void *)(a2 + *(int *)(RangeTblEntry + 20));
      swift_retain();
      goto LABEL_324;
    case 0xC0u:
      uint64_t v826 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v826 - 8) + 16))(a1, a2, v826);
      uint64_t RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
      *(void *)(a1 + *(int *)(RangeTblFunction + 20)) = *(void *)(a2 + *(int *)(RangeTblFunction + 20));
      swift_retain();
      goto LABEL_324;
    case 0xC1u:
      uint64_t v828 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v828 - 8) + 16))(a1, a2, v828);
      uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
      *(void *)(a1 + *(int *)(TableSampleClause + 20)) = *(void *)(a2 + *(int *)(TableSampleClause + 20));
      swift_retain();
      goto LABEL_324;
    case 0xC2u:
      uint64_t v830 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v830 - 8) + 16))(a1, a2, v830);
      uint64_t v831 = type metadata accessor for PgQuery_WithCheckOption(0);
      *(void *)(a1 + *(int *)(v831 + 20)) = *(void *)(a2 + *(int *)(v831 + 20));
      swift_retain();
      goto LABEL_324;
    case 0xC3u:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
      uint64_t v832 = *(int *)(type metadata accessor for PgQuery_SortGroupClause(0) + 36);
      uint64_t v833 = a1 + v832;
      uint64_t v834 = a2 + v832;
      uint64_t v835 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v835 - 8) + 16))(v833, v834, v835);
      goto LABEL_324;
    case 0xC4u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      uint64_t v836 = *(int *)(type metadata accessor for PgQuery_GroupingSet(0) + 28);
      uint64_t v837 = a1 + v836;
      uint64_t v838 = a2 + v836;
      uint64_t v839 = type metadata accessor for UnknownStorage();
      uint64_t v840 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v839 - 8) + 16);
      swift_bridgeObjectRetain();
      v840(v837, v838, v839);
      goto LABEL_324;
    case 0xC5u:
      uint64_t v841 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v841 - 8) + 16))(a1, a2, v841);
      uint64_t WindowClause = type metadata accessor for PgQuery_WindowClause(0);
      *(void *)(a1 + *(int *)(WindowClause + 20)) = *(void *)(a2 + *(int *)(WindowClause + 20));
      swift_retain();
      goto LABEL_324;
    case 0xC6u:
      uint64_t v843 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v843;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      uint64_t v844 = *(int *)(type metadata accessor for PgQuery_ObjectWithArgs(0) + 28);
      uint64_t v845 = a1 + v844;
      uint64_t v846 = a2 + v844;
      uint64_t v847 = type metadata accessor for UnknownStorage();
      uint64_t v848 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v847 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v848(v845, v846, v847);
      goto LABEL_324;
    case 0xC7u:
      uint64_t v849 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v849;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v850 = *(int *)(type metadata accessor for PgQuery_AccessPriv(0) + 24);
      uint64_t v851 = a1 + v850;
      uint64_t v852 = a2 + v850;
      uint64_t v853 = type metadata accessor for UnknownStorage();
      uint64_t v854 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v853 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v854(v851, v852, v853);
      goto LABEL_324;
    case 0xC8u:
      *(void *)a1 = *(void *)a2;
      uint64_t v855 = *(void *)(a2 + 16);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = v855;
      uint64_t OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
      uint64_t v857 = *(int *)(OpClassItem + 32);
      uint64_t v1243 = a1 + v857;
      uint64_t v858 = a2 + v857;
      uint64_t v859 = type metadata accessor for UnknownStorage();
      uint64_t v860 = *(void (**)(void, void, void))(*(void *)(v859 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v861 = v858;
      uint64_t v862 = v860;
      v860(v1243, v861, v859);
      uint64_t v863 = OpClassItem;
      uint64_t v864 = *(int *)(OpClassItem + 36);
      v865 = (void *)(a1 + v864);
      uint64_t v866 = (void *)(a2 + v864);
      uint64_t v867 = type metadata accessor for PgQuery_ObjectWithArgs(0);
      uint64_t v868 = *(void *)(v867 - 8);
      uint64_t v1199 = v859;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v868 + 48))(v866, 1, v867))
      {
        uint64_t v869 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
        memcpy(v865, v866, *(void *)(*(void *)(v869 - 8) + 64));
      }
      else
      {
        uint64_t v1247 = v862;
        uint64_t v1101 = v866[1];
        void *v865 = *v866;
        v865[1] = v1101;
        *((unsigned char *)v865 + 16) = *((unsigned char *)v866 + 16);
        uint64_t v1102 = *(int *)(v867 + 28);
        uint64_t v1192 = (char *)v865 + v1102;
        v1103 = (char *)v866 + v1102;
        swift_bridgeObjectRetain();
        uint64_t v862 = v1247;
        swift_bridgeObjectRetain();
        v1247(v1192, v1103, v859);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v868 + 56))(v865, 0, 1, v867);
      }
      uint64_t v1104 = *(int *)(v863 + 40);
      uint64_t v233 = a1 + v1104;
      uint64_t v234 = a2 + v1104;
      uint64_t v1105 = type metadata accessor for PgQuery_TypeName(0);
      uint64_t v1106 = *(void *)(v1105 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1106 + 48))(v234, 1, v1105))
      {
LABEL_297:
        uint64_t v1107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
        memcpy((void *)v233, (const void *)v234, *(void *)(*(void *)(v1107 - 8) + 64));
      }
      else
      {
        *(void *)uint64_t v233 = *(void *)v234;
        *(_DWORD *)(v233 + 8) = *(_DWORD *)(v234 + 8);
        *(_WORD *)(v233 + 12) = *(_WORD *)(v234 + 12);
        *(void *)(v233 + 16) = *(void *)(v234 + 16);
        *(_DWORD *)(v233 + 24) = *(_DWORD *)(v234 + 24);
        *(void *)(v233 + 32) = *(void *)(v234 + 32);
        *(_DWORD *)(v233 + 40) = *(_DWORD *)(v234 + 40);
        uint64_t v1146 = *(int *)(v1105 + 48);
        v1147 = v862;
        uint64_t v1148 = v233 + v1146;
        uint64_t v1149 = v234 + v1146;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v1147(v1148, v1149, v1199);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1106 + 56))(v233, 0, 1, v1105);
      }
      goto LABEL_324;
    case 0xC9u:
      *(void *)a1 = *(void *)a2;
      uint64_t TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
      uint64_t v871 = *(int *)(TableLikeClause + 24);
      uint64_t v872 = a1 + v871;
      uint64_t v873 = a2 + v871;
      uint64_t v670 = type metadata accessor for UnknownStorage();
      uint64_t v671 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v670 - 8) + 16);
      v671(v872, v873, v670);
      uint64_t v874 = *(int *)(TableLikeClause + 28);
      uint64_t v142 = a1 + v874;
      uint64_t v143 = a2 + v874;
      uint64_t v144 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v875 = *(void *)(v144 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v875 + 48))(v143, 1, v144)) {
        goto LABEL_229;
      }
      uint64_t v1221 = v875;
      uint64_t v1108 = *(void *)(v143 + 8);
      *(void *)uint64_t v142 = *(void *)v143;
      *(void *)(v142 + 8) = v1108;
      uint64_t v1109 = *(void *)(v143 + 24);
      *(void *)(v142 + 16) = *(void *)(v143 + 16);
      *(void *)(v142 + 24) = v1109;
      uint64_t v1110 = *(void *)(v143 + 40);
      *(void *)(v142 + 32) = *(void *)(v143 + 32);
      *(void *)(v142 + 40) = v1110;
      *(unsigned char *)(v142 + 48) = *(unsigned char *)(v143 + 48);
      uint64_t v1111 = *(void *)(v143 + 64);
      *(void *)(v142 + 56) = *(void *)(v143 + 56);
      *(void *)(v142 + 64) = v1111;
      *(_DWORD *)(v142 + 72) = *(_DWORD *)(v143 + 72);
      uint64_t v1112 = *(int *)(v144 + 40);
      uint64_t v1193 = v143 + v1112;
      uint64_t v1208 = v142 + v1112;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v671(v1208, v1193, v670);
      uint64_t v1113 = *(int *)(v144 + 44);
      uint64_t v1007 = (void *)(v142 + v1113);
      uint64_t v1008 = (void *)(v143 + v1113);
      uint64_t v1085 = type metadata accessor for PgQuery_Alias(0);
      uint64_t v1086 = *(void *)(v1085 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1086 + 48))(v1008, 1, v1085)) {
        goto LABEL_303;
      }
LABEL_316:
      uint64_t v1155 = v1008[1];
      *uint64_t v1007 = *v1008;
      v1007[1] = v1155;
      v1007[2] = v1008[2];
      uint64_t v1156 = *(int *)(v1085 + 24);
      uint64_t v1196 = (char *)v1007 + v1156;
      v1157 = (char *)v1008 + v1156;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v671((uint64_t)v1196, (uint64_t)v1157, v670);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v1086 + 56))(v1007, 0, 1, v1085);
      goto LABEL_323;
    case 0xCAu:
      uint64_t v877 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v877 - 8) + 16))(a1, a2, v877);
      uint64_t FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
      *(void *)(a1 + *(int *)(FunctionParameter + 20)) = *(void *)(a2 + *(int *)(FunctionParameter + 20));
      swift_retain();
      goto LABEL_324;
    case 0xCBu:
      uint64_t v879 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v879;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      uint64_t v880 = *(int *)(type metadata accessor for PgQuery_LockingClause(0) + 28);
      uint64_t v881 = a1 + v880;
      uint64_t v882 = a2 + v880;
      uint64_t v883 = type metadata accessor for UnknownStorage();
      uint64_t v884 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v883 - 8) + 16);
      swift_bridgeObjectRetain();
      v884(v881, v882, v883);
      goto LABEL_324;
    case 0xCCu:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
      uint64_t v885 = *(int *)(type metadata accessor for PgQuery_RowMarkClause(0) + 32);
      uint64_t v886 = a1 + v885;
      uint64_t v887 = a2 + v885;
      uint64_t v888 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v888 - 8) + 16))(v886, v887, v888);
      goto LABEL_324;
    case 0xCDu:
      uint64_t v889 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v889 - 8) + 16))(a1, a2, v889);
      uint64_t XmlSerialize = type metadata accessor for PgQuery_XmlSerialize(0);
      *(void *)(a1 + *(int *)(XmlSerialize + 20)) = *(void *)(a2 + *(int *)(XmlSerialize + 20));
      swift_retain();
      goto LABEL_324;
    case 0xCEu:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
      uint64_t v891 = *(int *)(type metadata accessor for PgQuery_WithClause(0) + 28);
      uint64_t v892 = a1 + v891;
      uint64_t v893 = a2 + v891;
      uint64_t v894 = type metadata accessor for UnknownStorage();
      uint64_t v895 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v894 - 8) + 16);
      swift_bridgeObjectRetain();
      v895(v892, v893, v894);
      goto LABEL_324;
    case 0xCFu:
      uint64_t v896 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v896 - 8) + 16))(a1, a2, v896);
      uint64_t InferClause = type metadata accessor for PgQuery_InferClause(0);
      *(void *)(a1 + *(int *)(InferClause + 20)) = *(void *)(a2 + *(int *)(InferClause + 20));
      swift_retain();
      goto LABEL_324;
    case 0xD0u:
      uint64_t v898 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v898 - 8) + 16))(a1, a2, v898);
      uint64_t v899 = type metadata accessor for PgQuery_OnConflictClause(0);
      *(void *)(a1 + *(int *)(v899 + 20)) = *(void *)(a2 + *(int *)(v899 + 20));
      swift_retain();
      goto LABEL_324;
    case 0xD1u:
      uint64_t v900 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v900 - 8) + 16))(a1, a2, v900);
      uint64_t CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
      *(void *)(a1 + *(int *)(CommonTableExpr + 20)) = *(void *)(a2 + *(int *)(CommonTableExpr + 20));
      swift_retain();
      goto LABEL_324;
    case 0xD2u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
      uint64_t v902 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v902;
      *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
      uint64_t v903 = *(int *)(type metadata accessor for PgQuery_RoleSpec(0) + 28);
      uint64_t v904 = a1 + v903;
      uint64_t v905 = a2 + v903;
      uint64_t v906 = type metadata accessor for UnknownStorage();
      uint64_t v907 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v906 - 8) + 16);
      swift_bridgeObjectRetain();
      v907(v904, v905, v906);
      goto LABEL_324;
    case 0xD3u:
      uint64_t v908 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v908;
      *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
      uint64_t v909 = *(int *)(type metadata accessor for PgQuery_TriggerTransition(0) + 28);
      uint64_t v910 = a1 + v909;
      uint64_t v911 = a2 + v909;
      uint64_t v912 = type metadata accessor for UnknownStorage();
      uint64_t v913 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v912 - 8) + 16);
      swift_bridgeObjectRetain();
      v913(v910, v911, v912);
      goto LABEL_324;
    case 0xD4u:
      uint64_t v914 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v914 - 8) + 16))(a1, a2, v914);
      uint64_t PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
      *(void *)(a1 + *(int *)(PartitionElem + 20)) = *(void *)(a2 + *(int *)(PartitionElem + 20));
      swift_retain();
      goto LABEL_324;
    case 0xD5u:
      uint64_t v916 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v916;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      uint64_t v917 = *(int *)(type metadata accessor for PgQuery_PartitionSpec(0) + 28);
      uint64_t v918 = a1 + v917;
      uint64_t v919 = a2 + v917;
      uint64_t v920 = type metadata accessor for UnknownStorage();
      uint64_t v921 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v920 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v921(v918, v919, v920);
      goto LABEL_324;
    case 0xD6u:
      uint64_t v922 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v922;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 20) = *(void *)(a2 + 20);
      uint64_t v923 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v923;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      uint64_t v924 = *(int *)(type metadata accessor for PgQuery_PartitionBoundSpec(0) + 48);
      uint64_t v925 = a1 + v924;
      uint64_t v1244 = a2 + v924;
      uint64_t v926 = type metadata accessor for UnknownStorage();
      uint64_t v927 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v926 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v927(v925, v1244, v926);
      goto LABEL_324;
    case 0xD7u:
      uint64_t v928 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v928 - 8) + 16))(a1, a2, v928);
      uint64_t PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
      *(void *)(a1 + *(int *)(PartitionRangeDatum + 20)) = *(void *)(a2 + *(int *)(PartitionRangeDatum + 20));
      swift_retain();
      goto LABEL_324;
    case 0xD8u:
      uint64_t v930 = type metadata accessor for UnknownStorage();
      uint64_t v931 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v930 - 8) + 16);
      v931(a1, a2, v930);
      uint64_t PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
      uint64_t v933 = *(int *)(PartitionCmd + 20);
      v934 = (void *)(a1 + v933);
      v935 = (void *)(a2 + v933);
      uint64_t v936 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v937 = *(void *)(v936 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v937 + 48))(v935, 1, v936))
      {
        uint64_t v938 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
        memcpy(v934, v935, *(void *)(*(void *)(v938 - 8) + 64));
      }
      else
      {
        uint64_t v1181 = v937;
        uint64_t v1194 = PartitionCmd;
        uint64_t v1114 = v935[1];
        void *v934 = *v935;
        v934[1] = v1114;
        v1248 = (void (*)(char *, char *, uint64_t))v931;
        uint64_t v1115 = v935[3];
        v934[2] = v935[2];
        v934[3] = v1115;
        uint64_t v1116 = v935[5];
        v934[4] = v935[4];
        v934[5] = v1116;
        *((unsigned char *)v934 + 48) = *((unsigned char *)v935 + 48);
        uint64_t v1117 = v930;
        uint64_t v1118 = v935[8];
        v934[7] = v935[7];
        v934[8] = v1118;
        *((_DWORD *)v934 + 18) = *((_DWORD *)v935 + 18);
        uint64_t v1119 = *(int *)(v936 + 40);
        uint64_t v1209 = (char *)v934 + v1119;
        v1177 = (char *)v935 + v1119;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v1248(v1209, v1177, v1117);
        uint64_t v1120 = *(int *)(v936 + 44);
        uint64_t v1121 = (void *)((char *)v934 + v1120);
        uint64_t v1122 = (void *)((char *)v935 + v1120);
        uint64_t v1123 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v1124 = *(void *)(v1123 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1124 + 48))(v1122, 1, v1123))
        {
          uint64_t v1125 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
          memcpy(v1121, v1122, *(void *)(*(void *)(v1125 - 8) + 64));
        }
        else
        {
          uint64_t v1158 = v1122[1];
          *uint64_t v1121 = *v1122;
          v1121[1] = v1158;
          v1121[2] = v1122[2];
          uint64_t v1159 = *(int *)(v1123 + 24);
          v1179 = (char *)v1121 + v1159;
          v1160 = (char *)v1122 + v1159;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1248(v1179, v1160, v1117);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1124 + 56))(v1121, 0, 1, v1123);
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1181 + 56))(v934, 0, 1, v936);
        uint64_t PartitionCmd = v1194;
        uint64_t v930 = v1117;
        uint64_t v931 = (void (*)(uint64_t, uint64_t, uint64_t))v1248;
      }
      uint64_t v1161 = *(int *)(PartitionCmd + 24);
      uint64_t v1162 = (void *)(a1 + v1161);
      v1163 = (void *)(a2 + v1161);
      uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
      uint64_t v1165 = *(void *)(PartitionBoundSpec - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1165 + 48))(v1163, 1, PartitionBoundSpec))
      {
        uint64_t v1166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
        memcpy(v1162, v1163, *(void *)(*(void *)(v1166 - 8) + 64));
      }
      else
      {
        uint64_t v1167 = v1163[1];
        *uint64_t v1162 = *v1163;
        v1162[1] = v1167;
        *((unsigned char *)v1162 + 16) = *((unsigned char *)v1163 + 16);
        *(void *)((char *)v1162 + 20) = *(void *)((char *)v1163 + 20);
        uint64_t v1168 = v1163[5];
        v1162[4] = v1163[4];
        v1162[5] = v1168;
        v1162[6] = v1163[6];
        *((_DWORD *)v1162 + 14) = *((_DWORD *)v1163 + 14);
        uint64_t v1169 = *(int *)(PartitionBoundSpec + 48);
        v1249 = (void (*)(char *, char *, uint64_t))v931;
        uint64_t v1170 = (char *)v1162 + v1169;
        uint64_t v1171 = (char *)v1163 + v1169;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v1249(v1170, v1171, v930);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1165 + 56))(v1162, 0, 1, PartitionBoundSpec);
      }
      goto LABEL_324;
    case 0xD9u:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      uint64_t VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
      uint64_t v940 = *(int *)(VacuumRelation + 24);
      uint64_t v941 = a1 + v940;
      uint64_t v942 = a2 + v940;
      uint64_t v943 = type metadata accessor for UnknownStorage();
      uint64_t v944 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v943 - 8) + 16);
      swift_bridgeObjectRetain();
      v944(v941, v942, v943);
      uint64_t v945 = *(int *)(VacuumRelation + 28);
      uint64_t v142 = a1 + v945;
      uint64_t v143 = a2 + v945;
      uint64_t v144 = type metadata accessor for PgQuery_RangeVar(0);
      uint64_t v946 = *(void *)(v144 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v946 + 48))(v143, 1, v144))
      {
LABEL_229:
        uint64_t v876 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
        memcpy((void *)v142, (const void *)v143, *(void *)(*(void *)(v876 - 8) + 64));
      }
      else
      {
        uint64_t v1221 = v946;
        uint64_t v1126 = *(void *)(v143 + 8);
        *(void *)uint64_t v142 = *(void *)v143;
        *(void *)(v142 + 8) = v1126;
        uint64_t v1127 = *(void *)(v143 + 24);
        *(void *)(v142 + 16) = *(void *)(v143 + 16);
        *(void *)(v142 + 24) = v1127;
        uint64_t v1128 = *(void *)(v143 + 40);
        *(void *)(v142 + 32) = *(void *)(v143 + 32);
        *(void *)(v142 + 40) = v1128;
        *(unsigned char *)(v142 + 48) = *(unsigned char *)(v143 + 48);
        uint64_t v1002 = v944;
        uint64_t v1129 = *(void *)(v143 + 64);
        *(void *)(v142 + 56) = *(void *)(v143 + 56);
        *(void *)(v142 + 64) = v1129;
        *(_DWORD *)(v142 + 72) = *(_DWORD *)(v143 + 72);
        uint64_t v1130 = *(int *)(v144 + 40);
        uint64_t v1195 = v143 + v1130;
        uint64_t v1210 = v142 + v1130;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v1131 = v1195;
        uint64_t v1185 = v943;
        v1002(v1210, v1131, v943);
        uint64_t v1132 = *(int *)(v144 + 44);
        uint64_t v1007 = (void *)(v142 + v1132);
        uint64_t v1008 = (void *)(v143 + v1132);
        uint64_t v1009 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v1010 = *(void *)(v1009 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1010 + 48))(v1008, 1, v1009))
        {
LABEL_303:
          uint64_t v1133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
          memcpy(v1007, v1008, *(void *)(*(void *)(v1133 - 8) + 64));
        }
        else
        {
LABEL_322:
          uint64_t v1172 = v1008[1];
          *uint64_t v1007 = *v1008;
          v1007[1] = v1172;
          v1007[2] = v1008[2];
          uint64_t v1173 = *(int *)(v1009 + 24);
          v1174 = (char *)v1007 + v1173;
          uint64_t v1175 = (char *)v1008 + v1173;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1002((uint64_t)v1174, (uint64_t)v1175, v1185);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1010 + 56))(v1007, 0, 1, v1009);
        }
LABEL_323:
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1221 + 56))(v142, 0, 1, v144);
      }
LABEL_324:
      swift_storeEnumTagMultiPayload();
      return a1;
    case 0xDAu:
      uint64_t v947 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v947;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
      uint64_t v948 = *(int *)(type metadata accessor for PgQuery_InlineCodeBlock(0) + 32);
      uint64_t v949 = a1 + v948;
      uint64_t v950 = a2 + v948;
      uint64_t v951 = type metadata accessor for UnknownStorage();
      uint64_t v952 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v951 - 8) + 16);
      swift_bridgeObjectRetain();
      v952(v949, v950, v951);
      goto LABEL_324;
    case 0xDBu:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v953 = *(int *)(type metadata accessor for PgQuery_CallContext(0) + 20);
      uint64_t v954 = a1 + v953;
      uint64_t v955 = a2 + v953;
      uint64_t v956 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v956 - 8) + 16))(v954, v955, v956);
      goto LABEL_324;
    case 0xDCu:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      uint64_t v957 = *(int *)(type metadata accessor for PgQuery_Integer(0) + 20);
      uint64_t v958 = a1 + v957;
      uint64_t v959 = a2 + v957;
      uint64_t v960 = type metadata accessor for UnknownStorage();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v960 - 8) + 16))(v958, v959, v960);
      goto LABEL_324;
    case 0xDDu:
      uint64_t v961 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v961;
      uint64_t v962 = *(int *)(type metadata accessor for PgQuery_Float(0) + 20);
      uint64_t v963 = a1 + v962;
      uint64_t v964 = a2 + v962;
      uint64_t v965 = type metadata accessor for UnknownStorage();
      uint64_t v966 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v965 - 8) + 16);
      swift_bridgeObjectRetain();
      v966(v963, v964, v965);
      goto LABEL_324;
    case 0xDEu:
      uint64_t v967 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v967;
      uint64_t v968 = *(int *)(type metadata accessor for PgQuery_String(0) + 20);
      uint64_t v969 = a1 + v968;
      uint64_t v970 = a2 + v968;
      uint64_t v971 = type metadata accessor for UnknownStorage();
      uint64_t v972 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v971 - 8) + 16);
      swift_bridgeObjectRetain();
      v972(v969, v970, v971);
      goto LABEL_324;
    case 0xDFu:
      uint64_t v973 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v973;
      uint64_t v974 = *(int *)(type metadata accessor for PgQuery_BitString(0) + 20);
      uint64_t v975 = a1 + v974;
      uint64_t v976 = a2 + v974;
      uint64_t v977 = type metadata accessor for UnknownStorage();
      uint64_t v978 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v977 - 8) + 16);
      swift_bridgeObjectRetain();
      v978(v975, v976, v977);
      goto LABEL_324;
    case 0xE1u:
      *(void *)a1 = *(void *)a2;
      uint64_t v980 = *(int *)(type metadata accessor for PgQuery_List(0) + 20);
      uint64_t v981 = a1 + v980;
      uint64_t v982 = a2 + v980;
      uint64_t v983 = type metadata accessor for UnknownStorage();
      uint64_t v984 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v983 - 8) + 16);
      swift_bridgeObjectRetain();
      v984(v981, v982, v983);
      goto LABEL_324;
    case 0xE2u:
      *(void *)a1 = *(void *)a2;
      uint64_t v985 = *(int *)(type metadata accessor for PgQuery_IntList(0) + 20);
      uint64_t v986 = a1 + v985;
      uint64_t v987 = a2 + v985;
      uint64_t v988 = type metadata accessor for UnknownStorage();
      uint64_t v989 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v988 - 8) + 16);
      swift_bridgeObjectRetain();
      v989(v986, v987, v988);
      goto LABEL_324;
    case 0xE3u:
      *(void *)a1 = *(void *)a2;
      uint64_t v990 = *(int *)(type metadata accessor for PgQuery_OidList(0) + 20);
      uint64_t v991 = a1 + v990;
      uint64_t v992 = a2 + v990;
      uint64_t v993 = type metadata accessor for UnknownStorage();
      uint64_t v994 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v993 - 8) + 16);
      swift_bridgeObjectRetain();
      v994(v991, v992, v993);
      goto LABEL_324;
    default:
      uint64_t v4 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v5 = *(int *)(type metadata accessor for PgQuery_Alias(0) + 24);
      uint64_t v6 = a1 + v5;
      uint64_t v7 = a2 + v5;
      uint64_t v8 = type metadata accessor for UnknownStorage();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9(v6, v7, v8);
      goto LABEL_324;
  }
}

uint64_t assignWithCopy for PgQuery_Node.OneOf_Node(uint64_t a1, uint64_t *a2)
{
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of PgQuery_Alias(a1, type metadata accessor for PgQuery_Node.OneOf_Node);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
        *(void *)(a1 + 56) = a2[7];
        *(void *)(a1 + 64) = a2[8];
        *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
        uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v10 = *(int *)(RangeVar + 40);
        uint64_t v1065 = (uint64_t)a2 + v10;
        uint64_t v1081 = a1 + v10;
        uint64_t v11 = type metadata accessor for UnknownStorage();
        uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v12(v1081, v1065, v11);
        uint64_t v13 = *(int *)(RangeVar + 44);
        uint64_t v14 = (void *)(a1 + v13);
        uint64_t v15 = (uint64_t *)((char *)a2 + v13);
        uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
        uint64_t v17 = *(void *)(Alias - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, Alias)) {
          goto LABEL_5;
        }
        *uint64_t v14 = *v15;
        v14[1] = v15[1];
        void v14[2] = v15[2];
        uint64_t v909 = *(int *)(Alias + 24);
        uint64_t v910 = (char *)v14 + v909;
        uint64_t v911 = (char *)v15 + v909;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v12((uint64_t)v910, (uint64_t)v911, v11);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, Alias);
        goto LABEL_325;
      case 2u:
        uint64_t v19 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v19 - 8) + 16))(a1, a2, v19);
        uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
        *(void *)(a1 + *(int *)(TableFunc + 20)) = *(uint64_t *)((char *)a2 + *(int *)(TableFunc + 20));
        swift_retain();
        goto LABEL_325;
      case 3u:
      case 0x68u:
      case 0xABu:
      case 0xE0u:
        uint64_t v893 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v893 - 8) + 16))(a1, a2, v893);
        goto LABEL_325;
      case 4u:
        uint64_t v21 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v21 - 8) + 16))(a1, a2, v21);
        uint64_t Var = type metadata accessor for PgQuery_Var(0);
        *(void *)(a1 + *(int *)(Var + 20)) = *(uint64_t *)((char *)a2 + *(int *)(Var + 20));
        swift_retain();
        goto LABEL_325;
      case 5u:
        uint64_t v23 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v23 - 8) + 16))(a1, a2, v23);
        uint64_t Param = type metadata accessor for PgQuery_Param(0);
        *(void *)(a1 + *(int *)(Param + 20)) = *(uint64_t *)((char *)a2 + *(int *)(Param + 20));
        swift_retain();
        goto LABEL_325;
      case 6u:
        uint64_t v25 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v25 - 8) + 16))(a1, a2, v25);
        uint64_t Aggref = type metadata accessor for PgQuery_Aggref(0);
        *(void *)(a1 + *(int *)(Aggref + 20)) = *(uint64_t *)((char *)a2 + *(int *)(Aggref + 20));
        swift_retain();
        goto LABEL_325;
      case 7u:
        uint64_t v27 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v27 - 8) + 16))(a1, a2, v27);
        uint64_t GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
        *(void *)(a1 + *(int *)(GroupingFunc + 20)) = *(uint64_t *)((char *)a2 + *(int *)(GroupingFunc + 20));
        swift_retain();
        goto LABEL_325;
      case 8u:
        uint64_t v29 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v29 - 8) + 16))(a1, a2, v29);
        uint64_t WindowFunc = type metadata accessor for PgQuery_WindowFunc(0);
        *(void *)(a1 + *(int *)(WindowFunc + 20)) = *(uint64_t *)((char *)a2 + *(int *)(WindowFunc + 20));
        swift_retain();
        goto LABEL_325;
      case 9u:
        uint64_t v31 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v31 - 8) + 16))(a1, a2, v31);
        uint64_t SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
        *(void *)(a1 + *(int *)(SubscriptingRef + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SubscriptingRef + 20));
        swift_retain();
        goto LABEL_325;
      case 0xAu:
        uint64_t v33 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v33 - 8) + 16))(a1, a2, v33);
        Funcuint64_t Expr = type metadata accessor for PgQuery_FuncExpr(0);
        *(void *)(a1 + *(int *)(FuncExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(FuncExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0xBu:
        uint64_t v35 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v35 - 8) + 16))(a1, a2, v35);
        NamedArguint64_t Expr = type metadata accessor for PgQuery_NamedArgExpr(0);
        *(void *)(a1 + *(int *)(NamedArgExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(NamedArgExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0xCu:
        uint64_t v37 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v37 - 8) + 16))(a1, a2, v37);
        Opuint64_t Expr = type metadata accessor for PgQuery_OpExpr(0);
        *(void *)(a1 + *(int *)(OpExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(OpExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0xDu:
        uint64_t v39 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v39 - 8) + 16))(a1, a2, v39);
        Distinctuint64_t Expr = type metadata accessor for PgQuery_DistinctExpr(0);
        *(void *)(a1 + *(int *)(DistinctExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(DistinctExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0xEu:
        uint64_t v41 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
        NullIfuint64_t Expr = type metadata accessor for PgQuery_NullIfExpr(0);
        *(void *)(a1 + *(int *)(NullIfExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(NullIfExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0xFu:
        uint64_t v43 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v43 - 8) + 16))(a1, a2, v43);
        ScalarArrayOpuint64_t Expr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
        *(void *)(a1 + *(int *)(ScalarArrayOpExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ScalarArrayOpExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x10u:
        uint64_t v45 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v45 - 8) + 16))(a1, a2, v45);
        Booluint64_t Expr = type metadata accessor for PgQuery_BoolExpr(0);
        *(void *)(a1 + *(int *)(BoolExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(BoolExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x11u:
        uint64_t v47 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v47 - 8) + 16))(a1, a2, v47);
        uint64_t SubLink = type metadata accessor for PgQuery_SubLink(0);
        *(void *)(a1 + *(int *)(SubLink + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SubLink + 20));
        swift_retain();
        goto LABEL_325;
      case 0x12u:
        uint64_t v49 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v49 - 8) + 16))(a1, a2, v49);
        uint64_t SubPlan = type metadata accessor for PgQuery_SubPlan(0);
        *(void *)(a1 + *(int *)(SubPlan + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SubPlan + 20));
        swift_retain();
        goto LABEL_325;
      case 0x13u:
        uint64_t v51 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v51 - 8) + 16))(a1, a2, v51);
        Alternativeuint64_t SubPlan = type metadata accessor for PgQuery_AlternativeSubPlan(0);
        *(void *)(a1 + *(int *)(AlternativeSubPlan + 20)) = *(uint64_t *)((char *)a2 + *(int *)(AlternativeSubPlan + 20));
        swift_retain();
        goto LABEL_325;
      case 0x14u:
        uint64_t v53 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v53 - 8) + 16))(a1, a2, v53);
        uint64_t FieldSelect = type metadata accessor for PgQuery_FieldSelect(0);
        *(void *)(a1 + *(int *)(FieldSelect + 20)) = *(uint64_t *)((char *)a2 + *(int *)(FieldSelect + 20));
        swift_retain();
        goto LABEL_325;
      case 0x15u:
        uint64_t v55 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v55 - 8) + 16))(a1, a2, v55);
        uint64_t FieldStore = type metadata accessor for PgQuery_FieldStore(0);
        *(void *)(a1 + *(int *)(FieldStore + 20)) = *(uint64_t *)((char *)a2 + *(int *)(FieldStore + 20));
        swift_retain();
        goto LABEL_325;
      case 0x16u:
        uint64_t v57 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v57 - 8) + 16))(a1, a2, v57);
        uint64_t RelabelType = type metadata accessor for PgQuery_RelabelType(0);
        *(void *)(a1 + *(int *)(RelabelType + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RelabelType + 20));
        swift_retain();
        goto LABEL_325;
      case 0x17u:
        uint64_t v59 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v59 - 8) + 16))(a1, a2, v59);
        uint64_t CoerceViaIO = type metadata accessor for PgQuery_CoerceViaIO(0);
        *(void *)(a1 + *(int *)(CoerceViaIO + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CoerceViaIO + 20));
        swift_retain();
        goto LABEL_325;
      case 0x18u:
        uint64_t v61 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v61 - 8) + 16))(a1, a2, v61);
        ArrayCoerceuint64_t Expr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
        *(void *)(a1 + *(int *)(ArrayCoerceExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ArrayCoerceExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x19u:
        uint64_t v63 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v63 - 8) + 16))(a1, a2, v63);
        ConvertRowtypeuint64_t Expr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
        *(void *)(a1 + *(int *)(ConvertRowtypeExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ConvertRowtypeExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x1Au:
        uint64_t v65 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v65 - 8) + 16))(a1, a2, v65);
        Collateuint64_t Expr = type metadata accessor for PgQuery_CollateExpr(0);
        *(void *)(a1 + *(int *)(CollateExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CollateExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x1Bu:
        uint64_t v67 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v67 - 8) + 16))(a1, a2, v67);
        Caseuint64_t Expr = type metadata accessor for PgQuery_CaseExpr(0);
        *(void *)(a1 + *(int *)(CaseExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CaseExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x1Cu:
        uint64_t v69 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v69 - 8) + 16))(a1, a2, v69);
        uint64_t CaseWhen = type metadata accessor for PgQuery_CaseWhen(0);
        *(void *)(a1 + *(int *)(CaseWhen + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CaseWhen + 20));
        swift_retain();
        goto LABEL_325;
      case 0x1Du:
        uint64_t v71 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v71 - 8) + 16))(a1, a2, v71);
        CaseTestuint64_t Expr = type metadata accessor for PgQuery_CaseTestExpr(0);
        *(void *)(a1 + *(int *)(CaseTestExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CaseTestExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x1Eu:
        uint64_t v73 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v73 - 8) + 16))(a1, a2, v73);
        Arrayuint64_t Expr = type metadata accessor for PgQuery_ArrayExpr(0);
        *(void *)(a1 + *(int *)(ArrayExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ArrayExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x1Fu:
        uint64_t v75 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v75 - 8) + 16))(a1, a2, v75);
        Rowuint64_t Expr = type metadata accessor for PgQuery_RowExpr(0);
        *(void *)(a1 + *(int *)(RowExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RowExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x20u:
        uint64_t v77 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v77 - 8) + 16))(a1, a2, v77);
        RowCompareuint64_t Expr = type metadata accessor for PgQuery_RowCompareExpr(0);
        *(void *)(a1 + *(int *)(RowCompareExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RowCompareExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x21u:
        uint64_t v79 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v79 - 8) + 16))(a1, a2, v79);
        Coalesceuint64_t Expr = type metadata accessor for PgQuery_CoalesceExpr(0);
        *(void *)(a1 + *(int *)(CoalesceExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CoalesceExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x22u:
        uint64_t v81 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v81 - 8) + 16))(a1, a2, v81);
        MinMaxuint64_t Expr = type metadata accessor for PgQuery_MinMaxExpr(0);
        *(void *)(a1 + *(int *)(MinMaxExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(MinMaxExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x23u:
        uint64_t v83 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v83 - 8) + 16))(a1, a2, v83);
        uint64_t SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
        *(void *)(a1 + *(int *)(SQLValueFunction + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SQLValueFunction + 20));
        swift_retain();
        goto LABEL_325;
      case 0x24u:
        uint64_t v85 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v85 - 8) + 16))(a1, a2, v85);
        Xmluint64_t Expr = type metadata accessor for PgQuery_XmlExpr(0);
        *(void *)(a1 + *(int *)(XmlExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(XmlExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x25u:
        uint64_t v87 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v87 - 8) + 16))(a1, a2, v87);
        uint64_t NullTest = type metadata accessor for PgQuery_NullTest(0);
        *(void *)(a1 + *(int *)(NullTest + 20)) = *(uint64_t *)((char *)a2 + *(int *)(NullTest + 20));
        swift_retain();
        goto LABEL_325;
      case 0x26u:
        uint64_t v89 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v89 - 8) + 16))(a1, a2, v89);
        uint64_t BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
        *(void *)(a1 + *(int *)(BooleanTest + 20)) = *(uint64_t *)((char *)a2 + *(int *)(BooleanTest + 20));
        swift_retain();
        goto LABEL_325;
      case 0x27u:
        uint64_t v91 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v91 - 8) + 16))(a1, a2, v91);
        uint64_t CoerceToDomain = type metadata accessor for PgQuery_CoerceToDomain(0);
        *(void *)(a1 + *(int *)(CoerceToDomain + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CoerceToDomain + 20));
        swift_retain();
        goto LABEL_325;
      case 0x28u:
        uint64_t v93 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v93 - 8) + 16))(a1, a2, v93);
        uint64_t CoerceToDomainValue = type metadata accessor for PgQuery_CoerceToDomainValue(0);
        *(void *)(a1 + *(int *)(CoerceToDomainValue + 20)) = *(uint64_t *)((char *)a2
                                                                          + *(int *)(CoerceToDomainValue + 20));
        swift_retain();
        goto LABEL_325;
      case 0x29u:
        uint64_t v95 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v95 - 8) + 16))(a1, a2, v95);
        uint64_t SetToDefault = type metadata accessor for PgQuery_SetToDefault(0);
        *(void *)(a1 + *(int *)(SetToDefault + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SetToDefault + 20));
        swift_retain();
        goto LABEL_325;
      case 0x2Au:
        uint64_t v97 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v97 - 8) + 16))(a1, a2, v97);
        CurrentOfuint64_t Expr = type metadata accessor for PgQuery_CurrentOfExpr(0);
        *(void *)(a1 + *(int *)(CurrentOfExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CurrentOfExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x2Bu:
        uint64_t v99 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v99 - 8) + 16))(a1, a2, v99);
        NextValueuint64_t Expr = type metadata accessor for PgQuery_NextValueExpr(0);
        *(void *)(a1 + *(int *)(NextValueExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(NextValueExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x2Cu:
        uint64_t v101 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v101 - 8) + 16))(a1, a2, v101);
        uint64_t InferenceElem = type metadata accessor for PgQuery_InferenceElem(0);
        *(void *)(a1 + *(int *)(InferenceElem + 20)) = *(uint64_t *)((char *)a2 + *(int *)(InferenceElem + 20));
        swift_retain();
        goto LABEL_325;
      case 0x2Du:
        uint64_t v103 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v103 - 8) + 16))(a1, a2, v103);
        uint64_t TargetEntry = type metadata accessor for PgQuery_TargetEntry(0);
        *(void *)(a1 + *(int *)(TargetEntry + 20)) = *(uint64_t *)((char *)a2 + *(int *)(TargetEntry + 20));
        swift_retain();
        goto LABEL_325;
      case 0x2Eu:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        uint64_t v105 = *(int *)(type metadata accessor for PgQuery_RangeTblRef(0) + 20);
        uint64_t v106 = a1 + v105;
        uint64_t v107 = (uint64_t)a2 + v105;
        uint64_t v108 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 16))(v106, v107, v108);
        goto LABEL_325;
      case 0x2Fu:
        uint64_t v109 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v109 - 8) + 16))(a1, a2, v109);
        Joinuint64_t Expr = type metadata accessor for PgQuery_JoinExpr(0);
        *(void *)(a1 + *(int *)(JoinExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(JoinExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0x30u:
        uint64_t v111 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v111 - 8) + 16))(a1, a2, v111);
        uint64_t v112 = type metadata accessor for PgQuery_FromExpr(0);
        *(void *)(a1 + *(int *)(v112 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v112 + 20));
        swift_retain();
        goto LABEL_325;
      case 0x31u:
        uint64_t v113 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v113 - 8) + 16))(a1, a2, v113);
        uint64_t v114 = type metadata accessor for PgQuery_OnConflictExpr(0);
        *(void *)(a1 + *(int *)(v114 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v114 + 20));
        swift_retain();
        goto LABEL_325;
      case 0x32u:
        uint64_t v115 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v115 - 8) + 16))(a1, a2, v115);
        uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
        *(void *)(a1 + *(int *)(IntoClause + 20)) = *(uint64_t *)((char *)a2 + *(int *)(IntoClause + 20));
        swift_retain();
        goto LABEL_325;
      case 0x33u:
        uint64_t v117 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v117 - 8) + 16))(a1, a2, v117);
        uint64_t RawStmt = type metadata accessor for PgQuery_RawStmt(0);
        *(void *)(a1 + *(int *)(RawStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RawStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x34u:
        uint64_t v119 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v119 - 8) + 16))(a1, a2, v119);
        uint64_t Query = type metadata accessor for PgQuery_Query(0);
        *(void *)(a1 + *(int *)(Query + 20)) = *(uint64_t *)((char *)a2 + *(int *)(Query + 20));
        swift_retain();
        goto LABEL_325;
      case 0x35u:
        uint64_t v121 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v121 - 8) + 16))(a1, a2, v121);
        uint64_t InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
        *(void *)(a1 + *(int *)(InsertStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(InsertStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x36u:
        uint64_t v123 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v123 - 8) + 16))(a1, a2, v123);
        uint64_t v124 = type metadata accessor for PgQuery_DeleteStmt(0);
        *(void *)(a1 + *(int *)(v124 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v124 + 20));
        swift_retain();
        goto LABEL_325;
      case 0x37u:
        uint64_t v125 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v125 - 8) + 16))(a1, a2, v125);
        uint64_t UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
        *(void *)(a1 + *(int *)(UpdateStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(UpdateStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x38u:
        uint64_t v127 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v127 - 8) + 16))(a1, a2, v127);
        uint64_t SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
        *(void *)(a1 + *(int *)(SelectStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SelectStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x39u:
        *(void *)a1 = *a2;
        uint64_t v129 = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 8) = v129;
        *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
        uint64_t AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
        uint64_t v131 = *(int *)(AlterTableStmt + 28);
        uint64_t v132 = a1 + v131;
        uint64_t v133 = (uint64_t)a2 + v131;
        uint64_t v134 = type metadata accessor for UnknownStorage();
        uint64_t v135 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v134 - 8) + 16);
        swift_bridgeObjectRetain();
        v135(v132, v133, v134);
        uint64_t v136 = *(int *)(AlterTableStmt + 32);
        uint64_t v137 = a1 + v136;
        uint64_t v138 = (uint64_t)a2 + v136;
        uint64_t v139 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v140 = *(void *)(v139 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139)) {
          goto LABEL_230;
        }
        uint64_t v1091 = v140;
        *(void *)uint64_t v137 = *(void *)v138;
        *(void *)(v137 + 8) = *(void *)(v138 + 8);
        *(void *)(v137 + 16) = *(void *)(v138 + 16);
        *(void *)(v137 + 24) = *(void *)(v138 + 24);
        *(void *)(v137 + 32) = *(void *)(v138 + 32);
        *(void *)(v137 + 40) = *(void *)(v138 + 40);
        *(unsigned char *)(v137 + 48) = *(unsigned char *)(v138 + 48);
        *(void *)(v137 + 56) = *(void *)(v138 + 56);
        *(void *)(v137 + 64) = *(void *)(v138 + 64);
        *(_DWORD *)(v137 + 72) = *(_DWORD *)(v138 + 72);
        uint64_t v912 = *(int *)(v139 + 40);
        uint64_t v1052 = v138 + v912;
        uint64_t v1068 = v137 + v912;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v914 = v1052;
        uint64_t v913 = v1068;
        uint64_t v1053 = v134;
        uint64_t v1069 = (void (*)(char *, char *, uint64_t))v135;
        v135(v913, v914, v134);
        uint64_t v915 = *(int *)(v139 + 44);
        uint64_t v916 = (void *)(v137 + v915);
        uint64_t v917 = (void *)(v138 + v915);
        uint64_t v918 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v919 = *(void *)(v918 - 8);
        if (!(*(unsigned int (**)(void *, uint64_t, uint64_t))(v919 + 48))(v917, 1, v918)) {
          goto LABEL_323;
        }
        goto LABEL_304;
      case 0x3Au:
        uint64_t v141 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v141 - 8) + 16))(a1, a2, v141);
        uint64_t AlterTableCmd = type metadata accessor for PgQuery_AlterTableCmd(0);
        *(void *)(a1 + *(int *)(AlterTableCmd + 20)) = *(uint64_t *)((char *)a2 + *(int *)(AlterTableCmd + 20));
        swift_retain();
        goto LABEL_325;
      case 0x3Bu:
        uint64_t v143 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v143 - 8) + 16))(a1, a2, v143);
        uint64_t AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
        *(void *)(a1 + *(int *)(AlterDomainStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(AlterDomainStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x3Cu:
        uint64_t v145 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v145 - 8) + 16))(a1, a2, v145);
        uint64_t SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
        *(void *)(a1 + *(int *)(SetOperationStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SetOperationStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x3Du:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v147 = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 8) = v147;
        uint64_t v148 = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        *(void *)(a1 + 24) = v148;
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
        uint64_t v149 = a2[9];
        *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
        *(void *)(a1 + 72) = v149;
        uint64_t v150 = *(int *)(type metadata accessor for PgQuery_GrantStmt(0) + 48);
        uint64_t v151 = a1 + v150;
        uint64_t v152 = (uint64_t)a2 + v150;
        uint64_t v153 = type metadata accessor for UnknownStorage();
        uint64_t v154 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v154(v151, v152, v153);
        goto LABEL_325;
      case 0x3Eu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
        uint64_t v155 = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        *(void *)(a1 + 24) = v155;
        uint64_t GrantRoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
        uint64_t v157 = *(int *)(GrantRoleStmt + 36);
        uint64_t v158 = a1 + v157;
        uint64_t v1093 = (uint64_t)a2 + v157;
        uint64_t v159 = type metadata accessor for UnknownStorage();
        uint64_t v160 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v160(v158, v1093, v159);
        uint64_t v161 = *(int *)(GrantRoleStmt + 40);
        uint64_t v162 = (void *)(a1 + v161);
        uint64_t v163 = (uint64_t *)((char *)a2 + v161);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v165 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v165 + 48))(v163, 1, RoleSpec)) {
          goto LABEL_160;
        }
        goto LABEL_286;
      case 0x3Fu:
        *(void *)a1 = *a2;
        uint64_t AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
        uint64_t v167 = *(int *)(AlterDefaultPrivilegesStmt + 20);
        uint64_t v168 = (unsigned char *)(a1 + v167);
        uint64_t v169 = (char *)a2 + v167;
        uint64_t v170 = type metadata accessor for UnknownStorage();
        uint64_t v171 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v170 - 8) + 16);
        swift_bridgeObjectRetain();
        v1094 = v171;
        v171(v168, v169, v170);
        uint64_t v172 = *(int *)(AlterDefaultPrivilegesStmt + 24);
        uint64_t v173 = (unsigned char *)(a1 + v172);
        uint64_t v174 = (char *)a2 + v172;
        uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
        uint64_t v176 = *(void *)(GrantStmt - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v176 + 48))(v174, 1, GrantStmt))
        {
          uint64_t v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
          memcpy(v173, v174, *(void *)(*(void *)(v177 - 8) + 64));
        }
        else
        {
          *uint64_t v173 = *v174;
          uint64_t v920 = *((void *)v174 + 1);
          v173[16] = v174[16];
          *((void *)v173 + 1) = v920;
          uint64_t v921 = *((void *)v174 + 3);
          v173[32] = v174[32];
          *((void *)v173 + 3) = v921;
          *((void *)v173 + 5) = *((void *)v174 + 5);
          *((void *)v173 + 6) = *((void *)v174 + 6);
          *((void *)v173 + 7) = *((void *)v174 + 7);
          v173[64] = v174[64];
          uint64_t v922 = *((void *)v174 + 9);
          v173[80] = v174[80];
          *((void *)v173 + 9) = v922;
          uint64_t v923 = *(int *)(GrantStmt + 48);
          uint64_t v1092 = &v173[v923];
          uint64_t v924 = &v174[v923];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1094(v1092, v924, v170);
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v176 + 56))(v173, 0, 1, GrantStmt);
        }
        goto LABEL_325;
      case 0x40u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v178 = *(int *)(type metadata accessor for PgQuery_ClosePortalStmt(0) + 20);
        uint64_t v179 = a1 + v178;
        uint64_t v180 = (uint64_t)a2 + v178;
        uint64_t v181 = type metadata accessor for UnknownStorage();
        uint64_t v182 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v181 - 8) + 16);
        swift_bridgeObjectRetain();
        v182(v179, v180, v181);
        goto LABEL_325;
      case 0x41u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
        uint64_t ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
        uint64_t v184 = *(int *)(ClusterStmt + 24);
        uint64_t v185 = a1 + v184;
        uint64_t v186 = (uint64_t)a2 + v184;
        uint64_t v187 = type metadata accessor for UnknownStorage();
        uint64_t v188 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v187 - 8) + 16);
        swift_bridgeObjectRetain();
        v188(v185, v186, v187);
        uint64_t v189 = *(int *)(ClusterStmt + 28);
        uint64_t v137 = a1 + v189;
        uint64_t v138 = (uint64_t)a2 + v189;
        uint64_t v139 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v190 = *(void *)(v139 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v190 + 48))(v138, 1, v139)) {
          goto LABEL_230;
        }
        uint64_t v1091 = v190;
        *(void *)uint64_t v137 = *(void *)v138;
        *(void *)(v137 + 8) = *(void *)(v138 + 8);
        *(void *)(v137 + 16) = *(void *)(v138 + 16);
        *(void *)(v137 + 24) = *(void *)(v138 + 24);
        *(void *)(v137 + 32) = *(void *)(v138 + 32);
        *(void *)(v137 + 40) = *(void *)(v138 + 40);
        *(unsigned char *)(v137 + 48) = *(unsigned char *)(v138 + 48);
        *(void *)(v137 + 56) = *(void *)(v138 + 56);
        *(void *)(v137 + 64) = *(void *)(v138 + 64);
        *(_DWORD *)(v137 + 72) = *(_DWORD *)(v138 + 72);
        uint64_t v925 = *(int *)(v139 + 40);
        uint64_t v1054 = v138 + v925;
        uint64_t v1070 = v137 + v925;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v927 = v1054;
        uint64_t v926 = v1070;
        uint64_t v1053 = v187;
        uint64_t v1069 = (void (*)(char *, char *, uint64_t))v188;
        v188(v926, v927, v187);
        uint64_t v928 = *(int *)(v139 + 44);
        uint64_t v916 = (void *)(v137 + v928);
        uint64_t v917 = (void *)(v138 + v928);
        uint64_t v918 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v919 = *(void *)(v918 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v919 + 48))(v917, 1, v918)) {
          goto LABEL_304;
        }
        goto LABEL_323;
      case 0x42u:
        uint64_t v191 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v191 - 8) + 16))(a1, a2, v191);
        uint64_t CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
        *(void *)(a1 + *(int *)(CopyStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CopyStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x43u:
        uint64_t v193 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v193 - 8) + 16))(a1, a2, v193);
        uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
        *(void *)(a1 + *(int *)(Stmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(Stmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x44u:
        uint64_t v195 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v195;
        *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
        uint64_t v196 = *(int *)(type metadata accessor for PgQuery_DefineStmt(0) + 44);
        uint64_t v197 = a1 + v196;
        uint64_t v198 = (uint64_t)a2 + v196;
        uint64_t v199 = type metadata accessor for UnknownStorage();
        uint64_t v200 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v199 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v200(v197, v198, v199);
        goto LABEL_325;
      case 0x45u:
        *(void *)a1 = *a2;
        uint64_t v201 = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 8) = v201;
        uint64_t v202 = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        *(void *)(a1 + 24) = v202;
        *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
        *(unsigned char *)(a1 + 34) = *((unsigned char *)a2 + 34);
        uint64_t v203 = *(int *)(type metadata accessor for PgQuery_DropStmt(0) + 36);
        uint64_t v204 = a1 + v203;
        uint64_t v205 = (uint64_t)a2 + v203;
        uint64_t v206 = type metadata accessor for UnknownStorage();
        uint64_t v207 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v206 - 8) + 16);
        swift_bridgeObjectRetain();
        v207(v204, v205, v206);
        goto LABEL_325;
      case 0x46u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v208 = a2[2];
        *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
        *(void *)(a1 + 16) = v208;
        uint64_t v209 = *(int *)(type metadata accessor for PgQuery_TruncateStmt(0) + 28);
        uint64_t v210 = a1 + v209;
        uint64_t v211 = (uint64_t)a2 + v209;
        uint64_t v212 = type metadata accessor for UnknownStorage();
        uint64_t v213 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v212 - 8) + 16);
        swift_bridgeObjectRetain();
        v213(v210, v211, v212);
        goto LABEL_325;
      case 0x47u:
        uint64_t v214 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v214 - 8) + 16))(a1, a2, v214);
        Commentuint64_t Stmt = type metadata accessor for PgQuery_CommentStmt(0);
        *(void *)(a1 + *(int *)(CommentStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CommentStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x48u:
        uint64_t v216 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v216;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        uint64_t v217 = *(int *)(type metadata accessor for PgQuery_FetchStmt(0) + 32);
        uint64_t v218 = a1 + v217;
        uint64_t v219 = (uint64_t)a2 + v217;
        uint64_t v220 = type metadata accessor for UnknownStorage();
        uint64_t v221 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v220 - 8) + 16);
        swift_bridgeObjectRetain();
        v221(v218, v219, v220);
        goto LABEL_325;
      case 0x49u:
        uint64_t v222 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v222 - 8) + 16))(a1, a2, v222);
        Indexuint64_t Stmt = type metadata accessor for PgQuery_IndexStmt(0);
        *(void *)(a1 + *(int *)(IndexStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(IndexStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x4Au:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(unsigned char *)(a1 + 1) = *((unsigned char *)a2 + 1);
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        Functionuint64_t Stmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
        uint64_t v225 = *(int *)(FunctionStmt + 36);
        uint64_t v1082 = (uint64_t)a2 + v225;
        uint64_t v1095 = a1 + v225;
        uint64_t v226 = type metadata accessor for UnknownStorage();
        uint64_t v227 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v226 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v228 = v1082;
        uint64_t v1083 = v226;
        v227(v1095, v228, v226);
        uint64_t v229 = *(int *)(FunctionStmt + 40);
        uint64_t v230 = a1 + v229;
        uint64_t v231 = (uint64_t)a2 + v229;
        uint64_t TypeName = type metadata accessor for PgQuery_TypeName(0);
        uint64_t v233 = *(void *)(TypeName - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v233 + 48))(v231, 1, TypeName)) {
          goto LABEL_298;
        }
        *(void *)uint64_t v230 = *(void *)v231;
        *(_DWORD *)(v230 + 8) = *(_DWORD *)(v231 + 8);
        *(unsigned char *)(v230 + 12) = *(unsigned char *)(v231 + 12);
        *(unsigned char *)(v230 + 13) = *(unsigned char *)(v231 + 13);
        *(void *)(v230 + 16) = *(void *)(v231 + 16);
        *(_DWORD *)(v230 + 24) = *(_DWORD *)(v231 + 24);
        *(void *)(v230 + 32) = *(void *)(v231 + 32);
        *(_DWORD *)(v230 + 40) = *(_DWORD *)(v231 + 40);
        uint64_t v929 = *(int *)(TypeName + 48);
        uint64_t v930 = v230 + v929;
        uint64_t v931 = v231 + v929;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v227(v930, v931, v1083);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v233 + 56))(v230, 0, 1, TypeName);
        goto LABEL_325;
      case 0x4Bu:
        uint64_t v234 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v234;
        *(void *)(a1 + 16) = a2[2];
        AlterFunctionuint64_t Stmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
        uint64_t v236 = *(int *)(AlterFunctionStmt + 24);
        uint64_t v237 = a1 + v236;
        uint64_t v238 = (uint64_t)a2 + v236;
        uint64_t v239 = type metadata accessor for UnknownStorage();
        uint64_t v240 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v239 - 8) + 16);
        swift_bridgeObjectRetain();
        v240(v237, v238, v239);
        uint64_t v241 = *(int *)(AlterFunctionStmt + 28);
        uint64_t v242 = (void *)(a1 + v241);
        uint64_t v243 = (uint64_t *)((char *)a2 + v241);
        uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
        uint64_t v245 = *(void *)(ObjectWithArgs - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v245 + 48))(v243, 1, ObjectWithArgs)) {
          goto LABEL_84;
        }
        goto LABEL_267;
      case 0x4Cu:
        *(void *)a1 = *a2;
        uint64_t v247 = *(int *)(type metadata accessor for PgQuery_DoStmt(0) + 20);
        uint64_t v248 = a1 + v247;
        uint64_t v249 = (uint64_t)a2 + v247;
        uint64_t v250 = type metadata accessor for UnknownStorage();
        uint64_t v251 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v250 - 8) + 16);
        swift_bridgeObjectRetain();
        v251(v248, v249, v250);
        goto LABEL_325;
      case 0x4Du:
        uint64_t v252 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v252 - 8) + 16))(a1, a2, v252);
        Renameuint64_t Stmt = type metadata accessor for PgQuery_RenameStmt(0);
        *(void *)(a1 + *(int *)(RenameStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RenameStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x4Eu:
        uint64_t v254 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v254 - 8) + 16))(a1, a2, v254);
        Ruleuint64_t Stmt = type metadata accessor for PgQuery_RuleStmt(0);
        *(void *)(a1 + *(int *)(RuleStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RuleStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x4Fu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        uint64_t v256 = *(int *)(type metadata accessor for PgQuery_NotifyStmt(0) + 24);
        uint64_t v257 = a1 + v256;
        uint64_t v258 = (uint64_t)a2 + v256;
        uint64_t v259 = type metadata accessor for UnknownStorage();
        uint64_t v260 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v259 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v260(v257, v258, v259);
        goto LABEL_325;
      case 0x50u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v261 = *(int *)(type metadata accessor for PgQuery_ListenStmt(0) + 20);
        uint64_t v262 = a1 + v261;
        uint64_t v263 = (uint64_t)a2 + v261;
        uint64_t v264 = type metadata accessor for UnknownStorage();
        uint64_t v265 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v264 - 8) + 16);
        swift_bridgeObjectRetain();
        v265(v262, v263, v264);
        goto LABEL_325;
      case 0x51u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v266 = *(int *)(type metadata accessor for PgQuery_UnlistenStmt(0) + 20);
        uint64_t v267 = a1 + v266;
        uint64_t v268 = (uint64_t)a2 + v266;
        uint64_t v269 = type metadata accessor for UnknownStorage();
        uint64_t v270 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v269 - 8) + 16);
        swift_bridgeObjectRetain();
        v270(v267, v268, v269);
        goto LABEL_325;
      case 0x52u:
        uint64_t v271 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v271;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
        uint64_t v272 = *(int *)(type metadata accessor for PgQuery_TransactionStmt(0) + 36);
        uint64_t v273 = a1 + v272;
        uint64_t v274 = (uint64_t)a2 + v272;
        uint64_t v275 = type metadata accessor for UnknownStorage();
        uint64_t v276 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v275 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v276(v273, v274, v275);
        goto LABEL_325;
      case 0x53u:
        uint64_t v277 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v277 - 8) + 16))(a1, a2, v277);
        Viewuint64_t Stmt = type metadata accessor for PgQuery_ViewStmt(0);
        *(void *)(a1 + *(int *)(ViewStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ViewStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x54u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v279 = *(int *)(type metadata accessor for PgQuery_LoadStmt(0) + 20);
        uint64_t v280 = a1 + v279;
        uint64_t v281 = (uint64_t)a2 + v279;
        uint64_t v282 = type metadata accessor for UnknownStorage();
        uint64_t v283 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v282 - 8) + 16);
        swift_bridgeObjectRetain();
        v283(v280, v281, v282);
        goto LABEL_325;
      case 0x55u:
        uint64_t v284 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v284 - 8) + 16))(a1, a2, v284);
        Domainuint64_t Stmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
        *(void *)(a1 + *(int *)(DomainStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(DomainStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x56u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t v286 = *(int *)(type metadata accessor for PgQuery_CreatedbStmt(0) + 24);
        uint64_t v287 = a1 + v286;
        uint64_t v288 = (uint64_t)a2 + v286;
        uint64_t v289 = type metadata accessor for UnknownStorage();
        uint64_t v290 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v289 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v290(v287, v288, v289);
        goto LABEL_325;
      case 0x57u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        uint64_t v291 = *(int *)(type metadata accessor for PgQuery_DropdbStmt(0) + 28);
        uint64_t v292 = a1 + v291;
        uint64_t v293 = (uint64_t)a2 + v291;
        uint64_t v294 = type metadata accessor for UnknownStorage();
        uint64_t v295 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v294 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v295(v292, v293, v294);
        goto LABEL_325;
      case 0x58u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v296 = *(int *)(type metadata accessor for PgQuery_VacuumStmt(0) + 28);
        uint64_t v297 = a1 + v296;
        uint64_t v298 = (uint64_t)a2 + v296;
        uint64_t v299 = type metadata accessor for UnknownStorage();
        uint64_t v300 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v299 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v300(v297, v298, v299);
        goto LABEL_325;
      case 0x59u:
        uint64_t v301 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v301 - 8) + 16))(a1, a2, v301);
        Explainuint64_t Stmt = type metadata accessor for PgQuery_ExplainStmt(0);
        *(void *)(a1 + *(int *)(ExplainStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ExplainStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x5Au:
        uint64_t v303 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v303 - 8) + 16))(a1, a2, v303);
        TableAsuint64_t Stmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
        *(void *)(a1 + *(int *)(TableAsStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(TableAsStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x5Bu:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
        *(unsigned char *)(a1 + 13) = *((unsigned char *)a2 + 13);
        Sequint64_t Stmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
        uint64_t v306 = *(int *)(SeqStmt + 32);
        uint64_t v307 = a1 + v306;
        uint64_t v308 = (uint64_t)a2 + v306;
        uint64_t v309 = type metadata accessor for UnknownStorage();
        uint64_t v310 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v309 - 8) + 16);
        swift_bridgeObjectRetain();
        v310(v307, v308, v309);
        uint64_t v311 = *(int *)(SeqStmt + 36);
        uint64_t v137 = a1 + v311;
        uint64_t v138 = (uint64_t)a2 + v311;
        uint64_t v139 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v312 = *(void *)(v139 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v312 + 48))(v138, 1, v139)) {
          goto LABEL_230;
        }
        uint64_t v1091 = v312;
        *(void *)uint64_t v137 = *(void *)v138;
        *(void *)(v137 + 8) = *(void *)(v138 + 8);
        *(void *)(v137 + 16) = *(void *)(v138 + 16);
        *(void *)(v137 + 24) = *(void *)(v138 + 24);
        *(void *)(v137 + 32) = *(void *)(v138 + 32);
        *(void *)(v137 + 40) = *(void *)(v138 + 40);
        *(unsigned char *)(v137 + 48) = *(unsigned char *)(v138 + 48);
        *(void *)(v137 + 56) = *(void *)(v138 + 56);
        *(void *)(v137 + 64) = *(void *)(v138 + 64);
        *(_DWORD *)(v137 + 72) = *(_DWORD *)(v138 + 72);
        uint64_t v934 = *(int *)(v139 + 40);
        uint64_t v1055 = v138 + v934;
        uint64_t v1071 = v137 + v934;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v936 = v1055;
        uint64_t v935 = v1071;
        uint64_t v1053 = v309;
        uint64_t v1069 = (void (*)(char *, char *, uint64_t))v310;
        v310(v935, v936, v309);
        uint64_t v937 = *(int *)(v139 + 44);
        uint64_t v916 = (void *)(v137 + v937);
        uint64_t v917 = (void *)(v138 + v937);
        uint64_t v918 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v919 = *(void *)(v918 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v919 + 48))(v917, 1, v918)) {
          goto LABEL_304;
        }
        goto LABEL_323;
      case 0x5Cu:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(unsigned char *)(a1 + 9) = *((unsigned char *)a2 + 9);
        AlterSequint64_t Stmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
        uint64_t v314 = *(int *)(AlterSeqStmt + 28);
        uint64_t v315 = a1 + v314;
        uint64_t v316 = (uint64_t)a2 + v314;
        uint64_t v317 = type metadata accessor for UnknownStorage();
        uint64_t v318 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v317 - 8) + 16);
        swift_bridgeObjectRetain();
        v318(v315, v316, v317);
        uint64_t v319 = *(int *)(AlterSeqStmt + 32);
        uint64_t v137 = a1 + v319;
        uint64_t v138 = (uint64_t)a2 + v319;
        uint64_t v139 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v320 = *(void *)(v139 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v320 + 48))(v138, 1, v139)) {
          goto LABEL_230;
        }
        uint64_t v1091 = v320;
        *(void *)uint64_t v137 = *(void *)v138;
        *(void *)(v137 + 8) = *(void *)(v138 + 8);
        *(void *)(v137 + 16) = *(void *)(v138 + 16);
        *(void *)(v137 + 24) = *(void *)(v138 + 24);
        *(void *)(v137 + 32) = *(void *)(v138 + 32);
        *(void *)(v137 + 40) = *(void *)(v138 + 40);
        *(unsigned char *)(v137 + 48) = *(unsigned char *)(v138 + 48);
        *(void *)(v137 + 56) = *(void *)(v138 + 56);
        *(void *)(v137 + 64) = *(void *)(v138 + 64);
        *(_DWORD *)(v137 + 72) = *(_DWORD *)(v138 + 72);
        uint64_t v938 = *(int *)(v139 + 40);
        uint64_t v1056 = v138 + v938;
        uint64_t v1072 = v137 + v938;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v940 = v1056;
        uint64_t v939 = v1072;
        uint64_t v1053 = v317;
        uint64_t v1069 = (void (*)(char *, char *, uint64_t))v318;
        v318(v939, v940, v317);
        uint64_t v941 = *(int *)(v139 + 44);
        uint64_t v916 = (void *)(v137 + v941);
        uint64_t v917 = (void *)(v138 + v941);
        uint64_t v918 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v919 = *(void *)(v918 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v919 + 48))(v917, 1, v918)) {
          goto LABEL_304;
        }
        goto LABEL_323;
      case 0x5Du:
        uint64_t v321 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v321;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        uint64_t v322 = *(int *)(type metadata accessor for PgQuery_VariableSetStmt(0) + 32);
        uint64_t v323 = a1 + v322;
        uint64_t v324 = (uint64_t)a2 + v322;
        uint64_t v325 = type metadata accessor for UnknownStorage();
        uint64_t v326 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v325 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v326(v323, v324, v325);
        goto LABEL_325;
      case 0x5Eu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v327 = *(int *)(type metadata accessor for PgQuery_VariableShowStmt(0) + 20);
        uint64_t v328 = a1 + v327;
        uint64_t v329 = (uint64_t)a2 + v327;
        uint64_t v330 = type metadata accessor for UnknownStorage();
        uint64_t v331 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v330 - 8) + 16);
        swift_bridgeObjectRetain();
        v331(v328, v329, v330);
        goto LABEL_325;
      case 0x5Fu:
        uint64_t v332 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v332;
        uint64_t v333 = *(int *)(type metadata accessor for PgQuery_DiscardStmt(0) + 20);
        uint64_t v334 = a1 + v333;
        uint64_t v335 = (uint64_t)a2 + v333;
        uint64_t v336 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v336 - 8) + 16))(v334, v335, v336);
        goto LABEL_325;
      case 0x60u:
        uint64_t v337 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v337 - 8) + 16))(a1, a2, v337);
        Triguint64_t Stmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
        *(void *)(a1 + *(int *)(TrigStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(TrigStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x61u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
        uint64_t v339 = *(int *)(type metadata accessor for PgQuery_CreatePLangStmt(0) + 40);
        uint64_t v340 = a1 + v339;
        uint64_t v1096 = (uint64_t)a2 + v339;
        uint64_t v341 = type metadata accessor for UnknownStorage();
        uint64_t v342 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v341 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v342(v340, v1096, v341);
        goto LABEL_325;
      case 0x62u:
        uint64_t v343 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v343;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        uint64_t v344 = *(int *)(type metadata accessor for PgQuery_CreateRoleStmt(0) + 28);
        uint64_t v345 = a1 + v344;
        uint64_t v346 = (uint64_t)a2 + v344;
        uint64_t v347 = type metadata accessor for UnknownStorage();
        uint64_t v348 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v347 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v348(v345, v346, v347);
        goto LABEL_325;
      case 0x63u:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        AlterRoleuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
        uint64_t v350 = *(int *)(AlterRoleStmt + 24);
        uint64_t v351 = a1 + v350;
        uint64_t v352 = (uint64_t)a2 + v350;
        uint64_t v353 = type metadata accessor for UnknownStorage();
        uint64_t v354 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v353 - 8) + 16);
        swift_bridgeObjectRetain();
        v354(v351, v352, v353);
        uint64_t v355 = *(int *)(AlterRoleStmt + 28);
        uint64_t v356 = (void *)(a1 + v355);
        uint64_t v357 = (uint64_t *)((char *)a2 + v355);
        uint64_t v358 = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v359 = *(void *)(v358 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v359 + 48))(v357, 1, v358)) {
          goto LABEL_162;
        }
        goto LABEL_287;
      case 0x64u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v360 = *(int *)(type metadata accessor for PgQuery_DropRoleStmt(0) + 24);
        uint64_t v361 = a1 + v360;
        uint64_t v362 = (uint64_t)a2 + v360;
        uint64_t v363 = type metadata accessor for UnknownStorage();
        uint64_t v364 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v363 - 8) + 16);
        swift_bridgeObjectRetain();
        v364(v361, v362, v363);
        goto LABEL_325;
      case 0x65u:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
        uint64_t v365 = *(int *)(type metadata accessor for PgQuery_LockStmt(0) + 28);
        uint64_t v366 = a1 + v365;
        uint64_t v367 = (uint64_t)a2 + v365;
        uint64_t v368 = type metadata accessor for UnknownStorage();
        uint64_t v369 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v368 - 8) + 16);
        swift_bridgeObjectRetain();
        v369(v366, v367, v368);
        goto LABEL_325;
      case 0x66u:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        uint64_t v370 = *(int *)(type metadata accessor for PgQuery_ConstraintsSetStmt(0) + 24);
        uint64_t v371 = a1 + v370;
        uint64_t v372 = (uint64_t)a2 + v370;
        uint64_t v373 = type metadata accessor for UnknownStorage();
        uint64_t v374 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v373 - 8) + 16);
        swift_bridgeObjectRetain();
        v374(v371, v372, v373);
        goto LABEL_325;
      case 0x67u:
        uint64_t v375 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v375;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
        *(unsigned char *)(a1 + 36) = *((unsigned char *)a2 + 36);
        Reindexuint64_t Stmt = type metadata accessor for PgQuery_ReindexStmt(0);
        uint64_t v377 = *(int *)(ReindexStmt + 32);
        uint64_t v378 = a1 + v377;
        uint64_t v379 = (uint64_t)a2 + v377;
        uint64_t v380 = type metadata accessor for UnknownStorage();
        uint64_t v381 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v380 - 8) + 16);
        swift_bridgeObjectRetain();
        v381(v378, v379, v380);
        uint64_t v382 = *(int *)(ReindexStmt + 36);
        uint64_t v137 = a1 + v382;
        uint64_t v138 = (uint64_t)a2 + v382;
        uint64_t v139 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v383 = *(void *)(v139 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v138, 1, v139)) {
          goto LABEL_230;
        }
        uint64_t v1091 = v383;
        *(void *)uint64_t v137 = *(void *)v138;
        *(void *)(v137 + 8) = *(void *)(v138 + 8);
        *(void *)(v137 + 16) = *(void *)(v138 + 16);
        *(void *)(v137 + 24) = *(void *)(v138 + 24);
        *(void *)(v137 + 32) = *(void *)(v138 + 32);
        *(void *)(v137 + 40) = *(void *)(v138 + 40);
        *(unsigned char *)(v137 + 48) = *(unsigned char *)(v138 + 48);
        *(void *)(v137 + 56) = *(void *)(v138 + 56);
        *(void *)(v137 + 64) = *(void *)(v138 + 64);
        *(_DWORD *)(v137 + 72) = *(_DWORD *)(v138 + 72);
        uint64_t v942 = *(int *)(v139 + 40);
        uint64_t v1057 = v138 + v942;
        uint64_t v1073 = v137 + v942;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v944 = v1057;
        uint64_t v943 = v1073;
        uint64_t v1053 = v380;
        uint64_t v1069 = (void (*)(char *, char *, uint64_t))v381;
        v381(v943, v944, v380);
        uint64_t v945 = *(int *)(v139 + 44);
        uint64_t v916 = (void *)(v137 + v945);
        uint64_t v917 = (void *)(v138 + v945);
        uint64_t v918 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v919 = *(void *)(v918 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v919 + 48))(v917, 1, v918)) {
          goto LABEL_304;
        }
        goto LABEL_323;
      case 0x69u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
        Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
        uint64_t v385 = *(int *)(SchemaStmt + 28);
        uint64_t v386 = a1 + v385;
        uint64_t v1097 = (uint64_t)a2 + v385;
        uint64_t v159 = type metadata accessor for UnknownStorage();
        uint64_t v160 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v160(v386, v1097, v159);
        uint64_t v387 = *(int *)(SchemaStmt + 32);
        uint64_t v162 = (void *)(a1 + v387);
        uint64_t v163 = (uint64_t *)((char *)a2 + v387);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v165 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v165 + 48))(v163, 1, RoleSpec)) {
          goto LABEL_160;
        }
        goto LABEL_286;
      case 0x6Au:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t v388 = *(int *)(type metadata accessor for PgQuery_AlterDatabaseStmt(0) + 24);
        uint64_t v389 = a1 + v388;
        uint64_t v390 = (uint64_t)a2 + v388;
        uint64_t v391 = type metadata accessor for UnknownStorage();
        uint64_t v392 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v391 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v392(v389, v390, v391);
        goto LABEL_325;
      case 0x6Bu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        AlterDatabaseSetuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
        uint64_t v394 = *(int *)(AlterDatabaseSetStmt + 20);
        uint64_t v395 = a1 + v394;
        uint64_t v396 = (uint64_t)a2 + v394;
        uint64_t v397 = type metadata accessor for UnknownStorage();
        uint64_t v398 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v397 - 8) + 16);
        swift_bridgeObjectRetain();
        v398(v395, v396, v397);
        uint64_t v399 = *(int *)(AlterDatabaseSetStmt + 24);
        uint64_t v400 = (void *)(a1 + v399);
        uint64_t v401 = (uint64_t *)((char *)a2 + v399);
        VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
        uint64_t v403 = *(void *)(VariableSetStmt - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v403 + 48))(v401, 1, VariableSetStmt)) {
          goto LABEL_121;
        }
        goto LABEL_276;
      case 0x6Cu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        AlterRoleSetuint64_t Stmt = (int *)type metadata accessor for PgQuery_AlterRoleSetStmt(0);
        uint64_t v406 = AlterRoleSetStmt[5];
        uint64_t v407 = a1 + v406;
        uint64_t v408 = (uint64_t)a2 + v406;
        uint64_t v409 = type metadata accessor for UnknownStorage();
        uint64_t v410 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v409 - 8) + 16);
        swift_bridgeObjectRetain();
        uint64_t v1098 = v409;
        v410(v407, v408, v409);
        uint64_t v411 = AlterRoleSetStmt[6];
        uint64_t v412 = (void *)(a1 + v411);
        uint64_t v413 = (uint64_t *)((char *)a2 + v411);
        uint64_t v414 = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v415 = *(void *)(v414 - 8);
        uint64_t v1084 = (void (*)(char *, char *, uint64_t))v410;
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v415 + 48))(v413, 1, v414))
        {
          uint64_t v416 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
          memcpy(v412, v413, *(void *)(*(void *)(v416 - 8) + 64));
        }
        else
        {
          uint64_t v949 = *v413;
          *((unsigned char *)v412 + 8) = *((unsigned char *)v413 + 8);
          *uint64_t v412 = v949;
          v412[2] = v413[2];
          v412[3] = v413[3];
          *((_DWORD *)v412 + 8) = *((_DWORD *)v413 + 8);
          uint64_t v950 = *(int *)(v414 + 28);
          uint64_t v1074 = (char *)v412 + v950;
          uint64_t v951 = (char *)v413 + v950;
          swift_bridgeObjectRetain();
          v410((uint64_t)v1074, (uint64_t)v951, v1098);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v415 + 56))(v412, 0, 1, v414);
        }
        uint64_t v952 = AlterRoleSetStmt[7];
        uint64_t v953 = (void *)(a1 + v952);
        uint64_t v954 = (uint64_t *)((char *)a2 + v952);
        uint64_t v955 = type metadata accessor for PgQuery_VariableSetStmt(0);
        uint64_t v956 = *(void *)(v955 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v956 + 48))(v954, 1, v955))
        {
          uint64_t v957 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
          memcpy(v953, v954, *(void *)(*(void *)(v957 - 8) + 64));
        }
        else
        {
          uint64_t v1012 = *v954;
          *((unsigned char *)v953 + 8) = *((unsigned char *)v954 + 8);
          *uint64_t v953 = v1012;
          v953[2] = v954[2];
          v953[3] = v954[3];
          v953[4] = v954[4];
          *((unsigned char *)v953 + 40) = *((unsigned char *)v954 + 40);
          uint64_t v1013 = *(int *)(v955 + 32);
          uint64_t v1014 = (char *)v953 + v1013;
          uint64_t v1015 = (char *)v954 + v1013;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1084(v1014, v1015, v1098);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v956 + 56))(v953, 0, 1, v955);
        }
        goto LABEL_325;
      case 0x6Du:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
        uint64_t v417 = *(int *)(type metadata accessor for PgQuery_CreateConversionStmt(0) + 36);
        uint64_t v418 = a1 + v417;
        uint64_t v1099 = (uint64_t)a2 + v417;
        uint64_t v419 = type metadata accessor for UnknownStorage();
        uint64_t v420 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v419 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v420(v418, v1099, v419);
        goto LABEL_325;
      case 0x6Eu:
        uint64_t v421 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v421 - 8) + 16))(a1, a2, v421);
        Castuint64_t Stmt = type metadata accessor for PgQuery_CreateCastStmt(0);
        *(void *)(a1 + *(int *)(CastStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CastStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x6Fu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        OpClassuint64_t Stmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
        uint64_t v424 = *(int *)(OpClassStmt + 36);
        uint64_t v1066 = (uint64_t)a2 + v424;
        uint64_t v1085 = a1 + v424;
        uint64_t v425 = type metadata accessor for UnknownStorage();
        uint64_t v426 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v425 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v426(v1085, v1066, v425);
        uint64_t v427 = *(int *)(OpClassStmt + 40);
        uint64_t v230 = a1 + v427;
        uint64_t v231 = (uint64_t)a2 + v427;
        uint64_t v428 = type metadata accessor for PgQuery_TypeName(0);
        uint64_t v429 = *(void *)(v428 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v429 + 48))(v231, 1, v428)) {
          goto LABEL_298;
        }
        *(void *)uint64_t v230 = *(void *)v231;
        *(_DWORD *)(v230 + 8) = *(_DWORD *)(v231 + 8);
        *(unsigned char *)(v230 + 12) = *(unsigned char *)(v231 + 12);
        *(unsigned char *)(v230 + 13) = *(unsigned char *)(v231 + 13);
        *(void *)(v230 + 16) = *(void *)(v231 + 16);
        *(_DWORD *)(v230 + 24) = *(_DWORD *)(v231 + 24);
        *(void *)(v230 + 32) = *(void *)(v231 + 32);
        *(_DWORD *)(v230 + 40) = *(_DWORD *)(v231 + 40);
        uint64_t v958 = *(int *)(v428 + 48);
        uint64_t v959 = v230 + v958;
        uint64_t v960 = v231 + v958;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v426(v959, v960, v425);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v429 + 56))(v230, 0, 1, v428);
        goto LABEL_325;
      case 0x70u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t v430 = *(int *)(type metadata accessor for PgQuery_CreateOpFamilyStmt(0) + 24);
        uint64_t v431 = a1 + v430;
        uint64_t v432 = (uint64_t)a2 + v430;
        uint64_t v433 = type metadata accessor for UnknownStorage();
        uint64_t v434 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v433 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v434(v431, v432, v433);
        goto LABEL_325;
      case 0x71u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
        *(void *)(a1 + 32) = a2[4];
        uint64_t v435 = *(int *)(type metadata accessor for PgQuery_AlterOpFamilyStmt(0) + 32);
        uint64_t v436 = a1 + v435;
        uint64_t v437 = (uint64_t)a2 + v435;
        uint64_t v438 = type metadata accessor for UnknownStorage();
        uint64_t v439 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v438 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v439(v436, v437, v438);
        goto LABEL_325;
      case 0x72u:
        uint64_t v440 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v440 - 8) + 16))(a1, a2, v440);
        Prepareuint64_t Stmt = type metadata accessor for PgQuery_PrepareStmt(0);
        *(void *)(a1 + *(int *)(PrepareStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(PrepareStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x73u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t v442 = *(int *)(type metadata accessor for PgQuery_ExecuteStmt(0) + 24);
        uint64_t v443 = a1 + v442;
        uint64_t v444 = (uint64_t)a2 + v442;
        uint64_t v445 = type metadata accessor for UnknownStorage();
        uint64_t v446 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v445 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v446(v443, v444, v445);
        goto LABEL_325;
      case 0x74u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v447 = *(int *)(type metadata accessor for PgQuery_DeallocateStmt(0) + 20);
        uint64_t v448 = a1 + v447;
        uint64_t v449 = (uint64_t)a2 + v447;
        uint64_t v450 = type metadata accessor for UnknownStorage();
        uint64_t v451 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v450 - 8) + 16);
        swift_bridgeObjectRetain();
        v451(v448, v449, v450);
        goto LABEL_325;
      case 0x75u:
        uint64_t v452 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v452 - 8) + 16))(a1, a2, v452);
        DeclareCursoruint64_t Stmt = type metadata accessor for PgQuery_DeclareCursorStmt(0);
        *(void *)(a1 + *(int *)(DeclareCursorStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(DeclareCursorStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x76u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        TableSpaceuint64_t Stmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
        uint64_t v455 = *(int *)(TableSpaceStmt + 28);
        uint64_t v1086 = (uint64_t)a2 + v455;
        uint64_t v1100 = a1 + v455;
        uint64_t v159 = type metadata accessor for UnknownStorage();
        uint64_t v160 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v160(v1100, v1086, v159);
        uint64_t v456 = *(int *)(TableSpaceStmt + 32);
        uint64_t v162 = (void *)(a1 + v456);
        uint64_t v163 = (uint64_t *)((char *)a2 + v456);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v165 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v165 + 48))(v163, 1, RoleSpec)) {
          goto LABEL_160;
        }
        goto LABEL_286;
      case 0x77u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v457 = *(int *)(type metadata accessor for PgQuery_DropTableSpaceStmt(0) + 24);
        uint64_t v458 = a1 + v457;
        uint64_t v459 = (uint64_t)a2 + v457;
        uint64_t v460 = type metadata accessor for UnknownStorage();
        uint64_t v461 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v460 - 8) + 16);
        swift_bridgeObjectRetain();
        v461(v458, v459, v460);
        goto LABEL_325;
      case 0x78u:
        uint64_t v462 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v462 - 8) + 16))(a1, a2, v462);
        AlterObjectDependsuint64_t Stmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
        *(void *)(a1 + *(int *)(AlterObjectDependsStmt + 20)) = *(uint64_t *)((char *)a2
                                                                             + *(int *)(AlterObjectDependsStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x79u:
        uint64_t v464 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v464 - 8) + 16))(a1, a2, v464);
        AlterObjectSchemauint64_t Stmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
        *(void *)(a1 + *(int *)(AlterObjectSchemaStmt + 20)) = *(uint64_t *)((char *)a2
                                                                            + *(int *)(AlterObjectSchemaStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x7Au:
        uint64_t v466 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v466 - 8) + 16))(a1, a2, v466);
        AlterOwneruint64_t Stmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
        *(void *)(a1 + *(int *)(AlterOwnerStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(AlterOwnerStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x7Bu:
        *(void *)a1 = *a2;
        AlterOperatoruint64_t Stmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
        uint64_t v469 = *(int *)(AlterOperatorStmt + 20);
        uint64_t v470 = a1 + v469;
        uint64_t v471 = (uint64_t)a2 + v469;
        uint64_t v239 = type metadata accessor for UnknownStorage();
        uint64_t v240 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v239 - 8) + 16);
        swift_bridgeObjectRetain();
        v240(v470, v471, v239);
        uint64_t v472 = *(int *)(AlterOperatorStmt + 24);
        uint64_t v242 = (void *)(a1 + v472);
        uint64_t v243 = (uint64_t *)((char *)a2 + v472);
        uint64_t ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
        uint64_t v245 = *(void *)(ObjectWithArgs - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v245 + 48))(v243, 1, ObjectWithArgs))
        {
LABEL_84:
          uint64_t v246 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          memcpy(v242, v243, *(void *)(*(void *)(v246 - 8) + 64));
        }
        else
        {
LABEL_267:
          *uint64_t v242 = *v243;
          v242[1] = v243[1];
          *((unsigned char *)v242 + 16) = *((unsigned char *)v243 + 16);
          uint64_t v932 = *(int *)(ObjectWithArgs + 28);
          uint64_t v1114 = (char *)v242 + v932;
          uint64_t v933 = (char *)v243 + v932;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v240((uint64_t)v1114, (uint64_t)v933, v239);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v245 + 56))(v242, 0, 1, ObjectWithArgs);
        }
        goto LABEL_325;
      case 0x7Cu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v473 = *(int *)(type metadata accessor for PgQuery_AlterTypeStmt(0) + 24);
        uint64_t v474 = a1 + v473;
        uint64_t v475 = (uint64_t)a2 + v473;
        uint64_t v476 = type metadata accessor for UnknownStorage();
        uint64_t v477 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v476 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v477(v474, v475, v476);
        goto LABEL_325;
      case 0x7Du:
        *(void *)a1 = *a2;
        uint64_t v478 = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 8) = v478;
        uint64_t v479 = *(int *)(type metadata accessor for PgQuery_DropOwnedStmt(0) + 24);
        uint64_t v480 = a1 + v479;
        uint64_t v481 = (uint64_t)a2 + v479;
        uint64_t v482 = type metadata accessor for UnknownStorage();
        uint64_t v483 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v482 - 8) + 16);
        swift_bridgeObjectRetain();
        v483(v480, v481, v482);
        goto LABEL_325;
      case 0x7Eu:
        *(void *)a1 = *a2;
        ReassignOwneduint64_t Stmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
        uint64_t v485 = *(int *)(ReassignOwnedStmt + 20);
        uint64_t v486 = a1 + v485;
        uint64_t v487 = (uint64_t)a2 + v485;
        uint64_t v353 = type metadata accessor for UnknownStorage();
        uint64_t v354 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v353 - 8) + 16);
        swift_bridgeObjectRetain();
        v354(v486, v487, v353);
        uint64_t v488 = *(int *)(ReassignOwnedStmt + 24);
        uint64_t v356 = (void *)(a1 + v488);
        uint64_t v357 = (uint64_t *)((char *)a2 + v488);
        uint64_t v358 = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v359 = *(void *)(v358 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v359 + 48))(v357, 1, v358)) {
          goto LABEL_162;
        }
        goto LABEL_287;
      case 0x7Fu:
        *(void *)a1 = *a2;
        CompositeTypeuint64_t Stmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
        uint64_t v490 = *(int *)(CompositeTypeStmt + 20);
        uint64_t v491 = a1 + v490;
        uint64_t v492 = (uint64_t)a2 + v490;
        uint64_t v493 = type metadata accessor for UnknownStorage();
        uint64_t v494 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v493 - 8) + 16);
        swift_bridgeObjectRetain();
        v494(v491, v492, v493);
        uint64_t v495 = *(int *)(CompositeTypeStmt + 24);
        uint64_t v137 = a1 + v495;
        uint64_t v138 = (uint64_t)a2 + v495;
        uint64_t v139 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v496 = *(void *)(v139 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v496 + 48))(v138, 1, v139)) {
          goto LABEL_230;
        }
        uint64_t v1091 = v496;
        *(void *)uint64_t v137 = *(void *)v138;
        *(void *)(v137 + 8) = *(void *)(v138 + 8);
        *(void *)(v137 + 16) = *(void *)(v138 + 16);
        *(void *)(v137 + 24) = *(void *)(v138 + 24);
        *(void *)(v137 + 32) = *(void *)(v138 + 32);
        *(void *)(v137 + 40) = *(void *)(v138 + 40);
        *(unsigned char *)(v137 + 48) = *(unsigned char *)(v138 + 48);
        *(void *)(v137 + 56) = *(void *)(v138 + 56);
        *(void *)(v137 + 64) = *(void *)(v138 + 64);
        *(_DWORD *)(v137 + 72) = *(_DWORD *)(v138 + 72);
        uint64_t v961 = *(int *)(v139 + 40);
        uint64_t v1058 = v138 + v961;
        uint64_t v1075 = v137 + v961;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v963 = v1058;
        uint64_t v962 = v1075;
        uint64_t v1053 = v493;
        uint64_t v1069 = (void (*)(char *, char *, uint64_t))v494;
        v494(v962, v963, v493);
        uint64_t v964 = *(int *)(v139 + 44);
        uint64_t v916 = (void *)(v137 + v964);
        uint64_t v917 = (void *)(v138 + v964);
        uint64_t v918 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v919 = *(void *)(v918 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v919 + 48))(v917, 1, v918)) {
          goto LABEL_304;
        }
        goto LABEL_323;
      case 0x80u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v497 = *(int *)(type metadata accessor for PgQuery_CreateEnumStmt(0) + 24);
        uint64_t v498 = a1 + v497;
        uint64_t v499 = (uint64_t)a2 + v497;
        uint64_t v500 = type metadata accessor for UnknownStorage();
        uint64_t v501 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v500 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v501(v498, v499, v500);
        goto LABEL_325;
      case 0x81u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v502 = *(int *)(type metadata accessor for PgQuery_CreateRangeStmt(0) + 24);
        uint64_t v503 = a1 + v502;
        uint64_t v504 = (uint64_t)a2 + v502;
        uint64_t v505 = type metadata accessor for UnknownStorage();
        uint64_t v506 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v505 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v506(v503, v504, v505);
        goto LABEL_325;
      case 0x82u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
        *(unsigned char *)(a1 + 57) = *((unsigned char *)a2 + 57);
        uint64_t v507 = *(int *)(type metadata accessor for PgQuery_AlterEnumStmt(0) + 40);
        uint64_t v508 = a1 + v507;
        uint64_t v1101 = (uint64_t)a2 + v507;
        uint64_t v509 = type metadata accessor for UnknownStorage();
        uint64_t v510 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v509 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v510(v508, v1101, v509);
        goto LABEL_325;
      case 0x83u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v511 = *(int *)(type metadata accessor for PgQuery_AlterTSDictionaryStmt(0) + 24);
        uint64_t v512 = a1 + v511;
        uint64_t v513 = (uint64_t)a2 + v511;
        uint64_t v514 = type metadata accessor for UnknownStorage();
        uint64_t v515 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v514 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v515(v512, v513, v514);
        goto LABEL_325;
      case 0x84u:
        uint64_t v516 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v516;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        *(unsigned char *)(a1 + 41) = *((unsigned char *)a2 + 41);
        *(unsigned char *)(a1 + 42) = *((unsigned char *)a2 + 42);
        uint64_t v517 = *(int *)(type metadata accessor for PgQuery_AlterTSConfigurationStmt(0) + 44);
        uint64_t v518 = a1 + v517;
        uint64_t v519 = (uint64_t)a2 + v517;
        uint64_t v520 = type metadata accessor for UnknownStorage();
        uint64_t v521 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v520 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v521(v518, v519, v520);
        goto LABEL_325;
      case 0x85u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        uint64_t v522 = *(int *)(type metadata accessor for PgQuery_CreateFdwStmt(0) + 28);
        uint64_t v523 = a1 + v522;
        uint64_t v524 = (uint64_t)a2 + v522;
        uint64_t v525 = type metadata accessor for UnknownStorage();
        uint64_t v526 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v525 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v526(v523, v524, v525);
        goto LABEL_325;
      case 0x86u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        uint64_t v527 = *(int *)(type metadata accessor for PgQuery_AlterFdwStmt(0) + 28);
        uint64_t v528 = a1 + v527;
        uint64_t v529 = (uint64_t)a2 + v527;
        uint64_t v530 = type metadata accessor for UnknownStorage();
        uint64_t v531 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v530 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v531(v528, v529, v530);
        goto LABEL_325;
      case 0x87u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
        *(void *)(a1 + 72) = a2[9];
        uint64_t v532 = *(int *)(type metadata accessor for PgQuery_CreateForeignServerStmt(0) + 40);
        uint64_t v1087 = (uint64_t)a2 + v532;
        uint64_t v1102 = a1 + v532;
        uint64_t v533 = type metadata accessor for UnknownStorage();
        uint64_t v534 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v533 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v534(v1102, v1087, v533);
        goto LABEL_325;
      case 0x88u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
        uint64_t v535 = *(int *)(type metadata accessor for PgQuery_AlterForeignServerStmt(0) + 32);
        uint64_t v536 = a1 + v535;
        uint64_t v537 = (uint64_t)a2 + v535;
        uint64_t v538 = type metadata accessor for UnknownStorage();
        uint64_t v539 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v538 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v539(v536, v537, v538);
        goto LABEL_325;
      case 0x89u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        UserMappinguint64_t Stmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
        uint64_t v541 = *(int *)(UserMappingStmt + 28);
        uint64_t v542 = a1 + v541;
        uint64_t v1103 = (uint64_t)a2 + v541;
        uint64_t v159 = type metadata accessor for UnknownStorage();
        uint64_t v160 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v160(v542, v1103, v159);
        uint64_t v543 = *(int *)(UserMappingStmt + 32);
        uint64_t v162 = (void *)(a1 + v543);
        uint64_t v163 = (uint64_t *)((char *)a2 + v543);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v165 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v165 + 48))(v163, 1, RoleSpec)) {
          goto LABEL_160;
        }
        goto LABEL_286;
      case 0x8Au:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        AlterUserMappinguint64_t Stmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
        uint64_t v545 = *(int *)(AlterUserMappingStmt + 24);
        uint64_t v546 = a1 + v545;
        uint64_t v1104 = (uint64_t)a2 + v545;
        uint64_t v159 = type metadata accessor for UnknownStorage();
        uint64_t v160 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v159 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v160(v546, v1104, v159);
        uint64_t v547 = *(int *)(AlterUserMappingStmt + 28);
        uint64_t v162 = (void *)(a1 + v547);
        uint64_t v163 = (uint64_t *)((char *)a2 + v547);
        uint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v165 = *(void *)(RoleSpec - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v165 + 48))(v163, 1, RoleSpec))
        {
LABEL_160:
          uint64_t v548 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
          memcpy(v162, v163, *(void *)(*(void *)(v548 - 8) + 64));
        }
        else
        {
LABEL_286:
          uint64_t v965 = *v163;
          *((unsigned char *)v162 + 8) = *((unsigned char *)v163 + 8);
          *uint64_t v162 = v965;
          v162[2] = v163[2];
          v162[3] = v163[3];
          *((_DWORD *)v162 + 8) = *((_DWORD *)v163 + 8);
          uint64_t v966 = *(int *)(RoleSpec + 28);
          uint64_t v967 = (char *)v162 + v966;
          uint64_t v968 = (char *)v163 + v966;
          swift_bridgeObjectRetain();
          v160((uint64_t)v967, (uint64_t)v968, v159);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v165 + 56))(v162, 0, 1, RoleSpec);
        }
        goto LABEL_325;
      case 0x8Bu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        DropUserMappinguint64_t Stmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
        uint64_t v550 = *(int *)(DropUserMappingStmt + 24);
        uint64_t v551 = a1 + v550;
        uint64_t v552 = (uint64_t)a2 + v550;
        uint64_t v353 = type metadata accessor for UnknownStorage();
        uint64_t v354 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v353 - 8) + 16);
        swift_bridgeObjectRetain();
        v354(v551, v552, v353);
        uint64_t v553 = *(int *)(DropUserMappingStmt + 28);
        uint64_t v356 = (void *)(a1 + v553);
        uint64_t v357 = (uint64_t *)((char *)a2 + v553);
        uint64_t v358 = type metadata accessor for PgQuery_RoleSpec(0);
        uint64_t v359 = *(void *)(v358 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v359 + 48))(v357, 1, v358))
        {
LABEL_162:
          uint64_t v554 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RoleSpec?);
          memcpy(v356, v357, *(void *)(*(void *)(v554 - 8) + 64));
        }
        else
        {
LABEL_287:
          uint64_t v969 = *v357;
          *((unsigned char *)v356 + 8) = *((unsigned char *)v357 + 8);
          *uint64_t v356 = v969;
          v356[2] = v357[2];
          v356[3] = v357[3];
          *((_DWORD *)v356 + 8) = *((_DWORD *)v357 + 8);
          uint64_t v970 = *(int *)(v358 + 28);
          uint64_t v971 = (char *)v356 + v970;
          uint64_t v972 = (char *)v357 + v970;
          swift_bridgeObjectRetain();
          v354((uint64_t)v971, (uint64_t)v972, v353);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v359 + 56))(v356, 0, 1, v358);
        }
        goto LABEL_325;
      case 0x8Cu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
        uint64_t v555 = *(int *)(type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0) + 28);
        uint64_t v556 = a1 + v555;
        uint64_t v557 = (uint64_t)a2 + v555;
        uint64_t v558 = type metadata accessor for UnknownStorage();
        uint64_t v559 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v558 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v559(v556, v557, v558);
        goto LABEL_325;
      case 0x8Du:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v560 = a2[2];
        *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
        *(void *)(a1 + 16) = v560;
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
        uint64_t v561 = *(int *)(type metadata accessor for PgQuery_AlterTableMoveAllStmt(0) + 36);
        uint64_t v562 = a1 + v561;
        uint64_t v563 = (uint64_t)a2 + v561;
        uint64_t v564 = type metadata accessor for UnknownStorage();
        uint64_t v565 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v564 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v565(v562, v563, v564);
        goto LABEL_325;
      case 0x8Eu:
        uint64_t v566 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v566 - 8) + 16))(a1, a2, v566);
        SecLabeluint64_t Stmt = type metadata accessor for PgQuery_SecLabelStmt(0);
        *(void *)(a1 + *(int *)(SecLabelStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SecLabelStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x8Fu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        ForeignTableuint64_t Stmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
        uint64_t v569 = *(int *)(ForeignTableStmt + 24);
        uint64_t v570 = a1 + v569;
        uint64_t v1105 = (uint64_t)a2 + v569;
        uint64_t v571 = type metadata accessor for UnknownStorage();
        uint64_t v572 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v571 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v572(v570, v1105, v571);
        uint64_t v573 = *(int *)(ForeignTableStmt + 28);
        uint64_t v574 = (char *)(a1 + v573);
        uint64_t v575 = (char *)a2 + v573;
        uint64_t v576 = type metadata accessor for PgQuery_CreateStmt(0);
        uint64_t v577 = *(void *)(v576 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v577 + 48))(v575, 1, v576))
        {
          uint64_t v578 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
          memcpy(v574, v575, *(void *)(*(void *)(v578 - 8) + 64));
        }
        else
        {
          v572((uint64_t)v574, (uint64_t)v575, v571);
          *(void *)&v574[*(int *)(v576 + 20)] = *(void *)&v575[*(int *)(v576 + 20)];
          uint64_t v973 = *(void (**)(char *, void, uint64_t, uint64_t))(v577 + 56);
          swift_retain();
          v973(v574, 0, 1, v576);
        }
        goto LABEL_325;
      case 0x90u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        uint64_t v579 = a2[6];
        *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
        *(void *)(a1 + 48) = v579;
        *(void *)(a1 + 64) = a2[8];
        *(void *)(a1 + 72) = a2[9];
        uint64_t v580 = *(int *)(type metadata accessor for PgQuery_ImportForeignSchemaStmt(0) + 40);
        uint64_t v1088 = (uint64_t)a2 + v580;
        uint64_t v1106 = a1 + v580;
        uint64_t v581 = type metadata accessor for UnknownStorage();
        uint64_t v582 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v581 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v582(v1106, v1088, v581);
        goto LABEL_325;
      case 0x91u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 24) = a2[3];
        uint64_t v583 = *(int *)(type metadata accessor for PgQuery_CreateExtensionStmt(0) + 28);
        uint64_t v584 = a1 + v583;
        uint64_t v585 = (uint64_t)a2 + v583;
        uint64_t v586 = type metadata accessor for UnknownStorage();
        uint64_t v587 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v586 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v587(v584, v585, v586);
        goto LABEL_325;
      case 0x92u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t v588 = *(int *)(type metadata accessor for PgQuery_AlterExtensionStmt(0) + 24);
        uint64_t v589 = a1 + v588;
        uint64_t v590 = (uint64_t)a2 + v588;
        uint64_t v591 = type metadata accessor for UnknownStorage();
        uint64_t v592 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v591 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v592(v589, v590, v591);
        goto LABEL_325;
      case 0x93u:
        uint64_t v593 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v593 - 8) + 16))(a1, a2, v593);
        AlterExtensionContentsuint64_t Stmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
        *(void *)(a1 + *(int *)(AlterExtensionContentsStmt + 20)) = *(uint64_t *)((char *)a2
                                                                                 + *(int *)(AlterExtensionContentsStmt
                                                                                          + 20));
        swift_retain();
        goto LABEL_325;
      case 0x94u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        uint64_t v595 = *(int *)(type metadata accessor for PgQuery_CreateEventTrigStmt(0) + 32);
        uint64_t v596 = a1 + v595;
        uint64_t v1107 = (uint64_t)a2 + v595;
        uint64_t v597 = type metadata accessor for UnknownStorage();
        uint64_t v598 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v597 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v598(v596, v1107, v597);
        goto LABEL_325;
      case 0x95u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        uint64_t v599 = *(int *)(type metadata accessor for PgQuery_AlterEventTrigStmt(0) + 24);
        uint64_t v600 = a1 + v599;
        uint64_t v601 = (uint64_t)a2 + v599;
        uint64_t v602 = type metadata accessor for UnknownStorage();
        uint64_t v603 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v602 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v603(v600, v601, v602);
        goto LABEL_325;
      case 0x96u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(unsigned char *)(a1 + 1) = *((unsigned char *)a2 + 1);
        RefreshMatViewuint64_t Stmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
        uint64_t v605 = *(int *)(RefreshMatViewStmt + 24);
        uint64_t v606 = a1 + v605;
        uint64_t v607 = (uint64_t)a2 + v605;
        uint64_t v608 = type metadata accessor for UnknownStorage();
        uint64_t v609 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v608 - 8) + 16);
        v609(v606, v607, v608);
        uint64_t v610 = *(int *)(RefreshMatViewStmt + 28);
        uint64_t v137 = a1 + v610;
        uint64_t v138 = (uint64_t)a2 + v610;
        uint64_t v139 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v611 = *(void *)(v139 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v611 + 48))(v138, 1, v139)) {
          goto LABEL_230;
        }
        uint64_t v1091 = v611;
        *(void *)uint64_t v137 = *(void *)v138;
        *(void *)(v137 + 8) = *(void *)(v138 + 8);
        *(void *)(v137 + 16) = *(void *)(v138 + 16);
        *(void *)(v137 + 24) = *(void *)(v138 + 24);
        *(void *)(v137 + 32) = *(void *)(v138 + 32);
        *(void *)(v137 + 40) = *(void *)(v138 + 40);
        *(unsigned char *)(v137 + 48) = *(unsigned char *)(v138 + 48);
        *(void *)(v137 + 56) = *(void *)(v138 + 56);
        *(void *)(v137 + 64) = *(void *)(v138 + 64);
        *(_DWORD *)(v137 + 72) = *(_DWORD *)(v138 + 72);
        uint64_t v974 = *(int *)(v139 + 40);
        uint64_t v1059 = v138 + v974;
        uint64_t v1076 = v137 + v974;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v609(v1076, v1059, v608);
        uint64_t v975 = *(int *)(v139 + 44);
        uint64_t v916 = (void *)(v137 + v975);
        uint64_t v917 = (void *)(v138 + v975);
        uint64_t v976 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v977 = *(void *)(v976 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v977 + 48))(v917, 1, v976)) {
          goto LABEL_304;
        }
        goto LABEL_317;
      case 0x97u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        uint64_t v612 = *(int *)(type metadata accessor for PgQuery_ReplicaIdentityStmt(0) + 24);
        uint64_t v613 = a1 + v612;
        uint64_t v614 = (uint64_t)a2 + v612;
        uint64_t v615 = type metadata accessor for UnknownStorage();
        uint64_t v616 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v615 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v616(v613, v614, v615);
        goto LABEL_325;
      case 0x98u:
        uint64_t v397 = type metadata accessor for UnknownStorage();
        uint64_t v398 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v397 - 8) + 16);
        v398(a1, (uint64_t)a2, v397);
        uint64_t v617 = *(int *)(type metadata accessor for PgQuery_AlterSystemStmt(0) + 20);
        uint64_t v400 = (void *)(a1 + v617);
        uint64_t v401 = (uint64_t *)((char *)a2 + v617);
        VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
        uint64_t v403 = *(void *)(VariableSetStmt - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v403 + 48))(v401, 1, VariableSetStmt))
        {
LABEL_121:
          uint64_t v404 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
          memcpy(v400, v401, *(void *)(*(void *)(v404 - 8) + 64));
        }
        else
        {
LABEL_276:
          uint64_t v946 = *v401;
          *((unsigned char *)v400 + 8) = *((unsigned char *)v401 + 8);
          *uint64_t v400 = v946;
          v400[2] = v401[2];
          v400[3] = v401[3];
          v400[4] = v401[4];
          *((unsigned char *)v400 + 40) = *((unsigned char *)v401 + 40);
          uint64_t v947 = *(int *)(VariableSetStmt + 32);
          uint64_t v1115 = (char *)v400 + v947;
          uint64_t v948 = (char *)v401 + v947;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v398((uint64_t)v1115, (uint64_t)v948, v397);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v403 + 56))(v400, 0, 1, VariableSetStmt);
        }
        goto LABEL_325;
      case 0x99u:
        uint64_t v618 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v618 - 8) + 16))(a1, a2, v618);
        Policyuint64_t Stmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
        *(void *)(a1 + *(int *)(PolicyStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(PolicyStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x9Au:
        uint64_t v620 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v620 - 8) + 16))(a1, a2, v620);
        AlterPolicyuint64_t Stmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
        *(void *)(a1 + *(int *)(AlterPolicyStmt + 20)) = *(uint64_t *)((char *)a2 + *(int *)(AlterPolicyStmt + 20));
        swift_retain();
        goto LABEL_325;
      case 0x9Bu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        Transformuint64_t Stmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
        uint64_t v623 = *(int *)(TransformStmt + 24);
        uint64_t v624 = a1 + v623;
        uint64_t v625 = (uint64_t)a2 + v623;
        uint64_t v626 = type metadata accessor for UnknownStorage();
        v627 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v626 - 8) + 16);
        swift_bridgeObjectRetain();
        v627(v624, v625, v626);
        uint64_t v1051 = TransformStmt;
        uint64_t v628 = *(int *)(TransformStmt + 28);
        uint64_t v629 = (void *)(a1 + v628);
        uint64_t v630 = (uint64_t *)((char *)a2 + v628);
        uint64_t v631 = type metadata accessor for PgQuery_TypeName(0);
        uint64_t v632 = *(void *)(v631 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v632 + 48))(v630, 1, v631))
        {
          uint64_t v633 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
          memcpy(v629, v630, *(void *)(*(void *)(v633 - 8) + 64));
        }
        else
        {
          void *v629 = *v630;
          *((_DWORD *)v629 + 2) = *((_DWORD *)v630 + 2);
          *((unsigned char *)v629 + 12) = *((unsigned char *)v630 + 12);
          *((unsigned char *)v629 + 13) = *((unsigned char *)v630 + 13);
          v629[2] = v630[2];
          *((_DWORD *)v629 + 6) = *((_DWORD *)v630 + 6);
          v629[4] = v630[4];
          *((_DWORD *)v629 + 10) = *((_DWORD *)v630 + 10);
          uint64_t v978 = *(int *)(v631 + 48);
          uint64_t v1050 = (char *)v629 + v978;
          uint64_t v979 = (char *)v630 + v978;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v627((uint64_t)v1050, (uint64_t)v979, v626);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v632 + 56))(v629, 0, 1, v631);
        }
        uint64_t v980 = *(int *)(v1051 + 32);
        uint64_t v981 = (void *)(a1 + v980);
        uint64_t v982 = (uint64_t *)((char *)a2 + v980);
        uint64_t v983 = type metadata accessor for PgQuery_ObjectWithArgs(0);
        uint64_t v984 = *(void *)(v983 - 8);
        uint64_t v985 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v984 + 48);
        if (v985(v982, 1, v983))
        {
          uint64_t v986 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          memcpy(v981, v982, *(void *)(*(void *)(v986 - 8) + 64));
          uint64_t v987 = v626;
        }
        else
        {
          *uint64_t v981 = *v982;
          v981[1] = v982[1];
          *((unsigned char *)v981 + 16) = *((unsigned char *)v982 + 16);
          uint64_t v1016 = *(int *)(v983 + 28);
          uint64_t v1048 = (char *)v981 + v1016;
          uint64_t v1017 = (char *)v982 + v1016;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v1018 = v1017;
          uint64_t v987 = v626;
          v627((uint64_t)v1048, (uint64_t)v1018, v626);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v984 + 56))(v981, 0, 1, v983);
        }
        uint64_t v1019 = *(int *)(v1051 + 36);
        uint64_t v1020 = (void *)(a1 + v1019);
        uint64_t v1021 = (uint64_t *)((char *)a2 + v1019);
        if (v985(v1021, 1, v983))
        {
          uint64_t v1022 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          memcpy(v1020, v1021, *(void *)(*(void *)(v1022 - 8) + 64));
        }
        else
        {
          *uint64_t v1020 = *v1021;
          v1020[1] = v1021[1];
          *((unsigned char *)v1020 + 16) = *((unsigned char *)v1021 + 16);
          uint64_t v1027 = *(int *)(v983 + 28);
          uint64_t v1028 = (char *)v1020 + v1027;
          uint64_t v1029 = (char *)v1021 + v1027;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v627((uint64_t)v1028, (uint64_t)v1029, v987);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v984 + 56))(v1020, 0, 1, v983);
        }
        goto LABEL_325;
      case 0x9Cu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        uint64_t v634 = *(int *)(type metadata accessor for PgQuery_CreateAmStmt(0) + 28);
        uint64_t v635 = a1 + v634;
        uint64_t v636 = (uint64_t)a2 + v634;
        uint64_t v637 = type metadata accessor for UnknownStorage();
        uint64_t v638 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v637 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v638(v635, v636, v637);
        goto LABEL_325;
      case 0x9Du:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t v639 = *(int *)(type metadata accessor for PgQuery_CreatePublicationStmt(0) + 32);
        uint64_t v640 = a1 + v639;
        uint64_t v641 = (uint64_t)a2 + v639;
        uint64_t v642 = type metadata accessor for UnknownStorage();
        uint64_t v643 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v642 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v643(v640, v641, v642);
        goto LABEL_325;
      case 0x9Eu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        uint64_t v644 = a2[5];
        *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
        *(void *)(a1 + 40) = v644;
        uint64_t v645 = *(int *)(type metadata accessor for PgQuery_AlterPublicationStmt(0) + 36);
        uint64_t v646 = a1 + v645;
        uint64_t v647 = (uint64_t)a2 + v645;
        uint64_t v648 = type metadata accessor for UnknownStorage();
        uint64_t v649 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v648 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v649(v646, v647, v648);
        goto LABEL_325;
      case 0x9Fu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        uint64_t v650 = *(int *)(type metadata accessor for PgQuery_CreateSubscriptionStmt(0) + 32);
        uint64_t v651 = a1 + v650;
        uint64_t v1108 = (uint64_t)a2 + v650;
        uint64_t v652 = type metadata accessor for UnknownStorage();
        uint64_t v653 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v652 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v653(v651, v1108, v652);
        goto LABEL_325;
      case 0xA0u:
        uint64_t v654 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v654;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(void *)(a1 + 56) = a2[7];
        uint64_t v655 = *(int *)(type metadata accessor for PgQuery_AlterSubscriptionStmt(0) + 36);
        uint64_t v656 = a1 + v655;
        uint64_t v1109 = (uint64_t)a2 + v655;
        uint64_t v657 = type metadata accessor for UnknownStorage();
        uint64_t v658 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v657 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v658(v656, v1109, v657);
        goto LABEL_325;
      case 0xA1u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v659 = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        *(void *)(a1 + 24) = v659;
        uint64_t v660 = *(int *)(type metadata accessor for PgQuery_DropSubscriptionStmt(0) + 28);
        uint64_t v661 = a1 + v660;
        uint64_t v662 = (uint64_t)a2 + v660;
        uint64_t v663 = type metadata accessor for UnknownStorage();
        uint64_t v664 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v663 - 8) + 16);
        swift_bridgeObjectRetain();
        v664(v661, v662, v663);
        goto LABEL_325;
      case 0xA2u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
        uint64_t v665 = *(int *)(type metadata accessor for PgQuery_CreateStatsStmt(0) + 40);
        uint64_t v1089 = (uint64_t)a2 + v665;
        uint64_t v1110 = a1 + v665;
        uint64_t v666 = type metadata accessor for UnknownStorage();
        uint64_t v667 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v666 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v667(v1110, v1089, v666);
        goto LABEL_325;
      case 0xA3u:
        *(void *)a1 = *a2;
        uint64_t v668 = *(int *)(type metadata accessor for PgQuery_AlterCollationStmt(0) + 20);
        uint64_t v669 = a1 + v668;
        uint64_t v670 = (uint64_t)a2 + v668;
        uint64_t v671 = type metadata accessor for UnknownStorage();
        uint64_t v672 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v671 - 8) + 16);
        swift_bridgeObjectRetain();
        v672(v669, v670, v671);
        goto LABEL_325;
      case 0xA4u:
        uint64_t v673 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v673 - 8) + 16))(a1, a2, v673);
        uint64_t v674 = type metadata accessor for PgQuery_CallStmt(0);
        *(void *)(a1 + *(int *)(v674 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v674 + 20));
        swift_retain();
        goto LABEL_325;
      case 0xA5u:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
        uint64_t v675 = *(int *)(type metadata accessor for PgQuery_AlterStatsStmt(0) + 28);
        uint64_t v676 = a1 + v675;
        uint64_t v677 = (uint64_t)a2 + v675;
        uint64_t v678 = type metadata accessor for UnknownStorage();
        uint64_t v679 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v678 - 8) + 16);
        swift_bridgeObjectRetain();
        v679(v676, v677, v678);
        goto LABEL_325;
      case 0xA6u:
        uint64_t v680 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v680 - 8) + 16))(a1, a2, v680);
        A_uint64_t Expr = type metadata accessor for PgQuery_A_Expr(0);
        *(void *)(a1 + *(int *)(A_Expr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(A_Expr + 20));
        swift_retain();
        goto LABEL_325;
      case 0xA7u:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        uint64_t v682 = *(int *)(type metadata accessor for PgQuery_ColumnRef(0) + 24);
        uint64_t v683 = a1 + v682;
        uint64_t v684 = (uint64_t)a2 + v682;
        uint64_t v685 = type metadata accessor for UnknownStorage();
        uint64_t v686 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v685 - 8) + 16);
        swift_bridgeObjectRetain();
        v686(v683, v684, v685);
        goto LABEL_325;
      case 0xA8u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
        uint64_t v687 = *(int *)(type metadata accessor for PgQuery_ParamRef(0) + 24);
        uint64_t v688 = a1 + v687;
        uint64_t v689 = (uint64_t)a2 + v687;
        uint64_t v690 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v690 - 8) + 16))(v688, v689, v690);
        goto LABEL_325;
      case 0xA9u:
        uint64_t v691 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v691 - 8) + 16))(a1, a2, v691);
        uint64_t A_Const = type metadata accessor for PgQuery_A_Const(0);
        *(void *)(a1 + *(int *)(A_Const + 20)) = *(uint64_t *)((char *)a2 + *(int *)(A_Const + 20));
        swift_retain();
        goto LABEL_325;
      case 0xAAu:
        uint64_t v693 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v693 - 8) + 16))(a1, a2, v693);
        uint64_t v694 = type metadata accessor for PgQuery_FuncCall(0);
        *(void *)(a1 + *(int *)(v694 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v694 + 20));
        swift_retain();
        goto LABEL_325;
      case 0xACu:
        uint64_t v695 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v695 - 8) + 16))(a1, a2, v695);
        uint64_t A_Indices = type metadata accessor for PgQuery_A_Indices(0);
        *(void *)(a1 + *(int *)(A_Indices + 20)) = *(uint64_t *)((char *)a2 + *(int *)(A_Indices + 20));
        swift_retain();
        goto LABEL_325;
      case 0xADu:
        uint64_t v697 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v697 - 8) + 16))(a1, a2, v697);
        uint64_t A_Indirection = type metadata accessor for PgQuery_A_Indirection(0);
        *(void *)(a1 + *(int *)(A_Indirection + 20)) = *(uint64_t *)((char *)a2 + *(int *)(A_Indirection + 20));
        swift_retain();
        goto LABEL_325;
      case 0xAEu:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        uint64_t v699 = *(int *)(type metadata accessor for PgQuery_A_ArrayExpr(0) + 24);
        uint64_t v700 = a1 + v699;
        uint64_t v701 = (uint64_t)a2 + v699;
        uint64_t v702 = type metadata accessor for UnknownStorage();
        uint64_t v703 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v702 - 8) + 16);
        swift_bridgeObjectRetain();
        v703(v700, v701, v702);
        goto LABEL_325;
      case 0xAFu:
        uint64_t v704 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v704 - 8) + 16))(a1, a2, v704);
        uint64_t ResTarget = type metadata accessor for PgQuery_ResTarget(0);
        *(void *)(a1 + *(int *)(ResTarget + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ResTarget + 20));
        swift_retain();
        goto LABEL_325;
      case 0xB0u:
        uint64_t v706 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v706 - 8) + 16))(a1, a2, v706);
        uint64_t MultiAssignRef = type metadata accessor for PgQuery_MultiAssignRef(0);
        *(void *)(a1 + *(int *)(MultiAssignRef + 20)) = *(uint64_t *)((char *)a2 + *(int *)(MultiAssignRef + 20));
        swift_retain();
        goto LABEL_325;
      case 0xB1u:
        uint64_t v708 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v708 - 8) + 16))(a1, a2, v708);
        uint64_t TypeCast = type metadata accessor for PgQuery_TypeCast(0);
        *(void *)(a1 + *(int *)(TypeCast + 20)) = *(uint64_t *)((char *)a2 + *(int *)(TypeCast + 20));
        swift_retain();
        goto LABEL_325;
      case 0xB2u:
        uint64_t v710 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v710 - 8) + 16))(a1, a2, v710);
        uint64_t CollateClause = type metadata accessor for PgQuery_CollateClause(0);
        *(void *)(a1 + *(int *)(CollateClause + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CollateClause + 20));
        swift_retain();
        goto LABEL_325;
      case 0xB3u:
        uint64_t v712 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v712 - 8) + 16))(a1, a2, v712);
        uint64_t SortBy = type metadata accessor for PgQuery_SortBy(0);
        *(void *)(a1 + *(int *)(SortBy + 20)) = *(uint64_t *)((char *)a2 + *(int *)(SortBy + 20));
        swift_retain();
        goto LABEL_325;
      case 0xB4u:
        uint64_t v714 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v714 - 8) + 16))(a1, a2, v714);
        uint64_t WindowDef = type metadata accessor for PgQuery_WindowDef(0);
        *(void *)(a1 + *(int *)(WindowDef + 20)) = *(uint64_t *)((char *)a2 + *(int *)(WindowDef + 20));
        swift_retain();
        goto LABEL_325;
      case 0xB5u:
        uint64_t v716 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v716 - 8) + 16))(a1, a2, v716);
        uint64_t RangeSubselect = type metadata accessor for PgQuery_RangeSubselect(0);
        *(void *)(a1 + *(int *)(RangeSubselect + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RangeSubselect + 20));
        swift_retain();
        goto LABEL_325;
      case 0xB6u:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        *(unsigned char *)(a1 + 1) = *((unsigned char *)a2 + 1);
        *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t RangeFunction = type metadata accessor for PgQuery_RangeFunction(0);
        uint64_t v719 = *(int *)(RangeFunction + 36);
        uint64_t v1111 = a1 + v719;
        uint64_t v720 = (uint64_t)a2 + v719;
        uint64_t v721 = type metadata accessor for UnknownStorage();
        uint64_t v722 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v721 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v1090 = v721;
        v722(v1111, v720, v721);
        uint64_t v723 = *(int *)(RangeFunction + 40);
        uint64_t v14 = (void *)(a1 + v723);
        uint64_t v15 = (uint64_t *)((char *)a2 + v723);
        uint64_t v724 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v725 = *(void *)(v724 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v725 + 48))(v15, 1, v724))
        {
LABEL_5:
          uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
          memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
        }
        else
        {
          *uint64_t v14 = *v15;
          v14[1] = v15[1];
          void v14[2] = v15[2];
          uint64_t v988 = *(int *)(v724 + 24);
          uint64_t v989 = (char *)v14 + v988;
          uint64_t v990 = (char *)v15 + v988;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v722((uint64_t)v989, (uint64_t)v990, v1090);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v725 + 56))(v14, 0, 1, v724);
        }
        goto LABEL_325;
      case 0xB7u:
        uint64_t v726 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v726 - 8) + 16))(a1, a2, v726);
        uint64_t RangeTableSample = type metadata accessor for PgQuery_RangeTableSample(0);
        *(void *)(a1 + *(int *)(RangeTableSample + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RangeTableSample + 20));
        swift_retain();
        goto LABEL_325;
      case 0xB8u:
        uint64_t v728 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v728 - 8) + 16))(a1, a2, v728);
        uint64_t RangeTableFunc = type metadata accessor for PgQuery_RangeTableFunc(0);
        *(void *)(a1 + *(int *)(RangeTableFunc + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RangeTableFunc + 20));
        swift_retain();
        goto LABEL_325;
      case 0xB9u:
        uint64_t v730 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v730 - 8) + 16))(a1, a2, v730);
        uint64_t RangeTableFuncCol = type metadata accessor for PgQuery_RangeTableFuncCol(0);
        *(void *)(a1 + *(int *)(RangeTableFuncCol + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RangeTableFuncCol + 20));
        swift_retain();
        goto LABEL_325;
      case 0xBAu:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
        *(unsigned char *)(a1 + 13) = *((unsigned char *)a2 + 13);
        *(void *)(a1 + 16) = a2[2];
        *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
        *(void *)(a1 + 32) = a2[4];
        *(_DWORD *)(a1 + 40) = *((_DWORD *)a2 + 10);
        uint64_t v732 = *(int *)(type metadata accessor for PgQuery_TypeName(0) + 48);
        uint64_t v733 = a1 + v732;
        uint64_t v734 = (uint64_t)a2 + v732;
        uint64_t v735 = type metadata accessor for UnknownStorage();
        uint64_t v736 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v735 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v736(v733, v734, v735);
        goto LABEL_325;
      case 0xBBu:
        uint64_t v737 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v737 - 8) + 16))(a1, a2, v737);
        uint64_t ColumnDef = type metadata accessor for PgQuery_ColumnDef(0);
        *(void *)(a1 + *(int *)(ColumnDef + 20)) = *(uint64_t *)((char *)a2 + *(int *)(ColumnDef + 20));
        swift_retain();
        goto LABEL_325;
      case 0xBCu:
        uint64_t v739 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v739 - 8) + 16))(a1, a2, v739);
        uint64_t IndexElem = type metadata accessor for PgQuery_IndexElem(0);
        *(void *)(a1 + *(int *)(IndexElem + 20)) = *(uint64_t *)((char *)a2 + *(int *)(IndexElem + 20));
        swift_retain();
        goto LABEL_325;
      case 0xBDu:
        uint64_t v741 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v741 - 8) + 16))(a1, a2, v741);
        uint64_t Constraint = type metadata accessor for PgQuery_Constraint(0);
        *(void *)(a1 + *(int *)(Constraint + 20)) = *(uint64_t *)((char *)a2 + *(int *)(Constraint + 20));
        swift_retain();
        goto LABEL_325;
      case 0xBEu:
        uint64_t v743 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v743 - 8) + 16))(a1, a2, v743);
        uint64_t DefElem = type metadata accessor for PgQuery_DefElem(0);
        *(void *)(a1 + *(int *)(DefElem + 20)) = *(uint64_t *)((char *)a2 + *(int *)(DefElem + 20));
        swift_retain();
        goto LABEL_325;
      case 0xBFu:
        uint64_t v745 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v745 - 8) + 16))(a1, a2, v745);
        uint64_t RangeTblEntry = type metadata accessor for PgQuery_RangeTblEntry(0);
        *(void *)(a1 + *(int *)(RangeTblEntry + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RangeTblEntry + 20));
        swift_retain();
        goto LABEL_325;
      case 0xC0u:
        uint64_t v747 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v747 - 8) + 16))(a1, a2, v747);
        uint64_t RangeTblFunction = type metadata accessor for PgQuery_RangeTblFunction(0);
        *(void *)(a1 + *(int *)(RangeTblFunction + 20)) = *(uint64_t *)((char *)a2 + *(int *)(RangeTblFunction + 20));
        swift_retain();
        goto LABEL_325;
      case 0xC1u:
        uint64_t v749 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v749 - 8) + 16))(a1, a2, v749);
        uint64_t TableSampleClause = type metadata accessor for PgQuery_TableSampleClause(0);
        *(void *)(a1 + *(int *)(TableSampleClause + 20)) = *(uint64_t *)((char *)a2 + *(int *)(TableSampleClause + 20));
        swift_retain();
        goto LABEL_325;
      case 0xC2u:
        uint64_t v751 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v751 - 8) + 16))(a1, a2, v751);
        uint64_t v752 = type metadata accessor for PgQuery_WithCheckOption(0);
        *(void *)(a1 + *(int *)(v752 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v752 + 20));
        swift_retain();
        goto LABEL_325;
      case 0xC3u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        *(unsigned char *)(a1 + 12) = *((unsigned char *)a2 + 12);
        *(unsigned char *)(a1 + 13) = *((unsigned char *)a2 + 13);
        uint64_t v753 = *(int *)(type metadata accessor for PgQuery_SortGroupClause(0) + 36);
        uint64_t v754 = a1 + v753;
        uint64_t v755 = (uint64_t)a2 + v753;
        uint64_t v756 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v756 - 8) + 16))(v754, v755, v756);
        goto LABEL_325;
      case 0xC4u:
        uint64_t v757 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v757;
        *(void *)(a1 + 16) = a2[2];
        *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
        uint64_t v758 = *(int *)(type metadata accessor for PgQuery_GroupingSet(0) + 28);
        uint64_t v759 = a1 + v758;
        uint64_t v760 = (uint64_t)a2 + v758;
        uint64_t v761 = type metadata accessor for UnknownStorage();
        uint64_t v762 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v761 - 8) + 16);
        swift_bridgeObjectRetain();
        v762(v759, v760, v761);
        goto LABEL_325;
      case 0xC5u:
        uint64_t v763 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v763 - 8) + 16))(a1, a2, v763);
        uint64_t WindowClause = type metadata accessor for PgQuery_WindowClause(0);
        *(void *)(a1 + *(int *)(WindowClause + 20)) = *(uint64_t *)((char *)a2 + *(int *)(WindowClause + 20));
        swift_retain();
        goto LABEL_325;
      case 0xC6u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        uint64_t v765 = *(int *)(type metadata accessor for PgQuery_ObjectWithArgs(0) + 28);
        uint64_t v766 = a1 + v765;
        uint64_t v767 = (uint64_t)a2 + v765;
        uint64_t v768 = type metadata accessor for UnknownStorage();
        uint64_t v769 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v768 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v769(v766, v767, v768);
        goto LABEL_325;
      case 0xC7u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t v770 = *(int *)(type metadata accessor for PgQuery_AccessPriv(0) + 24);
        uint64_t v771 = a1 + v770;
        uint64_t v772 = (uint64_t)a2 + v770;
        uint64_t v773 = type metadata accessor for UnknownStorage();
        uint64_t v774 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v773 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v774(v771, v772, v773);
        goto LABEL_325;
      case 0xC8u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t OpClassItem = type metadata accessor for PgQuery_CreateOpClassItem(0);
        uint64_t v776 = *(int *)(OpClassItem + 32);
        uint64_t v1112 = (char *)(a1 + v776);
        uint64_t v777 = (char *)a2 + v776;
        uint64_t v778 = type metadata accessor for UnknownStorage();
        uint64_t v779 = *(void (**)(char *, char *, uint64_t))(*(void *)(v778 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v780 = v777;
        uint64_t v781 = v779;
        v779(v1112, v780, v778);
        uint64_t v782 = OpClassItem;
        uint64_t v783 = *(int *)(OpClassItem + 36);
        uint64_t v784 = (void *)(a1 + v783);
        uint64_t v785 = (uint64_t *)((char *)a2 + v783);
        uint64_t v786 = type metadata accessor for PgQuery_ObjectWithArgs(0);
        uint64_t v787 = *(void *)(v786 - 8);
        uint64_t v1067 = v778;
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v787 + 48))(v785, 1, v786))
        {
          uint64_t v788 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ObjectWithArgs?);
          memcpy(v784, v785, *(void *)(*(void *)(v788 - 8) + 64));
        }
        else
        {
          *uint64_t v784 = *v785;
          v784[1] = v785[1];
          *((unsigned char *)v784 + 16) = *((unsigned char *)v785 + 16);
          uint64_t v991 = *(int *)(v786 + 28);
          uint64_t v1060 = (char *)v784 + v991;
          uint64_t v992 = (char *)v785 + v991;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v781(v1060, v992, v778);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v787 + 56))(v784, 0, 1, v786);
        }
        uint64_t v993 = *(int *)(v782 + 40);
        uint64_t v230 = a1 + v993;
        uint64_t v231 = (uint64_t)a2 + v993;
        uint64_t v994 = type metadata accessor for PgQuery_TypeName(0);
        uint64_t v995 = *(void *)(v994 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v995 + 48))(v231, 1, v994))
        {
LABEL_298:
          uint64_t v996 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TypeName?);
          memcpy((void *)v230, (const void *)v231, *(void *)(*(void *)(v996 - 8) + 64));
        }
        else
        {
          *(void *)uint64_t v230 = *(void *)v231;
          *(_DWORD *)(v230 + 8) = *(_DWORD *)(v231 + 8);
          *(unsigned char *)(v230 + 12) = *(unsigned char *)(v231 + 12);
          *(unsigned char *)(v230 + 13) = *(unsigned char *)(v231 + 13);
          *(void *)(v230 + 16) = *(void *)(v231 + 16);
          *(_DWORD *)(v230 + 24) = *(_DWORD *)(v231 + 24);
          *(void *)(v230 + 32) = *(void *)(v231 + 32);
          *(_DWORD *)(v230 + 40) = *(_DWORD *)(v231 + 40);
          uint64_t v1023 = *(int *)(v994 + 48);
          uint64_t v1024 = (void (*)(uint64_t, uint64_t, uint64_t))v781;
          uint64_t v1025 = v230 + v1023;
          uint64_t v1026 = v231 + v1023;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1024(v1025, v1026, v1067);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v995 + 56))(v230, 0, 1, v994);
        }
        goto LABEL_325;
      case 0xC9u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
        uint64_t TableLikeClause = type metadata accessor for PgQuery_TableLikeClause(0);
        uint64_t v790 = *(int *)(TableLikeClause + 24);
        uint64_t v791 = a1 + v790;
        uint64_t v792 = (uint64_t)a2 + v790;
        uint64_t v608 = type metadata accessor for UnknownStorage();
        uint64_t v609 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v608 - 8) + 16);
        v609(v791, v792, v608);
        uint64_t v793 = *(int *)(TableLikeClause + 28);
        uint64_t v137 = a1 + v793;
        uint64_t v138 = (uint64_t)a2 + v793;
        uint64_t v139 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v794 = *(void *)(v139 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v794 + 48))(v138, 1, v139)) {
          goto LABEL_230;
        }
        uint64_t v1091 = v794;
        *(void *)uint64_t v137 = *(void *)v138;
        *(void *)(v137 + 8) = *(void *)(v138 + 8);
        *(void *)(v137 + 16) = *(void *)(v138 + 16);
        *(void *)(v137 + 24) = *(void *)(v138 + 24);
        *(void *)(v137 + 32) = *(void *)(v138 + 32);
        *(void *)(v137 + 40) = *(void *)(v138 + 40);
        *(unsigned char *)(v137 + 48) = *(unsigned char *)(v138 + 48);
        *(void *)(v137 + 56) = *(void *)(v138 + 56);
        *(void *)(v137 + 64) = *(void *)(v138 + 64);
        *(_DWORD *)(v137 + 72) = *(_DWORD *)(v138 + 72);
        uint64_t v997 = *(int *)(v139 + 40);
        uint64_t v1061 = v138 + v997;
        uint64_t v1077 = v137 + v997;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v609(v1077, v1061, v608);
        uint64_t v998 = *(int *)(v139 + 44);
        uint64_t v916 = (void *)(v137 + v998);
        uint64_t v917 = (void *)(v138 + v998);
        uint64_t v976 = type metadata accessor for PgQuery_Alias(0);
        uint64_t v977 = *(void *)(v976 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v977 + 48))(v917, 1, v976)) {
          goto LABEL_304;
        }
LABEL_317:
        *uint64_t v916 = *v917;
        v916[1] = v917[1];
        v916[2] = v917[2];
        uint64_t v1030 = *(int *)(v976 + 24);
        uint64_t v1064 = (char *)v916 + v1030;
        uint64_t v1031 = (char *)v917 + v1030;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v609((uint64_t)v1064, (uint64_t)v1031, v608);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v977 + 56))(v916, 0, 1, v976);
        goto LABEL_324;
      case 0xCAu:
        uint64_t v796 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v796 - 8) + 16))(a1, a2, v796);
        uint64_t FunctionParameter = type metadata accessor for PgQuery_FunctionParameter(0);
        *(void *)(a1 + *(int *)(FunctionParameter + 20)) = *(uint64_t *)((char *)a2 + *(int *)(FunctionParameter + 20));
        swift_retain();
        goto LABEL_325;
      case 0xCBu:
        *(void *)a1 = *a2;
        uint64_t v798 = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 8) = v798;
        uint64_t v799 = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        *(void *)(a1 + 24) = v799;
        uint64_t v800 = *(int *)(type metadata accessor for PgQuery_LockingClause(0) + 28);
        uint64_t v801 = a1 + v800;
        uint64_t v802 = (uint64_t)a2 + v800;
        uint64_t v803 = type metadata accessor for UnknownStorage();
        uint64_t v804 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v803 - 8) + 16);
        swift_bridgeObjectRetain();
        v804(v801, v802, v803);
        goto LABEL_325;
      case 0xCCu:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        uint64_t v805 = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(void *)(a1 + 8) = v805;
        uint64_t v806 = a2[3];
        *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
        *(void *)(a1 + 24) = v806;
        *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
        uint64_t v807 = *(int *)(type metadata accessor for PgQuery_RowMarkClause(0) + 32);
        uint64_t v808 = a1 + v807;
        uint64_t v809 = (uint64_t)a2 + v807;
        uint64_t v810 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v810 - 8) + 16))(v808, v809, v810);
        goto LABEL_325;
      case 0xCDu:
        uint64_t v811 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v811 - 8) + 16))(a1, a2, v811);
        uint64_t XmlSerialize = type metadata accessor for PgQuery_XmlSerialize(0);
        *(void *)(a1 + *(int *)(XmlSerialize + 20)) = *(uint64_t *)((char *)a2 + *(int *)(XmlSerialize + 20));
        swift_retain();
        goto LABEL_325;
      case 0xCEu:
        *(void *)a1 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
        uint64_t v813 = *(int *)(type metadata accessor for PgQuery_WithClause(0) + 28);
        uint64_t v814 = a1 + v813;
        uint64_t v815 = (uint64_t)a2 + v813;
        uint64_t v816 = type metadata accessor for UnknownStorage();
        uint64_t v817 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v816 - 8) + 16);
        swift_bridgeObjectRetain();
        v817(v814, v815, v816);
        goto LABEL_325;
      case 0xCFu:
        uint64_t v818 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v818 - 8) + 16))(a1, a2, v818);
        uint64_t InferClause = type metadata accessor for PgQuery_InferClause(0);
        *(void *)(a1 + *(int *)(InferClause + 20)) = *(uint64_t *)((char *)a2 + *(int *)(InferClause + 20));
        swift_retain();
        goto LABEL_325;
      case 0xD0u:
        uint64_t v820 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v820 - 8) + 16))(a1, a2, v820);
        uint64_t v821 = type metadata accessor for PgQuery_OnConflictClause(0);
        *(void *)(a1 + *(int *)(v821 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v821 + 20));
        swift_retain();
        goto LABEL_325;
      case 0xD1u:
        uint64_t v822 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v822 - 8) + 16))(a1, a2, v822);
        uint64_t CommonTableExpr = type metadata accessor for PgQuery_CommonTableExpr(0);
        *(void *)(a1 + *(int *)(CommonTableExpr + 20)) = *(uint64_t *)((char *)a2 + *(int *)(CommonTableExpr + 20));
        swift_retain();
        goto LABEL_325;
      case 0xD2u:
        uint64_t v824 = *a2;
        *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
        *(void *)a1 = v824;
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = a2[3];
        *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
        uint64_t v825 = *(int *)(type metadata accessor for PgQuery_RoleSpec(0) + 28);
        uint64_t v826 = a1 + v825;
        uint64_t v827 = (uint64_t)a2 + v825;
        uint64_t v828 = type metadata accessor for UnknownStorage();
        uint64_t v829 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v828 - 8) + 16);
        swift_bridgeObjectRetain();
        v829(v826, v827, v828);
        goto LABEL_325;
      case 0xD3u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
        uint64_t v830 = *(int *)(type metadata accessor for PgQuery_TriggerTransition(0) + 28);
        uint64_t v831 = a1 + v830;
        uint64_t v832 = (uint64_t)a2 + v830;
        uint64_t v833 = type metadata accessor for UnknownStorage();
        uint64_t v834 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v833 - 8) + 16);
        swift_bridgeObjectRetain();
        v834(v831, v832, v833);
        goto LABEL_325;
      case 0xD4u:
        uint64_t v835 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v835 - 8) + 16))(a1, a2, v835);
        uint64_t PartitionElem = type metadata accessor for PgQuery_PartitionElem(0);
        *(void *)(a1 + *(int *)(PartitionElem + 20)) = *(uint64_t *)((char *)a2 + *(int *)(PartitionElem + 20));
        swift_retain();
        goto LABEL_325;
      case 0xD5u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
        uint64_t v837 = *(int *)(type metadata accessor for PgQuery_PartitionSpec(0) + 28);
        uint64_t v838 = a1 + v837;
        uint64_t v839 = (uint64_t)a2 + v837;
        uint64_t v840 = type metadata accessor for UnknownStorage();
        uint64_t v841 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v840 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v841(v838, v839, v840);
        goto LABEL_325;
      case 0xD6u:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
        *(_DWORD *)(a1 + 20) = *((_DWORD *)a2 + 5);
        *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = a2[6];
        *(_DWORD *)(a1 + 56) = *((_DWORD *)a2 + 14);
        uint64_t v842 = *(int *)(type metadata accessor for PgQuery_PartitionBoundSpec(0) + 48);
        uint64_t v843 = a1 + v842;
        uint64_t v1113 = (uint64_t)a2 + v842;
        uint64_t v844 = type metadata accessor for UnknownStorage();
        uint64_t v845 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v844 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v845(v843, v1113, v844);
        goto LABEL_325;
      case 0xD7u:
        uint64_t v846 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v846 - 8) + 16))(a1, a2, v846);
        uint64_t PartitionRangeDatum = type metadata accessor for PgQuery_PartitionRangeDatum(0);
        *(void *)(a1 + *(int *)(PartitionRangeDatum + 20)) = *(uint64_t *)((char *)a2
                                                                          + *(int *)(PartitionRangeDatum + 20));
        swift_retain();
        goto LABEL_325;
      case 0xD8u:
        uint64_t v848 = type metadata accessor for UnknownStorage();
        uint64_t v849 = *(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v848 - 8) + 16);
        v849(a1, a2, v848);
        uint64_t PartitionCmd = type metadata accessor for PgQuery_PartitionCmd(0);
        uint64_t v851 = *(int *)(PartitionCmd + 20);
        uint64_t v852 = (void *)(a1 + v851);
        uint64_t v853 = (uint64_t *)((char *)a2 + v851);
        uint64_t v854 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v855 = *(void *)(v854 - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v855 + 48))(v853, 1, v854))
        {
          uint64_t v856 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
          memcpy(v852, v853, *(void *)(*(void *)(v856 - 8) + 64));
        }
        else
        {
          uint64_t v1062 = PartitionCmd;
          *uint64_t v852 = *v853;
          v852[1] = v853[1];
          v852[2] = v853[2];
          uint64_t v1116 = (void (*)(char *, char *, uint64_t))v849;
          v852[3] = v853[3];
          v852[4] = v853[4];
          v852[5] = v853[5];
          *((unsigned char *)v852 + 48) = *((unsigned char *)v853 + 48);
          v852[7] = v853[7];
          v852[8] = v853[8];
          *((_DWORD *)v852 + 18) = *((_DWORD *)v853 + 18);
          uint64_t v999 = *(int *)(v854 + 40);
          uint64_t v1078 = (char *)v852 + v999;
          uint64_t v1047 = (char *)v853 + v999;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v1000 = v1078;
          uint64_t v1079 = v848;
          v849((uint64_t)v1000, (uint64_t *)v1047, v848);
          uint64_t v1001 = *(int *)(v854 + 44);
          uint64_t v1002 = (void *)((char *)v852 + v1001);
          uint64_t v1003 = (void *)((char *)v853 + v1001);
          uint64_t v1004 = type metadata accessor for PgQuery_Alias(0);
          uint64_t v1005 = *(void *)(v1004 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1005 + 48))(v1003, 1, v1004))
          {
            uint64_t v1006 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
            memcpy(v1002, v1003, *(void *)(*(void *)(v1006 - 8) + 64));
          }
          else
          {
            *uint64_t v1002 = *v1003;
            v1002[1] = v1003[1];
            v1002[2] = v1003[2];
            uint64_t v1032 = *(int *)(v1004 + 24);
            uint64_t v1049 = (char *)v1002 + v1032;
            uint64_t v1033 = (char *)v1003 + v1032;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1116(v1049, v1033, v1079);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1005 + 56))(v1002, 0, 1, v1004);
          }
          (*(void (**)(void *, void, uint64_t, uint64_t))(v855 + 56))(v852, 0, 1, v854);
          uint64_t PartitionCmd = v1062;
          uint64_t v848 = v1079;
          uint64_t v849 = (void (*)(uint64_t, uint64_t *, uint64_t))v1116;
        }
        uint64_t v1034 = *(int *)(PartitionCmd + 24);
        uint64_t v1035 = (void *)(a1 + v1034);
        uint64_t v1036 = (uint64_t *)((char *)a2 + v1034);
        uint64_t PartitionBoundSpec = type metadata accessor for PgQuery_PartitionBoundSpec(0);
        uint64_t v1038 = *(void *)(PartitionBoundSpec - 8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v1038 + 48))(v1036, 1, PartitionBoundSpec))
        {
          uint64_t v1039 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PartitionBoundSpec?);
          memcpy(v1035, v1036, *(void *)(*(void *)(v1039 - 8) + 64));
        }
        else
        {
          *uint64_t v1035 = *v1036;
          v1035[1] = v1036[1];
          *((unsigned char *)v1035 + 16) = *((unsigned char *)v1036 + 16);
          *((_DWORD *)v1035 + 5) = *((_DWORD *)v1036 + 5);
          *((_DWORD *)v1035 + 6) = *((_DWORD *)v1036 + 6);
          v1035[4] = v1036[4];
          v1035[5] = v1036[5];
          v1035[6] = v1036[6];
          *((_DWORD *)v1035 + 14) = *((_DWORD *)v1036 + 14);
          uint64_t v1040 = *(int *)(PartitionBoundSpec + 48);
          uint64_t v1117 = (void (*)(char *, char *, uint64_t))v849;
          uint64_t v1041 = (char *)v1035 + v1040;
          uint64_t v1042 = (char *)v1036 + v1040;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1117(v1041, v1042, v848);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1038 + 56))(v1035, 0, 1, PartitionBoundSpec);
        }
        goto LABEL_325;
      case 0xD9u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t VacuumRelation = type metadata accessor for PgQuery_VacuumRelation(0);
        uint64_t v858 = *(int *)(VacuumRelation + 24);
        uint64_t v859 = a1 + v858;
        uint64_t v860 = (uint64_t)a2 + v858;
        uint64_t v861 = type metadata accessor for UnknownStorage();
        uint64_t v862 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v861 - 8) + 16);
        swift_bridgeObjectRetain();
        v862(v859, v860, v861);
        uint64_t v863 = *(int *)(VacuumRelation + 28);
        uint64_t v137 = a1 + v863;
        uint64_t v138 = (uint64_t)a2 + v863;
        uint64_t v139 = type metadata accessor for PgQuery_RangeVar(0);
        uint64_t v864 = *(void *)(v139 - 8);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v864 + 48))(v138, 1, v139))
        {
LABEL_230:
          uint64_t v795 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
          memcpy((void *)v137, (const void *)v138, *(void *)(*(void *)(v795 - 8) + 64));
        }
        else
        {
          uint64_t v1091 = v864;
          *(void *)uint64_t v137 = *(void *)v138;
          *(void *)(v137 + 8) = *(void *)(v138 + 8);
          *(void *)(v137 + 16) = *(void *)(v138 + 16);
          *(void *)(v137 + 24) = *(void *)(v138 + 24);
          *(void *)(v137 + 32) = *(void *)(v138 + 32);
          *(void *)(v137 + 40) = *(void *)(v138 + 40);
          *(unsigned char *)(v137 + 48) = *(unsigned char *)(v138 + 48);
          *(void *)(v137 + 56) = *(void *)(v138 + 56);
          *(void *)(v137 + 64) = *(void *)(v138 + 64);
          *(_DWORD *)(v137 + 72) = *(_DWORD *)(v138 + 72);
          uint64_t v1007 = *(int *)(v139 + 40);
          uint64_t v1063 = v138 + v1007;
          uint64_t v1080 = v137 + v1007;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v1009 = v1063;
          uint64_t v1008 = v1080;
          uint64_t v1053 = v861;
          uint64_t v1069 = (void (*)(char *, char *, uint64_t))v862;
          v862(v1008, v1009, v861);
          uint64_t v1010 = *(int *)(v139 + 44);
          uint64_t v916 = (void *)(v137 + v1010);
          uint64_t v917 = (void *)(v138 + v1010);
          uint64_t v918 = type metadata accessor for PgQuery_Alias(0);
          uint64_t v919 = *(void *)(v918 - 8);
          if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v919 + 48))(v917, 1, v918))
          {
LABEL_304:
            uint64_t v1011 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
            memcpy(v916, v917, *(void *)(*(void *)(v1011 - 8) + 64));
          }
          else
          {
LABEL_323:
            *uint64_t v916 = *v917;
            v916[1] = v917[1];
            v916[2] = v917[2];
            uint64_t v1043 = *(int *)(v918 + 24);
            uint64_t v1044 = (char *)v916 + v1043;
            uint64_t v1045 = (char *)v917 + v1043;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1069(v1044, v1045, v1053);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v919 + 56))(v916, 0, 1, v918);
          }
LABEL_324:
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v1091 + 56))(v137, 0, 1, v139);
        }
LABEL_325:
        swift_storeEnumTagMultiPayload();
        break;
      case 0xDAu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
        *(unsigned char *)(a1 + 20) = *((unsigned char *)a2 + 20);
        *(unsigned char *)(a1 + 21) = *((unsigned char *)a2 + 21);
        uint64_t v865 = *(int *)(type metadata accessor for PgQuery_InlineCodeBlock(0) + 32);
        uint64_t v866 = a1 + v865;
        uint64_t v867 = (uint64_t)a2 + v865;
        uint64_t v868 = type metadata accessor for UnknownStorage();
        uint64_t v869 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v868 - 8) + 16);
        swift_bridgeObjectRetain();
        v869(v866, v867, v868);
        goto LABEL_325;
      case 0xDBu:
        *(unsigned char *)a1 = *(unsigned char *)a2;
        uint64_t v870 = *(int *)(type metadata accessor for PgQuery_CallContext(0) + 20);
        uint64_t v871 = a1 + v870;
        uint64_t v872 = (uint64_t)a2 + v870;
        uint64_t v873 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v873 - 8) + 16))(v871, v872, v873);
        goto LABEL_325;
      case 0xDCu:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        uint64_t v874 = *(int *)(type metadata accessor for PgQuery_Integer(0) + 20);
        uint64_t v875 = a1 + v874;
        uint64_t v876 = (uint64_t)a2 + v874;
        uint64_t v877 = type metadata accessor for UnknownStorage();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v877 - 8) + 16))(v875, v876, v877);
        goto LABEL_325;
      case 0xDDu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v878 = *(int *)(type metadata accessor for PgQuery_Float(0) + 20);
        uint64_t v879 = a1 + v878;
        uint64_t v880 = (uint64_t)a2 + v878;
        uint64_t v881 = type metadata accessor for UnknownStorage();
        uint64_t v882 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v881 - 8) + 16);
        swift_bridgeObjectRetain();
        v882(v879, v880, v881);
        goto LABEL_325;
      case 0xDEu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v883 = *(int *)(type metadata accessor for PgQuery_String(0) + 20);
        uint64_t v884 = a1 + v883;
        uint64_t v885 = (uint64_t)a2 + v883;
        uint64_t v886 = type metadata accessor for UnknownStorage();
        uint64_t v887 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v886 - 8) + 16);
        swift_bridgeObjectRetain();
        v887(v884, v885, v886);
        goto LABEL_325;
      case 0xDFu:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        uint64_t v888 = *(int *)(type metadata accessor for PgQuery_BitString(0) + 20);
        uint64_t v889 = a1 + v888;
        uint64_t v890 = (uint64_t)a2 + v888;
        uint64_t v891 = type metadata accessor for UnknownStorage();
        uint64_t v892 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v891 - 8) + 16);
        swift_bridgeObjectRetain();
        v892(v889, v890, v891);
        goto LABEL_325;
      case 0xE1u:
        *(void *)a1 = *a2;
        uint64_t v894 = *(int *)(type metadata accessor for PgQuery_List(0) + 20);
        uint64_t v895 = a1 + v894;
        uint64_t v896 = (uint64_t)a2 + v894;
        uint64_t v897 = type metadata accessor for UnknownStorage();
        uint64_t v898 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v897 - 8) + 16);
        swift_bridgeObjectRetain();
        v898(v895, v896, v897);
        goto LABEL_325;
      case 0xE2u:
        *(void *)a1 = *a2;
        uint64_t v899 = *(int *)(type metadata accessor for PgQuery_IntList(0) + 20);
        uint64_t v900 = a1 + v899;
        uint64_t v901 = (uint64_t)a2 + v899;
        uint64_t v902 = type metadata accessor for UnknownStorage();
        uint64_t v903 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v902 - 8) + 16);
        swift_bridgeObjectRetain();
        v903(v900, v901, v902);
        goto LABEL_325;
      case 0xE3u:
        *(void *)a1 = *a2;
        uint64_t v904 = *(int *)(type metadata accessor for PgQuery_OidList(0) + 20);
        uint64_t v905 = a1 + v904;
        uint64_t v906 = (uint64_t)a2 + v904;
        uint64_t v907 = type metadata accessor for UnknownStorage();
        uint64_t v908 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v907 - 8) + 16);
        swift_bridgeObjectRetain();
        v908(v905, v906, v907);
        goto LABEL_325;
      default:
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = a2[1];
        *(void *)(a1 + 16) = a2[2];
        uint64_t v4 = *(int *)(type metadata accessor for PgQuery_Alias(0) + 24);
        uint64_t v5 = a1 + v4;
        uint64_t v6 = (uint64_t)a2 + v4;
        uint64_t v7 = type metadata accessor for UnknownStorage();
        uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v8(v5, v6, v7);
        goto LABEL_325;
    }
  }
  return a1;
}