uint64_t typeWithBMPBMindfulnessSessionStateType(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;

  v1 = result;
  if (result < 5) {
    return result;
  }
  v2 = __biome_log_for_category();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    typeWithBMPBMindfulnessSessionStateType_cold_1(v1);
  }

  return 0;
}

uint64_t BMPBNotesContentEventReadFrom(uint64_t a1, uint64_t a2)
{
  v3 = (int *)MEMORY[0x1E4F940E8];
  v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 56;
              goto LABEL_30;
            case 2u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 32;
              goto LABEL_30;
            case 3u:
              *(unsigned char *)(a1 + 64) |= 1u;
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
                *(void *)(a2 + v21) = v22 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v23 = 0;
              }
              *(void *)(a1 + 8) = v23;
              goto LABEL_31;
            case 4u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 48;
              goto LABEL_30;
            case 5u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 16;
              goto LABEL_30;
            case 6u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 24;
              goto LABEL_30;
            case 7u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 40;
LABEL_30:
              v24 = *(void **)(a1 + v19);
              *(void *)(a1 + v19) = v18;

              goto LABEL_31;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_31:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id get_DKBiomeQueryClass()
{
  uint64_t v4 = 0;
  v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)get_DKBiomeQueryClass_softClass;
  uint64_t v7 = get_DKBiomeQueryClass_softClass;
  if (!get_DKBiomeQueryClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKBiomeQueryClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    v3[4] = &v4;
    __get_DKBiomeQueryClass_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E78E32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKKnowledgeStoreClass_0()
{
  uint64_t v4 = 0;
  v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)get_DKKnowledgeStoreClass_softClass_1;
  uint64_t v7 = get_DKKnowledgeStoreClass_softClass_1;
  if (!get_DKKnowledgeStoreClass_softClass_1)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKKnowledgeStoreClass_block_invoke_1;
    v3[3] = &unk_1E55D6DA8;
    v3[4] = &v4;
    __get_DKKnowledgeStoreClass_block_invoke_1((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E78E994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_CDClientContextClass_0()
{
  uint64_t v4 = 0;
  v5 = &v4;
  uint64_t v6 = 0x2050000000;
  v0 = (void *)get_CDClientContextClass_softClass_1;
  uint64_t v7 = get_CDClientContextClass_softClass_1;
  if (!get_CDClientContextClass_softClass_1)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_CDClientContextClass_block_invoke_1;
    v3[3] = &unk_1E55D6DA8;
    v3[4] = &v4;
    __get_CDClientContextClass_block_invoke_1((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E78EA78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CoreDuetLibrary_3()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!CoreDuetLibraryCore_frameworkLibrary_8)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __CoreDuetLibraryCore_block_invoke_8;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E55D8028;
    uint64_t v2 = 0;
    CoreDuetLibraryCore_frameworkLibrary_8 = _sl_dlopen();
  }
  if (!CoreDuetLibraryCore_frameworkLibrary_8) {
    CoreDuetLibrary_cold_1_3(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __CoreDuetLibraryCore_block_invoke_8()
{
  uint64_t result = _sl_dlopen();
  CoreDuetLibraryCore_frameworkLibrary_8 = result;
  return result;
}

uint64_t __CoreDuetContextLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  CoreDuetContextLibraryCore_frameworkLibrary_2 = result;
  return result;
}

uint64_t BMComputePublisherInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EDDE78A0];
}

uint64_t BMComputePublishingInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EDDF2928];
}

uint64_t BMPBParsecSearchEngagementEventReadFrom(void *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = &OBJC_IVAR___BMPBNameComponents__familyName;
  char v8 = &OBJC_IVAR___BMPBNameComponents__familyName;
  unsigned int v9 = &OBJC_IVAR___BMPBNameComponents__familyName;
  unint64_t v10 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      uint64_t v15 = *(void *)(a2 + v14);
      unint64_t v16 = v15 + 1;
      if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
        break;
      }
      char v17 = *(unsigned char *)(*(void *)(a2 + *v10) + v15);
      *(void *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      if (v12++ >= 9)
      {
        unint64_t v13 = 0;
        int v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v19 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = v7[91];
        goto LABEL_34;
      case 2u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = v8[92];
        goto LABEL_34;
      case 3u:
        *((unsigned char *)a1 + v9[93]) |= 1u;
        uint64_t v24 = *v3;
        unint64_t v25 = *(void *)(a2 + v24);
        if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v26 = *(void *)(*(void *)(a2 + *v10) + v25);
          *(void *)(a2 + v24) = v25 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v26 = 0;
        }
        a1[1] = v26;
        goto LABEL_35;
      case 4u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 72;
        goto LABEL_34;
      case 5u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 16;
        goto LABEL_34;
      case 6u:
        v27 = v9;
        v28 = v8;
        v29 = v7;
        v30 = objc_alloc_init(BMPBParsecSearchEntity);
        [a1 addEntities:v30];
        if PBReaderPlaceMark() && (BMPBParsecSearchEntityReadFrom((uint64_t)v30, a2))
        {
          PBReaderRecallMark();

          uint64_t v7 = v29;
          char v8 = v28;
          unsigned int v9 = v27;
LABEL_35:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 7u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 64;
        goto LABEL_34;
      case 8u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 24;
        goto LABEL_34;
      case 9u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 48;
LABEL_34:
        v31 = *(void **)((char *)a1 + v22);
        *(void *)((char *)a1 + v22) = v21;

        goto LABEL_35;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_35;
    }
  }
}

BOOL BMPBAppClipLaunchEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 56;
          goto LABEL_29;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_29;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_29;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 64;
          goto LABEL_29;
        case 5u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_29;
        case 6u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_29;
        case 7u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 48;
          goto LABEL_29;
        case 8u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 40;
LABEL_29:
          int v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v18) = v17;

          goto LABEL_30;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_30:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL BMPBAttributeEntryReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        int v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v18) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBNotificationEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = &OBJC_IVAR___BMPBNameComponents__familyName;
    char v8 = &OBJC_IVAR___BMPBNameComponents__familyName;
    unsigned int v9 = &OBJC_IVAR___BMPBNameComponents__familyName;
    unint64_t v10 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *v3;
        uint64_t v15 = *(void *)(a2 + v14);
        unint64_t v16 = v15 + 1;
        if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
          break;
        }
        char v17 = *(unsigned char *)(*(void *)(a2 + *v10) + v15);
        *(void *)(a2 + v14) = v16;
        v13 |= (unint64_t)(v17 & 0x7F) << v11;
        if ((v17 & 0x80) == 0) {
          goto LABEL_12;
        }
        v11 += 7;
        BOOL v18 = v12++ >= 9;
        if (v18)
        {
          unint64_t v13 = 0;
          int v19 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v19 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v13 = 0;
      }
LABEL_14:
      if (v19 || (v13 & 7) == 4) {
        break;
      }
      switch((v13 >> 3))
      {
        case 1u:
          uint64_t v21 = PBReaderReadString();
          uint64_t v22 = v7[125];
          goto LABEL_48;
        case 2u:
          *(unsigned char *)(a1 + v8[126]) |= 1u;
          uint64_t v23 = *v3;
          unint64_t v24 = *(void *)(a2 + v23);
          if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v25 = *(void *)(*(void *)(a2 + *v10) + v24);
            *(void *)(a2 + v23) = v24 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v25 = 0;
          }
          *(void *)(a1 + v9[127]) = v25;
          continue;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + v8[126]) |= 4u;
          while (2)
          {
            uint64_t v29 = *v3;
            uint64_t v30 = *(void *)(a2 + v29);
            unint64_t v31 = v30 + 1;
            if (v30 == -1 || v31 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v32 = *(unsigned char *)(*(void *)(a2 + *v10) + v30);
              *(void *)(a2 + v29) = v31;
              v28 |= (unint64_t)(v32 & 0x7F) << v26;
              if (v32 < 0)
              {
                v26 += 7;
                BOOL v18 = v27++ >= 9;
                if (v18)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_64;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v28) = 0;
          }
LABEL_64:
          *(_DWORD *)(a1 + 112) = v28;
          continue;
        case 4u:
          uint64_t v21 = PBReaderReadString();
          uint64_t v22 = 32;
          goto LABEL_48;
        case 5u:
          uint64_t v21 = PBReaderReadString();
          uint64_t v22 = 64;
          goto LABEL_48;
        case 7u:
          uint64_t v21 = PBReaderReadString();
          uint64_t v22 = 56;
          goto LABEL_48;
        case 8u:
          uint64_t v21 = PBReaderReadString();
          uint64_t v22 = 96;
          goto LABEL_48;
        case 9u:
          uint64_t v21 = PBReaderReadString();
          uint64_t v22 = 80;
          goto LABEL_48;
        case 0xAu:
          uint64_t v21 = PBReaderReadString();
          uint64_t v22 = 24;
          goto LABEL_48;
        case 0xBu:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v36 = 0;
          *(unsigned char *)(a1 + v8[126]) |= 2u;
          while (2)
          {
            uint64_t v37 = *v3;
            uint64_t v38 = *(void *)(a2 + v37);
            unint64_t v39 = v38 + 1;
            if (v38 == -1 || v39 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v40 = *(unsigned char *)(*(void *)(a2 + *v10) + v38);
              *(void *)(a2 + v37) = v39;
              v36 |= (unint64_t)(v40 & 0x7F) << v34;
              if (v40 < 0)
              {
                v34 += 7;
                BOOL v18 = v35++ >= 9;
                if (v18)
                {
                  uint64_t v36 = 0;
                  goto LABEL_68;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v36 = 0;
          }
LABEL_68:
          *(void *)(a1 + 16) = v36;
          continue;
        case 0xCu:
          uint64_t v21 = PBReaderReadString();
          uint64_t v22 = 88;
          goto LABEL_48;
        case 0xDu:
          uint64_t v21 = PBReaderReadString();
          uint64_t v22 = 40;
          goto LABEL_48;
        case 0xEu:
          uint64_t v21 = PBReaderReadString();
          uint64_t v22 = 72;
LABEL_48:
          v41 = *(void **)(a1 + v22);
          *(void *)(a1 + v22) = v21;

          continue;
        case 0xFu:
          v42 = v8;
          v43 = v9;
          v44 = v7;
          v45 = PBReaderReadString();
          if (v45) {
            [(id)a1 addContactIDs:v45];
          }

          uint64_t v7 = v44;
          unsigned int v9 = v43;
          char v8 = v42;
          continue;
        case 0x10u:
          char v46 = 0;
          unsigned int v47 = 0;
          uint64_t v48 = 0;
          *(unsigned char *)(a1 + v8[126]) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v49 = *v3;
        uint64_t v50 = *(void *)(a2 + v49);
        unint64_t v51 = v50 + 1;
        if (v50 == -1 || v51 > *(void *)(a2 + *v4)) {
          break;
        }
        char v52 = *(unsigned char *)(*(void *)(a2 + *v10) + v50);
        *(void *)(a2 + v49) = v51;
        v48 |= (unint64_t)(v52 & 0x7F) << v46;
        if ((v52 & 0x80) == 0) {
          goto LABEL_70;
        }
        v46 += 7;
        BOOL v18 = v47++ >= 9;
        if (v18)
        {
          uint64_t v48 = 0;
          goto LABEL_72;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_70:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v48 = 0;
      }
LABEL_72:
      *(unsigned char *)(a1 + 116) = v48 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBSoundDetectionEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 16;
      }
      else
      {
        if (v18 != 2)
        {
          if (v18 == 1)
          {
            *(unsigned char *)(a1 + 32) |= 1u;
            uint64_t v19 = *v3;
            unint64_t v20 = *(void *)(a2 + v19);
            if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
            {
              uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
              *(void *)(a2 + v19) = v20 + 8;
            }
            else
            {
              *(unsigned char *)(a2 + *v5) = 1;
              uint64_t v21 = 0;
            }
            *(void *)(a1 + 8) = v21;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 24;
      }
      unint64_t v24 = *(void **)(a1 + v23);
      *(void *)(a1 + v23) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBUserFocusComputedModeEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_51;
        case 2u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 44) |= 8u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  uint64_t v22 = 0;
                  goto LABEL_55;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v22 = 0;
          }
LABEL_55:
          *(unsigned char *)(a1 + 40) = v22 != 0;
          continue;
        case 3u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 44) |= 2u;
          while (2)
          {
            uint64_t v29 = *v3;
            unint64_t v30 = *(void *)(a2 + v29);
            if (v30 == -1 || v30 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
              *(void *)(a2 + v29) = v30 + 1;
              v28 |= (unint64_t)(v31 & 0x7F) << v26;
              if (v31 < 0)
              {
                v26 += 7;
                BOOL v14 = v27++ >= 9;
                if (v14)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_59;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v28) = 0;
          }
LABEL_59:
          uint64_t v43 = 20;
          goto LABEL_68;
        case 4u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 44) |= 1u;
          while (2)
          {
            uint64_t v34 = *v3;
            unint64_t v35 = *(void *)(a2 + v34);
            if (v35 == -1 || v35 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
              *(void *)(a2 + v34) = v35 + 1;
              v28 |= (unint64_t)(v36 & 0x7F) << v32;
              if (v36 < 0)
              {
                v32 += 7;
                BOOL v14 = v33++ >= 9;
                if (v14)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v28) = 0;
          }
LABEL_63:
          uint64_t v43 = 16;
          goto LABEL_68;
        case 5u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 44) |= 4u;
          break;
        case 6u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
LABEL_51:
          v42 = *(void **)(a1 + v18);
          *(void *)(a1 + v18) = v17;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v39 = *v3;
        unint64_t v40 = *(void *)(a2 + v39);
        if (v40 == -1 || v40 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
        *(void *)(a2 + v39) = v40 + 1;
        v28 |= (unint64_t)(v41 & 0x7F) << v37;
        if ((v41 & 0x80) == 0) {
          goto LABEL_65;
        }
        v37 += 7;
        BOOL v14 = v38++ >= 9;
        if (v14)
        {
          LODWORD(v28) = 0;
          goto LABEL_67;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_65:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v28) = 0;
      }
LABEL_67:
      uint64_t v43 = 24;
LABEL_68:
      *(_DWORD *)(a1 + v43) = v28;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMSleepModeChangeReasonFromReason(uint64_t a1)
{
  if (a1 < 0xA) {
    return qword_18EB36FE0[(int)a1];
  }
  uint64_t v3 = __biome_log_for_category();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    BMSleepModeChangeReasonFromReason_cold_1(a1);
  }

  return 0;
}

uint64_t typeFromBMPBSemanticLocationUserSpecificPlaceType(uint64_t result)
{
  uint64_t v1 = result;
  if (result < 5) {
    return result;
  }
  uint64_t v2 = __biome_log_for_category();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    typeFromBMPBSemanticLocationUserSpecificPlaceType_cold_1(v1);
  }

  return 0;
}

void sub_18E7A0D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_18E7A111C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
}

void sub_18E7A1470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

void sub_18E7A2438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_activity_scope_state_s a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

void sub_18E7A26A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state)
{
}

void sub_18E7A2D98(_Unwind_Exception *a1)
{
  os_activity_scope_leave((os_activity_scope_state_t)(v1 - 48));
  _Unwind_Resume(a1);
}

void sub_18E7A32C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t __CoreDuetLibraryCore_block_invoke_9()
{
  uint64_t result = _sl_dlopen();
  CoreDuetLibraryCore_frameworkLibrary_9 = result;
  return result;
}

Class __getFSFUtilsClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!FeatureStoreLibraryCore_frameworkLibrary)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __FeatureStoreLibraryCore_block_invoke;
    v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E55D8360;
    uint64_t v5 = 0;
    FeatureStoreLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!FeatureStoreLibraryCore_frameworkLibrary) {
    __getFSFUtilsClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("FSFUtils");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getFSFUtilsClass_block_invoke_cold_2();
  }
  getFSFUtilsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __FeatureStoreLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  FeatureStoreLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getSAPathInfoClass_block_invoke(uint64_t a1)
{
  SpaceAttributionLibrary();
  Class result = objc_getClass("SAPathInfo");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSAPathInfoClass_block_invoke_cold_1();
  }
  getSAPathInfoClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void SpaceAttributionLibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!SpaceAttributionLibraryCore_frameworkLibrary)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __SpaceAttributionLibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E55D8378;
    uint64_t v2 = 0;
    SpaceAttributionLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!SpaceAttributionLibraryCore_frameworkLibrary) {
    SpaceAttributionLibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __SpaceAttributionLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  SpaceAttributionLibraryCore_frameworkLibrary = result;
  return result;
}

Class __getSAPathManagerClass_block_invoke(uint64_t a1)
{
  SpaceAttributionLibrary();
  Class result = objc_getClass("SAPathManager");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getSAPathManagerClass_block_invoke_cold_1();
  }
  getSAPathManagerClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18E7A4250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18E7A4EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E7A5CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t BMPBDeviceMetadataEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_31;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_31;
        case 3u:
          char v20 = 0;
          unsigned int v21 = 0;
          uint64_t v22 = 0;
          *(unsigned char *)(a1 + 44) |= 1u;
          while (2)
          {
            uint64_t v23 = *v3;
            unint64_t v24 = *(void *)(a2 + v23);
            if (v24 == -1 || v24 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v24);
              *(void *)(a2 + v23) = v24 + 1;
              v22 |= (unint64_t)(v25 & 0x7F) << v20;
              if (v25 < 0)
              {
                v20 += 7;
                BOOL v14 = v21++ >= 9;
                if (v14)
                {
                  LODWORD(v22) = 0;
                  goto LABEL_42;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v22) = 0;
          }
LABEL_42:
          *(_DWORD *)(a1 + 24) = v22;
          continue;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
LABEL_31:
          char v26 = *(void **)(a1 + v18);
          *(void *)(a1 + v18) = v17;

          continue;
        case 5u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *(unsigned char *)(a1 + 44) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v30 = *v3;
        unint64_t v31 = *(void *)(a2 + v30);
        if (v31 == -1 || v31 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
        *(void *)(a2 + v30) = v31 + 1;
        v29 |= (unint64_t)(v32 & 0x7F) << v27;
        if ((v32 & 0x80) == 0) {
          goto LABEL_44;
        }
        v27 += 7;
        BOOL v14 = v28++ >= 9;
        if (v14)
        {
          uint64_t v29 = 0;
          goto LABEL_46;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v29 = 0;
      }
LABEL_46:
      *(unsigned char *)(a1 + 40) = v29 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBUserProofingEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 88) |= 1u;
              uint64_t v18 = *v3;
              unint64_t v19 = *(void *)(a2 + v18);
              if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
                *(void *)(a2 + v18) = v19 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v20 = 0;
              }
              *(void *)(a1 + 8) = v20;
              goto LABEL_34;
            case 2u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = 16;
              goto LABEL_33;
            case 3u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = 40;
              goto LABEL_33;
            case 4u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = 80;
              goto LABEL_33;
            case 5u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = 32;
              goto LABEL_33;
            case 6u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = 24;
              goto LABEL_33;
            case 7u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = 72;
              goto LABEL_33;
            case 8u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = 56;
              goto LABEL_33;
            case 9u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = 64;
              goto LABEL_33;
            case 0xAu:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = 48;
LABEL_33:
              unint64_t v24 = *(void **)(a1 + v22);
              *(void *)(a1 + v22) = v21;

              goto LABEL_34;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_34:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id bm_sha256(void *a1)
{
  long long v1 = [a1 dataUsingEncoding:4];
  uint64_t v2 = [MEMORY[0x1E4F1CA58] dataWithLength:32];
  CC_SHA256((const void *)[v1 bytes], objc_msgSend(v1, "length"), (unsigned __int8 *)objc_msgSend(v2, "mutableBytes"));
  uint64_t v3 = [v2 base64EncodedStringWithOptions:0];

  return v3;
}

uint64_t BMPBMailContentEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 240;
        goto LABEL_69;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 104;
        goto LABEL_69;
      case 3u:
        *(_WORD *)(a1 + 256) |= 1u;
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v94 = 8;
        goto LABEL_170;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 32;
        goto LABEL_69;
      case 5u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 176;
        goto LABEL_69;
      case 6u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 112;
        goto LABEL_69;
      case 7u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 224;
        goto LABEL_69;
      case 8u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 72;
        goto LABEL_69;
      case 9u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 56;
        goto LABEL_69;
      case 0xAu:
        unint64_t v24 = objc_alloc_init(BMPBMailContentHeaderEntry);
        [(id)a1 addHeaders:v24];
        if (!PBReaderPlaceMark() || !BMPBMailContentHeaderEntryReadFrom((uint64_t)v24, a2)) {
          goto LABEL_173;
        }
        goto LABEL_64;
      case 0xBu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 208;
        goto LABEL_69;
      case 0xCu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 144;
        goto LABEL_69;
      case 0xDu:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(_WORD *)(a1 + 256) |= 0x20u;
        while (2)
        {
          uint64_t v28 = *v3;
          uint64_t v29 = *(void *)(a2 + v28);
          unint64_t v30 = v29 + 1;
          if (v29 == -1 || v30 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              BOOL v15 = v26++ >= 9;
              if (v15)
              {
                uint64_t v27 = 0;
                goto LABEL_132;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_132:
        BOOL v92 = v27 != 0;
        uint64_t v93 = 250;
        goto LABEL_165;
      case 0xEu:
        uint64_t v18 = PBReaderReadData();
        uint64_t v19 = 136;
        goto LABEL_69;
      case 0xFu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 216;
        goto LABEL_69;
      case 0x10u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 200;
        goto LABEL_69;
      case 0x11u:
        PBReaderReadString();
        unint64_t v24 = (BMPBMailContentHeaderEntry *)objc_claimAutoreleasedReturnValue();
        if (v24) {
          [(id)a1 addAccountHandles:v24];
        }
        goto LABEL_65;
      case 0x12u:
        unint64_t v24 = objc_alloc_init(BMPBNamedHandle);
        uint64_t v32 = 192;
        goto LABEL_58;
      case 0x13u:
        PBReaderReadString();
        unint64_t v24 = (BMPBMailContentHeaderEntry *)objc_claimAutoreleasedReturnValue();
        if (v24) {
          [(id)a1 addMailboxIdentifiers:v24];
        }
        goto LABEL_65;
      case 0x14u:
        unint64_t v24 = objc_alloc_init(BMPBNamedHandle);
        uint64_t v32 = 152;
        goto LABEL_58;
      case 0x15u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 40;
        goto LABEL_69;
      case 0x16u:
        unint64_t v24 = objc_alloc_init(BMPBContentAttachment);
        [(id)a1 addAttachments:v24];
        if (!PBReaderPlaceMark() || !BMPBContentAttachmentReadFrom((uint64_t)v24, a2)) {
          goto LABEL_173;
        }
        goto LABEL_64;
      case 0x17u:
        unint64_t v24 = objc_alloc_init(BMPBNamedHandle);
        uint64_t v32 = 120;
LABEL_58:
        objc_storeStrong((id *)(a1 + v32), v24);
        goto LABEL_62;
      case 0x18u:
        unint64_t v24 = objc_alloc_init(BMPBNamedHandle);
        [(id)a1 addToHandles:v24];
        goto LABEL_62;
      case 0x19u:
        unint64_t v24 = objc_alloc_init(BMPBNamedHandle);
        [(id)a1 addCcHandles:v24];
        goto LABEL_62;
      case 0x1Au:
        unint64_t v24 = objc_alloc_init(BMPBNamedHandle);
        [(id)a1 addBccHandles:v24];
LABEL_62:
        if (PBReaderPlaceMark() && BMPBNamedHandleReadFrom((uint64_t)v24, a2))
        {
LABEL_64:
          PBReaderRecallMark();
LABEL_65:

LABEL_171:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_173:

        return 0;
      case 0x1Bu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 88;
        goto LABEL_69;
      case 0x1Cu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 184;
        goto LABEL_69;
      case 0x1Du:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 96;
LABEL_69:
        unsigned int v33 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_171;
      case 0x1Eu:
        *(_WORD *)(a1 + 256) |= 2u;
        uint64_t v34 = *v3;
        unint64_t v35 = *(void *)(a2 + v34);
        if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v35);
          *(void *)(a2 + v34) = v35 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        uint64_t v94 = 16;
LABEL_170:
        *(void *)(a1 + v94) = v23;
        goto LABEL_171;
      case 0x1Fu:
        char v36 = 0;
        unsigned int v37 = 0;
        uint64_t v38 = 0;
        *(_WORD *)(a1 + 256) |= 4u;
        while (2)
        {
          uint64_t v39 = *v3;
          uint64_t v40 = *(void *)(a2 + v39);
          unint64_t v41 = v40 + 1;
          if (v40 == -1 || v41 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
            *(void *)(a2 + v39) = v41;
            v38 |= (unint64_t)(v42 & 0x7F) << v36;
            if (v42 < 0)
            {
              v36 += 7;
              BOOL v15 = v37++ >= 9;
              if (v15)
              {
                LODWORD(v38) = 0;
                goto LABEL_136;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v38) = 0;
        }
LABEL_136:
        *(_DWORD *)(a1 + 160) = v38;
        goto LABEL_171;
      case 0x20u:
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v45 = 0;
        *(_WORD *)(a1 + 256) |= 0x80u;
        while (2)
        {
          uint64_t v46 = *v3;
          uint64_t v47 = *(void *)(a2 + v46);
          unint64_t v48 = v47 + 1;
          if (v47 == -1 || v48 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
            *(void *)(a2 + v46) = v48;
            v45 |= (unint64_t)(v49 & 0x7F) << v43;
            if (v49 < 0)
            {
              v43 += 7;
              BOOL v15 = v44++ >= 9;
              if (v15)
              {
                uint64_t v45 = 0;
                goto LABEL_140;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v45 = 0;
        }
LABEL_140:
        BOOL v92 = v45 != 0;
        uint64_t v93 = 252;
        goto LABEL_165;
      case 0x21u:
        char v50 = 0;
        unsigned int v51 = 0;
        uint64_t v52 = 0;
        *(_WORD *)(a1 + 256) |= 0x200u;
        while (2)
        {
          uint64_t v53 = *v3;
          uint64_t v54 = *(void *)(a2 + v53);
          unint64_t v55 = v54 + 1;
          if (v54 == -1 || v55 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v56 = *(unsigned char *)(*(void *)(a2 + *v7) + v54);
            *(void *)(a2 + v53) = v55;
            v52 |= (unint64_t)(v56 & 0x7F) << v50;
            if (v56 < 0)
            {
              v50 += 7;
              BOOL v15 = v51++ >= 9;
              if (v15)
              {
                uint64_t v52 = 0;
                goto LABEL_144;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v52 = 0;
        }
LABEL_144:
        BOOL v92 = v52 != 0;
        uint64_t v93 = 254;
        goto LABEL_165;
      case 0x22u:
        char v57 = 0;
        unsigned int v58 = 0;
        uint64_t v59 = 0;
        *(_WORD *)(a1 + 256) |= 0x10u;
        while (2)
        {
          uint64_t v60 = *v3;
          uint64_t v61 = *(void *)(a2 + v60);
          unint64_t v62 = v61 + 1;
          if (v61 == -1 || v62 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v63 = *(unsigned char *)(*(void *)(a2 + *v7) + v61);
            *(void *)(a2 + v60) = v62;
            v59 |= (unint64_t)(v63 & 0x7F) << v57;
            if (v63 < 0)
            {
              v57 += 7;
              BOOL v15 = v58++ >= 9;
              if (v15)
              {
                uint64_t v59 = 0;
                goto LABEL_148;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v59 = 0;
        }
LABEL_148:
        BOOL v92 = v59 != 0;
        uint64_t v93 = 249;
        goto LABEL_165;
      case 0x23u:
        char v64 = 0;
        unsigned int v65 = 0;
        uint64_t v66 = 0;
        *(_WORD *)(a1 + 256) |= 0x40u;
        while (2)
        {
          uint64_t v67 = *v3;
          uint64_t v68 = *(void *)(a2 + v67);
          unint64_t v69 = v68 + 1;
          if (v68 == -1 || v69 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v70 = *(unsigned char *)(*(void *)(a2 + *v7) + v68);
            *(void *)(a2 + v67) = v69;
            v66 |= (unint64_t)(v70 & 0x7F) << v64;
            if (v70 < 0)
            {
              v64 += 7;
              BOOL v15 = v65++ >= 9;
              if (v15)
              {
                uint64_t v66 = 0;
                goto LABEL_152;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v66 = 0;
        }
LABEL_152:
        BOOL v92 = v66 != 0;
        uint64_t v93 = 251;
        goto LABEL_165;
      case 0x24u:
        char v71 = 0;
        unsigned int v72 = 0;
        uint64_t v73 = 0;
        *(_WORD *)(a1 + 256) |= 0x100u;
        while (2)
        {
          uint64_t v74 = *v3;
          uint64_t v75 = *(void *)(a2 + v74);
          unint64_t v76 = v75 + 1;
          if (v75 == -1 || v76 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v77 = *(unsigned char *)(*(void *)(a2 + *v7) + v75);
            *(void *)(a2 + v74) = v76;
            v73 |= (unint64_t)(v77 & 0x7F) << v71;
            if (v77 < 0)
            {
              v71 += 7;
              BOOL v15 = v72++ >= 9;
              if (v15)
              {
                uint64_t v73 = 0;
                goto LABEL_156;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v73 = 0;
        }
LABEL_156:
        BOOL v92 = v73 != 0;
        uint64_t v93 = 253;
        goto LABEL_165;
      case 0x25u:
        char v78 = 0;
        unsigned int v79 = 0;
        uint64_t v80 = 0;
        *(_WORD *)(a1 + 256) |= 0x400u;
        while (2)
        {
          uint64_t v81 = *v3;
          uint64_t v82 = *(void *)(a2 + v81);
          unint64_t v83 = v82 + 1;
          if (v82 == -1 || v83 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v84 = *(unsigned char *)(*(void *)(a2 + *v7) + v82);
            *(void *)(a2 + v81) = v83;
            v80 |= (unint64_t)(v84 & 0x7F) << v78;
            if (v84 < 0)
            {
              v78 += 7;
              BOOL v15 = v79++ >= 9;
              if (v15)
              {
                uint64_t v80 = 0;
                goto LABEL_160;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v80 = 0;
        }
LABEL_160:
        BOOL v92 = v80 != 0;
        uint64_t v93 = 255;
        goto LABEL_165;
      case 0x26u:
        char v85 = 0;
        unsigned int v86 = 0;
        uint64_t v87 = 0;
        *(_WORD *)(a1 + 256) |= 8u;
        while (2)
        {
          uint64_t v88 = *v3;
          uint64_t v89 = *(void *)(a2 + v88);
          unint64_t v90 = v89 + 1;
          if (v89 == -1 || v90 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v91 = *(unsigned char *)(*(void *)(a2 + *v7) + v89);
            *(void *)(a2 + v88) = v90;
            v87 |= (unint64_t)(v91 & 0x7F) << v85;
            if (v91 < 0)
            {
              v85 += 7;
              BOOL v15 = v86++ >= 9;
              if (v15)
              {
                uint64_t v87 = 0;
                goto LABEL_164;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v87 = 0;
        }
LABEL_164:
        BOOL v92 = v87 != 0;
        uint64_t v93 = 248;
LABEL_165:
        *(unsigned char *)(a1 + v93) = v92;
        goto LABEL_171;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_171;
    }
  }
}

BOOL BMPBHomeKitClientActionSetEventReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          BOOL v17 = objc_alloc_init(BMPBHomeKitClientBase);
          objc_storeStrong(a1 + 5, v17);
          if PBReaderPlaceMark() && (BMPBHomeKitClientBaseReadFrom((uint64_t)v17, a2))
          {
            PBReaderRecallMark();
            goto LABEL_31;
          }

          return 0;
        case 2u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 3;
          goto LABEL_30;
        case 3u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 2;
          goto LABEL_30;
        case 4u:
          PBReaderReadString();
          BOOL v17 = (BMPBHomeKitClientBase *)objc_claimAutoreleasedReturnValue();
          if (v17) {
            [a1 addAssociatedAccessoryUniqueIdentifiers:v17];
          }
          goto LABEL_31;
        case 5u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 1;
          goto LABEL_30;
        case 6u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 6;
LABEL_30:
          BOOL v17 = (BMPBHomeKitClientBase *)a1[v19];
          a1[v19] = (id)v18;
LABEL_31:

          goto LABEL_32;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_32:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBFindMyLocationChangeEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 32;
          goto LABEL_43;
        case 2u:
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 56) |= 8u;
          while (2)
          {
            uint64_t v24 = *v3;
            uint64_t v25 = *(void *)(a2 + v24);
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
              *(void *)(a2 + v24) = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if (v27 < 0)
              {
                v21 += 7;
                BOOL v15 = v22++ >= 9;
                if (v15)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_47;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_47:
          uint64_t v40 = 40;
          goto LABEL_52;
        case 3u:
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 56) |= 4u;
          break;
        case 4u:
          *(unsigned char *)(a1 + 56) |= 1u;
          uint64_t v34 = *v3;
          unint64_t v35 = *(void *)(a2 + v34);
          if (v35 <= 0xFFFFFFFFFFFFFFF7 && v35 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v36 = *(void *)(*(void *)(a2 + *v7) + v35);
            *(void *)(a2 + v34) = v35 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v36 = 0;
          }
          uint64_t v41 = 8;
          goto LABEL_57;
        case 5u:
          *(unsigned char *)(a1 + 56) |= 2u;
          uint64_t v37 = *v3;
          unint64_t v38 = *(void *)(a2 + v37);
          if (v38 <= 0xFFFFFFFFFFFFFFF7 && v38 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v36 = *(void *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v38 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v36 = 0;
          }
          uint64_t v41 = 16;
LABEL_57:
          *(void *)(a1 + v41) = v36;
          continue;
        case 6u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 48;
LABEL_43:
          uint64_t v39 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v30 = *v3;
        uint64_t v31 = *(void *)(a2 + v30);
        unint64_t v32 = v31 + 1;
        if (v31 == -1 || v32 > *(void *)(a2 + *v4)) {
          break;
        }
        char v33 = *(unsigned char *)(*(void *)(a2 + *v7) + v31);
        *(void *)(a2 + v30) = v32;
        v23 |= (unint64_t)(v33 & 0x7F) << v28;
        if ((v33 & 0x80) == 0) {
          goto LABEL_49;
        }
        v28 += 7;
        BOOL v15 = v29++ >= 9;
        if (v15)
        {
          LODWORD(v23) = 0;
          goto LABEL_51;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_49:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v23) = 0;
      }
LABEL_51:
      uint64_t v40 = 24;
LABEL_52:
      *(_DWORD *)(a1 + v40) = v23;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBCommunicationSafetyResultEventReadFrom(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = &OBJC_IVAR___BMPBNameComponents__familyName;
    char v8 = &OBJC_IVAR___BMPBNameComponents__familyName;
    unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v10 = &OBJC_IVAR___BMPBNameComponents__familyName;
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *v3;
        uint64_t v15 = *(void *)(a2 + v14);
        unint64_t v16 = v15 + 1;
        if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
          break;
        }
        char v17 = *(unsigned char *)(*(void *)(a2 + *v9) + v15);
        *(void *)(a2 + v14) = v16;
        v13 |= (unint64_t)(v17 & 0x7F) << v11;
        if ((v17 & 0x80) == 0) {
          goto LABEL_12;
        }
        v11 += 7;
        BOOL v18 = v12++ >= 9;
        if (v18)
        {
          unint64_t v13 = 0;
          int v19 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v19 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v13 = 0;
      }
LABEL_14:
      if (v19 || (v13 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v13 >> 3))
      {
        case 1u:
          a1[v7[386]] |= 1u;
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v22);
            *(void *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          *(void *)&a1[v8[387]] = v23;
          goto LABEL_74;
        case 2u:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = v10[388];
          goto LABEL_73;
        case 3u:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = 80;
          goto LABEL_73;
        case 4u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          a1[v7[386]] |= 4u;
          while (2)
          {
            uint64_t v30 = *v3;
            uint64_t v31 = *(void *)(a2 + v30);
            unint64_t v32 = v31 + 1;
            if (v31 == -1 || v32 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
              *(void *)(a2 + v30) = v32;
              v29 |= (unint64_t)(v33 & 0x7F) << v27;
              if (v33 < 0)
              {
                v27 += 7;
                BOOL v18 = v28++ >= 9;
                if (v18)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_62;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_62:
          uint64_t v50 = 28;
          goto LABEL_71;
        case 5u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v29 = 0;
          a1[v7[386]] |= 8u;
          while (2)
          {
            uint64_t v36 = *v3;
            uint64_t v37 = *(void *)(a2 + v36);
            unint64_t v38 = v37 + 1;
            if (v37 == -1 || v38 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v39 = *(unsigned char *)(*(void *)(a2 + *v9) + v37);
              *(void *)(a2 + v36) = v38;
              v29 |= (unint64_t)(v39 & 0x7F) << v34;
              if (v39 < 0)
              {
                v34 += 7;
                BOOL v18 = v35++ >= 9;
                if (v18)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_66;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_66:
          uint64_t v50 = 32;
          goto LABEL_71;
        case 6u:
          char v40 = 0;
          unsigned int v41 = 0;
          uint64_t v29 = 0;
          a1[v7[386]] |= 2u;
          while (2)
          {
            uint64_t v42 = *v3;
            uint64_t v43 = *(void *)(a2 + v42);
            unint64_t v44 = v43 + 1;
            if (v43 == -1 || v44 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v45 = *(unsigned char *)(*(void *)(a2 + *v9) + v43);
              *(void *)(a2 + v42) = v44;
              v29 |= (unint64_t)(v45 & 0x7F) << v40;
              if (v45 < 0)
              {
                v40 += 7;
                BOOL v18 = v41++ >= 9;
                if (v18)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_70;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_70:
          uint64_t v50 = 24;
LABEL_71:
          *(_DWORD *)&a1[v50] = v29;
          goto LABEL_74;
        case 7u:
          uint64_t v46 = v7;
          uint64_t v47 = v10;
          unint64_t v48 = v8;
          char v49 = PBReaderReadString();
          if (v49) {
            [a1 addContactHandles:v49];
          }

          char v8 = v48;
          unint64_t v10 = v47;
          uint64_t v7 = v46;
          goto LABEL_74;
        case 8u:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = 48;
          goto LABEL_73;
        case 9u:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = 64;
          goto LABEL_73;
        case 0xAu:
          if (a1[116])
          {
            if ((PBReaderSkipValueWithTag() & 1) == 0) {
              return 0;
            }
          }
          else
          {
            uint64_t v25 = PBReaderReadData();
            uint64_t v26 = 88;
LABEL_73:
            unsigned int v51 = *(void **)&a1[v26];
            *(void *)&a1[v26] = v25;
          }
LABEL_74:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
        case 0xBu:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = 104;
          goto LABEL_73;
        case 0xCu:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = 96;
          goto LABEL_73;
        case 0xDu:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = 56;
          goto LABEL_73;
        case 0xEu:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = 72;
          goto LABEL_73;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_74;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBLastAlarmEventTypeFromType(unint64_t a1, unsigned char *a2)
{
  uint64_t v2 = a1;
  if (a1 >= 0xB)
  {
    long long v4 = __biome_log_for_category();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      BMPBLastAlarmEventTypeFromType_cold_1(v2);
    }

    if (a2) {
      *a2 = 1;
    }
    return 0xFFFFFFFFLL;
  }
  return v2;
}

uint64_t BMPBAlarmEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v20) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_44;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_46;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_46:
          *(unsigned char *)(a1 + 24) = v19 != 0;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_50:
          uint64_t v37 = 16;
          goto LABEL_55;
        case 3u:
          uint64_t v30 = PBReaderReadString();
          uint64_t v31 = *(void **)(a1 + 8);
          *(void *)(a1 + 8) = v30;

          continue;
        case 4u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v34 = *v3;
        unint64_t v35 = *(void *)(a2 + v34);
        if (v35 == -1 || v35 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v35);
        *(void *)(a2 + v34) = v35 + 1;
        v26 |= (unint64_t)(v36 & 0x7F) << v32;
        if ((v36 & 0x80) == 0) {
          goto LABEL_52;
        }
        v32 += 7;
        BOOL v14 = v33++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_54;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_54:
      uint64_t v37 = 20;
LABEL_55:
      *(_DWORD *)(a1 + v37) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMComputeSourceServerInterface()
{
  return [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1EDDF26A0];
}

void sub_18E7BD3F0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18E7BD658(_Unwind_Exception *a1)
{
  objc_destroyWeak(v3);
  objc_destroyWeak(v2);
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v4 - 80));
  objc_destroyWeak((id *)(v4 - 72));
  _Unwind_Resume(a1);
}

void sub_18E7BDC38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18E7BE1C8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18E7BE548(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 40));
  _Unwind_Resume(a1);
}

void sub_18E7BE88C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t BMPBNowPlayingOutputDeviceReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = PBReaderReadString();
        unsigned int v25 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v24;
      }
      else
      {
        if (v17 == 2)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 24) |= 1u;
          while (1)
          {
            uint64_t v28 = *v3;
            unint64_t v29 = *(void *)(a2 + v28);
            if (v29 == -1 || v29 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v28) = v29 + 1;
            v20 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0) {
              goto LABEL_43;
            }
            v26 += 7;
            BOOL v14 = v27++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_45;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_45:
          uint64_t v32 = 16;
        }
        else
        {
          if (v17 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v18 = 0;
          unsigned int v19 = 0;
          uint64_t v20 = 0;
          *(unsigned char *)(a1 + 24) |= 2u;
          while (1)
          {
            uint64_t v21 = *v3;
            unint64_t v22 = *(void *)(a2 + v21);
            if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 1;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if ((v23 & 0x80) == 0) {
              goto LABEL_39;
            }
            v18 += 7;
            BOOL v14 = v19++ >= 9;
            if (v14)
            {
              LODWORD(v20) = 0;
              goto LABEL_41;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v20) = 0;
          }
LABEL_41:
          uint64_t v32 = 20;
        }
        *(_DWORD *)(a1 + v32) = v20;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBParsecSearchTopicReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        uint64_t v20 = *v3;
        unint64_t v21 = *(void *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(void *)(a2 + *v4))
        {
          int v22 = *(_DWORD *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v20) = v21 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          int v22 = 0;
        }
        *(_DWORD *)(a1 + 16) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v18 = PBReaderReadString();
        unsigned int v19 = *(void **)(a1 + 8);
        *(void *)(a1 + 8) = v18;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBPhotosKnowledgeGraphEnrichmentEntityReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 32;
          goto LABEL_26;
        case 2u:
          *(unsigned char *)(a1 + 40) |= 1u;
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          *(void *)(a1 + 8) = v23;
          continue;
        case 3u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
LABEL_26:
          uint64_t v24 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        case 4u:
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          *(unsigned char *)(a1 + 40) |= 2u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v28 = *v3;
        uint64_t v29 = *(void *)(a2 + v28);
        unint64_t v30 = v29 + 1;
        if (v29 == -1 || v30 > *(void *)(a2 + *v4)) {
          break;
        }
        char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
        *(void *)(a2 + v28) = v30;
        v27 |= (unint64_t)(v31 & 0x7F) << v25;
        if ((v31 & 0x80) == 0) {
          goto LABEL_35;
        }
        v25 += 7;
        BOOL v15 = v26++ >= 9;
        if (v15)
        {
          LODWORD(v27) = 0;
          goto LABEL_37;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_35:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v27) = 0;
      }
LABEL_37:
      *(_DWORD *)(a1 + 16) = v27;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t *initializeBufferWithCopyOfBuffer for MaterializedViewPhysicalPlan(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for MaterializedView();
    (*((void (**)(uint64_t *, uint64_t *, ValueMetadata *))v7[-1].Description + 2))(a1, a2, v7);
    uint64_t v8 = a3[5];
    unsigned int v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v11 = (int *)type metadata accessor for SelectCorePhysicalPlan(0);
    uint64_t v12 = v11[5];
    uint64_t v24 = &v10[v12];
    char v25 = &v9[v12];
    unint64_t v13 = type metadata accessor for SelectCore();
    char v14 = (void (*)(char *, char *, ValueMetadata *))*((void *)v13[-1].Description + 2);
    swift_bridgeObjectRetain();
    v14(v25, v24, v13);
    uint64_t v15 = v11[6];
    int v16 = *(void **)&v10[v15];
    *(void *)&v9[v15] = v16;
    *(void *)&v9[v11[7]] = *(void *)&v10[v11[7]];
    *(void *)&v9[v11[8]] = *(void *)&v10[v11[8]];
    uint64_t v17 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    uint64_t v18 = (uint64_t *)((char *)a1 + v17);
    uint64_t v19 = (uint64_t *)((char *)a2 + v17);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    id v21 = v16;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 3))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v10 = (int *)type metadata accessor for SelectCorePhysicalPlan(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  char v14 = type metadata accessor for SelectCore();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v14[-1].Description + 3))(v12, v13, v14);
  uint64_t v15 = v10[6];
  int v16 = *(void **)(v9 + v15);
  uint64_t v17 = *(void **)(v8 + v15);
  *(void *)(v8 + v15) = v16;
  id v18 = v16;

  *(void *)(v8 + v10[7]) = *(void *)(v9 + v10[7]);
  *(void *)(v8 + v10[8]) = *(void *)(v9 + v10[8]);
  swift_retain();
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  id v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 4))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  unint64_t v10 = (int *)type metadata accessor for SelectCorePhysicalPlan(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  char v14 = type metadata accessor for SelectCore();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v14[-1].Description + 4))(v12, v13, v14);
  *(void *)(v8 + v10[6]) = *(void *)(v9 + v10[6]);
  *(void *)(v8 + v10[7]) = *(void *)(v9 + v10[7]);
  *(void *)(v8 + v10[8]) = *(void *)(v9 + v10[8]);
  uint64_t v15 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  return a1;
}

uint64_t assignWithTake for MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 5))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  swift_bridgeObjectRelease();
  unint64_t v10 = (int *)type metadata accessor for SelectCorePhysicalPlan(0);
  uint64_t v11 = v10[5];
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  char v14 = type metadata accessor for SelectCore();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v14[-1].Description + 5))(v12, v13, v14);
  uint64_t v15 = v10[6];
  int v16 = *(void **)(v8 + v15);
  *(void *)(v8 + v15) = *(void *)(v9 + v15);

  *(void *)(v8 + v10[7]) = *(void *)(v9 + v10[7]);
  *(void *)(v8 + v10[8]) = *(void *)(v9 + v10[8]);
  swift_release();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  uint64_t v17 = a3[7];
  id v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *id v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_18E7C207C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for MaterializedView();
  OUTLINED_FUNCTION_5_0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    type metadata accessor for SelectCorePhysicalPlan(0);
    OUTLINED_FUNCTION_5_0();
    if (*(_DWORD *)(v11 + 84) != a2) {
      return OUTLINED_FUNCTION_94(*(void *)(a1 + *(int *)(a3 + 24)));
    }
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return __swift_getEnumTagSinglePayload(v9, a2, v8);
}

void sub_18E7C2124(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for MaterializedView();
  OUTLINED_FUNCTION_5_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    type metadata accessor for SelectCorePhysicalPlan(0);
    OUTLINED_FUNCTION_5_0();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

uint64_t type metadata completion function for MaterializedViewPhysicalPlan()
{
  uint64_t result = (uint64_t)type metadata accessor for MaterializedView();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SelectCorePhysicalPlan(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SelectCorePhysicalPlan(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SelectCore();
    uint64_t v12 = (void (*)(char *, char *, ValueMetadata *))*((void *)v11[-1].Description + 2);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)v7 + v13) = (uint64_t)v15;
    *(uint64_t *)((char *)v7 + v14) = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    id v16 = v15;
  }
  swift_retain();
  return v7;
}

uint64_t destroy for SelectCorePhysicalPlan(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  int v5 = type metadata accessor for SelectCore();
  (*((void (**)(uint64_t, ValueMetadata *))v5[-1].Description + 1))(v4, v5);

  return swift_release();
}

void *initializeWithCopy for SelectCorePhysicalPlan(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SelectCore();
  uint64_t v10 = (void (*)(char *, char *, ValueMetadata *))*((void *)v9[-1].Description + 2);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = *(void **)((char *)a2 + v11);
  *(void *)((char *)a1 + v11) = v13;
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  id v14 = v13;
  swift_retain();
  return a1;
}

void *assignWithCopy for SelectCorePhysicalPlan(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SelectCore();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)((char *)a2 + v10);
  uint64_t v12 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = v11;
  id v13 = v11;

  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for SelectCorePhysicalPlan(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SelectCore();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 4))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

void *assignWithTake for SelectCorePhysicalPlan(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SelectCore();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 5))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);

  uint64_t v12 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SelectCorePhysicalPlan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E7C2798);
}

uint64_t sub_18E7C2798(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF) {
    return OUTLINED_FUNCTION_94(*a1);
  }
  uint64_t v7 = type metadata accessor for SelectCore();
  uint64_t v8 = (uint64_t)a1 + *(int *)(a3 + 20);

  return __swift_getEnumTagSinglePayload(v8, a2, (uint64_t)v7);
}

uint64_t storeEnumTagSinglePayload for SelectCorePhysicalPlan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E7C2828);
}

void *sub_18E7C2828(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for SelectCore();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 20);
    return (void *)__swift_storeEnumTagSinglePayload(v8, a2, a2, (uint64_t)v7);
  }
  return result;
}

ValueMetadata *type metadata completion function for SelectCorePhysicalPlan()
{
  uint64_t result = type metadata accessor for SelectCore();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

BOOL static StorableValue.CodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void StorableValue.CodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t StorableValue.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x5672656765746E69 && a2 == 0xEC00000065756C61;
  if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6156656C62756F64 && a2 == 0xEB0000000065756CLL;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x756C615665746164 && a2 == 0xE900000000000065;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else
      {
        BOOL v8 = a1 == 0x6156676E69727473 && a2 == 0xEB0000000065756CLL;
        if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 3;
        }
        else
        {
          BOOL v9 = a1 == 0x756C61566E6F736ALL && a2 == 0xE900000000000065;
          if (v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_bridgeObjectRelease();
            return 4;
          }
          else
          {
            BOOL v10 = a1 == 0x756C615661746164 && a2 == 0xE900000000000065;
            if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              return 5;
            }
            else
            {
              BOOL v11 = a1 == 0x756C615664697575 && a2 == 0xE900000000000065;
              if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                return 6;
              }
              else if (a1 == 0x756C61566C6C756ELL && a2 == 0xE900000000000065)
              {
                swift_bridgeObjectRelease();
                return 7;
              }
              else
              {
                char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                if (v13) {
                  return 7;
                }
                else {
                  return 8;
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t StorableValue.CodingKeys.init(intValue:)()
{
  return 8;
}

Swift::Int StorableValue.CodingKeys.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t StorableValue.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t StorableValue.CodingKeys.stringValue.getter(char a1)
{
  return *(void *)&aIntegervdouble[8 * a1];
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance StorableValue.CodingKeys(char *a1, char *a2)
{
  return static StorableValue.CodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StorableValue.CodingKeys()
{
  return StorableValue.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance StorableValue.CodingKeys(uint64_t a1)
{
  StorableValue.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StorableValue.CodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance StorableValue.CodingKeys()
{
  return StorableValue.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StorableValue.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = StorableValue.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance StorableValue.CodingKeys()
{
  return StorableValue.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance StorableValue.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = StorableValue.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

void StorableValue.DataValueCodingKeys.hash(into:)()
{
}

uint64_t StorableValue.DataValueCodingKeys.stringValue.getter()
{
  return 12383;
}

uint64_t StorableValue.NullValueCodingKeys.init(stringValue:)()
{
  return 1;
}

uint64_t StorableValue.NullValueCodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t StorableValue.DataValueCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int StorableValue.DataValueCodingKeys.hashValue.getter()
{
  return Hasher._finalize()();
}

void StorableValue.encode(to:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v69 = v0;
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.NullValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_56(v6, v53);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.UuidValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_10();
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = OUTLINED_FUNCTION_35(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_55(v10, v54);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.DataValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_54(v12, v55);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.JsonValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v65 = v14;
  uint64_t v66 = v13;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_27(v15, v56);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.StringValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v62 = v17;
  uint64_t v63 = v16;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_70(v18);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.DateValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_70(v20);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v22 = OUTLINED_FUNCTION_35(v21);
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_70(v23);
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.DoubleValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v58 = v24;
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_67();
  uint64_t v28 = v27 - v26;
  uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.IntegerValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v57 = v30;
  MEMORY[0x1F4188790](v31);
  OUTLINED_FUNCTION_69();
  type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_36_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedEncodingContainer<StorableValue.CodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v68 = v33;
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_24();
  uint64_t v35 = *(void *)(v4 + 24);
  char v36 = (void *)OUTLINED_FUNCTION_71();
  __swift_project_boxed_opaque_existential_1(v36, v37);
  lazy protocol witness table accessor for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of StorableValue(v69, (uint64_t)v1, (void (*)(void))type metadata accessor for StorableValue);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      lazy protocol witness table accessor for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys();
      OUTLINED_FUNCTION_23();
      uint64_t v38 = v59;
      OUTLINED_FUNCTION_76();
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      uint64_t v39 = v58;
      goto LABEL_6;
    case 2u:
      outlined init with take of UUID?((uint64_t)v1, v60, (uint64_t *)&demangling cache variable for type metadata for Date?);
      lazy protocol witness table accessor for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys();
      OUTLINED_FUNCTION_86();
      type metadata accessor for Date();
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      OUTLINED_FUNCTION_2_4();
      v40();
      uint64_t v41 = v60;
      uint64_t v42 = (uint64_t *)&demangling cache variable for type metadata for Date?;
      goto LABEL_11;
    case 3u:
      lazy protocol witness table accessor for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys();
      uint64_t v28 = v61;
      OUTLINED_FUNCTION_23();
      uint64_t v38 = v63;
      OUTLINED_FUNCTION_76();
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = v62;
LABEL_6:
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v28, v38);
      goto LABEL_8;
    case 4u:
      lazy protocol witness table accessor for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys();
      OUTLINED_FUNCTION_23();
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
      goto LABEL_8;
    case 5u:
      uint64_t v46 = *v1;
      unint64_t v47 = v1[1];
      lazy protocol witness table accessor for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys();
      OUTLINED_FUNCTION_23();
      lazy protocol witness table accessor for type Data and conformance Data();
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      OUTLINED_FUNCTION_2_4();
      v48();
      OUTLINED_FUNCTION_83();
      OUTLINED_FUNCTION_2_4();
      v49();
      outlined consume of Data?(v46, v47);
      goto LABEL_13;
    case 6u:
      outlined init with take of UUID?((uint64_t)v1, v67, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      lazy protocol witness table accessor for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys();
      OUTLINED_FUNCTION_86();
      type metadata accessor for UUID();
      lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      OUTLINED_FUNCTION_76();
      KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
      OUTLINED_FUNCTION_2_4();
      v50();
      uint64_t v42 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
      uint64_t v41 = v67;
LABEL_11:
      outlined destroy of UUID?(v41, v42);
      char v45 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
      uint64_t v43 = (uint64_t)v1;
      uint64_t v44 = v35;
      goto LABEL_12;
    case 7u:
      lazy protocol witness table accessor for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
      OUTLINED_FUNCTION_2_4();
      v51();
      OUTLINED_FUNCTION_96();
      OUTLINED_FUNCTION_2_4();
      v52();
      goto LABEL_13;
    default:
      lazy protocol witness table accessor for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys();
      OUTLINED_FUNCTION_23();
      KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
      (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v2, v29);
LABEL_8:
      uint64_t v43 = OUTLINED_FUNCTION_83();
LABEL_12:
      v45(v43, v44);
LABEL_13:
      OUTLINED_FUNCTION_31();
      return;
  }
}

Swift::Int StorableValue.hashValue.getter()
{
  uint64_t v4 = v0;
  uint64_t v5 = type metadata accessor for Date.ISO8601FormatStyle();
  OUTLINED_FUNCTION_0_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_67();
  uint64_t v11 = v10 - v9;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_36_0();
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v14 = OUTLINED_FUNCTION_35(v13);
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_47();
  uint64_t v17 = v15 - v16;
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_68();
  Hasher.init(_seed:)();
  outlined init with copy of StorableValue(v4, v3, (void (*)(void))type metadata accessor for StorableValue);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      if (*(unsigned char *)(v3 + 8))
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
        goto LABEL_8;
      }
      static StorableValue.hashForDouble(double:)(*(double *)v3);
      Swift::UInt v21 = Int.hashValue.getter();
      goto LABEL_16;
    case 2u:
      outlined init with take of UUID?(v3, v1, (uint64_t *)&demangling cache variable for type metadata for Date?);
      uint64_t v22 = OUTLINED_FUNCTION_90();
      outlined init with copy of Date?(v22, v23, (uint64_t *)&demangling cache variable for type metadata for Date?);
      uint64_t v24 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload(v17, 1, v24) == 1)
      {
        outlined destroy of UUID?(v17, (uint64_t *)&demangling cache variable for type metadata for Date?);
        Hasher._combine(_:)(0);
      }
      else
      {
        default argument 0 of Date.ISO8601Format(_:)(v11);
        Date.ISO8601Format(_:)();
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v11, v5);
        OUTLINED_FUNCTION_14();
        OUTLINED_FUNCTION_2_4();
        v31();
        Swift::UInt v32 = String.hashValue.getter();
        swift_bridgeObjectRelease();
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v32);
      }
      uint64_t v30 = (uint64_t *)&demangling cache variable for type metadata for Date?;
      uint64_t v29 = v1;
      goto LABEL_14;
    case 3u:
    case 4u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      uint64_t v20 = Optional<A>.hashValue.getter();
      swift_bridgeObjectRelease();
      Swift::UInt v21 = v20;
      goto LABEL_16;
    case 5u:
      double v25 = *(double *)v3;
      unint64_t v26 = *(void *)(v3 + 8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
      lazy protocol witness table accessor for type Data and conformance Data();
      Swift::UInt v27 = Optional<A>.hashValue.getter();
      Hasher._combine(_:)(v27);
      outlined consume of Data?(*(uint64_t *)&v25, v26);
      return Hasher._finalize()();
    case 6u:
      outlined init with take of UUID?(v3, v2, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      Swift::UInt v28 = Optional<A>.hashValue.getter();
      Hasher._combine(_:)(v28);
      uint64_t v29 = v2;
      uint64_t v30 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
LABEL_14:
      outlined destroy of UUID?(v29, v30);
      return Hasher._finalize()();
    case 7u:
      Swift::UInt v21 = 0;
      goto LABEL_16;
    default:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
LABEL_8:
      Swift::UInt v21 = Optional<A>.hashValue.getter();
LABEL_16:
      Hasher._combine(_:)(v21);
      return Hasher._finalize()();
  }
}

void StorableValue.init(from:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v6 = v5;
  uint64_t v112 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.NullValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v113 = v9;
  uint64_t v114 = v8;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_56(v10, v91[0]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.UuidValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v108 = v12;
  uint64_t v109 = v11;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_55(v13, v91[0]);
  uint64_t v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.DataValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v106 = v14;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_10();
  uint64_t v111 = v16;
  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.JsonValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v105 = v17;
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_26(v19, v91[0]);
  uint64_t v103 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.StringValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v102 = v20;
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_10();
  uint64_t v110 = v22;
  uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.DateValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v100 = v23;
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_54(v25, v91[0]);
  uint64_t v118 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.DoubleValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v99 = v26;
  MEMORY[0x1F4188790](v27);
  OUTLINED_FUNCTION_57(v28, v91[0]);
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.IntegerValueCodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v97 = v29;
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_27(v31, v91[0]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for KeyedDecodingContainer<StorableValue.CodingKeys>);
  OUTLINED_FUNCTION_0_4();
  uint64_t v116 = v33;
  uint64_t v117 = v32;
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_24();
  uint64_t v115 = type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_16();
  uint64_t v96 = v35;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v36);
  OUTLINED_FUNCTION_21();
  v95 = v37;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v38);
  OUTLINED_FUNCTION_21();
  uint64_t v94 = v39;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v40);
  OUTLINED_FUNCTION_48();
  uint64_t v42 = MEMORY[0x1F4188790](v41);
  uint64_t v44 = (char *)v91 - v43;
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_64();
  MEMORY[0x1F4188790](v45);
  OUTLINED_FUNCTION_65();
  MEMORY[0x1F4188790](v46);
  unint64_t v48 = (char *)v91 - v47;
  uint64_t v49 = v6[3];
  v119 = v6;
  __swift_project_boxed_opaque_existential_1(v6, v49);
  lazy protocol witness table accessor for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v0)
  {
    v91[2] = v1;
    v91[3] = v3;
    BOOL v92 = v4;
    uint64_t v93 = v44;
    uint64_t v50 = v117;
    uint64_t v51 = v118;
    uint64_t v121 = (uint64_t)v48;
    uint64_t v52 = KeyedDecodingContainer.allKeys.getter();
    uint64_t v53 = *(void *)(v52 + 16);
    if (v53
      && (v91[1] = 0,
          uint64_t v54 = *(unsigned __int8 *)(v52 + 32),
          specialized ArraySlice.subscript.getter(1, v53, v52, v52 + 32, 0, (2 * v53) | 1),
          uint64_t v56 = v55,
          unint64_t v58 = v57,
          swift_bridgeObjectRelease(),
          v56 == v58 >> 1))
    {
      switch(v54)
      {
        case 1:
          LOBYTE(v120[0]) = 1;
          lazy protocol witness table accessor for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys();
          OUTLINED_FUNCTION_15((uint64_t)&unk_1EDD6C9F0, (uint64_t)v120);
          uint64_t v59 = (void *)v51;
          KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          OUTLINED_FUNCTION_2_4();
          v70();
          swift_unknownObjectRelease();
          OUTLINED_FUNCTION_2_4();
          v71();
          OUTLINED_FUNCTION_50((uint64_t)&v117);
          goto LABEL_15;
        case 2:
          LOBYTE(v120[0]) = 2;
          lazy protocol witness table accessor for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys();
          OUTLINED_FUNCTION_15((uint64_t)&unk_1EDD6C820, (uint64_t)v120);
          type metadata accessor for Date();
          lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
          uint64_t v64 = (uint64_t)v93;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          OUTLINED_FUNCTION_2_4();
          v72();
          swift_unknownObjectRelease();
          OUTLINED_FUNCTION_2_4();
          v73();
          goto LABEL_17;
        case 3:
          LOBYTE(v120[0]) = 3;
          lazy protocol witness table accessor for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys();
          OUTLINED_FUNCTION_15((uint64_t)&unk_1EDD6CA80, (uint64_t)v120);
          uint64_t v74 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          uint64_t v76 = v75;
          OUTLINED_FUNCTION_66();
          OUTLINED_FUNCTION_2_4();
          v77();
          swift_unknownObjectRelease();
          OUTLINED_FUNCTION_2_4();
          v78();
          unsigned int v79 = v92;
          *BOOL v92 = v74;
          v79[1] = v76;
          goto LABEL_16;
        case 4:
          LOBYTE(v120[0]) = 4;
          lazy protocol witness table accessor for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys();
          OUTLINED_FUNCTION_15((uint64_t)&unk_1EDD6C8B0, (uint64_t)v120);
          uint64_t v80 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          uint64_t v82 = v81;
          OUTLINED_FUNCTION_2_4();
          v83();
          swift_unknownObjectRelease();
          OUTLINED_FUNCTION_2_4();
          v84();
          uint64_t v59 = v94;
          *uint64_t v94 = v80;
          v59[1] = v82;
          goto LABEL_15;
        case 5:
          LOBYTE(v120[0]) = 5;
          lazy protocol witness table accessor for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys();
          OUTLINED_FUNCTION_15((uint64_t)&unk_1EDD6C790, (uint64_t)v120);
          lazy protocol witness table accessor for type Data and conformance Data();
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          OUTLINED_FUNCTION_2_4();
          v86();
          swift_unknownObjectRelease();
          uint64_t v87 = OUTLINED_FUNCTION_74();
          v88(v87);
          unsigned int v79 = v95;
          *(_OWORD *)v95 = v120[0];
LABEL_16:
          swift_storeEnumTagMultiPayload();
          uint64_t v85 = (uint64_t)v79;
          goto LABEL_18;
        case 6:
          LOBYTE(v120[0]) = 6;
          lazy protocol witness table accessor for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys();
          OUTLINED_FUNCTION_15((uint64_t)&unk_1EDD6C960, (uint64_t)v120);
          type metadata accessor for UUID();
          lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
          uint64_t v64 = v96;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
          OUTLINED_FUNCTION_2_4();
          v89();
          swift_unknownObjectRelease();
          OUTLINED_FUNCTION_2_4();
          v90();
LABEL_17:
          swift_storeEnumTagMultiPayload();
          uint64_t v85 = v64;
          goto LABEL_18;
        case 7:
          LOBYTE(v120[0]) = 7;
          lazy protocol witness table accessor for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys();
          OUTLINED_FUNCTION_15((uint64_t)&unk_1EDD6C940, (uint64_t)v120);
          OUTLINED_FUNCTION_95();
          v65();
          swift_unknownObjectRelease();
          OUTLINED_FUNCTION_2_4();
          v66();
          uint64_t v67 = v121;
          swift_storeEnumTagMultiPayload();
          goto LABEL_19;
        default:
          LOBYTE(v120[0]) = 0;
          lazy protocol witness table accessor for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys();
          OUTLINED_FUNCTION_15((uint64_t)&unk_1EDD6CB10, (uint64_t)v120);
          uint64_t v59 = (void *)v98;
          KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
          OUTLINED_FUNCTION_2_4();
          v68();
          swift_unknownObjectRelease();
          OUTLINED_FUNCTION_2_4();
          v69();
          OUTLINED_FUNCTION_50((uint64_t)&v116);
LABEL_15:
          swift_storeEnumTagMultiPayload();
          uint64_t v85 = (uint64_t)v59;
LABEL_18:
          uint64_t v67 = v121;
          outlined init with take of StorableValue(v85, v121, (void (*)(void))type metadata accessor for StorableValue);
LABEL_19:
          outlined init with take of StorableValue(v67, v112, (void (*)(void))type metadata accessor for StorableValue);
          break;
      }
    }
    else
    {
      uint64_t v60 = v115;
      type metadata accessor for DecodingError();
      OUTLINED_FUNCTION_39();
      uint64_t v62 = v61;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (@thick Any.Type, DecodingError.Context));
      *uint64_t v62 = v60;
      KeyedDecodingContainer.codingPath.getter();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      OUTLINED_FUNCTION_14();
      (*(void (**)(uint64_t *))(v63 + 104))(v62);
      swift_willThrow();
      swift_unknownObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v2, v50);
    }
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v119);
  OUTLINED_FUNCTION_31();
}

BOOL static ChangeOperation.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void ChangeOperation.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int ChangeOperation.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance StorableValue.DataValueCodingKeys()
{
  return StorableValue.DataValueCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StorableValue.DataValueCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = StorableValue.DataValueCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance StorableValue.DataValueCodingKeys()
{
  return StorableValue.CodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance StorableValue.DataValueCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static StorableValue.DataValueCodingKeys.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.DataValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.DataValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.DateValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.DateValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.DoubleValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.DoubleValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.IntegerValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.IntegerValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.JsonValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.JsonValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance StorableValue.NullValueCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = StorableValue.NullValueCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.NullValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.NullValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.StringValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.StringValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StorableValue.DataValueCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance StorableValue.UuidValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance StorableValue.UuidValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance StorableValue()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v30 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v30 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)();
  outlined init with copy of StorableValue(v1, (uint64_t)v16, (void (*)(void))type metadata accessor for StorableValue);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      if (v16[8])
      {
        double v31 = *(double *)v16;
        LOBYTE(v32) = 1;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
        goto LABEL_8;
      }
      static StorableValue.hashForDouble(double:)(*(double *)v16);
      Swift::UInt v19 = Int.hashValue.getter();
      goto LABEL_16;
    case 2u:
      outlined init with take of UUID?((uint64_t)v16, (uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Date?);
      outlined init with copy of Date?((uint64_t)v14, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Date?);
      uint64_t v21 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v21) == 1)
      {
        outlined destroy of UUID?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for Date?);
        Hasher._combine(_:)(0);
      }
      else
      {
        default argument 0 of Date.ISO8601Format(_:)((uint64_t)v4);
        Date.ISO8601Format(_:)();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v4, v2);
        (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v11, v21);
        Swift::UInt v28 = String.hashValue.getter();
        swift_bridgeObjectRelease();
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v28);
      }
      uint64_t v27 = (uint64_t *)&demangling cache variable for type metadata for Date?;
      uint64_t v26 = (uint64_t)v14;
      goto LABEL_14;
    case 3u:
    case 4u:
      unint64_t v17 = *((void *)v16 + 1);
      double v31 = *(double *)v16;
      unint64_t v32 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      uint64_t v18 = Optional<A>.hashValue.getter();
      swift_bridgeObjectRelease();
      Swift::UInt v19 = v18;
      goto LABEL_16;
    case 5u:
      unint64_t v23 = *((void *)v16 + 1);
      double v31 = *(double *)v16;
      uint64_t v22 = *(void *)&v31;
      unint64_t v32 = v23;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
      lazy protocol witness table accessor for type Data and conformance Data();
      Swift::UInt v24 = Optional<A>.hashValue.getter();
      Hasher._combine(_:)(v24);
      outlined consume of Data?(v22, v23);
      return Hasher._finalize()();
    case 6u:
      outlined init with take of UUID?((uint64_t)v16, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      Swift::UInt v25 = Optional<A>.hashValue.getter();
      Hasher._combine(_:)(v25);
      uint64_t v26 = (uint64_t)v7;
      uint64_t v27 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
LABEL_14:
      outlined destroy of UUID?(v26, v27);
      return Hasher._finalize()();
    case 7u:
      Swift::UInt v19 = 0;
      goto LABEL_16;
    default:
      char v20 = v16[8];
      double v31 = *(double *)v16;
      LOBYTE(v32) = v20;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
LABEL_8:
      Swift::UInt v19 = Optional<A>.hashValue.getter();
LABEL_16:
      Hasher._combine(_:)(v19);
      return Hasher._finalize()();
  }
}

void protocol witness for Decodable.init(from:) in conformance StorableValue()
{
}

void protocol witness for Encodable.encode(to:) in conformance StorableValue()
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance ChangeOperation(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static ChangeOperation.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ChangeOperation()
{
  return ChangeOperation.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance ChangeOperation(uint64_t a1)
{
  ChangeOperation.hash(into:)(a1, *v1);
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

void specialized OrderedDictionary.removeFirst()()
{
  if (*(void *)(*(void *)(v0 + 8) + 16))
  {
    id v1 = objc_msgSend(*(id *)v0, sel_objectAtIndexedSubscript_, 0);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OrderedDictionary<[StorableValue], ChangeRecord?>.KeyWrapper);
    swift_dynamicCast();
    objc_msgSend(*(id *)v0, sel_removeObjectAtIndex_, 0);
    uint64_t v2 = specialized Dictionary._Variant.removeValue(forKey:)();
    uint64_t v4 = v3;
    swift_release();
    outlined consume of ChangeRecord??(v2, v4);
  }
}

{
  uint64_t v0;
  id v1;
  uint64_t v2;

  if (*(void *)(*(void *)(v0 + 8) + 16))
  {
    id v1 = objc_msgSend(*(id *)v0, sel_objectAtIndexedSubscript_, 0);
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OrderedDictionary<[StorableValue], [[String : StorableValue]]?>.KeyWrapper);
    swift_dynamicCast();
    objc_msgSend(*(id *)v0, sel_removeObjectAtIndex_, 0);
    uint64_t v2 = specialized Dictionary._Variant.removeValue(forKey:)();
    swift_release();
    outlined consume of [[String : StorableValue]]??(v2);
  }
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

void specialized _merge<A>(low:mid:high:buffer:by:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v75 = v0;
  uint64_t v63 = v1;
  unint64_t v3 = v2;
  uint64_t v68 = v4;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v74 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v73 = (char *)&v62 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = *(void *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  char v20 = (char *)(v6 - v8);
  if (v6 - v8 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_89;
  }
  int64_t v22 = (char *)v68 - (char *)v6;
  if ((char *)v68 - (char *)v6 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_90;
  }
  Swift::UInt v24 = v8;
  uint64_t v25 = (uint64_t)v20 / v19;
  uint64_t v26 = v22 / v19;
  uint64_t v71 = v19;
  uint64_t v72 = v10;
  if ((uint64_t)v20 / v19 < v22 / v19)
  {
    uint64_t v73 = v17;
    v63(v24, (uint64_t)v20 / v19, v3);
    uint64_t v27 = v25 * v19;
    Swift::UInt v28 = (void (*)(void))(v3 + v25 * v19);
    if (v27 < 1 || v6 >= (char *)v68)
    {
      uint64_t v6 = v24;
      goto LABEL_83;
    }
    uint64_t v69 = *(void (**)(void))(v11 + 16);
    uint64_t v70 = v11 + 16;
    uint64_t v67 = (void (**)(void))(v11 + 8);
    char v77 = v28;
    while (1)
    {
      uint64_t v74 = v6;
      uint64_t v49 = v69;
      uint64_t v48 = v70;
      OUTLINED_FUNCTION_40();
      v49();
      OUTLINED_FUNCTION_40();
      uint64_t v50 = ((uint64_t (*)(void))v49)();
      uint64_t v51 = v75;
      ((void (*)(uint64_t))v75)(v50);
      OUTLINED_FUNCTION_93();
      if (v10 == v51() && v48 == v52) {
        break;
      }
      char v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v55 = *v67;
      OUTLINED_FUNCTION_22_0();
      v55();
      OUTLINED_FUNCTION_22_0();
      v55();
      uint64_t v19 = v71;
      if ((v54 & 1) == 0) {
        goto LABEL_66;
      }
      uint64_t v6 = &v74[v71];
      if (v24 < v74 || v24 >= v6)
      {
        uint64_t v10 = v72;
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        uint64_t v10 = v72;
        if (v24 != v74) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
LABEL_75:
      Swift::UInt v28 = v77;
      v24 += v19;
      if (v3 >= (unint64_t)v77 || v6 >= (char *)v68)
      {
        uint64_t v6 = v24;
        goto LABEL_83;
      }
    }
    swift_bridgeObjectRelease_n();
    unint64_t v57 = *v67;
    OUTLINED_FUNCTION_22_0();
    v57();
    OUTLINED_FUNCTION_22_0();
    v57();
    uint64_t v19 = v71;
LABEL_66:
    BOOL v58 = (unint64_t)v24 < v3 || (unint64_t)v24 >= v3 + v19;
    uint64_t v6 = v74;
    if (v58)
    {
      uint64_t v10 = v72;
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      uint64_t v10 = v72;
      if (v24 != (char *)v3) {
        swift_arrayInitWithTakeBackToFront();
      }
    }
    v3 += v19;
    goto LABEL_75;
  }
  v63(v6, v22 / v19, v3);
  Swift::UInt v28 = (void (*)(void))(v3 + v26 * v19);
  uint64_t v67 = (void (**)(void))v24;
  if (v26 * v19 >= 1 && v24 < v6)
  {
    uint64_t v69 = (void (*)(void))-v19;
    double v31 = *(void (**)(void))(v11 + 16);
    uint64_t v70 = v11 + 16;
    uint64_t v65 = (void (**)(void))(v11 + 8);
    uint64_t v66 = v31;
    unint64_t v32 = v68;
    unint64_t v64 = v3;
    uint64_t v33 = v31;
    do
    {
      uint64_t v34 = v32;
      uint64_t v76 = v28;
      uint64_t v35 = v69;
      uint64_t v68 = (void (*)(void))((char *)v69 + (void)v28);
      OUTLINED_FUNCTION_40();
      v33();
      uint64_t v36 = v6;
      uint64_t v6 = (char *)v35 + (void)v6;
      OUTLINED_FUNCTION_40();
      uint64_t v37 = ((uint64_t (*)(void))v33)();
      uint64_t v38 = v75;
      uint64_t v39 = ((uint64_t (*)(uint64_t))v75)(v37);
      uint64_t v41 = v40;
      if (v39 == v38() && v41 == v42) {
        char v44 = 0;
      }
      else {
        char v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v32 = (void (*)(void))((char *)v69 + (void)v34);
      Swift::UInt v28 = *v65;
      OUTLINED_FUNCTION_46();
      v28();
      OUTLINED_FUNCTION_46();
      v28();
      if (v44)
      {
        if ((char *)v34 < v36 || (char *)v32 >= v36)
        {
          OUTLINED_FUNCTION_81();
          swift_arrayInitWithTakeFrontToBack();
          unint64_t v3 = v64;
          uint64_t v19 = v71;
        }
        else
        {
          uint64_t v19 = v71;
          if ((char *)v34 != v36)
          {
            OUTLINED_FUNCTION_81();
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v3 = v64;
        }
        Swift::UInt v28 = v76;
      }
      else if ((unint64_t)v34 < (unint64_t)v76 || (unint64_t)v32 >= (unint64_t)v76)
      {
        OUTLINED_FUNCTION_61();
        swift_arrayInitWithTakeFrontToBack();
        unint64_t v3 = v64;
        uint64_t v19 = v71;
        uint64_t v6 = v36;
      }
      else
      {
        uint64_t v6 = v36;
        if (v34 == v76)
        {
          Swift::UInt v28 = v68;
        }
        else
        {
          OUTLINED_FUNCTION_61();
          swift_arrayInitWithTakeBackToFront();
        }
        unint64_t v3 = v64;
        uint64_t v19 = v71;
      }
    }
    while ((unint64_t)v28 > v3 && v6 > (char *)v67);
  }
LABEL_83:
  uint64_t v60 = (uint64_t)v28 - v3;
  if (v19 != -1 || v60 != 0x8000000000000000)
  {
    v63((char *)v3, v60 / v19, (unint64_t)v6);
    OUTLINED_FUNCTION_31();
    return;
  }
LABEL_91:
  __break(1u);
}

{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  ValueMetadata *v8;
  char *Description;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  int64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  ValueMetadata *v27;
  void (*v30)(void);
  unint64_t v31;
  uint64_t v32;
  void (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  void (*v40)(void);
  unint64_t v41;
  uint64_t v45;
  void (*v47)(void);
  void (*v48)(void);
  uint64_t v49;
  ValueMetadata *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v55;
  void (*v56)(void);
  unint64_t v57;
  BOOL v58;
  unint64_t v59;
  void (*v60)(void);
  BOOL v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void (**v66)(void);
  void (*v67)(void);
  unint64_t v68;
  ValueMetadata *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  void (**v73)(void);
  void (*v74)(void);
  ValueMetadata *v75;
  unint64_t v76;

  OUTLINED_FUNCTION_37();
  id v1 = v0;
  unint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for SQLExpression();
  Description = (char *)v8[-1].Description;
  MEMORY[0x1F4188790](v8);
  uint64_t v74 = (void (*)(void))((char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_99_1();
  MEMORY[0x1F4188790](v11);
  uint64_t v73 = (void (**)(void))((char *)&v63 - v12);
  OUTLINED_FUNCTION_99_1();
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
    goto LABEL_91;
  }
  uint64_t v19 = v5 - v7;
  if (v5 - v7 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_89;
  }
  uint64_t v21 = v3 - v5;
  if (v3 - v5 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_90;
  }
  uint64_t v69 = (ValueMetadata *)((char *)&v63 - v15);
  uint64_t v70 = v16;
  unint64_t v23 = v19 / v18;
  Swift::UInt v24 = v21 / v18;
  uint64_t v72 = v18;
  if (v19 / v18 >= v21 / v18)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v5, v21 / v18);
    uint64_t v27 = (ValueMetadata *)(v1 + v24 * v18);
    if (v24 * v18 >= 1 && v7 < v5)
    {
      uint64_t v70 = -v18;
      uint64_t v30 = (void (*)(void))*((void *)Description + 2);
      uint64_t v71 = Description + 16;
      uint64_t v66 = (void (**)(void))(Description + 8);
      uint64_t v67 = v30;
      unint64_t v64 = v1;
      uint64_t v68 = v7;
      do
      {
        double v31 = v3;
        uint64_t v75 = v27;
        unint64_t v32 = v70;
        uint64_t v69 = (ValueMetadata *)((char *)v27 + v70);
        uint64_t v33 = v67;
        OUTLINED_FUNCTION_137_0();
        v33();
        OUTLINED_FUNCTION_137_0();
        v33();
        uint64_t v34 = SQLExpression.sql.getter();
        uint64_t v36 = v35;
        if (v34 == SQLExpression.sql.getter() && v36 == v37) {
          uint64_t v39 = 0;
        }
        else {
          uint64_t v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v3 = v31 + v70;
        uint64_t v40 = *v66;
        OUTLINED_FUNCTION_41();
        v40();
        OUTLINED_FUNCTION_41();
        v40();
        uint64_t v41 = v68;
        if (v39)
        {
          if (v31 < v5 || v3 >= v5)
          {
            OUTLINED_FUNCTION_150_0();
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v31 != v5)
          {
            OUTLINED_FUNCTION_150_0();
            swift_arrayInitWithTakeBackToFront();
          }
          v5 += v32;
          id v1 = v64;
          uint64_t v18 = v72;
          uint64_t v27 = v75;
        }
        else if (v31 < (unint64_t)v75 || v3 >= (unint64_t)v75)
        {
          OUTLINED_FUNCTION_119_1();
          swift_arrayInitWithTakeFrontToBack();
          uint64_t v27 = v8;
          id v1 = v64;
          uint64_t v18 = v72;
        }
        else
        {
          uint64_t v18 = v72;
          if ((ValueMetadata *)v31 == v75)
          {
            uint64_t v27 = v69;
          }
          else
          {
            OUTLINED_FUNCTION_119_1();
            swift_arrayInitWithTakeBackToFront();
            uint64_t v27 = v8;
          }
          id v1 = v64;
        }
      }
      while ((unint64_t)v27 > v1 && v5 > v41);
    }
  }
  else
  {
    OUTLINED_FUNCTION_141_0();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v25, v26);
    uint64_t v27 = (ValueMetadata *)(v1 + v23 * v18);
    if (v23 * v18 >= 1 && v5 < v3)
    {
      uint64_t v47 = (void (*)(void))*((void *)Description + 2);
      uint64_t v71 = Description + 16;
      uint64_t v73 = (void (**)(void))(Description + 8);
      uint64_t v74 = v47;
      uint64_t v76 = v1 + v23 * v18;
      uint64_t v65 = v3;
      while (1)
      {
        uint64_t v48 = v74;
        OUTLINED_FUNCTION_137_0();
        v48();
        OUTLINED_FUNCTION_137_0();
        v48();
        uint64_t v49 = SQLExpression.sql.getter();
        uint64_t v50 = v8;
        uint64_t v52 = v51;
        if (v49 == SQLExpression.sql.getter() && v52 == v53) {
          break;
        }
        uint64_t v55 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v56 = *v73;
        OUTLINED_FUNCTION_56_4();
        v56();
        OUTLINED_FUNCTION_56_4();
        v56();
        uint64_t v8 = v50;
        if ((v55 & 1) == 0) {
          goto LABEL_69;
        }
        uint64_t v18 = v72;
        unint64_t v57 = v5 + v72;
        BOOL v58 = v7 < v5 || v7 >= v57;
        uint64_t v59 = v65;
        if (!v58)
        {
          if (v7 != v5)
          {
            OUTLINED_FUNCTION_131_0();
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v27 = (ValueMetadata *)v76;
          goto LABEL_79;
        }
        OUTLINED_FUNCTION_131_0();
        swift_arrayInitWithTakeFrontToBack();
LABEL_78:
        uint64_t v27 = (ValueMetadata *)v76;
LABEL_79:
        v7 += v18;
        uint64_t v62 = v1 >= (unint64_t)v27 || v57 >= v59;
        uint64_t v5 = v57;
        if (v62) {
          goto LABEL_52;
        }
      }
      swift_bridgeObjectRelease_n();
      uint64_t v60 = *v73;
      OUTLINED_FUNCTION_56_4();
      v60();
      OUTLINED_FUNCTION_56_4();
      v60();
      uint64_t v8 = v50;
LABEL_69:
      uint64_t v18 = v72;
      uint64_t v61 = v7 < v1 || v7 >= v1 + v72;
      uint64_t v59 = v65;
      if (v61)
      {
        OUTLINED_FUNCTION_129_0();
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (v7 != v1)
      {
        OUTLINED_FUNCTION_129_0();
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v57 = v5;
      v1 += v18;
      goto LABEL_78;
    }
  }
LABEL_52:
  uint64_t v45 = (uint64_t)v27 - v1;
  if (v18 != -1 || v45 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v1, v45 / v18);
    OUTLINED_FUNCTION_31();
    return;
  }
LABEL_91:
  __break(1u);
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Binding>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SQLExpression>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (__dst != __src || &__src[16 * a2] <= __dst) {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[128 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, a2 << 7);
  }
  return __src;
}

uint64_t sub_18E7C5D38()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_18E7C5D70()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_18E7C5DA8()
{
  swift_release();
  swift_release();

  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t sub_18E7C5DF0()
{
  type metadata accessor for SelectCore();
  OUTLINED_FUNCTION_0_4();
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80) | 7;

  swift_release();
  OUTLINED_FUNCTION_51();
  v3();
  swift_release();
  swift_release();
  uint64_t v4 = OUTLINED_FUNCTION_71();

  return MEMORY[0x1F4186498](v4, v5, v2);
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t specialized ArraySlice.subscript.getter(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result < a5)
  {
    __break(1u);
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if ((uint64_t)(a6 >> 1) < result || (uint64_t)(a6 >> 1) < a2) {
    goto LABEL_10;
  }
  if (a2 < a5)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if ((a2 & 0x8000000000000000) == 0) {
    return swift_unknownObjectRetain();
  }
LABEL_12:
  __break(1u);
  return result;
}

void type metadata accessor for BMProtoDataType(uint64_t a1)
{
}

void type metadata accessor for BMConvertedType(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for BMProtoDataType(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t assignWithCopy for ChangeRecord(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for ChangeRecord(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t storeEnumTagSinglePayload for ChangeRecord(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for StorableValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        uint64_t v7 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7)) {
          goto LABEL_13;
        }
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        goto LABEL_14;
      case 3u:
      case 4u:
        uint64_t v10 = a2[1];
        *a1 = *a2;
        a1[1] = v10;
        swift_bridgeObjectRetain();
        goto LABEL_14;
      case 5u:
        unint64_t v11 = a2[1];
        if (v11 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          uint64_t v13 = *a2;
          outlined copy of Data._Representation(v13, v11);
          *a1 = v13;
          a1[1] = v11;
        }
        goto LABEL_14;
      case 6u:
        uint64_t v7 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
        {
          uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64));
        }
        else
        {
LABEL_13:
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
          __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
        }
LABEL_14:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t *assignWithCopy for StorableValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of StorableValue((uint64_t)a1, (void (*)(void))type metadata accessor for StorableValue);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        uint64_t v6 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6)) {
          goto LABEL_12;
        }
        uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        goto LABEL_13;
      case 3u:
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 5u:
        unint64_t v8 = a2[1];
        if (v8 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          uint64_t v10 = *a2;
          outlined copy of Data._Representation(v10, v8);
          *a1 = v10;
          a1[1] = v8;
        }
        goto LABEL_13;
      case 6u:
        uint64_t v6 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
        {
          uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
LABEL_12:
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
          __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
        }
LABEL_13:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for StorableValue(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 6)
  {
    uint64_t v9 = type metadata accessor for UUID();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v9))
    {
      uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v9);
    }
    goto LABEL_11;
  }
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
    {
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
    }
LABEL_11:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

uint64_t destructiveInjectEnumTag for StorableValue()
{
  return swift_storeEnumTagMultiPayload();
}

void type metadata completion function for StorableValue()
{
  type metadata accessor for Date?(319, &lazy cache variable for type metadata for Date?, MEMORY[0x1E4F27928]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date?(319, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
    if (v1 <= 0x3F) {
      swift_initEnumMetadataMultiPayload();
    }
  }
}

void type metadata accessor for Date?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t base witness table accessor for Equatable in StorableValue()
{
  return lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type StorableValue and conformance StorableValue, (void (*)(uint64_t))type metadata accessor for StorableValue);
}

unint64_t lazy protocol witness table accessor for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.CodingKeys and conformance StorableValue.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.NullValueCodingKeys and conformance StorableValue.NullValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.UuidValueCodingKeys and conformance StorableValue.UuidValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DataValueCodingKeys and conformance StorableValue.DataValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.JsonValueCodingKeys and conformance StorableValue.JsonValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.StringValueCodingKeys and conformance StorableValue.StringValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DateValueCodingKeys and conformance StorableValue.DateValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.DoubleValueCodingKeys and conformance StorableValue.DoubleValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys;
  if (!lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue.IntegerValueCodingKeys and conformance StorableValue.IntegerValueCodingKeys);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for StorableValue.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for StorableValue.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18E7C6E94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

void *type metadata accessor for StorableValue.CodingKeys()
{
  return &unk_1EDD6CBA0;
}

uint64_t getEnumTag for StorableValue.IntegerValueCodingKeys()
{
  return 0;
}

void *type metadata accessor for StorableValue.IntegerValueCodingKeys()
{
  return &unk_1EDD6CB10;
}

void *type metadata accessor for StorableValue.DoubleValueCodingKeys()
{
  return &unk_1EDD6C9F0;
}

void *type metadata accessor for StorableValue.DateValueCodingKeys()
{
  return &unk_1EDD6C820;
}

void *type metadata accessor for StorableValue.StringValueCodingKeys()
{
  return &unk_1EDD6CA80;
}

void *type metadata accessor for StorableValue.JsonValueCodingKeys()
{
  return &unk_1EDD6C8B0;
}

void *type metadata accessor for StorableValue.DataValueCodingKeys()
{
  return &unk_1EDD6C790;
}

uint64_t getEnumTagSinglePayload for StorableValue.IntegerValueCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for StorableValue.IntegerValueCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x18E7C702CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for StorableValue.UuidValueCodingKeys()
{
  return &unk_1EDD6C960;
}

void *type metadata accessor for StorableValue.NullValueCodingKeys()
{
  return &unk_1EDD6C940;
}

uint64_t getEnumTagSinglePayload for ChangeOperation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ChangeOperation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18E7C71C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for ChangeOperation(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ChangeOperation()
{
  return &type metadata for ChangeOperation;
}

unint64_t lazy protocol witness table accessor for type ChangeOperation and conformance ChangeOperation()
{
  unint64_t result = lazy protocol witness table cache variable for type ChangeOperation and conformance ChangeOperation;
  if (!lazy protocol witness table cache variable for type ChangeOperation and conformance ChangeOperation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ChangeOperation and conformance ChangeOperation);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_49(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_66()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_91()
{
  return outlined consume of Data?(v1, v0);
}

uint64_t protocol witness for Error._domain.getter in conformance SQLError()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance SQLError()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance SQLError()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance SQLError()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t SQLError.description.getter()
{
  uint64_t v130 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StorableValue));
  OUTLINED_FUNCTION_4_3();
  uint64_t v2 = MEMORY[0x1F4188790](v1);
  v129 = (Swift::String *)((char *)&v124 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  v128 = (uint64_t *)((char *)&v124 - v5);
  MEMORY[0x1F4188790](v4);
  v127 = (char *)&v124 - v6;
  outlined init with copy of SQLError(v0, (uint64_t)&v137);
  switch(v142)
  {
    case 1:
      uint64_t v9 = v137;
      uint64_t v10 = v138;
      uint64_t v11 = (uint64_t)v139;
      uint64_t v12 = v140;
      v136[0] = 0;
      v136[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_5(0xD000000000000010);
      v13._countAndFlagsBits = v9;
      v13._object = v10;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v14._countAndFlagsBits = 0x70797420666F2022;
      v14._object = (void *)0xEB00000000222065;
      String.append(_:)(v14);
      v15._countAndFlagsBits = v11;
      v15._object = v12;
      String.append(_:)(v15);
      goto LABEL_15;
    case 2:
      uint64_t v7 = v137;
      uint64_t v8 = v138;
      static String._createEmpty(withInitialCapacity:)(25);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_0_12();
      OUTLINED_FUNCTION_2_5(v16 - 1);
      goto LABEL_5;
    case 3:
      outlined init with take of (key: String, value: StorableValue)((uint64_t)&v137, (uint64_t)v136, &demangling cache variable for type metadata for Any?);
      outlined init with take of (key: String, value: StorableValue)((uint64_t)&v141, (uint64_t)&v131, &demangling cache variable for type metadata for Any?);
      if (v133)
      {
        uint64_t v134 = static String._createEmpty(withInitialCapacity:)(53);
        unint64_t v135 = v18;
        v19._object = (void *)0x800000018EBE8F70;
        v19._countAndFlagsBits = 0xD000000000000017;
        String.append(_:)(v19);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        v20._countAndFlagsBits = Optional.debugDescription.getter();
        String.append(_:)(v20);
        swift_bridgeObjectRelease();
        v21._countAndFlagsBits = 0xD000000000000019;
        v21._object = (void *)0x800000018EBE8F90;
        String.append(_:)(v21);
      }
      else
      {
        static String._createEmpty(withInitialCapacity:)(26);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_0_12();
        uint64_t v134 = v111;
        unint64_t v135 = 0x800000018EBE8F70;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
      }
      v112._countAndFlagsBits = Optional.debugDescription.getter();
      String.append(_:)(v112);
      swift_bridgeObjectRelease();
      v113._countAndFlagsBits = 34;
      v113._object = (void *)0xE100000000000000;
      String.append(_:)(v113);
      uint64_t v64 = v134;
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v136, &demangling cache variable for type metadata for Any?);
      outlined destroy of (key: String, value: StorableValue)((uint64_t)&v131, &demangling cache variable for type metadata for Any?);
      return v64;
    case 4:
      uint64_t v22 = v137;
      unint64_t v23 = v138;
      Swift::UInt v24 = v139;
      uint64_t v25 = (uint64_t)v140;
      uint64_t v26 = v141;
      uint64_t v27 = static String._createEmpty(withInitialCapacity:)(85);
      OUTLINED_FUNCTION_6_2(v27, v28);
      v29._countAndFlagsBits = 0xD000000000000032;
      v29._object = (void *)0x800000018EBE8F10;
      String.append(_:)(v29);
      v30._countAndFlagsBits = v22;
      v30._object = v23;
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      v31._countAndFlagsBits = 0xD000000000000013;
      v31._object = (void *)0x800000018EBE8F50;
      String.append(_:)(v31);
      uint64_t v32 = v24[2];
      if (v32)
      {
        uint64_t v130 = v25;
        uint64_t v33 = (uint64_t)(v24 + 4);
        swift_bridgeObjectRetain();
        uint64_t v34 = 0;
        uint64_t v35 = (void *)0xE000000000000000;
        do
        {
          outlined init with copy of Any?(v33, (uint64_t)v136);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
          uint64_t v36 = Optional.debugDescription.getter();
          uint64_t v38 = v37;
          uint64_t v134 = v34;
          unint64_t v135 = (unint64_t)v35;
          swift_bridgeObjectRetain();
          v39._countAndFlagsBits = v36;
          v39._object = v38;
          String.append(_:)(v39);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v40._countAndFlagsBits = 8236;
          v40._object = (void *)0xE200000000000000;
          String.append(_:)(v40);
          swift_bridgeObjectRelease();
          uint64_t v34 = v134;
          uint64_t v35 = (void *)v135;
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v136, &demangling cache variable for type metadata for Any?);
          v33 += 32;
          --v32;
        }
        while (v32);
        swift_bridgeObjectRelease_n();
        uint64_t v25 = v130;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v34 = 0;
        uint64_t v35 = (void *)0xE000000000000000;
      }
      v114._countAndFlagsBits = v34;
      v114._object = v35;
      String.append(_:)(v114);
      swift_bridgeObjectRelease();
      v115._countAndFlagsBits = 0x726F727265202C22;
      v115._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v115);
      v116._countAndFlagsBits = v25;
      v116._object = v26;
      String.append(_:)(v116);
      swift_bridgeObjectRelease();
      return v131;
    case 5:
      uint64_t v41 = v137;
      unint64_t v42 = (unint64_t)v138;
      static String._createEmpty(withInitialCapacity:)(50);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_0_12();
      OUTLINED_FUNCTION_5_2(v43 + 24);
      *(void *)(v44 - 256) = v41;
      unint64_t v132 = v42;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      v45._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v45);
      goto LABEL_15;
    case 6:
      Swift::UInt v46 = v137;
      static String._createEmpty(withInitialCapacity:)(39);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_0_12();
      uint64_t v131 = v47;
      unint64_t v132 = 0x800000018EBE8EC0;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v46);
      v136[0] = Hasher._finalize()();
      v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      v49._countAndFlagsBits = 0x70786520746F6E20;
      v49._object = (void *)0xEE002E6465746365;
      String.append(_:)(v49);
      return v131;
    case 7:
      uint64_t v51 = v137;
      uint64_t v50 = (uint64_t)v138;
      static String._createEmpty(withInitialCapacity:)(49);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_0_12();
      OUTLINED_FUNCTION_5_2(v52 | 8);
      *(void *)(v53 - 256) = v51;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v54 = OUTLINED_FUNCTION_3_5();
      uint64_t v56 = v55;
      swift_bridgeObjectRelease();
      v57._countAndFlagsBits = v54;
      v57._object = v56;
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      v58._countAndFlagsBits = 0x6F6C796170202C22;
      v58._object = (void *)0xED000022203A6461;
      String.append(_:)(v58);
      uint64_t v131 = v50;
      uint64_t v59 = OUTLINED_FUNCTION_3_5();
      uint64_t v61 = v60;
      swift_bridgeObjectRelease();
      v62._countAndFlagsBits = v59;
      v62._object = v61;
      String.append(_:)(v62);
      goto LABEL_15;
    case 8:
      uint64_t v66 = v137;
      uint64_t v67 = (uint64_t)v138;
      uint64_t v68 = v139;
      static String._createEmpty(withInitialCapacity:)(33);
      swift_bridgeObjectRelease();
      strcpy((char *)v136, "Metadata: \"[");
      BYTE5(v136[1]) = 0;
      HIWORD(v136[1]) = -5120;
      uint64_t v69 = *(void *)(v66 + 16);
      if (v69)
      {
        uint64_t v124 = v67;
        v125 = v68;
        uint64_t v134 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v70 = specialized Dictionary.startIndex.getter(v66);
        uint64_t v72 = v71;
        char v74 = v73 & 1;
        uint64_t v75 = v66;
        uint64_t v126 = v66;
        do
        {
          uint64_t v76 = v130;
          char v77 = v127;
          uint64_t v78 = (uint64_t)&v127[*(int *)(v130 + 48)];
          uint64_t v79 = v74 & 1;
          specialized Dictionary.subscript.getter(v78, v70, v72, v74 & 1, v75);
          *char v77 = v80;
          v77[1] = v81;
          uint64_t v82 = v128;
          void *v128 = v80;
          v82[1] = v81;
          outlined init with copy of StorableValue(v78, (uint64_t)v82 + *(int *)(v76 + 48));
          uint64_t v83 = (uint64_t)v82;
          char v84 = v129;
          outlined init with take of (key: String, value: StorableValue)(v83, (uint64_t)v129, &demangling cache variable for type metadata for (key: String, value: StorableValue));
          swift_bridgeObjectRetain();
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v77, &demangling cache variable for type metadata for (key: String, value: StorableValue));
          uint64_t v85 = static String._createEmpty(withInitialCapacity:)(6);
          OUTLINED_FUNCTION_6_2(v85, v86);
          String.append(_:)(*v84);
          v87._countAndFlagsBits = 32;
          v87._object = (void *)0xE100000000000000;
          String.append(_:)(v87);
          type metadata accessor for StorableValue(0);
          _print_unlocked<A, B>(_:_:)();
          v88._countAndFlagsBits = 32;
          v88._object = (void *)0xE100000000000000;
          String.append(_:)(v88);
          uint64_t v89 = v131;
          unint64_t v90 = v132;
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v84, &demangling cache variable for type metadata for (key: String, value: StorableValue));
          uint64_t v91 = v134;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v91 = v134;
          }
          unint64_t v92 = *(void *)(v91 + 16);
          if (v92 >= *(void *)(v91 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v91 = v134;
          }
          *(void *)(v91 + 16) = v92 + 1;
          uint64_t v93 = v91 + 16 * v92;
          *(void *)(v93 + 32) = v89;
          *(void *)(v93 + 40) = v90;
          uint64_t v75 = v126;
          uint64_t v94 = specialized _NativeDictionary.index(after:)(v70, v72, v79, v126);
          uint64_t v96 = v95;
          char v74 = v97 & 1;
          outlined consume of [String : StorableValue].Index._Variant(v70, v72, v79);
          uint64_t v70 = v94;
          uint64_t v72 = v96;
          --v69;
        }
        while (v69);
        outlined consume of [String : StorableValue].Index._Variant(v94, v96, v74);
        swift_bridgeObjectRelease();
        uint64_t v68 = v125;
        uint64_t v67 = v124;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v91 = MEMORY[0x1E4FBC860];
      }
      uint64_t v131 = v91;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v117 = BidirectionalCollection<>.joined(separator:)();
      v119 = v118;
      swift_bridgeObjectRelease();
      v120._countAndFlagsBits = v117;
      v120._object = v119;
      String.append(_:)(v120);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_0_12();
      v122._countAndFlagsBits = v121 - 6;
      v122._object = (void *)0x800000018EBE8E80;
      String.append(_:)(v122);
      v123._countAndFlagsBits = v67;
      v123._object = v68;
      String.append(_:)(v123);
      swift_bridgeObjectRelease();
      return v136[0];
    case 9:
      v136[0] = static String._createEmpty(withInitialCapacity:)(54);
      v136[1] = v98;
      OUTLINED_FUNCTION_0_12();
      v100._countAndFlagsBits = v99 + 28;
      v100._object = (void *)0x800000018EBE8E40;
      String.append(_:)(v100);
      QueryPlannerMetadata.description.getter();
      String.append(_:)(v101);
      swift_bridgeObjectRelease();
      v102._countAndFlagsBits = 34;
      v102._object = (void *)0xE100000000000000;
      String.append(_:)(v102);
      swift_release();
      return v136[0];
    case 10:
      uint64_t v103 = v137;
      uint64_t v104 = v138;
      uint64_t v105 = v139;
      v136[0] = static String._createEmpty(withInitialCapacity:)(35);
      v136[1] = v106;
      OUTLINED_FUNCTION_0_12();
      v108._countAndFlagsBits = v107 - 1;
      v108._object = (void *)0x800000018EBE8E20;
      String.append(_:)(v108);
      v109._countAndFlagsBits = v103;
      v109._object = v104;
      String.append(_:)(v109);
      swift_bridgeObjectRelease();
      v110._countAndFlagsBits = 0x3A726F727245202ELL;
      v110._object = (void *)0xE900000000000020;
      String.append(_:)(v110);
      uint64_t v131 = (uint64_t)v105;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      _print_unlocked<A, B>(_:_:)();

      return v136[0];
    default:
      uint64_t v7 = v137;
      uint64_t v8 = v138;
      v136[0] = 0;
      v136[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(19);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_5(0xD000000000000010);
LABEL_5:
      v17._countAndFlagsBits = v7;
      v17._object = v8;
      String.append(_:)(v17);
LABEL_15:
      swift_bridgeObjectRelease();
      v63._countAndFlagsBits = 34;
      v63._object = (void *)0xE100000000000000;
      String.append(_:)(v63);
      return v136[0];
  }
}

uint64_t outlined init with copy of SQLError(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized _NativeDictionary.index(after:)(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || -(-1 << *(unsigned char *)(a4 + 32)) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 64 + (((unint64_t)result >> 3) & 0x1FFFFFFFFFFFFFF8)) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return _HashTable.occupiedBucket(after:)();
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void destroy for SQLError(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 64);
  if (v2 >= 0xB) {
    unsigned int v2 = *(_DWORD *)a1 + 11;
  }
  switch(v2)
  {
    case 1u:
    case 7u:
    case 8u:
      swift_bridgeObjectRelease();
      goto LABEL_13;
    case 3u:
      if (*(void *)(a1 + 24)) {
        __swift_destroy_boxed_opaque_existential_1Tm(a1);
      }
      if (*(void *)(a1 + 56))
      {
        __swift_destroy_boxed_opaque_existential_1Tm(a1 + 32);
      }
      return;
    case 4u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_13;
    case 6u:
      return;
    case 9u:
      swift_release();
      return;
    case 0xAu:
      swift_bridgeObjectRelease();
      uint64_t v3 = *(void **)(a1 + 16);

      return;
    default:
LABEL_13:
      swift_bridgeObjectRelease();
      return;
  }
}

uint64_t initializeWithCopy for SQLError(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 64);
  if (v4 >= 0xB) {
    unsigned int v4 = *(_DWORD *)a2 + 11;
  }
  switch(v4)
  {
    case 1u:
      uint64_t v6 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v6;
      uint64_t v7 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v7;
      char v8 = 1;
      goto LABEL_15;
    case 2u:
      uint64_t v9 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v9;
      char v10 = 2;
      goto LABEL_11;
    case 3u:
      uint64_t v11 = *(void *)(a2 + 24);
      if (v11)
      {
        *(void *)(a1 + 24) = v11;
        (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1, a2);
      }
      else
      {
        long long v21 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v21;
      }
      uint64_t v22 = (_OWORD *)(a1 + 32);
      unint64_t v23 = (_OWORD *)(a2 + 32);
      uint64_t v24 = *(void *)(a2 + 56);
      if (v24)
      {
        *(void *)(a1 + 56) = v24;
        (**(void (***)(_OWORD *, _OWORD *))(v24 - 8))(v22, v23);
      }
      else
      {
        long long v25 = *(_OWORD *)(a2 + 48);
        *uint64_t v22 = *v23;
        *(_OWORD *)(a1 + 48) = v25;
      }
      char v15 = 3;
      goto LABEL_25;
    case 4u:
      uint64_t v12 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v12;
      uint64_t v13 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v13;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(unsigned char *)(a1 + 64) = 4;
      swift_bridgeObjectRetain();
      goto LABEL_16;
    case 5u:
      uint64_t v14 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v14;
      char v10 = 5;
LABEL_11:
      *(unsigned char *)(a1 + 64) = v10;
      goto LABEL_17;
    case 6u:
      *(unsigned char *)a1 = *(unsigned char *)a2;
      char v15 = 6;
      goto LABEL_25;
    case 7u:
      uint64_t v16 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v16;
      char v8 = 7;
      goto LABEL_15;
    case 8u:
      uint64_t v17 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v17;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      char v8 = 8;
LABEL_15:
      *(unsigned char *)(a1 + 64) = v8;
LABEL_16:
      swift_bridgeObjectRetain();
      goto LABEL_17;
    case 9u:
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 64) = 9;
      swift_retain();
      return a1;
    case 0xAu:
      uint64_t v18 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v18;
      Swift::String v19 = *(void **)(a2 + 16);
      swift_bridgeObjectRetain();
      id v20 = v19;
      *(void *)(a1 + 16) = v19;
      char v15 = 10;
LABEL_25:
      *(unsigned char *)(a1 + 64) = v15;
      return a1;
    default:
      uint64_t v5 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v5;
      *(unsigned char *)(a1 + 64) = 0;
LABEL_17:
      swift_bridgeObjectRetain();
      return a1;
  }
}

uint64_t assignWithCopy for SQLError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 >= 0xB) {
      unsigned int v4 = *(_DWORD *)a1 + 11;
    }
    switch(v4)
    {
      case 1u:
      case 7u:
      case 8u:
        swift_bridgeObjectRelease();
        goto LABEL_11;
      case 3u:
        if (*(void *)(a1 + 24)) {
          __swift_destroy_boxed_opaque_existential_1Tm(a1);
        }
        if (*(void *)(a1 + 56)) {
          __swift_destroy_boxed_opaque_existential_1Tm(a1 + 32);
        }
        goto LABEL_12;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_11;
      case 6u:
        goto LABEL_12;
      case 9u:
        swift_release();
        goto LABEL_12;
      case 0xAu:
        swift_bridgeObjectRelease();

        goto LABEL_12;
      default:
LABEL_11:
        swift_bridgeObjectRelease();
LABEL_12:
        unsigned int v5 = *(unsigned __int8 *)(a2 + 64);
        if (v5 >= 0xB) {
          unsigned int v5 = *(_DWORD *)a2 + 11;
        }
        switch(v5)
        {
          case 1u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            *(void *)(a1 + 24) = *(void *)(a2 + 24);
            char v6 = 1;
            goto LABEL_28;
          case 2u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            char v7 = 2;
            goto LABEL_24;
          case 3u:
            uint64_t v8 = *(void *)(a2 + 24);
            if (v8)
            {
              *(void *)(a1 + 24) = v8;
              (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
            }
            else
            {
              long long v12 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)a1 = *(_OWORD *)a2;
              *(_OWORD *)(a1 + 16) = v12;
            }
            uint64_t v13 = (_OWORD *)(a1 + 32);
            uint64_t v14 = (_OWORD *)(a2 + 32);
            uint64_t v15 = *(void *)(a2 + 56);
            if (v15)
            {
              *(void *)(a1 + 56) = v15;
              (**(void (***)(_OWORD *, _OWORD *))(v15 - 8))(v13, v14);
            }
            else
            {
              long long v16 = *(_OWORD *)(a2 + 48);
              *uint64_t v13 = *v14;
              *(_OWORD *)(a1 + 48) = v16;
            }
            char v9 = 3;
            goto LABEL_38;
          case 4u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            *(void *)(a1 + 24) = *(void *)(a2 + 24);
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            *(unsigned char *)(a1 + 64) = 4;
            swift_bridgeObjectRetain();
            goto LABEL_29;
          case 5u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            char v7 = 5;
LABEL_24:
            *(unsigned char *)(a1 + 64) = v7;
            goto LABEL_30;
          case 6u:
            *(unsigned char *)a1 = *(unsigned char *)a2;
            char v9 = 6;
            goto LABEL_38;
          case 7u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            char v6 = 7;
            goto LABEL_28;
          case 8u:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            char v6 = 8;
LABEL_28:
            *(unsigned char *)(a1 + 64) = v6;
LABEL_29:
            swift_bridgeObjectRetain();
            goto LABEL_30;
          case 9u:
            *(void *)a1 = *(void *)a2;
            *(unsigned char *)(a1 + 64) = 9;
            swift_retain();
            return a1;
          case 0xAu:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            char v10 = *(void **)(a2 + 16);
            swift_bridgeObjectRetain();
            id v11 = v10;
            *(void *)(a1 + 16) = v10;
            char v9 = 10;
LABEL_38:
            *(unsigned char *)(a1 + 64) = v9;
            return a1;
          default:
            *(void *)a1 = *(void *)a2;
            *(void *)(a1 + 8) = *(void *)(a2 + 8);
            *(unsigned char *)(a1 + 64) = 0;
LABEL_30:
            swift_bridgeObjectRetain();
            break;
        }
        break;
    }
  }
  return a1;
}

void *__swift_memcpy65_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x41uLL);
}

uint64_t assignWithTake for SQLError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 64);
    if (v4 >= 0xB) {
      unsigned int v4 = *(_DWORD *)a1 + 11;
    }
    switch(v4)
    {
      case 1u:
      case 7u:
      case 8u:
        swift_bridgeObjectRelease();
        goto LABEL_11;
      case 3u:
        if (*(void *)(a1 + 24)) {
          __swift_destroy_boxed_opaque_existential_1Tm(a1);
        }
        if (*(void *)(a1 + 56)) {
          __swift_destroy_boxed_opaque_existential_1Tm(a1 + 32);
        }
        goto LABEL_12;
      case 4u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_11;
      case 6u:
        goto LABEL_12;
      case 9u:
        swift_release();
        goto LABEL_12;
      case 0xAu:
        swift_bridgeObjectRelease();

        goto LABEL_12;
      default:
LABEL_11:
        swift_bridgeObjectRelease();
LABEL_12:
        unsigned int v5 = *(unsigned __int8 *)(a2 + 64);
        if (v5 >= 0xB) {
          unsigned int v5 = *(_DWORD *)a2 + 11;
        }
        switch(v5)
        {
          case 1u:
            long long v7 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v7;
            char v6 = 1;
            break;
          case 2u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            char v6 = 2;
            break;
          case 3u:
            long long v8 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v8;
            long long v9 = *(_OWORD *)(a2 + 48);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
            *(_OWORD *)(a1 + 48) = v9;
            char v6 = 3;
            break;
          case 4u:
            long long v10 = *(_OWORD *)(a2 + 16);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(_OWORD *)(a1 + 16) = v10;
            *(void *)(a1 + 32) = *(void *)(a2 + 32);
            char v6 = 4;
            break;
          case 5u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            char v6 = 5;
            break;
          case 6u:
            *(unsigned char *)a1 = *(unsigned char *)a2;
            char v6 = 6;
            break;
          case 7u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            char v6 = 7;
            break;
          case 8u:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            char v6 = 8;
            break;
          case 9u:
            *(void *)a1 = *(void *)a2;
            char v6 = 9;
            break;
          case 0xAu:
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *(void *)(a1 + 16) = *(void *)(a2 + 16);
            char v6 = 10;
            break;
          default:
            char v6 = 0;
            *(_OWORD *)a1 = *(_OWORD *)a2;
            break;
        }
        *(unsigned char *)(a1 + 64) = v6;
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF6 && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 246);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 >= 0xB) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for SQLError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF5)
  {
    *(unsigned char *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 246;
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF6) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SQLError(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 64);
  if (result >= 0xB) {
    return (*(_DWORD *)a1 + 11);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for SQLError(uint64_t result, unsigned int a2)
{
  if (a2 > 0xA)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 11;
    LOBYTE(a2) = 11;
  }
  *(unsigned char *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SQLError()
{
  return &type metadata for SQLError;
}

uint64_t Dataflow.legacyName.getter()
{
  return OUTLINED_FUNCTION_0_13();
}

uint64_t Dataflow.legacyConfigHash.getter()
{
  return OUTLINED_FUNCTION_0_13();
}

uint64_t Dataflow.legacyFeatureFlag.getter()
{
  return OUTLINED_FUNCTION_0_13();
}

uint64_t Dataflow.legacyType.getter()
{
  return OUTLINED_FUNCTION_0_13();
}

uint64_t Dataflow.legacyConfig.getter()
{
  return OUTLINED_FUNCTION_0_13();
}

uint64_t Dataflow.legacyDependencies.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Dataflow.legacyDependents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Dataflow.legacyCreateTable.getter()
{
  return OUTLINED_FUNCTION_0_13();
}

uint64_t Dataflow.legacySQL.getter()
{
  return OUTLINED_FUNCTION_0_13();
}

void __swiftcall Dataflow.init(legacyName:legacyConfigHash:legacyFeatureFlag:legacyType:legacyConfig:legacyCreateTable:legacySQL:legacyDependencies:legacyDependents:)(BiomeStreams::Dataflow *__return_ptr retstr, Swift::String legacyName, Swift::String legacyConfigHash, Swift::String_optional legacyFeatureFlag, Swift::String legacyType, Swift::String legacyConfig, Swift::String legacyCreateTable, Swift::String legacySQL, Swift::OpaquePointer legacyDependencies, Swift::OpaquePointer legacyDependents)
{
  retstr->legacyName = legacyName;
  retstr->legacyConfigHash = legacyConfigHash;
  retstr->legacyFeatureFlag = legacyFeatureFlag;
  retstr->legacyType = legacyType;
  retstr->legacyConfig = legacyConfig;
  *(_OWORD *)&retstr->legacyDependencies._rawValue = *(_OWORD *)&legacyDependencies._rawValue;
  retstr->legacyCreateTable = legacyCreateTable;
  retstr->legacySQL = legacySQL;
}

uint64_t destroy for Dataflow()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Dataflow(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  uint64_t v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  uint64_t v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  uint64_t v9 = a2[13];
  a1[12] = a2[12];
  a1[13] = v9;
  uint64_t v10 = a2[15];
  a1[14] = a2[14];
  a1[15] = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Dataflow(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[12] = a2[12];
  a1[13] = a2[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Dataflow(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Dataflow(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 128))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Dataflow(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Dataflow()
{
  return &type metadata for Dataflow;
}

void __swiftcall BMSQLDatabase.execute(query:)(BMSQLResultSet *__return_ptr retstr, Swift::String query)
{
  uint64_t v3 = MEMORY[0x192FAFF50](retstr, query._countAndFlagsBits, query._object);
  id v4 = objc_msgSend(v2, sel__executeQuery_, v3);
}

BOOL static DataProtectionClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void DataProtectionClass.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int DataProtectionClass.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL static Domain.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void Domain.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int Domain.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type DataProtectionClass and conformance DataProtectionClass()
{
  unint64_t result = lazy protocol witness table cache variable for type DataProtectionClass and conformance DataProtectionClass;
  if (!lazy protocol witness table cache variable for type DataProtectionClass and conformance DataProtectionClass)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataProtectionClass and conformance DataProtectionClass);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Domain and conformance Domain()
{
  unint64_t result = lazy protocol witness table cache variable for type Domain and conformance Domain;
  if (!lazy protocol witness table cache variable for type Domain and conformance Domain)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Domain and conformance Domain);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DataProtectionClass(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFA)
  {
    if (a2 + 6 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 6) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 7;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v5 = v6 - 7;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for DataProtectionClass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18E7C9A48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DataProtectionClass()
{
  return &type metadata for DataProtectionClass;
}

unsigned char *storeEnumTagSinglePayload for Domain(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18E7C9B4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Domain()
{
  return &type metadata for Domain;
}

uint64_t dispatch thunk of static DataResource.uuid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static DataResource.domain.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static DataResource.protectionClass.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static ConfigurationBasedResource.configuration.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t StoreStreamProtocol.identifier.getter()
{
  OUTLINED_FUNCTION_0_14();
  Swift::UInt v1 = (void *)v0();
  id v2 = objc_msgSend(v1, sel_identifier);

  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v3;
}

uint64_t StoreStreamProtocol.source()()
{
  OUTLINED_FUNCTION_0_14();
  Swift::UInt v1 = (void *)v0();
  id v2 = objc_msgSend(v1, sel_source);

  uint64_t v3 = self;

  return MEMORY[0x1F41864E8](v2, v3, 0, 0, 0);
}

uint64_t StoreStreamProtocol.publisher(with:)(double a1)
{
  OUTLINED_FUNCTION_0_14();
  uint64_t v3 = (void *)v2();
  id v4 = objc_msgSend(v3, sel_publisherFromStartTime_, a1);

  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BMStoreEvent);

  return MEMORY[0x1F410C908](v4, v5);
}

uint64_t dispatch thunk of IdentifiableStream.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SourceStream.source()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of TimeBasedBookmarkablePublisherStream.publisher(with:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of StoreStreamProtocol.inner.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t protocol witness for TimeBasedBookmarkablePublisherStream.publisher(with:) in conformance Streams.StoreStream<A>(double a1)
{
  swift_getWitnessTable();

  return StoreStreamProtocol.publisher(with:)(a1);
}

uint64_t protocol witness for SourceStream.source() in conformance Streams.StoreStream<A>()
{
  swift_getWitnessTable();

  return StoreStreamProtocol.source()();
}

uint64_t protocol witness for IdentifiableStream.identifier.getter in conformance Streams.StoreStream<A>()
{
  swift_getWitnessTable();

  return StoreStreamProtocol.identifier.getter();
}

uint64_t type metadata instantiation function for OrderedDictionary.KeyWrapper()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t type metadata completion function for OrderedDictionary.KeyWrapper()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t type metadata accessor for OrderedDictionary.KeyWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata instantiation function for OrderedDictionary(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

void *initializeBufferWithCopyOfBuffer for OrderedDictionary(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for OrderedDictionary(id *a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for OrderedDictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

id *assignWithTake for OrderedDictionary(id *a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OrderedDictionary(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OrderedDictionary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for OrderedDictionary()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SQLDatabaseError.description.getter()
{
  if (*(unsigned char *)(v0 + 32))
  {
    uint64_t v1 = *(void *)(v0 + 16);
    uint64_t v2 = *(void *)(v0 + 24);
    OUTLINED_FUNCTION_7_2();
    swift_bridgeObjectRelease();
    v3._countAndFlagsBits = OUTLINED_FUNCTION_3_6();
    String.append(_:)(v3);
    v4._countAndFlagsBits = 8238;
    v4._object = (void *)0xE200000000000000;
    String.append(_:)(v4);
    uint64_t v5 = v1;
    uint64_t v6 = v2;
  }
  else
  {
    uint64_t v8 = 0;
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    uint64_t v5 = OUTLINED_FUNCTION_3_6();
  }
  String.append(_:)(*(Swift::String *)&v5);
  return v8;
}

uint64_t SQLDatabaseHandle.init(identifier:useCase:readOnly:)(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v5 = v4;
  ppDb[1] = *(sqlite3 **)MEMORY[0x1E4F143B8];
  type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0_4();
  uint64_t v83 = v11;
  uint64_t v84 = v10;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_10();
  uint64_t v81 = v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v13 - 8);
  OUTLINED_FUNCTION_10();
  uint64_t v79 = v14;
  uint64_t v86 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0_4();
  uint64_t v82 = v15;
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  Swift::String v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v80 = (char *)&v71 - v20;
  type metadata accessor for BMResourceSpecifier();
  swift_bridgeObjectRetain();
  uint64_t v78 = a1;
  id v21 = BMResourceSpecifier.__allocating_init(type:name:)(3, a1, a2);
  id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4FB28]), sel_initWithUseCase_, a3);
  unint64_t v23 = v22;
  int v85 = a4;
  if (a4) {
    uint64_t v24 = 1;
  }
  else {
    uint64_t v24 = 3;
  }
  uint64_t v91 = 0;
  id v25 = objc_msgSend(v22, sel_requestAccessToResource_mode_error_, v21, v24, &v91);
  id v26 = (id)v91;
  if (!v25)
  {
    id v55 = (id)v91;
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
LABEL_16:
    type metadata accessor for SQLDatabaseHandle();
    swift_deallocPartialClassInstance();
    return v5;
  }
  uint64_t v27 = v25;
  id v76 = v23;
  id v77 = v21;
  uint64_t v28 = OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_assertion;
  *(void *)(v5 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_assertion) = v25;
  id v29 = v26;
  id v30 = objc_msgSend(v27, sel_path);
  if (!v30)
  {
    swift_bridgeObjectRelease();
    uint64_t v91 = 0;
    unint64_t v92 = 0xE000000000000000;
    _StringGuts.grow(_:)(34);
    v56._object = (void *)0x800000018EBE90A0;
    v56._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v56);
    uint64_t v89 = *(void *)(v5 + v28);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BMAccessAssertion);
    _print_unlocked<A, B>(_:_:)();
    v57._countAndFlagsBits = 0x6E20612073616820;
    v57._object = (void *)0xEF68746170206C69;
    String.append(_:)(v57);
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    uint64_t v58 = swift_allocError();
    OUTLINED_FUNCTION_6_3(v58, v59);

LABEL_15:
    swift_unknownObjectRelease();
    goto LABEL_16;
  }
  Swift::String v31 = v30;
  uint64_t v71 = v28;
  id v72 = a3;
  uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v74 = v32;

  uint64_t v91 = 0x336574696C71732ELL;
  unint64_t v92 = 0xE800000000000000;
  uint64_t v89 = v78;
  uint64_t v90 = a2;
  swift_bridgeObjectRetain();
  uint64_t v89 = String.init<A>(_:)();
  uint64_t v90 = v33;
  String.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  uint64_t v73 = v89;
  uint64_t v34 = v19;
  unint64_t v35 = v90;
  __swift_storeEnumTagSinglePayload(v79, 1, 1, v86);
  uint64_t v37 = v83;
  uint64_t v36 = v84;
  uint64_t v78 = v5;
  uint64_t v38 = *(void (**)(uint64_t))(v83 + 104);
  uint64_t v39 = v81;
  uint64_t v40 = OUTLINED_FUNCTION_4_5();
  v38(v40);
  URL.init(filePath:directoryHint:relativeTo:)();
  uint64_t v91 = v73;
  unint64_t v92 = v35;
  uint64_t v41 = OUTLINED_FUNCTION_4_5();
  v38(v41);
  unint64_t v42 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v43 = v80;
  uint64_t v79 = v42;
  URL.appending<A>(component:directoryHint:)();
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v39, v36);
  uint64_t v44 = v82;
  Swift::String v45 = *(void (**)(char *, uint64_t))(v82 + 8);
  uint64_t v46 = v86;
  v45(v34, v86);
  swift_bridgeObjectRelease();
  URL.standardizedFileURL.getter();
  uint64_t v47 = v43;
  Swift::String v48 = (void (*)(uint64_t, uint64_t))v45;
  v45(v47, v46);
  uint64_t v49 = v78;
  uint64_t v50 = v78 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_databaseFileURL;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v78 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_databaseFileURL, v34, v46);
  ppDb[0] = 0;
  if (v85) {
    int v51 = 1;
  }
  else {
    int v51 = 6;
  }
  URL.path.getter();
  uint64_t v52 = String.utf8CString.getter();
  swift_bridgeObjectRelease();
  uint64_t v53 = sqlite3_open_v2((const char *)(v52 + 32), ppDb, v51, 0);
  swift_release();
  uint64_t v54 = ppDb[0];
  if (v53 || !ppDb[0])
  {
    id v60 = BMSQLDatabaseError(v53, ppDb[0], 0);
    swift_getErrorValue();
    uint64_t v61 = Error.localizedDescription.getter();
    unint64_t v63 = v62;

    uint64_t v91 = v61;
    unint64_t v92 = v63;
    OUTLINED_FUNCTION_1_2();
    uint64_t v89 = v64;
    uint64_t v90 = v65;
    OUTLINED_FUNCTION_2();
    uint64_t v87 = v66;
    uint64_t v88 = v67;
    OUTLINED_FUNCTION_5_3();
    StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    uint64_t v68 = swift_allocError();
    OUTLINED_FUNCTION_6_3(v68, v69);

    v48(v50, v86);
    uint64_t v5 = v49;
    goto LABEL_15;
  }

  uint64_t v5 = v49;
  *(void *)(v49 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_db) = v54;
  return v5;
}

uint64_t SQLDatabaseHandle.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(sqlite3 **)(v0 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_db);
  uint64_t v3 = sqlite3_close_v2(v2);
  if (v3)
  {
    id v4 = BMSQLDatabaseError(v3, v2, 0);
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    uint64_t v7 = v6;

    v19[0] = v5;
    v19[1] = v7;
    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_2();
    lazy protocol witness table accessor for type String and conformance String();
    OUTLINED_FUNCTION_5_3();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    if (one-time initialization token for SQL != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logging.SQL);
    swift_bridgeObjectRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      v19[0] = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_18E67D000, v12, v13, "SQLDatabaseHandle: Failed to close database connection with error: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x192FB1900](v15, -1, -1);
      MEMORY[0x192FB1900](v14, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v16 = v1 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_databaseFileURL;
  uint64_t v17 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  swift_unknownObjectRelease();
  return v1;
}

uint64_t SQLDatabaseHandle.__deallocating_deinit()
{
  SQLDatabaseHandle.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

Swift::OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLResultSet.next()()
{
  uint64_t v0 = 0;
  result.value._rawValue = v0;
  return result;
}

uint64_t SQLDatabase.databasePath()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1 + OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_databaseFileURL;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t outlined copy of SQLDatabaseError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result = a2;
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  if (!a5)
  {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for SQLDatabaseError(uint64_t a1)
{
  return outlined consume of SQLDatabaseError(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t outlined consume of SQLDatabaseError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result = a2;
  if (a5 - 1 < 2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  if (!a5)
  {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SQLDatabaseError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of SQLDatabaseError(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for SQLDatabaseError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  outlined copy of SQLDatabaseError(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of SQLDatabaseError(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SQLDatabaseError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of SQLDatabaseError(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SQLDatabaseError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 33))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLDatabaseError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for SQLDatabaseError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t destructiveInjectEnumTag for SQLDatabaseError(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

void type metadata accessor for SQLDatabaseError()
{
}

uint64_t ObjC metadata update function for SQLDatabaseHandle()
{
  return type metadata accessor for SQLDatabaseHandle();
}

uint64_t type metadata accessor for SQLDatabaseHandle()
{
  uint64_t result = type metadata singleton initialization cache for SQLDatabaseHandle;
  if (!type metadata singleton initialization cache for SQLDatabaseHandle) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for SQLDatabaseHandle()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void type metadata accessor for SQLResultSet()
{
}

void type metadata accessor for SQLDatabase()
{
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

unint64_t type metadata accessor for BMResourceSpecifier()
{
  unint64_t result = lazy cache variable for type metadata for BMResourceSpecifier;
  if (!lazy cache variable for type metadata for BMResourceSpecifier)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for BMResourceSpecifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError()
{
  unint64_t result = lazy protocol witness table cache variable for type SQLDatabaseError and conformance SQLDatabaseError;
  if (!lazy protocol witness table cache variable for type SQLDatabaseError and conformance SQLDatabaseError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SQLDatabaseError and conformance SQLDatabaseError);
  }
  return result;
}

uint64_t DatabaseWithAccess.deinit()
{
  uint64_t v1 = v0;
  int v2 = *(sqlite3 **)(v0 + 16);
  uint64_t v3 = sqlite3_close_v2(v2);
  if (v3)
  {
    id v4 = BMSQLDatabaseError(v3, v2, 0);
    swift_getErrorValue();
    uint64_t v5 = Error.localizedDescription.getter();
    uint64_t v7 = v6;

    v17[0] = v5;
    v17[1] = v7;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    if (one-time initialization token for SQL != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logging.SQL);
    swift_bridgeObjectRetain();
    unsigned __int8 v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      v17[0] = v15;
      *(_DWORD *)uint64_t v14 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v10, v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_18E67D000, v12, v13, "SQLExpressionEvaluator: Failed to close database connection with error: %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x192FB1900](v15, -1, -1);
      MEMORY[0x192FB1900](v14, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  swift_unknownObjectRelease();
  return v1;
}

uint64_t DatabaseWithAccess.__deallocating_deinit()
{
  uint64_t v0 = DatabaseWithAccess.deinit();

  return MEMORY[0x1F4186488](v0, 32, 7);
}

uint64_t IncrementalViewManager.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  IncrementalViewManager.init()();
  return v0;
}

void IncrementalViewManager.init()()
{
  OUTLINED_FUNCTION_38_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v100 = v2;
  uint64_t v101 = v1;
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_67();
  uint64_t v5 = (uint64_t *)(v4 - v3);
  uint64_t v82 = type metadata accessor for DatabaseCatalog();
  OUTLINED_FUNCTION_0_4();
  uint64_t v81 = v6;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_14_0(v8);
  id v9 = (id)type metadata accessor for Logger();
  OUTLINED_FUNCTION_0_4();
  uint64_t countAndFlagsBits = v10;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_67();
  uint64_t v15 = v14 - v13;
  uint64_t object = type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_0_4();
  unint64_t v18 = v17;
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_67();
  id v22 = (void *)(v21 - v20);
  uint64_t v23 = OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_cachedDatabaseWithAccesses;
  type metadata accessor for DatabaseWithAccess();
  *(void *)(v0 + v23) = Dictionary.init(dictionaryLiteral:)();
  if (one-time initialization token for compute != -1) {
    goto LABEL_43;
  }
  while (1)
  {
    uint64_t v24 = __swift_project_value_buffer((uint64_t)v9, (uint64_t)static Logging.compute);
    id v25 = *(void (**)(uint64_t, uint64_t, id))(countAndFlagsBits + 16);
    countAndFlagsBits += 16;
    v25(v15, v24, v9);
    OSSignposter.init(logger:)();
    id v26 = *(void (**)(unint64_t, void *, uint64_t))(v18 + 32);
    v18 += 32;
    v26(v0 + OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_signposter, v22, object);
    v104[3] = &unk_1EDD6CCC0;
    v104[4] = lazy protocol witness table accessor for type IPCSFeatureFlag and conformance IPCSFeatureFlag();
    char v27 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v104);
    unint64_t v83 = v0;
    *(unsigned char *)(v0 + OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_useCache) = (v27 & 1) == 0;
    type metadata accessor for SQLExpressionEvaluator();
    swift_allocObject();
    uint64_t v15 = 0;
    uint64_t v79 = SQLExpressionEvaluator.init(isReadOnly:)(1);
    id v78 = BiomeLibraryNodeBridge();
    id v77 = BiomeLibraryNodeBridge();
    id v28 = objc_msgSend(v77, sel_allStreams);
    type metadata accessor for BMSQLColumn(0, &lazy cache variable for type metadata for BMStreamBase);
    unint64_t v0 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v104[0] = MEMORY[0x1E4FBC860];
    unint64_t v85 = v0;
    if (v0 >> 62) {
      break;
    }
    id v9 = *(id *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v9) {
      goto LABEL_45;
    }
LABEL_4:
    uint64_t v91 = 0;
    id v29 = 0;
    unint64_t v88 = v85 & 0xC000000000000001;
    unint64_t v84 = v85 + 32;
    unsigned int v99 = 2;
    unsigned int v98 = 0;
    unsigned int v97 = 1;
    unsigned int v96 = 3;
    unsigned int v95 = 4;
    unsigned int v94 = 6;
    unsigned int v93 = 5;
    unsigned int v92 = 7;
    long long v86 = xmmword_18EB382C0;
    id v87 = v9;
    while (1)
    {
      id v30 = v88 ? (id)MEMORY[0x192FB0330](v29, v85) : *(id *)(v84 + 8 * (void)v29);
      BOOL v31 = __OFADD__(v29, 1);
      id v22 = (char *)v29 + 1;
      if (v31) {
        break;
      }
      id v89 = v30;
      id v9 = objc_msgSend(v30, sel_schema);
      id v32 = objc_msgSend(v9, sel_columns);

      type metadata accessor for BMSQLColumn(0, &lazy cache variable for type metadata for BMSQLColumn);
      uint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if ((unint64_t)v15 >> 62)
      {
        if (v15 < 0) {
          id v9 = (id)v15;
        }
        else {
          id v9 = (id)(v15 & 0xFFFFFFFFFFFFFF8);
        }
        swift_bridgeObjectRetain();
        uint64_t object = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t object = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      id v90 = v22;
      if (object)
      {
        v103[0] = MEMORY[0x1E4FBC860];
        unint64_t v0 = (unint64_t)v103;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        if (object < 0) {
          goto LABEL_42;
        }
        uint64_t v33 = 0;
        uint64_t v34 = v103[0];
        unint64_t v102 = v15 & 0xC000000000000001;
        do
        {
          if (v102) {
            id v35 = (id)MEMORY[0x192FB0330](v33, v15);
          }
          else {
            id v35 = *(id *)(v15 + 8 * v33 + 32);
          }
          uint64_t v36 = v35;
          uint64_t v37 = (char *)v5 + *(int *)(v101 + 48);
          id v38 = objc_msgSend(v35, sel_name);
          uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v41 = v40;

          uint64_t *v5 = v39;
          v5[1] = v41;
          switch((unint64_t)objc_msgSend(v36, sel_dataType))
          {
            case 0uLL:
              type metadata accessor for SQLDataType();
              OUTLINED_FUNCTION_1_10();
              (*(void (**)(char *, void))(v42 + 104))(v37, v98);
              break;
            case 1uLL:
              type metadata accessor for SQLDataType();
              OUTLINED_FUNCTION_1_10();
              (*(void (**)(char *, void))(v47 + 104))(v37, v97);
              break;
            case 2uLL:
              type metadata accessor for SQLDataType();
              OUTLINED_FUNCTION_1_10();
              (*(void (**)(char *, void))(v44 + 104))(v37, v99);
              break;
            case 3uLL:
              type metadata accessor for SQLDataType();
              OUTLINED_FUNCTION_1_10();
              (*(void (**)(char *, void))(v45 + 104))(v37, v96);
              break;
            case 4uLL:
              type metadata accessor for SQLDataType();
              OUTLINED_FUNCTION_1_10();
              (*(void (**)(char *, void))(v43 + 104))(v37, v95);
              break;
            case 5uLL:
              type metadata accessor for SQLDataType();
              OUTLINED_FUNCTION_1_10();
              (*(void (**)(char *, void))(v48 + 104))(v37, v93);
              break;
            case 6uLL:
              type metadata accessor for SQLDataType();
              OUTLINED_FUNCTION_1_10();
              (*(void (**)(char *, void))(v49 + 104))(v37, v94);
              break;
            default:
              type metadata accessor for SQLDataType();
              OUTLINED_FUNCTION_1_10();
              (*(void (**)(char *, void))(v46 + 104))(v37, v92);
              break;
          }

          v103[0] = v34;
          unint64_t v18 = *(void *)(v34 + 16);
          if (v18 >= *(void *)(v34 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v34 = v103[0];
          }
          ++v33;
          *(void *)(v34 + 16) = v18 + 1;
          OUTLINED_FUNCTION_22();
          outlined init with take of (String, SQLDataType)((uint64_t)v5, v34 + v50 + *(void *)(v51 + 72) * v18);
        }
        while (object != v33);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v34 = MEMORY[0x1E4FBC860];
      }
      uint64_t v15 = v91;
      if (*(void *)(v34 + 16))
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SQLDataType>);
        uint64_t v52 = static _DictionaryStorage.allocate(capacity:)();
      }
      else
      {
        uint64_t v52 = MEMORY[0x1E4FBC868];
      }
      v103[0] = v52;
      uint64_t v53 = swift_bridgeObjectRetain();
      specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v53, 1, v103);
      if (v91)
      {
        swift_unexpectedError();
        __break(1u);
        goto LABEL_51;
      }
      swift_bridgeObjectRelease();
      id v9 = (id)v103[0];
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Schema>);
      uint64_t v54 = type metadata accessor for Schema();
      OUTLINED_FUNCTION_3_7((uint64_t)v54);
      uint64_t v15 = *(void *)(v55 + 72);
      *(_OWORD *)(swift_allocObject() + 16) = v86;
      unint64_t v18 = (unint64_t)v89;
      id v56 = objc_msgSend(v89, sel_schema);
      id v57 = objc_msgSend(v56, sel_tableName);

      uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v60 = v59;

      swift_retain();
      v61._uint64_t countAndFlagsBits = v58;
      v61._uint64_t object = v60;
      BiomeSQLParser::Schema v105 = Schema.init(tableName:columns:)(v61, (Swift::OpaquePointer)v9);
      id v62 = objc_msgSend(v89, sel_schema, v105.columns._rawValue);
      id v63 = objc_msgSend(v62, sel_tableName);

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v64 = String.lowercased()();
      uint64_t countAndFlagsBits = v64._countAndFlagsBits;
      uint64_t object = (uint64_t)v64._object;
      swift_bridgeObjectRelease();
      Schema.init(tableName:columns:)(v64, (Swift::OpaquePointer)v9);

      unint64_t v0 = (unint64_t)v104;
      specialized Array.append<A>(contentsOf:)();
      id v29 = v90;
      if (v90 == v87)
      {
        swift_bridgeObjectRelease_n();
        v65._rawValue = (void *)v104[0];
        uint64_t v15 = v91;
        goto LABEL_46;
      }
    }
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    swift_once();
  }
  swift_bridgeObjectRetain_n();
  id v9 = (id)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v9) {
    goto LABEL_4;
  }
LABEL_45:
  swift_bridgeObjectRelease_n();
  v65._rawValue = (void *)MEMORY[0x1E4FBC860];
LABEL_46:
  unint64_t v18 = v80;
  DatabaseCatalog.init(schemas:)(v65);
  swift_unknownObjectRelease();
  unint64_t v66 = v83;
  uint64_t v67 = v79;
  uint64_t v68 = (uint64_t)v78;
  if (one-time initialization token for initializedLibrary != -1) {
    swift_once();
  }
  uint64_t v69 = static UnifiedLibrary.Library.orderedDataflows.getter();
  MEMORY[0x1F4188790](v69);
  *(&v76 - 4) = v18;
  *(&v76 - 3) = v68;
  uint64_t v74 = v67;
  uint64_t v70 = specialized Sequence.compactMap<A>(_:)((void (*)(unsigned char *))partial apply for closure #1 in IncrementalViewManager.init(), (uint64_t)(&v76 - 6), v69);
  if (v15)
  {
LABEL_51:
    swift_release();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(unint64_t, ValueMetadata *))(v81 + 8))(v18, v82);
    v104[0] = 0;
    v104[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    v73._uint64_t object = (void *)0x800000018EBE90F0;
    v73._uint64_t countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v73);
    v103[0] = v15;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    _print_unlocked<A, B>(_:_:)();
    int v75 = 0;
    uint64_t v74 = 87;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x18E7CC064);
  }
  uint64_t v71 = v70;
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_4();
  v72();
  *(void *)(v66 + 16) = v71;
  *(void *)(v66 + 24) = v67;
  OUTLINED_FUNCTION_34();
}

uint64_t type metadata accessor for DatabaseWithAccess()
{
  return self;
}

void closure #1 in IncrementalViewManager.init()(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v120 = a4;
  Swift::String v116 = a3;
  uint64_t v126 = a5;
  v127[15] = *(id *)MEMORY[0x1E4F143B8];
  Swift::String v109 = type metadata accessor for FromClause();
  Description = (void (**)(char *, ValueMetadata *))v109[-1].Description;
  MEMORY[0x1F4188790](v109);
  id v9 = (char *)v103 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Schema?);
  MEMORY[0x1F4188790](v10 - 8);
  Swift::String v110 = (ValueMetadata *)((char *)v103 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::String v114 = type metadata accessor for SelectCore();
  Swift::String v113 = (void (**)(uint64_t, ValueMetadata *))v114[-1].Description;
  MEMORY[0x1F4188790](v114);
  uint64_t v121 = (uint64_t)v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for SelectCorePhysicalPlan(0);
  uint64_t v13 = MEMORY[0x1F4188790](v106);
  uint64_t v107 = (ValueMetadata **)((char *)v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  uint64_t v105 = (uint64_t)v103 - v15;
  uint64_t v125 = type metadata accessor for MaterializedViewPhysicalPlan(0);
  MEMORY[0x1F4188790](v125);
  Swift::String v115 = (char *)v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = type metadata accessor for LogicalPlanType();
  unint64_t v18 = (void (**)(char *, ValueMetadata *))v17[-1].Description;
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v103 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::String v112 = type metadata accessor for MaterializedView();
  v119 = (void (**)(char *, char *, ValueMetadata *))v112[-1].Description;
  uint64_t v21 = MEMORY[0x1F4188790](v112);
  uint64_t v117 = (char *)v103 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v118 = (char *)v103 - v23;
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LogicalPlan?);
  MEMORY[0x1F4188790](v24 - 8);
  id v26 = (char *)v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v27 = type metadata accessor for LogicalPlan();
  Swift::String v123 = (void (**)(void))v27[-1].Description;
  uint64_t v124 = v27;
  MEMORY[0x1F4188790](v27);
  Swift::String v122 = (char *)v103 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a1[6];
  uint64_t v30 = a1[7];
  uint64_t v104 = a1[12];
  unint64_t v31 = a1[14];
  uint64_t v111 = a1[13];
  uint64_t v32 = a1[15];
  if ((v29 != 0xD000000000000010 || v30 != 0x800000018EBE9710)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    __swift_storeEnumTagSinglePayload(v126, 1, 1, v125);
    return;
  }
  parse(sql:catalog:)(v31, v32, a2);
  if (!v5)
  {
    if (*(void *)(v33 + 16) != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_14;
    }
    v103[1] = 0;
    specialized Collection.first.getter(v33, (uint64_t)v26);
    swift_bridgeObjectRelease();
    uint64_t v34 = (uint64_t)v124;
    if (__swift_getEnumTagSinglePayload((uint64_t)v26, 1, (uint64_t)v124) == 1)
    {
      outlined destroy of UUID?((uint64_t)v26, &demangling cache variable for type metadata for LogicalPlan?);
LABEL_14:
      lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
      swift_allocError();
      *(void *)uint64_t v48 = v31;
      *(void *)(v48 + 8) = v32;
      *(unsigned char *)(v48 + 16) = 1;
      swift_bridgeObjectRetain();
      swift_willThrow();
      return;
    }
    id v35 = v122;
    v123[4]();
    LogicalPlan.plan.getter((uint64_t)v20);
    if (((unsigned int (*)(char *, ValueMetadata *))v18[11])(v20, v17) != 1)
    {
      ((void (*)(char *, uint64_t))v123[1])(v35, v34);
      v18[1](v20, v17);
      goto LABEL_14;
    }
    v18[12](v20, v17);
    uint64_t v36 = v119;
    uint64_t v37 = v118;
    id v38 = v112;
    v119[4](v118, v20, v112);
    uint64_t v39 = v36[2];
    uint64_t v40 = v117;
    v39(v117, v37, v38);
    uint64_t v41 = v115;
    v39(v115, v40, v38);
    uint64_t v42 = v116;
    swift_unknownObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    MaterializedView.select.getter(v121);
    swift_retain();
    SelectCore.from.getter((uint64_t)v9);
    uint64_t v43 = FromClause.schemas.getter();
    Description[1](v9, v109);
    uint64_t v44 = v110;
    specialized Collection.first.getter(v43, (uint64_t)v110);
    swift_bridgeObjectRelease();
    uint64_t v45 = type metadata accessor for Schema();
    if (__swift_getEnumTagSinglePayload((uint64_t)v44, 1, (uint64_t)v45) == 1)
    {
      outlined destroy of UUID?((uint64_t)v44, &demangling cache variable for type metadata for Schema?);
      uint64_t v46 = 0;
      uint64_t v47 = 0;
LABEL_25:
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      swift_allocError();
      *(void *)uint64_t v74 = v46;
      *(void *)(v74 + 8) = v47;
      *(unsigned char *)(v74 + 64) = 5;
      swift_willThrow();
      swift_unknownObjectRelease();
      swift_release();
      v113[1](v121, v114);
      swift_release();
      swift_bridgeObjectRelease();
      int v75 = v119[1];
      ((void (*)(char *, ValueMetadata *))v75)(v117, v38);
      ((void (*)(char *, ValueMetadata *))v75)(v41, v38);
      ((void (*)(char *, ValueMetadata *))v75)(v118, v38);
      ((void (*)(char *, ValueMetadata *))v123[1])(v122, v124);
      return;
    }
    uint64_t v46 = Schema.tableName.getter();
    uint64_t v47 = v49;
    (*((void (**)(ValueMetadata *, ValueMetadata *))v45[-1].Description + 1))(v44, v45);
    swift_bridgeObjectRetain();
    uint64_t v50 = (void *)MEMORY[0x192FAFF50](v46, v47);
    v127[0] = 0;
    uint64_t v51 = (ValueMetadata *)objc_msgSend(v42, sel_streamWithIdentifier_error_, v50, v127);

    if (!v51)
    {
      id v72 = v127[0];
      swift_bridgeObjectRelease();
      Swift::String v73 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      goto LABEL_25;
    }
    id v52 = v127[0];
    swift_bridgeObjectRelease();
    uint64_t v53 = (int *)v106;
    uint64_t v54 = v107;
    ((void (*)(char *, uint64_t, ValueMetadata *))v113[2])((char *)v107 + *(int *)(v106 + 20), v121, v114);
    *(ValueMetadata **)((char *)v54 + v53[6]) = v51;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18EB382D0;
    *(void *)(inited + 32) = v46;
    *(void *)(inited + 40) = v47;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    uint64_t v56 = static _SetStorage.allocate(capacity:)();
    uint64_t v57 = v56 + 56;
    Swift::String v110 = v51;
    uint64_t v58 = *(void *)(inited + 32);
    uint64_t v59 = *(void *)(inited + 40);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v60 = Hasher._finalize()();
    Swift::String v61 = (ValueMetadata *)v56;
    uint64_t v62 = -1 << *(unsigned char *)(v56 + 32);
    unint64_t v63 = v60 & ~v62;
    unint64_t v64 = v63 >> 6;
    uint64_t v65 = *(void *)(v57 + 8 * (v63 >> 6));
    uint64_t v66 = 1 << v63;
    if (((1 << v63) & v65) != 0)
    {
      Swift::String v109 = v61;
      uint64_t Kind = v61[3].Kind;
      uint64_t v68 = (void *)(Kind + 16 * v63);
      if (*v68 == v58 && v68[1] == v59) {
        goto LABEL_50;
      }
      char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
      uint64_t v71 = v123;
      if (v70)
      {
        swift_bridgeObjectRelease();
LABEL_51:
        unint64_t v85 = v109;
LABEL_65:
        unsigned int v92 = v110;
        swift_setDeallocating();
        specialized _ContiguousArrayStorage.__deallocating_deinit();

        swift_unknownObjectRelease();
        v113[1](v121, v114);
        uint64_t v93 = (uint64_t)v107;
        *uint64_t v107 = v85;
        *(void *)(v93 + v53[7]) = 1024;
        uint64_t v94 = v120;
        *(void *)(v93 + v53[8]) = v120;
        uint64_t v95 = v105;
        outlined init with take of MaterializedViewPhysicalPlan(v93, v105, (void (*)(void))type metadata accessor for SelectCorePhysicalPlan);
        unsigned int v96 = v119[1];
        unsigned int v97 = v112;
        ((void (*)(char *, ValueMetadata *))v96)(v117, v112);
        uint64_t v98 = v125;
        uint64_t v99 = (uint64_t)v115;
        outlined init with take of MaterializedViewPhysicalPlan(v95, (uint64_t)&v115[*(int *)(v125 + 20)], (void (*)(void))type metadata accessor for SelectCorePhysicalPlan);
        *(void *)(v99 + *(int *)(v98 + 24)) = v94;
        uint64_t v100 = (void *)(v99 + *(int *)(v98 + 28));
        uint64_t v101 = v111;
        *uint64_t v100 = v104;
        v100[1] = v101;
        uint64_t v102 = v126;
        outlined init with take of MaterializedViewPhysicalPlan(v99, v126, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
        ((void (*)(char *, ValueMetadata *))v96)(v118, v97);
        ((void (*)(char *, ValueMetadata *))v71[1])(v122, v124);
        __swift_storeEnumTagSinglePayload(v102, 0, 1, v98);
        return;
      }
      uint64_t v76 = ~v62;
      unint64_t v63 = (v63 + 1) & v76;
      unint64_t v64 = v63 >> 6;
      uint64_t v65 = *(void *)(v57 + 8 * (v63 >> 6));
      uint64_t v66 = 1 << v63;
      if ((v65 & (1 << v63)) != 0)
      {
        id v77 = (void *)(Kind + 16 * v63);
        BOOL v78 = *v77 == v58 && v77[1] == v59;
        if (v78 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_50;
        }
        unint64_t v63 = (v63 + 1) & v76;
        unint64_t v64 = v63 >> 6;
        uint64_t v65 = *(void *)(v57 + 8 * (v63 >> 6));
        uint64_t v66 = 1 << v63;
        if ((v65 & (1 << v63)) != 0)
        {
          uint64_t v79 = (void *)(Kind + 16 * v63);
          BOOL v80 = *v79 == v58 && v79[1] == v59;
          if (v80 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_50;
          }
          unint64_t v63 = (v63 + 1) & v76;
          unint64_t v64 = v63 >> 6;
          uint64_t v65 = *(void *)(v57 + 8 * (v63 >> 6));
          uint64_t v66 = 1 << v63;
          if ((v65 & (1 << v63)) != 0)
          {
            uint64_t v81 = (void *)(Kind + 16 * v63);
            BOOL v82 = *v81 == v58 && v81[1] == v59;
            uint64_t v53 = (int *)v106;
            if (v82 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
              goto LABEL_50;
            }
            unint64_t v63 = (v63 + 1) & v76;
            unint64_t v64 = v63 >> 6;
            uint64_t v65 = *(void *)(v57 + 8 * (v63 >> 6));
            uint64_t v66 = 1 << v63;
            if ((v65 & (1 << v63)) != 0)
            {
              unint64_t v83 = (void *)(Kind + 16 * v63);
              BOOL v84 = *v83 == v58 && v83[1] == v59;
              uint64_t v53 = (int *)v106;
              if (v84 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
              {
LABEL_50:
                swift_bridgeObjectRelease();
                uint64_t v71 = v123;
                goto LABEL_51;
              }
              unint64_t v63 = (v63 + 1) & v76;
              unint64_t v64 = v63 >> 6;
              uint64_t v65 = *(void *)(v57 + 8 * (v63 >> 6));
              uint64_t v66 = 1 << v63;
              if ((v65 & (1 << v63)) != 0)
              {
                uint64_t v53 = (int *)v106;
                while (1)
                {
                  long long v86 = (void *)(Kind + 16 * v63);
                  BOOL v87 = *v86 == v58 && v86[1] == v59;
                  if (v87 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
                    goto LABEL_50;
                  }
                  unint64_t v63 = (v63 + 1) & v76;
                  unint64_t v64 = v63 >> 6;
                  uint64_t v65 = *(void *)(v57 + 8 * (v63 >> 6));
                  uint64_t v66 = 1 << v63;
                  Swift::String v61 = v109;
                  if ((v65 & (1 << v63)) == 0) {
                    goto LABEL_63;
                  }
                }
              }
            }
          }
          uint64_t v53 = (int *)v106;
        }
      }
      Swift::String v61 = v109;
    }
LABEL_63:
    *(void *)(v57 + 8 * v64) = v66 | v65;
    unint64_t v88 = (void *)(v61[3].Kind + 16 * v63);
    *unint64_t v88 = v58;
    v88[1] = v59;
    uint64_t v89 = v61[1].Kind;
    BOOL v90 = __OFADD__(v89, 1);
    uint64_t v91 = v89 + 1;
    uint64_t v71 = v123;
    if (v90) {
      __break(1u);
    }
    v61[1].uint64_t Kind = v91;
    unint64_t v85 = v61;
    goto LABEL_65;
  }
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(unsigned char *), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  MEMORY[0x1F4188790](v7 - 8);
  id v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for MaterializedViewPhysicalPlan(0);
  uint64_t v21 = *(void *)(v27 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v27);
  uint64_t v24 = (uint64_t)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v20 = (uint64_t)&v20 - v12;
  uint64_t v13 = *(void *)(a3 + 16);
  if (!v13) {
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  memcpy(v26, (const void *)(a3 + 32), 0x80uLL);
  memcpy(v25, v26, sizeof(v25));
  outlined retain of Dataflow((uint64_t)v26);
  a1(v25);
  if (v3)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    outlined release of Dataflow((uint64_t)v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = a1;
    uint64_t v23 = a2;
    uint64_t v14 = MEMORY[0x1E4FBC860];
    for (uint64_t i = 160; ; i += 128)
    {
      outlined release of Dataflow((uint64_t)v26);
      if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v27) == 1)
      {
        outlined destroy of UUID?((uint64_t)v9, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
      }
      else
      {
        uint64_t v16 = v20;
        outlined init with take of MaterializedViewPhysicalPlan((uint64_t)v9, v20, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
        outlined init with take of MaterializedViewPhysicalPlan(v16, v24, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, v14);
        }
        unint64_t v18 = *(void *)(v14 + 16);
        unint64_t v17 = *(void *)(v14 + 24);
        if (v18 >= v17 >> 1) {
          uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1, v14);
        }
        *(void *)(v14 + 16) = v18 + 1;
        outlined init with take of MaterializedViewPhysicalPlan(v24, v14+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v18, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
      }
      if (!--v13) {
        break;
      }
      memcpy(v26, (const void *)(a3 + i), 0x80uLL);
      memcpy(v25, v26, sizeof(v25));
      outlined retain of Dataflow((uint64_t)v26);
      v22(v25);
    }
    swift_bridgeObjectRelease();
  }
  return v14;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IncrementalViewManager.updateSync(viewName:databaseName:streamIdentifier:)(Swift::String viewName, Swift::String databaseName, Swift::String streamIdentifier)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IncrementalViewManager.clearAndRegenerateSync(viewName:databaseName:streamIdentifier:)(Swift::String viewName, Swift::String databaseName, Swift::String streamIdentifier)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IncrementalViewManager.clearAndRegenerate(viewName:databaseName:streamIdentifier:)(Swift::String viewName, Swift::String databaseName, Swift::String streamIdentifier)
{
  uint64_t object = streamIdentifier._object;
  uint64_t countAndFlagsBits = streamIdentifier._countAndFlagsBits;
  uint64_t v5 = databaseName._object;
  uint64_t v92 = databaseName._countAndFlagsBits;
  uint64_t v6 = viewName._object;
  uint64_t v7 = viewName._countAndFlagsBits;
  uint64_t v80 = type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_0_4();
  uint64_t v90 = v8;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_16();
  uint64_t v78 = v10;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v11);
  id v77 = (char *)v73 - v12;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v13);
  uint64_t v76 = (char *)v73 - v14;
  uint64_t v93 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_4();
  uint64_t v16 = v15;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_16();
  uint64_t v85 = v18;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_21();
  uint64_t v84 = v20;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_21();
  uint64_t v79 = v22;
  OUTLINED_FUNCTION_11();
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  id v26 = (char *)v73 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)v73 - v27;
  uint64_t v86 = v3;
  uint64_t v29 = v3 + OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_signposter;
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v88 = v29;
  uint64_t v30 = OSSignposter.logHandle.getter();
  int v81 = static os_signpost_type_t.begin.getter();
  char v31 = OS_os_log.signpostsEnabled.getter();
  uint64_t v91 = v28;
  uint64_t v89 = v6;
  if (v31)
  {
    uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    uint64_t v83 = v7;
    OUTLINED_FUNCTION_47_0();
    v32();
    uint64_t v33 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    uint64_t v75 = v16;
    v73[1] = v34;
    uint64_t v94 = v34;
    *(_DWORD *)uint64_t v33 = 136446722;
    swift_bridgeObjectRetain();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, &v94);
    OUTLINED_FUNCTION_36_1(v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v33 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, (unint64_t)v5, &v94);
    OUTLINED_FUNCTION_49_0(v36);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v33 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, (unint64_t)v6, &v94);
    OUTLINED_FUNCTION_49_0(v37);
    uint64_t v7 = v83;
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v38 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_18E67D000, v30, (os_signpost_type_t)v81, v38, "IncrementalViewClearAndRegenerate", "stream:%{public}s database:%{public}s view:%{public}s", (uint8_t *)v33, 0x20u);
    swift_arrayDestroy();
    uint64_t v16 = v75;
    OUTLINED_FUNCTION_9();
    uint64_t v39 = v91;
    OUTLINED_FUNCTION_9();

    (*(void (**)(char *, uint64_t))(v16 + 8))(v26, v93);
    v74(v26, v39, v93);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v26, v28, v93);
  }
  type metadata accessor for OSSignpostIntervalState();
  OUTLINED_FUNCTION_51_0();
  uint64_t v40 = OSSignpostIntervalState.init(id:isOpen:)();
  if (one-time initialization token for initializedLibrary != -1) {
    swift_once();
  }
  uint64_t v41 = v92;
  uint64_t v42 = static UnifiedLibrary.Library.lookupDatabaseResource(identifier:)(v92, (uint64_t)v5);
  if (!v42)
  {
    lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
    OUTLINED_FUNCTION_39();
    *(void *)uint64_t v51 = v41;
    *(void *)(v51 + 8) = v5;
    *(unsigned char *)(v51 + 16) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    uint64_t v47 = (void *)OSSignposter.logHandle.getter();
    uint64_t v48 = v84;
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if (OUTLINED_FUNCTION_18_0())
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v52 = OUTLINED_FUNCTION_8_2();
      if (v53(v52) != *MEMORY[0x1E4FBD340])
      {
        uint64_t v61 = OUTLINED_FUNCTION_12_0();
        v62(v61);
      }
      *(_WORD *)OUTLINED_FUNCTION_25_1() = 0;
      uint64_t v60 = v84;
      goto LABEL_21;
    }
LABEL_22:

    uint64_t v66 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v66(v48, v93);
    swift_release();
    v66((uint64_t)v91, v93);
    return;
  }
  uint64_t v43 = MEMORY[0x1F4188790](v42);
  uint64_t v44 = v87;
  v73[-8] = v86;
  v73[-7] = v7;
  v73[-6] = v45;
  v73[-5] = v43;
  v73[-4] = v46;
  v73[-3] = v41;
  v73[-2] = v5;
  (*(void (**)(uint64_t))(v46 + 24))(v7);
  if (v44)
  {
    uint64_t v47 = (void *)OSSignposter.logHandle.getter();
    uint64_t v48 = v85;
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if (OUTLINED_FUNCTION_18_0())
    {
      swift_retain();
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v49 = OUTLINED_FUNCTION_8_2();
      if (v50(v49) != *MEMORY[0x1E4FBD340])
      {
        uint64_t v58 = OUTLINED_FUNCTION_12_0();
        v59(v58);
      }
      *(_WORD *)OUTLINED_FUNCTION_25_1() = 0;
      uint64_t v60 = v85;
LABEL_21:
      OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_45_0();
      OUTLINED_FUNCTION_46_0(&dword_18E67D000, v63, v64, v65, "IncrementalViewClearAndRegenerate");
      OUTLINED_FUNCTION_9();
      uint64_t v48 = v60;
      goto LABEL_22;
    }
    goto LABEL_22;
  }
  uint64_t v54 = (void *)OSSignposter.logHandle.getter();
  uint64_t v55 = v40;
  OSSignpostIntervalState.signpostID.getter();
  static os_signpost_type_t.end.getter();
  if (OUTLINED_FUNCTION_18_0())
  {
    swift_retain();
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v56 = OUTLINED_FUNCTION_8_2();
    if (v57(v56) != *MEMORY[0x1E4FBD340])
    {
      uint64_t v67 = OUTLINED_FUNCTION_12_0();
      v68(v67);
    }
    *(_WORD *)OUTLINED_FUNCTION_25_1() = 0;
    uint64_t v55 = v79;
    OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_46_0(&dword_18E67D000, v69, v70, v71, "IncrementalViewClearAndRegenerate");
    OUTLINED_FUNCTION_9();
  }

  id v72 = *(void (**)(void))(v16 + 8);
  OUTLINED_FUNCTION_57_0();
  v72();
  swift_release();
  ((void (*)(char *, uint64_t))v72)(v91, v55);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IncrementalViewManager.clear(viewName:databaseName:streamIdentifier:)(Swift::String viewName, Swift::String databaseName, Swift::String streamIdentifier)
{
}

uint64_t closure #1 in IncrementalViewManager.clear(viewName:databaseName:streamIdentifier:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v95 = a7;
  unint64_t v94 = a6;
  uint64_t v97 = a3;
  uint64_t v104 = a1;
  uint64_t v101 = type metadata accessor for MaterializedViewPhysicalPlan(0);
  uint64_t v99 = *(void *)(v101 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v101);
  uint64_t v12 = (char *)v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v93 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  uint64_t v100 = (char *)v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v93 - v18;
  if (one-time initialization token for compute != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = __swift_project_value_buffer(v20, (uint64_t)static Logging.compute);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v93[0] = v21;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  unint64_t v105 = a2;
  uint64_t v103 = v19;
  uint64_t v98 = v14;
  unint64_t v102 = a4;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    Swift::String v109 = (char *)v26;
    *(_DWORD *)uint64_t v25 = 136315394;
    swift_bridgeObjectRetain();
    v108[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, a2, (uint64_t *)&v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v25 + 12) = 2080;
    swift_bridgeObjectRetain();
    v108[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, a4, (uint64_t *)&v109);
    a2 = v105;
    uint64_t v19 = v103;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_18E67D000, v22, v23, "IncrementalViewManager: clearing materialized view for %s in %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x192FB1900](v26, -1, -1);
    MEMORY[0x192FB1900](v25, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v27 = *(void *)(a5 + 16);
  uint64_t v28 = *(void *)(v27 + 16);
  if (v28)
  {
    v93[1] = a5;
    uint64_t v29 = v27 + ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
    uint64_t v30 = *(void *)(v99 + 72);
    swift_bridgeObjectRetain_n();
    while (1)
    {
      outlined init with copy of MaterializedViewPhysicalPlan(v29, (uint64_t)v12, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
      MaterializedView.name.getter();
      Swift::String v31 = String.lowercased()();
      a2 = v105;
      swift_bridgeObjectRelease();
      Swift::String v32 = String.lowercased()();
      if (v31._countAndFlagsBits == v32._countAndFlagsBits && v31._object == v32._object) {
        break;
      }
      char v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v34) {
        goto LABEL_18;
      }
      outlined destroy of MaterializedViewPhysicalPlan((uint64_t)v12);
      v29 += v30;
      if (!--v28)
      {
        swift_bridgeObjectRelease();
        uint64_t v35 = 1;
        unint64_t v36 = v102;
        uint64_t v19 = v103;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    unint64_t v36 = v102;
    uint64_t v37 = v101;
    uint64_t v38 = (uint64_t)v100;
    swift_bridgeObjectRelease();
    uint64_t v19 = v103;
    outlined init with take of MaterializedViewPhysicalPlan((uint64_t)v12, (uint64_t)v103, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
    uint64_t v35 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v35 = 1;
    unint64_t v36 = v102;
LABEL_16:
    uint64_t v37 = v101;
    uint64_t v38 = (uint64_t)v100;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v19, v35, 1, v37);
  swift_bridgeObjectRelease();
  outlined init with copy of MaterializedViewPhysicalPlan?((uint64_t)v19, v38, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  if (__swift_getEnumTagSinglePayload(v38, 1, v37) != 1)
  {
    uint64_t v40 = (uint64_t)v98;
    outlined init with take of MaterializedViewPhysicalPlan(v38, (uint64_t)v98, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
    uint64_t v41 = v96;
    uint64_t v42 = IncrementalViewManager.cachedDatabaseWithAccess(for:)(v94, v95);
    if (!v41)
    {
      uint64_t v43 = v42;
      uint64_t v44 = (sqlite3 *)*((void *)v42 + 2);
      uint64_t v45 = sqlite3_exec(v44, "begin", 0, 0, 0);
      if (v45)
      {
        id v46 = BMSQLDatabaseError(v45, v44, 0);
        swift_getErrorValue();
        uint64_t v47 = Error.localizedDescription.getter();
        uint64_t v49 = v48;

        Swift::String v109 = (char *)v47;
        uint64_t v110 = v49;
        strcpy((char *)v108, "BMSQLDatabase");
        HIWORD(v108[1]) = -4864;
        uint64_t v106 = 0x62617461444C5153;
        unint64_t v107 = 0xEB00000000657361;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v50 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v52 = v51;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
        swift_allocError();
        *(_OWORD *)uint64_t v53 = xmmword_18EB382E0;
        *(void *)(v53 + 16) = v50;
        *(void *)(v53 + 24) = v52;
        *(unsigned char *)(v53 + 32) = 1;
      }
      else
      {
        uint64_t v56 = MaterializedView.name.getter();
        uint64_t v58 = v57;
        v59._uint64_t countAndFlagsBits = v56;
        v59._uint64_t object = v58;
        IncrementalViewManager.clear(database:materializedViewName:)((Swift::OpaquePointer)v44, v59);
        uint64_t v61 = v60;
        if (v60)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v62 = (sqlite3 *)*((void *)v43 + 2);
          uint64_t v63 = sqlite3_exec(v62, "commit", 0, 0, 0);
          if (!v63)
          {
            unint64_t v82 = v105;
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain_n();
            swift_retain_n();
            uint64_t v83 = Logger.logObject.getter();
            os_log_type_t v84 = static os_log_type_t.info.getter();
            int v85 = v84;
            if (os_log_type_enabled(v83, v84))
            {
              uint64_t v86 = swift_slowAlloc();
              LODWORD(v101) = v85;
              uint64_t v87 = v86;
              uint64_t v100 = (char *)swift_slowAlloc();
              Swift::String v109 = v100;
              *(_DWORD *)uint64_t v87 = 136315650;
              swift_bridgeObjectRetain();
              v108[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v82, (uint64_t *)&v109);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v87 + 12) = 2080;
              swift_bridgeObjectRetain();
              v108[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v36, (uint64_t *)&v109);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v87 + 22) = 2080;
              id v88 = objc_msgSend(*((id *)v43 + 3), sel_description);
              uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              unint64_t v91 = v90;

              v108[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v91, (uint64_t *)&v109);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_18E67D000, v83, (os_log_type_t)v101, "IncrementalViewManager: cleared materialized views for %s in %s.Access assertion: %s", (uint8_t *)v87, 0x20u);
              uint64_t v92 = v100;
              swift_arrayDestroy();
              MEMORY[0x192FB1900](v92, -1, -1);
              MEMORY[0x192FB1900](v87, -1, -1);
              swift_release();

              outlined destroy of MaterializedViewPhysicalPlan((uint64_t)v98);
              uint64_t v54 = (uint64_t)v103;
              return outlined destroy of UUID?(v54, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
            }
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_release_n();

            goto LABEL_25;
          }
          id v64 = BMSQLDatabaseError(v63, v62, 0);
          swift_getErrorValue();
          uint64_t v65 = Error.localizedDescription.getter();
          uint64_t v67 = v66;

          Swift::String v109 = (char *)v65;
          uint64_t v110 = v67;
          strcpy((char *)v108, "BMSQLDatabase");
          HIWORD(v108[1]) = -4864;
          uint64_t v106 = 0x62617461444C5153;
          unint64_t v107 = 0xEB00000000657361;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v68 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v70 = v69;
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
          uint64_t v61 = (void *)swift_allocError();
          *(_OWORD *)uint64_t v71 = xmmword_18EB382F0;
          *(void *)(v71 + 16) = v68;
          *(void *)(v71 + 24) = v70;
          *(unsigned char *)(v71 + 32) = 1;
          swift_willThrow();
        }
        id v72 = (sqlite3 *)*((void *)v43 + 2);
        uint64_t v73 = sqlite3_exec(v72, "rollback", 0, 0, 0);
        if (v73)
        {
          id v74 = BMSQLDatabaseError(v73, v72, 0);
          swift_getErrorValue();
          uint64_t v75 = Error.localizedDescription.getter();
          uint64_t v77 = v76;

          Swift::String v109 = (char *)v75;
          uint64_t v110 = v77;
          strcpy((char *)v108, "BMSQLDatabase");
          HIWORD(v108[1]) = -4864;
          uint64_t v106 = 0x62617461444C5153;
          unint64_t v107 = 0xEB00000000657361;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v78 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v80 = v79;
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
          swift_allocError();
          *(_OWORD *)uint64_t v81 = xmmword_18EB38300;
          *(void *)(v81 + 16) = v78;
          *(void *)(v81 + 24) = v80;
          *(unsigned char *)(v81 + 32) = 1;
          swift_willThrow();

          swift_release();
          outlined destroy of MaterializedViewPhysicalPlan(v40);
          goto LABEL_26;
        }
      }
      swift_willThrow();
      swift_release();
    }
LABEL_25:
    outlined destroy of MaterializedViewPhysicalPlan(v40);
    goto LABEL_26;
  }
  outlined destroy of UUID?(v38, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
  swift_allocError();
  *(void *)uint64_t v39 = v104;
  *(void *)(v39 + 8) = a2;
  *(unsigned char *)(v39 + 16) = 3;
  swift_bridgeObjectRetain();
  swift_willThrow();
LABEL_26:
  uint64_t v54 = (uint64_t)v19;
  return outlined destroy of UUID?(v54, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IncrementalViewManager.clear(database:materializedViewName:)(Swift::OpaquePointer database, Swift::String materializedViewName)
{
  uint64_t object = materializedViewName._object;
  uint64_t countAndFlagsBits = materializedViewName._countAndFlagsBits;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease();
  v5._uint64_t countAndFlagsBits = countAndFlagsBits;
  v5._uint64_t object = object;
  String.append(_:)(v5);
  uint64_t v6 = String.utf8CString.getter();
  uint64_t v7 = sqlite3_exec((sqlite3 *)database._rawValue, (const char *)(v6 + 32), 0, 0, 0);
  swift_release();
  if (v7)
  {
    id v8 = BMSQLDatabaseError(v7, (sqlite3 *)database._rawValue, 0);
    swift_getErrorValue();
    Error.localizedDescription.getter();

    OUTLINED_FUNCTION_1_2();
    OUTLINED_FUNCTION_2();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v9 = OUTLINED_FUNCTION_30_0();
    uint64_t v11 = v10;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    OUTLINED_FUNCTION_39();
    *(void *)uint64_t v12 = 0xD000000000000015;
    *(void *)(v12 + 8) = 0x800000018EBE9410;
    *(void *)(v12 + 16) = v9;
    *(void *)(v12 + 24) = v11;
    *(unsigned char *)(v12 + 32) = 1;
    swift_willThrow();
  }
  else
  {
    swift_bridgeObjectRelease();
    type metadata accessor for QueryPlannerMetadata(0);
    static QueryPlannerMetadata.clearMetadata(materializedViewName:database:)(countAndFlagsBits, (int)object, (sqlite3 *)database._rawValue);
  }
}

uint64_t closure #1 in IncrementalViewManager.clearAndRegenerate(viewName:databaseName:streamIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v8 = v7;
  unint64_t v73 = a7;
  uint64_t v72 = a6;
  uint64_t v79 = a5;
  unint64_t v78 = a4;
  uint64_t v81 = type metadata accessor for MaterializedViewPhysicalPlan(0);
  uint64_t v12 = *(void *)(v81 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v81);
  uint64_t v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v71 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  uint64_t v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v82 = (uint64_t)&v71 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v71 - v21;
  uint64_t v23 = *(void *)(a1 + 16);
  uint64_t v24 = *(void *)(v23 + 16);
  if (v24)
  {
    uint64_t v74 = v7;
    uint64_t v75 = a1;
    uint64_t v76 = v17;
    uint64_t v77 = (char *)&v71 - v21;
    uint64_t v25 = v23 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    uint64_t v26 = *(void *)(v12 + 72);
    uint64_t v80 = v23;
    swift_bridgeObjectRetain_n();
    while (1)
    {
      outlined init with copy of MaterializedViewPhysicalPlan(v25, (uint64_t)v15, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
      MaterializedView.name.getter();
      Swift::String v27 = String.lowercased()();
      swift_bridgeObjectRelease();
      Swift::String v28 = String.lowercased()();
      if (v27._countAndFlagsBits == v28._countAndFlagsBits && v27._object == v28._object) {
        break;
      }
      char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v30) {
        goto LABEL_13;
      }
      outlined destroy of MaterializedViewPhysicalPlan((uint64_t)v15);
      v25 += v26;
      if (!--v24)
      {
        swift_bridgeObjectRelease();
        uint64_t v31 = 1;
        uint64_t v22 = v77;
        uint64_t v17 = v76;
        uint64_t v8 = v74;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v22 = v77;
    uint64_t v17 = v76;
    uint64_t v8 = v74;
    uint64_t v32 = v81;
    swift_bridgeObjectRelease();
    outlined init with take of MaterializedViewPhysicalPlan((uint64_t)v15, (uint64_t)v22, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
    uint64_t v31 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = 1;
LABEL_11:
    uint64_t v32 = v81;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v22, v31, 1, v32);
  swift_bridgeObjectRelease();
  uint64_t v33 = v82;
  outlined init with copy of MaterializedViewPhysicalPlan?((uint64_t)v22, v82, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  if (__swift_getEnumTagSinglePayload(v33, 1, v32) != 1)
  {
    outlined init with take of MaterializedViewPhysicalPlan(v33, (uint64_t)v17, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
    uint64_t v35 = IncrementalViewManager.cachedDatabaseWithAccess(for:)(v78, v79);
    if (!v8)
    {
      unint64_t v36 = (sqlite3 *)*((void *)v35 + 2);
      swift_release();
      uint64_t v37 = sqlite3_exec(v36, "begin", 0, 0, 0);
      if (v37)
      {
        id v38 = BMSQLDatabaseError(v37, v36, 0);
        swift_getErrorValue();
        uint64_t v39 = Error.localizedDescription.getter();
        uint64_t v41 = v40;

        uint64_t v86 = v39;
        uint64_t v87 = v41;
        strcpy((char *)v85, "BMSQLDatabase");
        v85[7] = -4864;
        uint64_t v83 = 0x62617461444C5153;
        unint64_t v84 = 0xEB00000000657361;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v42 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v44 = v43;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
        swift_allocError();
        *(_OWORD *)uint64_t v45 = xmmword_18EB382E0;
        *(void *)(v45 + 16) = v42;
        *(void *)(v45 + 24) = v44;
        *(unsigned char *)(v45 + 32) = 1;
      }
      else
      {
        uint64_t v47 = MaterializedView.name.getter();
        uint64_t v49 = v48;
        v50._uint64_t countAndFlagsBits = v47;
        v50._uint64_t object = v49;
        IncrementalViewManager.clear(database:materializedViewName:)((Swift::OpaquePointer)v36, v50);
        uint64_t v52 = v51;
        if (v51)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_bridgeObjectRelease();
          IncrementalViewManager.update(database:materializedViewPlan:databaseName:)(v36, (uint64_t)v17, v72, v73);
          uint64_t v53 = sqlite3_exec(v36, "commit", 0, 0, 0);
          if (!v53) {
            goto LABEL_20;
          }
          id v54 = BMSQLDatabaseError(v53, v36, 0);
          swift_getErrorValue();
          uint64_t v55 = Error.localizedDescription.getter();
          uint64_t v57 = v56;

          uint64_t v86 = v55;
          uint64_t v87 = v57;
          strcpy((char *)v85, "BMSQLDatabase");
          v85[7] = -4864;
          uint64_t v83 = 0x62617461444C5153;
          unint64_t v84 = 0xEB00000000657361;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v58 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v60 = v59;
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
          uint64_t v52 = (void *)swift_allocError();
          *(_OWORD *)uint64_t v61 = xmmword_18EB382F0;
          *(void *)(v61 + 16) = v58;
          *(void *)(v61 + 24) = v60;
          *(unsigned char *)(v61 + 32) = 1;
          swift_willThrow();
        }
        uint64_t v62 = sqlite3_exec(v36, "rollback", 0, 0, 0);
        if (v62)
        {
          id v63 = BMSQLDatabaseError(v62, v36, 0);
          swift_getErrorValue();
          uint64_t v64 = Error.localizedDescription.getter();
          uint64_t v66 = v65;

          uint64_t v86 = v64;
          uint64_t v87 = v66;
          strcpy((char *)v85, "BMSQLDatabase");
          v85[7] = -4864;
          uint64_t v83 = 0x62617461444C5153;
          unint64_t v84 = 0xEB00000000657361;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v67 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v69 = v68;
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
          swift_allocError();
          *(_OWORD *)uint64_t v70 = xmmword_18EB38300;
          *(void *)(v70 + 16) = v67;
          *(void *)(v70 + 24) = v69;
          *(unsigned char *)(v70 + 32) = 1;
          swift_willThrow();

          outlined destroy of MaterializedViewPhysicalPlan((uint64_t)v17);
          return outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
        }
      }
      swift_willThrow();
    }
LABEL_20:
    outlined destroy of MaterializedViewPhysicalPlan((uint64_t)v17);
    return outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  }
  outlined destroy of UUID?(v33, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
  swift_allocError();
  *(void *)uint64_t v34 = a2;
  *(void *)(v34 + 8) = a3;
  *(unsigned char *)(v34 + 16) = 3;
  swift_bridgeObjectRetain();
  swift_willThrow();
  return outlined destroy of UUID?((uint64_t)v22, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
}

uint64_t IncrementalViewManager.deinit()
{
  swift_bridgeObjectRelease();
  swift_release();
  type metadata accessor for OSSignposter();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_2_4();
  v1();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t IncrementalViewManager.__deallocating_deinit()
{
  IncrementalViewManager.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

unint64_t IncrementalViewManager.UpdateError.description.getter(uint64_t a1, void *a2, char a3)
{
  unint64_t result = 0xD000000000000021;
  switch(a3)
  {
    case 1:
      OUTLINED_FUNCTION_23_0();
      _StringGuts.grow(_:)(48);
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD00000000000002DLL;
      goto LABEL_4;
    case 2:
      OUTLINED_FUNCTION_23_0();
      _StringGuts.grow(_:)(52);
      v7._uint64_t countAndFlagsBits = 0xD000000000000031;
      v7._uint64_t object = (void *)0x800000018EBE9360;
      String.append(_:)(v7);
      goto LABEL_7;
    case 3:
      OUTLINED_FUNCTION_23_0();
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      unint64_t v10 = 0xD000000000000016;
      goto LABEL_7;
    case 4:
      return result;
    default:
      OUTLINED_FUNCTION_23_0();
      _StringGuts.grow(_:)(31);
      swift_bridgeObjectRelease();
      unint64_t v6 = 0xD00000000000001CLL;
LABEL_4:
      unint64_t v10 = v6;
LABEL_7:
      v8._uint64_t countAndFlagsBits = a1;
      v8._uint64_t object = a2;
      String.append(_:)(v8);
      v9._uint64_t countAndFlagsBits = 34;
      v9._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      return v10;
  }
}

unint64_t protocol witness for CustomStringConvertible.description.getter in conformance IncrementalViewManager.UpdateError()
{
  return IncrementalViewManager.UpdateError.description.getter(*(void *)v0, *(void **)(v0 + 8), *(unsigned char *)(v0 + 16));
}

const char *IPCSFeatureFlag.domain.getter()
{
  return "IntelligencePlatform";
}

const char *IPCSFeatureFlag.feature.getter()
{
  return "IPCSMemoryReduction";
}

unint64_t lazy protocol witness table accessor for type IPCSFeatureFlag and conformance IPCSFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type IPCSFeatureFlag and conformance IPCSFeatureFlag;
  if (!lazy protocol witness table cache variable for type IPCSFeatureFlag and conformance IPCSFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IPCSFeatureFlag and conformance IPCSFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IPCSFeatureFlag and conformance IPCSFeatureFlag;
  if (!lazy protocol witness table cache variable for type IPCSFeatureFlag and conformance IPCSFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IPCSFeatureFlag and conformance IPCSFeatureFlag);
  }
  return result;
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4 = *result;
  unsigned char *v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v47 = a3;
  unint64_t v6 = type metadata accessor for SQLDataType();
  Description = (char *)v6[-1].Description;
  MEMORY[0x1F4188790](v6);
  id v46 = (char *)v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (void *)((char *)v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v39[0] = v3;
  v39[1] = a1;
  uint64_t v44 = (char *)v13 + *(int *)(v10 + 48);
  uint64_t v15 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v41 = *(void *)(v11 + 72);
  uint64_t v45 = (void (**)(char *, char *, ValueMetadata *))(Description + 32);
  swift_bridgeObjectRetain();
  uint64_t v42 = Description;
  uint64_t v43 = v6;
  uint64_t v40 = v13;
  while (1)
  {
    outlined init with copy of MaterializedViewPhysicalPlan?(v15, (uint64_t)v13, &demangling cache variable for type metadata for (String, SQLDataType));
    uint64_t v17 = v13[1];
    uint64_t v50 = *v13;
    uint64_t v16 = v50;
    uint64_t v51 = v17;
    uint64_t v18 = *v45;
    (*v45)(v46, v44, v6);
    uint64_t v19 = (void *)*v47;
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
    uint64_t v22 = v19[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v25 = v20;
    if (v19[3] < v24) {
      break;
    }
    if (a2)
    {
      if (v20) {
        goto LABEL_14;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
      _NativeDictionary.copy()();
      if (v25) {
        goto LABEL_14;
      }
    }
LABEL_10:
    Swift::String v28 = v46;
    uint64_t v29 = (void *)*v47;
    *(void *)(*v47 + 8 * (v21 >> 6) + 64) |= 1 << v21;
    char v30 = (uint64_t *)(v29[6] + 16 * v21);
    uint64_t *v30 = v16;
    v30[1] = v17;
    unint64_t v31 = v29[7] + *((void *)v42 + 9) * v21;
    unint64_t v6 = v43;
    v18((char *)v31, v28, v43);
    uint64_t v32 = v29[2];
    BOOL v33 = __OFADD__(v32, 1);
    uint64_t v34 = v32 + 1;
    if (v33) {
      goto LABEL_18;
    }
    v29[2] = v34;
    uint64_t v13 = v40;
    v15 += v41;
    a2 = 1;
    if (!--v14)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, a2 & 1);
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v16, v17);
  if ((v25 & 1) != (v27 & 1)) {
    goto LABEL_19;
  }
  unint64_t v21 = v26;
  if ((v25 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  uint64_t v35 = (void *)swift_allocError();
  swift_willThrow();
  id v52 = v35;
  id v36 = v35;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    (*((void (**)(char *, ValueMetadata *))v42 + 1))(v46, v43);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return;
  }
LABEL_20:
  uint64_t v48 = 0;
  unint64_t v49 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  v37._uint64_t object = (void *)0x800000018EBE9730;
  v37._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v37);
  _print_unlocked<A, B>(_:_:)();
  v38._uint64_t countAndFlagsBits = 39;
  v38._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v38);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void partial apply for closure #1 in IncrementalViewManager.init()(void *a1@<X0>, uint64_t a2@<X8>)
{
  closure #1 in IncrementalViewManager.init()(a1, *(uint64_t **)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), a2);
}

unint64_t lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError()
{
  unint64_t result = lazy protocol witness table cache variable for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError;
  if (!lazy protocol witness table cache variable for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError);
  }
  return result;
}

uint64_t partial apply for closure #1 in IncrementalViewManager.clearAndRegenerate(viewName:databaseName:streamIdentifier:)()
{
  return partial apply for closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(closure #1 in IncrementalViewManager.clearAndRegenerate(viewName:databaseName:streamIdentifier:));
}

uint64_t partial apply for closure #1 in IncrementalViewManager.clear(viewName:databaseName:streamIdentifier:)()
{
  return partial apply for closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(closure #1 in IncrementalViewManager.clear(viewName:databaseName:streamIdentifier:));
}

uint64_t ObjC metadata update function for IncrementalViewManager()
{
  return type metadata accessor for IncrementalViewManager();
}

uint64_t type metadata accessor for IncrementalViewManager()
{
  uint64_t result = type metadata singleton initialization cache for IncrementalViewManager;
  if (!type metadata singleton initialization cache for IncrementalViewManager) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for IncrementalViewManager()
{
  uint64_t result = type metadata accessor for OSSignposter();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t method lookup function for IncrementalViewManager(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for IncrementalViewManager);
}

uint64_t dispatch thunk of IncrementalViewManager.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t outlined copy of IncrementalViewManager.UpdateError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for IncrementalViewManager.UpdateError(uint64_t a1)
{
  return outlined consume of IncrementalViewManager.UpdateError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of IncrementalViewManager.UpdateError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IncrementalViewManager.UpdateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of IncrementalViewManager.UpdateError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for IncrementalViewManager.UpdateError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of IncrementalViewManager.UpdateError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of IncrementalViewManager.UpdateError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for IncrementalViewManager.UpdateError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of IncrementalViewManager.UpdateError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IncrementalViewManager.UpdateError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 4) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IncrementalViewManager.UpdateError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for IncrementalViewManager.UpdateError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 3u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t destructiveInjectEnumTag for IncrementalViewManager.UpdateError(uint64_t result, unsigned int a2)
{
  if (a2 >= 4)
  {
    *(void *)uint64_t result = a2 - 4;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for IncrementalViewManager.UpdateError()
{
  return &type metadata for IncrementalViewManager.UpdateError;
}

unsigned char *storeEnumTagSinglePayload for IPCSFeatureFlag(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x18E7D0000);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for IPCSFeatureFlag()
{
  return &unk_1EDD6CCC0;
}

uint64_t outlined retain of Dataflow(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of Dataflow(uint64_t a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_49_0(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Collection.first.getter(a1, (uint64_t (*)(void))type metadata accessor for Schema, a2);
}

{
  return specialized Collection.first.getter(a1, (uint64_t (*)(void))type metadata accessor for LogicalPlan, a2);
}

uint64_t SQLExpressionEvaluatorError.description.getter()
{
  uint64_t v1 = v0;
  type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_47();
  MEMORY[0x1F4188790](v3);
  type metadata accessor for SQLExpressionEvaluatorError();
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v4);
  unsigned __int8 v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of SQLExpressionEvaluatorError(v1, (uint64_t)v6, (void (*)(void))type metadata accessor for SQLExpressionEvaluatorError);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = (uint64_t *)&v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String))
                               + 48)];
    uint64_t v9 = *v7;
    unsigned __int8 v8 = (void *)v7[1];
    OUTLINED_FUNCTION_33_1();
    v10();
    uint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(48);
    OUTLINED_FUNCTION_35_1();
    String.append(_:)(v11);
    _print_unlocked<A, B>(_:_:)();
    v12._uint64_t countAndFlagsBits = 8238;
    v12._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = v9;
    v13._uint64_t object = v8;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_33_1();
    v15();
    uint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(27);
    OUTLINED_FUNCTION_35_1();
    v16._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v16);
    _print_unlocked<A, B>(_:_:)();
  }
  uint64_t v14 = v20;
  uint64_t v17 = OUTLINED_FUNCTION_26_1();
  v18(v17);
  return v14;
}

void one-time initialization function for SQLITE_TRANSIENT()
{
  SQLITE_TRANSIENT = -1;
}

uint64_t SQLExpressionEvaluator.init(isReadOnly:)(char a1)
{
  uint64_t v2 = v1;
  ppDb[1] = *(sqlite3 **)MEMORY[0x1E4F143B8];
  ppDb[0] = 0;
  if (a1) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  uint64_t v4 = sqlite3_open_v2(":memory:", ppDb, v3, 0);
  uint64_t v5 = ppDb[0];
  if (v4 || !ppDb[0])
  {
    id v14 = OUTLINED_FUNCTION_32_1(v4);
    swift_getErrorValue();
    Error.localizedDescription.getter();

    OUTLINED_FUNCTION_3_8();
    uint64_t v15 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v17 = v16;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    OUTLINED_FUNCTION_39();
    *(void *)uint64_t v18 = v15;
    *(void *)(v18 + 8) = v17;
    *(void *)(v18 + 16) = 0;
    *(void *)(v18 + 24) = 0;
    *(unsigned char *)(v18 + 32) = 0;
    swift_willThrow();
  }
  else
  {
    *(sqlite3 **)(v2 + 24) = ppDb[0];
    *(unsigned char *)(v2 + 16) = 1;
    *(void *)(v2 + 32) = Dictionary.init(dictionaryLiteral:)();
    uint64_t v20 = 0;
    uint64_t v8 = OUTLINED_FUNCTION_23_1(v5, "SELECT NOT ((?) IS NULL OR CAST((?) as NUMERIC) == 0 OR CAST((?) as NUMERIC) == 0.0)", v6, v7, &v20);
    if (!v8 && v20)
    {
      *(void *)(v2 + 40) = v20;
      return v2;
    }
    id v9 = OUTLINED_FUNCTION_32_1(v8);
    swift_getErrorValue();
    Error.localizedDescription.getter();

    OUTLINED_FUNCTION_3_8();
    OUTLINED_FUNCTION_28_1();
    uint64_t v10 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v12 = v11;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    OUTLINED_FUNCTION_39();
    *(void *)uint64_t v13 = 0xD000000000000054;
    *(void *)(v13 + 8) = 0x800000018EBE9940;
    *(void *)(v13 + 16) = v10;
    *(void *)(v13 + 24) = v12;
    *(unsigned char *)(v13 + 32) = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_34_1();
  return v2;
}

uint64_t type metadata accessor for SQLExpressionEvaluatorError()
{
  uint64_t result = type metadata singleton initialization cache for SQLExpressionEvaluatorError;
  if (!type metadata singleton initialization cache for SQLExpressionEvaluatorError) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v7;
  swift_bridgeObjectRelease();
  if ((a2 & 1) == 0) {
    return 0;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v3;
  uint64_t v12 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, OpaquePointer>);
    _NativeDictionary.copy()();
    uint64_t v9 = v12;
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(*(void *)(v9 + 56) + 8 * v6);
  _NativeDictionary._delete(at:)();
  uint64_t *v3 = v9;
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)()
{
  OUTLINED_FUNCTION_12_1();
  uint64_t v3 = v2;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_25_2();
  if ((v2 & 1) == 0) {
    return 0;
  }
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_9_1();
  if ((v4 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], ChangeRecord?>);
    _NativeDictionary.copy()();
    uint64_t v3 = v7;
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(*(void *)(v3 + 56) + 16 * v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ChangeRecord?);
  lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]();
  _NativeDictionary._delete(at:)();
  void *v0 = v3;
  swift_bridgeObjectRelease();
  return v5;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_12_1();
  uint64_t v3 = v2;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_25_2();
  if ((v2 & 1) == 0) {
    return 1;
  }
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_9_1();
  if ((v4 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], [[String : StorableValue]]?>);
    _NativeDictionary.copy()();
    uint64_t v3 = v7;
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(*(void *)(v3 + 56) + 8 * v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : StorableValue]]?);
  lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]();
  OUTLINED_FUNCTION_17_1();
  void *v0 = v3;
  swift_bridgeObjectRelease();
  return v5;
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v7;

  OUTLINED_FUNCTION_12_1();
  uint64_t v3 = v2;
  specialized __RawDictionaryStorage.find<A>(_:)();
  OUTLINED_FUNCTION_25_2();
  if ((v2 & 1) == 0) {
    return 0;
  }
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_9_1();
  if (!v4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], [String : StorableValue]>);
    _NativeDictionary.copy()();
    uint64_t v3 = v7;
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(*(void *)(v3 + 56) + 8 * v1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : StorableValue]);
  lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]();
  OUTLINED_FUNCTION_17_1();
  void *v0 = v3;
  swift_bridgeObjectRelease();
  return v5;
}

unint64_t lazy protocol witness table accessor for type StorableValue and conformance StorableValue()
{
  unint64_t result = lazy protocol witness table cache variable for type StorableValue and conformance StorableValue;
  if (!lazy protocol witness table cache variable for type StorableValue and conformance StorableValue)
  {
    type metadata accessor for StorableValue(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StorableValue and conformance StorableValue);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DatabaseValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of DatabaseValue(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DatabaseValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of DatabaseValue(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of DatabaseValue(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DatabaseValue(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of DatabaseValue(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for DatabaseValue()
{
  return &type metadata for DatabaseValue;
}

uint64_t *initializeBufferWithCopyOfBuffer for SQLExpressionEvaluatorError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    unint64_t v7 = type metadata accessor for SQLExpression();
    (*((void (**)(uint64_t *, uint64_t *, ValueMetadata *))v7[-1].Description + 2))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String))
                  + 48);
      uint64_t v9 = (uint64_t *)((char *)a1 + v8);
      uint64_t v10 = (uint64_t *)((char *)a2 + v8);
      uint64_t v11 = v10[1];
      *uint64_t v9 = *v10;
      v9[1] = v11;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for SQLExpressionEvaluatorError(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  char v3 = type metadata accessor for SQLExpression();
  uint64_t result = (*((uint64_t (**)(uint64_t, ValueMetadata *))v3[-1].Description + 1))(a1, v3);
  if (EnumCaseMultiPayload == 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String));
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for SQLExpressionEvaluatorError(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  int v5 = type metadata accessor for SQLExpression();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v5[-1].Description + 2))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String))
                + 48);
    unint64_t v7 = (void *)(a1 + v6);
    uint64_t v8 = (void *)(a2 + v6);
    uint64_t v9 = v8[1];
    void *v7 = *v8;
    v7[1] = v9;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for SQLExpressionEvaluatorError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s12BiomeStreams13StorableValueOWOhTm_0(a1, (void (*)(void))type metadata accessor for SQLExpressionEvaluatorError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    int v5 = type metadata accessor for SQLExpression();
    (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v5[-1].Description + 2))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String))
                  + 48);
      unint64_t v7 = (void *)(a1 + v6);
      uint64_t v8 = (void *)(a2 + v6);
      void *v7 = *v8;
      v7[1] = v8[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for SQLExpressionEvaluatorError(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  int v5 = type metadata accessor for SQLExpression();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v5[-1].Description + 4))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String));
    *(_OWORD *)(a1 + *(int *)(v6 + 48)) = *(_OWORD *)(a2 + *(int *)(v6 + 48));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for SQLExpressionEvaluatorError(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    _s12BiomeStreams13StorableValueOWOhTm_0(a1, (void (*)(void))type metadata accessor for SQLExpressionEvaluatorError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    int v5 = type metadata accessor for SQLExpression();
    (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v5[-1].Description + 4))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, message: String));
      *(_OWORD *)(a1 + *(int *)(v6 + 48)) = *(_OWORD *)(a2 + *(int *)(v6 + 48));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

ValueMetadata *type metadata completion function for SQLExpressionEvaluatorError()
{
  uint64_t result = type metadata accessor for SQLExpression();
  if (v1 <= 0x3F)
  {
    v2[4] = (char *)result[-1].Description + 64;
    swift_getTupleTypeLayout2();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t one-time initialization function for numeratorKey()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static AVG.numeratorKey = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for denominatorKey()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static AVG.denominatorKey = (__int128)v1;
  return result;
}

void AVG.getCurrentAggregationEvent()()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_0_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_61_0();
  MEMORY[0x1F4188790](v9);
  uint64_t v10 = OUTLINED_FUNCTION_120();
  uint64_t v11 = OUTLINED_FUNCTION_35(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_30_2();
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = OUTLINED_FUNCTION_118();
  if (*(void *)(v1 + *(int *)(type metadata accessor for AVG(v13) + 32)))
  {
    id v14 = *(void (**)(uint64_t))(v7 + 16);
    OUTLINED_FUNCTION_23_2();
    v14(v15);
    OUTLINED_FUNCTION_111();
    if (!v2)
    {
      type metadata accessor for AggregationEvent(0);
      OUTLINED_FUNCTION_23_2();
      v14(v16);
      uint64_t v3 = v4;
LABEL_6:
      _s12BiomeStreams13StorableValueOWObTm_0(v3, v0, (void (*)(void))type metadata accessor for StorableValue);
    }
  }
  else
  {
    uint64_t v17 = OUTLINED_FUNCTION_21_0();
    v5(v17);
    OUTLINED_FUNCTION_112();
    if (!v2)
    {
      uint64_t v18 = OUTLINED_FUNCTION_81_0();
      v5(v18);
      goto LABEL_6;
    }
  }
  OUTLINED_FUNCTION_93_0();
  OUTLINED_FUNCTION_31();
}

void AVG.processEvent(changeRecord:expressionEvaluator:)()
{
  OUTLINED_FUNCTION_58_1();
  uint64_t v11 = OUTLINED_FUNCTION_187(v6, v7, v8, v9, v10);
  uint64_t v12 = OUTLINED_FUNCTION_35(v11);
  MEMORY[0x1F4188790](v12);
  uint64_t v95 = (char *)v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_0_4();
  uint64_t v92 = v14;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_169();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v17 = OUTLINED_FUNCTION_35(v16);
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_62_0();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_206();
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_107();
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v90 - v21;
  uint64_t v23 = type metadata accessor for AggregationEvent(0);
  uint64_t v24 = OUTLINED_FUNCTION_35(v23);
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_139();
  char v25 = v0;
  uint64_t v26 = v98;
  AVG.getCurrentAggregationEvent()();
  if (!v26)
  {
    v90[1] = v1;
    uint64_t v91 = v3;
    uint64_t v27 = v94;
    uint64_t v98 = v2;
    uint64_t v28 = type metadata accessor for AVG(0);
    OUTLINED_FUNCTION_159(v28);
    unint64_t v29 = 0;
    v90[0] = v28;
    _s12BiomeStreams13StorableValueOWOcTm_0((uint64_t)v22, (uint64_t)v4, (void (*)(void))type metadata accessor for StorableValue);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v96 = v22;
    uint64_t v97 = 0;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        goto LABEL_7;
      case 2:
        goto LABEL_11;
      case 3:
        uint64_t v37 = v4[1];
        if (!v37) {
          goto LABEL_73;
        }
        OUTLINED_FUNCTION_83_0();
        MEMORY[0x1F4188790](v38);
        OUTLINED_FUNCTION_9_2();
        if ((v37 & 0x1000000000000000) != 0) {
          goto LABEL_78;
        }
        OUTLINED_FUNCTION_36_2();
        if (!v40) {
          goto LABEL_78;
        }
        MEMORY[0x1F4188790](v39);
        OUTLINED_FUNCTION_60_1();
        *(void *)(v41 - 16) = closure #1 in closure #1 in Double.init<A>(_:)partial apply;
        *(void *)(v41 - 8) = v75;
        if ((v37 & 0x2000000000000000) != 0) {
          goto LABEL_41;
        }
        if ((v76 & 0x1000000000000000) != 0) {
          uint64_t v42 = OUTLINED_FUNCTION_35_2();
        }
        else {
          uint64_t v42 = OUTLINED_FUNCTION_94_0();
        }
        _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v42, v43, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
        OUTLINED_FUNCTION_176();
        goto LABEL_51;
      case 4:
        uint64_t v44 = v4[1];
        if (!v44) {
          goto LABEL_73;
        }
        OUTLINED_FUNCTION_83_0();
        MEMORY[0x1F4188790](v45);
        OUTLINED_FUNCTION_9_2();
        if ((v44 & 0x1000000000000000) != 0 || (OUTLINED_FUNCTION_36_2(), !v47))
        {
          OUTLINED_FUNCTION_121();
          OUTLINED_FUNCTION_175();
          unint64_t v29 = v99;
          goto LABEL_59;
        }
        MEMORY[0x1F4188790](v46);
        OUTLINED_FUNCTION_60_1();
        *(void *)(v51 - 16) = closure #1 in closure #1 in Double.init<A>(_:)partial apply;
        *(void *)(v51 - 8) = v49;
        if ((v44 & 0x2000000000000000) == 0)
        {
          if ((v50 & 0x1000000000000000) != 0) {
            uint64_t v52 = OUTLINED_FUNCTION_35_2();
          }
          else {
            uint64_t v52 = OUTLINED_FUNCTION_94_0();
          }
          _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v52, v53, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
          OUTLINED_FUNCTION_176();
          goto LABEL_59;
        }
        OUTLINED_FUNCTION_33_2(v48, v49, v50);
        if (!v36 & v54 || (OUTLINED_FUNCTION_50_1(), (v78 & 1) == 0))
        {
          if (OUTLINED_FUNCTION_123())
          {
            OUTLINED_FUNCTION_122_0();
            goto LABEL_58;
          }
        }
        goto LABEL_57;
      case 5:
        unint64_t v29 = v4[1];
        OUTLINED_FUNCTION_101();
        if (!v36 & v54) {
          goto LABEL_73;
        }
        uint64_t v5 = *v4;
        outlined copy of Data._Representation(*v4, v29);
        static String.Encoding.utf8.getter();
        String.init(data:encoding:)();
        if (!v55)
        {
          OUTLINED_FUNCTION_56_1();
          OUTLINED_FUNCTION_183();
          double v81 = *v79;
          double v82 = 0.0;
          goto LABEL_71;
        }
        uint64_t v56 = v55;
        char v25 = v90;
        OUTLINED_FUNCTION_83_0();
        MEMORY[0x1F4188790](v57);
        OUTLINED_FUNCTION_9_2();
        if ((v56 & 0x1000000000000000) != 0) {
          goto LABEL_81;
        }
        OUTLINED_FUNCTION_36_2();
        if (!v59) {
          goto LABEL_81;
        }
        MEMORY[0x1F4188790](v58);
        OUTLINED_FUNCTION_165();
        *(void *)(v63 - 16) = closure #1 in closure #1 in Double.init<A>(_:)partial apply;
        *(void *)(v63 - 8) = v61;
        if ((v56 & 0x2000000000000000) != 0) {
          goto LABEL_65;
        }
        if ((v62 & 0x1000000000000000) != 0) {
          uint64_t v64 = OUTLINED_FUNCTION_35_2();
        }
        else {
          uint64_t v64 = OUTLINED_FUNCTION_94_0();
        }
        uint64_t v66 = v97;
        _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v64, v65, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
        uint64_t v97 = v66;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_56_1();
        goto LABEL_70;
      case 6:
        OUTLINED_FUNCTION_27_2(*(int *)(v90[0] + 28), *(double *)((char *)v25 + *(int *)(v90[0] + 28)) + 0.0);
        if (!v73)
        {
          *(void *)((char *)v25 + v67) = v68;
          _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v4, (void (*)(void))type metadata accessor for StorableValue);
          goto LABEL_73;
        }
        __break(1u);
LABEL_78:
        OUTLINED_FUNCTION_121();
        OUTLINED_FUNCTION_175();
        goto LABEL_51;
      case 7:
        goto LABEL_73;
      default:
        if (v4[1]) {
          goto LABEL_73;
        }
        OUTLINED_FUNCTION_27_2(*(int *)(v90[0] + 28), *(double *)((char *)v25 + *(int *)(v90[0] + 28)) + (double)*v4);
        if (!v73) {
          goto LABEL_72;
        }
        __break(1u);
LABEL_7:
        if (v4[1]) {
          goto LABEL_73;
        }
        OUTLINED_FUNCTION_27_2(*(int *)(v90[0] + 28), *(double *)v4 + *(double *)((char *)v25 + *(int *)(v90[0] + 28)));
        if (!v73) {
          goto LABEL_72;
        }
        __break(1u);
LABEL_11:
        uint64_t v33 = v91;
        _s10Foundation4UUIDVSgWObTm_0((uint64_t)v4, v91, (uint64_t *)&demangling cache variable for type metadata for Date?);
        outlined init with copy of Date?(v33, v5, (uint64_t *)&demangling cache variable for type metadata for Date?);
        uint64_t v34 = OUTLINED_FUNCTION_90_0();
        OUTLINED_FUNCTION_10_1(v34, v35, v27);
        if (v36)
        {
          outlined destroy of UUID?(v33, (uint64_t *)&demangling cache variable for type metadata for Date?);
          outlined destroy of UUID?(v5, (uint64_t *)&demangling cache variable for type metadata for Date?);
        }
        else
        {
          OUTLINED_FUNCTION_28();
          v69();
          Date.timeIntervalSince1970.getter();
          double v71 = v70;
          OUTLINED_FUNCTION_14_2();
          v72();
          outlined destroy of UUID?(v33, (uint64_t *)&demangling cache variable for type metadata for Date?);
          OUTLINED_FUNCTION_27_2(*(int *)(v90[0] + 28), v71 + *(double *)((char *)v25 + *(int *)(v90[0] + 28)));
          if (v73)
          {
            __break(1u);
LABEL_41:
            OUTLINED_FUNCTION_33_2(v74, v75, v76);
            if (!v36 & v54 || (OUTLINED_FUNCTION_50_1(), (v77 & 1) == 0))
            {
              if (OUTLINED_FUNCTION_123()) {
                OUTLINED_FUNCTION_122_0();
              }
            }
            swift_bridgeObjectRelease();
LABEL_51:
            double v83 = OUTLINED_FUNCTION_108();
            if (v36) {
              double v83 = v84;
            }
            OUTLINED_FUNCTION_27_2(*(int *)(v90[0] + 28), v83 + *(double *)((char *)v25 + *(int *)(v90[0] + 28)));
            if (v73)
            {
              __break(1u);
LABEL_57:
              unint64_t v29 = 0;
LABEL_58:
              swift_bridgeObjectRelease();
LABEL_59:
              double v85 = OUTLINED_FUNCTION_108();
              if (v36) {
                double v85 = v86;
              }
              OUTLINED_FUNCTION_27_2(*(int *)(v90[0] + 28), v85 + *(double *)((char *)v25 + *(int *)(v90[0] + 28)));
              if (v73)
              {
                __break(1u);
LABEL_65:
                OUTLINED_FUNCTION_33_2(v60, v61, v62);
                if (!v36 & v54 || (OUTLINED_FUNCTION_50_1(), (v87 & 1) == 0))
                {
                  if (OUTLINED_FUNCTION_123()) {
                    OUTLINED_FUNCTION_172();
                  }
                }
                swift_bridgeObjectRelease();
                outlined consume of Data?(v5, v29);
                outlined consume of Data?(v5, v29);
LABEL_70:
                while (1)
                {
                  OUTLINED_FUNCTION_170();
                  OUTLINED_FUNCTION_183();
                  double v82 = *v79;
LABEL_71:
                  *uint64_t v79 = v81 + v82;
                  uint64_t v31 = *(int *)(v80 + 32);
                  uint64_t v88 = *(void *)((char *)v25 + v31);
                  BOOL v73 = __OFADD__(v88, 1);
                  uint64_t v32 = v88 + 1;
                  if (!v73) {
                    break;
                  }
                  __break(1u);
LABEL_81:
                  OUTLINED_FUNCTION_121();
                  OUTLINED_FUNCTION_175();
                  OUTLINED_FUNCTION_181();
                }
              }
            }
          }
LABEL_72:
          *(void *)((char *)v25 + v31) = v32;
        }
LABEL_73:
        uint64_t v89 = v97;
        AVG.getCurrentAggregationEvent()();
        _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v96, (void (*)(void))type metadata accessor for StorableValue);
        if (v89) {
          _s12BiomeStreams13StorableValueOWOhTm_1(v98, (void (*)(void))type metadata accessor for AggregationEvent);
        }
        else {
          _s12BiomeStreams13StorableValueOWObTm_0(v98, v93, (void (*)(void))type metadata accessor for AggregationEvent);
        }
        break;
    }
  }
  OUTLINED_FUNCTION_93_0();
  OUTLINED_FUNCTION_59_1();
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance AVG()
{
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance AVG()
{
  return AVG.aggregationMetadata()();
}

uint64_t AVG.aggregationMetadata()()
{
  OUTLINED_FUNCTION_38_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  OUTLINED_FUNCTION_11_1();
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_18EB382C0;
  unint64_t v8 = v7 + v6;
  if (one-time initialization token for numeratorKey != -1) {
    swift_once();
  }
  uint64_t v9 = OUTLINED_FUNCTION_160(&static AVG.numeratorKey);
  uint64_t v10 = type metadata accessor for AVG(v9);
  OUTLINED_FUNCTION_66_0(v10);
  OUTLINED_FUNCTION_198();
  uint64_t v11 = *(int *)(v2 + 48);
  uint64_t v12 = one-time initialization token for denominatorKey;
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  uint64_t v13 = (void *)(v8 + v4);
  uint64_t v14 = v8 + v4 + v11;
  uint64_t v15 = *((void *)&static AVG.denominatorKey + 1);
  *uint64_t v13 = static AVG.denominatorKey;
  v13[1] = v15;
  *(void *)uint64_t v14 = *(void *)(v0 + *(int *)(v1 + 32));
  *(unsigned char *)(v14 + 8) = 0;
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_34();
  return Dictionary.init(dictionaryLiteral:)();
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance AVG(Swift::OpaquePointer a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AVG.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  OUTLINED_FUNCTION_58_1();
  OUTLINED_FUNCTION_69_0();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v7 = OUTLINED_FUNCTION_35(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_29_1();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_119();
  if (!v9)
  {
    uint64_t v4 = type metadata accessor for AVG(0);
    uint64_t v13 = 0;
    *(void *)(v1 + *(int *)(v4 + 28)) = 0;
    goto LABEL_13;
  }
  if (one-time initialization token for numeratorKey != -1)
  {
    swift_once();
    if (!*(void *)(v2 + 16)) {
      goto LABEL_21;
    }
  }
  OUTLINED_FUNCTION_128();
  OUTLINED_FUNCTION_130();
  OUTLINED_FUNCTION_127();
  if ((v5 & 1) == 0) {
    goto LABEL_21;
  }
  if (one-time initialization token for denominatorKey != -1) {
    swift_once();
  }
  if (!*(void *)(v2 + 16)) {
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_130();
  OUTLINED_FUNCTION_127();
  if ((v5 & 1) == 0) {
    goto LABEL_21;
  }
  OUTLINED_FUNCTION_128();
  OUTLINED_FUNCTION_110();
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_10_1(v4, 1, v10);
  if (v11)
  {
    uint64_t v12 = v4;
LABEL_11:
    outlined destroy of UUID?(v12, &demangling cache variable for type metadata for StorableValue?);
    goto LABEL_21;
  }
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v16 = v4;
LABEL_20:
    _s12BiomeStreams13StorableValueOWOhTm_1(v16, (void (*)(void))type metadata accessor for StorableValue);
    goto LABEL_21;
  }
  if (*(unsigned char *)(v4 + 8))
  {
LABEL_21:
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v17 = OUTLINED_FUNCTION_39();
    OUTLINED_FUNCTION_17_2(v17, v18);
    swift_bridgeObjectRetain();
    swift_willThrow();
    goto LABEL_22;
  }
  uint64_t v15 = type metadata accessor for AVG(0);
  OUTLINED_FUNCTION_153(v15);
  OUTLINED_FUNCTION_106_0();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_1(v3, 1, v10);
  if (v11)
  {
    uint64_t v12 = v3;
    goto LABEL_11;
  }
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v16 = v3;
    goto LABEL_20;
  }
  if (*(unsigned char *)(v3 + 8) == 1) {
    goto LABEL_21;
  }
  uint64_t v13 = *(void *)v3;
LABEL_13:
  *(void *)(v1 + *(int *)(v4 + 32)) = v13;
LABEL_22:
  OUTLINED_FUNCTION_59_1();
}

uint64_t one-time initialization function for countKey()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static COUNT.countKey = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static COUNT_STAR.countKey = (__int128)v1;
  return result;
}

void COUNT.getCurrentAggregationEvent()()
{
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_0_4();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  uint64_t v4 = OUTLINED_FUNCTION_64_0();
  uint64_t v5 = OUTLINED_FUNCTION_35(v4);
  MEMORY[0x1F4188790](v5);
  uint64_t v6 = OUTLINED_FUNCTION_63_0();
  type metadata accessor for COUNT(v6);
  uint64_t v7 = *(void (**)(void))(v2 + 16);
  OUTLINED_FUNCTION_16_1();
  v7();
  OUTLINED_FUNCTION_105();
  if (!v0)
  {
    type metadata accessor for AggregationEvent(0);
    OUTLINED_FUNCTION_16_1();
    uint64_t v8 = ((uint64_t (*)(void))v7)();
    OUTLINED_FUNCTION_182(v8, v9, (void (*)(void))type metadata accessor for StorableValue);
  }
  OUTLINED_FUNCTION_132();
}

void COUNT.processEvent(changeRecord:expressionEvaluator:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v42 = v6;
  uint64_t v43 = v7;
  uint64_t v41 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = OUTLINED_FUNCTION_35(v9);
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_69();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v12 = OUTLINED_FUNCTION_35(v11);
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_138();
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (uint64_t *)((char *)&v40 - v15);
  uint64_t v17 = type metadata accessor for AggregationEvent(0);
  uint64_t v18 = OUTLINED_FUNCTION_35(v17);
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_68();
  COUNT.getCurrentAggregationEvent()();
  if (!v1)
  {
    uint64_t v40 = v3;
    uint64_t v19 = v0 + *(int *)(type metadata accessor for COUNT(0) + 20);
    SQLExpressionEvaluator.execute(expression:payload:)(v19, v43, v16);
    uint64_t v20 = OUTLINED_FUNCTION_151();
    _s12BiomeStreams13StorableValueOWOcTm_0(v20, v21, v22);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        goto LABEL_7;
      case 2u:
        goto LABEL_11;
      case 3u:
        if (!v2[1]) {
          break;
        }
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_44_1();
        if (!v25) {
          goto LABEL_25;
        }
        __break(1u);
LABEL_19:
        if (!v2[1]) {
          break;
        }
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_44_1();
        if (!v25) {
          goto LABEL_25;
        }
        __break(1u);
LABEL_23:
        unint64_t v34 = v2[1];
        if (v34 >> 60 == 15) {
          break;
        }
        outlined consume of Data?(*v2, v34);
        OUTLINED_FUNCTION_44_1();
        if (v25) {
          goto LABEL_34;
        }
LABEL_25:
        *(void *)(v0 + v23) = v24;
        break;
      case 4u:
        goto LABEL_19;
      case 5u:
        goto LABEL_23;
      case 6u:
        _s10Foundation4UUIDVSgWObTm_0((uint64_t)v2, v4, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        type metadata accessor for UUID();
        uint64_t v35 = OUTLINED_FUNCTION_192();
        OUTLINED_FUNCTION_10_1(v35, v36, v37);
        if (v29) {
          goto LABEL_29;
        }
        OUTLINED_FUNCTION_44_1();
        if (v25) {
          goto LABEL_35;
        }
        *(void *)(v0 + v38) = v39;
LABEL_29:
        uint64_t v32 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
        uint64_t v33 = v4;
        goto LABEL_30;
      case 7u:
        break;
      default:
        if (v2[1]) {
          break;
        }
        OUTLINED_FUNCTION_44_1();
        if (!v25) {
          goto LABEL_25;
        }
        __break(1u);
LABEL_7:
        if (v2[1]) {
          break;
        }
        OUTLINED_FUNCTION_44_1();
        if (!v25) {
          goto LABEL_25;
        }
        __break(1u);
LABEL_11:
        _s10Foundation4UUIDVSgWObTm_0((uint64_t)v2, v5, (uint64_t *)&demangling cache variable for type metadata for Date?);
        type metadata accessor for Date();
        uint64_t v26 = OUTLINED_FUNCTION_90_0();
        OUTLINED_FUNCTION_10_1(v26, v27, v28);
        if (v29) {
          goto LABEL_14;
        }
        OUTLINED_FUNCTION_44_1();
        if (v25)
        {
          __break(1u);
LABEL_34:
          __break(1u);
LABEL_35:
          __break(1u);
          JUMPOUT(0x18E7D268CLL);
        }
        *(void *)(v0 + v30) = v31;
LABEL_14:
        uint64_t v32 = (uint64_t *)&demangling cache variable for type metadata for Date?;
        uint64_t v33 = v5;
LABEL_30:
        outlined destroy of UUID?(v33, v32);
        break;
    }
    COUNT.getCurrentAggregationEvent()();
    _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v16, (void (*)(void))type metadata accessor for StorableValue);
    _s12BiomeStreams13StorableValueOWObTm_0(v40, v41, (void (*)(void))type metadata accessor for AggregationEvent);
  }
  OUTLINED_FUNCTION_31();
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance COUNT()
{
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance COUNT()
{
  return COUNT.aggregationMetadata()();
}

uint64_t COUNT.aggregationMetadata()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  OUTLINED_FUNCTION_12_2();
  uint64_t v0 = (__n128 *)OUTLINED_FUNCTION_26_2();
  OUTLINED_FUNCTION_203(v0, (__n128)xmmword_18EB382D0);
  if (one-time initialization token for countKey != -1) {
    swift_once();
  }
  uint64_t v1 = OUTLINED_FUNCTION_42_0(&static COUNT.countKey);
  uint64_t v2 = type metadata accessor for COUNT(v1);
  OUTLINED_FUNCTION_115(*(int *)(v2 + 28));
  OUTLINED_FUNCTION_188();
  swift_bridgeObjectRetain();

  return Dictionary.init(dictionaryLiteral:)();
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance COUNT(Swift::OpaquePointer a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> COUNT.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  OUTLINED_FUNCTION_69_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v6 = OUTLINED_FUNCTION_35(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_31_1();
  if (v7)
  {
    if (one-time initialization token for countKey != -1)
    {
      swift_once();
      if (!*(void *)(v2 + 16)) {
        goto LABEL_12;
      }
    }
    OUTLINED_FUNCTION_89_0();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_174();
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    OUTLINED_FUNCTION_89_0();
    OUTLINED_FUNCTION_74_0();
    swift_bridgeObjectRelease();
    uint64_t v8 = type metadata accessor for StorableValue(0);
    OUTLINED_FUNCTION_10_1(v3, 1, v8);
    if (v9)
    {
      outlined destroy of UUID?(v3, &demangling cache variable for type metadata for StorableValue?);
LABEL_12:
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v13 = OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_17_2(v13, v14);
      swift_bridgeObjectRetain();
      swift_willThrow();
      goto LABEL_13;
    }
    if (swift_getEnumCaseMultiPayload())
    {
      _s12BiomeStreams13StorableValueOWOhTm_1(v3, (void (*)(void))type metadata accessor for StorableValue);
      goto LABEL_12;
    }
    if (*(unsigned char *)(v3 + 8) == 1) {
      goto LABEL_12;
    }
    uint64_t v11 = *(void *)v3;
    uint64_t v10 = type metadata accessor for COUNT(0);
  }
  else
  {
    uint64_t v10 = type metadata accessor for COUNT(0);
    uint64_t v11 = 0;
  }
  *(void *)(v1 + *(int *)(v10 + 28)) = v11;
LABEL_13:
  OUTLINED_FUNCTION_132();
}

uint64_t one-time initialization function for sumKey()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static SUM_INT.sumKey = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static SUM_NON_INT.sumKey = (__int128)v1;
  return result;
}

uint64_t one-time initialization function for isNonNullEventSeenKey()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static SUM_INT.isNonNullEventSeenKey = (__int128)v1;
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static SUM_NON_INT.isNonNullEventSeenKey = (__int128)v1;
  return result;
}

void SUM_INT.getCurrentAggregationEvent()()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_0_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_61_0();
  MEMORY[0x1F4188790](v9);
  uint64_t v10 = OUTLINED_FUNCTION_120();
  uint64_t v11 = OUTLINED_FUNCTION_35(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_30_2();
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = OUTLINED_FUNCTION_118();
  if (*(unsigned char *)(v1 + *(int *)(type metadata accessor for SUM_INT(v13) + 32)))
  {
    uint64_t v14 = *(void (**)(uint64_t))(v7 + 16);
    OUTLINED_FUNCTION_23_2();
    v14(v15);
    OUTLINED_FUNCTION_111();
    if (!v2)
    {
      type metadata accessor for AggregationEvent(0);
      OUTLINED_FUNCTION_23_2();
      v14(v16);
      uint64_t v3 = v4;
LABEL_6:
      _s12BiomeStreams13StorableValueOWObTm_0(v3, v0, (void (*)(void))type metadata accessor for StorableValue);
    }
  }
  else
  {
    uint64_t v17 = OUTLINED_FUNCTION_21_0();
    v5(v17);
    OUTLINED_FUNCTION_112();
    if (!v2)
    {
      uint64_t v18 = OUTLINED_FUNCTION_81_0();
      v5(v18);
      goto LABEL_6;
    }
  }
  OUTLINED_FUNCTION_93_0();
  OUTLINED_FUNCTION_31();
}

void SUM_INT.processEvent(changeRecord:expressionEvaluator:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v3 = v0;
  uint64_t v29 = v4;
  uint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_30_2();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (uint64_t *)((char *)&v28 - v10);
  uint64_t v12 = type metadata accessor for AggregationEvent(0);
  uint64_t v13 = OUTLINED_FUNCTION_35(v12);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  SUM_INT.getCurrentAggregationEvent()();
  if (v1) {
    goto LABEL_4;
  }
  uint64_t v28 = v2;
  uint64_t v16 = type metadata accessor for SUM_INT(0);
  SQLExpressionEvaluator.execute(expression:payload:)(v0 + *(int *)(v16 + 20), v29, v11);
  uint64_t v17 = v16;
  uint64_t v18 = v28;
  _s12BiomeStreams13StorableValueOWOcTm_0((uint64_t)v11, v28, (void (*)(void))type metadata accessor for StorableValue);
  if (swift_getEnumCaseMultiPayload())
  {
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    OUTLINED_FUNCTION_39();
    uint64_t v20 = v19;
    v19[3] = v7;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v19);
    _s12BiomeStreams13StorableValueOWOcTm_0((uint64_t)v11, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for StorableValue);
    *((_OWORD *)v20 + 2) = 0u;
    *((_OWORD *)v20 + 3) = 0u;
    *((unsigned char *)v20 + 64) = 3;
    swift_willThrow();
    _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v11, (void (*)(void))type metadata accessor for StorableValue);
    _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v15, (void (*)(void))type metadata accessor for AggregationEvent);
    _s12BiomeStreams13StorableValueOWOhTm_1(v18, (void (*)(void))type metadata accessor for StorableValue);
LABEL_4:
    OUTLINED_FUNCTION_31();
    return;
  }
  if (*(unsigned char *)(v18 + 8))
  {
LABEL_10:
    SUM_INT.getCurrentAggregationEvent()();
    _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v11, (void (*)(void))type metadata accessor for StorableValue);
    _s12BiomeStreams13StorableValueOWObTm_0((uint64_t)v15, v6, (void (*)(void))type metadata accessor for AggregationEvent);
    goto LABEL_4;
  }
  uint64_t v22 = *(void *)v18;
  uint64_t v23 = *(int *)(v17 + 32);
  if ((*(unsigned char *)(v3 + v23) & 1) == 0) {
    *(unsigned char *)(v3 + v23) = 1;
  }
  uint64_t v24 = *(int *)(v17 + 28);
  uint64_t v25 = *(void *)(v3 + v24);
  BOOL v26 = __OFADD__(v25, v22);
  uint64_t v27 = v25 + v22;
  if (!v26)
  {
    *(void *)(v3 + v24) = v27;
    goto LABEL_10;
  }
  __break(1u);
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance SUM_INT()
{
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance SUM_INT()
{
  return SUM_INT.aggregationMetadata()();
}

uint64_t SUM_INT.aggregationMetadata()()
{
  OUTLINED_FUNCTION_38_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  OUTLINED_FUNCTION_11_1();
  uint64_t v0 = (__n128 *)OUTLINED_FUNCTION_134();
  OUTLINED_FUNCTION_202(v0, (__n128)xmmword_18EB382C0);
  if (one-time initialization token for sumKey != -1) {
    swift_once();
  }
  uint64_t v1 = OUTLINED_FUNCTION_160(&static SUM_INT.sumKey);
  uint64_t v2 = type metadata accessor for SUM_INT(v1);
  OUTLINED_FUNCTION_66_0(v2);
  swift_storeEnumTagMultiPayload();
  uint64_t v3 = one-time initialization token for isNonNullEventSeenKey;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_67_0(&static SUM_INT.isNonNullEventSeenKey);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_34();
  return Dictionary.init(dictionaryLiteral:)();
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance SUM_INT(Swift::OpaquePointer a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SUM_INT.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_69_0();
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v7 = OUTLINED_FUNCTION_35(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_29_1();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_119();
  if (v9)
  {
    if (one-time initialization token for sumKey != -1)
    {
      swift_once();
      if (!*(void *)(v2 + 16)) {
        goto LABEL_17;
      }
    }
    OUTLINED_FUNCTION_128();
    OUTLINED_FUNCTION_130();
    OUTLINED_FUNCTION_127();
    if ((v5 & 1) == 0) {
      goto LABEL_17;
    }
    if (one-time initialization token for isNonNullEventSeenKey != -1) {
      swift_once();
    }
    if (!*(void *)(v2 + 16)) {
      goto LABEL_17;
    }
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_130();
    OUTLINED_FUNCTION_127();
    if ((v5 & 1) == 0) {
      goto LABEL_17;
    }
    OUTLINED_FUNCTION_128();
    OUTLINED_FUNCTION_110();
    swift_bridgeObjectRelease();
    uint64_t v10 = type metadata accessor for StorableValue(0);
    OUTLINED_FUNCTION_10_1(v4, 1, v10);
    if (v11)
    {
      uint64_t v12 = v4;
    }
    else
    {
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v15 = v4;
LABEL_15:
        _s12BiomeStreams13StorableValueOWOhTm_1(v15, (void (*)(void))type metadata accessor for StorableValue);
        goto LABEL_17;
      }
      if (*(unsigned char *)(v4 + 8) == 1) {
        goto LABEL_17;
      }
      uint64_t v18 = *(void *)v4;
      *(void *)(v1 + *(int *)(type metadata accessor for SUM_INT(0) + 28)) = v18;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_106_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_10_1(v3, 1, v10);
      if (!v11)
      {
        if (!swift_getEnumCaseMultiPayload())
        {
          if ((*(unsigned char *)(v3 + 8) & 1) == 0 && *(void *)v3 < 2uLL)
          {
            OUTLINED_FUNCTION_207(*(void *)v3);
            goto LABEL_18;
          }
          goto LABEL_17;
        }
        uint64_t v15 = v3;
        goto LABEL_15;
      }
      uint64_t v12 = v3;
    }
    outlined destroy of UUID?(v12, &demangling cache variable for type metadata for StorableValue?);
LABEL_17:
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v16 = OUTLINED_FUNCTION_39();
    OUTLINED_FUNCTION_17_2(v16, v17);
    swift_bridgeObjectRetain();
    swift_willThrow();
    goto LABEL_18;
  }
  uint64_t v13 = type metadata accessor for SUM_INT(0);
  OUTLINED_FUNCTION_200(v13);
LABEL_18:
  OUTLINED_FUNCTION_31();
}

void SUM_NON_INT.getCurrentAggregationEvent()()
{
  OUTLINED_FUNCTION_37();
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_0_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_61_0();
  MEMORY[0x1F4188790](v9);
  uint64_t v10 = OUTLINED_FUNCTION_120();
  uint64_t v11 = OUTLINED_FUNCTION_35(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_30_2();
  MEMORY[0x1F4188790](v12);
  uint64_t v13 = OUTLINED_FUNCTION_118();
  if (*(unsigned char *)(v1 + *(int *)(type metadata accessor for SUM_NON_INT(v13) + 32)))
  {
    uint64_t v14 = *(void (**)(uint64_t))(v7 + 16);
    OUTLINED_FUNCTION_23_2();
    v14(v15);
    OUTLINED_FUNCTION_111();
    if (!v2)
    {
      type metadata accessor for AggregationEvent(0);
      OUTLINED_FUNCTION_23_2();
      v14(v16);
      uint64_t v3 = v4;
LABEL_6:
      _s12BiomeStreams13StorableValueOWObTm_0(v3, v0, (void (*)(void))type metadata accessor for StorableValue);
    }
  }
  else
  {
    uint64_t v17 = OUTLINED_FUNCTION_21_0();
    v5(v17);
    OUTLINED_FUNCTION_112();
    if (!v2)
    {
      uint64_t v18 = OUTLINED_FUNCTION_81_0();
      v5(v18);
      goto LABEL_6;
    }
  }
  OUTLINED_FUNCTION_93_0();
  OUTLINED_FUNCTION_31();
}

void SUM_NON_INT.processEvent(changeRecord:expressionEvaluator:)()
{
  OUTLINED_FUNCTION_58_1();
  uint64_t v114 = v5;
  uint64_t v115 = v1;
  uint64_t v113 = v6;
  uint64_t v110 = v7;
  uint64_t v108 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = OUTLINED_FUNCTION_35(v9);
  MEMORY[0x1F4188790](v10);
  Swift::String v112 = (char *)v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.Encoding();
  uint64_t v13 = OUTLINED_FUNCTION_35(v12);
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_10();
  uint64_t v109 = v14;
  uint64_t v111 = OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_0_4();
  uint64_t v107 = v15;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_67();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v21 = OUTLINED_FUNCTION_35(v20);
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_62_0();
  MEMORY[0x1F4188790](v22);
  uint64_t v23 = OUTLINED_FUNCTION_205();
  type metadata accessor for StorableValue(v23);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_107();
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (void *)((char *)v104 - v26);
  uint64_t v28 = type metadata accessor for AggregationEvent(0);
  uint64_t v29 = OUTLINED_FUNCTION_35(v28);
  MEMORY[0x1F4188790](v29);
  OUTLINED_FUNCTION_67();
  uint64_t v32 = v31 - v30;
  uint64_t v33 = v115;
  SUM_NON_INT.getCurrentAggregationEvent()();
  if (!v33)
  {
    uint64_t v115 = v3;
    uint64_t v105 = v4;
    uint64_t v106 = v2;
    v104[1] = v19;
    uint64_t v34 = v111;
    uint64_t v35 = (uint64_t)v112;
    uint64_t v36 = type metadata accessor for SUM_NON_INT(0);
    SQLExpressionEvaluator.execute(expression:payload:)(v0 + *(int *)(v36 + 20), v113, v27);
    uint64_t v113 = (uint64_t)v27;
    uint64_t v114 = 0;
    uint64_t v37 = v0;
    uint64_t v38 = v115;
    _s12BiomeStreams13StorableValueOWOcTm_0((uint64_t)v27, v115, (void (*)(void))type metadata accessor for StorableValue);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        if ((*(unsigned char *)(v38 + 8) & 1) == 0)
        {
          OUTLINED_FUNCTION_133();
          if ((v44 & 1) == 0) {
            OUTLINED_FUNCTION_161(v42);
          }
          *(double *)(v0 + *(int *)(v36 + 28)) = v43 + *(double *)(v0 + *(int *)(v36 + 28));
        }
        goto LABEL_58;
      case 2u:
        uint64_t v45 = v106;
        _s10Foundation4UUIDVSgWObTm_0(v38, v106, (uint64_t *)&demangling cache variable for type metadata for Date?);
        uint64_t v46 = v105;
        outlined init with copy of Date?(v45, v105, (uint64_t *)&demangling cache variable for type metadata for Date?);
        OUTLINED_FUNCTION_10_1(v46, 1, v34);
        if (v47)
        {
          outlined destroy of UUID?(v45, (uint64_t *)&demangling cache variable for type metadata for Date?);
          outlined destroy of UUID?(v46, (uint64_t *)&demangling cache variable for type metadata for Date?);
        }
        else
        {
          OUTLINED_FUNCTION_28();
          v89();
          OUTLINED_FUNCTION_133();
          if ((v91 & 1) == 0) {
            OUTLINED_FUNCTION_161(v90);
          }
          Date.timeIntervalSince1970.getter();
          double v93 = v92;
          OUTLINED_FUNCTION_95();
          v94();
          outlined destroy of UUID?(v45, (uint64_t *)&demangling cache variable for type metadata for Date?);
          uint64_t v95 = *(int *)(v36 + 28);
          double v96 = v93 + *(double *)(v0 + v95);
LABEL_57:
          *(double *)(v0 + v95) = v96;
        }
LABEL_58:
        uint64_t v99 = v114;
        SUM_NON_INT.getCurrentAggregationEvent()();
        _s12BiomeStreams13StorableValueOWOhTm_1(v113, (void (*)(void))type metadata accessor for StorableValue);
        if (v99) {
LABEL_59:
        }
          _s12BiomeStreams13StorableValueOWOhTm_1(v32, (void (*)(void))type metadata accessor for AggregationEvent);
        else {
          _s12BiomeStreams13StorableValueOWObTm_0(v32, v108, (void (*)(void))type metadata accessor for AggregationEvent);
        }
        break;
      case 3u:
        uint64_t v48 = *(void *)(v38 + 8);
        if (!v48) {
          goto LABEL_58;
        }
        OUTLINED_FUNCTION_133();
        if ((v50 & 1) == 0) {
          OUTLINED_FUNCTION_161(v49);
        }
        OUTLINED_FUNCTION_83_0();
        MEMORY[0x1F4188790](v51);
        OUTLINED_FUNCTION_9_2();
        if ((v48 & 0x1000000000000000) != 0) {
          goto LABEL_72;
        }
        OUTLINED_FUNCTION_36_2();
        if (!v52) {
          goto LABEL_72;
        }
        OUTLINED_FUNCTION_196();
        MEMORY[0x1F4188790](v53);
        OUTLINED_FUNCTION_60_1();
        *(void *)(v57 - 16) = closure #1 in closure #1 in Double.init<A>(_:)partial apply;
        *(void *)(v57 - 8) = v55;
        if ((v48 & 0x2000000000000000) != 0) {
          goto LABEL_43;
        }
        if ((v56 & 0x1000000000000000) != 0) {
          goto LABEL_27;
        }
        goto LABEL_74;
      case 4u:
        uint64_t v58 = *(void *)(v38 + 8);
        if (!v58) {
          goto LABEL_58;
        }
        OUTLINED_FUNCTION_133();
        if ((v60 & 1) == 0) {
          OUTLINED_FUNCTION_161(v59);
        }
        OUTLINED_FUNCTION_83_0();
        MEMORY[0x1F4188790](v61);
        OUTLINED_FUNCTION_9_2();
        if ((v58 & 0x1000000000000000) != 0 || (OUTLINED_FUNCTION_36_2(), !v62))
        {
LABEL_72:
          OUTLINED_FUNCTION_121();
          OUTLINED_FUNCTION_175();
        }
        else
        {
          OUTLINED_FUNCTION_196();
          MEMORY[0x1F4188790](v63);
          OUTLINED_FUNCTION_60_1();
          *(void *)(v64 - 16) = closure #1 in closure #1 in Double.init<A>(_:)partial apply;
          *(void *)(v64 - 8) = v55;
          if ((v58 & 0x2000000000000000) != 0)
          {
LABEL_43:
            OUTLINED_FUNCTION_33_2(v54, v55, v56);
            if (!v47 & v69 || (OUTLINED_FUNCTION_50_1(), (v87 & 1) == 0))
            {
              if (OUTLINED_FUNCTION_123()) {
                OUTLINED_FUNCTION_122_0();
              }
            }
            swift_bridgeObjectRelease();
          }
          else
          {
            if ((v56 & 0x1000000000000000) != 0) {
LABEL_27:
            }
              uint64_t v65 = OUTLINED_FUNCTION_35_2();
            else {
LABEL_74:
            }
              uint64_t v65 = OUTLINED_FUNCTION_94_0();
            uint64_t v67 = v114;
            _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v65, v66, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
            uint64_t v114 = v67;
            swift_bridgeObjectRelease();
          }
        }
        double v97 = OUTLINED_FUNCTION_108();
        if (v47) {
          double v97 = v98;
        }
        uint64_t v95 = *(int *)(v36 + 28);
        double v96 = v97 + *(double *)(v0 + v95);
        goto LABEL_57;
      case 5u:
        unint64_t v68 = *(void *)(v38 + 8);
        OUTLINED_FUNCTION_101();
        if (!(!v47 & v69))
        {
          uint64_t v70 = *(void *)v38;
          OUTLINED_FUNCTION_133();
          if ((v72 & 1) == 0) {
            *(unsigned char *)(v37 + v71) = 1;
          }
          outlined copy of Data._Representation(v70, v68);
          static String.Encoding.utf8.getter();
          String.init(data:encoding:)();
          if (v73)
          {
            uint64_t v74 = v73;
            OUTLINED_FUNCTION_83_0();
            MEMORY[0x1F4188790](v75);
            OUTLINED_FUNCTION_9_2();
            if ((v74 & 0x1000000000000000) != 0 || !(v74 & 0x2000000000000000 | v77 & 0x1000000000000000))
            {
              uint64_t v103 = v114;
              _StringGuts._slowWithCString<A>(_:)();
              uint64_t v114 = v103;
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_57_1();
            }
            else
            {
              MEMORY[0x1F4188790](v76);
              OUTLINED_FUNCTION_165();
              *(void *)(v80 - 16) = closure #1 in closure #1 in Double.init<A>(_:)partial apply;
              *(void *)(v80 - 8) = v79;
              if ((v74 & 0x2000000000000000) != 0)
              {
                uint64_t v116 = v78;
                uint64_t v117 = v74 & 0xFFFFFFFFFFFFFFLL;
                if (v78 > 0x20u || (OUTLINED_FUNCTION_50_1(), (v100 & 1) == 0))
                {
                  if (OUTLINED_FUNCTION_123()) {
                    OUTLINED_FUNCTION_172();
                  }
                }
                swift_bridgeObjectRelease();
                OUTLINED_FUNCTION_57_1();
              }
              else
              {
                if ((v78 & 0x1000000000000000) != 0)
                {
                  uint64_t v81 = (v74 & 0xFFFFFFFFFFFFFFFLL) + 32;
                  uint64_t v82 = v78 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  uint64_t v81 = _StringObject.sharedUTF8.getter();
                }
                uint64_t v83 = v114;
                _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v81, v82, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
                uint64_t v114 = v83;
                swift_bridgeObjectRelease();
                OUTLINED_FUNCTION_57_1();
              }
            }
            double v101 = OUTLINED_FUNCTION_170();
            if (v47) {
              double v101 = v102;
            }
            *(double *)(v37 + *(int *)(v36 + 28)) = v101 + *(double *)(v37 + *(int *)(v36 + 28));
          }
          else
          {
            OUTLINED_FUNCTION_57_1();
          }
        }
        goto LABEL_58;
      case 6u:
        _s10Foundation4UUIDVSgWObTm_0(v38, v35, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v84 = type metadata accessor for UUID();
        OUTLINED_FUNCTION_10_1(v35, 1, v84);
        if (!v47)
        {
          OUTLINED_FUNCTION_133();
          if ((v86 & 1) == 0) {
            OUTLINED_FUNCTION_161(v85);
          }
        }
        *(double *)(v0 + *(int *)(v36 + 28)) = *(double *)(v0 + *(int *)(v36 + 28)) + 0.0;
        outlined destroy of UUID?(v35, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        goto LABEL_58;
      case 7u:
        goto LABEL_58;
      default:
        uint64_t v39 = *(void *)v38;
        char v40 = *(unsigned char *)(v38 + 8);
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        OUTLINED_FUNCTION_39();
        if (v40)
        {
          *(_OWORD *)uint64_t v41 = 0u;
          *(_OWORD *)(v41 + 16) = 0u;
        }
        else
        {
          *(void *)(v41 + 24) = MEMORY[0x1E4FBC1C8];
          *(void *)uint64_t v41 = v39;
        }
        uint64_t v88 = v113;
        *(_OWORD *)(v41 + 32) = 0u;
        *(_OWORD *)(v41 + 48) = 0u;
        *(unsigned char *)(v41 + 64) = 3;
        swift_willThrow();
        _s12BiomeStreams13StorableValueOWOhTm_1(v88, (void (*)(void))type metadata accessor for StorableValue);
        goto LABEL_59;
    }
  }
  OUTLINED_FUNCTION_93_0();
  OUTLINED_FUNCTION_59_1();
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance SUM_NON_INT()
{
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance SUM_NON_INT()
{
  return SUM_NON_INT.aggregationMetadata()();
}

uint64_t SUM_NON_INT.aggregationMetadata()()
{
  OUTLINED_FUNCTION_38_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  OUTLINED_FUNCTION_11_1();
  uint64_t v0 = (__n128 *)OUTLINED_FUNCTION_134();
  OUTLINED_FUNCTION_202(v0, (__n128)xmmword_18EB382C0);
  if (one-time initialization token for sumKey != -1) {
    swift_once();
  }
  uint64_t v1 = OUTLINED_FUNCTION_160(&static SUM_NON_INT.sumKey);
  uint64_t v2 = type metadata accessor for SUM_NON_INT(v1);
  OUTLINED_FUNCTION_66_0(v2);
  OUTLINED_FUNCTION_198();
  uint64_t v3 = one-time initialization token for isNonNullEventSeenKey;
  swift_bridgeObjectRetain();
  if (v3 != -1) {
    swift_once();
  }
  OUTLINED_FUNCTION_67_0(&static SUM_NON_INT.isNonNullEventSeenKey);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_34();
  return Dictionary.init(dictionaryLiteral:)();
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance SUM_NON_INT(Swift::OpaquePointer a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SUM_NON_INT.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  OUTLINED_FUNCTION_58_1();
  OUTLINED_FUNCTION_69_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v6 = OUTLINED_FUNCTION_35(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_29_1();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_119();
  if (v8)
  {
    if (one-time initialization token for sumKey != -1)
    {
      swift_once();
      if (!*(void *)(v1 + 16)) {
        goto LABEL_20;
      }
    }
    OUTLINED_FUNCTION_128();
    OUTLINED_FUNCTION_130();
    OUTLINED_FUNCTION_127();
    if ((v4 & 1) == 0) {
      goto LABEL_20;
    }
    if (one-time initialization token for isNonNullEventSeenKey != -1) {
      swift_once();
    }
    if (!*(void *)(v1 + 16)) {
      goto LABEL_20;
    }
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_130();
    OUTLINED_FUNCTION_127();
    if ((v4 & 1) == 0) {
      goto LABEL_20;
    }
    OUTLINED_FUNCTION_128();
    OUTLINED_FUNCTION_110();
    swift_bridgeObjectRelease();
    uint64_t v9 = type metadata accessor for StorableValue(0);
    OUTLINED_FUNCTION_10_1(v3, 1, v9);
    if (v10)
    {
      uint64_t v11 = v3;
    }
    else
    {
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload != 1)
      {
        uint64_t v15 = v3;
LABEL_19:
        _s12BiomeStreams13StorableValueOWOhTm_1(v15, (void (*)(void))type metadata accessor for StorableValue);
        goto LABEL_20;
      }
      if (*(unsigned char *)(v3 + 8))
      {
LABEL_20:
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        uint64_t v16 = OUTLINED_FUNCTION_39();
        OUTLINED_FUNCTION_17_2(v16, v17);
        swift_bridgeObjectRetain();
        swift_willThrow();
        goto LABEL_21;
      }
      uint64_t v14 = type metadata accessor for SUM_NON_INT(0);
      OUTLINED_FUNCTION_153(v14);
      OUTLINED_FUNCTION_106_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_10_1(v2, 1, v9);
      if (!v10)
      {
        if (!swift_getEnumCaseMultiPayload())
        {
          if ((*(unsigned char *)(v2 + 8) & 1) == 0 && *(void *)v2 < 2uLL)
          {
            OUTLINED_FUNCTION_207(*(void *)v2);
            goto LABEL_21;
          }
          goto LABEL_20;
        }
        uint64_t v15 = v2;
        goto LABEL_19;
      }
      uint64_t v11 = v2;
    }
    outlined destroy of UUID?(v11, &demangling cache variable for type metadata for StorableValue?);
    goto LABEL_20;
  }
  uint64_t v12 = type metadata accessor for SUM_NON_INT(0);
  OUTLINED_FUNCTION_200(v12);
LABEL_21:
  OUTLINED_FUNCTION_59_1();
}

uint64_t one-time initialization function for totalKey()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static TOTAL.totalKey = (__int128)v1;
  return result;
}

void TOTAL.getCurrentAggregationEvent()()
{
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_0_4();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  uint64_t v4 = OUTLINED_FUNCTION_64_0();
  uint64_t v5 = OUTLINED_FUNCTION_35(v4);
  MEMORY[0x1F4188790](v5);
  uint64_t v6 = OUTLINED_FUNCTION_63_0();
  type metadata accessor for TOTAL(v6);
  uint64_t v7 = *(void (**)(void))(v2 + 16);
  OUTLINED_FUNCTION_16_1();
  v7();
  OUTLINED_FUNCTION_105();
  if (!v0)
  {
    type metadata accessor for AggregationEvent(0);
    OUTLINED_FUNCTION_16_1();
    uint64_t v8 = ((uint64_t (*)(void))v7)();
    OUTLINED_FUNCTION_182(v8, v9, (void (*)(void))type metadata accessor for StorableValue);
  }
  OUTLINED_FUNCTION_132();
}

void TOTAL.processEvent(changeRecord:expressionEvaluator:)()
{
  OUTLINED_FUNCTION_58_1();
  uint64_t v11 = OUTLINED_FUNCTION_187(v6, v7, v8, v9, v10);
  uint64_t v12 = OUTLINED_FUNCTION_35(v11);
  MEMORY[0x1F4188790](v12);
  uint64_t v82 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_0_4();
  uint64_t v79 = v14;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_169();
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v17 = OUTLINED_FUNCTION_35(v16);
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_62_0();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_206();
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_29_1();
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v76 - v21;
  uint64_t v23 = type metadata accessor for AggregationEvent(0);
  uint64_t v24 = OUTLINED_FUNCTION_35(v23);
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_69();
  uint64_t v25 = v0;
  uint64_t v26 = v85;
  TOTAL.getCurrentAggregationEvent()();
  if (!v26)
  {
    uint64_t v77 = v3;
    uint64_t v78 = v2;
    uint64_t v76 = v1;
    uint64_t v27 = v81;
    uint64_t v85 = v4;
    uint64_t v28 = type metadata accessor for TOTAL(0);
    OUTLINED_FUNCTION_159(v28);
    char v29 = 0;
    uint64_t v83 = v28;
    _s12BiomeStreams13StorableValueOWOcTm_0((uint64_t)v22, v78, (void (*)(void))type metadata accessor for StorableValue);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v84 = v22;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        if ((*(unsigned char *)(v78 + 8) & 1) == 0)
        {
          double v33 = *(double *)v78;
          goto LABEL_40;
        }
        break;
      case 2:
        uint64_t v34 = v77;
        _s10Foundation4UUIDVSgWObTm_0(v78, v77, (uint64_t *)&demangling cache variable for type metadata for Date?);
        outlined init with copy of Date?(v34, v5, (uint64_t *)&demangling cache variable for type metadata for Date?);
        uint64_t v35 = OUTLINED_FUNCTION_90_0();
        OUTLINED_FUNCTION_10_1(v35, v36, v27);
        if (!v37)
        {
          OUTLINED_FUNCTION_28();
          v69();
          Date.timeIntervalSince1970.getter();
          double v71 = v70;
          OUTLINED_FUNCTION_41();
          v72();
          outlined destroy of UUID?(v34, (uint64_t *)&demangling cache variable for type metadata for Date?);
          uint64_t v31 = *(int *)(v83 + 28);
          double v32 = v71 + *(double *)(v25 + v31);
          goto LABEL_41;
        }
        outlined destroy of UUID?(v34, (uint64_t *)&demangling cache variable for type metadata for Date?);
        outlined destroy of UUID?(v5, (uint64_t *)&demangling cache variable for type metadata for Date?);
        break;
      case 3:
        uint64_t v38 = *(void *)(v78 + 8);
        if (v38)
        {
          OUTLINED_FUNCTION_83_0();
          MEMORY[0x1F4188790](v39);
          OUTLINED_FUNCTION_9_2();
          if ((v38 & 0x1000000000000000) != 0) {
            goto LABEL_54;
          }
          OUTLINED_FUNCTION_36_2();
          if (!v40) {
            goto LABEL_54;
          }
          OUTLINED_FUNCTION_196();
          MEMORY[0x1F4188790](v41);
          OUTLINED_FUNCTION_60_1();
          *(void *)(v45 - 16) = closure #1 in closure #1 in Double.init<A>(_:)partial apply;
          *(void *)(v45 - 8) = v43;
          if ((v38 & 0x2000000000000000) != 0) {
            goto LABEL_32;
          }
          if ((v44 & 0x1000000000000000) == 0) {
            goto LABEL_56;
          }
          goto LABEL_21;
        }
        break;
      case 4:
        uint64_t v46 = *(void *)(v78 + 8);
        if (v46)
        {
          OUTLINED_FUNCTION_83_0();
          MEMORY[0x1F4188790](v47);
          OUTLINED_FUNCTION_9_2();
          if ((v46 & 0x1000000000000000) != 0 || (OUTLINED_FUNCTION_36_2(), !v48))
          {
LABEL_54:
            _StringGuts._slowWithCString<A>(_:)();
            swift_bridgeObjectRelease();
            char v29 = v86;
          }
          else
          {
            OUTLINED_FUNCTION_196();
            MEMORY[0x1F4188790](v49);
            OUTLINED_FUNCTION_60_1();
            *(void *)(v50 - 16) = closure #1 in closure #1 in Double.init<A>(_:)partial apply;
            *(void *)(v50 - 8) = v43;
            if ((v46 & 0x2000000000000000) != 0)
            {
LABEL_32:
              OUTLINED_FUNCTION_33_2(v42, v43, v44);
              if ((!v37 & v55 || (OUTLINED_FUNCTION_50_1(), (v68 & 1) == 0)) && OUTLINED_FUNCTION_123()) {
                OUTLINED_FUNCTION_122_0();
              }
              else {
                char v29 = 0;
              }
              swift_bridgeObjectRelease();
            }
            else
            {
              if ((v44 & 0x1000000000000000) != 0) {
LABEL_21:
              }
                uint64_t v51 = OUTLINED_FUNCTION_35_2();
              else {
LABEL_56:
              }
                uint64_t v51 = OUTLINED_FUNCTION_94_0();
              char v29 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v51, v52, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
              swift_bridgeObjectRelease();
            }
          }
          double v33 = v87;
          if ((v29 & 1) == 0) {
            double v33 = 0.0;
          }
LABEL_40:
          uint64_t v31 = *(int *)(v83 + 28);
          double v32 = v33 + *(double *)(v25 + v31);
          goto LABEL_41;
        }
        break;
      case 5:
        unint64_t v53 = *(void *)(v78 + 8);
        OUTLINED_FUNCTION_101();
        if (!(!v37 & v55))
        {
          uint64_t v56 = *v54;
          outlined copy of Data._Representation(*v54, v53);
          static String.Encoding.utf8.getter();
          String.init(data:encoding:)();
          if (v57)
          {
            uint64_t v58 = v57;
            OUTLINED_FUNCTION_83_0();
            MEMORY[0x1F4188790](v59);
            OUTLINED_FUNCTION_9_2();
            if ((v58 & 0x1000000000000000) != 0 || (OUTLINED_FUNCTION_36_2(), !v61))
            {
              _StringGuts._slowWithCString<A>(_:)();
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_181();
            }
            else
            {
              MEMORY[0x1F4188790](v60);
              OUTLINED_FUNCTION_165();
              *(void *)(v65 - 16) = partial apply for closure #1 in closure #1 in Double.init<A>(_:);
              *(void *)(v65 - 8) = v63;
              if ((v58 & 0x2000000000000000) != 0)
              {
                OUTLINED_FUNCTION_33_2(v62, v63, v64);
                if (!v37 & v55 || (OUTLINED_FUNCTION_50_1(), (v73 & 1) == 0))
                {
                  if (OUTLINED_FUNCTION_123()) {
                    OUTLINED_FUNCTION_172();
                  }
                }
                swift_bridgeObjectRelease();
                outlined consume of Data?(v56, v53);
                outlined consume of Data?(v56, v53);
              }
              else
              {
                if ((v64 & 0x1000000000000000) != 0) {
                  uint64_t v66 = OUTLINED_FUNCTION_35_2();
                }
                else {
                  uint64_t v66 = OUTLINED_FUNCTION_94_0();
                }
                _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v66, v67, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
                swift_bridgeObjectRelease();
                OUTLINED_FUNCTION_56_1();
              }
            }
            double v74 = OUTLINED_FUNCTION_170();
            if (v37) {
              double v74 = v75;
            }
            *(double *)(v25 + *(int *)(v83 + 28)) = v74 + *(double *)(v25 + *(int *)(v83 + 28));
          }
          else
          {
            OUTLINED_FUNCTION_56_1();
          }
        }
        break;
      case 6:
        *(double *)(v25 + *(int *)(v83 + 28)) = *(double *)(v25 + *(int *)(v83 + 28)) + 0.0;
        _s12BiomeStreams13StorableValueOWOhTm_1(v78, (void (*)(void))type metadata accessor for StorableValue);
        break;
      case 7:
        break;
      default:
        if ((*(unsigned char *)(v78 + 8) & 1) == 0)
        {
          uint64_t v31 = *(int *)(v83 + 28);
          double v32 = *(double *)(v25 + v31) + (double)*(uint64_t *)v78;
LABEL_41:
          *(double *)(v25 + v31) = v32;
        }
        break;
    }
    TOTAL.getCurrentAggregationEvent()();
    _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v84, (void (*)(void))type metadata accessor for StorableValue);
    _s12BiomeStreams13StorableValueOWObTm_0(v85, v80, (void (*)(void))type metadata accessor for AggregationEvent);
  }
  OUTLINED_FUNCTION_93_0();
  OUTLINED_FUNCTION_59_1();
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance TOTAL()
{
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance TOTAL()
{
  return TOTAL.aggregationMetadata()();
}

uint64_t TOTAL.aggregationMetadata()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  OUTLINED_FUNCTION_12_2();
  uint64_t v0 = (__n128 *)OUTLINED_FUNCTION_26_2();
  OUTLINED_FUNCTION_203(v0, (__n128)xmmword_18EB382D0);
  if (one-time initialization token for totalKey != -1) {
    swift_once();
  }
  uint64_t v1 = OUTLINED_FUNCTION_42_0(&static TOTAL.totalKey);
  uint64_t v2 = type metadata accessor for TOTAL(v1);
  OUTLINED_FUNCTION_115(*(int *)(v2 + 28));
  OUTLINED_FUNCTION_180();
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();

  return Dictionary.init(dictionaryLiteral:)();
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance TOTAL(Swift::OpaquePointer a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TOTAL.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  OUTLINED_FUNCTION_69_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v6 = OUTLINED_FUNCTION_35(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_31_1();
  if (v7)
  {
    if (one-time initialization token for totalKey == -1 || (swift_once(), *(void *)(v2 + 16)))
    {
      OUTLINED_FUNCTION_89_0();
      OUTLINED_FUNCTION_189();
      OUTLINED_FUNCTION_174();
      if (v4)
      {
        OUTLINED_FUNCTION_89_0();
        OUTLINED_FUNCTION_74_0();
        swift_bridgeObjectRelease();
        uint64_t v8 = type metadata accessor for StorableValue(0);
        OUTLINED_FUNCTION_10_1(v3, 1, v8);
        if (v9)
        {
          outlined destroy of UUID?(v3, &demangling cache variable for type metadata for StorableValue?);
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          if (EnumCaseMultiPayload == 1)
          {
            if ((*(unsigned char *)(v3 + 8) & 1) == 0)
            {
              uint64_t v11 = *(void *)v3;
              uint64_t v10 = type metadata accessor for TOTAL(0);
              goto LABEL_8;
            }
          }
          else
          {
            _s12BiomeStreams13StorableValueOWOhTm_1(v3, (void (*)(void))type metadata accessor for StorableValue);
          }
        }
      }
    }
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v13 = OUTLINED_FUNCTION_39();
    OUTLINED_FUNCTION_17_2(v13, v14);
    swift_bridgeObjectRetain();
    swift_willThrow();
    goto LABEL_14;
  }
  uint64_t v10 = type metadata accessor for TOTAL(0);
  uint64_t v11 = 0;
LABEL_8:
  *(void *)(v1 + *(int *)(v10 + 28)) = v11;
LABEL_14:
  OUTLINED_FUNCTION_132();
}

uint64_t one-time initialization function for toBeConcatendatedKey()
{
  Swift::String v1 = String.lowercased()();
  uint64_t result = v1._countAndFlagsBits;
  static GROUP_CONCAT.toBeConcatendatedKey = (__int128)v1;
  return result;
}

void GROUP_CONCAT.processEvent(changeRecord:expressionEvaluator:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v4 = v0;
  uint64_t v204 = v5;
  uint64_t v205 = v6;
  uint64_t v188 = v7;
  uint64_t v189 = v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
  uint64_t v10 = OUTLINED_FUNCTION_35(v9);
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_10();
  uint64_t v198 = v11;
  v197 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  uint64_t v199 = v12;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_10();
  uint64_t v200 = v14;
  uint64_t v182 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_4();
  uint64_t v179 = v15;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_70(v18);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v20 = OUTLINED_FUNCTION_35(v19);
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_138();
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v22);
  v196 = (char *)v173 - v23;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_45();
  uint64_t v181 = v25;
  uint64_t v26 = type metadata accessor for String.Encoding();
  uint64_t v27 = OUTLINED_FUNCTION_35(v26);
  MEMORY[0x1F4188790](v27);
  OUTLINED_FUNCTION_10();
  uint64_t v177 = v28;
  uint64_t v183 = OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_0_4();
  uint64_t v178 = v29;
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v31);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_70(v32);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v34 = OUTLINED_FUNCTION_35(v33);
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v36);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v37);
  OUTLINED_FUNCTION_45();
  uint64_t v184 = v38;
  uint64_t v39 = type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v41 = v40;
  MEMORY[0x1F4188790](v42);
  v194 = (char *)v173 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v44);
  uint64_t v46 = (char *)v173 - v45;
  uint64_t v201 = type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v47);
  OUTLINED_FUNCTION_16();
  v193 = v48;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v49);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v50);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v51);
  uint64_t v195 = (uint64_t)v173 - v52;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v53);
  v206 = (void *)((char *)v173 - v54);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v55);
  uint64_t v56 = OUTLINED_FUNCTION_205();
  uint64_t v57 = type metadata accessor for GROUP_CONCAT(v56);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v58);
  uint64_t v192 = (uint64_t)v173 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v60);
  uint64_t v62 = (char *)v173 - v61;
  uint64_t v203 = type metadata accessor for AggregationEvent(0);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v63);
  uint64_t v207 = (uint64_t)v173 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v202 = v4;
  _s12BiomeStreams13StorableValueOWOcTm_0(v4, (uint64_t)v62, (void (*)(void))type metadata accessor for GROUP_CONCAT);
  uint64_t v65 = &v62[*(int *)(v57 + 32)];
  uint64_t v66 = *((void *)v65 + 1);
  uint64_t v176 = v2;
  uint64_t v67 = v39;
  if (v66)
  {
    uint64_t v68 = *(void *)v65;
    *((void *)&v209 + 1) = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v208 = v68;
    *((void *)&v208 + 1) = v66;
  }
  else
  {
    long long v208 = 0u;
    long long v209 = 0u;
  }
  double v71 = *(void (**)(void))(v41 + 16);
  uint64_t v70 = v41 + 16;
  char v69 = v71;
  OUTLINED_FUNCTION_201();
  v71();
  swift_bridgeObjectRetain();
  StorableValue.init(_:dataType:)((uint64_t)&v208, (uint64_t)v46, v3);
  if (v1)
  {
    _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v62, (void (*)(void))type metadata accessor for GROUP_CONCAT);
  }
  else
  {
    uint64_t v72 = v207;
    OUTLINED_FUNCTION_201();
    v69();
    _s12BiomeStreams13StorableValueOWObTm_0((uint64_t)v3, v72, (void (*)(void))type metadata accessor for StorableValue);
    _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v62, (void (*)(void))type metadata accessor for GROUP_CONCAT);
    uint64_t v73 = v202;
    double v74 = v206;
    SQLExpressionEvaluator.execute(expression:payload:)(v202 + *(int *)(v57 + 20), v204, v206);
    v175 = v67;
    v174 = v69;
    uint64_t v75 = (uint64_t)v74;
    uint64_t v76 = (int *)v57;
    v173[1] = v70;
    uint64_t v77 = v195;
    _s12BiomeStreams13StorableValueOWOcTm_0(v75, v195, (void (*)(void))type metadata accessor for StorableValue);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v79 = 0;
    uint64_t v80 = 0;
    uint64_t v81 = v199;
    uint64_t v82 = v200;
    uint64_t v83 = v198;
    uint64_t v84 = (uint64_t)v196;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        if (*(unsigned char *)(v77 + 8)) {
          goto LABEL_13;
        }
        uint64_t v85 = Double.description.getter();
        goto LABEL_25;
      case 2:
        uint64_t v87 = v77;
        uint64_t v88 = v184;
        _s10Foundation4UUIDVSgWObTm_0(v87, v184, (uint64_t *)&demangling cache variable for type metadata for Date?);
        uint64_t v84 = v180;
        outlined init with copy of Date?(v88, v180, (uint64_t *)&demangling cache variable for type metadata for Date?);
        uint64_t v89 = OUTLINED_FUNCTION_90_0();
        OUTLINED_FUNCTION_10_1(v89, v90, v183);
        if (!v91)
        {
          OUTLINED_FUNCTION_28();
          v100();
          Date.timeIntervalSince1970.getter();
          uint64_t v101 = Double.description.getter();
          uint64_t v80 = v102;
          OUTLINED_FUNCTION_20_1();
          v103();
          outlined destroy of UUID?(v184, (uint64_t *)&demangling cache variable for type metadata for Date?);
          uint64_t v79 = (char *)v101;
          goto LABEL_30;
        }
        double v92 = (uint64_t *)&demangling cache variable for type metadata for Date?;
        uint64_t v93 = v88;
        goto LABEL_23;
      case 3:
      case 4:
        uint64_t v79 = *(char **)v77;
        uint64_t v80 = *(void **)(v77 + 8);
        if (!v80) {
          uint64_t v79 = 0;
        }
        goto LABEL_30;
      case 5:
        unint64_t v94 = *(void *)(v77 + 8);
        OUTLINED_FUNCTION_101();
        if (!v91 & v96)
        {
          uint64_t v79 = 0;
          uint64_t v80 = 0;
        }
        else
        {
          uint64_t v104 = *v95;
          uint64_t v105 = OUTLINED_FUNCTION_180();
          outlined copy of Data._Representation(v105, v106);
          static String.Encoding.utf8.getter();
          OUTLINED_FUNCTION_180();
          uint64_t v107 = String.init(data:encoding:)();
          uint64_t v80 = v108;
          uint64_t v109 = OUTLINED_FUNCTION_180();
          outlined consume of Data?(v109, v110);
          uint64_t v111 = v104;
          uint64_t v81 = v199;
          outlined consume of Data?(v111, v94);
          if (v80) {
            uint64_t v79 = (char *)v107;
          }
          else {
            uint64_t v79 = 0;
          }
          uint64_t v82 = v200;
        }
        goto LABEL_30;
      case 6:
        uint64_t v97 = v181;
        _s10Foundation4UUIDVSgWObTm_0(v77, v181, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined init with copy of Date?(v97, v84, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v98 = OUTLINED_FUNCTION_90_0();
        OUTLINED_FUNCTION_10_1(v98, v99, v182);
        if (v91)
        {
          double v92 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
          uint64_t v93 = v97;
LABEL_23:
          outlined destroy of UUID?(v93, v92);
          outlined destroy of UUID?(v84, v92);
          uint64_t v79 = 0;
          uint64_t v80 = 0;
        }
        else
        {
          OUTLINED_FUNCTION_28();
          v112();
          v196 = (char *)UUID.uuidString.getter();
          uint64_t v113 = v97;
          uint64_t v80 = v114;
          uint64_t v83 = v198;
          OUTLINED_FUNCTION_20_1();
          v115();
          outlined destroy of UUID?(v113, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          uint64_t v79 = v196;
        }
LABEL_30:
        v196 = v79;
        v210 = v80;
        outlined init with copy of Date?(v73 + v76[6], v83, &demangling cache variable for type metadata for SQLExpression?);
        uint64_t v116 = OUTLINED_FUNCTION_192();
        uint64_t v117 = v197;
        OUTLINED_FUNCTION_10_1(v116, v118, (uint64_t)v197);
        if (!v91)
        {
          OUTLINED_FUNCTION_28();
          v124();
          uint64_t v125 = v191;
          SQLExpressionEvaluator.execute(expression:payload:)(v82, v204, v191);
          _s12BiomeStreams13StorableValueOWOcTm_0((uint64_t)v125, v190, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v126 = swift_getEnumCaseMultiPayload();
          uint64_t v127 = v186;
          uint64_t v128 = v185;
          switch((int)v126)
          {
            case 1:
              if (*(unsigned char *)(v190 + 8))
              {
                uint64_t v131 = 0;
              }
              else
              {
                Double.description.getter();
                uint64_t v131 = v145;
              }
              v144 = v191;
              goto LABEL_61;
            case 2:
              _s10Foundation4UUIDVSgWObTm_0(v190, v185, (uint64_t *)&demangling cache variable for type metadata for Date?);
              outlined init with copy of Date?(v128, v127, (uint64_t *)&demangling cache variable for type metadata for Date?);
              uint64_t v132 = OUTLINED_FUNCTION_192();
              OUTLINED_FUNCTION_10_1(v132, v133, v183);
              if (!v91)
              {
                OUTLINED_FUNCTION_28();
                v147();
                Date.timeIntervalSince1970.getter();
                Double.description.getter();
                uint64_t v148 = v81;
                uint64_t v131 = v149;
                OUTLINED_FUNCTION_2_4();
                v150();
                uint64_t v151 = outlined destroy of UUID?(v128, (uint64_t *)&demangling cache variable for type metadata for Date?);
                OUTLINED_FUNCTION_135(v151, (void (*)(void))type metadata accessor for StorableValue);
                (*(void (**)(uint64_t, ValueMetadata *))(v148 + 8))(v200, v117);
                goto LABEL_63;
              }
              uint64_t v134 = (uint64_t *)&demangling cache variable for type metadata for Date?;
              uint64_t v135 = v128;
              goto LABEL_53;
            case 3:
            case 4:
              OUTLINED_FUNCTION_135(v126, (void (*)(void))type metadata accessor for StorableValue);
              uint64_t v129 = OUTLINED_FUNCTION_84_0();
              v130(v129);
              uint64_t v131 = *(void *)(v190 + 8);
              goto LABEL_63;
            case 5:
              unint64_t v142 = *(void *)(v190 + 8);
              if (v142 >> 60 == 15) {
                goto LABEL_55;
              }
              uint64_t v157 = v82;
              uint64_t v158 = *(void *)v190;
              outlined copy of Data._Representation(*(void *)v190, *(void *)(v190 + 8));
              static String.Encoding.utf8.getter();
              uint64_t v205 = String.init(data:encoding:)();
              uint64_t v159 = v81;
              uint64_t v131 = v160;
              outlined consume of Data?(v158, v142);
              uint64_t v161 = outlined consume of Data?(v158, v142);
              OUTLINED_FUNCTION_135(v161, (void (*)(void))type metadata accessor for StorableValue);
              (*(void (**)(uint64_t, ValueMetadata *))(v159 + 8))(v157, v117);
              goto LABEL_63;
            case 6:
              uint64_t v136 = v187;
              _s10Foundation4UUIDVSgWObTm_0(v190, v187, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              uint64_t v127 = v176;
              outlined init with copy of Date?(v136, v176, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              uint64_t v137 = OUTLINED_FUNCTION_192();
              OUTLINED_FUNCTION_10_1(v137, v138, v182);
              if (v91)
              {
                uint64_t v134 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
                uint64_t v135 = v187;
LABEL_53:
                uint64_t v139 = outlined destroy of UUID?(v135, v134);
                OUTLINED_FUNCTION_135(v139, (void (*)(void))type metadata accessor for StorableValue);
                uint64_t v140 = OUTLINED_FUNCTION_84_0();
                v141(v140);
                outlined destroy of UUID?(v127, v134);
LABEL_56:
                uint64_t v131 = 0;
              }
              else
              {
                OUTLINED_FUNCTION_28();
                v152();
                UUID.uuidString.getter();
                uint64_t v153 = v81;
                uint64_t v131 = v154;
                OUTLINED_FUNCTION_2_4();
                v155();
                uint64_t v156 = outlined destroy of UUID?(v187, (uint64_t *)&demangling cache variable for type metadata for UUID?);
                OUTLINED_FUNCTION_135(v156, (void (*)(void))type metadata accessor for StorableValue);
                (*(void (**)(uint64_t, ValueMetadata *))(v153 + 8))(v200, v117);
              }
LABEL_63:
              v119 = v210;
              if (!v210) {
                goto LABEL_66;
              }
              uint64_t v120 = v76;
              if (!v131) {
                goto LABEL_37;
              }
              goto LABEL_34;
            case 7:
LABEL_55:
              OUTLINED_FUNCTION_135(v126, (void (*)(void))type metadata accessor for StorableValue);
              (*(void (**)(uint64_t, ValueMetadata *))(v81 + 8))(v82, v117);
              goto LABEL_56;
            default:
              if (*(unsigned char *)(v190 + 8))
              {
                uint64_t v131 = 0;
              }
              else
              {
                *(void *)&long long v208 = *(void *)v190;
                dispatch thunk of CustomStringConvertible.description.getter();
                uint64_t v131 = v143;
              }
              v144 = v191;
LABEL_61:
              _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v144, (void (*)(void))type metadata accessor for StorableValue);
              OUTLINED_FUNCTION_2_4();
              v146();
              goto LABEL_63;
          }
        }
        outlined destroy of UUID?(v83, &demangling cache variable for type metadata for SQLExpression?);
        v119 = v80;
        if (!v80) {
          goto LABEL_66;
        }
        uint64_t v120 = v76;
LABEL_34:
        if (*(void *)(v73 + v120[8] + 8))
        {
          v121._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_151();
          String.append(_:)(v121);
        }
        swift_bridgeObjectRelease();
        uint64_t v120 = v76;
LABEL_37:
        Swift::String v122 = (void *)(v73 + v120[8]);
        if (v122[1])
        {
          v123._uint64_t countAndFlagsBits = (uint64_t)v196;
          v123._uint64_t object = v119;
          String.append(_:)(v123);
LABEL_66:
          swift_bridgeObjectRelease();
        }
        else
        {
          *Swift::String v122 = v196;
          v122[1] = v119;
        }
        uint64_t v162 = v192;
        _s12BiomeStreams13StorableValueOWOcTm_0(v73, v192, (void (*)(void))type metadata accessor for GROUP_CONCAT);
        v163 = (uint64_t *)(v162 + v76[8]);
        uint64_t v164 = v163[1];
        if (v164)
        {
          uint64_t v165 = *v163;
          *((void *)&v209 + 1) = MEMORY[0x1E4FBB1A0];
          *(void *)&long long v208 = v165;
          *((void *)&v208 + 1) = v164;
        }
        else
        {
          long long v208 = 0u;
          long long v209 = 0u;
        }
        v167 = v193;
        uint64_t v166 = (uint64_t)v194;
        uint64_t v168 = v162 + v76[7];
        uint64_t v169 = OUTLINED_FUNCTION_151();
        v170 = v175;
        v171 = v174;
        ((void (*)(uint64_t))v174)(v169);
        swift_bridgeObjectRetain();
        StorableValue.init(_:dataType:)((uint64_t)&v208, v166, v167);
        uint64_t v172 = v188;
        ((void (*)(uint64_t, uint64_t, ValueMetadata *))v171)(v188 + *(int *)(v203 + 20), v168, v170);
        _s12BiomeStreams13StorableValueOWObTm_0((uint64_t)v167, v172, (void (*)(void))type metadata accessor for StorableValue);
        _s12BiomeStreams13StorableValueOWOhTm_1(v162, (void (*)(void))type metadata accessor for GROUP_CONCAT);
        _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v206, (void (*)(void))type metadata accessor for StorableValue);
        _s12BiomeStreams13StorableValueOWObTm_0(v207, v189, (void (*)(void))type metadata accessor for AggregationEvent);
        break;
      case 7:
        goto LABEL_30;
      default:
        if (*(unsigned char *)(v77 + 8))
        {
LABEL_13:
          uint64_t v79 = 0;
          uint64_t v80 = 0;
        }
        else
        {
          *(void *)&long long v208 = *(void *)v77;
          uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter();
LABEL_25:
          uint64_t v79 = (char *)v85;
          uint64_t v80 = v86;
        }
        goto LABEL_30;
    }
  }
  OUTLINED_FUNCTION_93_0();
  OUTLINED_FUNCTION_31();
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance GROUP_CONCAT()
{
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance GROUP_CONCAT()
{
  return GROUP_CONCAT.aggregationMetadata()();
}

uint64_t GROUP_CONCAT.aggregationMetadata()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  OUTLINED_FUNCTION_12_2();
  uint64_t v2 = (__n128 *)OUTLINED_FUNCTION_26_2();
  OUTLINED_FUNCTION_203(v2, (__n128)xmmword_18EB382D0);
  if (one-time initialization token for toBeConcatendatedKey != -1) {
    swift_once();
  }
  uint64_t v3 = OUTLINED_FUNCTION_42_0(&static GROUP_CONCAT.toBeConcatendatedKey);
  uint64_t v4 = (void *)(v0 + *(int *)(type metadata accessor for GROUP_CONCAT(v3) + 32));
  uint64_t v5 = v4[1];
  *uint64_t v1 = *v4;
  v1[1] = v5;
  type metadata accessor for StorableValue(0);
  swift_storeEnumTagMultiPayload();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();

  return Dictionary.init(dictionaryLiteral:)();
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance GROUP_CONCAT(Swift::OpaquePointer a1)
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> GROUP_CONCAT.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  uint64_t v4 = v1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v7 = OUTLINED_FUNCTION_35(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_31_1();
  if (!v8)
  {
LABEL_10:
    uint64_t v15 = (uint64_t *)((char *)v4 + *(int *)(type metadata accessor for GROUP_CONCAT(0) + 32));
    swift_bridgeObjectRelease();
    *uint64_t v15 = 0;
    v15[1] = 0;
    return;
  }
  if (one-time initialization token for toBeConcatendatedKey == -1
    || (swift_once(), *((void *)metadata._rawValue + 2)))
  {
    OUTLINED_FUNCTION_89_0();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_174();
    if (v3)
    {
      OUTLINED_FUNCTION_89_0();
      OUTLINED_FUNCTION_74_0();
      swift_bridgeObjectRelease();
      uint64_t v9 = type metadata accessor for StorableValue(0);
      OUTLINED_FUNCTION_10_1((uint64_t)v2, 1, v9);
      if (v10)
      {
        outlined destroy of UUID?((uint64_t)v2, &demangling cache variable for type metadata for StorableValue?);
      }
      else
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload == 3)
        {
          uint64_t v12 = *v2;
          uint64_t v13 = v2[1];
          uint64_t v14 = (uint64_t *)((char *)v4 + *(int *)(type metadata accessor for GROUP_CONCAT(0) + 32));
          swift_bridgeObjectRelease();
          *uint64_t v14 = v12;
          v14[1] = v13;
          return;
        }
        _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v2, (void (*)(void))type metadata accessor for StorableValue);
      }
      goto LABEL_10;
    }
  }
  lazy protocol witness table accessor for type SQLError and conformance SQLError();
  OUTLINED_FUNCTION_39();
  OUTLINED_FUNCTION_152(v16, *v4);
  swift_bridgeObjectRetain();
  swift_willThrow();
}

void MAX.processEvent(changeRecord:expressionEvaluator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_37();
  a19 = v25;
  a20 = v26;
  a10 = (void (*)(uint64_t))v20;
  uint64_t v28 = v27;
  uint64_t v214 = v29;
  uint64_t v215 = v30;
  uint64_t v199 = v31;
  OUTLINED_FUNCTION_1_12();
  uint64_t v200 = v33;
  uint64_t v201 = v32;
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_2_7();
  uint64_t v36 = MEMORY[0x1F4188790](v35);
  uint64_t v194 = OUTLINED_FUNCTION_137(v36, v37, v38, v39, v40, v41, v42, v43, v188[0]);
  OUTLINED_FUNCTION_0_4();
  uint64_t v192 = v44;
  MEMORY[0x1F4188790](v45);
  OUTLINED_FUNCTION_70((uint64_t)v188 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v196 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v47);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v48);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v49);
  v197 = (char *)v188 - v50;
  uint64_t v193 = OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_0_4();
  uint64_t v191 = v51;
  MEMORY[0x1F4188790](v52);
  OUTLINED_FUNCTION_70((uint64_t)v188 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v54);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v55);
  OUTLINED_FUNCTION_2_7();
  uint64_t v57 = MEMORY[0x1F4188790](v56);
  uint64_t v206 = OUTLINED_FUNCTION_117(v57, v58, v59, v60, v61, v62, v63, v64, v188[0]);
  OUTLINED_FUNCTION_0_4();
  uint64_t v208 = v65;
  MEMORY[0x1F4188790](v66);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v67);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v68);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v69);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v70);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v71);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v72);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v73);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v74);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v75);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v76);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v77);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v78);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v79);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v80);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v81);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v82);
  OUTLINED_FUNCTION_2_7();
  uint64_t v84 = MEMORY[0x1F4188790](v83);
  OUTLINED_FUNCTION_163(v84, v85, v86, v87, v88, v89, v90, v91, v188[0]);
  OUTLINED_FUNCTION_0_4();
  uint64_t v211 = v93;
  uint64_t v212 = v92;
  MEMORY[0x1F4188790](v92);
  v210 = (char *)v188 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  uint64_t v96 = MEMORY[0x1F4188790](v95);
  uint64_t v213 = OUTLINED_FUNCTION_164(v96, v97, v98, v99, v100, v101, v102, v103, v188[0]);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v104);
  v205[0] = (uint64_t)v188 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v106);
  uint64_t v204 = (char *)v188 - v107;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v108);
  uint64_t v203 = (uint64_t)v188 - v109;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v110);
  uint64_t v202 = (uint64_t)v188 - v111;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v112);
  OUTLINED_FUNCTION_61_0();
  MEMORY[0x1F4188790](v113);
  OUTLINED_FUNCTION_107();
  MEMORY[0x1F4188790](v114);
  OUTLINED_FUNCTION_208();
  MEMORY[0x1F4188790](v115);
  OUTLINED_FUNCTION_64();
  MEMORY[0x1F4188790](v116);
  uint64_t v118 = (char *)v188 - v117;
  uint64_t v119 = type metadata accessor for AggregationEvent(0);
  uint64_t v120 = OUTLINED_FUNCTION_35(v119);
  MEMORY[0x1F4188790](v120);
  OUTLINED_FUNCTION_80_0();
  if (!v20)
  {
    OUTLINED_FUNCTION_38_1();
    uint64_t v215 = 0;
    Swift::String v121 = v209;
    SQLExpression.returnType.getter(v209);
    uint64_t v122 = OUTLINED_FUNCTION_37_2();
    v123(v122);
    lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator((unint64_t *)&lazy protocol witness table cache variable for type SQLDataType and conformance SQLDataType, (void (*)(uint64_t))type metadata accessor for SQLDataType);
    LODWORD(v214) = OUTLINED_FUNCTION_146();
    uint64_t v125 = *(void (**)(void))(v22 + 8);
    uint64_t v124 = v22 + 8;
    OUTLINED_FUNCTION_14_2();
    v125();
    OUTLINED_FUNCTION_14_2();
    v125();
    if (v214)
    {
      uint64_t v126 = OUTLINED_FUNCTION_126();
      OUTLINED_FUNCTION_185(v126, v127, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v214 = (uint64_t)v118;
      uint64_t v131 = v205[1];
      unint64_t v130 = v206;
      uint64_t v132 = v203;
      switch((int)EnumCaseMultiPayload)
      {
        case 1:
          OUTLINED_FUNCTION_193(EnumCaseMultiPayload, v129, (void (*)(void))type metadata accessor for StorableValue);
          OUTLINED_FUNCTION_72_0();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
          if ((OUTLINED_FUNCTION_15_1() & 1) == 0) {
            goto LABEL_36;
          }
          uint64_t v138 = OUTLINED_FUNCTION_6_6();
          v23(v138);
          uint64_t v139 = OUTLINED_FUNCTION_7_3();
          v23(v139);
          if (v130)
          {
            uint64_t v135 = (uint64_t *)&v204;
            goto LABEL_43;
          }
          unint64_t v216 = v132;
          goto LABEL_39;
        case 2:
          uint64_t v140 = (uint64_t)v23;
          uint64_t v23 = v189;
          _s12BiomeStreams13StorableValueOWOcTm_0(v140, (uint64_t)v189, (void (*)(void))type metadata accessor for StorableValue);
          _s10Foundation4UUIDVSgWObTm_0((uint64_t)v23, v131, (uint64_t *)&demangling cache variable for type metadata for Date?);
          OUTLINED_FUNCTION_103(v131, (uint64_t)&a9);
          if (!OUTLINED_FUNCTION_96_0())
          {
            OUTLINED_FUNCTION_211();
            uint64_t v154 = (uint64_t *)&demangling cache variable for type metadata for Date?;
            goto LABEL_35;
          }
          uint64_t v141 = OUTLINED_FUNCTION_28_2();
          v23(v141);
          uint64_t v142 = OUTLINED_FUNCTION_46_1();
          v23(v142);
          OUTLINED_FUNCTION_177(v131, (uint64_t *)&demangling cache variable for type metadata for Date?, (uint64_t)&v208);
          uint64_t v132 = v193;
          OUTLINED_FUNCTION_10_1((uint64_t)v23, 1, v193);
          if (!v143) {
            goto LABEL_13;
          }
          outlined destroy of UUID?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for Date?);
          OUTLINED_FUNCTION_148();
          goto LABEL_40;
        case 3:
          uint64_t v132 = v202;
          _s12BiomeStreams13StorableValueOWOcTm_0((uint64_t)v23, v202, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v28 = v130;
          OUTLINED_FUNCTION_54_1();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          if (!OUTLINED_FUNCTION_15_1()) {
            goto LABEL_31;
          }
          uint64_t v144 = OUTLINED_FUNCTION_6_6();
          v23(v144);
          uint64_t v145 = OUTLINED_FUNCTION_7_3();
          v23(v145);
          if (v132)
          {
            unint64_t v216 = v130;
            unint64_t v217 = v132;
            goto LABEL_39;
          }
          uint64_t v135 = v205;
          goto LABEL_43;
        case 4:
          _s12BiomeStreams13StorableValueOWOcTm_0((uint64_t)v23, v203, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v28 = v130;
          OUTLINED_FUNCTION_54_1();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          if (!OUTLINED_FUNCTION_15_1())
          {
LABEL_31:
            swift_bridgeObjectRelease();
            goto LABEL_36;
          }
          uint64_t v146 = OUTLINED_FUNCTION_6_6();
          v23(v146);
          uint64_t v147 = OUTLINED_FUNCTION_7_3();
          v23(v147);
          if (v132)
          {
            unint64_t v216 = v130;
            unint64_t v217 = v132;
            goto LABEL_39;
          }
          uint64_t v135 = &v206;
          goto LABEL_43;
        case 5:
          OUTLINED_FUNCTION_195(EnumCaseMultiPayload, v129, (void (*)(void))type metadata accessor for StorableValue);
          OUTLINED_FUNCTION_124();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
          if (!OUTLINED_FUNCTION_15_1())
          {
            outlined consume of Data?(v132, v130);
            goto LABEL_36;
          }
          uint64_t v148 = OUTLINED_FUNCTION_6_6();
          v23(v148);
          uint64_t v149 = OUTLINED_FUNCTION_7_3();
          v23(v149);
          OUTLINED_FUNCTION_101();
          if (!(!v143 & v150))
          {
            unint64_t v216 = v132;
            unint64_t v217 = v130;
            goto LABEL_39;
          }
          uint64_t v135 = &v207;
          goto LABEL_43;
        case 6:
          uint64_t v131 = v205[0];
          _s12BiomeStreams13StorableValueOWOcTm_0((uint64_t)v23, v205[0], (void (*)(void))type metadata accessor for StorableValue);
          OUTLINED_FUNCTION_150();
          OUTLINED_FUNCTION_103(v131, (uint64_t)&a11);
          if (OUTLINED_FUNCTION_97_0())
          {
            uint64_t v151 = OUTLINED_FUNCTION_28_2();
            v23(v151);
            uint64_t v152 = OUTLINED_FUNCTION_46_1();
            v23(v152);
            OUTLINED_FUNCTION_177(v131, (uint64_t *)&demangling cache variable for type metadata for UUID?, (uint64_t)&v210);
            uint64_t v132 = v194;
            OUTLINED_FUNCTION_10_1((uint64_t)v23, 1, v194);
            if (v143)
            {
              outlined destroy of UUID?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              OUTLINED_FUNCTION_149();
            }
            else
            {
LABEL_13:
              uint64_t v162 = OUTLINED_FUNCTION_32_2();
              v163(v162);
              OUTLINED_FUNCTION_129();
              OUTLINED_FUNCTION_100();
            }
LABEL_40:
            uint64_t v169 = OUTLINED_FUNCTION_131(v167, v168);
LABEL_45:
            v170(v169);
LABEL_46:
            _s12BiomeStreams13StorableValueOWOhTm_1(v190, (void (*)(void))type metadata accessor for StorableValue);
            uint64_t v171 = OUTLINED_FUNCTION_88_0();
            v24(v171);
            OUTLINED_FUNCTION_10_1(v21, 1, v28);
            if (v143)
            {
              uint64_t v172 = (void (*)(void))v213;
              OUTLINED_FUNCTION_20_1();
              v172();
              OUTLINED_FUNCTION_43_1();
              goto LABEL_55;
            }
            uint64_t v173 = v198;
            uint64_t v211 = *(void *)(v131 + 32);
            uint64_t v212 = v131 + 32;
            OUTLINED_FUNCTION_28();
            v174();
            uint64_t v175 = OUTLINED_FUNCTION_51_1();
            v24(v175);
            uint64_t v176 = OUTLINED_FUNCTION_53_0();
            v177(v176);
            uint64_t v178 = OUTLINED_FUNCTION_82_0();
            v179(v178);
            v210 = (char *)v130;
            if (v21 == 1)
            {
              OUTLINED_FUNCTION_95();
              v180();
              OUTLINED_FUNCTION_43_1();
            }
            else
            {
              uint64_t v181 = OUTLINED_FUNCTION_114();
              v24(v181);
              OUTLINED_FUNCTION_10_1(v173, 1, v132);
              if (v143)
              {
                __break(1u);
                JUMPOUT(0x18E7D7114);
              }
              OUTLINED_FUNCTION_178();
              uint64_t v182 = OUTLINED_FUNCTION_113();
              char v184 = v183(v182);
              uint64_t v172 = (void (*)(void))(v200 + 8);
              uint64_t v185 = *(void (**)(void))(v200 + 8);
              OUTLINED_FUNCTION_41();
              v185();
              OUTLINED_FUNCTION_41();
              v185();
              uint64_t v23 = a10;
              if ((v184 & 1) == 0)
              {
                OUTLINED_FUNCTION_41();
                v185();
                OUTLINED_FUNCTION_204();
LABEL_55:
                uint64_t v187 = v215;
                MAX.getCurrentAggregationEvent()();
                OUTLINED_FUNCTION_162();
                OUTLINED_FUNCTION_20_1();
                v172();
                _s12BiomeStreams13StorableValueOWOhTm_1(v214, (void (*)(void))type metadata accessor for StorableValue);
                if (v187) {
                  _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v23, (void (*)(void))type metadata accessor for AggregationEvent);
                }
                else {
                  _s12BiomeStreams13StorableValueOWObTm_0((uint64_t)v23, v132, (void (*)(void))type metadata accessor for AggregationEvent);
                }
                break;
              }
            }
            uint64_t v172 = (void (*)(void))v213;
            OUTLINED_FUNCTION_20_1();
            v172();
            OUTLINED_FUNCTION_28();
            v186();
            OUTLINED_FUNCTION_179();
            goto LABEL_55;
          }
          OUTLINED_FUNCTION_211();
          uint64_t v154 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
LABEL_35:
          outlined destroy of UUID?(v131, v154);
LABEL_36:
          uint64_t v155 = (uint64_t)a10;
          lazy protocol witness table accessor for type SQLError and conformance SQLError();
          uint64_t v156 = OUTLINED_FUNCTION_39();
          uint64_t v158 = OUTLINED_FUNCTION_209(v156, v157);
          uint64_t v159 = v214;
          _s12BiomeStreams13StorableValueOWOcTm_0(v214, (uint64_t)v158, (void (*)(void))type metadata accessor for StorableValue);
          OUTLINED_FUNCTION_158();
          uint64_t v160 = OUTLINED_FUNCTION_171();
          v161(v160);
          _s12BiomeStreams13StorableValueOWOhTm_1(v159, (void (*)(void))type metadata accessor for StorableValue);
          _s12BiomeStreams13StorableValueOWOhTm_1(v155, (void (*)(void))type metadata accessor for AggregationEvent);
          _s12BiomeStreams13StorableValueOWOhTm_1(v190, (void (*)(void))type metadata accessor for StorableValue);
          break;
        case 7:
          uint64_t v213 = *(void *)(v21 + 8);
          OUTLINED_FUNCTION_20_1();
          v153();
          __swift_storeEnumTagSinglePayload((uint64_t)v121, 1, 1, v28);
          OUTLINED_FUNCTION_100();
          goto LABEL_46;
        default:
          OUTLINED_FUNCTION_194(EnumCaseMultiPayload, v129, (void (*)(void))type metadata accessor for StorableValue);
          OUTLINED_FUNCTION_72_0();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
          if ((OUTLINED_FUNCTION_15_1() & 1) == 0) {
            goto LABEL_36;
          }
          uint64_t v133 = OUTLINED_FUNCTION_6_6();
          v23(v133);
          uint64_t v134 = OUTLINED_FUNCTION_7_3();
          v23(v134);
          if (v130)
          {
            uint64_t v135 = &v203;
LABEL_43:
            uint64_t v164 = OUTLINED_FUNCTION_156((uint64_t)v135);
          }
          else
          {
            unint64_t v216 = v132;
LABEL_39:
            OUTLINED_FUNCTION_157();
            uint64_t v164 = v124;
            uint64_t v165 = 0;
            uint64_t v166 = 1;
          }
          __swift_storeEnumTagSinglePayload(v164, v165, v166, v28);
          uint64_t v169 = OUTLINED_FUNCTION_70_0();
          goto LABEL_45;
      }
    }
    else
    {
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_186();
      uint64_t v136 = SQLDataType.rawValue.getter();
      OUTLINED_FUNCTION_142(v136, v137);
      _s12BiomeStreams13StorableValueOWOhTm_1(v124, (void (*)(void))type metadata accessor for StorableValue);
      _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)a10, (void (*)(void))type metadata accessor for AggregationEvent);
    }
  }
  OUTLINED_FUNCTION_31();
}

#error "18E7D7140: call analysis failed (funcsize=6)"

BOOL protocol witness for static AggregationComparable.< infix(_:_:) in conformance Int64(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static AggregationComparable.> infix(_:_:) in conformance Int64(void *a1, void *a2)
{
  return *a2 < *a1;
}

BOOL protocol witness for static AggregationComparable.< infix(_:_:) in conformance Double(double *a1, double *a2)
{
  return *a1 < *a2;
}

uint64_t protocol witness for static AggregationComparable.< infix(_:_:) in conformance Date()
{
  return MEMORY[0x1F40E51A8]();
}

uint64_t protocol witness for static AggregationComparable.> infix(_:_:) in conformance Date()
{
  return MEMORY[0x1F40E5198]();
}

uint64_t protocol witness for static AggregationComparable.< infix(_:_:) in conformance String(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 0;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t protocol witness for static AggregationComparable.> infix(_:_:) in conformance String(uint64_t *a1, uint64_t *a2)
{
  return specialized static Comparable.> infix(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t specialized static Comparable.> infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

uint64_t specialized static Comparable.> infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == a1 && a4 == a2) {
    return 0;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

uint64_t static Data.< infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  return specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(a3, a4, a1, a2);
}

uint64_t specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Data.Iterator();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  uint64_t v14 = &v21[-v13];
  outlined copy of Data._Representation(a3, a4);
  Data.makeIterator()();
  outlined consume of Data._Representation(a3, a4);
  outlined copy of Data._Representation(a1, a2);
  Data.makeIterator()();
  outlined consume of Data._Representation(a1, a2);
  lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator(&lazy protocol witness table cache variable for type Data.Iterator and conformance Data.Iterator, MEMORY[0x1E4F27788]);
  while (1)
  {
    dispatch thunk of IteratorProtocol.next()();
    if (v26)
    {
      uint64_t v18 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
      v18(v14, v8);
      dispatch thunk of IteratorProtocol.next()();
      v18(v12, v8);
      char v17 = v24 ^ 1;
      return v17 & 1;
    }
    unsigned int v15 = v25;
    dispatch thunk of IteratorProtocol.next()();
    if (v23) {
      goto LABEL_6;
    }
    if (v15 < v22) {
      break;
    }
    if (v22 < v15)
    {
LABEL_6:
      uint64_t v16 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
      v16(v12, v8);
      v16(v14, v8);
      char v17 = 0;
      return v17 & 1;
    }
  }
  uint64_t v19 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
  v19(v12, v8);
  v19(v14, v8);
  char v17 = 1;
  return v17 & 1;
}

uint64_t static Data.> infix(_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (specialized Sequence<>.lexicographicallyPrecedes<A>(_:)(a3, a4, a1, a2)) {
    char v8 = 0;
  }
  else {
    char v8 = MEMORY[0x192FAF930](a1, a2, a3, a4) ^ 1;
  }
  return v8 & 1;
}

uint64_t protocol witness for static AggregationComparable.< infix(_:_:) in conformance Data(uint64_t a1, uint64_t a2)
{
  return static Data.< infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t protocol witness for static AggregationComparable.> infix(_:_:) in conformance Data(uint64_t a1, uint64_t a2)
{
  return static Data.> infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t dispatch thunk of Aggregation.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Aggregation.returnType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Aggregation.processEvent(changeRecord:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a6 + 24))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of Aggregation.processEvent(changeRecord:expressionEvaluator:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(a7 + 32))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of Aggregation.aggregationMetadata()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Aggregation.applyMetadata(metadata:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of static AggregationComparable.< infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static AggregationComparable.> infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

unsigned char *closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (uint64_t result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for AVG(uint64_t *a1, uint64_t *a2, int *a3)
{
  char v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    uint64_t *v4 = *a2;
    char v4 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SQLExpression();
    uint64_t v12 = (void (*)(char *, char *, ValueMetadata *))*((void *)v11[-1].Description + 2);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)v4 + v13;
    unsigned int v15 = (char *)a2 + v13;
    uint64_t v16 = type metadata accessor for SQLDataType();
    (*((void (**)(char *, char *, ValueMetadata *))v16[-1].Description + 2))(v14, v15, v16);
    uint64_t v17 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)v4 + v17) = *(uint64_t *)((char *)a2 + v17);
  }
  return v4;
}

void *initializeWithCopy for AVG(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SQLExpression();
  uint64_t v11 = (void (*)(char *, char *, ValueMetadata *))*((void *)v10[-1].Description + 2);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  unsigned int v15 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v15[-1].Description + 2))(v13, v14, v15);
  uint64_t v16 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v16) = *(void *)((char *)a2 + v16);
  return a1;
}

void *assignWithCopy for AVG(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v13[-1].Description + 3))(v11, v12, v13);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

_OWORD *initializeWithTake for AVG(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 4))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v13[-1].Description + 4))(v11, v12, v13);
  uint64_t v14 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v14) = *(void *)((char *)a2 + v14);
  return a1;
}

void *assignWithTake for AVG(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v10[-1].Description + 5))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v14[-1].Description + 5))(v12, v13, v14);
  uint64_t v15 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AVG(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t storeEnumTagSinglePayload for AVG(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t type metadata accessor for AVG(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for AVG);
}

ValueMetadata *type metadata completion function for AVG()
{
  return type metadata completion function for AVG();
}

{
  ValueMetadata *result;
  unint64_t v1;
  unint64_t v2;

  uint64_t result = type metadata accessor for SQLExpression();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SQLDataType();
    if (v2 <= 0x3F)
    {
      OUTLINED_FUNCTION_78_0((uint64_t)result);
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *assignWithCopy for COUNT(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v13[-1].Description + 3))(v11, v12, v13);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

void *assignWithTake for COUNT(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v10[-1].Description + 5))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v14[-1].Description + 5))(v12, v13, v14);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for COUNT(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0);
}

uint64_t storeEnumTagSinglePayload for COUNT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0);
}

uint64_t type metadata accessor for COUNT(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for COUNT);
}

ValueMetadata *type metadata completion function for COUNT()
{
  return type metadata completion function for COUNT();
}

{
  ValueMetadata *result;
  unint64_t v1;
  unint64_t v2;

  uint64_t result = type metadata accessor for SQLExpression();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for SQLDataType();
    if (v2 <= 0x3F)
    {
      OUTLINED_FUNCTION_78_0((uint64_t)result);
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *assignWithCopy for COUNT_STAR(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_OWORD *initializeWithTake for COUNT_STAR(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 4))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *assignWithTake for COUNT_STAR(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v10[-1].Description + 5))(v8, v9, v10);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t getEnumTagSinglePayload for COUNT_STAR(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E7D81A4);
}

uint64_t sub_18E7D81A4()
{
  OUTLINED_FUNCTION_155();
  if (v3) {
    return OUTLINED_FUNCTION_94(*(void *)(v0 + 8));
  }
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  uint64_t v7 = type metadata accessor for SQLDataType();
  uint64_t v8 = v0 + *(int *)(v5 + 20);

  return __swift_getEnumTagSinglePayload(v8, v6, (uint64_t)v7);
}

uint64_t storeEnumTagSinglePayload for COUNT_STAR(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E7D822C);
}

void sub_18E7D822C()
{
  OUTLINED_FUNCTION_98_0();
  if (v3)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    uint64_t v4 = v2;
    type metadata accessor for SQLDataType();
    uint64_t v5 = OUTLINED_FUNCTION_154(*(int *)(v4 + 20));
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
}

ValueMetadata *type metadata completion function for COUNT_STAR()
{
  uint64_t result = type metadata accessor for SQLDataType();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *assignWithCopy for SUM_INT(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v13[-1].Description + 3))(v11, v12, v13);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

void *assignWithTake for SUM_INT(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v10[-1].Description + 5))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v14[-1].Description + 5))(v12, v13, v14);
  uint64_t v15 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for SUM_INT(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_1);
}

uint64_t storeEnumTagSinglePayload for SUM_INT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_1);
}

uint64_t type metadata accessor for SUM_INT(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for SUM_INT);
}

ValueMetadata *type metadata completion function for SUM_INT()
{
  return type metadata completion function for AVG();
}

void initializeBufferWithCopyOfBuffer for SUM_INT()
{
  OUTLINED_FUNCTION_38_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_3_9();
  if ((*(_DWORD *)(v5 + 80) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_141();
  }
  else
  {
    OUTLINED_FUNCTION_99();
    OUTLINED_FUNCTION_4_3();
    uint64_t v7 = *(void (**)(void))(v6 + 16);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_16_1();
    v7();
    OUTLINED_FUNCTION_210();
    OUTLINED_FUNCTION_4_3();
    uint64_t v8 = OUTLINED_FUNCTION_73_0();
    v9(v8);
    uint64_t v10 = *(int *)(v0 + 32);
    *(void *)(v4 + *(int *)(v0 + 28)) = *(void *)(v2 + *(int *)(v0 + 28));
    *(unsigned char *)(v4 + v10) = *(unsigned char *)(v2 + v10);
  }
  OUTLINED_FUNCTION_34();
}

void initializeWithCopy for SUM_INT()
{
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_87_0(v0, v1);
  OUTLINED_FUNCTION_4_3();
  uint64_t v3 = *(void (**)(void))(v2 + 16);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  v3();
  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_4_3();
  uint64_t v4 = OUTLINED_FUNCTION_73_0();
  v5(v4);
  OUTLINED_FUNCTION_136();
  OUTLINED_FUNCTION_34();
}

void *assignWithCopy for SUM_NON_INT(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v13[-1].Description + 3))(v11, v12, v13);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  return a1;
}

uint64_t initializeWithTake for SUM_INT(_OWORD *a1, _OWORD *a2)
{
  OUTLINED_FUNCTION_86_0(a1, a2);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_45_1();
  v2();
  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_45_1();
  v3();
  return OUTLINED_FUNCTION_136();
}

void *assignWithTake for SUM_NON_INT(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v10[-1].Description + 5))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v14[-1].Description + 5))(v12, v13, v14);
  uint64_t v15 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *((unsigned char *)a1 + v15) = *((unsigned char *)a2 + v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for SUM_NON_INT(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_2);
}

uint64_t storeEnumTagSinglePayload for SUM_NON_INT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_2);
}

uint64_t type metadata accessor for SUM_NON_INT(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for SUM_NON_INT);
}

void initializeBufferWithCopyOfBuffer for COUNT()
{
  OUTLINED_FUNCTION_38_0();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_3_9();
  if ((*(_DWORD *)(v5 + 80) & 0x20000) != 0)
  {
    OUTLINED_FUNCTION_141();
  }
  else
  {
    OUTLINED_FUNCTION_99();
    OUTLINED_FUNCTION_4_3();
    uint64_t v7 = *(void (**)(void))(v6 + 16);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_16_1();
    v7();
    OUTLINED_FUNCTION_210();
    OUTLINED_FUNCTION_4_3();
    uint64_t v8 = OUTLINED_FUNCTION_73_0();
    v9(v8);
    *(void *)(v4 + *(int *)(v0 + 28)) = *(void *)(v2 + *(int *)(v0 + 28));
  }
  OUTLINED_FUNCTION_34();
}

uint64_t destroy for AVG(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_2_4();
  v4();
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_4_3();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);

  return v8(v5, v6);
}

void initializeWithCopy for COUNT()
{
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_87_0(v0, v1);
  OUTLINED_FUNCTION_4_3();
  uint64_t v3 = *(void (**)(void))(v2 + 16);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_16_1();
  v3();
  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_4_3();
  uint64_t v4 = OUTLINED_FUNCTION_73_0();
  v5(v4);
  OUTLINED_FUNCTION_199();
  OUTLINED_FUNCTION_34();
}

void *assignWithCopy for TOTAL(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v9[-1].Description + 3))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v13[-1].Description + 3))(v11, v12, v13);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for COUNT(_OWORD *a1, _OWORD *a2)
{
  OUTLINED_FUNCTION_86_0(a1, a2);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_45_1();
  v2();
  OUTLINED_FUNCTION_79_0();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_45_1();
  v3();
  return OUTLINED_FUNCTION_199();
}

void *assignWithTake for TOTAL(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SQLExpression();
  (*((void (**)(char *, char *, ValueMetadata *))v10[-1].Description + 5))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v14[-1].Description + 5))(v12, v13, v14);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for TOTAL(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E7D8ECC);
}

uint64_t __swift_get_extra_inhabitant_indexTm()
{
  OUTLINED_FUNCTION_155();
  if (v3) {
    return OUTLINED_FUNCTION_94(*(void *)(v0 + 8));
  }
  uint64_t v5 = v2;
  uint64_t v6 = v1;
  type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_3_9();
  if (*(_DWORD *)(v8 + 84) == v6)
  {
    uint64_t v9 = v7;
    uint64_t v10 = *(int *)(v5 + 20);
  }
  else
  {
    uint64_t v9 = type metadata accessor for SQLDataType();
    uint64_t v10 = *(int *)(v5 + 24);
  }

  return __swift_getEnumTagSinglePayload(v0 + v10, v6, (uint64_t)v9);
}

uint64_t storeEnumTagSinglePayload for TOTAL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E7D8F80);
}

void __swift_store_extra_inhabitant_indexTm()
{
  OUTLINED_FUNCTION_98_0();
  if (v4)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    uint64_t v5 = v3;
    int v6 = v2;
    type metadata accessor for SQLExpression();
    OUTLINED_FUNCTION_3_9();
    if (*(_DWORD *)(v7 + 84) == v6)
    {
      uint64_t v8 = *(int *)(v5 + 20);
    }
    else
    {
      type metadata accessor for SQLDataType();
      uint64_t v8 = *(int *)(v5 + 24);
    }
    uint64_t v9 = OUTLINED_FUNCTION_154(v8);
    __swift_storeEnumTagSinglePayload(v9, v10, v11, v12);
  }
}

uint64_t type metadata accessor for TOTAL(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for TOTAL);
}

uint64_t *initializeBufferWithCopyOfBuffer for GROUP_CONCAT(uint64_t *a1, uint64_t *a2, int *a3)
{
  char v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    uint64_t *v4 = *a2;
    char v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SQLExpression();
    uint64_t v12 = (void (*)(char *, char *, ValueMetadata *))*((void *)v11[-1].Description + 2);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v13, 1, (uint64_t)v11))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      v12(v14, v15, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, (uint64_t)v11);
    }
    uint64_t v18 = a3[7];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = type metadata accessor for SQLDataType();
    (*((void (**)(char *, char *, ValueMetadata *))v21[-1].Description + 2))(v19, v20, v21);
    uint64_t v22 = a3[8];
    char v23 = (uint64_t *)((char *)v4 + v22);
    char v24 = (uint64_t *)((char *)a2 + v22);
    uint64_t v25 = v24[1];
    *char v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for GROUP_CONCAT(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + a2[5];
  int v5 = type metadata accessor for SQLExpression();
  int v6 = (void (*)(uint64_t, ValueMetadata *))*((void *)v5[-1].Description + 1);
  v6(v4, v5);
  uint64_t v7 = a1 + a2[6];
  if (!__swift_getEnumTagSinglePayload(v7, 1, (uint64_t)v5)) {
    v6(v7, v5);
  }
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for SQLDataType();
  (*((void (**)(uint64_t, ValueMetadata *))v9[-1].Description + 1))(v8, v9);

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for GROUP_CONCAT(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SQLExpression();
  uint64_t v11 = (void (*)(char *, char *, ValueMetadata *))*((void *)v10[-1].Description + 2);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v12, 1, (uint64_t)v10))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v11(v13, v14, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, (uint64_t)v10);
  }
  uint64_t v16 = a3[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v19[-1].Description + 2))(v17, v18, v19);
  uint64_t v20 = a3[8];
  uint64_t v21 = (void *)((char *)a1 + v20);
  uint64_t v22 = (void *)((char *)a2 + v20);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for GROUP_CONCAT(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SQLExpression();
  Description = v9[-1].Description;
  uint64_t v11 = (void (*)(char *, char *, ValueMetadata *))Description[3];
  v11(v7, v8, v9);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1 + v12, 1, (uint64_t)v9);
  int v16 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, (uint64_t)v9);
  if (!EnumTagSinglePayload)
  {
    if (!v16)
    {
      v11(v13, v14, v9);
      goto LABEL_7;
    }
    ((void (*)(char *, ValueMetadata *))Description[1])(v13, v9);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, ValueMetadata *))Description[2])(v13, v14, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, (uint64_t)v9);
LABEL_7:
  uint64_t v18 = a3[7];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v21[-1].Description + 3))(v19, v20, v21);
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)((char *)a1 + v22);
  char v24 = (void *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for GROUP_CONCAT(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SQLExpression();
  uint64_t v10 = (void (*)(char *, char *, ValueMetadata *))*((void *)v9[-1].Description + 4);
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  if (__swift_getEnumTagSinglePayload((uint64_t)a2 + v11, 1, (uint64_t)v9))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
    memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    v10(v12, v13, v9);
    __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, (uint64_t)v9);
  }
  uint64_t v15 = a3[7];
  int v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v18[-1].Description + 4))(v16, v17, v18);
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  return a1;
}

void *assignWithTake for GROUP_CONCAT(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SQLExpression();
  Description = v10[-1].Description;
  uint64_t v12 = (void (*)(char *, char *, ValueMetadata *))Description[5];
  v12(v8, v9, v10);
  uint64_t v13 = a3[6];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)a1 + v13, 1, (uint64_t)v10);
  int v17 = __swift_getEnumTagSinglePayload((uint64_t)v15, 1, (uint64_t)v10);
  if (!EnumTagSinglePayload)
  {
    if (!v17)
    {
      v12(v14, v15, v10);
      goto LABEL_7;
    }
    ((void (*)(char *, ValueMetadata *))Description[1])(v14, v10);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  ((void (*)(char *, char *, ValueMetadata *))Description[4])(v14, v15, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, (uint64_t)v10);
LABEL_7:
  uint64_t v19 = a3[7];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t v22 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v22[-1].Description + 5))(v20, v21, v22);
  uint64_t v23 = a3[8];
  char v24 = (void *)((char *)a1 + v23);
  uint64_t v25 = (void *)((char *)a2 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  void *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for GROUP_CONCAT(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E7D9AD8);
}

uint64_t sub_18E7D9AD8()
{
  OUTLINED_FUNCTION_155();
  if (v3) {
    return OUTLINED_FUNCTION_94(*(void *)(v0 + 8));
  }
  int v5 = v2;
  uint64_t v6 = v1;
  type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_3_9();
  if (*(_DWORD *)(v8 + 84) == v6)
  {
    uint64_t v9 = v7;
    uint64_t v10 = v5[5];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
    OUTLINED_FUNCTION_3_9();
    if (*(_DWORD *)(v12 + 84) == v6)
    {
      uint64_t v9 = v11;
      uint64_t v10 = v5[6];
    }
    else
    {
      uint64_t v9 = type metadata accessor for SQLDataType();
      uint64_t v10 = v5[7];
    }
  }

  return __swift_getEnumTagSinglePayload(v0 + v10, v6, (uint64_t)v9);
}

uint64_t storeEnumTagSinglePayload for GROUP_CONCAT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E7D9BB4);
}

void sub_18E7D9BB4()
{
  OUTLINED_FUNCTION_98_0();
  if (v4)
  {
    *(void *)(v1 + 8) = (v0 - 1);
  }
  else
  {
    int v5 = v3;
    int v6 = v2;
    type metadata accessor for SQLExpression();
    OUTLINED_FUNCTION_3_9();
    if (*(_DWORD *)(v7 + 84) == v6)
    {
      uint64_t v8 = v5[5];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
      OUTLINED_FUNCTION_3_9();
      if (*(_DWORD *)(v9 + 84) == v6)
      {
        uint64_t v8 = v5[6];
      }
      else
      {
        type metadata accessor for SQLDataType();
        uint64_t v8 = v5[7];
      }
    }
    uint64_t v10 = OUTLINED_FUNCTION_154(v8);
    __swift_storeEnumTagSinglePayload(v10, v11, v12, v13);
  }
}

uint64_t type metadata accessor for GROUP_CONCAT(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for GROUP_CONCAT);
}

void type metadata completion function for GROUP_CONCAT()
{
  type metadata accessor for SQLExpression();
  if (v0 <= 0x3F)
  {
    type metadata accessor for SQLExpression?();
    if (v1 <= 0x3F)
    {
      type metadata accessor for SQLDataType();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for SQLExpression?()
{
  if (!lazy cache variable for type metadata for SQLExpression?)
  {
    type metadata accessor for SQLExpression();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SQLExpression?);
    }
  }
}

uint64_t type metadata instantiation function for MIN(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t type metadata accessor for MIN()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for MIN()
{
  uint64_t result = (uint64_t)type metadata accessor for SQLExpression();
  if (v1 <= 0x3F)
  {
    uint64_t result = (uint64_t)type metadata accessor for SQLDataType();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for Optional();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t assignWithCopy for MIN()
{
  OUTLINED_FUNCTION_102();
  *unint64_t v2 = *v1;
  unint64_t v3 = *(void **)(v0 + 8);
  *(void *)(v0 + 8) = v1[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_4_3();
  uint64_t v5 = v4 + 24;
  uint64_t v6 = OUTLINED_FUNCTION_25_3();
  v7(v6);
  uint64_t v8 = *(void *)(v5 + 40);
  type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_4_3();
  uint64_t v10 = v9 + 24;
  uint64_t v11 = OUTLINED_FUNCTION_34_2();
  v12(v11);
  OUTLINED_FUNCTION_104(*(void *)(v10 + 40));
  uint64_t v13 = (void *)v3[1];
  v3[1] = *(void *)(v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_9();
  uint64_t v15 = v14;
  int v16 = OUTLINED_FUNCTION_65_0(*(unsigned __int8 *)(v14 + 80));
  if (v8)
  {
    if (!v16)
    {
      uint64_t v22 = OUTLINED_FUNCTION_76_0();
      v23(v22);
      OUTLINED_FUNCTION_75_0();
      return v0;
    }
    int v17 = *(_DWORD *)(v15 + 84);
    size_t v18 = *(void *)(v15 + 64);
  }
  else
  {
    if (!v16)
    {
      uint64_t v24 = OUTLINED_FUNCTION_76_0();
      v25(v24);
      return v0;
    }
    uint64_t v19 = v15 + 8;
    OUTLINED_FUNCTION_14_2();
    v20();
    int v17 = *(_DWORD *)(v19 + 76);
    size_t v18 = *(void *)(v19 + 56);
  }
  if (v17) {
    size_t v21 = v18;
  }
  else {
    size_t v21 = v18 + 1;
  }
  memcpy(v13, v3, v21);
  return v0;
}

uint64_t initializeWithTake for MIN()
{
  OUTLINED_FUNCTION_102();
  _OWORD *v4 = *v3;
  type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_4_3();
  uint64_t v5 = OUTLINED_FUNCTION_25_3();
  v6(v5);
  type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_4_3();
  uint64_t v7 = OUTLINED_FUNCTION_34_2();
  v8(v7);
  OUTLINED_FUNCTION_145();
  *uint64_t v10 = *v9;
  OUTLINED_FUNCTION_55_1();
  OUTLINED_FUNCTION_144();
  if (__swift_getEnumTagSinglePayload(v2, 1, v1))
  {
    OUTLINED_FUNCTION_125();
  }
  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_190();
    v12(v11);
    OUTLINED_FUNCTION_75_0();
  }
  return v0;
}

void *assignWithTake for MIN()
{
  OUTLINED_FUNCTION_102();
  uint64_t v4 = v3[1];
  void *v0 = *v3;
  v0[1] = v4;
  swift_bridgeObjectRelease();
  type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_4_3();
  uint64_t v6 = v5 + 40;
  uint64_t v7 = OUTLINED_FUNCTION_25_3();
  v8(v7);
  uint64_t v9 = *(void *)(v6 + 24);
  type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_4_3();
  uint64_t v11 = v10 + 40;
  uint64_t v12 = OUTLINED_FUNCTION_34_2();
  v13(v12);
  OUTLINED_FUNCTION_104(*(void *)(v11 + 24));
  v2[1] = *(void *)(v9 + 8);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_9();
  uint64_t v15 = v14;
  int v16 = OUTLINED_FUNCTION_65_0(*(unsigned __int8 *)(v14 + 80));
  if (v9)
  {
    if (!v16)
    {
      uint64_t v22 = OUTLINED_FUNCTION_76_0();
      v23(v22);
      OUTLINED_FUNCTION_75_0();
      return v0;
    }
    int v17 = *(_DWORD *)(v15 + 84);
    size_t v18 = *(void *)(v15 + 64);
  }
  else
  {
    if (!v16)
    {
      uint64_t v24 = OUTLINED_FUNCTION_76_0();
      v25(v24);
      return v0;
    }
    uint64_t v19 = v15 + 8;
    OUTLINED_FUNCTION_14_2();
    v20();
    int v17 = *(_DWORD *)(v19 + 76);
    size_t v18 = *(void *)(v19 + 56);
  }
  if (v17) {
    size_t v21 = v18;
  }
  else {
    size_t v21 = v18 + 1;
  }
  memcpy(v1, v2, v21);
  return v0;
}

uint64_t getEnumTagSinglePayload for MIN(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SQLExpression();
  Description = v6[-1].Description;
  uint64_t v8 = *((unsigned int *)Description + 21);
  uint64_t v9 = type metadata accessor for SQLDataType();
  uint64_t v10 = (unsigned int *)v9[-1].Description;
  uint64_t v11 = v10[21];
  if (v8 <= v11) {
    unsigned int v12 = v10[21];
  }
  else {
    unsigned int v12 = v8;
  }
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = *(unsigned int *)(v13 + 84);
  unsigned int v15 = v14 - 1;
  if (!v14) {
    unsigned int v15 = 0;
  }
  if (v12 <= v15) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = v12;
  }
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = v16;
  }
  uint64_t v18 = *((unsigned __int8 *)Description + 80);
  uint64_t v19 = Description[8];
  uint64_t v20 = *((unsigned __int8 *)v10 + 80);
  uint64_t v21 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v22 = *(void *)(v13 + 64);
  if (v14) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = v22 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v24 = *((void *)v9[-1].Description + 8) + 7;
  uint64_t v25 = v21 + 16;
  if (a2 <= v17) {
    goto LABEL_35;
  }
  uint64_t v26 = v23 + ((v25 + ((v24 + ((v19 + v20 + ((v18 + 16) & ~v18)) & ~v20)) & 0xFFFFFFFFFFFFFFF8)) & ~v21);
  char v27 = 8 * v26;
  if (v26 > 3) {
    goto LABEL_18;
  }
  unsigned int v29 = ((a2 - v17 + ~(-1 << v27)) >> v27) + 1;
  if (HIWORD(v29))
  {
    int v28 = *(_DWORD *)((char *)a1 + v26);
    if (v28) {
      goto LABEL_25;
    }
LABEL_35:
    if ((v16 & 0x80000000) == 0) {
      return OUTLINED_FUNCTION_94(*((void *)a1 + 1));
    }
    uint64_t v34 = ((unint64_t)a1 + v18 + 16) & ~v18;
    if (v8 == v17)
    {
      uint64_t v11 = v8;
      uint64_t v35 = (uint64_t)v6;
LABEL_41:
      return __swift_getEnumTagSinglePayload(v34, v11, v35);
    }
    uint64_t v34 = (v34 + v19 + v20) & ~v20;
    if (v11 == v17)
    {
      uint64_t v35 = (uint64_t)v9;
      goto LABEL_41;
    }
    if (v14 >= 2)
    {
      unsigned int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((v25 + ((v24 + v34) & 0xFFFFFFFFFFFFFFF8)) & ~v21, v14, *(void *)(a3 + 16));
      if (EnumTagSinglePayload >= 2) {
        return EnumTagSinglePayload - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  if (v29 > 0xFF)
  {
    int v28 = *(unsigned __int16 *)((char *)a1 + v26);
    if (*(unsigned __int16 *)((char *)a1 + v26)) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  if (v29 < 2) {
    goto LABEL_35;
  }
LABEL_18:
  int v28 = *((unsigned __int8 *)a1 + v26);
  if (!*((unsigned char *)a1 + v26)) {
    goto LABEL_35;
  }
LABEL_25:
  int v30 = (v28 - 1) << v27;
  if (v26 > 3) {
    int v30 = 0;
  }
  if (v26)
  {
    if (v26 <= 3) {
      int v31 = v26;
    }
    else {
      int v31 = 4;
    }
    switch(v31)
    {
      case 2:
        int v32 = *a1;
        break;
      case 3:
        int v32 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v32 = *(_DWORD *)a1;
        break;
      default:
        int v32 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v32 = 0;
  }
  return v17 + (v32 | v30) + 1;
}

void storeEnumTagSinglePayload for MIN()
{
  OUTLINED_FUNCTION_38_0();
  uint64_t v1 = v0;
  unsigned int v3 = v2;
  unsigned int v5 = v4;
  uint64_t v7 = v6;
  Description = type metadata accessor for SQLExpression()[-1].Description;
  unsigned int v9 = Description[21];
  int v10 = 0;
  uint64_t v11 = type metadata accessor for SQLDataType()[-1].Description;
  unsigned int v12 = v11[21];
  if (v9 <= v12) {
    unsigned int v13 = v11[21];
  }
  else {
    unsigned int v13 = v9;
  }
  uint64_t v14 = *(void *)(*(void *)(v1 + 16) - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  unsigned int v16 = v15 - 1;
  if (!v15) {
    unsigned int v16 = 0;
  }
  if (v13 > v16) {
    unsigned int v16 = v13;
  }
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = v16;
  }
  unint64_t v18 = (*(unsigned __int8 *)(v14 + 80)
       + 16
       + ((*((void *)v11 + 8)
         + 7
         + ((*((void *)Description + 8)
           + *((unsigned __int8 *)v11 + 80)
           + ((*((unsigned __int8 *)Description + 80) + 16) & ~(unint64_t)*((unsigned __int8 *)Description + 80))) & ~(unint64_t)*((unsigned __int8 *)v11 + 80))) & 0xFFFFFFFFFFFFFFF8)) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v19 = *(void *)(v14 + 64);
  if (!v15) {
    ++v19;
  }
  size_t v20 = v19 + v18;
  char v21 = 8 * (v19 + v18);
  if (v3 > v17)
  {
    if (v20 <= 3)
    {
      unsigned int v22 = ((v3 - v17 + ~(-1 << v21)) >> v21) + 1;
      if (HIWORD(v22))
      {
        int v10 = 4;
      }
      else if (v22 >= 0x100)
      {
        int v10 = 2;
      }
      else
      {
        int v10 = v22 > 1;
      }
    }
    else
    {
      int v10 = 1;
    }
  }
  if (v17 < v5)
  {
    unsigned int v23 = ~v17 + v5;
    if (v20 < 4)
    {
      int v24 = (v23 >> v21) + 1;
      if (v20)
      {
        int v25 = v23 & ~(-1 << v21);
        bzero(v7, v20);
        if (v20 == 3)
        {
          _WORD *v7 = v25;
          *((unsigned char *)v7 + 2) = BYTE2(v25);
        }
        else if (v20 == 2)
        {
          _WORD *v7 = v25;
        }
        else
        {
          *(unsigned char *)uint64_t v7 = v25;
        }
      }
    }
    else
    {
      bzero(v7, v20);
      *(_DWORD *)uint64_t v7 = v23;
      int v24 = 1;
    }
    switch(v10)
    {
      case 1:
        *((unsigned char *)v7 + v20) = v24;
        goto LABEL_49;
      case 2:
        *(_WORD *)((char *)v7 + v20) = v24;
        goto LABEL_49;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)((char *)v7 + v20) = v24;
        goto LABEL_49;
      default:
        goto LABEL_49;
    }
  }
  switch(v10)
  {
    case 1:
      *((unsigned char *)v7 + v20) = 0;
      if (!v5) {
        goto LABEL_49;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)((char *)v7 + v20) = 0;
      if (!v5) {
        goto LABEL_49;
      }
      goto LABEL_33;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x18E7DA9F8);
    case 4:
      *(_DWORD *)((char *)v7 + v20) = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (!v5) {
        goto LABEL_49;
      }
LABEL_33:
      if ((v16 & 0x80000000) == 0)
      {
        if ((v5 & 0x80000000) != 0)
        {
          *(void *)uint64_t v7 = v5 ^ 0x80000000;
          *((void *)v7 + 1) = 0;
        }
        else
        {
          *((void *)v7 + 1) = v5 - 1;
        }
LABEL_49:
        OUTLINED_FUNCTION_34();
        return;
      }
      if (v9 != v17 && v12 != v17 && v15 < 2) {
        goto LABEL_49;
      }
      OUTLINED_FUNCTION_34();
      __swift_storeEnumTagSinglePayload(v26, v27, v28, v29);
      return;
  }
}

uint64_t type metadata accessor for MAX()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t *initializeBufferWithCopyOfBuffer for AggregationEvent(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    unint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (unint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for StorableValue(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        uint64_t v8 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v8)) {
          goto LABEL_13;
        }
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        goto LABEL_14;
      case 3u:
      case 4u:
        unint64_t v11 = a2[1];
        *a1 = *a2;
        a1[1] = v11;
        swift_bridgeObjectRetain();
        goto LABEL_14;
      case 5u:
        unint64_t v12 = a2[1];
        if (v12 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          unint64_t v14 = *a2;
          outlined copy of Data._Representation(*a2, a2[1]);
          *a1 = v14;
          a1[1] = v12;
        }
        goto LABEL_14;
      case 6u:
        uint64_t v8 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v8))
        {
          uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(a1, a2, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
LABEL_13:
          (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
          __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v8);
        }
LABEL_14:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
        break;
    }
    uint64_t v15 = *(int *)(a3 + 20);
    unsigned int v16 = (char *)a1 + v15;
    unsigned int v17 = (char *)a2 + v15;
    unint64_t v18 = type metadata accessor for SQLDataType();
    (*((void (**)(char *, char *, ValueMetadata *))v18[-1].Description + 2))(v16, v17, v18);
  }
  return a1;
}

unint64_t *initializeWithCopy for AggregationEvent(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for StorableValue(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t v7 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7)) {
        goto LABEL_11;
      }
      uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      goto LABEL_12;
    case 3u:
    case 4u:
      unint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    case 5u:
      unint64_t v10 = a2[1];
      if (v10 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        unint64_t v12 = *a2;
        outlined copy of Data._Representation(*a2, a2[1]);
        *a1 = v12;
        a1[1] = v10;
      }
      goto LABEL_12;
    case 6u:
      uint64_t v7 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
      {
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
LABEL_11:
        (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      break;
  }
  uint64_t v13 = *(int *)(a3 + 20);
  unint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  unsigned int v16 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v16[-1].Description + 2))(v14, v15, v16);
  return a1;
}

unint64_t *assignWithCopy for AggregationEvent(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)a1, (void (*)(void))type metadata accessor for StorableValue);
    uint64_t v6 = type metadata accessor for StorableValue(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 2u:
        uint64_t v7 = type metadata accessor for Date();
        if (!__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7)) {
          goto LABEL_12;
        }
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
        goto LABEL_13;
      case 3u:
      case 4u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_13;
      case 5u:
        unint64_t v9 = a2[1];
        if (v9 >> 60 == 15)
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
        }
        else
        {
          unint64_t v11 = *a2;
          outlined copy of Data._Representation(*a2, a2[1]);
          *a1 = v11;
          a1[1] = v9;
        }
        goto LABEL_13;
      case 6u:
        uint64_t v7 = type metadata accessor for UUID();
        if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
        {
          uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
          memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
        }
        else
        {
LABEL_12:
          (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
          __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
        }
LABEL_13:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
        break;
    }
  }
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (char *)a1 + v12;
  unint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v15[-1].Description + 3))(v13, v14, v15);
  return a1;
}

char *initializeWithTake for AggregationEvent(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for StorableValue(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 6)
  {
    uint64_t v10 = type metadata accessor for UUID();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v10))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
      memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v10);
    }
    goto LABEL_11;
  }
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for Date();
    if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v8))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v8);
    }
LABEL_11:
    swift_storeEnumTagMultiPayload();
    goto LABEL_12;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_12:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  unint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v15[-1].Description + 4))(v13, v14, v15);
  return a1;
}

char *assignWithTake for AggregationEvent(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)a1, (void (*)(void))type metadata accessor for StorableValue);
    uint64_t v6 = type metadata accessor for StorableValue(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 6)
    {
      uint64_t v10 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v10))
      {
        uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(a1, a2, v10);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v10);
      }
      goto LABEL_12;
    }
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v8))
      {
        uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v8);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      goto LABEL_13;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
LABEL_13:
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = &a1[v12];
  unint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for SQLDataType();
  (*((void (**)(char *, char *, ValueMetadata *))v15[-1].Description + 5))(v13, v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for AggregationEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E7DB7A0);
}

uint64_t sub_18E7DB7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_3_9();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v8 = type metadata accessor for SQLDataType();
    uint64_t v9 = a1 + *(int *)(a3 + 20);
  }

  return __swift_getEnumTagSinglePayload(v9, a2, (uint64_t)v8);
}

uint64_t storeEnumTagSinglePayload for AggregationEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E7DB834);
}

uint64_t sub_18E7DB834(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_3_9();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    uint64_t v10 = type metadata accessor for SQLDataType();
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }

  return __swift_storeEnumTagSinglePayload(v11, a2, a2, (uint64_t)v10);
}

uint64_t type metadata completion function for AggregationEvent()
{
  uint64_t result = type metadata accessor for StorableValue(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = (uint64_t)type metadata accessor for SQLDataType();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(unsigned char *a1@<X8>)
{
  return partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  void *result;
  uint64_t v5;

  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

unsigned char *closure #1 in closure #1 in Double.init<A>(_:)partial apply@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return partial apply for closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

uint64_t OUTLINED_FUNCTION_66_0(uint64_t a1)
{
  *(void *)uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 28));
  *(unsigned char *)(v2 + 8) = 0;
  return type metadata accessor for StorableValue(0);
}

double OUTLINED_FUNCTION_108()
{
  return *(double *)(v0 - 88);
}

uint64_t OUTLINED_FUNCTION_120()
{
  return type metadata accessor for StorableValue(0);
}

uint64_t OUTLINED_FUNCTION_121()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_123()
{
  return _swift_stdlib_strtod_clocale();
}

uint64_t OUTLINED_FUNCTION_124()
{
  uint64_t v3 = *v0;
  unint64_t v4 = v0[1];
  *(void *)(v1 - 104) = v3;
  *(void *)(v1 - 96) = v4;
  return outlined copy of Data?(v3, v4);
}

uint64_t OUTLINED_FUNCTION_127()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_129()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_131(uint64_t a1, uint64_t a2)
{
  __swift_storeEnumTagSinglePayload(v2, a2, 1, v4);
  return v3;
}

uint64_t OUTLINED_FUNCTION_135(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = *(void *)(v2 - 264);
  return _s12BiomeStreams13StorableValueOWOhTm_1(v4, a2);
}

uint64_t OUTLINED_FUNCTION_150()
{
  uint64_t v4 = *(void *)(v2 - 304);
  return _s10Foundation4UUIDVSgWObTm_0(v1, v4, v0);
}

uint64_t OUTLINED_FUNCTION_153(uint64_t a1)
{
  *(void *)(v1 + *(int *)(a1 + 28)) = v3;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_154@<X0>(uint64_t a1@<X8>)
{
  return v1 + a1;
}

uint64_t OUTLINED_FUNCTION_156@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

uint64_t OUTLINED_FUNCTION_158()
{
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(unsigned char *)(v0 + 64) = 3;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_159(uint64_t a1)
{
  uint64_t v5 = v2 + *(int *)(a1 + 20);
  uint64_t v6 = *(void *)(v3 - 128);
  return SQLExpressionEvaluator.execute(expression:payload:)(v5, v6, v1);
}

uint64_t OUTLINED_FUNCTION_160@<X0>(void *a1@<X8>)
{
  uint64_t v2 = a1[1];
  *uint64_t v1 = *a1;
  v1[1] = v2;
  return 0;
}

void OUTLINED_FUNCTION_161(uint64_t a1@<X8>)
{
  *(unsigned char *)(v1 + a1) = 1;
}

double OUTLINED_FUNCTION_170()
{
  return *(double *)(v0 - 88);
}

uint64_t OUTLINED_FUNCTION_171()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_175()
{
  *(void *)(v1 - 120) = v0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_176()
{
  *(void *)(v1 - 120) = v0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_177@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a3 - 256);
  return _s10Foundation4UUIDVSgWObTm_0(a1, v4, a2);
}

uint64_t OUTLINED_FUNCTION_179()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

uint64_t OUTLINED_FUNCTION_180()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_181()
{
  outlined consume of Data?(v1, v0);
  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_186()
{
  return SQLExpression.sql.getter();
}

uint64_t OUTLINED_FUNCTION_187(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v6 - 120) = a5;
  *(void *)(v6 - 112) = v5;
  *(void *)(v6 - 128) = a4;
  *(void *)(v6 - 160) = a1;
  *(void *)(v6 - 152) = a2;
  return type metadata accessor for String.Encoding();
}

uint64_t OUTLINED_FUNCTION_192()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_194(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return _s12BiomeStreams13StorableValueOWOcTm_0(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_195(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return _s12BiomeStreams13StorableValueOWOcTm_0(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_198()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_199()
{
  *(void *)(v2 + *(int *)(v0 + 28)) = *(void *)(v1 + *(int *)(v0 + 28));
  return v2;
}

uint64_t OUTLINED_FUNCTION_200(uint64_t result)
{
  *(void *)(v1 + *(int *)(result + 28)) = 0;
  *(unsigned char *)(v1 + *(int *)(result + 32)) = 0;
  return result;
}

__n128 *OUTLINED_FUNCTION_202(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_205()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_206()
{
  return type metadata accessor for StorableValue(0);
}

void OUTLINED_FUNCTION_207(uint64_t a1@<X8>)
{
  *(unsigned char *)(v1 + *(int *)(v2 + 32)) = a1 == 1;
}

uint64_t *OUTLINED_FUNCTION_209(uint64_t a1, uint64_t *a2)
{
  a2[3] = v2;
  return __swift_allocate_boxed_opaque_existential_0(a2);
}

ValueMetadata *OUTLINED_FUNCTION_210()
{
  return type metadata accessor for SQLDataType();
}

uint64_t OUTLINED_FUNCTION_212()
{
  return swift_dynamicCast();
}

uint64_t static LibraryBase.lookupDatabaseResource(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = OUTLINED_FUNCTION_0_15(a1, a2, a3);
  uint64_t v7 = v6(v5);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = v7 + 40; ; i += 16)
    {
      uint64_t v10 = *(void *)(i - 8);
      if ((*(uint64_t (**)(uint64_t))(*(void *)(*(void *)i + 8) + 8))(v10) == v3 && v11 == a2)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        return v10;
      }
      char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v13) {
        break;
      }
      if (!--v8)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v10;
}

uint64_t specialized static LibraryBase.view(for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[2] = a1;
  v28[3] = a2;
  v28[0] = 46;
  v28[1] = 0xE100000000000000;
  uint64_t v7 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 1, 1, v7);
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.range<A>(of:options:range:locale:)();
  char v9 = v8;
  outlined destroy of Locale?((uint64_t)v6);
  swift_bridgeObjectRelease();
  if (v9)
  {
    uint64_t v23 = static UnifiedLibrary.Library.databaseResources.getter();
    uint64_t v24 = *(void *)(v23 + 16);
    if (v24)
    {
      uint64_t v25 = v23 + 40;
      while (1)
      {
        uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v25 + 56))(a1, a2);
        if (v26) {
          break;
        }
        v25 += 16;
        if (!--v24) {
          goto LABEL_8;
        }
      }
      uint64_t v20 = v26;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_8:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = String.subscript.getter();
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    uint64_t v17 = MEMORY[0x192FAFFE0](v10, v12, v14, v16);
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t v20 = static UnifiedLibrary.Library.lookupDatabaseResource(identifier:)(v17, v19);
    uint64_t v22 = v21;
    swift_bridgeObjectRelease();
    if (v20) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(a1, a2, v20, v22);
    }
  }
  return v20;
}

uint64_t static LibraryBase.view(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32[2] = a1;
  v32[3] = a2;
  v32[0] = 46;
  v32[1] = 0xE100000000000000;
  uint64_t v11 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 1, 1, v11);
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.range<A>(of:options:range:locale:)();
  char v13 = v12;
  outlined destroy of Locale?((uint64_t)v10);
  swift_bridgeObjectRelease();
  if (v13)
  {
    uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
    uint64_t v28 = *(void *)(v27 + 16);
    if (v28)
    {
      uint64_t v29 = v27 + 40;
      while (1)
      {
        uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v29 + 56))(a1, a2);
        if (v30) {
          break;
        }
        v29 += 16;
        if (!--v28) {
          goto LABEL_8;
        }
      }
      uint64_t v24 = v30;
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_8:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v14 = String.subscript.getter();
    uint64_t v16 = v15;
    uint64_t v18 = v17;
    uint64_t v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t v21 = MEMORY[0x192FAFFE0](v14, v16, v18, v20);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v24 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 16))(v21, v23, a3, a4);
    uint64_t v26 = v25;
    swift_bridgeObjectRelease();
    if (v24) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(a1, a2, v24, v26);
    }
  }
  return v24;
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static LibraryBase.lookupDataflow(name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 + 16);
  if (v10)
  {
    memcpy(__dst, (const void *)(v8 + 32), sizeof(__dst));
    if (*(void *)&__dst[0] != a1 || *((void *)&__dst[0] + 1) != a2)
    {
      uint64_t v12 = 160;
      do
      {
        if (OUTLINED_FUNCTION_1_13()) {
          break;
        }
        if (!--v10) {
          goto LABEL_15;
        }
        memcpy(__dst, (const void *)(v9 + v12), sizeof(__dst));
        BOOL v13 = *(void *)&__dst[0] == a1 && *((void *)&__dst[0] + 1) == a2;
        v12 += 128;
      }
      while (!v13);
    }
    outlined retain of Dataflow((uint64_t)__dst);
    swift_bridgeObjectRelease();
    memcpy(v17, __dst, sizeof(v17));
    destructiveProjectEnumData for StorableValue(v17, v14);
    uint64_t v15 = v17;
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    _s12BiomeStreams8DataflowVSgWOi0_(__dst);
    uint64_t v15 = __dst;
  }
  return outlined init with take of Dataflow?((uint64_t)v15, a5);
}

double _s12BiomeStreams8DataflowVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t outlined init with take of Dataflow?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Dataflow?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static LibraryBase.databaseResourceIdentifier(legacyViewName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = OUTLINED_FUNCTION_0_15(a1, a2, a3);
  uint64_t result = v6(v5);
  uint64_t v8 = result;
  uint64_t v20 = *(void *)(result + 16);
  if (v20)
  {
    unint64_t v9 = 0;
    uint64_t v21 = result + 32;
    uint64_t v19 = result;
    while (1)
    {
      if (v9 >= *(void *)(v8 + 16))
      {
        __break(1u);
        return result;
      }
      uint64_t v10 = (void *)(v21 + 16 * v9);
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      uint64_t v13 = (*(uint64_t (**)(void, uint64_t))(v12 + 48))(*v10, v12);
      uint64_t v14 = *(void *)(v13 + 16);
      if (v14) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_14:
      if (++v9 == v20) {
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v15 = v13 + 40;
    while (1)
    {
      if ((*(uint64_t (**)(void))(*(void *)v15 + 16))() == v3 && v16 == a2)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_18;
      }
      char v18 = OUTLINED_FUNCTION_1_13();
      swift_bridgeObjectRelease();
      if (v18) {
        break;
      }
      v15 += 16;
      if (!--v14)
      {
        uint64_t result = swift_bridgeObjectRelease_n();
        uint64_t v8 = v19;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_18:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(*(void *)(v12 + 8) + 8))(v11);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t specialized static LibraryBase.view(legacyViewName:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = static UnifiedLibrary.Library.databaseResources.getter();
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    unint64_t v7 = 0;
    uint64_t v8 = result + 32;
    uint64_t v17 = *(void *)(result + 16);
    uint64_t v18 = result;
    uint64_t v16 = result + 32;
    while (1)
    {
      if (v7 >= *(void *)(v5 + 16))
      {
        __break(1u);
        return result;
      }
      uint64_t v9 = (*(uint64_t (**)(void))(*(void *)(v8 + 16 * v7 + 8) + 48))();
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_14:
      if (++v7 == v6) {
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v11 = (void *)(v9 + 40);
    while (1)
    {
      uint64_t v12 = *(v11 - 1);
      if ((*(uint64_t (**)(uint64_t, void))(*v11 + 16))(v12, *v11) == a1 && v13 == a2)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
      char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v15) {
        break;
      }
      v11 += 2;
      if (!--v10)
      {
        uint64_t result = swift_bridgeObjectRelease_n();
        uint64_t v6 = v17;
        uint64_t v5 = v18;
        uint64_t v8 = v16;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_19:
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v12;
}

uint64_t static LibraryBase.view(legacyViewName:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = OUTLINED_FUNCTION_0_15(a1, a2, a3);
  uint64_t result = v6(v5);
  uint64_t v8 = result;
  uint64_t v9 = *(void *)(result + 16);
  if (v9)
  {
    unint64_t v10 = 0;
    uint64_t v11 = result + 32;
    uint64_t v20 = *(void *)(result + 16);
    uint64_t v21 = result;
    uint64_t v19 = result + 32;
    while (1)
    {
      if (v10 >= *(void *)(v8 + 16))
      {
        __break(1u);
        return result;
      }
      uint64_t v12 = (*(uint64_t (**)(void))(*(void *)(v11 + 16 * v10 + 8) + 48))();
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13) {
        break;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_14:
      if (++v10 == v9) {
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v14 = (void *)(v12 + 40);
    while (1)
    {
      uint64_t v15 = *(v14 - 1);
      if ((*(uint64_t (**)(uint64_t, void))(*v14 + 16))(v15, *v14) == v3 && v16 == a2)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
      char v18 = OUTLINED_FUNCTION_1_13();
      swift_bridgeObjectRelease();
      if (v18) {
        break;
      }
      v14 += 2;
      if (!--v13)
      {
        uint64_t result = swift_bridgeObjectRelease_n();
        uint64_t v9 = v20;
        uint64_t v8 = v21;
        uint64_t v11 = v19;
        goto LABEL_14;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_19:
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v15;
}

uint64_t dispatch thunk of static LibraryBase.databaseResources.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static LibraryBase.sqlViewToBiomeStreamMapping.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static LibraryBase.view(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static LibraryBase.orderedDataflows.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static LibraryBase.lookupDataflow(name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t dispatch thunk of static LibraryBase.databaseResourceIdentifier(legacyViewName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of static LibraryBase.view(legacyViewName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of static IntelligencePlatformView.legacyName.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static IntelligencePlatformView.version.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static IntelligencePlatformView.database.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static IntelligencePlatformView.uuid.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of static IntelligencePlatformView.configHash.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

id BMEventBase.init(jsonDictionary:error:)(uint64_t a1, void *a2)
{
  v12[1] = *(id *)MEMORY[0x1E4F143B8];
  id v3 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v12[0] = 0;
  id v5 = objc_msgSend(v3, sel_initWithJSONDictionary_error_, isa, v12);

  id v6 = v12[0];
  if (!v5)
  {
    unint64_t v7 = v6;
    uint64_t v8 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (a2)
    {
      uint64_t v9 = (void *)_convertErrorToNSError(_:)();
      id v10 = v9;
      *a2 = v9;
    }

    return 0;
  }
  return v5;
}

ValueMetadata *type metadata accessor for Streams()
{
  return &type metadata for Streams;
}

id one-time initialization function for general(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.general);
}

uint64_t static Logging.general.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for general, (uint64_t)static Logging.general, a1);
}

id one-time initialization function for pubSub(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.pubSub);
}

uint64_t static Logging.pubSub.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for pubSub, (uint64_t)static Logging.pubSub, a1);
}

id one-time initialization function for storage(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.storage);
}

uint64_t static Logging.storage.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for storage, (uint64_t)static Logging.storage, a1);
}

id one-time initialization function for source(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.source);
}

uint64_t static Logging.source.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for source, (uint64_t)static Logging.source, a1);
}

id one-time initialization function for stream(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.stream);
}

uint64_t static Logging.stream.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for stream, (uint64_t)static Logging.stream, a1);
}

id one-time initialization function for metrics(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.metrics);
}

uint64_t static Logging.metrics.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for metrics, (uint64_t)static Logging.metrics, a1);
}

id one-time initialization function for accessService(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.accessService);
}

uint64_t static Logging.accessService.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for accessService, (uint64_t)static Logging.accessService, a1);
}

id one-time initialization function for privacy(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.privacy);
}

uint64_t static Logging.privacy.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(one-time initialization token for privacy, (uint64_t)static Logging.privacy, a1);
}

id one-time initialization function for compute(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.compute);
}

uint64_t static Logging.compute.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for compute, (uint64_t)static Logging.compute, a1);
}

id one-time initialization function for sensor(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.sensor);
}

uint64_t static Logging.sensor.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for sensor, (uint64_t)static Logging.sensor, a1);
}

id one-time initialization function for test(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.test);
}

uint64_t static Logging.test.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for test, (uint64_t)static Logging.test, a1);
}

id one-time initialization function for sync(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.sync);
}

uint64_t static Logging.sync.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for sync, (uint64_t)static Logging.sync, a1);
}

id one-time initialization function for DSL(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.DSL);
}

uint64_t static Logging.DSL.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for DSL, (uint64_t)static Logging.DSL, a1);
}

id one-time initialization function for SQL(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.SQL);
}

uint64_t static Logging.SQL.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for SQL, (uint64_t)static Logging.SQL, a1);
}

id one-time initialization function for flexibleStorage(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.flexibleStorage);
}

uint64_t static Logging.flexibleStorage.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for flexibleStorage, (uint64_t)static Logging.flexibleStorage, a1);
}

id one-time initialization function for library(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.library);
}

uint64_t static Logging.library.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for library, (uint64_t)static Logging.library, a1);
}

id one-time initialization function for distributedContext(uint64_t a1)
{
  return one-time initialization function for general(a1, static Logging.distributedContext);
}

id one-time initialization function for general(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  id result = (id)__biome_log_for_category();
  if (result) {
    return (id)Logger.init(_:)();
  }
  __break(1u);
  return result;
}

uint64_t static Logging.distributedContext.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logging.general.getter(&one-time initialization token for distributedContext, (uint64_t)static Logging.distributedContext, a1);
}

uint64_t static Logging.general.getter@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v7(a3, v6, v5);
}

ValueMetadata *type metadata accessor for Logging()
{
  return &type metadata for Logging;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

id BMResourceSpecifier.__allocating_init(type:name:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  unint64_t v7 = (void *)MEMORY[0x192FAFF50](a2, a3);
  swift_bridgeObjectRelease();
  id v8 = objc_msgSend(v6, sel_initWithType_name_, a1, v7);

  return v8;
}

uint64_t DatabaseResourceToken.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

id static DatabaseResource.sqlDatabase(useCase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static DatabaseResource.sqlDatabase(useCase:)(a1, a2, a3, a4);
}

{
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v15[2];

  v15[1] = *(id *)MEMORY[0x1E4F143B8];
  id v8 = objc_msgSend(objc_allocWithZone((Class)BMSQLDatabase), sel_init);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a4 + 8) + 8))(a3);
  id v10 = (void *)MEMORY[0x192FAFF50](v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = (void *)MEMORY[0x192FAFF50](a1, a2);
  v15[0] = 0;
  LOBYTE(a3) = objc_msgSend(v8, sel_attachDatabaseWithResourceIdentifier_useCase_error_, v10, v11, v15);

  if (a3)
  {
    uint64_t v12 = v15[0];
  }
  else
  {
    uint64_t v13 = v15[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v8;
}

uint64_t static DatabaseResource.database(useCase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  return static DatabaseResource.database(useCase:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t result;

  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)(a4 + 8) + 8))(a3);
  uint64_t v11 = v10;
  uint64_t v12 = (void *)MEMORY[0x192FAFF50](a1, a2);
  type metadata accessor for SQLDatabaseHandle();
  swift_allocObject();
  id result = SQLDatabaseHandle.init(identifier:useCase:readOnly:)(v9, v11, v12, 1);
  if (!v5) {
    *a5 = result;
  }
  return result;
}

void static DatabaseResource.databaseResourceToken(useCase:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(void);
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  void *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  void (*v43)(void);
  char *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  id v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68[4];

  uint64_t v65 = a4;
  v68[2] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v64 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0_4();
  uint64_t v62 = v7;
  MEMORY[0x1F4188790](v8);
  id v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v11 - 8);
  OUTLINED_FUNCTION_10();
  uint64_t v57 = v12;
  uint64_t v63 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0_4();
  uint64_t v61 = v13;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_16();
  uint64_t v58 = v15;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v16);
  uint64_t v59 = (char *)&v49 - v17;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v18);
  uint64_t v60 = (char *)&v49 - v19;
  type metadata accessor for BMResourceSpecifier();
  uint64_t v20 = *(uint64_t (**)(void))(*(void *)(a3 + 8) + 8);
  OUTLINED_FUNCTION_9_3();
  uint64_t v21 = v20();
  uint64_t v23 = BMResourceSpecifier.__allocating_init(type:name:)(3, v21, v22);
  uint64_t v24 = a1;
  uint64_t v25 = v23;
  uint64_t v26 = (void *)MEMORY[0x192FAFF50](v24, a2);
  uint64_t v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4FB28]), sel_initWithUseCase_, v26);

  v68[0] = 0;
  uint64_t v28 = objc_msgSend(v27, sel_requestAccessToResource_mode_error_, v25, 1, v68);
  if (v28)
  {
    uint64_t v29 = v28;
    uint64_t v55 = v27;
    uint64_t v30 = v68[0];
    int v31 = objc_msgSend(v29, sel_path);
    if (v31)
    {
      int v32 = v31;
      uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v54 = v25;
      uint64_t v52 = v33;

      OUTLINED_FUNCTION_9_3();
      uint64_t v34 = v20();
      OUTLINED_FUNCTION_2_8(v34, v35);
      uint64_t v66 = String.init<A>(_:)();
      uint64_t v67 = v36;
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      uint64_t v51 = (void *)v66;
      uint64_t v50 = v67;
      uint64_t v56 = v29;
      uint64_t v37 = v63;
      __swift_storeEnumTagSinglePayload(v57, 1, 1, v63);
      uint64_t v38 = *MEMORY[0x1E4F276C0];
      uint64_t v39 = v62;
      uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v62 + 104);
      uint64_t v41 = v64;
      v40(v10, v38, v64);
      URL.init(filePath:directoryHint:relativeTo:)();
      v68[0] = v51;
      v68[1] = v50;
      v40(v10, v38, v41);
      lazy protocol witness table accessor for type String and conformance String();
      URL.appending<A>(component:directoryHint:)();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v41);
      uint64_t v42 = v61;
      uint64_t v43 = *(void (**)(void))(v61 + 8);
      OUTLINED_FUNCTION_7_4();
      v43();
      swift_bridgeObjectRelease();
      uint64_t v44 = v60;
      URL.standardizedFileURL.getter();

      OUTLINED_FUNCTION_7_4();
      v43();
      uint64_t v45 = v65;
      (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v65, v44, v37);
      *(void *)(v45 + *(int *)(type metadata accessor for DatabaseResourceToken() + 20)) = v56;
    }
    else
    {
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_8_3((uint64_t)"Access assertion ");
      uint64_t v66 = (uint64_t)v29;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BMAccessAssertion);
      _print_unlocked<A, B>(_:_:)();
      OUTLINED_FUNCTION_3_10();
      lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
      uint64_t v47 = swift_allocError();
      OUTLINED_FUNCTION_6_7(v47, v48);

      swift_unknownObjectRelease();
    }
  }
  else
  {
    uint64_t v46 = v68[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t static DatabaseResource.view(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_4();
  uint64_t v14 = v13;
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  char v18 = (char *)v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)v43 - v19;
  UUID.init(uuidString:)();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12) == 1)
  {
    outlined destroy of UUID?((uint64_t)v11);
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 48))(a3, a4);
LABEL_10:
    uint64_t v29 = v21;
    uint64_t v30 = *(void *)(v21 + 16);
    if (v30)
    {
      swift_bridgeObjectRetain();
      for (uint64_t i = v29 + 40; ; i += 16)
      {
        uint64_t v26 = *(void *)(i - 8);
        uint64_t v32 = OUTLINED_FUNCTION_13_4();
        v33(v32);
        uint64_t v51 = (*(uint64_t (**)(void))(*(void *)(v34 + 8) + 8))();
        uint64_t v52 = v35;
        v36._uint64_t countAndFlagsBits = 46;
        v36._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v36);
        uint64_t v37 = OUTLINED_FUNCTION_13_4();
        v39._uint64_t countAndFlagsBits = v38(v37);
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        if (v51 == a1 && v52 == a2)
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          return v26;
        }
        char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v41) {
          break;
        }
        if (!--v30)
        {
          swift_bridgeObjectRelease_n();
          return 0;
        }
      }
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      return 0;
    }
    return v26;
  }
  uint64_t v49 = a1;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v20, v11, v12);
  uint64_t v48 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 48);
  uint64_t v22 = v48(a3, a4);
  uint64_t v23 = *(void *)(v22 + 16);
  uint64_t v24 = (void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v50 = a2;
  if (!v23)
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = *v24;
LABEL_9:
    v28(v20, v12);
    a1 = v49;
    a2 = v50;
    uint64_t v21 = v48(a3, a4);
    goto LABEL_10;
  }
  v43[2] = a4 + 48;
  uint64_t v44 = a3;
  uint64_t v45 = v4;
  uint64_t v46 = a4;
  uint64_t v47 = v22;
  uint64_t v25 = (void *)(v22 + 40);
  v43[1] = (unint64_t)v24 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  while (1)
  {
    uint64_t v26 = *(v25 - 1);
    (*(void (**)(uint64_t, void))(*v25 + 48))(v26, *v25);
    char v27 = static UUID.== infix(_:_:)();
    uint64_t v28 = *v24;
    (*v24)(v18, v12);
    if (v27) {
      break;
    }
    v25 += 2;
    if (!--v23)
    {
      swift_bridgeObjectRelease();
      a4 = v46;
      a3 = v44;
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  v28(v20, v12);
  return v26;
}

void static DatabaseResource.databaseResourceToken(useCase:writable:)(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v61 = a5;
  LODWORD(v63) = a3;
  v66[2] = *(id *)MEMORY[0x1E4F143B8];
  type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0_4();
  uint64_t v59 = v9;
  uint64_t v60 = v8;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_10();
  uint64_t v57 = v10;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v11 - 8);
  OUTLINED_FUNCTION_10();
  uint64_t v53 = v12;
  uint64_t v62 = type metadata accessor for URL();
  OUTLINED_FUNCTION_0_4();
  uint64_t v58 = v13;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_16();
  uint64_t v54 = v15;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v16);
  uint64_t v55 = (char *)v50 - v17;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v18);
  uint64_t v56 = (char *)v50 - v19;
  type metadata accessor for BMResourceSpecifier();
  uint64_t v20 = *(uint64_t (**)(void))(*(void *)(a4 + 8) + 8);
  OUTLINED_FUNCTION_9_3();
  uint64_t v21 = v20();
  id v23 = BMResourceSpecifier.__allocating_init(type:name:)(3, v21, v22);
  uint64_t v24 = (void *)MEMORY[0x192FAFF50](a1, a2);
  id v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4FB28]), sel_initWithUseCase_, v24);

  if (v63) {
    uint64_t v26 = 3;
  }
  else {
    uint64_t v26 = 1;
  }
  v66[0] = 0;
  id v27 = objc_msgSend(v25, sel_requestAccessToResource_mode_error_, v23, v26, v66);
  if (v27)
  {
    uint64_t v28 = v27;
    id v29 = v66[0];
    id v30 = objc_msgSend(v28, sel_path);
    if (v30)
    {
      int v31 = v30;
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v50[2] = v33;
      v50[3] = v32;

      OUTLINED_FUNCTION_9_3();
      uint64_t v34 = v20();
      OUTLINED_FUNCTION_2_8(v34, v35);
      id v63 = v25;
      id v52 = v23;
      uint64_t v64 = String.init<A>(_:)();
      uint64_t v65 = v36;
      String.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      uint64_t v37 = v65;
      v50[0] = v64;
      v50[1] = v65;
      uint64_t v51 = v28;
      __swift_storeEnumTagSinglePayload(v53, 1, 1, v62);
      uint64_t v38 = *(void (**)(uint64_t))(v59 + 104);
      uint64_t v39 = OUTLINED_FUNCTION_5_4();
      v38(v39);
      URL.init(filePath:directoryHint:relativeTo:)();
      v66[0] = (id)v50[0];
      v66[1] = v37;
      uint64_t v40 = OUTLINED_FUNCTION_5_4();
      v38(v40);
      lazy protocol witness table accessor for type String and conformance String();
      URL.appending<A>(component:directoryHint:)();
      OUTLINED_FUNCTION_7_4();
      v41();
      uint64_t v42 = v58;
      uint64_t v43 = *(void (**)(void))(v58 + 8);
      uint64_t v44 = v62;
      OUTLINED_FUNCTION_7_4();
      v43();
      swift_bridgeObjectRelease();
      uint64_t v45 = v56;
      URL.standardizedFileURL.getter();

      OUTLINED_FUNCTION_7_4();
      v43();
      uint64_t v46 = v61;
      (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v61, v45, v44);
      *(void *)(v46 + *(int *)(type metadata accessor for DatabaseResourceToken() + 20)) = v51;
    }
    else
    {
      OUTLINED_FUNCTION_11_2();
      OUTLINED_FUNCTION_8_3((uint64_t)"Access assertion ");
      uint64_t v64 = (uint64_t)v28;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BMAccessAssertion);
      _print_unlocked<A, B>(_:_:)();
      OUTLINED_FUNCTION_3_10();
      lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
      uint64_t v48 = swift_allocError();
      OUTLINED_FUNCTION_6_7(v48, v49);

      swift_unknownObjectRelease();
    }
  }
  else
  {
    id v47 = v66[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t type metadata accessor for DatabaseResourceToken()
{
  uint64_t result = type metadata singleton initialization cache for DatabaseResourceToken;
  if (!type metadata singleton initialization cache for DatabaseResourceToken) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for DatabaseResourceToken(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_unknownObjectRetain();
  }
  return a1;
}

uint64_t destroy for DatabaseResourceToken(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DatabaseResourceToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DatabaseResourceToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DatabaseResourceToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for DatabaseResourceToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DatabaseResourceToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E7DE7A4);
}

uint64_t sub_18E7DE7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_5_0();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for DatabaseResourceToken(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E7DE844);
}

void sub_18E7DE844(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for URL();
  OUTLINED_FUNCTION_5_0();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata completion function for DatabaseResourceToken()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t dispatch thunk of static DatabaseResource.sqlDatabase(useCase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of static DatabaseResource.attribute(to:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t dispatch thunk of static DatabaseResource.database(useCase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of static DatabaseResource.databaseResourceToken(useCase:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of static DatabaseResource.view(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t default argument 0 of Date.ISO8601Format(_:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v5 = OUTLINED_FUNCTION_35(v4);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_0_4();
  uint64_t v29 = v8;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_10();
  uint64_t v30 = v10;
  uint64_t v32 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  OUTLINED_FUNCTION_0_4();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v14 = OUTLINED_FUNCTION_101_0();
  OUTLINED_FUNCTION_0_4();
  uint64_t v16 = v15;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_100_0();
  uint64_t v18 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  OUTLINED_FUNCTION_0_4();
  uint64_t v20 = v19;
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_99_0();
  type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v22);
  (*(void (**)(char *, void))(v24 + 104))((char *)&v28 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E4F27880]);
  uint64_t v25 = v18;
  uint64_t v26 = v33;
  (*(void (**)(uint64_t, void, uint64_t))(v20 + 104))(v3, *MEMORY[0x1E4F27878], v25);
  (*(void (**)(uint64_t, void, uint64_t))(v16 + 104))(v2, *MEMORY[0x1E4F27888], v14);
  (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))(v1, *MEMORY[0x1E4F27890], v32);
  TimeZone.init(secondsFromGMT:)();
  uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, v26);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v30, v7, v26);
    return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
  }
  return result;
}

void closure #1 in variable initialization expression of static UnifiedLibrary.initializedLibrary()
{
  uint64_t v0 = self;
  v2[4] = protocol witness for static LibraryBase.databaseResourceIdentifier(legacyViewName:) in conformance UnifiedLibrary.Library;
  v2[5] = 0;
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 1107296256;
  v2[2] = thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@owned String?);
  v2[3] = &block_descriptor_0;
  uint64_t v1 = _Block_copy(v2);
  swift_release();
  objc_msgSend(v0, sel_setLegacyViewResourceMappingCallback_, v1);
  _Block_release(v1);
}

uint64_t closure #1 in closure #1 in variable initialization expression of static UnifiedLibrary.initializedLibrary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static UnifiedLibrary.Library.libraries.getter();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 40;
    while (1)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 56))(a1, a2);
      if (v8) {
        break;
      }
      v6 += 16;
      if (!--v5) {
        goto LABEL_5;
      }
    }
    uint64_t v9 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v9;
}

id thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@owned String?)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  swift_retain();
  uint64_t v5 = v1(v2, v4);
  uint64_t v7 = v6;
  swift_release();
  swift_bridgeObjectRelease();
  if (v7)
  {
    uint64_t v8 = (void *)MEMORY[0x192FAFF50](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t static UnifiedLibrary.add(library:)(uint64_t a1)
{
  if (one-time initialization token for initializedLibrary != -1) {
    swift_once();
  }

  return static UnifiedLibrary.Library.add(library:)(a1);
}

uint64_t static UnifiedLibrary.Library.add(library:)(uint64_t a1)
{
  if (one-time initialization token for lockedLibraries != -1) {
    a1 = swift_once();
  }
  uint64_t v1 = (os_unfair_lock_s *)static UnifiedLibrary.Library.lockedLibraries;
  MEMORY[0x1F4188790](a1);
  swift_retain();
  os_unfair_lock_lock(v1 + 6);
  partial apply for closure #1 in static UnifiedLibrary.Library.add(library:)((uint64_t)&v1[4]);
  os_unfair_lock_unlock(v1 + 6);
  return swift_release();
}

uint64_t static UnifiedLibrary.set(libraries:)(uint64_t a1)
{
  if (one-time initialization token for initializedLibrary != -1) {
    swift_once();
  }

  return static UnifiedLibrary.Library.set(libraries:)(a1);
}

uint64_t static UnifiedLibrary.Library.set(libraries:)(uint64_t a1)
{
  if (one-time initialization token for lockedLibraries != -1) {
    a1 = swift_once();
  }
  uint64_t v1 = static UnifiedLibrary.Library.lockedLibraries;
  MEMORY[0x1F4188790](a1);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  partial apply for closure #1 in static UnifiedLibrary.Library.set(libraries:)((void *)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  return swift_release();
}

ValueMetadata *type metadata accessor for UnifiedLibrary()
{
  return &type metadata for UnifiedLibrary;
}

void *type metadata accessor for UnifiedLibrary.Library()
{
  return &unk_1EDD7E100;
}

uint64_t one-time initialization function for lockedLibraries()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<[LibraryBase.Type], os_unfair_lock_s>);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = MEMORY[0x1E4FBC860];
  static UnifiedLibrary.Library.lockedLibraries = result;
  return result;
}

uint64_t closure #1 in static UnifiedLibrary.Library.add(library:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  uint64_t v6 = *(void *)(*(void *)result + 16);
  if (v6)
  {
    uint64_t v7 = (void *)(*(void *)result + 32);
    while (*v7 != a2)
    {
      v7 += 2;
      if (!--v6) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v8 = *(void *)(*(void *)v5 + 16);
    uint64_t result = specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v8, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
    uint64_t v9 = *(void *)v5;
    *(void *)(v9 + 16) = v8 + 1;
    uint64_t v10 = v9 + 16 * v8;
    *(void *)(v10 + 32) = a2;
    *(void *)(v10 + 40) = a3;
    *(void *)uint64_t v5 = v9;
  }
  return result;
}

uint64_t closure #1 in static UnifiedLibrary.Library.set(libraries:)(void *a1, uint64_t a2)
{
  *a1 = a2;
  return swift_bridgeObjectRetain();
}

uint64_t static UnifiedLibrary.Library.databaseResources.getter()
{
  uint64_t v0 = static UnifiedLibrary.Library.libraries.getter();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0 + 40;
    uint64_t v3 = MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 8))();
      uint64_t v5 = *(void *)(v4 + 16);
      uint64_t v6 = *(void *)(v3 + 16);
      if (__OFADD__(v6, v5)) {
        break;
      }
      uint64_t v7 = v4;
      if (!swift_isUniquelyReferenced_nonNull_native() || v6 + v5 > *(void *)(v3 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v8;
      }
      if (*(void *)(v7 + 16))
      {
        uint64_t v9 = *(void *)(v3 + 16);
        if ((*(void *)(v3 + 24) >> 1) - v9 < v5) {
          goto LABEL_24;
        }
        uint64_t v10 = (void *)(v3 + 16 * v9 + 32);
        if (v7 + 32 < (unint64_t)v10 + 16 * v5 && (unint64_t)v10 < v7 + 32 + 16 * v5) {
          goto LABEL_26;
        }
        memcpy(v10, (const void *)(v7 + 32), 16 * v5);
        if (v5)
        {
          uint64_t v12 = *(void *)(v3 + 16);
          BOOL v13 = __OFADD__(v12, v5);
          uint64_t v14 = v12 + v5;
          if (v13) {
            goto LABEL_25;
          }
          *(void *)(v3 + 16) = v14;
        }
      }
      else if (v5)
      {
        goto LABEL_23;
      }
      swift_bridgeObjectRelease();
      v2 += 16;
      if (!--v1) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    OUTLINED_FUNCTION_109_0();
    uint64_t result = OUTLINED_FUNCTION_108_0();
    __break(1u);
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
LABEL_21:
    swift_bridgeObjectRelease();
    return v3;
  }
  return result;
}

uint64_t static UnifiedLibrary.Library.sqlViewToBiomeStreamMapping.getter()
{
  void (*v38)(uint64_t *__return_ptr, void *);
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void v43[3];
  void *v44;
  void v45[6];

  uint64_t v0 = static UnifiedLibrary.Library.libraries.getter();
  uint64_t v33 = *(void *)(v0 + 16);
  if (!v33)
  {
    uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_35;
  }
  uint64_t v1 = 0;
  uint64_t v34 = v0 + 32;
  uint64_t v2 = (void *)MEMORY[0x1E4FBC868];
  while (2)
  {
    uint64_t v35 = v1 + 1;
    uint64_t v3 = (*(uint64_t (**)(void))(*(void *)(v34 + 16 * v1 + 8) + 24))();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v44 = v2;
    specialized LazyMapSequence.makeIterator()(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v45);
    uint64_t v5 = v45[0];
    uint64_t v39 = v45[3];
    uint64_t v6 = v45[4];
    uint64_t v37 = v45[1];
    uint64_t v38 = (void (*)(uint64_t *__return_ptr, void *))v45[5];
    int64_t v36 = (unint64_t)(v45[2] + 64) >> 6;
    swift_bridgeObjectRetain();
    while (1)
    {
      if (v6)
      {
        OUTLINED_FUNCTION_119_0();
        unint64_t v8 = v7 | (v39 << 6);
        goto LABEL_22;
      }
      int64_t v9 = v39 + 1;
      if (__OFADD__(v39, 1)) {
        goto LABEL_38;
      }
      if (v9 >= v36) {
        goto LABEL_32;
      }
      unint64_t v10 = *(void *)(v37 + 8 * v9);
      int64_t v11 = v39 + 1;
      if (!v10)
      {
        int64_t v11 = v39 + 2;
        if (v39 + 2 >= v36) {
          goto LABEL_32;
        }
        unint64_t v10 = *(void *)(v37 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v39 + 3;
          if (v39 + 3 >= v36) {
            goto LABEL_32;
          }
          unint64_t v10 = *(void *)(v37 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v39 + 4;
            if (v39 + 4 >= v36) {
              goto LABEL_32;
            }
            unint64_t v10 = *(void *)(v37 + 8 * v11);
            if (!v10)
            {
              int64_t v11 = v39 + 5;
              if (v39 + 5 >= v36) {
                goto LABEL_32;
              }
              unint64_t v10 = *(void *)(v37 + 8 * v11);
              if (!v10) {
                break;
              }
            }
          }
        }
      }
LABEL_21:
      uint64_t v6 = (v10 - 1) & v10;
      unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
      uint64_t v39 = v11;
LABEL_22:
      BOOL v13 = (void *)(*(void *)(v5 + 48) + 16 * v8);
      uint64_t v14 = v13[1];
      uint64_t v15 = *(void *)(*(void *)(v5 + 56) + 8 * v8);
      v43[0] = *v13;
      v43[1] = v14;
      v43[2] = v15;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v38(&v40, v43);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v17 = v40;
      uint64_t v16 = v41;
      uint64_t v18 = v42;
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v40, v41);
      uint64_t v21 = v2[2];
      BOOL v22 = (v19 & 1) == 0;
      uint64_t v23 = v21 + v22;
      if (__OFADD__(v21, v22))
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      char v24 = v19;
      if (v2[3] >= v23)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v23, isUniquelyReferenced_nonNull_native & 1);
        unint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
        if ((v24 & 1) != (v26 & 1)) {
          goto LABEL_39;
        }
        unint64_t v20 = v25;
      }
      uint64_t v2 = v44;
      if (v24)
      {
        swift_bridgeObjectRelease();
        uint64_t v27 = v2[7];
        swift_bridgeObjectRelease();
        *(void *)(v27 + 8 * v20) = v18;
        char isUniquelyReferenced_nonNull_native = 1;
      }
      else
      {
        v44[(v20 >> 6) + 8] |= 1 << v20;
        uint64_t v28 = (uint64_t *)(v2[6] + 16 * v20);
        uint64_t *v28 = v17;
        v28[1] = v16;
        *(void *)(v2[7] + 8 * v20) = v18;
        uint64_t v29 = v2[2];
        BOOL v30 = __OFADD__(v29, 1);
        uint64_t v31 = v29 + 1;
        if (v30) {
          goto LABEL_37;
        }
        v2[2] = v31;
        char isUniquelyReferenced_nonNull_native = 1;
      }
    }
    int64_t v12 = v39 + 6;
    while (v12 < v36)
    {
      unint64_t v10 = *(void *)(v37 + 8 * v12++);
      if (v10)
      {
        int64_t v11 = v12 - 1;
        goto LABEL_21;
      }
    }
LABEL_32:
    swift_bridgeObjectRelease();
    outlined consume of [String : [String]].Iterator._Variant();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v1 = v35;
    if (v35 != v33) {
      continue;
    }
    break;
  }
LABEL_35:
  swift_bridgeObjectRelease();
  return (uint64_t)v2;
}

uint64_t static UnifiedLibrary.Library.orderedDataflows.getter()
{
  uint64_t v0 = static UnifiedLibrary.Library.libraries.getter();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = v0 + 40;
    uint64_t v3 = MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v4 = (*(uint64_t (**)(void))(*(void *)v2 + 40))();
      uint64_t v5 = *(void *)(v4 + 16);
      uint64_t v6 = *(void *)(v3 + 16);
      if (__OFADD__(v6, v5)) {
        break;
      }
      uint64_t v7 = v4;
      if (!swift_isUniquelyReferenced_nonNull_native() || v6 + v5 > *(void *)(v3 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v8;
      }
      if (*(void *)(v7 + 16))
      {
        uint64_t v9 = *(void *)(v3 + 16);
        if ((*(void *)(v3 + 24) >> 1) - v9 < v5) {
          goto LABEL_24;
        }
        unint64_t v10 = v3 + (v9 << 7) + 32;
        if (v7 + 32 < v10 + (v5 << 7) && v10 < v7 + 32 + (v5 << 7)) {
          goto LABEL_26;
        }
        swift_arrayInitWithCopy();
        if (v5)
        {
          uint64_t v12 = *(void *)(v3 + 16);
          BOOL v13 = __OFADD__(v12, v5);
          uint64_t v14 = v12 + v5;
          if (v13) {
            goto LABEL_25;
          }
          *(void *)(v3 + 16) = v14;
        }
      }
      else if (v5)
      {
        goto LABEL_23;
      }
      swift_bridgeObjectRelease();
      v2 += 16;
      if (!--v1) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    OUTLINED_FUNCTION_109_0();
    uint64_t result = OUTLINED_FUNCTION_108_0();
    __break(1u);
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
LABEL_21:
    swift_bridgeObjectRelease();
    return v3;
  }
  return result;
}

uint64_t static UnifiedLibrary.Library.lookupDataflow(name:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = static UnifiedLibrary.Library.libraries.getter();
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = v6 + 40;
    for (uint64_t i = v7 - 1; ; --i)
    {
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v8 + 48))(v12, a1, a2);
      outlined init with take of (key: String, value: StorableValue)((uint64_t)v12, (uint64_t)v13, &demangling cache variable for type metadata for Dataflow?);
      outlined init with take of (key: String, value: StorableValue)((uint64_t)v13, (uint64_t)v14, &demangling cache variable for type metadata for Dataflow?);
      if (_s12BiomeStreams8DataflowVSgWOg((uint64_t)v14) != 1) {
        break;
      }
      if (!i) {
        goto LABEL_6;
      }
      v8 += 16;
    }
    swift_bridgeObjectRelease();
    unint64_t v10 = v13;
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRelease();
    _s12BiomeStreams8DataflowVSgWOi0_(v14);
    unint64_t v10 = v14;
  }
  return outlined init with take of (key: String, value: StorableValue)((uint64_t)v10, a3, &demangling cache variable for type metadata for Dataflow?);
}

uint64_t _s12BiomeStreams8DataflowVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v48 = type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_10();
  uint64_t v47 = v8;
  uint64_t v9 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SQLDataType>);
  char v46 = a2;
  unint64_t v10 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v9 + 16))
  {
    uint64_t v43 = (void *)(v9 + 64);
    OUTLINED_FUNCTION_118_0();
    uint64_t v13 = v12 & v11;
    int64_t v42 = (unint64_t)(v14 + 63) >> 6;
    uint64_t v44 = (void (**)(uint64_t, uint64_t, ValueMetadata *))(v6 + 16);
    uint64_t v45 = v6;
    uint64_t v15 = (void (**)(uint64_t, uint64_t, ValueMetadata *))(v6 + 32);
    uint64_t v16 = v10 + 8;
    swift_retain();
    int64_t v17 = 0;
    if (!v13) {
      goto LABEL_4;
    }
    while (2)
    {
      OUTLINED_FUNCTION_119_0();
      unint64_t v19 = v18 | (v17 << 6);
LABEL_16:
      uint64_t v24 = *(void *)(v9 + 56);
      uint64_t v25 = v9;
      char v26 = (uint64_t *)(*(void *)(v9 + 48) + 16 * v19);
      uint64_t v27 = *v26;
      uint64_t v28 = v26[1];
      uint64_t v29 = *(void *)(v45 + 72);
      uint64_t v30 = v24 + v29 * v19;
      if (v46)
      {
        (*v15)(v47, v30, v48);
      }
      else
      {
        (*v44)(v47, v30, v48);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._finalize()();
      OUTLINED_FUNCTION_123_0();
      if (((v33 << v32) & ~v16[v31]) != 0)
      {
        OUTLINED_FUNCTION_122();
        goto LABEL_29;
      }
      OUTLINED_FUNCTION_120_0();
      do
      {
        OUTLINED_FUNCTION_75_1();
        if (v38 && (v35 & 1) != 0)
        {
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if (v36 == v37) {
          uint64_t v36 = 0;
        }
      }
      while (v16[v36] == -1);
      OUTLINED_FUNCTION_25();
LABEL_29:
      *(void *)((char *)v16 + ((v34 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v34;
      uint64_t v39 = (void *)(v10[6] + 16 * v34);
      *uint64_t v39 = v27;
      v39[1] = v28;
      (*v15)(v10[7] + v29 * v34, v47, v48);
      ++v10[2];
      uint64_t v9 = v25;
      if (v13) {
        continue;
      }
      break;
    }
LABEL_4:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_40;
    }
    if (v20 >= v42)
    {
      swift_release();
      uint64_t v3 = v2;
      uint64_t v21 = v43;
    }
    else
    {
      uint64_t v21 = v43;
      unint64_t v22 = v43[v20];
      ++v17;
      if (v22) {
        goto LABEL_15;
      }
      int64_t v17 = v20 + 1;
      if (v20 + 1 < v42)
      {
        unint64_t v22 = v43[v17];
        if (v22) {
          goto LABEL_15;
        }
        int64_t v23 = v20 + 2;
        if (v23 < v42)
        {
          unint64_t v22 = v43[v23];
          if (v22)
          {
            int64_t v17 = v23;
LABEL_15:
            uint64_t v13 = (v22 - 1) & v22;
            unint64_t v19 = __clz(__rbit64(v22)) + (v17 << 6);
            goto LABEL_16;
          }
          while (1)
          {
            int64_t v17 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              break;
            }
            if (v17 >= v42) {
              goto LABEL_31;
            }
            unint64_t v22 = v43[v17];
            ++v23;
            if (v22) {
              goto LABEL_15;
            }
          }
LABEL_41:
          __break(1u);
          JUMPOUT(0x18E7DFE28);
        }
      }
LABEL_31:
      swift_release();
      uint64_t v3 = v2;
    }
    if (v46)
    {
      uint64_t v40 = 1 << *(unsigned char *)(v9 + 32);
      if (v40 >= 64) {
        specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v40 + 63) >> 6, v21);
      }
      else {
        *uint64_t v21 = -1 << v40;
      }
      *(void *)(v9 + 16) = 0;
    }
  }
  uint64_t result = swift_release();
  void *v3 = v10;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  int64_t v16;
  void *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [String]>);
  uint64_t v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  if (!v10) {
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v14 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (uint64_t i = v14 | (v13 << 6); ; uint64_t i = __clz(__rbit64(v18)) + (v13 << 6))
  {
    int64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * i);
    unint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    int64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * i);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v25 = result & ~v24;
    char v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) == 0)
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v29 || (v28 & 1) == 0)
      {
        uint64_t v30 = v26 == v29;
        if (v26 == v29) {
          char v26 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v26);
        if (v31 != -1)
        {
          uint64_t v27 = __clz(__rbit64(~v31)) + (v26 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    uint64_t v27 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v11 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    char v32 = (void *)(*(void *)(v7 + 48) + 16 * v27);
    *char v32 = v22;
    v32[1] = v21;
    *(void *)(*(void *)(v7 + 56) + 8 * v27) = v23;
    ++*(void *)(v7 + 16);
    if (v10) {
      goto LABEL_6;
    }
LABEL_7:
    uint64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      goto LABEL_41;
    }
    if (v16 >= v34)
    {
      swift_release();
      int64_t v17 = (void *)(v5 + 64);
      goto LABEL_34;
    }
    int64_t v17 = (void *)(v5 + 64);
    uint64_t v18 = *(void *)(v35 + 8 * v16);
    ++v13;
    if (!v18)
    {
      uint64_t v13 = v16 + 1;
      if (v16 + 1 >= v34) {
        goto LABEL_32;
      }
      uint64_t v18 = *(void *)(v35 + 8 * v13);
      if (!v18) {
        break;
      }
    }
LABEL_18:
    unint64_t v10 = (v18 - 1) & v18;
  }
  unint64_t v19 = v16 + 2;
  if (v19 < v34)
  {
    uint64_t v18 = *(void *)(v35 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        uint64_t v13 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_42;
        }
        if (v13 >= v34) {
          goto LABEL_32;
        }
        uint64_t v18 = *(void *)(v35 + 8 * v13);
        ++v19;
        if (v18) {
          goto LABEL_18;
        }
      }
    }
    uint64_t v13 = v19;
    goto LABEL_18;
  }
LABEL_32:
  swift_release();
LABEL_34:
  if (v36)
  {
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v33 + 63) >> 6, v17);
    }
    else {
      *int64_t v17 = -1 << v33;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v34 = v2;
  char v35 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    int64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      int64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        uint64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        int64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            int64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    int64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    char v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v25 = 0;
      char v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v27 = v16 == v26;
        if (v16 == v26) {
          uint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      int64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v34;
  unint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  long long v40;

  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Schema>);
  uint64_t v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    uint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      uint64_t v13 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(v38 + 8 * v13);
      if (!v24)
      {
        uint64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        uint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v37) {
              goto LABEL_33;
            }
            uint64_t v24 = *(void *)(v38 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    char v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 24 * v21;
    unint64_t v34 = *(void *)v33;
    uint64_t v40 = *(_OWORD *)(v33 + 8);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v15 = result & ~v14;
    uint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v16 == v27;
        if (v16 == v27) {
          uint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      int64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v32;
    v18[1] = v31;
    unint64_t v19 = *(void *)(v7 + 56) + 24 * v17;
    *(void *)unint64_t v19 = v34;
    *(_OWORD *)(v19 + 8) = v40;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v36;
  int64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  char v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  void *v3 = v7;
  return result;
}

uint64_t specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in Dictionary.merge(_:uniquingKeysWith:)(&v6, *a1, a1[1], a1[2]);
  uint64_t v4 = v6;
  *a2 = result;
  a2[1] = v5;
  a2[2] = v4;
  return result;
}

uint64_t specialized LazyMapSequence.makeIterator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v4 = -1 << *(unsigned char *)(a1 + 32);
  *a4 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v6 = v7;
  a4[1] = result;
  a4[2] = ~v4;
  if (-v4 < 64) {
    uint64_t v8 = ~(-1 << -(char)v4);
  }
  else {
    uint64_t v8 = -1;
  }
  a4[3] = 0;
  a4[4] = v8 & v6;
  a4[5] = a2;
  a4[6] = a3;
  return result;
}

uint64_t partial apply for closure #1 in static UnifiedLibrary.Library.set(libraries:)(void *a1)
{
  return closure #1 in static UnifiedLibrary.Library.set(libraries:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in static UnifiedLibrary.Library.add(library:)(uint64_t a1)
{
  return closure #1 in static UnifiedLibrary.Library.add(library:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_66_1()
{
  return outlined consume of Data?(v0, v1);
}

uint64_t OUTLINED_FUNCTION_91_0()
{
  return Date.ISO8601Format(_:)();
}

uint64_t OUTLINED_FUNCTION_108_0()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void OUTLINED_FUNCTION_121_0(unsigned __int8 *a1@<X8>)
{
  *(_DWORD *)(v1 - 308) = *a1;
}

void specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v52 = a4;
  unint64_t v54 = a3;
  uint64_t v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  uint64_t v6 = MEMORY[0x1F4188790](v53);
  uint64_t v8 = (uint64_t *)((char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v57 = (uint64_t *)((char *)&v51 - v10);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (uint64_t *)((char *)&v51 - v12);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (uint64_t *)((char *)&v51 - v14);
  uint64_t v17 = *(void *)(v16 + 72);
  if (!v17)
  {
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  int64_t v18 = a2 - a1;
  if (a2 - a1 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_88;
  }
  int64_t v20 = v54 - a2;
  if (v54 - a2 == 0x8000000000000000 && v17 == -1) {
    goto LABEL_89;
  }
  uint64_t v22 = v18 / v17;
  uint64_t v23 = v20 / v17;
  uint64_t v56 = v17;
  if (v18 / v17 >= v20 / v17)
  {
    unint64_t v36 = v52;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, v20 / v17);
    unint64_t v26 = v36 + v23 * v17;
    if (v23 * v17 < 1 || a1 >= a2)
    {
      unint64_t v24 = v52;
    }
    else
    {
      uint64_t v55 = -v17;
      unint64_t v38 = v54;
      do
      {
        unint64_t v39 = v38;
        unint64_t v54 = v26;
        uint64_t v40 = v55;
        unint64_t v41 = v26 + v55;
        int64_t v42 = v57;
        outlined init with copy of (key: String, value: SQLDataType)(v26 + v55, (uint64_t)v57, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        unint64_t v43 = a2 + v40;
        outlined init with copy of (key: String, value: SQLDataType)(a2 + v40, (uint64_t)v8, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        if (*v42 == *v8 && v42[1] == v8[1]) {
          char v45 = 0;
        }
        else {
          char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        unint64_t v38 = v39 + v55;
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v8, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v57, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        if (v45)
        {
          if (v39 < a2 || v38 >= a2)
          {
            swift_arrayInitWithTakeFrontToBack();
            a2 = v43;
            unint64_t v26 = v54;
          }
          else
          {
            if (v39 != a2) {
              swift_arrayInitWithTakeBackToFront();
            }
            a2 = v43;
            unint64_t v26 = v54;
          }
        }
        else if (v39 < v54 || v38 >= v54)
        {
          swift_arrayInitWithTakeFrontToBack();
          unint64_t v26 = v41;
        }
        else
        {
          if (v39 != v54) {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v26 = v41;
        }
      }
      while (v26 > v52 && a2 > a1);
      unint64_t v24 = v52;
    }
  }
  else
  {
    unint64_t v24 = v52;
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, v18 / v17);
    uint64_t v25 = v22 * v17;
    unint64_t v26 = v24 + v22 * v17;
    if (v25 >= 1 && a2 < v54)
    {
      while (1)
      {
        outlined init with copy of (key: String, value: SQLDataType)(a2, (uint64_t)v15, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        outlined init with copy of (key: String, value: SQLDataType)(v24, (uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        if (*v15 == *v13 && v15[1] == v13[1]) {
          break;
        }
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        if ((v29 & 1) == 0) {
          goto LABEL_27;
        }
        uint64_t v30 = v56;
        unint64_t v31 = a2 + v56;
        if (a1 < a2 || a1 >= v31)
        {
          swift_arrayInitWithTakeFrontToBack();
LABEL_39:
          uint64_t v30 = v56;
          goto LABEL_40;
        }
        if (a1 != a2)
        {
          swift_arrayInitWithTakeBackToFront();
          goto LABEL_39;
        }
LABEL_40:
        a1 += v30;
        BOOL v35 = v24 >= v26 || v31 >= v54;
        a2 = v31;
        if (v35) {
          goto LABEL_82;
        }
      }
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
LABEL_27:
      uint64_t v30 = v56;
      unint64_t v33 = v24 + v56;
      if (a1 < v24 || a1 >= v33)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else
      {
        if (a1 == v24)
        {
LABEL_36:
          unint64_t v31 = a2;
          unint64_t v24 = v33;
          goto LABEL_40;
        }
        swift_arrayInitWithTakeBackToFront();
      }
      uint64_t v30 = v56;
      goto LABEL_36;
    }
  }
LABEL_82:
  int64_t v49 = v26 - v24;
  if (v56 != -1 || v49 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v24, v49 / v56);
    return;
  }
LABEL_90:
  __break(1u);
}

id Streams.StoreStream.inner.getter()
{
  return *v0;
}

void Streams.StoreStream.inner.setter(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t (*Streams.StoreStream.inner.modify())()
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t Streams.StoreStream.init(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

id Streams.StoreStream.init(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(objc_allocWithZone((Class)BMStoreStream), sel_initWithPublicStream_, a1);
  *a2 = result;
  return result;
}

id Streams.StoreStream.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for BMStoreStream);
  id result = BMStoreStream.__allocating_init(restrictedStreamIdentifier:)(a1, a2);
  *a3 = result;
  return result;
}

id BMStoreStream.__allocating_init(restrictedStreamIdentifier:)(uint64_t a1, uint64_t a2)
{
  id v4 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  uint64_t v5 = (void *)MEMORY[0x192FAFF50](a1, a2);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithRestrictedStreamIdentifier_, v5);

  return v6;
}

id Streams.StoreStream.init(_:storeConfig:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  id v8 = objc_allocWithZone((Class)BMStoreStream);
  id result = @nonobjc BMStoreStream.init(privateStreamIdentifier:storeConfig:)(a1, a2, a3);
  *a4 = result;
  return result;
}

id Streams.StoreStream.validator()()
{
  id v1 = objc_msgSend(*v0, sel_validator);

  return v1;
}

uint64_t Streams.StoreStream.prune(predicate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  id v8 = (void *)swift_allocObject();
  v8[2] = *(void *)(a3 + 16);
  v8[3] = a1;
  v8[4] = a2;
  v11[4] = partial apply for thunk for @callee_guaranteed (@guaranteed BMStoreEvent<A>?, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  v11[5] = v8;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<A>?, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool);
  v11[3] = &block_descriptor_1;
  uint64_t v9 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_pruneWithPredicateBlock_, v9);
  _Block_release(v9);
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v7) {
    __break(1u);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed BMStoreEvent<A>?, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t (**)(void *, uint64_t))(a1 + 32);
  id v6 = a2;
  LOBYTE(a3) = v5(a2, a3);

  return a3 & 1;
}

id @nonobjc BMStoreStream.init(privateStreamIdentifier:storeConfig:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = (void *)MEMORY[0x192FAFF50]();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v3, sel_initWithPrivateStreamIdentifier_storeConfig_, v5, a3);

  return v6;
}

uint64_t sub_18E7E0D20()
{
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for thunk for @callee_guaranteed (@guaranteed BMStoreEvent<A>?, @unowned UnsafeMutablePointer<ObjCBool>) -> (@unowned Bool)()
{
  return (*(uint64_t (**)(void))(v0 + 24))() & 1;
}

uint64_t instantiation function for generic protocol witness table for Streams.StoreStream<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata instantiation function for Streams.StoreStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t type metadata accessor for Streams.StoreStream()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static BMPoirotSchematizerShim.bmTypeToPoirotType(type:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  switch(a1)
  {
    case 0:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F92180];
      break;
    case 1:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F92168];
      break;
    case 2:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F92170];
      break;
    case 3:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F92178];
      break;
    case 4:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F921A0];
      break;
    case 5:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F921A8];
      break;
    case 6:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F92188];
      break;
    case 7:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F92190];
      break;
    case 8:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F921B0];
      break;
    case 9:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F921B8];
      break;
    case 10:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F921C0];
      break;
    case 11:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F921C8];
      break;
    case 12:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F92158];
      break;
    case 13:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F92198];
      break;
    case 14:
      uint64_t v3 = (unsigned int *)MEMORY[0x1E4F92160];
      break;
    default:
      _StringGuts.grow(_:)(25);
      v8._uint64_t object = (void *)0x800000018EBE9E70;
      v8._uint64_t countAndFlagsBits = 0xD000000000000017;
      String.append(_:)(v8);
      type metadata accessor for BMProtoDataType(0);
      _print_unlocked<A, B>(_:_:)();
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      JUMPOUT(0x18E7E100CLL);
  }
  uint64_t v4 = *v3;
  uint64_t v5 = type metadata accessor for TypeSchema();
  id v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104);

  return v6(a2, v4, v5);
}

uint64_t static BMPoirotSchematizerShim.searchValue(in:withFieldPath:typeRawValue:error:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return static BMPoirotSchematizerShim.searchValue(in:withFieldNumber:typeRawValue:error:)(a1, a2, a3, a4, MEMORY[0x1E4F92148], a5);
}

uint64_t (*BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.iterator.modify())()
{
  return destructiveProjectEnumData for StorableValue;
}

id BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.init(iterator:)(uint64_t a1)
{
  uint64_t v3 = (uint64_t)v1
     + OBJC_IVAR____TtCC12BiomeStreams23BMPoirotSchematizerShimP33_6AF5E9B2F4D56B14EB8E6E9336EA174F31BMPoirotRepeatedFieldEnumerator_iterator;
  uint64_t v4 = type metadata accessor for Schematizer.RepeatableFieldIterator();
  __swift_storeEnumTagSinglePayload(v3, 1, 1, v4);
  id v5 = v1;
  outlined destroy of AnyValue?(v3, &demangling cache variable for type metadata for Schematizer.RepeatableFieldIterator?);
  uint64_t v6 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, a1, v4);
  __swift_storeEnumTagSinglePayload(v3, 0, 1, v4);

  v9.receiver = v5;
  v9.super_class = (Class)type metadata accessor for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator();
  id v7 = objc_msgSendSuper2(&v9, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v4);
  return v7;
}

uint64_t BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.nextObject()@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyValue?);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = &v12[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v5 = BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.iterator.modify();
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for Schematizer.RepeatableFieldIterator();
  if (__swift_getEnumTagSinglePayload(v7, 1, v8))
  {
    ((void (*)(unsigned char *, void))v5)(v12, 0);
    uint64_t v9 = type metadata accessor for AnyValue();
    __swift_storeEnumTagSinglePayload((uint64_t)v4, 1, 1, v9);
  }
  else
  {
    Schematizer.RepeatableFieldIterator.next()();
    ((void (*)(unsigned char *, void))v5)(v12, 0);
  }
  type metadata accessor for BMPoirotSchematizerShim();
  static BMPoirotSchematizerShim.poirotValueToObjcValue(value:)((uint64_t)v4, a1);
  return outlined destroy of AnyValue?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for AnyValue?);
}

void BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.init()()
{
}

id BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id static BMPoirotSchematizerShim.searchValues(in:withFieldNumber:typeRawValue:error:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a5;
  type metadata accessor for Schematizer.RepeatableFieldIterator();
  OUTLINED_FUNCTION_0_4();
  uint64_t v22 = v7;
  uint64_t v23 = v6;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v22 - v11;
  type metadata accessor for TypeSchema();
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_3_13();
  static BMPoirotSchematizerShim.bmTypeToPoirotType(type:)(a4, v14);
  static Schematizer.makeRepeatableFieldIterator(in:withFieldNumber:type:)();
  uint64_t v16 = v22;
  uint64_t v15 = v23;
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v10, v12, v23);
  id v17 = objc_allocWithZone((Class)type metadata accessor for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator());
  id v18 = BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator.init(iterator:)((uint64_t)v10);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v12, v15);
  uint64_t v19 = OUTLINED_FUNCTION_1_15();
  v20(v19);
  return v18;
}

uint64_t type metadata accessor for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator()
{
  uint64_t result = type metadata singleton initialization cache for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator;
  if (!type metadata singleton initialization cache for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *static BMPoirotSchematizerShim.convertedTypeCallback(convertedType:poirotType:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypeSchema();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)v18 - v9;
  switch(a1)
  {
    case 0:
      return (void *)a1;
    case 1:
      (*(void (**)(char *, void, uint64_t))(v5 + 104))((char *)v18 - v9, *MEMORY[0x1E4F92180], v4);
      char v11 = MEMORY[0x192FAFB30](a2, v10);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      uint64_t v12 = closure #1 in static BMPoirotSchematizerShim.convertedTypeCallback(convertedType:poirotType:);
      if ((v11 & 1) == 0) {
        goto LABEL_14;
      }
      return v12;
    case 2:
      (*(void (**)(char *, void, uint64_t))(v5 + 104))((char *)v18 - v9, *MEMORY[0x1E4F92180], v4);
      char v14 = MEMORY[0x192FAFB30](a2, v10);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      if ((v14 & 1) == 0) {
        goto LABEL_14;
      }
      return 0;
    case 3:
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
      int v15 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
      uint64_t v12 = closure #2 in static BMPoirotSchematizerShim.convertedTypeCallback(convertedType:poirotType:);
      if (v15 == *MEMORY[0x1E4F92198]) {
        return v12;
      }
      if (v15 != *MEMORY[0x1E4F92160])
      {
LABEL_14:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x18E7E1DD8);
      }
      return 0;
    case 4:
      (*(void (**)(char *, void, uint64_t))(v5 + 104))((char *)v18 - v9, *MEMORY[0x1E4F92198], v4);
      char v13 = MEMORY[0x192FAFB30](a2, v10);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
      if ((v13 & 1) == 0) {
        goto LABEL_14;
      }
      return 0;
    default:
      v18[2] = 0;
      v18[3] = 0xE000000000000000;
      _StringGuts.grow(_:)(25);
      v17._uint64_t object = (void *)0x800000018EBE9C90;
      v17._uint64_t countAndFlagsBits = 0xD000000000000017;
      String.append(_:)(v17);
      v18[1] = a1;
      type metadata accessor for BMConvertedType(0);
      _print_unlocked<A, B>(_:_:)();
      goto LABEL_14;
  }
}

uint64_t closure #1 in static BMPoirotSchematizerShim.convertedTypeCallback(convertedType:poirotType:)@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AnyValue();
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (double *)((char *)v12 - v8);
  outlined init with copy of AnyValue(a1, (uint64_t)v12 - v8);
  if (swift_getEnumCaseMultiPayload() == 5)
  {
    *a2 = *v9 + 978307200.0;
    swift_storeEnumTagMultiPayload();
    return __swift_storeEnumTagSinglePayload((uint64_t)a2, 0, 1, v4);
  }
  else
  {
    outlined destroy of AnyValue((uint64_t)v9);
    outlined init with copy of AnyValue(a1, (uint64_t)v7);
    v12[0] = 0;
    v12[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v11._uint64_t object = (void *)0x800000018EBE9DA0;
    v11._uint64_t countAndFlagsBits = 0xD000000000000026;
    String.append(_:)(v11);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in static BMPoirotSchematizerShim.convertedTypeCallback(convertedType:poirotType:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AnyValue();
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  char v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v35 - v15;
  outlined init with copy of AnyValue(a1, (uint64_t)&v35 - v15);
  if (swift_getEnumCaseMultiPayload() == 8)
  {
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      if (one-time initialization token for SQL != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logging.SQL);
      id v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v18, v19))
      {
        int64_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)int64_t v20 = 0;
        _os_log_impl(&dword_18E67D000, v18, v19, "Could not convert uuid string in BiomeSQL to UUID. Replacing with nil", v20, 2u);
        MEMORY[0x192FB1900](v20, -1, -1);
      }

      uint64_t v21 = (uint64_t)a2;
      uint64_t v22 = 1;
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      uint64_t v36 = UUID.uuid.getter();
      LOWORD(v37) = v23;
      BYTE2(v37) = v24;
      BYTE3(v37) = v25;
      BYTE4(v37) = v26;
      BYTE5(v37) = v27;
      BYTE6(v37) = v28;
      HIBYTE(v37) = v29;
      uint64_t v30 = specialized Data.init<A>(_:)((uint64_t)&v36, (uint64_t)&v38);
      uint64_t v32 = v31;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      *a2 = v30;
      a2[1] = v32;
      swift_storeEnumTagMultiPayload();
      uint64_t v21 = (uint64_t)a2;
      uint64_t v22 = 0;
    }
    return __swift_storeEnumTagSinglePayload(v21, v22, 1, v11);
  }
  else
  {
    outlined destroy of AnyValue((uint64_t)v16);
    outlined init with copy of AnyValue(a1, (uint64_t)v14);
    uint64_t v36 = 0;
    unint64_t v37 = 0xE000000000000000;
    _StringGuts.grow(_:)(38);
    v34._uint64_t object = (void *)0x800000018EBE9DD0;
    v34._uint64_t countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v34);
    _print_unlocked<A, B>(_:_:)();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized Data.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  v8[3] = MEMORY[0x1E4FBB2B8];
  v8[4] = MEMORY[0x1E4F27EF0];
  v8[0] = a1;
  v8[1] = a2;
  objc_super v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x1E4FBB2B8]);
  uint64_t v3 = *v2;
  if (*v2 && (uint64_t v4 = v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = Data.InlineData.init(_:)();
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = MEMORY[0x192FAF8E0]();
    }
    else
    {
      uint64_t v6 = MEMORY[0x192FAF8F0]();
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v8);
  return v6;
}

uint64_t static BMPoirotSchematizerShim.setSQLiteValue(in:withFieldNumber:typeRawValue:convertedTypeRawValue:sqliteContext:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static BMPoirotSchematizerShim.setSQLiteValue(in:withFieldNumber:typeRawValue:convertedTypeRawValue:sqliteContext:)(a1, a2, a3, a4, a5, MEMORY[0x1E4F921D8]);
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@in_guaranteed AnyValue) -> (@out AnyValue?))?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t static BMPoirotSchematizerShim.setSQLiteValue(in:withFieldPath:typeRawValue:convertedTypeRawValue:sqliteContext:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return static BMPoirotSchematizerShim.setSQLiteValue(in:withFieldNumber:typeRawValue:convertedTypeRawValue:sqliteContext:)(a1, a2, a3, a4, a5, MEMORY[0x1E4F921D0]);
}

uint64_t static BMPoirotSchematizerShim.setSQLiteValue(in:withFieldNumber:typeRawValue:convertedTypeRawValue:sqliteContext:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(id, char *, uint64_t, uint64_t, void *, uint64_t, uint64_t))
{
  uint64_t v11 = type metadata accessor for TypeSchema();
  OUTLINED_FUNCTION_0_4();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_68();
  id v15 = a1;
  id v16 = objc_msgSend(v15, sel_bytes);
  uint64_t v17 = (char *)objc_msgSend(v15, sel_length);
  if (v16) {
    id v18 = &v17[(void)v16];
  }
  else {
    id v18 = 0;
  }
  static BMPoirotSchematizerShim.bmTypeToPoirotType(type:)(a3, v6);
  os_log_type_t v19 = static BMPoirotSchematizerShim.convertedTypeCallback(convertedType:poirotType:)(a4, v6);
  a6(v16, v18, a2, v6, v19, v20, a5);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v6, v11);
  return outlined consume of (@escaping @callee_guaranteed (@in_guaranteed AnyValue) -> (@out AnyValue?))?((uint64_t)v19);
}

id BMPoirotSchematizerShim.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id BMPoirotSchematizerShim.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

id BMPoirotSchematizerShim.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for BMPoirotSchematizerShim()
{
  return self;
}

uint64_t ObjC metadata update function for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator()
{
  return type metadata accessor for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator();
}

void type metadata completion function for BMPoirotSchematizerShim.BMPoirotRepeatedFieldEnumerator()
{
  type metadata accessor for Schematizer.RepeatableFieldIterator?();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void type metadata accessor for Schematizer.RepeatableFieldIterator?()
{
  if (!lazy cache variable for type metadata for Schematizer.RepeatableFieldIterator?)
  {
    type metadata accessor for Schematizer.RepeatableFieldIterator();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Schematizer.RepeatableFieldIterator?);
    }
  }
}

unint64_t type metadata accessor for NSError()
{
  unint64_t result = lazy cache variable for type metadata for NSError;
  if (!lazy cache variable for type metadata for NSError)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSError);
  }
  return result;
}

uint64_t outlined init with copy of AnyValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnyValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AnyValue(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnyValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of AnyValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AnyValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t static BMDatabaseInitializer.initializeSQLDatabase(identifier:)(uint64_t a1, char *a2)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = type metadata accessor for String.Encoding();
  uint64_t v5 = OUTLINED_FUNCTION_35(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_67();
  uint64_t v8 = v7 - v6;
  uint64_t v134 = type metadata accessor for URL.DirectoryHint();
  OUTLINED_FUNCTION_0_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_67();
  uint64_t v14 = v13 - v12;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  uint64_t v16 = OUTLINED_FUNCTION_35(v15);
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_67();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = (void *)type metadata accessor for URL();
  OUTLINED_FUNCTION_0_4();
  uint64_t v22 = v21;
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  char v26 = (char *)&v116 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  unint64_t v28 = (unint64_t)&v116 - v27;
  if (one-time initialization token for initializedLibrary != -1) {
LABEL_79:
  }
    swift_once();
  uint64_t v29 = static UnifiedLibrary.Library.lookupDatabaseResource(identifier:)(a1, (uint64_t)a2);
  if (v29)
  {
    uint64_t v133 = v14;
    unint64_t v125 = v30;
    uint64_t v126 = v29;
    uint64_t v123 = v8;
    uint64_t v127 = v22;
    type metadata accessor for BMResourceSpecifier();
    swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t)BMResourceSpecifier.__allocating_init(type:name:)(3, a1, (uint64_t)a2);
    id v31 = objc_msgSend(self, sel_sharedInstance);
    __dst[0] = 0;
    uint64_t v32 = (char *)objc_msgSend(v31, sel_openContainerForResource_mode_error_, v8, 3, __dst);

    unint64_t v33 = (void *)__dst[0];
    if (v32)
    {
      uint64_t v132 = (char *)a1;
      unint64_t v130 = v26;
      Swift::String v34 = self;
      id v35 = v33;
      uint64_t v36 = v32;
      id v37 = objc_msgSend(v34, sel_pathForResource_inContainer_, v8, v36);
      if (v37)
      {
        uint64_t v38 = v37;
        Swift::String v121 = v36;
        id v129 = (id)v8;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v128 = v20;
        __swift_storeEnumTagSinglePayload(v19, 1, 1, (uint64_t)v20);
        uint64_t v39 = *MEMORY[0x1E4F276C0];
        unint64_t v131 = v28;
        uint64_t v124 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 104);
        uint64_t v40 = v133;
        uint64_t v41 = v134;
        v124(v133, v39, v134);
        URL.init(filePath:directoryHint:relativeTo:)();
        __dst[0] = 0x336574696C71732ELL;
        __dst[1] = 0xE800000000000000;
        errmsg = v132;
        uint64_t v137 = (uint64_t)a2;
        swift_bridgeObjectRetain();
        errmsg = (char *)String.init<A>(_:)();
        uint64_t v137 = v42;
        String.append<A>(contentsOf:)();
        __dst[0] = (uint64_t)errmsg;
        __dst[1] = v137;
        v124(v40, v39, v41);
        lazy protocol witness table accessor for type String and conformance String();
        URL.appending<A>(path:directoryHint:)();
        (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v40, v41);
        swift_bridgeObjectRelease();
        unint64_t v43 = (char *)objc_msgSend(self, sel_defaultManager);
        uint64_t v44 = URL.path.getter();
        char v45 = (void *)MEMORY[0x192FAFF50](v44);
        swift_bridgeObjectRelease();
        LOBYTE(v38) = objc_msgSend(v43, sel_fileExistsAtPath_, v45);

        if (v38)
        {

          char v46 = v121;
          uint64_t v8 = (uint64_t)v121;
LABEL_7:

          uint64_t v47 = OUTLINED_FUNCTION_26_4();
          ((void (*)(uint64_t))v43)(v47);
          uint64_t v48 = OUTLINED_FUNCTION_61_2();
          ((void (*)(uint64_t))v43)(v48);
          return 1;
        }
        uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v67 = v66;
        unint64_t v68 = v125;
        uint64_t v69 = v126;
        uint64_t v70 = (*(uint64_t (**)(uint64_t))(*(void *)(v125 + 8) + 8))(v126);
        uint64_t v72 = v71;
        uint64_t v73 = (void *)MEMORY[0x192FAFF50](v65, v67);
        type metadata accessor for SQLDatabaseHandle();
        swift_allocObject();
        uint64_t v74 = SQLDatabaseHandle.init(identifier:useCase:readOnly:)(v70, v72, v73, 0);
        a1 = 0;
        uint64_t v8 = (uint64_t)v129;
        uint64_t v118 = v74;
        swift_bridgeObjectRelease();
        uint64_t v83 = (*(uint64_t (**)(uint64_t, unint64_t))(v68 + 48))(v69, v68);
        uint64_t v122 = v83;
        uint64_t v120 = *(char **)(v83 + 16);
        if (!v120)
        {
LABEL_69:
          swift_release();
          unint64_t v43 = v121;

          swift_bridgeObjectRelease();
          char v46 = v43;
          goto LABEL_7;
        }
        uint64_t v117 = OBJC_IVAR____TtC12BiomeStreams17SQLDatabaseHandle_db;
        if (one-time initialization token for lockedLibraries != -1) {
          swift_once();
        }
        unint64_t v28 = 0;
        uint64_t v119 = v122 + 32;
        while (1)
        {
          if (v28 >= *(void *)(v122 + 16))
          {
            __break(1u);
            goto LABEL_81;
          }
          uint64_t v84 = (void (**)(uint64_t, uint64_t, uint64_t))(v119 + 16 * v28);
          uint64_t v86 = *v84;
          uint64_t v85 = (uint64_t)v84[1];
          uint64_t v124 = v86;
          uint64_t v134 = v85;
          uint64_t v87 = (void *)(static UnifiedLibrary.Library.lockedLibraries + 16);
          uint64_t v8 = static UnifiedLibrary.Library.lockedLibraries + 24;
          swift_retain();
          os_unfair_lock_lock((os_unfair_lock_t)v8);
          uint64_t v10 = a1;
          closure #1 in static UnifiedLibrary.Library.libraries.getter(v87, __dst);
          os_unfair_lock_unlock((os_unfair_lock_t)v8);
          swift_release();
          uint64_t v14 = __dst[0];
          uint64_t v19 = *(void *)(__dst[0] + 16);
          uint64_t v126 = a1;
          unint64_t v125 = v28;
          if (v19)
          {
            swift_bridgeObjectRetain();
            a1 = v14 + 40;
            uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
            while (1)
            {
              uint64_t v22 = *(void *)(a1 - 8);
              uint64_t v88 = (*(uint64_t (**)(void))(*(void *)a1 + 40))();
              uint64_t v8 = *(void *)(v88 + 16);
              char v26 = (char *)v20[2];
              a2 = &v26[v8];
              if (__OFADD__(v26, v8)) {
                break;
              }
              uint64_t v22 = v88;
              if (!swift_isUniquelyReferenced_nonNull_native() || (uint64_t)a2 > v20[3] >> 1)
              {
                specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v20 = v89;
              }
              if (*(void *)(v22 + 16))
              {
                uint64_t v90 = v20[2];
                if ((v20[3] >> 1) - v90 < v8) {
                  goto LABEL_77;
                }
                unint64_t v91 = (unint64_t)&v20[16 * v90 + 4];
                if (v22 + 32 < v91 + (v8 << 7) && v91 < v22 + 32 + (v8 << 7))
                {
                  OUTLINED_FUNCTION_0_16();
                  uint64_t result = OUTLINED_FUNCTION_8_5();
                  __break(1u);
                  return result;
                }
                swift_arrayInitWithCopy();
                if (v8)
                {
                  uint64_t v93 = v20[2];
                  BOOL v94 = __OFADD__(v93, v8);
                  uint64_t v95 = v93 + v8;
                  if (v94) {
                    goto LABEL_78;
                  }
                  v20[2] = v95;
                }
              }
              else if (v8)
              {
                goto LABEL_76;
              }
              swift_bridgeObjectRelease();
              a1 += 16;
              if (!--v19)
              {
                swift_bridgeObjectRelease();
                goto LABEL_51;
              }
            }
            __break(1u);
LABEL_76:
            __break(1u);
LABEL_77:
            __break(1u);
LABEL_78:
            __break(1u);
            goto LABEL_79;
          }
          uint64_t v20 = (void *)MEMORY[0x1E4FBC860];
LABEL_51:
          swift_bridgeObjectRelease();
          uint64_t v96 = v20[2];
          uint64_t v97 = v124;
          if (!v96) {
            break;
          }
          uint64_t v98 = v134;
          a1 = v134 + 8;
          a2 = *(char **)(v134 + 8);
          swift_bridgeObjectRetain();
          memcpy(__dst, v20 + 4, sizeof(__dst));
          OUTLINED_FUNCTION_27_3();
          if (((uint64_t (*)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t))a2)(v97, v98)) {
            BOOL v100 = 0;
          }
          else {
            BOOL v100 = v8 == v99;
          }
          if (!v100)
          {
            uint64_t v101 = 160;
            while (1)
            {
              uint64_t v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if (v8)
              {
                swift_bridgeObjectRelease_n();
                goto LABEL_64;
              }
              outlined release of Dataflow((uint64_t)__dst);
              if (!--v96) {
                break;
              }
              uint64_t v102 = v101 + 128;
              memcpy(__dst, (char *)v20 + v101, sizeof(__dst));
              OUTLINED_FUNCTION_27_3();
              v101 += 128;
              if (!((uint64_t (*)(void (*)(uint64_t, uint64_t, uint64_t), uint64_t))a2)(v97, v134))
              {
                uint64_t v101 = v102;
                if (v8 == v103) {
                  goto LABEL_61;
                }
              }
            }
            swift_bridgeObjectRelease_n();
            goto LABEL_67;
          }
LABEL_61:
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
LABEL_64:
          OUTLINED_FUNCTION_40_1();
          a2 = v132;
          swift_bridgeObjectRetain();
          outlined release of Dataflow((uint64_t)__dst);
          errmsg = 0;
          uint64_t v104 = *(sqlite3 **)(v118 + v117);
          uint64_t v105 = v133;
          uint64_t v106 = String.utf8CString.getter();
          LODWORD(v104) = sqlite3_exec(v104, (const char *)(v106 + 32), 0, 0, &errmsg);
          swift_release();
          OUTLINED_FUNCTION_71_1();
          if (v104)
          {
            unint64_t v107 = 0xEF3E726F72726520;
            uint64_t v108 = 0x6E776F6E6B6E553CLL;
            if (errmsg)
            {
              static String.Encoding.utf8.getter();
              uint64_t v105 = v133;
              uint64_t v109 = String.init(cString:encoding:)();
              if (v110)
              {
                uint64_t v108 = v109;
                unint64_t v107 = v110;
              }
            }
            lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
            uint64_t v111 = (void *)swift_allocError();
            *(void *)uint64_t v112 = v105;
            *(void *)(v112 + 8) = a2;
            *(void *)(v112 + 16) = v108;
            *(void *)(v112 + 24) = v107;
            *(unsigned char *)(v112 + 32) = 1;
            swift_bridgeObjectRetain();
            swift_willThrow();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            uint64_t v113 = v121;
            uint64_t v114 = OUTLINED_FUNCTION_26_4();
            ((void (*)(uint64_t))v113)(v114);
            uint64_t v115 = OUTLINED_FUNCTION_61_2();
            ((void (*)(uint64_t))v113)(v115);
            swift_release();
            if (one-time initialization token for compute != -1) {
              swift_once();
            }
            uint64_t v75 = type metadata accessor for Logger();
            __swift_project_value_buffer(v75, (uint64_t)static Logging.compute);
            id v76 = v111;
            id v77 = v111;
            uint64_t v51 = Logger.logObject.getter();
            os_log_type_t v78 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v51, v78))
            {
              uint64_t v79 = (uint8_t *)swift_slowAlloc();
              __dst[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v79 = 136315138;
              swift_getErrorValue();
              uint64_t v80 = Error.localizedDescription.getter();
              uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, __dst);
              OUTLINED_FUNCTION_41_3(v82);
              swift_bridgeObjectRelease();

              _os_log_impl(&dword_18E67D000, v51, v78, "Error initializing database: %s", v79, 0xCu);
              swift_arrayDestroy();
              OUTLINED_FUNCTION_9();
              OUTLINED_FUNCTION_9();

              return 0;
            }

LABEL_12:
            return 0;
          }
          swift_bridgeObjectRelease();
LABEL_68:
          unint64_t v28 = v96 + 1;
          if ((char *)v28 == v120) {
            goto LABEL_69;
          }
        }
        swift_bridgeObjectRelease();
LABEL_67:
        OUTLINED_FUNCTION_40_1();
        OUTLINED_FUNCTION_71_1();
        goto LABEL_68;
      }
      unint64_t v28 = (unint64_t)v32;

      a1 = (uint64_t)v132;
    }
    else
    {
      unint64_t v28 = 0;
      id v56 = (id)__dst[0];
      uint64_t v57 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
    }
    if (one-time initialization token for compute != -1) {
LABEL_81:
    }
      swift_once();
    uint64_t v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Logging.compute);
    swift_bridgeObjectRetain_n();
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (_DWORD *)swift_slowAlloc();
      __dst[0] = swift_slowAlloc();
      *uint64_t v61 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, __dst);
      OUTLINED_FUNCTION_41_3(v62);
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_74_2(&dword_18E67D000, v63, v64, "Error initializing database: could not find determine database directory path for %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_9();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  if (one-time initialization token for compute != -1) {
    swift_once();
  }
  uint64_t v50 = type metadata accessor for Logger();
  __swift_project_value_buffer(v50, (uint64_t)static Logging.compute);
  swift_bridgeObjectRetain_n();
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = (_DWORD *)swift_slowAlloc();
    __dst[0] = swift_slowAlloc();
    *uint64_t v53 = 136315138;
    swift_bridgeObjectRetain();
    errmsg = (char *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (unint64_t)a2, __dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_74_2(&dword_18E67D000, v54, v55, "Error initializing database: could not find %s in IntelligencePlatformLibrary");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_9();
    OUTLINED_FUNCTION_9();
    goto LABEL_12;
  }

  swift_bridgeObjectRelease_n();
  return 0;
}

Swift::Int one-time initialization function for streamsSubscribedByNonLibraryViews()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18EB38A00;
  *(void *)(inited + 40) = 0xEA0000000000746ELL;
  *(void *)(inited + 48) = 0xD000000000000013;
  *(void *)(inited + 56) = 0x800000018EBE9F30;
  *(void *)(inited + 64) = 0xD000000000000019;
  *(void *)(inited + 72) = 0x800000018EBE9F50;
  *(void *)(inited + 80) = 0xD000000000000014;
  *(void *)(inited + 88) = 0x800000018EBE9F70;
  *(void *)(inited + 96) = 0xD000000000000021;
  *(void *)(inited + 104) = 0x800000018EBE9F90;
  *(void *)(inited + 112) = 0xD000000000000027;
  *(void *)(inited + 120) = 0x800000018EBE9FC0;
  *(void *)(inited + 128) = 0xD00000000000001ALL;
  *(void *)(inited + 136) = 0x800000018EBE9FF0;
  *(void *)(inited + 144) = 0xD00000000000001BLL;
  *(void *)(inited + 152) = 0x800000018EBEA010;
  *(void *)(inited + 160) = 0xD000000000000011;
  *(void *)(inited + 168) = 0x800000018EBEA030;
  *(void *)(inited + 176) = 0x412E6E6F69746F4DLL;
  *(void *)(inited + 184) = 0xEF79746976697463;
  *(void *)(inited + 192) = 0xD000000000000012;
  *(void *)(inited + 200) = 0x800000018EBEA050;
  *(void *)(inited + 208) = 0xD000000000000026;
  *(void *)(inited + 216) = 0x800000018EBEA070;
  *(void *)(inited + 224) = 0xD000000000000023;
  *(void *)(inited + 232) = 0x800000018EBEA0A0;
  *(void *)(inited + 240) = 0xD00000000000001ALL;
  *(void *)(inited + 248) = 0x800000018EBEA0D0;
  *(void *)(inited + 256) = 0xD000000000000021;
  *(void *)(inited + 264) = 0x800000018EBEA0F0;
  *(void *)(inited + 272) = 0xD00000000000001DLL;
  *(void *)(inited + 280) = 0x800000018EBEA120;
  *(void *)(inited + 288) = 0xD00000000000001BLL;
  *(void *)(inited + 296) = 0x800000018EBEA140;
  *(void *)(inited + 304) = 0x6172542E65676153;
  *(void *)(inited + 312) = 0xEF7470697263736ELL;
  *(void *)(inited + 320) = 0xD000000000000016;
  *(void *)(inited + 328) = 0x800000018EBEA160;
  *(void *)(inited + 32) = 0x65746E492E707041;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v1 = static _SetStorage.allocate(capacity:)();
  uint64_t v2 = 0;
  uint64_t v3 = v1 + 56;
  while (1)
  {
    uint64_t v4 = (uint64_t *)(inited + 32 + 16 * v2);
    uint64_t v6 = *v4;
    uint64_t v5 = v4[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int result = Hasher._finalize()();
    uint64_t v8 = -1 << *(unsigned char *)(v1 + 32);
    unint64_t v9 = result & ~v8;
    unint64_t v10 = v9 >> 6;
    uint64_t v11 = *(void *)(v3 + 8 * (v9 >> 6));
    uint64_t v12 = 1 << v9;
    if (((1 << v9) & v11) == 0) {
      break;
    }
    uint64_t v13 = *(void *)(v1 + 48);
    uint64_t v14 = (void *)(v13 + 16 * v9);
    if (*v14 != v6 || v14[1] != v5)
    {
      Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
      if ((result & 1) == 0)
      {
        uint64_t v16 = ~v8;
        while (1)
        {
          unint64_t v9 = (v9 + 1) & v16;
          unint64_t v10 = v9 >> 6;
          uint64_t v11 = *(void *)(v3 + 8 * (v9 >> 6));
          uint64_t v12 = 1 << v9;
          if ((v11 & (1 << v9)) == 0) {
            goto LABEL_17;
          }
          uint64_t v17 = (void *)(v13 + 16 * v9);
          if (*v17 != v6 || v17[1] != v5)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_19:
    if (++v2 == 19)
    {
      swift_setDeallocating();
      Swift::Int result = specialized _ContiguousArrayStorage.__deallocating_deinit();
      static BMDatabaseInitializer.streamsSubscribedByNonLibraryViews = v1;
      return result;
    }
  }
LABEL_17:
  *(void *)(v3 + 8 * v10) = v12 | v11;
  uint64_t v19 = (void *)(*(void *)(v1 + 48) + 16 * v9);
  *uint64_t v19 = v6;
  v19[1] = v5;
  uint64_t v20 = *(void *)(v1 + 16);
  BOOL v21 = __OFADD__(v20, 1);
  uint64_t v22 = v20 + 1;
  if (!v21)
  {
    *(void *)(v1 + 16) = v22;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t static BMDatabaseInitializer.viewSubscribedStreams()()
{
  if (one-time initialization token for initializedLibrary != -1) {
    goto LABEL_57;
  }
LABEL_2:
  uint64_t v0 = static UnifiedLibrary.Library.sqlViewToBiomeStreamMapping.getter();
  specialized _NativeDictionary.makeIterator()(v0, v36);
  uint64_t v1 = v36[0];
  uint64_t v2 = v36[1];
  int64_t v3 = v36[3];
  uint64_t v4 = v36[4];
  int64_t v5 = (unint64_t)(v36[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v4)
  {
LABEL_3:
    OUTLINED_FUNCTION_29_3();
    unint64_t v8 = v7 | (v3 << 6);
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v9 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_56;
    }
    if (v9 >= v5) {
      goto LABEL_42;
    }
    unint64_t v10 = *(void *)(v2 + 8 * v9);
    int64_t v11 = v3 + 1;
    if (!v10)
    {
      int64_t v11 = v3 + 2;
      if (v3 + 2 >= v5) {
        goto LABEL_42;
      }
      unint64_t v10 = *(void *)(v2 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v3 + 3;
        if (v3 + 3 >= v5) {
          goto LABEL_42;
        }
        unint64_t v10 = *(void *)(v2 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v3 + 4;
          if (v3 + 4 >= v5) {
            goto LABEL_42;
          }
          unint64_t v10 = *(void *)(v2 + 8 * v11);
          if (!v10)
          {
            int64_t v11 = v3 + 5;
            if (v3 + 5 >= v5) {
              goto LABEL_42;
            }
            unint64_t v10 = *(void *)(v2 + 8 * v11);
            if (!v10)
            {
              int64_t v11 = v3 + 6;
              if (v3 + 6 >= v5) {
                goto LABEL_42;
              }
              unint64_t v10 = *(void *)(v2 + 8 * v11);
              if (!v10) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_21:
    uint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
    int64_t v3 = v11;
LABEL_22:
    uint64_t v13 = *(void *)(*(void *)(v1 + 56) + 8 * v8);
    uint64_t v14 = *(void *)(v13 + 16);
    uint64_t v15 = *(void *)(v6 + 16);
    uint64_t v16 = v15 + v14;
    if (__OFADD__(v15, v14))
    {
      __break(1u);
LABEL_53:
      __break(1u);
LABEL_54:
      __break(1u);
LABEL_55:
      __break(1u);
LABEL_56:
      __break(1u);
LABEL_57:
      swift_once();
      goto LABEL_2;
    }
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v16 > *(void *)(v6 + 24) >> 1)
    {
      if (v15 <= v16) {
        uint64_t v18 = v15 + v14;
      }
      else {
        uint64_t v18 = v15;
      }
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v18, 1, v6, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (void (*)(void, uint64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
      uint64_t v6 = v19;
    }
    if (*(void *)(v13 + 16))
    {
      uint64_t v20 = *(void *)(v6 + 16);
      if ((*(void *)(v6 + 24) >> 1) - v20 < v14) {
        goto LABEL_54;
      }
      unint64_t v21 = v6 + 16 * v20 + 32;
      if (v13 + 32 < v21 + 16 * v14 && v21 < v13 + 32 + 16 * v14)
      {
        OUTLINED_FUNCTION_0_16();
        uint64_t result = OUTLINED_FUNCTION_8_5();
        __break(1u);
        return result;
      }
      swift_arrayInitWithCopy();
      if (v14)
      {
        uint64_t v23 = *(void *)(v6 + 16);
        BOOL v24 = __OFADD__(v23, v14);
        uint64_t v25 = v23 + v14;
        if (v24) {
          goto LABEL_55;
        }
        *(void *)(v6 + 16) = v25;
      }
    }
    else if (v14)
    {
      goto LABEL_53;
    }
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_3;
    }
  }
  int64_t v12 = v3 + 7;
  while (v12 < v5)
  {
    unint64_t v10 = *(void *)(v2 + 8 * v12++);
    if (v10)
    {
      int64_t v11 = v12 - 1;
      goto LABEL_21;
    }
  }
LABEL_42:
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v26 = Set.init(minimumCapacity:)();
  uint64_t v35 = v26;
  uint64_t v27 = *(void *)(v6 + 16);
  if (v27)
  {
    unint64_t v28 = (unint64_t *)(v6 + 40);
    do
    {
      unint64_t v29 = *(v28 - 1);
      unint64_t v30 = *v28;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v34, v29, v30);
      swift_bridgeObjectRelease();
      v28 += 2;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease();
    uint64_t v31 = v35;
  }
  else
  {
    uint64_t v31 = v26;
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for streamsSubscribedByNonLibraryViews != -1) {
    swift_once();
  }
  uint64_t v32 = swift_bridgeObjectRetain();

  return specialized Set.union<A>(_:)(v32, v31);
}

uint64_t specialized Set.union<A>(_:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  int64_t v3 = 0;
  uint64_t v18 = a2;
  uint64_t v4 = result + 56;
  uint64_t v5 = 1 << *(unsigned char *)(result + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(result + 56);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  for (unint64_t i = v9 | (v3 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v3 << 6))
  {
    uint64_t v14 = (unint64_t *)(*(void *)(v2 + 48) + 16 * i);
    unint64_t v15 = *v14;
    unint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v15, v16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      int64_t v3 = v11 + 1;
      if (v11 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v12 = *(void *)(v4 + 8 * v3);
      if (!v12)
      {
        int64_t v3 = v11 + 2;
        if (v11 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v12 = *(void *)(v4 + 8 * v3);
        if (!v12)
        {
          int64_t v3 = v11 + 3;
          if (v11 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v12 = *(void *)(v4 + 8 * v3);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release();
    return v18;
  }
  unint64_t v12 = *(void *)(v4 + 8 * v13);
  if (v12)
  {
    int64_t v3 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v3 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v3 >= v8) {
      goto LABEL_23;
    }
    unint64_t v12 = *(void *)(v4 + 8 * v3);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id BMDatabaseInitializer.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id BMDatabaseInitializer.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BMDatabaseInitializer();
  return objc_msgSendSuper2(&v2, sel_init);
}

id BMDatabaseInitializer.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BMDatabaseInitializer();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_9_6();
    goto LABEL_11;
  }
  uint64_t v5 = (char *)(a4 + 16 * a1 + 32);
  uint64_t v6 = &__dst[16 * v4];
  if (v5 >= v6 || &v5[16 * v4] <= __dst)
  {
    memcpy(__dst, v5, 16 * v4);
    swift_bridgeObjectRelease();
    return v6;
  }
  OUTLINED_FUNCTION_0_16();
  OUTLINED_FUNCTION_10_4();
LABEL_11:
  uint64_t result = (char *)OUTLINED_FUNCTION_8_5();
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unint64_t *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (unint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      unint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  uint64_t *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t *v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

unint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(unint64_t result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v8 = result;
  uint64_t v9 = *v4;
  unint64_t v10 = *(void *)(*v4 + 16);
  unint64_t v11 = *(void *)(*v4 + 24);
  if (v11 > v10 && (a4 & 1) != 0)
  {
    uint64_t v12 = *v4;
    goto LABEL_121;
  }
  if (a4)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    uint64_t v13 = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v12 = v13;
    if (*(void *)(v9 + 16))
    {
      unint64_t v91 = v8;
      uint64_t v14 = 1 << *(unsigned char *)(v9 + 32);
      unint64_t v93 = a2;
      uint64_t v95 = (void *)(v9 + 56);
      if (v14 < 64) {
        uint64_t v15 = ~(-1 << v14);
      }
      else {
        uint64_t v15 = -1;
      }
      unint64_t v16 = v15 & *(void *)(v9 + 56);
      int64_t v17 = (unint64_t)(v14 + 63) >> 6;
      uint64_t v18 = v13 + 56;
      uint64_t result = swift_retain();
      int64_t v19 = 0;
      if (!v16) {
        goto LABEL_11;
      }
LABEL_10:
      unint64_t v20 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      for (unint64_t i = v20 | (v19 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v19 << 6))
      {
        uint64_t v25 = (uint64_t *)(*(void *)(v9 + 48) + 16 * i);
        uint64_t v26 = *v25;
        uint64_t v27 = v25[1];
        Hasher.init(_seed:)();
        String.hash(into:)();
        uint64_t result = Hasher._finalize()();
        uint64_t v28 = -1 << *(unsigned char *)(v12 + 32);
        unint64_t v29 = result & ~v28;
        unint64_t v30 = v29 >> 6;
        if (((-1 << v29) & ~*(void *)(v18 + 8 * (v29 >> 6))) == 0) {
          break;
        }
        unint64_t v31 = __clz(__rbit64((-1 << v29) & ~*(void *)(v18 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
LABEL_36:
        *(void *)(v18 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v31;
        uint64_t v36 = (void *)(*(void *)(v12 + 48) + 16 * v31);
        *uint64_t v36 = v26;
        v36[1] = v27;
        ++*(void *)(v12 + 16);
        if (v16) {
          goto LABEL_10;
        }
LABEL_11:
        int64_t v22 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_126;
        }
        if (v22 >= v17)
        {
LABEL_68:
          swift_release();
          uint64_t v55 = 1 << *(unsigned char *)(v9 + 32);
          unint64_t v8 = v91;
          a2 = v93;
          uint64_t v5 = v4;
          if (v55 > 63) {
            specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v55 + 63) >> 6, v95);
          }
          else {
            void *v95 = -1 << v55;
          }
          *(void *)(v9 + 16) = 0;
          goto LABEL_106;
        }
        unint64_t v23 = v95[v22];
        ++v19;
        if (!v23)
        {
          int64_t v19 = v22 + 1;
          if (v22 + 1 >= v17) {
            goto LABEL_68;
          }
          unint64_t v23 = v95[v19];
          if (!v23)
          {
            int64_t v19 = v22 + 2;
            if (v22 + 2 >= v17) {
              goto LABEL_68;
            }
            unint64_t v23 = v95[v19];
            if (!v23)
            {
              int64_t v19 = v22 + 3;
              if (v22 + 3 >= v17) {
                goto LABEL_68;
              }
              unint64_t v23 = v95[v19];
              if (!v23)
              {
                int64_t v24 = v22 + 4;
                if (v24 >= v17) {
                  goto LABEL_68;
                }
                unint64_t v23 = v95[v24];
                if (!v23)
                {
                  while (1)
                  {
                    int64_t v19 = v24 + 1;
                    if (__OFADD__(v24, 1)) {
                      goto LABEL_130;
                    }
                    if (v19 >= v17) {
                      goto LABEL_68;
                    }
                    unint64_t v23 = v95[v19];
                    ++v24;
                    if (v23) {
                      goto LABEL_26;
                    }
                  }
                }
                int64_t v19 = v24;
              }
            }
          }
        }
LABEL_26:
        unint64_t v16 = (v23 - 1) & v23;
      }
      char v32 = 0;
      unint64_t v33 = (unint64_t)(63 - v28) >> 6;
      while (++v30 != v33 || (v32 & 1) == 0)
      {
        BOOL v34 = v30 == v33;
        if (v30 == v33) {
          unint64_t v30 = 0;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v18 + 8 * v30);
        if (v35 != -1)
        {
          unint64_t v31 = __clz(__rbit64(~v35)) + (v30 << 6);
          goto LABEL_36;
        }
      }
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
      goto LABEL_129;
    }
    goto LABEL_106;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  if (v11 <= v10)
  {
    uint64_t v56 = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v12 = v56;
    if (*(void *)(v9 + 16))
    {
      unint64_t v92 = v8;
      uint64_t v57 = 1 << *(unsigned char *)(v9 + 32);
      uint64_t v58 = v9 + 56;
      if (v57 < 64) {
        uint64_t v59 = ~(-1 << v57);
      }
      else {
        uint64_t v59 = -1;
      }
      unint64_t v60 = v59 & *(void *)(v9 + 56);
      unint64_t v94 = a2;
      int64_t v96 = (unint64_t)(v57 + 63) >> 6;
      uint64_t v61 = v56 + 56;
      uint64_t result = swift_retain();
      int64_t v62 = 0;
      if (!v60) {
        goto LABEL_76;
      }
LABEL_75:
      unint64_t v63 = __clz(__rbit64(v60));
      v60 &= v60 - 1;
      for (unint64_t j = v63 | (v62 << 6); ; unint64_t j = __clz(__rbit64(v66)) + (v62 << 6))
      {
        unint64_t v68 = (uint64_t *)(*(void *)(v9 + 48) + 16 * j);
        uint64_t v69 = *v68;
        uint64_t v70 = v68[1];
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        uint64_t result = Hasher._finalize()();
        uint64_t v71 = -1 << *(unsigned char *)(v12 + 32);
        unint64_t v72 = result & ~v71;
        unint64_t v73 = v72 >> 6;
        if (((-1 << v72) & ~*(void *)(v61 + 8 * (v72 >> 6))) != 0)
        {
          unint64_t v74 = __clz(__rbit64((-1 << v72) & ~*(void *)(v61 + 8 * (v72 >> 6)))) | v72 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v75 = 0;
          unint64_t v76 = (unint64_t)(63 - v71) >> 6;
          do
          {
            if (++v73 == v76 && (v75 & 1) != 0) {
              goto LABEL_125;
            }
            BOOL v77 = v73 == v76;
            if (v73 == v76) {
              unint64_t v73 = 0;
            }
            v75 |= v77;
            uint64_t v78 = *(void *)(v61 + 8 * v73);
          }
          while (v78 == -1);
          unint64_t v74 = __clz(__rbit64(~v78)) + (v73 << 6);
        }
        *(void *)(v61 + ((v74 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v74;
        uint64_t v79 = (void *)(*(void *)(v12 + 48) + 16 * v74);
        *uint64_t v79 = v69;
        v79[1] = v70;
        ++*(void *)(v12 + 16);
        if (v60) {
          goto LABEL_75;
        }
LABEL_76:
        int64_t v65 = v62 + 1;
        if (__OFADD__(v62, 1)) {
          goto LABEL_128;
        }
        if (v65 >= v96) {
          goto LABEL_123;
        }
        unint64_t v66 = *(void *)(v58 + 8 * v65);
        ++v62;
        if (!v66)
        {
          int64_t v62 = v65 + 1;
          if (v65 + 1 >= v96) {
            goto LABEL_123;
          }
          unint64_t v66 = *(void *)(v58 + 8 * v62);
          if (!v66)
          {
            int64_t v62 = v65 + 2;
            if (v65 + 2 >= v96) {
              goto LABEL_123;
            }
            unint64_t v66 = *(void *)(v58 + 8 * v62);
            if (!v66)
            {
              int64_t v62 = v65 + 3;
              if (v65 + 3 >= v96) {
                goto LABEL_123;
              }
              unint64_t v66 = *(void *)(v58 + 8 * v62);
              if (!v66)
              {
                int64_t v67 = v65 + 4;
                if (v67 >= v96) {
                  goto LABEL_123;
                }
                unint64_t v66 = *(void *)(v58 + 8 * v67);
                if (!v66)
                {
                  while (1)
                  {
                    int64_t v62 = v67 + 1;
                    if (__OFADD__(v67, 1)) {
                      goto LABEL_132;
                    }
                    if (v62 >= v96) {
                      break;
                    }
                    unint64_t v66 = *(void *)(v58 + 8 * v62);
                    ++v67;
                    if (v66) {
                      goto LABEL_91;
                    }
                  }
LABEL_123:
                  swift_release_n();
                  unint64_t v8 = v92;
                  a2 = v94;
                  uint64_t v5 = v4;
LABEL_107:
                  uint64_t *v5 = v12;
                  Hasher.init(_seed:)();
                  String.hash(into:)();
                  uint64_t result = Hasher._finalize()();
                  uint64_t v80 = -1 << *(unsigned char *)(v12 + 32);
                  a3 = result & ~v80;
                  if ((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
                  {
                    uint64_t v81 = *(void *)(v12 + 48);
                    uint64_t v82 = (void *)(v81 + 16 * a3);
                    BOOL v83 = *v82 == v8 && v82[1] == a2;
                    if (v83 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
                    {
LABEL_120:
                      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                      __break(1u);
                    }
                    else
                    {
                      uint64_t v84 = ~v80;
                      while (1)
                      {
                        a3 = (a3 + 1) & v84;
                        if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
                          break;
                        }
                        uint64_t v85 = (void *)(v81 + 16 * a3);
                        if (*v85 != v8 || v85[1] != a2)
                        {
                          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
                          if ((result & 1) == 0) {
                            continue;
                          }
                        }
                        goto LABEL_120;
                      }
                    }
                  }
LABEL_121:
                  *(void *)(v12 + 8 * (a3 >> 6) + 56) |= 1 << a3;
                  uint64_t v87 = (unint64_t *)(*(void *)(v12 + 48) + 16 * a3);
                  *uint64_t v87 = v8;
                  v87[1] = a2;
                  uint64_t v88 = *(void *)(v12 + 16);
                  BOOL v89 = __OFADD__(v88, 1);
                  uint64_t v90 = v88 + 1;
                  if (!v89)
                  {
                    *(void *)(v12 + 16) = v90;
                    return result;
                  }
LABEL_129:
                  __break(1u);
LABEL_130:
                  __break(1u);
                  goto LABEL_131;
                }
                int64_t v62 = v67;
              }
            }
          }
        }
LABEL_91:
        unint64_t v60 = (v66 - 1) & v66;
      }
    }
LABEL_106:
    swift_release();
    goto LABEL_107;
  }
  uint64_t v37 = static _SetStorage.copy(original:)();
  uint64_t v12 = v37;
  if (!*(void *)(v9 + 16))
  {
LABEL_103:
    uint64_t result = swift_release();
    uint64_t *v5 = v12;
    goto LABEL_121;
  }
  uint64_t result = v37 + 56;
  uint64_t v38 = v9 + 56;
  unint64_t v39 = (unint64_t)((1 << *(unsigned char *)(v12 + 32)) + 63) >> 6;
  if (v12 != v9 || result >= v9 + 56 + 8 * v39) {
    uint64_t result = (unint64_t)memmove((void *)result, (const void *)(v9 + 56), 8 * v39);
  }
  int64_t v41 = 0;
  *(void *)(v12 + 16) = *(void *)(v9 + 16);
  uint64_t v42 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v43 = *(void *)(v9 + 56);
  uint64_t v44 = -1;
  if (v42 < 64) {
    uint64_t v44 = ~(-1 << v42);
  }
  unint64_t v45 = v44 & v43;
  int64_t v46 = (unint64_t)(v42 + 63) >> 6;
  if ((v44 & v43) == 0) {
    goto LABEL_50;
  }
LABEL_49:
  unint64_t v47 = __clz(__rbit64(v45));
  v45 &= v45 - 1;
  for (unint64_t k = v47 | (v41 << 6); ; unint64_t k = __clz(__rbit64(v50)) + (v41 << 6))
  {
    os_log_type_t v52 = (void *)(*(void *)(v9 + 48) + 16 * k);
    uint64_t v53 = v52[1];
    uint64_t v54 = (void *)(*(void *)(v12 + 48) + 16 * k);
    *uint64_t v54 = *v52;
    v54[1] = v53;
    uint64_t result = swift_bridgeObjectRetain();
    if (v45) {
      goto LABEL_49;
    }
LABEL_50:
    int64_t v49 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      goto LABEL_127;
    }
    if (v49 >= v46) {
      goto LABEL_103;
    }
    unint64_t v50 = *(void *)(v38 + 8 * v49);
    ++v41;
    if (!v50)
    {
      int64_t v41 = v49 + 1;
      if (v49 + 1 >= v46) {
        goto LABEL_103;
      }
      unint64_t v50 = *(void *)(v38 + 8 * v41);
      if (!v50)
      {
        int64_t v41 = v49 + 2;
        if (v49 + 2 >= v46) {
          goto LABEL_103;
        }
        unint64_t v50 = *(void *)(v38 + 8 * v41);
        if (!v50)
        {
          int64_t v41 = v49 + 3;
          if (v49 + 3 >= v46) {
            goto LABEL_103;
          }
          unint64_t v50 = *(void *)(v38 + 8 * v41);
          if (!v50) {
            break;
          }
        }
      }
    }
LABEL_65:
    unint64_t v45 = (v50 - 1) & v50;
  }
  int64_t v51 = v49 + 4;
  if (v51 >= v46) {
    goto LABEL_103;
  }
  unint64_t v50 = *(void *)(v38 + 8 * v51);
  if (v50)
  {
    int64_t v41 = v51;
    goto LABEL_65;
  }
  while (1)
  {
    int64_t v41 = v51 + 1;
    if (__OFADD__(v51, 1)) {
      break;
    }
    if (v41 >= v46) {
      goto LABEL_103;
    }
    unint64_t v50 = *(void *)(v38 + 8 * v41);
    ++v51;
    if (v50) {
      goto LABEL_65;
    }
  }
LABEL_131:
  __break(1u);
LABEL_132:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for BMDatabaseInitializer()
{
  return self;
}

uint64_t OUTLINED_FUNCTION_49_2()
{
  return v0;
}

uint64_t dispatch thunk of static QueryPlannerMetadataCache.tableName(materializedViewName:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of QueryPlannerMetadataCache.flush()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.materializedView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.itemsToBeFlushed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.itemsToBeFlushed.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.itemsToBeFlushed.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.itemCache.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.itemCache.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 72))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.itemCache.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.cacheSize.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.db.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 96))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.sqlExpressionEvaluator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 104))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.groupByFields.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.payloadSchema.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 120))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.isTableEmpty.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.isTableEmpty.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 136))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.isTableEmpty.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 144))();
}

uint64_t dispatch thunk of KeyedQueryPlannerMetadataCache.readSQL.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 152))();
}

uint64_t dispatch thunk of static KeyedQueryPlannerMetadataCache.metadataItemAsRow(item:groupBySchema:payloadSchema:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 160))();
}

uint64_t dispatch thunk of static KeyedQueryPlannerMetadataCache.columnNames(groupBySchema:payloadSchema:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 168))();
}

uint64_t dispatch thunk of static KeyedQueryPlannerMetadataCache.metadataFromRow(_:groupBySchema:payloadSchema:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 176))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS14BiomeSQLParser11SQLDataTypeOG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5C197_pIggnozo_SS3key_AC5valuetSSsAD_pIegnrzr_TR04_s12a111Streams30KeyedQueryPlannerMetadataCachePAAE14createTableSQL20materializedViewName6schemaS2S_SDySS0A9SQLParser11cD19OGtKFZS2S_AItKXEfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  uint64_t v4 = MEMORY[0x1F4188790](v41);
  uint64_t v40 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  unint64_t v39 = (uint64_t *)((char *)&v36 - v7);
  MEMORY[0x1F4188790](v6);
  uint64_t v38 = (char *)&v36 - v8;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (!v9) {
    return v10;
  }
  uint64_t v48 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  uint64_t result = specialized Dictionary.startIndex.getter(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    unint64_t v13 = result;
    if (result < 1 << *(unsigned char *)(a1 + 32))
    {
      uint64_t v14 = a1 + 64;
      uint64_t v36 = a1 + 64;
      uint64_t v37 = a1;
      uint64_t v15 = v38;
      while ((*(void *)(v14 + 8 * (v13 >> 6)) & (1 << v13)) != 0)
      {
        if (v12 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_22;
        }
        uint64_t v44 = 1 << v13;
        unint64_t v45 = v13 >> 6;
        uint64_t v42 = v9;
        uint64_t v43 = v12;
        uint64_t v16 = v41;
        int64_t v17 = (char *)v15 + *(int *)(v41 + 48);
        uint64_t v18 = *(void *)(a1 + 56);
        int64_t v19 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        int64_t v22 = type metadata accessor for SQLDataType();
        uint64_t v23 = v13;
        int64_t v24 = v22;
        Description = v22[-1].Description;
        uint64_t v47 = v2;
        uint64_t v26 = (void (*)(char *, uint64_t, ValueMetadata *))Description[2];
        uint64_t v27 = Description[9];
        uint64_t v46 = v23;
        v26(v17, v18 + v27 * v23, v22);
        *uint64_t v15 = v21;
        v15[1] = v20;
        uint64_t v28 = (uint64_t)v39;
        *unint64_t v39 = v21;
        *(void *)(v28 + 8) = v20;
        v26((char *)(v28 + *(int *)(v16 + 48)), (uint64_t)v17, v24);
        uint64_t v29 = v40;
        _s10Foundation4UUIDVSgWObTm_0(v28, v40, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        swift_bridgeObjectRetain_n();
        outlined destroy of UUID?((uint64_t)v15, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        uint64_t v30 = v47;
        uint64_t v31 = closure #1 in static KeyedQueryPlannerMetadataCache.createTableSQL(materializedViewName:schema:)(*(void *)v29, *(void **)(v29 + 8));
        uint64_t v33 = v32;
        uint64_t v2 = v30;
        outlined destroy of UUID?(v29, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        uint64_t v10 = v48;
        if (v30)
        {
          swift_release();
          return v10;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v10 = v48;
        }
        a1 = v37;
        unint64_t v34 = *(void *)(v10 + 16);
        if (v34 >= *(void *)(v10 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v10 = v48;
        }
        *(void *)(v10 + 16) = v34 + 1;
        uint64_t v35 = v10 + 16 * v34;
        *(void *)(v35 + 32) = v31;
        *(void *)(v35 + 40) = v33;
        uint64_t result = v46;
        if (v46 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_23;
        }
        uint64_t v14 = v36;
        if ((*(void *)(v36 + 8 * v45) & v44) == 0) {
          goto LABEL_24;
        }
        if (v43 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_25;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        uint64_t v9 = v42 - 1;
        if (v42 == 1) {
          return v10;
        }
        unint64_t v13 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          uint64_t v12 = *(unsigned int *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_26;
      }
      __break(1u);
LABEL_22:
      __break(1u);
LABEL_23:
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t static QueryPlannerMetadata.clearMetadata(materializedViewName:database:)(uint64_t a1, int a2, sqlite3 *a3)
{
  static BookmarkCache.tableName(materializedViewName:)();
  uint64_t v6 = v5;
  OUTLINED_FUNCTION_55_4();
  swift_bridgeObjectRelease();
  v7._uint64_t countAndFlagsBits = a1;
  v7._uint64_t object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = String.utf8CString.getter();
  uint64_t v9 = a3;
  uint64_t v10 = OUTLINED_FUNCTION_90_2(a3, (const char *)(v8 + 32));
  swift_release();
  if (v10) {
    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  uint64_t v11 = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(a1, a2, 36, 0xD000000000000022, (void *)0x800000018EBEA6C0);
  unint64_t v13 = v12;
  OUTLINED_FUNCTION_55_4();
  swift_bridgeObjectRelease();
  v14._uint64_t countAndFlagsBits = v11;
  v14._uint64_t object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = String.utf8CString.getter();
  uint64_t v10 = OUTLINED_FUNCTION_90_2(a3, (const char *)(v15 + 32));
  swift_release();
  if (v10)
  {
LABEL_3:
    id v16 = BMSQLDatabaseError(v10, a3, 0);
    swift_getErrorValue();
    Error.localizedDescription.getter();

    OUTLINED_FUNCTION_9_7();
    uint64_t v17 = OUTLINED_FUNCTION_29_4();
    uint64_t v19 = v18;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    OUTLINED_FUNCTION_39();
    *(void *)uint64_t v20 = 0xD000000000000015;
LABEL_4:
    *(void *)(v20 + 8) = 0x800000018EBE9410;
    *(void *)(v20 + 16) = v17;
    *(void *)(v20 + 24) = v19;
    *(unsigned char *)(v20 + 32) = 1;
    return swift_willThrow();
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(a1, a2, 27, 0xD000000000000019, (void *)0x800000018EBEA6A0);
  int64_t v24 = v23;
  OUTLINED_FUNCTION_55_4();
  swift_bridgeObjectRelease();
  v25._uint64_t countAndFlagsBits = v22;
  v25._uint64_t object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_40_2();
  uint64_t v26 = String.utf8CString.getter();
  uint64_t v27 = OUTLINED_FUNCTION_90_2(v9, (const char *)(v26 + 32));
  swift_release();
  if (v27)
  {
    id v28 = BMSQLDatabaseError(v27, v9, 0);
    swift_getErrorValue();
    Error.localizedDescription.getter();

    OUTLINED_FUNCTION_9_7();
    uint64_t v17 = OUTLINED_FUNCTION_29_4();
    uint64_t v19 = v29;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    OUTLINED_FUNCTION_39();
    *(void *)uint64_t v20 = 0xD000000000000015;
    goto LABEL_4;
  }
  return swift_bridgeObjectRelease();
}

uint64_t MetadataSQLError.description.getter()
{
  type metadata accessor for AggregationFunction.AggregationType();
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_16_4();
  type metadata accessor for MetadataSQLError(0);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_67();
  uint64_t v5 = v4 - v3;
  _s12BiomeStreams13StorableValueOWOcTm_1(v0, v4 - v3, (void (*)(void))type metadata accessor for MetadataSQLError);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      OUTLINED_FUNCTION_7_8();
      _StringGuts.grow(_:)(93);
      OUTLINED_FUNCTION_48_3();
      OUTLINED_FUNCTION_36(0xD000000000000029, (uint64_t)"The number of payload keys in the query (");
      v7._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_63_3();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      unint64_t v8 = OUTLINED_FUNCTION_121_1();
      goto LABEL_6;
    case 2u:
      OUTLINED_FUNCTION_7_8();
      _StringGuts.grow(_:)(115);
      OUTLINED_FUNCTION_48_3();
      v10._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_121_1();
      String.append(_:)(v10);
      v11._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_63_3();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      OUTLINED_FUNCTION_7_8();
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_96_2(0xD00000000000001ALL);
      swift_bridgeObjectRelease();
      uint64_t v13 = 0x6F6E207361772022;
      unint64_t v14 = 0xEF646E756F662074;
      goto LABEL_11;
    case 4u:
      uint64_t v15 = *(void *)v5;
      id v16 = *(void **)(v5 + 8);
      OUTLINED_FUNCTION_7_8();
      _StringGuts.grow(_:)(100);
      OUTLINED_FUNCTION_48_3();
      OUTLINED_FUNCTION_36(0xD000000000000021, (uint64_t)"The aggregation metadata field \"(");
      v17._uint64_t countAndFlagsBits = v15;
      v17._uint64_t object = v16;
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 5u:
      uint64_t v18 = *(void *)v5;
      uint64_t v19 = *(void **)(v5 + 8);
      OUTLINED_FUNCTION_7_8();
      _StringGuts.grow(_:)(81);
      OUTLINED_FUNCTION_48_3();
      OUTLINED_FUNCTION_36(0xD000000000000013, (uint64_t)"The record field \"(");
      v20._uint64_t countAndFlagsBits = v18;
      v20._uint64_t object = v19;
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
LABEL_10:
      OUTLINED_FUNCTION_35_1();
LABEL_11:
      String.append(_:)(*(Swift::String *)&v13);
      return OUTLINED_FUNCTION_71();
    case 6u:
      OUTLINED_FUNCTION_28();
      v21();
      OUTLINED_FUNCTION_7_8();
      _StringGuts.grow(_:)(37);
      OUTLINED_FUNCTION_48_3();
      OUTLINED_FUNCTION_36(0xD000000000000023, (uint64_t)"Undefined aggregationFunctionType: ");
      _print_unlocked<A, B>(_:_:)();
      OUTLINED_FUNCTION_18_4();
      v22();
      return OUTLINED_FUNCTION_71();
    case 7u:
      uint64_t v23 = *(void *)v5;
      unint64_t v24 = *(void *)(v5 + 8);
      char v25 = *(unsigned char *)(v5 + 16);
      OUTLINED_FUNCTION_7_8();
      _StringGuts.grow(_:)(27);
      OUTLINED_FUNCTION_35_1();
      String.append(_:)(v26);
      _print_unlocked<A, B>(_:_:)();
      outlined consume of DatabaseValue(v23, v24, v25);
      return OUTLINED_FUNCTION_71();
    case 8u:
      uint64_t v28 = *(void *)v5;
      uint64_t v27 = *(void *)(v5 + 8);
      OUTLINED_FUNCTION_7_8();
      _StringGuts.grow(_:)(94);
      OUTLINED_FUNCTION_48_3();
      OUTLINED_FUNCTION_36(0xD000000000000045, (uint64_t)"Payloads do not have the same keys or value types. firstPayloadKeys: ");
      uint64_t v29 = MEMORY[0x1E4FBB1A0];
      v30._uint64_t countAndFlagsBits = MEMORY[0x192FB0130](v28, MEMORY[0x1E4FBB1A0]);
      String.append(_:)(v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_36(0xD000000000000015, (uint64_t)", secondPayloadKeys: ");
      uint64_t v31 = v27;
      uint64_t v32 = v29;
      goto LABEL_17;
    case 9u:
      OUTLINED_FUNCTION_7_8();
      _StringGuts.grow(_:)(25);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_96_2(0xD000000000000017);
      goto LABEL_18;
    case 0xAu:
      uint64_t v33 = *(void *)v5;
      OUTLINED_FUNCTION_7_8();
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease();
      uint64_t v32 = type metadata accessor for StorableValue(0);
      uint64_t v31 = v33;
LABEL_17:
      v34._uint64_t countAndFlagsBits = MEMORY[0x192FB0130](v31, v32);
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      goto LABEL_18;
    case 0xBu:
    case 0xCu:
      return OUTLINED_FUNCTION_71();
    default:
      OUTLINED_FUNCTION_7_8();
      _StringGuts.grow(_:)(92);
      OUTLINED_FUNCTION_48_3();
      OUTLINED_FUNCTION_36(0xD00000000000002ALL, (uint64_t)"The number of group by keys in the query (");
      v6._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_63_3();
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
LABEL_5:
      OUTLINED_FUNCTION_35_1();
LABEL_6:
      String.append(_:)(*(Swift::String *)&v8);
      v12._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_63_3();
      String.append(_:)(v12);
LABEL_18:
      swift_bridgeObjectRelease();
      return OUTLINED_FUNCTION_71();
  }
}

uint64_t closure #1 in static KeyedQueryPlannerMetadataCache.createTableSQL(materializedViewName:schema:)(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for SQLRawDataType();
  Description = (void (**)(char *, ValueMetadata *))v4[-1].Description;
  MEMORY[0x1F4188790](v4);
  Swift::String v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = 0;
  v17[1] = 0xE000000000000000;
  v8._uint64_t countAndFlagsBits = 34;
  v8._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = a1;
  v9._uint64_t object = a2;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = 8226;
  v10._uint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  SQLDataType.columnType()();
  if (v11) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v13 = SQLRawDataType.rawValue.getter();
  uint64_t v15 = v14;
  Description[1](v7, v4);
  v16._uint64_t countAndFlagsBits = v13;
  v16._uint64_t object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  return v17[0];
}

uint64_t static KeyedAggregationMetadataCache.tableName(materializedViewName:)(uint64_t a1, int a2)
{
  return OUTLINED_FUNCTION_76_2(a1, a2, 36, 34, (void *)0x800000018EBEA6C0);
}

uint64_t static KeyedFirstMatchingRecordCache.tableName(materializedViewName:)(uint64_t a1, int a2)
{
  return OUTLINED_FUNCTION_76_2(a1, a2, 27, 25, (void *)0x800000018EBEA6A0);
}

uint64_t ObjC metadata update function for QueryPlannerMetadata()
{
  return type metadata accessor for QueryPlannerMetadata(0);
}

uint64_t type metadata completion function for QueryPlannerMetadata()
{
  uint64_t result = (uint64_t)type metadata accessor for MaterializedView();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for BookmarkCache(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for KeyedAggregationMetadataCache(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for KeyedFirstMatchingRecordCache(319);
        if (v4 <= 0x3F) {
          return swift_updateClassMetadata2();
        }
      }
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for KeyedFirstMatchingRecordCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm_0_0);
}

uint64_t storeEnumTagSinglePayload for KeyedFirstMatchingRecordCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm_0_0);
}

void initializeBufferWithCopyOfBuffer for KeyedFirstMatchingRecordCache()
{
  OUTLINED_FUNCTION_104_1();
  unint64_t v3 = v1;
  unint64_t v4 = v0;
  if ((*(_DWORD *)(*((void *)v2 - 1) + 80) & 0x20000) != 0)
  {
    void *v0 = *v1;
  }
  else
  {
    uint64_t v5 = v2;
    type metadata accessor for MaterializedView();
    OUTLINED_FUNCTION_4_3();
    OUTLINED_FUNCTION_15_0();
    v6();
    uint64_t v7 = v5[6];
    *(void *)((char *)v4 + v5[5]) = *(void *)((char *)v3 + v5[5]);
    *(void *)((char *)v4 + v7) = *(void *)((char *)v3 + v7);
    uint64_t v8 = v5[8];
    *(void *)((char *)v4 + v5[7]) = *(void *)((char *)v3 + v5[7]);
    Swift::String v9 = (void *)((char *)v4 + v8);
    Swift::String v10 = (char *)v3 + v8;
    uint64_t v11 = *(void **)v10;
    uint64_t v20 = *((void *)v10 + 1);
    *Swift::String v9 = *(void *)v10;
    v9[1] = v20;
    OUTLINED_FUNCTION_95_2();
    uint64_t v12 = v5[12];
    *(void *)((char *)v4 + v5[11]) = *(void *)((char *)v3 + v5[11]);
    *(void *)((char *)v4 + v12) = *(void *)((char *)v3 + v12);
    uint64_t v13 = v5[14];
    *(void *)((char *)v4 + v5[13]) = *(void *)((char *)v3 + v5[13]);
    *((unsigned char *)v4 + v13) = *((unsigned char *)v3 + v13);
    uint64_t v14 = v5[15];
    uint64_t v15 = (_OWORD *)((char *)v4 + v14);
    Swift::String v16 = (_OWORD *)((char *)v3 + v14);
    uint64_t v17 = *(void *)((char *)v3 + v14 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v18 = v11;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v17)
    {
      long long v19 = v16[1];
      *uint64_t v15 = *v16;
      v15[1] = v19;
      goto LABEL_7;
    }
    OUTLINED_FUNCTION_94_2();
  }
  swift_retain();
LABEL_7:
  OUTLINED_FUNCTION_93_2();
}

uint64_t assignWithCopy for KeyedFirstMatchingRecordCache(uint64_t a1, uint64_t a2, int *a3)
{
  OUTLINED_FUNCTION_81_2();
  OUTLINED_FUNCTION_4_3();
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v3, a2);
  OUTLINED_FUNCTION_62_2(a3[5]);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_62_2(a3[6]);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_62_2(a3[7]);
  swift_bridgeObjectRelease();
  uint64_t v7 = a3[8];
  uint64_t v8 = v3 + v7;
  uint64_t v9 = a2 + v7;
  Swift::String v10 = *(void **)(a2 + v7);
  uint64_t v11 = *(void **)v8;
  *(void *)uint64_t v8 = v10;
  id v12 = v10;

  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v3 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(v3 + a3[10]) = *(void *)(a2 + a3[10]);
  *(void *)(v3 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_retain();
  swift_release();
  *(void *)(v3 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_62_2(a3[13]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v3 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  uint64_t v13 = a3[15];
  uint64_t v14 = v3 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = *(void *)(v3 + v13 + 8);
  uint64_t v17 = *(void *)(v15 + 8);
  if (v16)
  {
    if (v17)
    {
      OUTLINED_FUNCTION_148_0();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t v18 = *(void *)(v15 + 24);
      *(void *)(v14 + 16) = *(void *)(v15 + 16);
      *(void *)(v14 + 24) = v18;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of UUID?(v14, &demangling cache variable for type metadata for (sql: String, argumentsFromKey: ()));
      long long v20 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      *(_OWORD *)(v14 + 16) = v20;
    }
  }
  else if (v17)
  {
    OUTLINED_FUNCTION_148_0();
    uint64_t v19 = *(void *)(v15 + 24);
    *(void *)(v14 + 16) = *(void *)(v15 + 16);
    *(void *)(v14 + 24) = v19;
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    long long v21 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    *(_OWORD *)(v14 + 16) = v21;
  }
  return v3;
}

uint64_t initializeWithTake for KeyedFirstMatchingRecordCache(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for MaterializedView();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_45_1();
  v6();
  OUTLINED_FUNCTION_59_4(a3[5]);
  uint64_t v7 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  OUTLINED_FUNCTION_59_4(a3[9]);
  OUTLINED_FUNCTION_59_4(a3[11]);
  uint64_t v8 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[15];
  Swift::String v10 = (_OWORD *)(a1 + v9);
  uint64_t v11 = (_OWORD *)(a2 + v9);
  long long v12 = v11[1];
  *Swift::String v10 = *v11;
  v10[1] = v12;
  return a1;
}

uint64_t assignWithTake for KeyedFirstMatchingRecordCache(uint64_t a1, uint64_t a2, int *a3)
{
  OUTLINED_FUNCTION_81_2();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_66_2();
  v6();
  OUTLINED_FUNCTION_50_4(a3[5]);
  OUTLINED_FUNCTION_50_4(a3[6]);
  OUTLINED_FUNCTION_50_4(a3[7]);
  uint64_t v7 = a3[8];
  uint64_t v8 = v3 + v7;
  uint64_t v9 = a2 + v7;
  Swift::String v10 = *(void **)(v3 + v7);
  *(void *)(v3 + v7) = *(void *)(a2 + v7);

  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_95_2();
  *(void *)(v3 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_release();
  *(void *)(v3 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_50_4(a3[13]);
  uint64_t v11 = a3[15];
  *(unsigned char *)(v3 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  uint64_t v12 = v3 + v11;
  uint64_t v13 = a2 + v11;
  if (!*(void *)(v3 + v11 + 8)) {
    goto LABEL_5;
  }
  uint64_t v14 = *(void *)(v13 + 8);
  if (!v14)
  {
    outlined destroy of UUID?(v3 + v11, &demangling cache variable for type metadata for (sql: String, argumentsFromKey: ()));
LABEL_5:
    long long v15 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    *(_OWORD *)(v12 + 16) = v15;
    return v3;
  }
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = v14;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
  swift_release();
  return v3;
}

uint64_t getEnumTagSinglePayload for KeyedAggregationMetadataCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E7E6E10);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_81_2();
  OUTLINED_FUNCTION_5_0();
  if (*(_DWORD *)(v7 + 84) != a2) {
    return OUTLINED_FUNCTION_115_1(*(int *)(a3 + 20));
  }

  return __swift_getEnumTagSinglePayload(v3, a2, v6);
}

uint64_t storeEnumTagSinglePayload for KeyedAggregationMetadataCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E7E6E9C);
}

void __swift_store_extra_inhabitant_indexTm_0()
{
  OUTLINED_FUNCTION_114_1();
  OUTLINED_FUNCTION_5_0();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_133_0();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 20)) = (v0 - 1);
  }
}

ValueMetadata *type metadata completion function for KeyedFirstMatchingRecordCache()
{
  uint64_t result = type metadata accessor for MaterializedView();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for BookmarkCache(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for MaterializedView();
    (*((void (**)(void *, void *, ValueMetadata *))v7[-1].Description + 2))(v4, a2, v7);
    uint64_t v8 = a3[6];
    *(void *)((char *)v4 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    *((unsigned char *)v4 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(void *)((char *)v4 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *(void *)((char *)v4 + v9) = *(void *)((char *)a2 + v9);
    swift_unknownObjectRetain();
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for BookmarkCache(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 2))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BookmarkCache(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 3))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for BookmarkCache(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 4))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for BookmarkCache(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 5))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_unknownObjectRelease();
  uint64_t v7 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for BookmarkCache(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E7E73A4);
}

uint64_t sub_18E7E73A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  OUTLINED_FUNCTION_81_2();
  OUTLINED_FUNCTION_5_0();
  if (*(_DWORD *)(v7 + 84) != a2) {
    return OUTLINED_FUNCTION_115_1(*(int *)(a3 + 32));
  }

  return __swift_getEnumTagSinglePayload(v3, a2, v6);
}

uint64_t storeEnumTagSinglePayload for BookmarkCache(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E7E742C);
}

void sub_18E7E742C()
{
  OUTLINED_FUNCTION_114_1();
  OUTLINED_FUNCTION_5_0();
  if (*(_DWORD *)(v4 + 84) == v3)
  {
    uint64_t v5 = OUTLINED_FUNCTION_133_0();
    __swift_storeEnumTagSinglePayload(v5, v6, v7, v8);
  }
  else
  {
    *(void *)(v1 + *(int *)(v2 + 32)) = (v0 - 1);
  }
}

ValueMetadata *type metadata completion function for BookmarkCache()
{
  uint64_t result = type metadata accessor for MaterializedView();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void QueryPlannerMetadata.description.getter()
{
  OUTLINED_FUNCTION_38_0();
  unint64_t v3 = 0xD000000000000022;
  type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_169();
  OUTLINED_FUNCTION_7_8();
  _StringGuts.grow(_:)(139);
  OUTLINED_FUNCTION_48_3();
  OUTLINED_FUNCTION_36(0xD000000000000031, (uint64_t)"    QueryPlannerMetadata: materializedViewName: \"");
  v135._uint64_t countAndFlagsBits = MaterializedView.name.getter();
  OUTLINED_FUNCTION_126_0(v135);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_35_1();
  v5._uint64_t countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v5);
  uint64_t v104 = v0 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedAggregationMetadata;
  uint64_t v103 = *(int *)(type metadata accessor for KeyedAggregationMetadataCache(0) + 28);
  uint64_t v6 = *(void *)(v104 + v103);
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (v7)
  {
    uint64_t v133 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_60_4();
    uint64_t v9 = v133;
    if ((specialized _NativeDictionary.startIndex.getter(v6) & 0x8000000000000000) == 0)
    {
      OUTLINED_FUNCTION_34_5();
      if (v10 != v11)
      {
        uint64_t v105 = v6;
        uint64_t v107 = v7;
        while (1)
        {
          OUTLINED_FUNCTION_135_0();
          if (v15) {
            break;
          }
          if (*(_DWORD *)(v6 + 36) != v13) {
            goto LABEL_114;
          }
          uint64_t v116 = v14;
          OUTLINED_FUNCTION_47_2(v12);
          if (v9)
          {
            uint64_t v130 = v8;
            swift_bridgeObjectRetain();
            OUTLINED_FUNCTION_98_2();
            OUTLINED_FUNCTION_100_1();
            uint64_t v17 = v7 + v16;
            uint64_t v19 = *(void *)(v18 + 72);
            do
            {
              _s12BiomeStreams13StorableValueOWOcTm_1(v17, v1, (void (*)(void))type metadata accessor for StorableValue);
              OUTLINED_FUNCTION_92_1();
              _print_unlocked<A, B>(_:_:)();
              unint64_t v3 = v126;
              _s12BiomeStreams13StorableValueOWOhTm_2(v1, (void (*)(void))type metadata accessor for StorableValue);
              uint64_t v2 = v130;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                OUTLINED_FUNCTION_145_0();
                uint64_t v2 = v130;
              }
              unint64_t v20 = *(void *)(v2 + 16);
              if (v20 >= *(void *)(v2 + 24) >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v2 = v130;
              }
              *(void *)(v2 + 16) = v20 + 1;
              uint64_t v21 = v2 + 16 * v20;
              *(void *)(v21 + 32) = v126;
              *(void *)(v21 + 40) = v129;
              v17 += v19;
              --v9;
            }
            while (v9);
            uint64_t v6 = v105;
            uint64_t v8 = MEMORY[0x1E4FBC860];
            uint64_t v7 = v113;
          }
          else
          {
            swift_bridgeObjectRetain();
            uint64_t v2 = v8;
          }
          v22._uint64_t countAndFlagsBits = MEMORY[0x192FB0130](v2, MEMORY[0x1E4FBB1A0]);
          uint64_t object = v22._object;
          String.append(_:)(v22);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v24._uint64_t countAndFlagsBits = 93;
          v24._uint64_t object = (void *)0xE100000000000000;
          String.append(_:)(v24);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_74_3();
          if (v25)
          {
            OUTLINED_FUNCTION_33_5();
            uint64_t v9 = v133;
          }
          *(void *)(v9 + 16) = object;
          uint64_t v26 = v9 + 16 * v7;
          *(void *)(v26 + 32) = v3;
          *(void *)(v26 + 40) = v2;
          OUTLINED_FUNCTION_15_4();
          if (v10 == v11) {
            goto LABEL_115;
          }
          OUTLINED_FUNCTION_151_0();
          if (v15) {
            goto LABEL_116;
          }
          OUTLINED_FUNCTION_123_1();
          if (!v15) {
            goto LABEL_117;
          }
          uint64_t v27 = _HashTable.occupiedBucket(after:)();
          uint64_t v7 = v107;
          if (v116 == v107)
          {
            swift_bridgeObjectRelease();
            goto LABEL_30;
          }
          if ((v27 & 0x8000000000000000) == 0)
          {
            OUTLINED_FUNCTION_34_5();
            if (v10 != v11) {
              continue;
            }
          }
          goto LABEL_118;
        }
        __break(1u);
LABEL_114:
        __break(1u);
LABEL_115:
        __break(1u);
LABEL_116:
        __break(1u);
LABEL_117:
        __break(1u);
      }
    }
LABEL_118:
    __break(1u);
    goto LABEL_119;
  }
  uint64_t v9 = MEMORY[0x1E4FBC860];
LABEL_30:
  v136._uint64_t countAndFlagsBits = MEMORY[0x192FB0130](v9, MEMORY[0x1E4FBB1A0]);
  OUTLINED_FUNCTION_126_0(v136);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v28._uint64_t countAndFlagsBits = 1528838688;
  v28._uint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v28);
  uint64_t v29 = *(void *)(v104 + v103);
  uint64_t v30 = MEMORY[0x1E4FBC860];
  uint64_t v114 = *(void *)(v29 + 16);
  uint64_t v108 = v29;
  if (v114)
  {
    unint64_t v127 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_60_4();
    unint64_t v31 = v127;
    if (specialized Dictionary.startIndex.getter(v29) < 0 || (OUTLINED_FUNCTION_34_5(), v10 == v11))
    {
LABEL_124:
      __break(1u);
      goto LABEL_125;
    }
    while (1)
    {
      OUTLINED_FUNCTION_135_0();
      if (v15) {
        break;
      }
      if (*(_DWORD *)(v29 + 36) != v33) {
        goto LABEL_120;
      }
      uint64_t v117 = v34;
      unint64_t v124 = v31;
      uint64_t v35 = *(void *)(*(void *)(v29 + 56) + 16 * v32);
      OUTLINED_FUNCTION_127_0();
      uint64_t v36 = *(void *)(v35 + 16);
      if (v36)
      {
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v37 = v30;
        uint64_t v38 = v35 + 32;
        do
        {
          swift_bridgeObjectRetain();
          uint64_t v39 = Dictionary.description.getter();
          uint64_t v41 = v40;
          swift_bridgeObjectRelease();
          unint64_t v42 = *(void *)(v37 + 16);
          if (v42 >= *(void *)(v37 + 24) >> 1) {
            OUTLINED_FUNCTION_33_5();
          }
          *(void *)(v37 + 16) = v42 + 1;
          uint64_t v43 = v37 + 16 * v42;
          *(void *)(v43 + 32) = v39;
          *(void *)(v43 + 40) = v41;
          v38 += 8;
          --v36;
        }
        while (v36);
        uint64_t v29 = v108;
        uint64_t v30 = MEMORY[0x1E4FBC860];
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v44 = OUTLINED_FUNCTION_101_1();
      uint64_t v46 = v45;
      swift_bridgeObjectRelease();
      v47._uint64_t countAndFlagsBits = v44;
      v47._uint64_t object = v46;
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v48._uint64_t countAndFlagsBits = 32032;
      v48._uint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      uint64_t v2 = v132;
      unint64_t v31 = v124;
      unint64_t v126 = v124;
      unint64_t v49 = *(void *)(v124 + 16);
      unint64_t v3 = v49 + 1;
      if (v49 >= *(void *)(v124 + 24) >> 1)
      {
        OUTLINED_FUNCTION_87_2();
        unint64_t v31 = v124;
      }
      *(void *)(v31 + 16) = v3;
      unint64_t v50 = v31 + 16 * v49;
      *(void *)(v50 + 32) = v131;
      *(void *)(v50 + 40) = v132;
      OUTLINED_FUNCTION_15_4();
      if (v10 == v11) {
        goto LABEL_121;
      }
      OUTLINED_FUNCTION_151_0();
      if (v15) {
        goto LABEL_122;
      }
      OUTLINED_FUNCTION_123_1();
      if (!v15) {
        goto LABEL_123;
      }
      uint64_t v51 = _HashTable.occupiedBucket(after:)();
      if (v117 == v114)
      {
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
      if ((v51 & 0x8000000000000000) == 0)
      {
        OUTLINED_FUNCTION_34_5();
        if (v10 != v11) {
          continue;
        }
      }
      goto LABEL_124;
    }
LABEL_119:
    __break(1u);
LABEL_120:
    __break(1u);
LABEL_121:
    __break(1u);
LABEL_122:
    __break(1u);
LABEL_123:
    __break(1u);
    goto LABEL_124;
  }
  unint64_t v31 = MEMORY[0x1E4FBC860];
LABEL_56:
  v137._uint64_t countAndFlagsBits = MEMORY[0x192FB0130](v31, MEMORY[0x1E4FBB1A0]);
  OUTLINED_FUNCTION_126_0(v137);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_36(0xD000000000000023, (uint64_t)"]\",\n    keyedAggregationMetadata: \"");
  uint64_t v52 = v0 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedFirstMatchingRecord;
  uint64_t v53 = *(void *)(v52 + *(int *)(type metadata accessor for KeyedFirstMatchingRecordCache(0) + 28));
  uint64_t v54 = *(void *)(v53 + 16);
  uint64_t v55 = MEMORY[0x1E4FBC860];
  if (v54)
  {
    uint64_t v134 = (char *)MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v56 = v134;
    if (specialized _NativeDictionary.startIndex.getter(v53) < 0 || (OUTLINED_FUNCTION_34_5(), v10 == v11))
    {
LABEL_130:
      __break(1u);
      goto LABEL_131;
    }
    uint64_t v57 = v53 + 64;
    uint64_t v109 = v53;
    uint64_t v110 = v53 + 64;
    uint64_t v106 = v54;
    while (1)
    {
      OUTLINED_FUNCTION_135_0();
      if (v15) {
        break;
      }
      if (*(_DWORD *)(v53 + 36) != v59) {
        goto LABEL_126;
      }
      OUTLINED_FUNCTION_47_2(v58);
      uint64_t v118 = v60;
      uint64_t v120 = v61;
      uint64_t v122 = v62;
      if (v56)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_98_2();
        OUTLINED_FUNCTION_100_1();
        uint64_t v64 = v57 + v63;
        uint64_t v66 = *(void *)(v65 + 72);
        do
        {
          _s12BiomeStreams13StorableValueOWOcTm_1(v64, v1, (void (*)(void))type metadata accessor for StorableValue);
          OUTLINED_FUNCTION_92_1();
          _print_unlocked<A, B>(_:_:)();
          unint64_t v3 = v126;
          uint64_t v2 = v129;
          _s12BiomeStreams13StorableValueOWOhTm_2(v1, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v67 = v55;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_145_0();
            uint64_t v67 = v55;
          }
          unint64_t v68 = *(void *)(v67 + 16);
          if (v68 >= *(void *)(v67 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v67 = v55;
          }
          *(void *)(v67 + 16) = v68 + 1;
          uint64_t v69 = v67 + 16 * v68;
          *(void *)(v69 + 32) = v126;
          *(void *)(v69 + 40) = v129;
          v64 += v66;
          --v56;
        }
        while (v56);
        uint64_t v54 = v106;
        uint64_t v53 = v109;
        uint64_t v55 = MEMORY[0x1E4FBC860];
        uint64_t v57 = v114;
      }
      else
      {
        swift_bridgeObjectRetain();
        uint64_t v67 = v55;
      }
      v70._uint64_t countAndFlagsBits = MEMORY[0x192FB0130](v67, MEMORY[0x1E4FBB1A0]);
      uint64_t v56 = (char *)v70._object;
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v71._uint64_t countAndFlagsBits = 93;
      v71._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v71);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_74_3();
      if (v25)
      {
        OUTLINED_FUNCTION_33_5();
        uint64_t v56 = v134;
      }
      *((void *)v56 + 2) = v67;
      unint64_t v72 = &v56[16 * v57];
      *((void *)v72 + 4) = v3;
      *((void *)v72 + 5) = v2;
      OUTLINED_FUNCTION_15_4();
      if (v10 == v11) {
        goto LABEL_127;
      }
      uint64_t v57 = v110;
      if ((*(void *)(v110 + 8 * v122) & v120) == 0) {
        goto LABEL_128;
      }
      OUTLINED_FUNCTION_123_1();
      if (!v15) {
        goto LABEL_129;
      }
      uint64_t v73 = _HashTable.occupiedBucket(after:)();
      if (v118 == v54)
      {
        swift_bridgeObjectRelease();
        goto LABEL_85;
      }
      if ((v73 & 0x8000000000000000) == 0)
      {
        OUTLINED_FUNCTION_34_5();
        if (v10 != v11) {
          continue;
        }
      }
      goto LABEL_130;
    }
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
    goto LABEL_130;
  }
  uint64_t v56 = (char *)MEMORY[0x1E4FBC860];
LABEL_85:
  v138._uint64_t countAndFlagsBits = MEMORY[0x192FB0130](v56, MEMORY[0x1E4FBB1A0]);
  OUTLINED_FUNCTION_126_0(v138);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v74._uint64_t countAndFlagsBits = 1528838688;
  v74._uint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v74);
  uint64_t v75 = *(void *)(v104 + v103);
  uint64_t v76 = *(void *)(v75 + 16);
  uint64_t v77 = MEMORY[0x1E4FBC860];
  uint64_t v111 = v75;
  uint64_t v112 = v76;
  if (v76)
  {
    uint64_t v128 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v78 = v128;
    if (specialized Dictionary.startIndex.getter(v75) < 0 || (OUTLINED_FUNCTION_34_5(), v10 == v11))
    {
LABEL_136:
      __break(1u);
      return;
    }
    uint64_t v115 = v75 + 64;
    while (1)
    {
      OUTLINED_FUNCTION_135_0();
      if (v15) {
        break;
      }
      if (*(_DWORD *)(v75 + 36) != v80) {
        goto LABEL_132;
      }
      uint64_t v121 = v81;
      uint64_t v123 = v83;
      uint64_t v119 = v82;
      uint64_t v125 = v78;
      uint64_t v84 = *(void *)(*(void *)(v75 + 56) + 16 * v79);
      OUTLINED_FUNCTION_127_0();
      uint64_t v85 = *(void *)(v84 + 16);
      if (v85)
      {
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_98_2();
        uint64_t v86 = v77;
        uint64_t v87 = v84 + 32;
        do
        {
          swift_bridgeObjectRetain();
          uint64_t v88 = Dictionary.description.getter();
          uint64_t v90 = v89;
          swift_bridgeObjectRelease();
          unint64_t v91 = *(void *)(v86 + 16);
          if (v91 >= *(void *)(v86 + 24) >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          *(void *)(v86 + 16) = v91 + 1;
          uint64_t v92 = v86 + 16 * v91;
          *(void *)(v92 + 32) = v88;
          *(void *)(v92 + 40) = v90;
          v87 += 8;
          --v85;
        }
        while (v85);
        uint64_t v75 = v111;
        uint64_t v76 = v112;
        uint64_t v77 = MEMORY[0x1E4FBC860];
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v93 = OUTLINED_FUNCTION_101_1();
      uint64_t v95 = v94;
      swift_bridgeObjectRelease();
      v96._uint64_t countAndFlagsBits = v93;
      v96._uint64_t object = v95;
      String.append(_:)(v96);
      swift_bridgeObjectRelease();
      v97._uint64_t countAndFlagsBits = 32032;
      v97._uint64_t object = (void *)0xE200000000000000;
      String.append(_:)(v97);
      swift_bridgeObjectRelease();
      uint64_t v78 = v125;
      unint64_t v98 = *(void *)(v125 + 16);
      if (v98 >= *(void *)(v125 + 24) >> 1)
      {
        OUTLINED_FUNCTION_87_2();
        uint64_t v78 = v125;
      }
      *(void *)(v78 + 16) = v98 + 1;
      uint64_t v99 = v78 + 16 * v98;
      *(void *)(v99 + 32) = v131;
      *(void *)(v99 + 40) = v132;
      OUTLINED_FUNCTION_15_4();
      if (v10 == v11) {
        goto LABEL_133;
      }
      if ((*(void *)(v115 + 8 * v123) & v121) == 0) {
        goto LABEL_134;
      }
      OUTLINED_FUNCTION_123_1();
      if (!v15) {
        goto LABEL_135;
      }
      uint64_t v100 = _HashTable.occupiedBucket(after:)();
      if (v119 == v76)
      {
        swift_bridgeObjectRelease();
        goto LABEL_112;
      }
      if ((v100 & 0x8000000000000000) == 0)
      {
        OUTLINED_FUNCTION_34_5();
        if (v10 != v11) {
          continue;
        }
      }
      goto LABEL_136;
    }
LABEL_131:
    __break(1u);
LABEL_132:
    __break(1u);
LABEL_133:
    __break(1u);
LABEL_134:
    __break(1u);
LABEL_135:
    __break(1u);
    goto LABEL_136;
  }
  uint64_t v78 = MEMORY[0x1E4FBC860];
LABEL_112:
  v101._uint64_t countAndFlagsBits = MEMORY[0x192FB0130](v78, MEMORY[0x1E4FBB1A0]);
  String.append(_:)(v101);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v102._uint64_t countAndFlagsBits = 2892381;
  v102._uint64_t object = (void *)0xE300000000000000;
  String.append(_:)(v102);
  OUTLINED_FUNCTION_34();
}

void protocol witness for CustomStringConvertible.description.getter in conformance QueryPlannerMetadata()
{
}

uint64_t specialized _NativeDictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 192;
  for (uint64_t i = 12; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

uint64_t type metadata accessor for MetadataSQLError(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, type metadata singleton initialization cache for MetadataSQLError);
}

uint64_t sub_18E7E8764()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t *initializeBufferWithCopyOfBuffer for MetadataSQLError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 4u:
      case 5u:
      case 9u:
        uint64_t v7 = a2[1];
        *a1 = *a2;
        a1[1] = v7;
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 6u:
        uint64_t v9 = type metadata accessor for AggregationFunction.AggregationType();
        (*((void (**)(uint64_t *, uint64_t *, ValueMetadata *))v9[-1].Description + 2))(a1, a2, v9);
        goto LABEL_10;
      case 7u:
        uint64_t v10 = *a2;
        unint64_t v11 = a2[1];
        char v12 = *((unsigned char *)a2 + 16);
        outlined copy of DatabaseValue(v10, v11, v12);
        *a1 = v10;
        a1[1] = v11;
        *((unsigned char *)a1 + 16) = v12;
        goto LABEL_10;
      case 8u:
        uint64_t v13 = *a2;
        uint64_t v14 = a2[1];
        *a1 = v13;
        a1[1] = v14;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_10;
      case 0xAu:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_10:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(v6 + 64));
        break;
    }
  }
  return a1;
}

uint64_t destroy for MetadataSQLError(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 3:
    case 4:
    case 5:
    case 9:
    case 10:
      goto LABEL_9;
    case 6:
      uint64_t v3 = type metadata accessor for AggregationFunction.AggregationType();
      uint64_t v4 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)v3[-1].Description + 1);
      uint64_t result = v4(a1, v3);
      break;
    case 7:
      uint64_t v5 = *(void *)a1;
      unint64_t v6 = *(void *)(a1 + 8);
      char v7 = *(unsigned char *)(a1 + 16);
      uint64_t result = outlined consume of DatabaseValue(v5, v6, v7);
      break;
    case 8:
      swift_bridgeObjectRelease();
LABEL_9:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *initializeWithCopy for MetadataSQLError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 3u:
    case 4u:
    case 5u:
    case 9u:
      uint64_t v6 = a2[1];
      *a1 = *a2;
      a1[1] = v6;
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 6u:
      char v7 = type metadata accessor for AggregationFunction.AggregationType();
      (*((void (**)(uint64_t *, uint64_t *, ValueMetadata *))v7[-1].Description + 2))(a1, a2, v7);
      goto LABEL_8;
    case 7u:
      uint64_t v8 = *a2;
      unint64_t v9 = a2[1];
      char v10 = *((unsigned char *)a2 + 16);
      outlined copy of DatabaseValue(v8, v9, v10);
      *a1 = v8;
      a1[1] = v9;
      *((unsigned char *)a1 + 16) = v10;
      goto LABEL_8;
    case 8u:
      uint64_t v11 = *a2;
      uint64_t v12 = a2[1];
      *a1 = v11;
      a1[1] = v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    case 0xAu:
      *a1 = *a2;
      swift_bridgeObjectRetain();
LABEL_8:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t *assignWithCopy for MetadataSQLError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s12BiomeStreams13StorableValueOWOhTm_2((uint64_t)a1, (void (*)(void))type metadata accessor for MetadataSQLError);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 3u:
      case 4u:
      case 5u:
      case 9u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 6u:
        uint64_t v6 = type metadata accessor for AggregationFunction.AggregationType();
        (*((void (**)(uint64_t *, uint64_t *, ValueMetadata *))v6[-1].Description + 2))(a1, a2, v6);
        goto LABEL_9;
      case 7u:
        uint64_t v7 = *a2;
        unint64_t v8 = a2[1];
        char v9 = *((unsigned char *)a2 + 16);
        outlined copy of DatabaseValue(v7, v8, v9);
        *a1 = v7;
        a1[1] = v8;
        *((unsigned char *)a1 + 16) = v9;
        goto LABEL_9;
      case 8u:
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_9;
      case 0xAu:
        *a1 = *a2;
        swift_bridgeObjectRetain();
LABEL_9:
        swift_storeEnumTagMultiPayload();
        break;
      default:
        memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

void *initializeWithTake for MetadataSQLError(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 6)
  {
    uint64_t v6 = type metadata accessor for AggregationFunction.AggregationType();
    (*((void (**)(void *, const void *, ValueMetadata *))v6[-1].Description + 4))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for MetadataSQLError(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s12BiomeStreams13StorableValueOWOhTm_2((uint64_t)a1, (void (*)(void))type metadata accessor for MetadataSQLError);
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      uint64_t v6 = type metadata accessor for AggregationFunction.AggregationType();
      (*((void (**)(void *, const void *, ValueMetadata *))v6[-1].Description + 4))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

ValueMetadata *type metadata completion function for MetadataSQLError()
{
  uint64_t result = type metadata accessor for AggregationFunction.AggregationType();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CacheEvent(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x18E7E920CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CacheEvent and conformance CacheEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type CacheEvent and conformance CacheEvent;
  if (!lazy protocol witness table cache variable for type CacheEvent and conformance CacheEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CacheEvent and conformance CacheEvent);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_119_1()
{
  return v0;
}

unint64_t OUTLINED_FUNCTION_121_1()
{
  return 0xD000000000000030;
}

void OUTLINED_FUNCTION_124_0()
{
  *(void *)(v0 - 104) = 0;
  *(void *)(v0 - 96) = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
}

void OUTLINED_FUNCTION_127_0()
{
  *(void *)(v0 - 128) = 8315;
  *(void *)(v0 - 120) = 0xE200000000000000;
}

uint64_t OUTLINED_FUNCTION_129_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_131_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_133_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_148_0()
{
  void *v0 = *v1;
  uint64_t result = v1[1];
  v0[1] = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_149_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_150_0()
{
  return v0;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind(specialized PgQuery_OverridingKind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_OverridingKind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OverridingKind(uint64_t a1, uint64_t a2)
{
  unint64_t Overriding = lazy protocol witness table accessor for type PgQuery_OverridingKind and conformance PgQuery_OverridingKind();

  return MEMORY[0x1F4127160](a1, a2, Overriding);
}

void one-time initialization function for allCases()
{
  static PgQuery_OverridingKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_QuerySource.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SortByDir.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SortByNulls.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_A_Expr_Kind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_RoleSpecType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_TableLikeOption.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_DefElemAction.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_PartitionRangeDatumKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_RTEKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_WCOKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_GroupingSetKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_CTEMaterialize.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SetOperation.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ObjectType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_DropBehavior.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_AlterTableType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_GrantTargetType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_VariableSetKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ConstrType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ImportForeignSchemaType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_RoleStmtType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_FetchDirection.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_FunctionParameterMode.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_TransactionStmtKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ViewCheckOption.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ClusterOption.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_DiscardMode.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ReindexObjectType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_AlterTSConfigType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_AlterSubscriptionType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_OnCommitAction.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_ParamKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_CoercionContext.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_CoercionForm.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_BoolExprType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SubLinkType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_RowCompareType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_MinMaxOp.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SQLValueFunctionOp.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_XmlExprOp.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_XmlOptionType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_NullTestType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_BoolTestType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_CmdType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_JoinType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_AggStrategy.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_AggSplit.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SetOpCmd.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_SetOpStrategy.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_OnConflictAction.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_LimitOption.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_LockClauseStrength.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_LockWaitPolicy.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_LockTupleMode.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_KeywordKind.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static PgQuery_Token.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_OverridingKind.allCases, a1);
}

void protocol witness for Enum.init() in conformance PgQuery_QuerySource(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_QuerySource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_QuerySource.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.rawValue.getter in conformance PgQuery_QuerySource()
{
  return *(void *)v0;
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_QuerySource@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_QuerySource.init(rawValue:), a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PgQuery_QuerySource(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_QuerySource(uint64_t a1, uint64_t a2)
{
  unint64_t Query = lazy protocol witness table accessor for type PgQuery_QuerySource and conformance PgQuery_QuerySource();

  return MEMORY[0x1F4127160](a1, a2, Query);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_QuerySource(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_QuerySource@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_QuerySource.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_SortByDir@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind(specialized PgQuery_RoleSpecType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_SortByDir@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_RoleSpecType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SortByDir(uint64_t a1, uint64_t a2)
{
  unint64_t SortBy = lazy protocol witness table accessor for type PgQuery_SortByDir and conformance PgQuery_SortByDir();

  return MEMORY[0x1F4127160](a1, a2, SortBy);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SortByDir@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SortByDir.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SortByNulls(uint64_t a1, uint64_t a2)
{
  unint64_t SortBy = lazy protocol witness table accessor for type PgQuery_SortByNulls and conformance PgQuery_SortByNulls();

  return MEMORY[0x1F4127160](a1, a2, SortBy);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SortByNulls@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SortByNulls.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_A_Expr_Kind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_A_Expr_Kind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_A_Expr_Kind@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_A_Expr_Kind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_A_Expr_Kind(uint64_t a1, uint64_t a2)
{
  unint64_t A_Expr = lazy protocol witness table accessor for type PgQuery_A_Expr_Kind and conformance PgQuery_A_Expr_Kind();

  return MEMORY[0x1F4127160](a1, a2, A_Expr);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_A_Expr_Kind(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)a2, *(unsigned __int8 *)(a2 + 8));
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_A_Expr_Kind@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_A_Expr_Kind.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RoleSpecType(uint64_t a1, uint64_t a2)
{
  unint64_t RoleSpec = lazy protocol witness table accessor for type PgQuery_RoleSpecType and conformance PgQuery_RoleSpecType();

  return MEMORY[0x1F4127160](a1, a2, RoleSpec);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_RoleSpecType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_RoleSpecType.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_TableLikeOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind(specialized PgQuery_TableLikeOption.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_TableLikeOption@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_TableLikeOption.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TableLikeOption(uint64_t a1, uint64_t a2)
{
  unint64_t TableLike = lazy protocol witness table accessor for type PgQuery_TableLikeOption and conformance PgQuery_TableLikeOption();

  return MEMORY[0x1F4127160](a1, a2, TableLike);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_TableLikeOption@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_TableLikeOption.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DefElemAction(uint64_t a1, uint64_t a2)
{
  unint64_t DefElem = lazy protocol witness table accessor for type PgQuery_DefElemAction and conformance PgQuery_DefElemAction();

  return MEMORY[0x1F4127160](a1, a2, DefElem);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_DefElemAction@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_DefElemAction.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_PartitionRangeDatumKind(uint64_t a1, uint64_t a2)
{
  unint64_t PartitionRangeDatum = lazy protocol witness table accessor for type PgQuery_PartitionRangeDatumKind and conformance PgQuery_PartitionRangeDatumKind();

  return MEMORY[0x1F4127160](a1, a2, PartitionRangeDatum);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_PartitionRangeDatumKind@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_PartitionRangeDatumKind.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_RTEKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_RTEKind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_RTEKind@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_RTEKind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RTEKind(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type PgQuery_RTEKind and conformance PgQuery_RTEKind();

  return MEMORY[0x1F4127160](a1, a2, v4);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_RTEKind@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_RTEKind.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_WCOKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_WCOKind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_WCOKind@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_WCOKind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_WCOKind(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type PgQuery_WCOKind and conformance PgQuery_WCOKind();

  return MEMORY[0x1F4127160](a1, a2, v4);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_WCOKind@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_WCOKind.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_GroupingSetKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind(specialized PgQuery_GroupingSetKind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_GroupingSetKind@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_GroupingSetKind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_GroupingSetKind(uint64_t a1, uint64_t a2)
{
  unint64_t GroupingSet = lazy protocol witness table accessor for type PgQuery_GroupingSetKind and conformance PgQuery_GroupingSetKind();

  return MEMORY[0x1F4127160](a1, a2, GroupingSet);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_GroupingSetKind@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_GroupingSetKind.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CTEMaterialize(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type PgQuery_CTEMaterialize and conformance PgQuery_CTEMaterialize();

  return MEMORY[0x1F4127160](a1, a2, v4);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_CTEMaterialize@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_CTEMaterialize.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SetOperation(uint64_t a1, uint64_t a2)
{
  unint64_t Set = lazy protocol witness table accessor for type PgQuery_SetOperation and conformance PgQuery_SetOperation();

  return MEMORY[0x1F4127160](a1, a2, Set);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SetOperation@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SetOperation.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_ObjectType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_ObjectType.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.rawValue.getter in conformance PgQuery_ObjectType()
{
  return destructiveProjectEnumData for StorableValue(*(void *)v0, *(unsigned __int8 *)(v0 + 8));
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_ObjectType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_ObjectType.init(rawValue:), a2);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PgQuery_ObjectType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = destructiveProjectEnumData for StorableValue(*(void *)v1, *(unsigned __int8 *)(v1 + 8));
  *a1 = result;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ObjectType(uint64_t a1, uint64_t a2)
{
  unint64_t Object = lazy protocol witness table accessor for type PgQuery_ObjectType and conformance PgQuery_ObjectType();

  return MEMORY[0x1F4127160](a1, a2, Object);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ObjectType(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ObjectType(a1, a2, a3, a4, destructiveProjectEnumData for StorableValue);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ObjectType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ObjectType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DropBehavior(uint64_t a1, uint64_t a2)
{
  unint64_t Drop = lazy protocol witness table accessor for type PgQuery_DropBehavior and conformance PgQuery_DropBehavior();

  return MEMORY[0x1F4127160](a1, a2, Drop);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_DropBehavior@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_DropBehavior.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_AlterTableType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_AlterTableType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_AlterTableType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_AlterTableType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTableType(uint64_t a1, uint64_t a2)
{
  unint64_t AlterTable = lazy protocol witness table accessor for type PgQuery_AlterTableType and conformance PgQuery_AlterTableType();

  return MEMORY[0x1F4127160](a1, a2, AlterTable);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_AlterTableType(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ObjectType(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))PgQuery_A_Expr_Kind.rawValue.getter);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_AlterTableType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_AlterTableType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_GrantTargetType(uint64_t a1, uint64_t a2)
{
  unint64_t GrantTarget = lazy protocol witness table accessor for type PgQuery_GrantTargetType and conformance PgQuery_GrantTargetType();

  return MEMORY[0x1F4127160](a1, a2, GrantTarget);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_GrantTargetType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_GrantTargetType.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_VariableSetKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind(specialized PgQuery_VariableSetKind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_VariableSetKind@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_VariableSetKind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_VariableSetKind(uint64_t a1, uint64_t a2)
{
  Variableunint64_t Set = lazy protocol witness table accessor for type PgQuery_VariableSetKind and conformance PgQuery_VariableSetKind();

  return MEMORY[0x1F4127160](a1, a2, VariableSet);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_VariableSetKind@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_VariableSetKind.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_ConstrType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_ConstrType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_ConstrType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_ConstrType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ConstrType(uint64_t a1, uint64_t a2)
{
  unint64_t Constr = lazy protocol witness table accessor for type PgQuery_ConstrType and conformance PgQuery_ConstrType();

  return MEMORY[0x1F4127160](a1, a2, Constr);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ConstrType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ConstrType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ImportForeignSchemaType(uint64_t a1, uint64_t a2)
{
  unint64_t ImportForeignSchema = lazy protocol witness table accessor for type PgQuery_ImportForeignSchemaType and conformance PgQuery_ImportForeignSchemaType();

  return MEMORY[0x1F4127160](a1, a2, ImportForeignSchema);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ImportForeignSchemaType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ImportForeignSchemaType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RoleStmtType(uint64_t a1, uint64_t a2)
{
  unint64_t RoleStmt = lazy protocol witness table accessor for type PgQuery_RoleStmtType and conformance PgQuery_RoleStmtType();

  return MEMORY[0x1F4127160](a1, a2, RoleStmt);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_RoleStmtType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_RoleStmtType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FetchDirection(uint64_t a1, uint64_t a2)
{
  unint64_t Direction = lazy protocol witness table accessor for type PgQuery_FetchDirection and conformance PgQuery_FetchDirection();

  return MEMORY[0x1F4127160](a1, a2, Direction);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_FetchDirection@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_FetchDirection.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_FunctionParameterMode(uint64_t a1, uint64_t a2)
{
  unint64_t FunctionParameter = lazy protocol witness table accessor for type PgQuery_FunctionParameterMode and conformance PgQuery_FunctionParameterMode();

  return MEMORY[0x1F4127160](a1, a2, FunctionParameter);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_FunctionParameterMode@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_FunctionParameterMode.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_TransactionStmtKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_TransactionStmtKind.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_TransactionStmtKind@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_TransactionStmtKind.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_TransactionStmtKind(uint64_t a1, uint64_t a2)
{
  unint64_t TransactionStmt = lazy protocol witness table accessor for type PgQuery_TransactionStmtKind and conformance PgQuery_TransactionStmtKind();

  return MEMORY[0x1F4127160](a1, a2, TransactionStmt);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_TransactionStmtKind@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_TransactionStmtKind.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ViewCheckOption(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type PgQuery_ViewCheckOption and conformance PgQuery_ViewCheckOption();

  return MEMORY[0x1F4127160](a1, a2, v4);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ViewCheckOption@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ViewCheckOption.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ClusterOption(uint64_t a1, uint64_t a2)
{
  unint64_t Cluster = lazy protocol witness table accessor for type PgQuery_ClusterOption and conformance PgQuery_ClusterOption();

  return MEMORY[0x1F4127160](a1, a2, Cluster);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ClusterOption@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ClusterOption.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_DiscardMode(uint64_t a1, uint64_t a2)
{
  unint64_t Discard = lazy protocol witness table accessor for type PgQuery_DiscardMode and conformance PgQuery_DiscardMode();

  return MEMORY[0x1F4127160](a1, a2, Discard);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_DiscardMode@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_DiscardMode.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ReindexObjectType(uint64_t a1, uint64_t a2)
{
  Reindexunint64_t Object = lazy protocol witness table accessor for type PgQuery_ReindexObjectType and conformance PgQuery_ReindexObjectType();

  return MEMORY[0x1F4127160](a1, a2, ReindexObject);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ReindexObjectType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ReindexObjectType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterTSConfigType(uint64_t a1, uint64_t a2)
{
  unint64_t AlterTSConfig = lazy protocol witness table accessor for type PgQuery_AlterTSConfigType and conformance PgQuery_AlterTSConfigType();

  return MEMORY[0x1F4127160](a1, a2, AlterTSConfig);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_AlterTSConfigType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_AlterTSConfigType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AlterSubscriptionType(uint64_t a1, uint64_t a2)
{
  unint64_t AlterSubscription = lazy protocol witness table accessor for type PgQuery_AlterSubscriptionType and conformance PgQuery_AlterSubscriptionType();

  return MEMORY[0x1F4127160](a1, a2, AlterSubscription);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_AlterSubscriptionType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_AlterSubscriptionType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OnCommitAction(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type PgQuery_OnCommitAction and conformance PgQuery_OnCommitAction();

  return MEMORY[0x1F4127160](a1, a2, v4);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OnCommitAction@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_OnCommitAction.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ParamKind(uint64_t a1, uint64_t a2)
{
  unint64_t Param = lazy protocol witness table accessor for type PgQuery_ParamKind and conformance PgQuery_ParamKind();

  return MEMORY[0x1F4127160](a1, a2, Param);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_ParamKind@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_ParamKind.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CoercionContext(uint64_t a1, uint64_t a2)
{
  unint64_t Coercion = lazy protocol witness table accessor for type PgQuery_CoercionContext and conformance PgQuery_CoercionContext();

  return MEMORY[0x1F4127160](a1, a2, Coercion);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_CoercionContext@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_CoercionContext.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CoercionForm(uint64_t a1, uint64_t a2)
{
  unint64_t Coercion = lazy protocol witness table accessor for type PgQuery_CoercionForm and conformance PgQuery_CoercionForm();

  return MEMORY[0x1F4127160](a1, a2, Coercion);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_CoercionForm@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_CoercionForm.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_BoolExprType(uint64_t a1, uint64_t a2)
{
  unint64_t BoolExpr = lazy protocol witness table accessor for type PgQuery_BoolExprType and conformance PgQuery_BoolExprType();

  return MEMORY[0x1F4127160](a1, a2, BoolExpr);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_BoolExprType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_BoolExprType.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_SubLinkType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind(specialized PgQuery_SubLinkType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_SubLinkType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_SubLinkType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SubLinkType(uint64_t a1, uint64_t a2)
{
  SubLinunint64_t k = lazy protocol witness table accessor for type PgQuery_SubLinkType and conformance PgQuery_SubLinkType();

  return MEMORY[0x1F4127160](a1, a2, SubLink);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SubLinkType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SubLinkType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_RowCompareType(uint64_t a1, uint64_t a2)
{
  unint64_t RowCompare = lazy protocol witness table accessor for type PgQuery_RowCompareType and conformance PgQuery_RowCompareType();

  return MEMORY[0x1F4127160](a1, a2, RowCompare);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_RowCompareType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_RowCompareType.allCases, a1);
}

unint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_MinMaxOp@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_MinMaxOp@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 3uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_MinMaxOp(uint64_t a1, uint64_t a2)
{
  unint64_t MinMax = lazy protocol witness table accessor for type PgQuery_MinMaxOp and conformance PgQuery_MinMaxOp();

  return MEMORY[0x1F4127160](a1, a2, MinMax);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_MinMaxOp@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_MinMaxOp.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_SQLValueFunctionOp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_SQLValueFunctionOp.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_SQLValueFunctionOp@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_SQLValueFunctionOp.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SQLValueFunctionOp(uint64_t a1, uint64_t a2)
{
  unint64_t SQLValueFunction = lazy protocol witness table accessor for type PgQuery_SQLValueFunctionOp and conformance PgQuery_SQLValueFunctionOp();

  return MEMORY[0x1F4127160](a1, a2, SQLValueFunction);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SQLValueFunctionOp@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SQLValueFunctionOp.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_XmlExprOp(uint64_t a1, uint64_t a2)
{
  unint64_t XmlExpr = lazy protocol witness table accessor for type PgQuery_XmlExprOp and conformance PgQuery_XmlExprOp();

  return MEMORY[0x1F4127160](a1, a2, XmlExpr);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_XmlExprOp@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_XmlExprOp.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_XmlOptionType(uint64_t a1, uint64_t a2)
{
  unint64_t XmlOption = lazy protocol witness table accessor for type PgQuery_XmlOptionType and conformance PgQuery_XmlOptionType();

  return MEMORY[0x1F4127160](a1, a2, XmlOption);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_XmlOptionType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_XmlOptionType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_NullTestType(uint64_t a1, uint64_t a2)
{
  unint64_t NullTest = lazy protocol witness table accessor for type PgQuery_NullTestType and conformance PgQuery_NullTestType();

  return MEMORY[0x1F4127160](a1, a2, NullTest);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_NullTestType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_NullTestType.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_BoolTestType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_BoolTestType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_BoolTestType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_BoolTestType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_BoolTestType(uint64_t a1, uint64_t a2)
{
  unint64_t BoolTest = lazy protocol witness table accessor for type PgQuery_BoolTestType and conformance PgQuery_BoolTestType();

  return MEMORY[0x1F4127160](a1, a2, BoolTest);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_BoolTestType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_BoolTestType.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_CmdType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_CmdType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_CmdType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_CmdType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_CmdType(uint64_t a1, uint64_t a2)
{
  unint64_t Cmd = lazy protocol witness table accessor for type PgQuery_CmdType and conformance PgQuery_CmdType();

  return MEMORY[0x1F4127160](a1, a2, Cmd);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_CmdType(uint64_t a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *a2);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_CmdType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_CmdType.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_JoinType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_JoinType.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_JoinType@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_JoinType.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_JoinType(uint64_t a1, uint64_t a2)
{
  unint64_t Join = lazy protocol witness table accessor for type PgQuery_JoinType and conformance PgQuery_JoinType();

  return MEMORY[0x1F4127160](a1, a2, Join);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_JoinType@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_JoinType.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AggStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t Agg = lazy protocol witness table accessor for type PgQuery_AggStrategy and conformance PgQuery_AggStrategy();

  return MEMORY[0x1F4127160](a1, a2, Agg);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_AggStrategy@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_AggStrategy.allCases, a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_AggSplit@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_AggSplit.init(rawValue:), a1);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_AggSplit@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, (uint64_t (*)(void))specialized PgQuery_AggSplit.init(rawValue:), a2);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_AggSplit(uint64_t a1, uint64_t a2)
{
  unint64_t Agg = lazy protocol witness table accessor for type PgQuery_AggSplit and conformance PgQuery_AggSplit();

  return MEMORY[0x1F4127160](a1, a2, Agg);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_AggSplit@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_AggSplit.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SetOpCmd(uint64_t a1, uint64_t a2)
{
  unint64_t SetOp = lazy protocol witness table accessor for type PgQuery_SetOpCmd and conformance PgQuery_SetOpCmd();

  return MEMORY[0x1F4127160](a1, a2, SetOp);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SetOpCmd@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SetOpCmd.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_SetOpStrategy(uint64_t a1, uint64_t a2)
{
  unint64_t SetOp = lazy protocol witness table accessor for type PgQuery_SetOpStrategy and conformance PgQuery_SetOpStrategy();

  return MEMORY[0x1F4127160](a1, a2, SetOp);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_SetOpStrategy@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_SetOpStrategy.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_OnConflictAction(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type PgQuery_OnConflictAction and conformance PgQuery_OnConflictAction();

  return MEMORY[0x1F4127160](a1, a2, v4);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OnConflictAction@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_OnConflictAction.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LimitOption(uint64_t a1, uint64_t a2)
{
  unint64_t Limit = lazy protocol witness table accessor for type PgQuery_LimitOption and conformance PgQuery_LimitOption();

  return MEMORY[0x1F4127160](a1, a2, Limit);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_LimitOption@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_LimitOption.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LockClauseStrength(uint64_t a1, uint64_t a2)
{
  unint64_t LockClause = lazy protocol witness table accessor for type PgQuery_LockClauseStrength and conformance PgQuery_LockClauseStrength();

  return MEMORY[0x1F4127160](a1, a2, LockClause);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_LockClauseStrength@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_LockClauseStrength.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LockWaitPolicy(uint64_t a1, uint64_t a2)
{
  unint64_t LockWait = lazy protocol witness table accessor for type PgQuery_LockWaitPolicy and conformance PgQuery_LockWaitPolicy();

  return MEMORY[0x1F4127160](a1, a2, LockWait);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_LockWaitPolicy@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_LockWaitPolicy.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_LockTupleMode(uint64_t a1, uint64_t a2)
{
  unint64_t LockTuple = lazy protocol witness table accessor for type PgQuery_LockTupleMode and conformance PgQuery_LockTupleMode();

  return MEMORY[0x1F4127160](a1, a2, LockTuple);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_LockTupleMode@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_LockTupleMode.allCases, a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_KeywordKind(uint64_t a1, uint64_t a2)
{
  unint64_t Keyword = lazy protocol witness table accessor for type PgQuery_KeywordKind and conformance PgQuery_KeywordKind();

  return MEMORY[0x1F4127160](a1, a2, Keyword);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_KeywordKind@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_KeywordKind.allCases, a1);
}

uint64_t PgQuery_Token.rawValue.getter(uint64_t result, char a2)
{
  if (a2) {
    return qword_18EB54368[result];
  }
  return result;
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_Token@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind((uint64_t (*)(void))specialized PgQuery_Token.init(rawValue:), a1);
}

uint64_t protocol witness for Enum.init(rawValue:) in conformance PgQuery_OverridingKind@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5 & 1;
  return result;
}

uint64_t protocol witness for Enum.rawValue.getter in conformance PgQuery_Token()
{
  return PgQuery_Token.rawValue.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_Token@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind(a1, specialized PgQuery_Token.init(rawValue:), a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PgQuery_OverridingKind@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X3>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1);
  *(void *)a3 = result;
  *(unsigned char *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 9) = v6 & 1;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PgQuery_Token@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PgQuery_Token.rawValue.getter(*(void *)v1, *(unsigned char *)(v1 + 8));
  *a1 = result;
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PgQuery_OverridingKind()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_Token(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type PgQuery_Token and conformance PgQuery_Token();

  return MEMORY[0x1F4127160](a1, a2, v4);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PgQuery_OverridingKind()
{
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_Token(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ObjectType(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))PgQuery_Token.rawValue.getter);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ObjectType(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 8);
  uint64_t v8 = a5(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  return v8 == a5(v6, v7);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_Token@<X0>(void *a1@<X8>)
{
  return protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind(&one-time initialization token for allCases, &static PgQuery_Token.allCases, a1);
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance PgQuery_OverridingKind@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;

  return swift_bridgeObjectRetain();
}

uint64_t one-time initialization function for _protobuf_nameMap()
{
  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_OverridingKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_OverridingKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "OVERRIDING_KIND_UNDEFINED";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "OVERRIDING_NOT_SET";
  *(void *)(v10 + 8) = 18;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "OVERRIDING_USER_VALUE";
  *((void *)v12 + 1) = 21;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "OVERRIDING_SYSTEM_VALUE";
  *((void *)v14 + 1) = 23;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_QuerySource._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_QuerySource._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "QUERY_SOURCE_UNDEFINED";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "QSRC_ORIGINAL";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "QSRC_PARSER";
  *((void *)v12 + 1) = 11;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "QSRC_INSTEAD_RULE";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 4;
  *(void *)uint64_t v16 = "QSRC_QUAL_INSTEAD_RULE";
  *((void *)v16 + 1) = 22;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "QSRC_NON_INSTEAD_RULE";
  *((void *)v18 + 1) = 21;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SortByDir._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SortByDir._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SORT_BY_DIR_UNDEFINED";
  *(void *)(v6 + 8) = 21;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SORTBY_DEFAULT";
  *(void *)(v10 + 8) = 14;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SORTBY_ASC";
  *((void *)v12 + 1) = 10;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "SORTBY_DESC";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)char v15 = "SORTBY_USING";
  *(void *)(v15 + 8) = 12;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SortByNulls._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SortByNulls._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SORT_BY_NULLS_UNDEFINED";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SORTBY_NULLS_DEFAULT";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SORTBY_NULLS_FIRST";
  *((void *)v12 + 1) = 18;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "SORTBY_NULLS_LAST";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_A_Expr_Kind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_A_Expr_Kind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_18EB38D70;
  uint64_t v4 = v39 + v3;
  unint64_t v5 = v39 + v3 + v1[14];
  *(void *)(v39 + v3) = 0;
  *(void *)unint64_t v5 = "A_EXPR_KIND_UNDEFINED";
  *(void *)(v5 + 8) = 21;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "AEXPR_OP";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "AEXPR_OP_ANY";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "AEXPR_OP_ALL";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)char v15 = "AEXPR_DISTINCT";
  *((void *)v15 + 1) = 14;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "AEXPR_NOT_DISTINCT";
  *((void *)v17 + 1) = 18;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "AEXPR_NULLIF";
  *((void *)v19 + 1) = 12;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 7;
  *(void *)uint64_t v21 = "AEXPR_OF";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)Swift::String v22 = "AEXPR_IN";
  *(void *)(v22 + 8) = 8;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)Swift::String v24 = "AEXPR_LIKE";
  *((void *)v24 + 1) = 10;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 10;
  *(void *)uint64_t v26 = "AEXPR_ILIKE";
  *((void *)v26 + 1) = 11;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 11;
  *(void *)Swift::String v28 = "AEXPR_SIMILAR";
  *((void *)v28 + 1) = 13;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 12;
  *(void *)uint64_t v30 = "AEXPR_BETWEEN";
  *((void *)v30 + 1) = 13;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 13;
  *(void *)uint64_t v32 = "AEXPR_NOT_BETWEEN";
  *((void *)v32 + 1) = 17;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v4 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 14;
  *(void *)uint64_t v34 = "AEXPR_BETWEEN_SYM";
  *((void *)v34 + 1) = 17;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v4 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 15;
  *(void *)uint64_t v36 = "AEXPR_NOT_BETWEEN_SYM";
  *((void *)v36 + 1) = 21;
  v36[16] = 2;
  v8();
  uint64_t v37 = v4 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)uint64_t v37 = "AEXPR_PAREN";
  *(void *)(v37 + 8) = 11;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RoleSpecType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RoleSpecType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "ROLE_SPEC_TYPE_UNDEFINED";
  *(void *)(v5 + 8) = 24;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "ROLESPEC_CSTRING";
  *(void *)(v9 + 8) = 16;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "ROLESPEC_CURRENT_USER";
  *((void *)v11 + 1) = 21;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "ROLESPEC_SESSION_USER";
  *((void *)v13 + 1) = 21;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "ROLESPEC_PUBLIC";
  *(void *)(v14 + 8) = 15;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TableLikeOption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TableLikeOption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_18EB38D80;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 0;
  *(void *)unint64_t v5 = "TABLE_LIKE_OPTION_UNDEFINED";
  *(void *)(v5 + 8) = 27;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "CREATE_TABLE_LIKE_COMMENTS";
  *(void *)(v9 + 8) = 26;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "CREATE_TABLE_LIKE_CONSTRAINTS";
  *((void *)v11 + 1) = 29;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "CREATE_TABLE_LIKE_DEFAULTS";
  *((void *)v13 + 1) = 26;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)char v15 = "CREATE_TABLE_LIKE_GENERATED";
  *((void *)v15 + 1) = 27;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "CREATE_TABLE_LIKE_IDENTITY";
  *((void *)v17 + 1) = 26;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "CREATE_TABLE_LIKE_INDEXES";
  *((void *)v19 + 1) = 25;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v26 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 7;
  *(void *)uint64_t v21 = "CREATE_TABLE_LIKE_STATISTICS";
  *((void *)v21 + 1) = 28;
  v21[16] = 2;
  v8();
  Swift::String v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)Swift::String v22 = "CREATE_TABLE_LIKE_STORAGE";
  *(void *)(v22 + 8) = 25;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)Swift::String v24 = "CREATE_TABLE_LIKE_ALL";
  *((void *)v24 + 1) = 21;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DefElemAction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DefElemAction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "DEF_ELEM_ACTION_UNDEFINED";
  *(void *)(v5 + 8) = 25;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "DEFELEM_UNSPEC";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "DEFELEM_SET";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "DEFELEM_ADD";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "DEFELEM_DROP";
  *(void *)(v14 + 8) = 12;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PartitionRangeDatumKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PartitionRangeDatumKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "PARTITION_RANGE_DATUM_KIND_UNDEFINED";
  *(void *)(v6 + 8) = 36;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "PARTITION_RANGE_DATUM_MINVALUE";
  *(void *)(v10 + 8) = 30;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "PARTITION_RANGE_DATUM_VALUE";
  *((void *)v12 + 1) = 27;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "PARTITION_RANGE_DATUM_MAXVALUE";
  *((void *)v14 + 1) = 30;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RTEKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RTEKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_18EB38D80;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 0;
  *(void *)unint64_t v5 = "RTEKIND_UNDEFINED";
  *(void *)(v5 + 8) = 17;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "RTE_RELATION";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "RTE_SUBQUERY";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "RTE_JOIN";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)char v15 = "RTE_FUNCTION";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "RTE_TABLEFUNC";
  *((void *)v17 + 1) = 13;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "RTE_VALUES";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 7;
  *(void *)uint64_t v21 = "RTE_CTE";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)Swift::String v22 = "RTE_NAMEDTUPLESTORE";
  *(void *)(v22 + 8) = 19;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)Swift::String v24 = "RTE_RESULT";
  *((void *)v24 + 1) = 10;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_WCOKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_WCOKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "WCOKIND_UNDEFINED";
  *(void *)(v5 + 8) = 17;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "WCO_VIEW_CHECK";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "WCO_RLS_INSERT_CHECK";
  *((void *)v11 + 1) = 20;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "WCO_RLS_UPDATE_CHECK";
  *((void *)v13 + 1) = 20;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "WCO_RLS_CONFLICT_CHECK";
  *(void *)(v14 + 8) = 22;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_GroupingSetKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_GroupingSetKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18EB38D50;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 0;
  *(void *)uint64_t v4 = "GROUPING_SET_KIND_UNDEFINED";
  *(void *)(v4 + 8) = 27;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "GROUPING_SET_EMPTY";
  *(void *)(v8 + 8) = 18;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 2;
  *(void *)unint64_t v10 = "GROUPING_SET_SIMPLE";
  *((void *)v10 + 1) = 19;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "GROUPING_SET_ROLLUP";
  *((void *)v12 + 1) = 19;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "GROUPING_SET_CUBE";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "GROUPING_SET_SETS";
  *((void *)v16 + 1) = 17;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CTEMaterialize._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CTEMaterialize._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "CTEMATERIALIZE_UNDEFINED";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "CTEMaterializeDefault";
  *(void *)(v10 + 8) = 21;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "CTEMaterializeAlways";
  *((void *)v12 + 1) = 20;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "CTEMaterializeNever";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SetOperation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SetOperation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SET_OPERATION_UNDEFINED";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SETOP_NONE";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SETOP_UNION";
  *((void *)v12 + 1) = 11;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "SETOP_INTERSECT";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)char v15 = "SETOP_EXCEPT";
  *(void *)(v15 + 8) = 12;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void *v71;
  char *v72;
  void *v73;
  char *v74;
  void *v75;
  char *v76;
  void *v77;
  char *v78;
  void *v79;
  char *v80;
  void *v81;
  char *v82;
  void *v83;
  char *v84;
  void *v85;
  char *v86;
  void *v87;
  char *v88;
  void *v89;
  char *v90;
  void *v91;
  char *v92;
  void *v93;
  char *v94;
  void *v95;
  char *v96;
  void *v97;
  char *v98;
  void *v99;
  char *v100;
  void *v101;
  char *v102;
  void *v103;
  char *v104;
  uint64_t v106;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ObjectType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ObjectType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v106 = swift_allocObject();
  *(_OWORD *)(v106 + 16) = xmmword_18EB38D90;
  uint64_t v4 = v106 + v3;
  unint64_t v5 = v106 + v3 + v1[14];
  *(void *)(v106 + v3) = 0;
  *(void *)unint64_t v5 = "OBJECT_TYPE_UNDEFINED";
  *(void *)(v5 + 8) = 21;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v106 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "OBJECT_ACCESS_METHOD";
  *(void *)(v9 + 8) = 20;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v106 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "OBJECT_AGGREGATE";
  *((void *)v11 + 1) = 16;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v106 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "OBJECT_AMOP";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v106 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)char v15 = "OBJECT_AMPROC";
  *((void *)v15 + 1) = 13;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v106 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "OBJECT_ATTRIBUTE";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v106 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "OBJECT_CAST";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v106 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 7;
  *(void *)uint64_t v21 = "OBJECT_COLUMN";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  Swift::String v22 = v106 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)Swift::String v22 = "OBJECT_COLLATION";
  *(void *)(v22 + 8) = 16;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v106 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)Swift::String v24 = "OBJECT_CONVERSION";
  *((void *)v24 + 1) = 17;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v106 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 10;
  *(void *)uint64_t v26 = "OBJECT_DATABASE";
  *((void *)v26 + 1) = 15;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v106 + v3 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 11;
  *(void *)Swift::String v28 = "OBJECT_DEFAULT";
  *((void *)v28 + 1) = 14;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v106 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 12;
  *(void *)uint64_t v30 = "OBJECT_DEFACL";
  *((void *)v30 + 1) = 13;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v106 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 13;
  *(void *)uint64_t v32 = "OBJECT_DOMAIN";
  *((void *)v32 + 1) = 13;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v106 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 14;
  *(void *)uint64_t v34 = "OBJECT_DOMCONSTRAINT";
  *((void *)v34 + 1) = 20;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v106 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 15;
  *(void *)uint64_t v36 = "OBJECT_EVENT_TRIGGER";
  *((void *)v36 + 1) = 20;
  v36[16] = 2;
  v8();
  uint64_t v37 = v106 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)uint64_t v37 = "OBJECT_EXTENSION";
  *(void *)(v37 + 8) = 16;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v106 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  *uint64_t v38 = 17;
  *(void *)uint64_t v39 = "OBJECT_FDW";
  *((void *)v39 + 1) = 10;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v106 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 18;
  *(void *)uint64_t v41 = "OBJECT_FOREIGN_SERVER";
  *((void *)v41 + 1) = 21;
  v41[16] = 2;
  v8();
  unint64_t v42 = (void *)(v106 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  void *v42 = 19;
  *(void *)uint64_t v43 = "OBJECT_FOREIGN_TABLE";
  *((void *)v43 + 1) = 20;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v106 + v3 + 20 * v2);
  unint64_t v45 = (char *)v44 + v1[14];
  char *v44 = 20;
  *(void *)unint64_t v45 = "OBJECT_FUNCTION";
  *((void *)v45 + 1) = 15;
  v45[16] = 2;
  v8();
  uint64_t v46 = (void *)(v106 + v3 + 21 * v2);
  Swift::String v47 = (char *)v46 + v1[14];
  *uint64_t v46 = 21;
  *(void *)Swift::String v47 = "OBJECT_INDEX";
  *((void *)v47 + 1) = 12;
  v47[16] = 2;
  v8();
  Swift::String v48 = (void *)(v106 + v3 + 22 * v2);
  unint64_t v49 = (char *)v48 + v1[14];
  *Swift::String v48 = 22;
  *(void *)unint64_t v49 = "OBJECT_LANGUAGE";
  *((void *)v49 + 1) = 15;
  v49[16] = 2;
  v8();
  unint64_t v50 = (void *)(v106 + v3 + 23 * v2);
  uint64_t v51 = (char *)v50 + v1[14];
  *unint64_t v50 = 23;
  *(void *)uint64_t v51 = "OBJECT_LARGEOBJECT";
  *((void *)v51 + 1) = 18;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v106 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 24;
  *(void *)uint64_t v53 = "OBJECT_MATVIEW";
  *((void *)v53 + 1) = 14;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v106 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 25;
  *(void *)uint64_t v55 = "OBJECT_OPCLASS";
  *((void *)v55 + 1) = 14;
  v55[16] = 2;
  v8();
  uint64_t v56 = (void *)(v106 + v3 + 26 * v2);
  uint64_t v57 = (char *)v56 + v1[14];
  *uint64_t v56 = 26;
  *(void *)uint64_t v57 = "OBJECT_OPERATOR";
  *((void *)v57 + 1) = 15;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v106 + v3 + 27 * v2);
  int v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 27;
  *(void *)int v59 = "OBJECT_OPFAMILY";
  *((void *)v59 + 1) = 15;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v106 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 28;
  *(void *)uint64_t v61 = "OBJECT_POLICY";
  *((void *)v61 + 1) = 13;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v106 + v3 + 29 * v2);
  uint64_t v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 29;
  *(void *)uint64_t v63 = "OBJECT_PROCEDURE";
  *((void *)v63 + 1) = 16;
  v63[16] = 2;
  v8();
  uint64_t v64 = (void *)(v106 + v3 + 30 * v2);
  uint64_t v65 = (char *)v64 + v1[14];
  *uint64_t v64 = 30;
  *(void *)uint64_t v65 = "OBJECT_PUBLICATION";
  *((void *)v65 + 1) = 18;
  v65[16] = 2;
  v8();
  uint64_t v66 = (void *)(v106 + v3 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *uint64_t v66 = 31;
  *(void *)uint64_t v67 = "OBJECT_PUBLICATION_REL";
  *((void *)v67 + 1) = 22;
  v67[16] = 2;
  v8();
  unint64_t v68 = v106 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 32;
  *(void *)unint64_t v68 = "OBJECT_ROLE";
  *(void *)(v68 + 8) = 11;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  uint64_t v69 = (void *)(v106 + v3 + 33 * v2);
  Swift::String v70 = (char *)v69 + v1[14];
  *uint64_t v69 = 33;
  *(void *)Swift::String v70 = "OBJECT_ROUTINE";
  *((void *)v70 + 1) = 14;
  v70[16] = 2;
  v8();
  Swift::String v71 = (void *)(v106 + v3 + 34 * v2);
  unint64_t v72 = (char *)v71 + v1[14];
  *Swift::String v71 = 34;
  *(void *)unint64_t v72 = "OBJECT_RULE";
  *((void *)v72 + 1) = 11;
  v72[16] = 2;
  v8();
  uint64_t v73 = (void *)(v106 + v3 + 35 * v2);
  Swift::String v74 = (char *)v73 + v1[14];
  *uint64_t v73 = 35;
  *(void *)Swift::String v74 = "OBJECT_SCHEMA";
  *((void *)v74 + 1) = 13;
  v74[16] = 2;
  v8();
  uint64_t v75 = (void *)(v106 + v3 + 36 * v2);
  uint64_t v76 = (char *)v75 + v1[14];
  *uint64_t v75 = 36;
  *(void *)uint64_t v76 = "OBJECT_SEQUENCE";
  *((void *)v76 + 1) = 15;
  v76[16] = 2;
  v8();
  uint64_t v77 = (void *)(v106 + v3 + 37 * v2);
  uint64_t v78 = (char *)v77 + v1[14];
  *uint64_t v77 = 37;
  *(void *)uint64_t v78 = "OBJECT_SUBSCRIPTION";
  *((void *)v78 + 1) = 19;
  v78[16] = 2;
  v8();
  uint64_t v79 = (void *)(v106 + v3 + 38 * v2);
  int v80 = (char *)v79 + v1[14];
  *uint64_t v79 = 38;
  *(void *)int v80 = "OBJECT_STATISTIC_EXT";
  *((void *)v80 + 1) = 20;
  v80[16] = 2;
  v8();
  uint64_t v81 = (void *)(v106 + v3 + 39 * v2);
  uint64_t v82 = (char *)v81 + v1[14];
  *uint64_t v81 = 39;
  *(void *)uint64_t v82 = "OBJECT_TABCONSTRAINT";
  *((void *)v82 + 1) = 20;
  v82[16] = 2;
  v8();
  uint64_t v83 = (void *)(v106 + v3 + 40 * v2);
  uint64_t v84 = (char *)v83 + v1[14];
  *uint64_t v83 = 40;
  *(void *)uint64_t v84 = "OBJECT_TABLE";
  *((void *)v84 + 1) = 12;
  v84[16] = 2;
  v8();
  uint64_t v85 = (void *)(v106 + v3 + 41 * v2);
  uint64_t v86 = (char *)v85 + v1[14];
  *uint64_t v85 = 41;
  *(void *)uint64_t v86 = "OBJECT_TABLESPACE";
  *((void *)v86 + 1) = 17;
  v86[16] = 2;
  v8();
  uint64_t v87 = (void *)(v106 + v3 + 42 * v2);
  uint64_t v88 = (char *)v87 + v1[14];
  *uint64_t v87 = 42;
  *(void *)uint64_t v88 = "OBJECT_TRANSFORM";
  *((void *)v88 + 1) = 16;
  v88[16] = 2;
  v8();
  uint64_t v89 = (void *)(v106 + v3 + 43 * v2);
  uint64_t v90 = (char *)v89 + v1[14];
  *uint64_t v89 = 43;
  *(void *)uint64_t v90 = "OBJECT_TRIGGER";
  *((void *)v90 + 1) = 14;
  v90[16] = 2;
  v8();
  unint64_t v91 = (void *)(v106 + v3 + 44 * v2);
  uint64_t v92 = (char *)v91 + v1[14];
  *unint64_t v91 = 44;
  *(void *)uint64_t v92 = "OBJECT_TSCONFIGURATION";
  *((void *)v92 + 1) = 22;
  v92[16] = 2;
  v8();
  uint64_t v93 = (void *)(v106 + v3 + 45 * v2);
  unint64_t v94 = (char *)v93 + v1[14];
  *uint64_t v93 = 45;
  *(void *)unint64_t v94 = "OBJECT_TSDICTIONARY";
  *((void *)v94 + 1) = 19;
  v94[16] = 2;
  v8();
  uint64_t v95 = (void *)(v106 + v3 + 46 * v2);
  Swift::String v96 = (char *)v95 + v1[14];
  void *v95 = 46;
  *(void *)Swift::String v96 = "OBJECT_TSPARSER";
  *((void *)v96 + 1) = 15;
  v96[16] = 2;
  v8();
  Swift::String v97 = (void *)(v106 + v3 + 47 * v2);
  unint64_t v98 = (char *)v97 + v1[14];
  *Swift::String v97 = 47;
  *(void *)unint64_t v98 = "OBJECT_TSTEMPLATE";
  *((void *)v98 + 1) = 17;
  v98[16] = 2;
  v8();
  uint64_t v99 = (void *)(v106 + v3 + 48 * v2);
  uint64_t v100 = (char *)v99 + v1[14];
  *uint64_t v99 = 48;
  *(void *)uint64_t v100 = "OBJECT_TYPE";
  *((void *)v100 + 1) = 11;
  v100[16] = 2;
  v8();
  Swift::String v101 = (void *)(v106 + v3 + 49 * v2);
  Swift::String v102 = (char *)v101 + v1[14];
  *Swift::String v101 = 49;
  *(void *)Swift::String v102 = "OBJECT_USER_MAPPING";
  *((void *)v102 + 1) = 19;
  v102[16] = 2;
  v8();
  uint64_t v103 = (void *)(v106 + v3 + 50 * v2);
  uint64_t v104 = (char *)v103 + v1[14];
  *uint64_t v103 = 50;
  *(void *)uint64_t v104 = "OBJECT_VIEW";
  *((void *)v104 + 1) = 11;
  v104[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropBehavior._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropBehavior._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 0;
  *(void *)unint64_t v6 = "DROP_BEHAVIOR_UNDEFINED";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "DROP_RESTRICT";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "DROP_CASCADE";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void *v71;
  char *v72;
  void *v73;
  char *v74;
  void *v75;
  char *v76;
  void *v77;
  char *v78;
  void *v79;
  char *v80;
  void *v81;
  char *v82;
  void *v83;
  char *v84;
  void *v85;
  char *v86;
  void *v87;
  char *v88;
  void *v89;
  char *v90;
  void *v91;
  char *v92;
  void *v93;
  char *v94;
  void *v95;
  char *v96;
  void *v97;
  char *v98;
  void *v99;
  char *v100;
  void *v101;
  char *v102;
  void *v103;
  char *v104;
  void *v105;
  char *v106;
  void *v107;
  char *v108;
  void *v109;
  char *v110;
  void *v111;
  char *v112;
  void *v113;
  char *v114;
  void *v115;
  char *v116;
  void *v117;
  char *v118;
  void *v119;
  char *v120;
  void *v121;
  char *v122;
  void *v123;
  char *v124;
  void *v125;
  char *v126;
  void *v127;
  char *v128;
  void *v129;
  char *v130;
  unint64_t v131;
  void *v132;
  char *v133;
  void *v134;
  char *v135;
  void *v136;
  char *v137;
  uint64_t v139;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTableType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTableType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v139 = swift_allocObject();
  *(_OWORD *)(v139 + 16) = xmmword_18EB38DA0;
  uint64_t v4 = v139 + v3;
  unint64_t v5 = v139 + v3 + v1[14];
  *(void *)(v139 + v3) = 0;
  *(void *)unint64_t v5 = "ALTER_TABLE_TYPE_UNDEFINED";
  *(void *)(v5 + 8) = 26;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v139 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "AT_AddColumn";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v139 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "AT_AddColumnRecurse";
  *((void *)v11 + 1) = 19;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v139 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "AT_AddColumnToView";
  *((void *)v13 + 1) = 18;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v139 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)char v15 = "AT_ColumnDefault";
  *((void *)v15 + 1) = 16;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v139 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "AT_CookedColumnDefault";
  *((void *)v17 + 1) = 22;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v139 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "AT_DropNotNull";
  *((void *)v19 + 1) = 14;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v139 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 7;
  *(void *)uint64_t v21 = "AT_SetNotNull";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  Swift::String v22 = v139 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)Swift::String v22 = "AT_DropExpression";
  *(void *)(v22 + 8) = 17;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v139 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)Swift::String v24 = "AT_CheckNotNull";
  *((void *)v24 + 1) = 15;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v139 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 10;
  *(void *)uint64_t v26 = "AT_SetStatistics";
  *((void *)v26 + 1) = 16;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v139 + v3 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 11;
  *(void *)Swift::String v28 = "AT_SetOptions";
  *((void *)v28 + 1) = 13;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v139 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 12;
  *(void *)uint64_t v30 = "AT_ResetOptions";
  *((void *)v30 + 1) = 15;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v139 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 13;
  *(void *)uint64_t v32 = "AT_SetStorage";
  *((void *)v32 + 1) = 13;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v139 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 14;
  *(void *)uint64_t v34 = "AT_DropColumn";
  *((void *)v34 + 1) = 13;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v139 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 15;
  *(void *)uint64_t v36 = "AT_DropColumnRecurse";
  *((void *)v36 + 1) = 20;
  v36[16] = 2;
  v8();
  uint64_t v37 = v139 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 16;
  *(void *)uint64_t v37 = "AT_AddIndex";
  *(void *)(v37 + 8) = 11;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v139 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  *uint64_t v38 = 17;
  *(void *)uint64_t v39 = "AT_ReAddIndex";
  *((void *)v39 + 1) = 13;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v139 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 18;
  *(void *)uint64_t v41 = "AT_AddConstraint";
  *((void *)v41 + 1) = 16;
  v41[16] = 2;
  v8();
  unint64_t v42 = (void *)(v139 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  void *v42 = 19;
  *(void *)uint64_t v43 = "AT_AddConstraintRecurse";
  *((void *)v43 + 1) = 23;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v139 + v3 + 20 * v2);
  unint64_t v45 = (char *)v44 + v1[14];
  char *v44 = 20;
  *(void *)unint64_t v45 = "AT_ReAddConstraint";
  *((void *)v45 + 1) = 18;
  v45[16] = 2;
  v8();
  uint64_t v46 = (void *)(v139 + v3 + 21 * v2);
  Swift::String v47 = (char *)v46 + v1[14];
  *uint64_t v46 = 21;
  *(void *)Swift::String v47 = "AT_ReAddDomainConstraint";
  *((void *)v47 + 1) = 24;
  v47[16] = 2;
  v8();
  Swift::String v48 = (void *)(v139 + v3 + 22 * v2);
  unint64_t v49 = (char *)v48 + v1[14];
  *Swift::String v48 = 22;
  *(void *)unint64_t v49 = "AT_AlterConstraint";
  *((void *)v49 + 1) = 18;
  v49[16] = 2;
  v8();
  unint64_t v50 = (void *)(v139 + v3 + 23 * v2);
  uint64_t v51 = (char *)v50 + v1[14];
  *unint64_t v50 = 23;
  *(void *)uint64_t v51 = "AT_ValidateConstraint";
  *((void *)v51 + 1) = 21;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v139 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 24;
  *(void *)uint64_t v53 = "AT_ValidateConstraintRecurse";
  *((void *)v53 + 1) = 28;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v139 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 25;
  *(void *)uint64_t v55 = "AT_AddIndexConstraint";
  *((void *)v55 + 1) = 21;
  v55[16] = 2;
  v8();
  uint64_t v56 = (void *)(v139 + v3 + 26 * v2);
  uint64_t v57 = (char *)v56 + v1[14];
  *uint64_t v56 = 26;
  *(void *)uint64_t v57 = "AT_DropConstraint";
  *((void *)v57 + 1) = 17;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v139 + v3 + 27 * v2);
  int v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 27;
  *(void *)int v59 = "AT_DropConstraintRecurse";
  *((void *)v59 + 1) = 24;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v139 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 28;
  *(void *)uint64_t v61 = "AT_ReAddComment";
  *((void *)v61 + 1) = 15;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v139 + v3 + 29 * v2);
  uint64_t v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 29;
  *(void *)uint64_t v63 = "AT_AlterColumnType";
  *((void *)v63 + 1) = 18;
  v63[16] = 2;
  v8();
  uint64_t v64 = (void *)(v139 + v3 + 30 * v2);
  uint64_t v65 = (char *)v64 + v1[14];
  *uint64_t v64 = 30;
  *(void *)uint64_t v65 = "AT_AlterColumnGenericOptions";
  *((void *)v65 + 1) = 28;
  v65[16] = 2;
  v8();
  uint64_t v66 = (void *)(v139 + v3 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *uint64_t v66 = 31;
  *(void *)uint64_t v67 = "AT_ChangeOwner";
  *((void *)v67 + 1) = 14;
  v67[16] = 2;
  v8();
  unint64_t v68 = v139 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 32;
  *(void *)unint64_t v68 = "AT_ClusterOn";
  *(void *)(v68 + 8) = 12;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  uint64_t v69 = (void *)(v139 + v3 + 33 * v2);
  Swift::String v70 = (char *)v69 + v1[14];
  *uint64_t v69 = 33;
  *(void *)Swift::String v70 = "AT_DropCluster";
  *((void *)v70 + 1) = 14;
  v70[16] = 2;
  v8();
  Swift::String v71 = (void *)(v139 + v3 + 34 * v2);
  unint64_t v72 = (char *)v71 + v1[14];
  *Swift::String v71 = 34;
  *(void *)unint64_t v72 = "AT_SetLogged";
  *((void *)v72 + 1) = 12;
  v72[16] = 2;
  v8();
  uint64_t v73 = (void *)(v139 + v3 + 35 * v2);
  Swift::String v74 = (char *)v73 + v1[14];
  *uint64_t v73 = 35;
  *(void *)Swift::String v74 = "AT_SetUnLogged";
  *((void *)v74 + 1) = 14;
  v74[16] = 2;
  v8();
  uint64_t v75 = (void *)(v139 + v3 + 36 * v2);
  uint64_t v76 = (char *)v75 + v1[14];
  *uint64_t v75 = 36;
  *(void *)uint64_t v76 = "AT_DropOids";
  *((void *)v76 + 1) = 11;
  v76[16] = 2;
  v8();
  uint64_t v77 = (void *)(v139 + v3 + 37 * v2);
  uint64_t v78 = (char *)v77 + v1[14];
  *uint64_t v77 = 37;
  *(void *)uint64_t v78 = "AT_SetTableSpace";
  *((void *)v78 + 1) = 16;
  v78[16] = 2;
  v8();
  uint64_t v79 = (void *)(v139 + v3 + 38 * v2);
  int v80 = (char *)v79 + v1[14];
  *uint64_t v79 = 38;
  *(void *)int v80 = "AT_SetRelOptions";
  *((void *)v80 + 1) = 16;
  v80[16] = 2;
  v8();
  uint64_t v81 = (void *)(v139 + v3 + 39 * v2);
  uint64_t v82 = (char *)v81 + v1[14];
  *uint64_t v81 = 39;
  *(void *)uint64_t v82 = "AT_ResetRelOptions";
  *((void *)v82 + 1) = 18;
  v82[16] = 2;
  v8();
  uint64_t v83 = (void *)(v139 + v3 + 40 * v2);
  uint64_t v84 = (char *)v83 + v1[14];
  *uint64_t v83 = 40;
  *(void *)uint64_t v84 = "AT_ReplaceRelOptions";
  *((void *)v84 + 1) = 20;
  v84[16] = 2;
  v8();
  uint64_t v85 = (void *)(v139 + v3 + 41 * v2);
  uint64_t v86 = (char *)v85 + v1[14];
  *uint64_t v85 = 41;
  *(void *)uint64_t v86 = "AT_EnableTrig";
  *((void *)v86 + 1) = 13;
  v86[16] = 2;
  v8();
  uint64_t v87 = (void *)(v139 + v3 + 42 * v2);
  uint64_t v88 = (char *)v87 + v1[14];
  *uint64_t v87 = 42;
  *(void *)uint64_t v88 = "AT_EnableAlwaysTrig";
  *((void *)v88 + 1) = 19;
  v88[16] = 2;
  v8();
  uint64_t v89 = (void *)(v139 + v3 + 43 * v2);
  uint64_t v90 = (char *)v89 + v1[14];
  *uint64_t v89 = 43;
  *(void *)uint64_t v90 = "AT_EnableReplicaTrig";
  *((void *)v90 + 1) = 20;
  v90[16] = 2;
  v8();
  unint64_t v91 = (void *)(v139 + v3 + 44 * v2);
  uint64_t v92 = (char *)v91 + v1[14];
  *unint64_t v91 = 44;
  *(void *)uint64_t v92 = "AT_DisableTrig";
  *((void *)v92 + 1) = 14;
  v92[16] = 2;
  v8();
  uint64_t v93 = (void *)(v139 + v3 + 45 * v2);
  unint64_t v94 = (char *)v93 + v1[14];
  *uint64_t v93 = 45;
  *(void *)unint64_t v94 = "AT_EnableTrigAll";
  *((void *)v94 + 1) = 16;
  v94[16] = 2;
  v8();
  uint64_t v95 = (void *)(v139 + v3 + 46 * v2);
  Swift::String v96 = (char *)v95 + v1[14];
  void *v95 = 46;
  *(void *)Swift::String v96 = "AT_DisableTrigAll";
  *((void *)v96 + 1) = 17;
  v96[16] = 2;
  v8();
  Swift::String v97 = (void *)(v139 + v3 + 47 * v2);
  unint64_t v98 = (char *)v97 + v1[14];
  *Swift::String v97 = 47;
  *(void *)unint64_t v98 = "AT_EnableTrigUser";
  *((void *)v98 + 1) = 17;
  v98[16] = 2;
  v8();
  uint64_t v99 = (void *)(v139 + v3 + 48 * v2);
  uint64_t v100 = (char *)v99 + v1[14];
  *uint64_t v99 = 48;
  *(void *)uint64_t v100 = "AT_DisableTrigUser";
  *((void *)v100 + 1) = 18;
  v100[16] = 2;
  v8();
  Swift::String v101 = (void *)(v139 + v3 + 49 * v2);
  Swift::String v102 = (char *)v101 + v1[14];
  *Swift::String v101 = 49;
  *(void *)Swift::String v102 = "AT_EnableRule";
  *((void *)v102 + 1) = 13;
  v102[16] = 2;
  v8();
  uint64_t v103 = (void *)(v139 + v3 + 50 * v2);
  uint64_t v104 = (char *)v103 + v1[14];
  *uint64_t v103 = 50;
  *(void *)uint64_t v104 = "AT_EnableAlwaysRule";
  *((void *)v104 + 1) = 19;
  v104[16] = 2;
  v8();
  uint64_t v105 = (void *)(v139 + v3 + 51 * v2);
  uint64_t v106 = (char *)v105 + v1[14];
  *uint64_t v105 = 51;
  *(void *)uint64_t v106 = "AT_EnableReplicaRule";
  *((void *)v106 + 1) = 20;
  v106[16] = 2;
  v8();
  uint64_t v107 = (void *)(v139 + v3 + 52 * v2);
  uint64_t v108 = (char *)v107 + v1[14];
  *uint64_t v107 = 52;
  *(void *)uint64_t v108 = "AT_DisableRule";
  *((void *)v108 + 1) = 14;
  v108[16] = 2;
  v8();
  uint64_t v109 = (void *)(v139 + v3 + 53 * v2);
  uint64_t v110 = (char *)v109 + v1[14];
  *uint64_t v109 = 53;
  *(void *)uint64_t v110 = "AT_AddInherit";
  *((void *)v110 + 1) = 13;
  v110[16] = 2;
  v8();
  uint64_t v111 = (void *)(v139 + v3 + 54 * v2);
  uint64_t v112 = (char *)v111 + v1[14];
  *uint64_t v111 = 54;
  *(void *)uint64_t v112 = "AT_DropInherit";
  *((void *)v112 + 1) = 14;
  v112[16] = 2;
  v8();
  uint64_t v113 = (void *)(v139 + v3 + 55 * v2);
  uint64_t v114 = (char *)v113 + v1[14];
  *uint64_t v113 = 55;
  *(void *)uint64_t v114 = "AT_AddOf";
  *((void *)v114 + 1) = 8;
  v114[16] = 2;
  v8();
  uint64_t v115 = (void *)(v139 + v3 + 56 * v2);
  uint64_t v116 = (char *)v115 + v1[14];
  *uint64_t v115 = 56;
  *(void *)uint64_t v116 = "AT_DropOf";
  *((void *)v116 + 1) = 9;
  v116[16] = 2;
  v8();
  uint64_t v117 = (void *)(v139 + v3 + 57 * v2);
  uint64_t v118 = (char *)v117 + v1[14];
  *uint64_t v117 = 57;
  *(void *)uint64_t v118 = "AT_ReplicaIdentity";
  *((void *)v118 + 1) = 18;
  v118[16] = 2;
  v8();
  uint64_t v119 = (void *)(v139 + v3 + 58 * v2);
  uint64_t v120 = (char *)v119 + v1[14];
  void *v119 = 58;
  *(void *)uint64_t v120 = "AT_EnableRowSecurity";
  *((void *)v120 + 1) = 20;
  v120[16] = 2;
  v8();
  uint64_t v121 = (void *)(v139 + v3 + 59 * v2);
  uint64_t v122 = (char *)v121 + v1[14];
  *uint64_t v121 = 59;
  *(void *)uint64_t v122 = "AT_DisableRowSecurity";
  *((void *)v122 + 1) = 21;
  v122[16] = 2;
  v8();
  uint64_t v123 = (void *)(v139 + v3 + 60 * v2);
  unint64_t v124 = (char *)v123 + v1[14];
  *uint64_t v123 = 60;
  *(void *)unint64_t v124 = "AT_ForceRowSecurity";
  *((void *)v124 + 1) = 19;
  v124[16] = 2;
  v8();
  uint64_t v125 = (void *)(v139 + v3 + 61 * v2);
  unint64_t v126 = (char *)v125 + v1[14];
  uint64_t *v125 = 61;
  *(void *)unint64_t v126 = "AT_NoForceRowSecurity";
  *((void *)v126 + 1) = 21;
  v126[16] = 2;
  v8();
  unint64_t v127 = (void *)(v139 + v3 + 62 * v2);
  uint64_t v128 = (char *)v127 + v1[14];
  char *v127 = 62;
  *(void *)uint64_t v128 = "AT_GenericOptions";
  *((void *)v128 + 1) = 17;
  v128[16] = 2;
  v8();
  uint64_t v129 = (void *)(v139 + v3 + 63 * v2);
  uint64_t v130 = (char *)v129 + v1[14];
  Swift::String *v129 = 63;
  *(void *)uint64_t v130 = "AT_AttachPartition";
  *((void *)v130 + 1) = 18;
  v130[16] = 2;
  v8();
  uint64_t v131 = v139 + v3 + (v2 << 6) + v1[14];
  *(void *)(v4 + (v2 << 6)) = 64;
  *(void *)uint64_t v131 = "AT_DetachPartition";
  *(void *)(v131 + 8) = 18;
  *(unsigned char *)(v131 + 16) = 2;
  v8();
  uint64_t v132 = (void *)(v139 + v3 + 65 * v2);
  uint64_t v133 = (char *)v132 + v1[14];
  *uint64_t v132 = 65;
  *(void *)uint64_t v133 = "AT_AddIdentity";
  *((void *)v133 + 1) = 14;
  v133[16] = 2;
  v8();
  uint64_t v134 = (void *)(v139 + v3 + 66 * v2);
  Swift::String v135 = (char *)v134 + v1[14];
  *uint64_t v134 = 66;
  *(void *)Swift::String v135 = "AT_SetIdentity";
  *((void *)v135 + 1) = 14;
  v135[16] = 2;
  v8();
  Swift::String v136 = (void *)(v139 + v3 + 67 * v2);
  Swift::String v137 = (char *)v136 + v1[14];
  *Swift::String v136 = 67;
  *(void *)Swift::String v137 = "AT_DropIdentity";
  *((void *)v137 + 1) = 15;
  v137[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_GrantTargetType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_GrantTargetType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "GRANT_TARGET_TYPE_UNDEFINED";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "ACL_TARGET_OBJECT";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "ACL_TARGET_ALL_IN_SCHEMA";
  *((void *)v12 + 1) = 24;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "ACL_TARGET_DEFAULTS";
  *((void *)v14 + 1) = 19;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_VariableSetKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_VariableSetKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 0;
  *(void *)uint64_t v4 = "VARIABLE_SET_KIND_UNDEFINED";
  *(void *)(v4 + 8) = 27;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "VAR_SET_VALUE";
  *(void *)(v8 + 8) = 13;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 2;
  *(void *)unint64_t v10 = "VAR_SET_DEFAULT";
  *((void *)v10 + 1) = 15;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "VAR_SET_CURRENT";
  *((void *)v12 + 1) = 15;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "VAR_SET_MULTI";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "VAR_RESET";
  *((void *)v16 + 1) = 9;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "VAR_RESET_ALL";
  *((void *)v18 + 1) = 13;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  uint64_t v36;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ConstrType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ConstrType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v36 = swift_allocObject();
  *(_OWORD *)(v36 + 16) = xmmword_18EB38DC0;
  uint64_t v4 = v36 + v3;
  unint64_t v5 = v36 + v3 + v1[14];
  *(void *)(v36 + v3) = 0;
  *(void *)unint64_t v5 = "CONSTR_TYPE_UNDEFINED";
  *(void *)(v5 + 8) = 21;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v36 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "CONSTR_NULL";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v36 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "CONSTR_NOTNULL";
  *((void *)v11 + 1) = 14;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v36 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "CONSTR_DEFAULT";
  *((void *)v13 + 1) = 14;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v36 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)char v15 = "CONSTR_IDENTITY";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v36 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "CONSTR_GENERATED";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v36 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "CONSTR_CHECK";
  *((void *)v19 + 1) = 12;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v36 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 7;
  *(void *)uint64_t v21 = "CONSTR_PRIMARY";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  Swift::String v22 = v36 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)Swift::String v22 = "CONSTR_UNIQUE";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v36 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)Swift::String v24 = "CONSTR_EXCLUSION";
  *((void *)v24 + 1) = 16;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v36 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 10;
  *(void *)uint64_t v26 = "CONSTR_FOREIGN";
  *((void *)v26 + 1) = 14;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v36 + v3 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 11;
  *(void *)Swift::String v28 = "CONSTR_ATTR_DEFERRABLE";
  *((void *)v28 + 1) = 22;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v36 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 12;
  *(void *)uint64_t v30 = "CONSTR_ATTR_NOT_DEFERRABLE";
  *((void *)v30 + 1) = 26;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v36 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 13;
  *(void *)uint64_t v32 = "CONSTR_ATTR_DEFERRED";
  *((void *)v32 + 1) = 20;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v36 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 14;
  *(void *)uint64_t v34 = "CONSTR_ATTR_IMMEDIATE";
  *((void *)v34 + 1) = 21;
  v34[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ImportForeignSchemaType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ImportForeignSchemaType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "IMPORT_FOREIGN_SCHEMA_TYPE_UNDEFINED";
  *(void *)(v6 + 8) = 36;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "FDW_IMPORT_SCHEMA_ALL";
  *(void *)(v10 + 8) = 21;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "FDW_IMPORT_SCHEMA_LIMIT_TO";
  *((void *)v12 + 1) = 26;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "FDW_IMPORT_SCHEMA_EXCEPT";
  *((void *)v14 + 1) = 24;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RoleStmtType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RoleStmtType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "ROLE_STMT_TYPE_UNDEFINED";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "ROLESTMT_ROLE";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "ROLESTMT_USER";
  *((void *)v12 + 1) = 13;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "ROLESTMT_GROUP";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FetchDirection._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FetchDirection._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "FETCH_DIRECTION_UNDEFINED";
  *(void *)(v5 + 8) = 25;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "FETCH_FORWARD";
  *(void *)(v9 + 8) = 13;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "FETCH_BACKWARD";
  *((void *)v11 + 1) = 14;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "FETCH_ABSOLUTE";
  *((void *)v13 + 1) = 14;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "FETCH_RELATIVE";
  *(void *)(v14 + 8) = 14;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FunctionParameterMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FunctionParameterMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "FUNCTION_PARAMETER_MODE_UNDEFINED";
  *(void *)(v6 + 8) = 33;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "FUNC_PARAM_IN";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "FUNC_PARAM_OUT";
  *((void *)v12 + 1) = 14;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "FUNC_PARAM_INOUT";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 4;
  *(void *)uint64_t v16 = "FUNC_PARAM_VARIADIC";
  *((void *)v16 + 1) = 19;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "FUNC_PARAM_TABLE";
  *((void *)v18 + 1) = 16;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v28;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TransactionStmtKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TransactionStmtKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Swift::String v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_18EB38DD0;
  uint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 0;
  *(void *)unint64_t v5 = "TRANSACTION_STMT_KIND_UNDEFINED";
  *(void *)(v5 + 8) = 31;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v28 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "TRANS_STMT_BEGIN";
  *(void *)(v9 + 8) = 16;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v28 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "TRANS_STMT_START";
  *((void *)v11 + 1) = 16;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v28 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "TRANS_STMT_COMMIT";
  *((void *)v13 + 1) = 17;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v28 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)char v15 = "TRANS_STMT_ROLLBACK";
  *((void *)v15 + 1) = 19;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v28 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "TRANS_STMT_SAVEPOINT";
  *((void *)v17 + 1) = 20;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v28 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "TRANS_STMT_RELEASE";
  *((void *)v19 + 1) = 18;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v28 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 7;
  *(void *)uint64_t v21 = "TRANS_STMT_ROLLBACK_TO";
  *((void *)v21 + 1) = 22;
  v21[16] = 2;
  v8();
  Swift::String v22 = v28 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)Swift::String v22 = "TRANS_STMT_PREPARE";
  *(void *)(v22 + 8) = 18;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v28 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)Swift::String v24 = "TRANS_STMT_COMMIT_PREPARED";
  *((void *)v24 + 1) = 26;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v28 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 10;
  *(void *)uint64_t v26 = "TRANS_STMT_ROLLBACK_PREPARED";
  *((void *)v26 + 1) = 28;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ViewCheckOption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ViewCheckOption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "VIEW_CHECK_OPTION_UNDEFINED";
  *(void *)(v6 + 8) = 27;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "NO_CHECK_OPTION";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "LOCAL_CHECK_OPTION";
  *((void *)v12 + 1) = 18;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "CASCADED_CHECK_OPTION";
  *((void *)v14 + 1) = 21;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ClusterOption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ClusterOption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 0;
  *(void *)unint64_t v6 = "CLUSTER_OPTION_UNDEFINED";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "CLUOPT_RECHECK";
  *((void *)v10 + 1) = 14;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "CLUOPT_VERBOSE";
  *(void *)(v11 + 8) = 14;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DiscardMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DiscardMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "DISCARD_MODE_UNDEFINED";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "DISCARD_ALL";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "DISCARD_PLANS";
  *((void *)v12 + 1) = 13;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "DISCARD_SEQUENCES";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)char v15 = "DISCARD_TEMP";
  *(void *)(v15 + 8) = 12;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ReindexObjectType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ReindexObjectType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18EB38D50;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 0;
  *(void *)uint64_t v4 = "REINDEX_OBJECT_TYPE_UNDEFINED";
  *(void *)(v4 + 8) = 29;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "REINDEX_OBJECT_INDEX";
  *(void *)(v8 + 8) = 20;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 2;
  *(void *)unint64_t v10 = "REINDEX_OBJECT_TABLE";
  *((void *)v10 + 1) = 20;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "REINDEX_OBJECT_SCHEMA";
  *((void *)v12 + 1) = 21;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "REINDEX_OBJECT_SYSTEM";
  *((void *)v14 + 1) = 21;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "REINDEX_OBJECT_DATABASE";
  *((void *)v16 + 1) = 23;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTSConfigType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTSConfigType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "ALTER_TSCONFIG_TYPE_UNDEFINED";
  *(void *)(v6 + 8) = 29;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "ALTER_TSCONFIG_ADD_MAPPING";
  *(void *)(v10 + 8) = 26;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN";
  *((void *)v12 + 1) = 38;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "ALTER_TSCONFIG_REPLACE_DICT";
  *((void *)v14 + 1) = 27;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 4;
  *(void *)uint64_t v16 = "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN";
  *((void *)v16 + 1) = 37;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "ALTER_TSCONFIG_DROP_MAPPING";
  *((void *)v18 + 1) = 27;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterSubscriptionType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterSubscriptionType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18EB38D50;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 0;
  *(void *)uint64_t v4 = "ALTER_SUBSCRIPTION_TYPE_UNDEFINED";
  *(void *)(v4 + 8) = 33;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "ALTER_SUBSCRIPTION_OPTIONS";
  *(void *)(v8 + 8) = 26;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 2;
  *(void *)unint64_t v10 = "ALTER_SUBSCRIPTION_CONNECTION";
  *((void *)v10 + 1) = 29;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ALTER_SUBSCRIPTION_PUBLICATION";
  *((void *)v12 + 1) = 30;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "ALTER_SUBSCRIPTION_REFRESH";
  *((void *)v14 + 1) = 26;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "ALTER_SUBSCRIPTION_ENABLED";
  *((void *)v16 + 1) = 26;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_OnCommitAction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_OnCommitAction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "ON_COMMIT_ACTION_UNDEFINED";
  *(void *)(v6 + 8) = 26;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "ONCOMMIT_NOOP";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "ONCOMMIT_PRESERVE_ROWS";
  *((void *)v12 + 1) = 22;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "ONCOMMIT_DELETE_ROWS";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)char v15 = "ONCOMMIT_DROP";
  *(void *)(v15 + 8) = 13;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ParamKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ParamKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "PARAM_KIND_UNDEFINED";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "PARAM_EXTERN";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "PARAM_EXEC";
  *((void *)v12 + 1) = 10;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "PARAM_SUBLINK";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)char v15 = "PARAM_MULTIEXPR";
  *(void *)(v15 + 8) = 15;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CoercionContext._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CoercionContext._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "COERCION_CONTEXT_UNDEFINED";
  *(void *)(v6 + 8) = 26;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "COERCION_IMPLICIT";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "COERCION_ASSIGNMENT";
  *((void *)v12 + 1) = 19;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "COERCION_EXPLICIT";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CoercionForm._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CoercionForm._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "COERCION_FORM_UNDEFINED";
  *(void *)(v6 + 8) = 23;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "COERCE_EXPLICIT_CALL";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "COERCE_EXPLICIT_CAST";
  *((void *)v12 + 1) = 20;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "COERCE_IMPLICIT_CAST";
  *((void *)v14 + 1) = 20;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_BoolExprType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_BoolExprType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "BOOL_EXPR_TYPE_UNDEFINED";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "AND_EXPR";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "OR_EXPR";
  *((void *)v12 + 1) = 7;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "NOT_EXPR";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SubLinkType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SubLinkType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Swift::String v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18EB38DE0;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 0;
  *(void *)unint64_t v5 = "SUB_LINK_TYPE_UNDEFINED";
  *(void *)(v5 + 8) = 23;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "EXISTS_SUBLINK";
  *(void *)(v9 + 8) = 14;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "ALL_SUBLINK";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "ANY_SUBLINK";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)char v15 = "ROWCOMPARE_SUBLINK";
  *((void *)v15 + 1) = 18;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "EXPR_SUBLINK";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "MULTIEXPR_SUBLINK";
  *((void *)v19 + 1) = 17;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 7;
  *(void *)uint64_t v21 = "ARRAY_SUBLINK";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)Swift::String v22 = "CTE_SUBLINK";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RowCompareType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RowCompareType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 0;
  *(void *)uint64_t v4 = "ROW_COMPARE_TYPE_UNDEFINED";
  *(void *)(v4 + 8) = 26;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 1;
  *(void *)uint64_t v8 = "ROWCOMPARE_LT";
  *(void *)(v8 + 8) = 13;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 2;
  *(void *)unint64_t v10 = "ROWCOMPARE_LE";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "ROWCOMPARE_EQ";
  *((void *)v12 + 1) = 13;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "ROWCOMPARE_GE";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "ROWCOMPARE_GT";
  *((void *)v16 + 1) = 13;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "ROWCOMPARE_NE";
  *((void *)v18 + 1) = 13;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_MinMaxOp._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_MinMaxOp._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 0;
  *(void *)unint64_t v6 = "MIN_MAX_OP_UNDEFINED";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "IS_GREATEST";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "IS_LEAST";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v38;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SQLValueFunctionOp._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SQLValueFunctionOp._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v38 = swift_allocObject();
  *(_OWORD *)(v38 + 16) = xmmword_18EB38DF0;
  uint64_t v4 = v38 + v3;
  unint64_t v5 = v38 + v3 + v1[14];
  *(void *)(v38 + v3) = 0;
  *(void *)unint64_t v5 = "SQLVALUE_FUNCTION_OP_UNDEFINED";
  *(void *)(v5 + 8) = 30;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "SVFOP_CURRENT_DATE";
  *(void *)(v9 + 8) = 18;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "SVFOP_CURRENT_TIME";
  *((void *)v11 + 1) = 18;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "SVFOP_CURRENT_TIME_N";
  *((void *)v13 + 1) = 20;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)char v15 = "SVFOP_CURRENT_TIMESTAMP";
  *((void *)v15 + 1) = 23;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "SVFOP_CURRENT_TIMESTAMP_N";
  *((void *)v17 + 1) = 25;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "SVFOP_LOCALTIME";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 7;
  *(void *)uint64_t v21 = "SVFOP_LOCALTIME_N";
  *((void *)v21 + 1) = 17;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)Swift::String v22 = "SVFOP_LOCALTIMESTAMP";
  *(void *)(v22 + 8) = 20;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 9;
  *(void *)Swift::String v24 = "SVFOP_LOCALTIMESTAMP_N";
  *((void *)v24 + 1) = 22;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 10;
  *(void *)uint64_t v26 = "SVFOP_CURRENT_ROLE";
  *((void *)v26 + 1) = 18;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 11;
  *(void *)Swift::String v28 = "SVFOP_CURRENT_USER";
  *((void *)v28 + 1) = 18;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 12;
  *(void *)uint64_t v30 = "SVFOP_USER";
  *((void *)v30 + 1) = 10;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 13;
  *(void *)uint64_t v32 = "SVFOP_SESSION_USER";
  *((void *)v32 + 1) = 18;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v4 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 14;
  *(void *)uint64_t v34 = "SVFOP_CURRENT_CATALOG";
  *((void *)v34 + 1) = 21;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v4 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 15;
  *(void *)uint64_t v36 = "SVFOP_CURRENT_SCHEMA";
  *((void *)v36 + 1) = 20;
  v36[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_XmlExprOp._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_XmlExprOp._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Swift::String v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18EB38DE0;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 0;
  *(void *)unint64_t v5 = "XML_EXPR_OP_UNDEFINED";
  *(void *)(v5 + 8) = 21;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "IS_XMLCONCAT";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "IS_XMLELEMENT";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "IS_XMLFOREST";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)char v15 = "IS_XMLPARSE";
  *((void *)v15 + 1) = 11;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "IS_XMLPI";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "IS_XMLROOT";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 7;
  *(void *)uint64_t v21 = "IS_XMLSERIALIZE";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)Swift::String v22 = "IS_DOCUMENT";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_XmlOptionType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_XmlOptionType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 0;
  *(void *)unint64_t v6 = "XML_OPTION_TYPE_UNDEFINED";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "XMLOPTION_DOCUMENT";
  *((void *)v10 + 1) = 18;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "XMLOPTION_CONTENT";
  *(void *)(v11 + 8) = 17;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_NullTestType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_NullTestType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 0;
  *(void *)unint64_t v6 = "NULL_TEST_TYPE_UNDEFINED";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "IS_NULL";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "IS_NOT_NULL";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_BoolTestType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_BoolTestType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38DB0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "BOOL_TEST_TYPE_UNDEFINED";
  *(void *)(v6 + 8) = 24;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "IS_TRUE";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "IS_NOT_TRUE";
  *((void *)v12 + 1) = 11;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "IS_FALSE";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 4;
  *(void *)uint64_t v16 = "IS_NOT_FALSE";
  *((void *)v16 + 1) = 12;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "IS_UNKNOWN";
  *((void *)v18 + 1) = 10;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  unint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 6;
  *(void *)unint64_t v20 = "IS_NOT_UNKNOWN";
  *((void *)v20 + 1) = 14;
  v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CmdType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CmdType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 0;
  *(void *)unint64_t v5 = "CMD_TYPE_UNDEFINED";
  *(void *)(v5 + 8) = 18;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "CMD_UNKNOWN";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "CMD_SELECT";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "CMD_UPDATE";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)char v15 = "CMD_INSERT";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "CMD_DELETE";
  *((void *)v17 + 1) = 10;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "CMD_UTILITY";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 7;
  *(void *)uint64_t v21 = "CMD_NOTHING";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_JoinType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_JoinType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Swift::String v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18EB38DE0;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 0;
  *(void *)unint64_t v5 = "JOIN_TYPE_UNDEFINED";
  *(void *)(v5 + 8) = 19;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "JOIN_INNER";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "JOIN_LEFT";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "JOIN_FULL";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 4;
  *(void *)char v15 = "JOIN_RIGHT";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "JOIN_SEMI";
  *((void *)v17 + 1) = 9;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 6;
  *(void *)uint64_t v19 = "JOIN_ANTI";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 7;
  *(void *)uint64_t v21 = "JOIN_UNIQUE_OUTER";
  *((void *)v21 + 1) = 17;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 8;
  *(void *)Swift::String v22 = "JOIN_UNIQUE_INNER";
  *(void *)(v22 + 8) = 17;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AggStrategy._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AggStrategy._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 0;
  *(void *)unint64_t v5 = "AGG_STRATEGY_UNDEFINED";
  *(void *)(v5 + 8) = 22;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 1;
  *(void *)char v9 = "AGG_PLAIN";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 2;
  *(void *)uint64_t v11 = "AGG_SORTED";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 3;
  *(void *)uint64_t v13 = "AGG_HASHED";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 4;
  *(void *)uint64_t v14 = "AGG_MIXED";
  *(void *)(v14 + 8) = 9;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AggSplit._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AggSplit._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "AGG_SPLIT_UNDEFINED";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "AGGSPLIT_SIMPLE";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "AGGSPLIT_INITIAL_SERIAL";
  *((void *)v12 + 1) = 23;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "AGGSPLIT_FINAL_DESERIAL";
  *((void *)v14 + 1) = 23;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SetOpCmd._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SetOpCmd._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "SET_OP_CMD_UNDEFINED";
  *(void *)(v6 + 8) = 20;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "SETOPCMD_INTERSECT";
  *(void *)(v10 + 8) = 18;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "SETOPCMD_INTERSECT_ALL";
  *((void *)v12 + 1) = 22;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "SETOPCMD_EXCEPT";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)char v15 = "SETOPCMD_EXCEPT_ALL";
  *(void *)(v15 + 8) = 19;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SetOpStrategy._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SetOpStrategy._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 0;
  *(void *)unint64_t v6 = "SET_OP_STRATEGY_UNDEFINED";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 1;
  *(void *)unint64_t v10 = "SETOP_SORTED";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 2;
  *(void *)uint64_t v11 = "SETOP_HASHED";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_OnConflictAction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_OnConflictAction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "ON_CONFLICT_ACTION_UNDEFINED";
  *(void *)(v6 + 8) = 28;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "ONCONFLICT_NONE";
  *(void *)(v10 + 8) = 15;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "ONCONFLICT_NOTHING";
  *((void *)v12 + 1) = 18;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "ONCONFLICT_UPDATE";
  *((void *)v14 + 1) = 17;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_LimitOption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_LimitOption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "LIMIT_OPTION_UNDEFINED";
  *(void *)(v6 + 8) = 22;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "LIMIT_OPTION_DEFAULT";
  *(void *)(v10 + 8) = 20;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "LIMIT_OPTION_COUNT";
  *((void *)v12 + 1) = 18;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "LIMIT_OPTION_WITH_TIES";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_LockClauseStrength._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_LockClauseStrength._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "LOCK_CLAUSE_STRENGTH_UNDEFINED";
  *(void *)(v6 + 8) = 30;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "LCS_NONE";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "LCS_FORKEYSHARE";
  *((void *)v12 + 1) = 15;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "LCS_FORSHARE";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 4;
  *(void *)uint64_t v16 = "LCS_FORNOKEYUPDATE";
  *((void *)v16 + 1) = 18;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 5;
  *(void *)uint64_t v18 = "LCS_FORUPDATE";
  *((void *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_LockWaitPolicy._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_LockWaitPolicy._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "LOCK_WAIT_POLICY_UNDEFINED";
  *(void *)(v6 + 8) = 26;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "LockWaitBlock";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "LockWaitSkip";
  *((void *)v12 + 1) = 12;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "LockWaitError";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_LockTupleMode._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_LockTupleMode._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "LOCK_TUPLE_MODE_UNDEFINED";
  *(void *)(v6 + 8) = 25;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "LockTupleKeyShare";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "LockTupleShare";
  *((void *)v12 + 1) = 14;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "LockTupleNoKeyExclusive";
  *((void *)v14 + 1) = 23;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)char v15 = "LockTupleExclusive";
  *(void *)(v15 + 8) = 18;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_KeywordKind._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_KeywordKind._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 0;
  *(void *)unint64_t v6 = "NO_KEYWORD";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 1;
  *(void *)unint64_t v10 = "UNRESERVED_KEYWORD";
  *(void *)(v10 + 8) = 18;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 2;
  *(void *)uint64_t v12 = "COL_NAME_KEYWORD";
  *((void *)v12 + 1) = 16;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 3;
  *(void *)uint64_t v14 = "TYPE_FUNC_NAME_KEYWORD";
  *((void *)v14 + 1) = 22;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 4;
  *(void *)char v15 = "RESERVED_KEYWORD";
  *(void *)(v15 + 8) = 16;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void *v71;
  char *v72;
  void *v73;
  char *v74;
  void *v75;
  char *v76;
  void *v77;
  char *v78;
  void *v79;
  char *v80;
  void *v81;
  char *v82;
  void *v83;
  char *v84;
  void *v85;
  char *v86;
  void *v87;
  char *v88;
  void *v89;
  char *v90;
  void *v91;
  char *v92;
  void *v93;
  char *v94;
  void *v95;
  char *v96;
  void *v97;
  char *v98;
  void *v99;
  char *v100;
  void *v101;
  char *v102;
  void *v103;
  char *v104;
  void *v105;
  char *v106;
  void *v107;
  char *v108;
  void *v109;
  char *v110;
  void *v111;
  char *v112;
  void *v113;
  char *v114;
  void *v115;
  char *v116;
  void *v117;
  char *v118;
  void *v119;
  char *v120;
  void *v121;
  char *v122;
  void *v123;
  char *v124;
  void *v125;
  char *v126;
  void *v127;
  char *v128;
  void *v129;
  char *v130;
  unint64_t v131;
  void *v132;
  char *v133;
  void *v134;
  char *v135;
  void *v136;
  char *v137;
  void *v138;
  char *v139;
  void *v140;
  char *v141;
  void *v142;
  char *v143;
  void *v144;
  char *v145;
  void *v146;
  char *v147;
  void *v148;
  char *v149;
  void *v150;
  char *v151;
  void *v152;
  char *v153;
  void *v154;
  char *v155;
  void *v156;
  char *v157;
  void *v158;
  char *v159;
  void *v160;
  char *v161;
  void *v162;
  char *v163;
  void *v164;
  char *v165;
  void *v166;
  char *v167;
  void *v168;
  char *v169;
  void *v170;
  char *v171;
  void *v172;
  char *v173;
  void *v174;
  char *v175;
  void *v176;
  char *v177;
  void *v178;
  char *v179;
  void *v180;
  char *v181;
  void *v182;
  char *v183;
  void *v184;
  char *v185;
  void *v186;
  char *v187;
  void *v188;
  char *v189;
  void *v190;
  char *v191;
  void *v192;
  char *v193;
  void *v194;
  char *v195;
  void *v196;
  char *v197;
  void *v198;
  char *v199;
  void *v200;
  char *v201;
  void *v202;
  char *v203;
  void *v204;
  char *v205;
  void *v206;
  char *v207;
  void *v208;
  char *v209;
  void *v210;
  char *v211;
  void *v212;
  char *v213;
  void *v214;
  char *v215;
  void *v216;
  char *v217;
  void *v218;
  char *v219;
  void *v220;
  char *v221;
  void *v222;
  char *v223;
  void *v224;
  char *v225;
  void *v226;
  char *v227;
  void *v228;
  char *v229;
  void *v230;
  char *v231;
  void *v232;
  char *v233;
  void *v234;
  char *v235;
  void *v236;
  char *v237;
  void *v238;
  char *v239;
  void *v240;
  char *v241;
  void *v242;
  char *v243;
  void *v244;
  char *v245;
  void *v246;
  char *v247;
  void *v248;
  char *v249;
  void *v250;
  char *v251;
  void *v252;
  char *v253;
  void *v254;
  char *v255;
  void *v256;
  char *v257;
  unint64_t v258;
  void *v259;
  char *v260;
  void *v261;
  char *v262;
  void *v263;
  char *v264;
  void *v265;
  char *v266;
  void *v267;
  char *v268;
  void *v269;
  char *v270;
  void *v271;
  char *v272;
  void *v273;
  char *v274;
  void *v275;
  char *v276;
  void *v277;
  char *v278;
  void *v279;
  char *v280;
  void *v281;
  char *v282;
  void *v283;
  char *v284;
  void *v285;
  char *v286;
  void *v287;
  char *v288;
  void *v289;
  char *v290;
  void *v291;
  char *v292;
  void *v293;
  char *v294;
  void *v295;
  char *v296;
  void *v297;
  char *v298;
  void *v299;
  char *v300;
  void *v301;
  char *v302;
  void *v303;
  char *v304;
  void *v305;
  char *v306;
  void *v307;
  char *v308;
  void *v309;
  char *v310;
  void *v311;
  char *v312;
  void *v313;
  char *v314;
  void *v315;
  char *v316;
  void *v317;
  char *v318;
  void *v319;
  char *v320;
  void *v321;
  char *v322;
  void *v323;
  char *v324;
  void *v325;
  char *v326;
  void *v327;
  char *v328;
  void *v329;
  char *v330;
  void *v331;
  char *v332;
  void *v333;
  char *v334;
  void *v335;
  char *v336;
  void *v337;
  char *v338;
  void *v339;
  char *v340;
  void *v341;
  char *v342;
  void *v343;
  char *v344;
  void *v345;
  char *v346;
  void *v347;
  char *v348;
  void *v349;
  char *v350;
  void *v351;
  char *v352;
  void *v353;
  char *v354;
  void *v355;
  char *v356;
  void *v357;
  char *v358;
  void *v359;
  char *v360;
  void *v361;
  char *v362;
  void *v363;
  char *v364;
  void *v365;
  char *v366;
  void *v367;
  char *v368;
  void *v369;
  char *v370;
  void *v371;
  char *v372;
  void *v373;
  char *v374;
  void *v375;
  char *v376;
  void *v377;
  char *v378;
  void *v379;
  char *v380;
  void *v381;
  char *v382;
  void *v383;
  char *v384;
  void *v385;
  char *v386;
  void *v387;
  char *v388;
  void *v389;
  char *v390;
  void *v391;
  char *v392;
  void *v393;
  char *v394;
  void *v395;
  char *v396;
  void *v397;
  char *v398;
  void *v399;
  char *v400;
  void *v401;
  char *v402;
  void *v403;
  char *v404;
  void *v405;
  char *v406;
  void *v407;
  char *v408;
  void *v409;
  char *v410;
  void *v411;
  char *v412;
  void *v413;
  char *v414;
  void *v415;
  char *v416;
  void *v417;
  char *v418;
  void *v419;
  char *v420;
  void *v421;
  char *v422;
  void *v423;
  char *v424;
  void *v425;
  char *v426;
  void *v427;
  char *v428;
  void *v429;
  char *v430;
  void *v431;
  char *v432;
  void *v433;
  char *v434;
  void *v435;
  char *v436;
  void *v437;
  char *v438;
  void *v439;
  char *v440;
  void *v441;
  char *v442;
  void *v443;
  char *v444;
  void *v445;
  char *v446;
  void *v447;
  char *v448;
  void *v449;
  char *v450;
  void *v451;
  char *v452;
  void *v453;
  char *v454;
  void *v455;
  char *v456;
  void *v457;
  char *v458;
  void *v459;
  char *v460;
  void *v461;
  char *v462;
  void *v463;
  char *v464;
  void *v465;
  char *v466;
  void *v467;
  char *v468;
  void *v469;
  char *v470;
  void *v471;
  char *v472;
  void *v473;
  char *v474;
  void *v475;
  char *v476;
  void *v477;
  char *v478;
  void *v479;
  char *v480;
  void *v481;
  char *v482;
  void *v483;
  char *v484;
  void *v485;
  char *v486;
  void *v487;
  char *v488;
  void *v489;
  char *v490;
  void *v491;
  char *v492;
  void *v493;
  char *v494;
  void *v495;
  char *v496;
  void *v497;
  char *v498;
  void *v499;
  char *v500;
  void *v501;
  char *v502;
  void *v503;
  char *v504;
  void *v505;
  char *v506;
  void *v507;
  char *v508;
  void *v509;
  char *v510;
  void *v511;
  char *v512;
  unint64_t v513;
  void *v514;
  char *v515;
  void *v516;
  char *v517;
  void *v518;
  char *v519;
  void *v520;
  char *v521;
  void *v522;
  char *v523;
  void *v524;
  char *v525;
  void *v526;
  char *v527;
  void *v528;
  char *v529;
  void *v530;
  char *v531;
  void *v532;
  char *v533;
  void *v534;
  char *v535;
  void *v536;
  char *v537;
  void *v538;
  char *v539;
  void *v540;
  char *v541;
  void *v542;
  char *v543;
  void *v544;
  char *v545;
  void *v546;
  char *v547;
  void *v548;
  char *v549;
  void *v550;
  char *v551;
  void *v552;
  char *v553;
  void *v554;
  char *v555;
  void *v556;
  char *v557;
  void *v558;
  char *v559;
  void *v560;
  char *v561;
  void *v562;
  char *v563;
  void *v564;
  char *v565;
  void *v566;
  char *v567;
  void *v568;
  char *v569;
  void *v570;
  char *v571;
  void *v572;
  char *v573;
  void *v574;
  char *v575;
  void *v576;
  char *v577;
  void *v578;
  char *v579;
  void *v580;
  char *v581;
  void *v582;
  char *v583;
  void *v584;
  char *v585;
  void *v586;
  char *v587;
  void *v588;
  char *v589;
  void *v590;
  char *v591;
  void *v592;
  char *v593;
  void *v594;
  char *v595;
  void *v596;
  char *v597;
  void *v598;
  char *v599;
  void *v600;
  char *v601;
  void *v602;
  char *v603;
  void *v604;
  char *v605;
  void *v606;
  char *v607;
  void *v608;
  char *v609;
  void *v610;
  char *v611;
  void *v612;
  char *v613;
  void *v614;
  char *v615;
  void *v616;
  char *v617;
  void *v618;
  char *v619;
  void *v620;
  char *v621;
  void *v622;
  char *v623;
  void *v624;
  char *v625;
  void *v626;
  char *v627;
  void *v628;
  char *v629;
  void *v630;
  char *v631;
  void *v632;
  char *v633;
  void *v634;
  char *v635;
  void *v636;
  char *v637;
  void *v638;
  char *v639;
  void *v640;
  char *v641;
  void *v642;
  char *v643;
  void *v644;
  char *v645;
  void *v646;
  char *v647;
  void *v648;
  char *v649;
  void *v650;
  char *v651;
  void *v652;
  char *v653;
  void *v654;
  char *v655;
  void *v656;
  char *v657;
  void *v658;
  char *v659;
  void *v660;
  char *v661;
  void *v662;
  char *v663;
  void *v664;
  char *v665;
  void *v666;
  char *v667;
  void *v668;
  char *v669;
  void *v670;
  char *v671;
  void *v672;
  char *v673;
  void *v674;
  char *v675;
  void *v676;
  char *v677;
  void *v678;
  char *v679;
  void *v680;
  char *v681;
  void *v682;
  char *v683;
  void *v684;
  char *v685;
  void *v686;
  char *v687;
  void *v688;
  char *v689;
  void *v690;
  char *v691;
  void *v692;
  char *v693;
  void *v694;
  char *v695;
  void *v696;
  char *v697;
  void *v698;
  char *v699;
  void *v700;
  char *v701;
  void *v702;
  char *v703;
  void *v704;
  char *v705;
  void *v706;
  char *v707;
  void *v708;
  char *v709;
  void *v710;
  char *v711;
  void *v712;
  char *v713;
  void *v714;
  char *v715;
  void *v716;
  char *v717;
  void *v718;
  char *v719;
  void *v720;
  char *v721;
  void *v722;
  char *v723;
  void *v724;
  char *v725;
  void *v726;
  char *v727;
  void *v728;
  char *v729;
  void *v730;
  char *v731;
  void *v732;
  char *v733;
  void *v734;
  char *v735;
  void *v736;
  char *v737;
  void *v738;
  char *v739;
  void *v740;
  char *v741;
  void *v742;
  char *v743;
  void *v744;
  char *v745;
  void *v746;
  char *v747;
  void *v748;
  char *v749;
  void *v750;
  char *v751;
  void *v752;
  char *v753;
  void *v754;
  char *v755;
  void *v756;
  char *v757;
  void *v758;
  char *v759;
  void *v760;
  char *v761;
  void *v762;
  char *v763;
  void *v764;
  char *v765;
  void *v766;
  char *v767;
  void *v768;
  char *v769;
  void *v770;
  char *v771;
  void *v772;
  char *v773;
  void *v774;
  char *v775;
  void *v776;
  char *v777;
  void *v778;
  char *v779;
  void *v780;
  char *v781;
  void *v782;
  char *v783;
  void *v784;
  char *v785;
  void *v786;
  char *v787;
  void *v788;
  char *v789;
  void *v790;
  char *v791;
  void *v792;
  char *v793;
  void *v794;
  char *v795;
  void *v796;
  char *v797;
  void *v798;
  char *v799;
  void *v800;
  char *v801;
  void *v802;
  char *v803;
  void *v804;
  char *v805;
  void *v806;
  char *v807;
  void *v808;
  char *v809;
  void *v810;
  char *v811;
  void *v812;
  char *v813;
  void *v814;
  char *v815;
  void *v816;
  char *v817;
  void *v818;
  char *v819;
  void *v820;
  char *v821;
  void *v822;
  char *v823;
  void *v824;
  char *v825;
  void *v826;
  char *v827;
  void *v828;
  char *v829;
  void *v830;
  char *v831;
  void *v832;
  char *v833;
  void *v834;
  char *v835;
  void *v836;
  char *v837;
  void *v838;
  char *v839;
  void *v840;
  char *v841;
  void *v842;
  char *v843;
  void *v844;
  char *v845;
  void *v846;
  char *v847;
  void *v848;
  char *v849;
  void *v850;
  char *v851;
  void *v852;
  char *v853;
  void *v854;
  char *v855;
  void *v856;
  char *v857;
  void *v858;
  char *v859;
  void *v860;
  char *v861;
  void *v862;
  char *v863;
  void *v864;
  char *v865;
  void *v866;
  char *v867;
  void *v868;
  char *v869;
  void *v870;
  char *v871;
  void *v872;
  char *v873;
  void *v874;
  char *v875;
  void *v876;
  char *v877;
  void *v878;
  char *v879;
  void *v880;
  char *v881;
  void *v882;
  char *v883;
  void *v884;
  char *v885;
  void *v886;
  char *v887;
  void *v888;
  char *v889;
  void *v890;
  char *v891;
  void *v892;
  char *v893;
  void *v894;
  char *v895;
  void *v896;
  char *v897;
  void *v898;
  char *v899;
  void *v900;
  char *v901;
  void *v902;
  char *v903;
  void *v904;
  char *v905;
  void *v906;
  char *v907;
  void *v908;
  char *v909;
  void *v910;
  char *v911;
  void *v912;
  char *v913;
  void *v914;
  char *v915;
  void *v916;
  char *v917;
  void *v918;
  char *v919;
  void *v920;
  char *v921;
  void *v922;
  char *v923;
  void *v924;
  char *v925;
  void *v926;
  char *v927;
  void *v928;
  char *v929;
  void *v930;
  char *v931;
  void *v932;
  char *v933;
  void *v934;
  char *v935;
  void *v936;
  char *v937;
  void *v938;
  char *v939;
  void *v940;
  char *v941;
  void *v942;
  char *v943;
  void *v944;
  char *v945;
  void *v946;
  char *v947;
  void *v948;
  char *v949;
  void *v950;
  char *v951;
  void *v952;
  char *v953;
  void *v954;
  char *v955;
  void *v956;
  char *v957;
  void *v958;
  char *v959;
  void *v960;
  char *v961;
  void *v962;
  char *v963;
  void *v964;
  char *v965;
  void *v966;
  char *v967;
  void *v968;
  char *v969;
  void *v970;
  char *v971;
  void *v972;
  char *v973;
  void *v974;
  char *v975;
  void *v976;
  char *v977;
  void *v978;
  char *v979;
  void *v980;
  char *v981;
  void *v982;
  char *v983;
  void *v984;
  char *v985;
  void *v986;
  char *v987;
  uint64_t v989;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Token._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Token._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  v989 = swift_allocObject();
  *(_OWORD *)(v989 + 16) = xmmword_18EB38E10;
  uint64_t v4 = v989 + v3;
  unint64_t v5 = v989 + v3 + v1[14];
  *(void *)(v989 + v3) = 0;
  *(void *)unint64_t v5 = "NUL";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v989 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 37;
  *(void *)char v9 = "ASCII_37";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v989 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 40;
  *(void *)uint64_t v11 = "ASCII_40";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v989 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 41;
  *(void *)uint64_t v13 = "ASCII_41";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v989 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 42;
  *(void *)char v15 = "ASCII_42";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v989 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 43;
  *(void *)uint64_t v17 = "ASCII_43";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v989 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 44;
  *(void *)uint64_t v19 = "ASCII_44";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v989 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 45;
  *(void *)uint64_t v21 = "ASCII_45";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  Swift::String v22 = v989 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 46;
  *(void *)Swift::String v22 = "ASCII_46";
  *(void *)(v22 + 8) = 8;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v989 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 47;
  *(void *)Swift::String v24 = "ASCII_47";
  *((void *)v24 + 1) = 8;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v989 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 58;
  *(void *)uint64_t v26 = "ASCII_58";
  *((void *)v26 + 1) = 8;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v989 + v3 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 59;
  *(void *)Swift::String v28 = "ASCII_59";
  *((void *)v28 + 1) = 8;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v989 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 60;
  *(void *)uint64_t v30 = "ASCII_60";
  *((void *)v30 + 1) = 8;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v989 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 61;
  *(void *)uint64_t v32 = "ASCII_61";
  *((void *)v32 + 1) = 8;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v989 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 62;
  *(void *)uint64_t v34 = "ASCII_62";
  *((void *)v34 + 1) = 8;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v989 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 63;
  *(void *)uint64_t v36 = "ASCII_63";
  *((void *)v36 + 1) = 8;
  v36[16] = 2;
  v8();
  uint64_t v37 = v989 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 91;
  *(void *)uint64_t v37 = "ASCII_91";
  *(void *)(v37 + 8) = 8;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v989 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  *uint64_t v38 = 92;
  *(void *)uint64_t v39 = "ASCII_92";
  *((void *)v39 + 1) = 8;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v989 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 93;
  *(void *)uint64_t v41 = "ASCII_93";
  *((void *)v41 + 1) = 8;
  v41[16] = 2;
  v8();
  unint64_t v42 = (void *)(v989 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  void *v42 = 94;
  *(void *)uint64_t v43 = "ASCII_94";
  *((void *)v43 + 1) = 8;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v989 + v3 + 20 * v2);
  unint64_t v45 = (char *)v44 + v1[14];
  char *v44 = 258;
  *(void *)unint64_t v45 = "IDENT";
  *((void *)v45 + 1) = 5;
  v45[16] = 2;
  v8();
  uint64_t v46 = (void *)(v989 + v3 + 21 * v2);
  Swift::String v47 = (char *)v46 + v1[14];
  *uint64_t v46 = 259;
  *(void *)Swift::String v47 = "UIDENT";
  *((void *)v47 + 1) = 6;
  v47[16] = 2;
  v8();
  Swift::String v48 = (void *)(v989 + v3 + 22 * v2);
  unint64_t v49 = (char *)v48 + v1[14];
  *Swift::String v48 = 260;
  *(void *)unint64_t v49 = "FCONST";
  *((void *)v49 + 1) = 6;
  v49[16] = 2;
  v8();
  unint64_t v50 = (void *)(v989 + v3 + 23 * v2);
  uint64_t v51 = (char *)v50 + v1[14];
  *unint64_t v50 = 261;
  *(void *)uint64_t v51 = "SCONST";
  *((void *)v51 + 1) = 6;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v989 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 262;
  *(void *)uint64_t v53 = "USCONST";
  *((void *)v53 + 1) = 7;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v989 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 263;
  *(void *)uint64_t v55 = "BCONST";
  *((void *)v55 + 1) = 6;
  v55[16] = 2;
  v8();
  uint64_t v56 = (void *)(v989 + v3 + 26 * v2);
  uint64_t v57 = (char *)v56 + v1[14];
  *uint64_t v56 = 264;
  *(void *)uint64_t v57 = "XCONST";
  *((void *)v57 + 1) = 6;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v989 + v3 + 27 * v2);
  int v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 265;
  *(void *)int v59 = "Op";
  *((void *)v59 + 1) = 2;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v989 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 266;
  *(void *)uint64_t v61 = "ICONST";
  *((void *)v61 + 1) = 6;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v989 + v3 + 29 * v2);
  uint64_t v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 267;
  *(void *)uint64_t v63 = "PARAM";
  *((void *)v63 + 1) = 5;
  v63[16] = 2;
  v8();
  uint64_t v64 = (void *)(v989 + v3 + 30 * v2);
  uint64_t v65 = (char *)v64 + v1[14];
  *uint64_t v64 = 268;
  *(void *)uint64_t v65 = "TYPECAST";
  *((void *)v65 + 1) = 8;
  v65[16] = 2;
  v8();
  uint64_t v66 = (void *)(v989 + v3 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *uint64_t v66 = 269;
  *(void *)uint64_t v67 = "DOT_DOT";
  *((void *)v67 + 1) = 7;
  v67[16] = 2;
  v8();
  unint64_t v68 = v989 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 270;
  *(void *)unint64_t v68 = "COLON_EQUALS";
  *(void *)(v68 + 8) = 12;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  uint64_t v69 = (void *)(v989 + v3 + 33 * v2);
  Swift::String v70 = (char *)v69 + v1[14];
  *uint64_t v69 = 271;
  *(void *)Swift::String v70 = "EQUALS_GREATER";
  *((void *)v70 + 1) = 14;
  v70[16] = 2;
  v8();
  Swift::String v71 = (void *)(v989 + v3 + 34 * v2);
  unint64_t v72 = (char *)v71 + v1[14];
  *Swift::String v71 = 272;
  *(void *)unint64_t v72 = "LESS_EQUALS";
  *((void *)v72 + 1) = 11;
  v72[16] = 2;
  v8();
  uint64_t v73 = (void *)(v989 + v3 + 35 * v2);
  Swift::String v74 = (char *)v73 + v1[14];
  *uint64_t v73 = 273;
  *(void *)Swift::String v74 = "GREATER_EQUALS";
  *((void *)v74 + 1) = 14;
  v74[16] = 2;
  v8();
  uint64_t v75 = (void *)(v989 + v3 + 36 * v2);
  uint64_t v76 = (char *)v75 + v1[14];
  *uint64_t v75 = 274;
  *(void *)uint64_t v76 = "NOT_EQUALS";
  *((void *)v76 + 1) = 10;
  v76[16] = 2;
  v8();
  uint64_t v77 = (void *)(v989 + v3 + 37 * v2);
  uint64_t v78 = (char *)v77 + v1[14];
  *uint64_t v77 = 275;
  *(void *)uint64_t v78 = "SQL_COMMENT";
  *((void *)v78 + 1) = 11;
  v78[16] = 2;
  v8();
  uint64_t v79 = (void *)(v989 + v3 + 38 * v2);
  int v80 = (char *)v79 + v1[14];
  *uint64_t v79 = 276;
  *(void *)int v80 = "C_COMMENT";
  *((void *)v80 + 1) = 9;
  v80[16] = 2;
  v8();
  uint64_t v81 = (void *)(v989 + v3 + 39 * v2);
  uint64_t v82 = (char *)v81 + v1[14];
  *uint64_t v81 = 277;
  *(void *)uint64_t v82 = "ABORT_P";
  *((void *)v82 + 1) = 7;
  v82[16] = 2;
  v8();
  uint64_t v83 = (void *)(v989 + v3 + 40 * v2);
  uint64_t v84 = (char *)v83 + v1[14];
  *uint64_t v83 = 278;
  *(void *)uint64_t v84 = "ABSOLUTE_P";
  *((void *)v84 + 1) = 10;
  v84[16] = 2;
  v8();
  uint64_t v85 = (void *)(v989 + v3 + 41 * v2);
  uint64_t v86 = (char *)v85 + v1[14];
  *uint64_t v85 = 279;
  *(void *)uint64_t v86 = "ACCESS";
  *((void *)v86 + 1) = 6;
  v86[16] = 2;
  v8();
  uint64_t v87 = (void *)(v989 + v3 + 42 * v2);
  uint64_t v88 = (char *)v87 + v1[14];
  *uint64_t v87 = 280;
  *(void *)uint64_t v88 = "ACTION";
  *((void *)v88 + 1) = 6;
  v88[16] = 2;
  v8();
  uint64_t v89 = (void *)(v989 + v3 + 43 * v2);
  uint64_t v90 = (char *)v89 + v1[14];
  *uint64_t v89 = 281;
  *(void *)uint64_t v90 = "ADD_P";
  *((void *)v90 + 1) = 5;
  v90[16] = 2;
  v8();
  unint64_t v91 = (void *)(v989 + v3 + 44 * v2);
  uint64_t v92 = (char *)v91 + v1[14];
  *unint64_t v91 = 282;
  *(void *)uint64_t v92 = "ADMIN";
  *((void *)v92 + 1) = 5;
  v92[16] = 2;
  v8();
  uint64_t v93 = (void *)(v989 + v3 + 45 * v2);
  unint64_t v94 = (char *)v93 + v1[14];
  *uint64_t v93 = 283;
  *(void *)unint64_t v94 = "AFTER";
  *((void *)v94 + 1) = 5;
  v94[16] = 2;
  v8();
  uint64_t v95 = (void *)(v989 + v3 + 46 * v2);
  Swift::String v96 = (char *)v95 + v1[14];
  void *v95 = 284;
  *(void *)Swift::String v96 = "AGGREGATE";
  *((void *)v96 + 1) = 9;
  v96[16] = 2;
  v8();
  Swift::String v97 = (void *)(v989 + v3 + 47 * v2);
  unint64_t v98 = (char *)v97 + v1[14];
  *Swift::String v97 = 285;
  *(void *)unint64_t v98 = "ALL";
  *((void *)v98 + 1) = 3;
  v98[16] = 2;
  v8();
  uint64_t v99 = (void *)(v989 + v3 + 48 * v2);
  uint64_t v100 = (char *)v99 + v1[14];
  *uint64_t v99 = 286;
  *(void *)uint64_t v100 = "ALSO";
  *((void *)v100 + 1) = 4;
  v100[16] = 2;
  v8();
  Swift::String v101 = (void *)(v989 + v3 + 49 * v2);
  Swift::String v102 = (char *)v101 + v1[14];
  *Swift::String v101 = 287;
  *(void *)Swift::String v102 = "ALTER";
  *((void *)v102 + 1) = 5;
  v102[16] = 2;
  v8();
  uint64_t v103 = (void *)(v989 + v3 + 50 * v2);
  uint64_t v104 = (char *)v103 + v1[14];
  *uint64_t v103 = 288;
  *(void *)uint64_t v104 = "ALWAYS";
  *((void *)v104 + 1) = 6;
  v104[16] = 2;
  v8();
  uint64_t v105 = (void *)(v989 + v3 + 51 * v2);
  uint64_t v106 = (char *)v105 + v1[14];
  *uint64_t v105 = 289;
  *(void *)uint64_t v106 = "ANALYSE";
  *((void *)v106 + 1) = 7;
  v106[16] = 2;
  v8();
  uint64_t v107 = (void *)(v989 + v3 + 52 * v2);
  uint64_t v108 = (char *)v107 + v1[14];
  *uint64_t v107 = 290;
  *(void *)uint64_t v108 = "ANALYZE";
  *((void *)v108 + 1) = 7;
  v108[16] = 2;
  v8();
  uint64_t v109 = (void *)(v989 + v3 + 53 * v2);
  uint64_t v110 = (char *)v109 + v1[14];
  *uint64_t v109 = 291;
  *(void *)uint64_t v110 = "AND";
  *((void *)v110 + 1) = 3;
  v110[16] = 2;
  v8();
  uint64_t v111 = (void *)(v989 + v3 + 54 * v2);
  uint64_t v112 = (char *)v111 + v1[14];
  *uint64_t v111 = 292;
  *(void *)uint64_t v112 = "ANY";
  *((void *)v112 + 1) = 3;
  v112[16] = 2;
  v8();
  uint64_t v113 = (void *)(v989 + v3 + 55 * v2);
  uint64_t v114 = (char *)v113 + v1[14];
  *uint64_t v113 = 293;
  *(void *)uint64_t v114 = "ARRAY";
  *((void *)v114 + 1) = 5;
  v114[16] = 2;
  v8();
  uint64_t v115 = (void *)(v989 + v3 + 56 * v2);
  uint64_t v116 = (char *)v115 + v1[14];
  *uint64_t v115 = 294;
  *(void *)uint64_t v116 = "AS";
  *((void *)v116 + 1) = 2;
  v116[16] = 2;
  v8();
  uint64_t v117 = (void *)(v989 + v3 + 57 * v2);
  uint64_t v118 = (char *)v117 + v1[14];
  *uint64_t v117 = 295;
  *(void *)uint64_t v118 = "ASC";
  *((void *)v118 + 1) = 3;
  v118[16] = 2;
  v8();
  uint64_t v119 = (void *)(v989 + v3 + 58 * v2);
  uint64_t v120 = (char *)v119 + v1[14];
  void *v119 = 296;
  *(void *)uint64_t v120 = "ASSERTION";
  *((void *)v120 + 1) = 9;
  v120[16] = 2;
  v8();
  uint64_t v121 = (void *)(v989 + v3 + 59 * v2);
  uint64_t v122 = (char *)v121 + v1[14];
  *uint64_t v121 = 297;
  *(void *)uint64_t v122 = "ASSIGNMENT";
  *((void *)v122 + 1) = 10;
  v122[16] = 2;
  v8();
  uint64_t v123 = (void *)(v989 + v3 + 60 * v2);
  unint64_t v124 = (char *)v123 + v1[14];
  *uint64_t v123 = 298;
  *(void *)unint64_t v124 = "ASYMMETRIC";
  *((void *)v124 + 1) = 10;
  v124[16] = 2;
  v8();
  uint64_t v125 = (void *)(v989 + v3 + 61 * v2);
  unint64_t v126 = (char *)v125 + v1[14];
  uint64_t *v125 = 299;
  *(void *)unint64_t v126 = "AT";
  *((void *)v126 + 1) = 2;
  v126[16] = 2;
  v8();
  unint64_t v127 = (void *)(v989 + v3 + 62 * v2);
  uint64_t v128 = (char *)v127 + v1[14];
  char *v127 = 300;
  *(void *)uint64_t v128 = "ATTACH";
  *((void *)v128 + 1) = 6;
  v128[16] = 2;
  v8();
  uint64_t v129 = (void *)(v989 + v3 + 63 * v2);
  uint64_t v130 = (char *)v129 + v1[14];
  Swift::String *v129 = 301;
  *(void *)uint64_t v130 = "ATTRIBUTE";
  *((void *)v130 + 1) = 9;
  v130[16] = 2;
  v8();
  uint64_t v131 = v989 + v3 + (v2 << 6) + v1[14];
  *(void *)(v4 + (v2 << 6)) = 302;
  *(void *)uint64_t v131 = "AUTHORIZATION";
  *(void *)(v131 + 8) = 13;
  *(unsigned char *)(v131 + 16) = 2;
  v8();
  uint64_t v132 = (void *)(v989 + v3 + 65 * v2);
  uint64_t v133 = (char *)v132 + v1[14];
  *uint64_t v132 = 303;
  *(void *)uint64_t v133 = "BACKWARD";
  *((void *)v133 + 1) = 8;
  v133[16] = 2;
  v8();
  uint64_t v134 = (void *)(v989 + v3 + 66 * v2);
  Swift::String v135 = (char *)v134 + v1[14];
  *uint64_t v134 = 304;
  *(void *)Swift::String v135 = "BEFORE";
  *((void *)v135 + 1) = 6;
  v135[16] = 2;
  v8();
  Swift::String v136 = (void *)(v989 + v3 + 67 * v2);
  Swift::String v137 = (char *)v136 + v1[14];
  *Swift::String v136 = 305;
  *(void *)Swift::String v137 = "BEGIN_P";
  *((void *)v137 + 1) = 7;
  v137[16] = 2;
  v8();
  Swift::String v138 = (void *)(v989 + v3 + 68 * v2);
  uint64_t v139 = (char *)v138 + v1[14];
  void *v138 = 306;
  *(void *)uint64_t v139 = "BETWEEN";
  *((void *)v139 + 1) = 7;
  v139[16] = 2;
  v8();
  uint64_t v140 = (void *)(v989 + v3 + 69 * v2);
  uint64_t v141 = (char *)v140 + v1[14];
  void *v140 = 307;
  *(void *)uint64_t v141 = "BIGINT";
  *((void *)v141 + 1) = 6;
  v141[16] = 2;
  v8();
  uint64_t v142 = (void *)(v989 + v3 + 70 * v2);
  char v143 = (char *)v142 + v1[14];
  *uint64_t v142 = 308;
  *(void *)char v143 = "BINARY";
  *((void *)v143 + 1) = 6;
  v143[16] = 2;
  v8();
  uint64_t v144 = (void *)(v989 + v3 + 71 * v2);
  uint64_t v145 = (char *)v144 + v1[14];
  uint64_t *v144 = 309;
  *(void *)uint64_t v145 = "BIT";
  *((void *)v145 + 1) = 3;
  v145[16] = 2;
  v8();
  uint64_t v146 = (void *)(v989 + v3 + 72 * v2);
  uint64_t v147 = (char *)v146 + v1[14];
  *uint64_t v146 = 310;
  *(void *)uint64_t v147 = "BOOLEAN_P";
  *((void *)v147 + 1) = 9;
  v147[16] = 2;
  v8();
  uint64_t v148 = (void *)(v989 + v3 + 73 * v2);
  uint64_t v149 = (char *)v148 + v1[14];
  *uint64_t v148 = 311;
  *(void *)uint64_t v149 = "BOTH";
  *((void *)v149 + 1) = 4;
  v149[16] = 2;
  v8();
  char v150 = (void *)(v989 + v3 + 74 * v2);
  uint64_t v151 = (char *)v150 + v1[14];
  *char v150 = 312;
  *(void *)uint64_t v151 = "BY";
  *((void *)v151 + 1) = 2;
  v151[16] = 2;
  v8();
  uint64_t v152 = (void *)(v989 + v3 + 75 * v2);
  uint64_t v153 = (char *)v152 + v1[14];
  *uint64_t v152 = 313;
  *(void *)uint64_t v153 = "CACHE";
  *((void *)v153 + 1) = 5;
  v153[16] = 2;
  v8();
  uint64_t v154 = (void *)(v989 + v3 + 76 * v2);
  uint64_t v155 = (char *)v154 + v1[14];
  *uint64_t v154 = 314;
  *(void *)uint64_t v155 = "CALL";
  *((void *)v155 + 1) = 4;
  v155[16] = 2;
  v8();
  uint64_t v156 = (void *)(v989 + v3 + 77 * v2);
  uint64_t v157 = (char *)v156 + v1[14];
  *uint64_t v156 = 315;
  *(void *)uint64_t v157 = "CALLED";
  *((void *)v157 + 1) = 6;
  v157[16] = 2;
  v8();
  uint64_t v158 = (void *)(v989 + v3 + 78 * v2);
  uint64_t v159 = (char *)v158 + v1[14];
  *uint64_t v158 = 316;
  *(void *)uint64_t v159 = "CASCADE";
  *((void *)v159 + 1) = 7;
  v159[16] = 2;
  v8();
  uint64_t v160 = (void *)(v989 + v3 + 79 * v2);
  uint64_t v161 = (char *)v160 + v1[14];
  *uint64_t v160 = 317;
  *(void *)uint64_t v161 = "CASCADED";
  *((void *)v161 + 1) = 8;
  v161[16] = 2;
  v8();
  uint64_t v162 = (void *)(v989 + v3 + 80 * v2);
  v163 = (char *)v162 + v1[14];
  *uint64_t v162 = 318;
  *(void *)v163 = "CASE";
  *((void *)v163 + 1) = 4;
  v163[16] = 2;
  v8();
  uint64_t v164 = (void *)(v989 + v3 + 81 * v2);
  uint64_t v165 = (char *)v164 + v1[14];
  *uint64_t v164 = 319;
  *(void *)uint64_t v165 = "CAST";
  *((void *)v165 + 1) = 4;
  v165[16] = 2;
  v8();
  uint64_t v166 = (void *)(v989 + v3 + 82 * v2);
  uint64_t v167 = (char *)v166 + v1[14];
  *uint64_t v166 = 320;
  *(void *)uint64_t v167 = "CATALOG_P";
  *((void *)v167 + 1) = 9;
  v167[16] = 2;
  v8();
  uint64_t v168 = (void *)(v989 + v3 + 83 * v2);
  uint64_t v169 = (char *)v168 + v1[14];
  *uint64_t v168 = 321;
  *(void *)uint64_t v169 = "CHAIN";
  *((void *)v169 + 1) = 5;
  v169[16] = 2;
  v8();
  v170 = (void *)(v989 + v3 + 84 * v2);
  uint64_t v171 = (char *)v170 + v1[14];
  ValueMetadata *v170 = 322;
  *(void *)uint64_t v171 = "CHAR_P";
  *((void *)v171 + 1) = 6;
  v171[16] = 2;
  v8();
  uint64_t v172 = (void *)(v989 + v3 + 85 * v2);
  uint64_t v173 = (char *)v172 + v1[14];
  *uint64_t v172 = 323;
  *(void *)uint64_t v173 = "CHARACTER";
  *((void *)v173 + 1) = 9;
  v173[16] = 2;
  v8();
  v174 = (void *)(v989 + v3 + 86 * v2);
  uint64_t v175 = (char *)v174 + v1[14];
  *v174 = 324;
  *(void *)uint64_t v175 = "CHARACTERISTICS";
  *((void *)v175 + 1) = 15;
  v175[16] = 2;
  v8();
  uint64_t v176 = (void *)(v989 + v3 + 87 * v2);
  uint64_t v177 = (char *)v176 + v1[14];
  *uint64_t v176 = 325;
  *(void *)uint64_t v177 = "CHECK";
  *((void *)v177 + 1) = 5;
  v177[16] = 2;
  v8();
  uint64_t v178 = (void *)(v989 + v3 + 88 * v2);
  uint64_t v179 = (char *)v178 + v1[14];
  *uint64_t v178 = 326;
  *(void *)uint64_t v179 = "CHECKPOINT";
  *((void *)v179 + 1) = 10;
  v179[16] = 2;
  v8();
  uint64_t v180 = (void *)(v989 + v3 + 89 * v2);
  uint64_t v181 = (char *)v180 + v1[14];
  *uint64_t v180 = 327;
  *(void *)uint64_t v181 = "CLASS";
  *((void *)v181 + 1) = 5;
  v181[16] = 2;
  v8();
  uint64_t v182 = (void *)(v989 + v3 + 90 * v2);
  uint64_t v183 = (char *)v182 + v1[14];
  *uint64_t v182 = 328;
  *(void *)uint64_t v183 = "CLOSE";
  *((void *)v183 + 1) = 5;
  v183[16] = 2;
  v8();
  char v184 = (void *)(v989 + v3 + 91 * v2);
  uint64_t v185 = (char *)v184 + v1[14];
  *char v184 = 329;
  *(void *)uint64_t v185 = "CLUSTER";
  *((void *)v185 + 1) = 7;
  v185[16] = 2;
  v8();
  uint64_t v186 = (void *)(v989 + v3 + 92 * v2);
  uint64_t v187 = (char *)v186 + v1[14];
  *uint64_t v186 = 330;
  *(void *)uint64_t v187 = "COALESCE";
  *((void *)v187 + 1) = 8;
  v187[16] = 2;
  v8();
  uint64_t v188 = (void *)(v989 + v3 + 93 * v2);
  uint64_t v189 = (char *)v188 + v1[14];
  *uint64_t v188 = 331;
  *(void *)uint64_t v189 = "COLLATE";
  *((void *)v189 + 1) = 7;
  v189[16] = 2;
  v8();
  uint64_t v190 = (void *)(v989 + v3 + 94 * v2);
  uint64_t v191 = (char *)v190 + v1[14];
  *uint64_t v190 = 332;
  *(void *)uint64_t v191 = "COLLATION";
  *((void *)v191 + 1) = 9;
  v191[16] = 2;
  v8();
  uint64_t v192 = (void *)(v989 + v3 + 95 * v2);
  uint64_t v193 = (char *)v192 + v1[14];
  *uint64_t v192 = 333;
  *(void *)uint64_t v193 = "COLUMN";
  *((void *)v193 + 1) = 6;
  v193[16] = 2;
  v8();
  uint64_t v194 = (void *)(v989 + v3 + 96 * v2);
  uint64_t v195 = (char *)v194 + v1[14];
  char *v194 = 334;
  *(void *)uint64_t v195 = "COLUMNS";
  *((void *)v195 + 1) = 7;
  v195[16] = 2;
  v8();
  uint64_t v196 = (void *)(v989 + v3 + 97 * v2);
  v197 = (char *)v196 + v1[14];
  char *v196 = 335;
  *(void *)v197 = "COMMENT";
  *((void *)v197 + 1) = 7;
  v197[16] = 2;
  v8();
  uint64_t v198 = (void *)(v989 + v3 + 98 * v2);
  uint64_t v199 = (char *)v198 + v1[14];
  *uint64_t v198 = 336;
  *(void *)uint64_t v199 = "COMMENTS";
  *((void *)v199 + 1) = 8;
  v199[16] = 2;
  v8();
  uint64_t v200 = (void *)(v989 + v3 + 99 * v2);
  uint64_t v201 = (char *)v200 + v1[14];
  *uint64_t v200 = 337;
  *(void *)uint64_t v201 = "COMMIT";
  *((void *)v201 + 1) = 6;
  v201[16] = 2;
  v8();
  uint64_t v202 = (void *)(v989 + v3 + 100 * v2);
  uint64_t v203 = (char *)v202 + v1[14];
  *uint64_t v202 = 338;
  *(void *)uint64_t v203 = "COMMITTED";
  *((void *)v203 + 1) = 9;
  v203[16] = 2;
  v8();
  uint64_t v204 = (void *)(v989 + v3 + 101 * v2);
  uint64_t v205 = (char *)v204 + v1[14];
  *uint64_t v204 = 339;
  *(void *)uint64_t v205 = "CONCURRENTLY";
  *((void *)v205 + 1) = 12;
  v205[16] = 2;
  v8();
  uint64_t v206 = (void *)(v989 + v3 + 102 * v2);
  uint64_t v207 = (char *)v206 + v1[14];
  uint64_t *v206 = 340;
  *(void *)uint64_t v207 = "CONFIGURATION";
  *((void *)v207 + 1) = 13;
  v207[16] = 2;
  v8();
  uint64_t v208 = (void *)(v989 + v3 + 103 * v2);
  long long v209 = (char *)v208 + v1[14];
  *uint64_t v208 = 341;
  *(void *)long long v209 = "CONFLICT";
  *((void *)v209 + 1) = 8;
  v209[16] = 2;
  v8();
  v210 = (void *)(v989 + v3 + 104 * v2);
  uint64_t v211 = (char *)v210 + v1[14];
  char *v210 = 342;
  *(void *)uint64_t v211 = "CONNECTION";
  *((void *)v211 + 1) = 10;
  v211[16] = 2;
  v8();
  uint64_t v212 = (void *)(v989 + v3 + 105 * v2);
  uint64_t v213 = (char *)v212 + v1[14];
  *uint64_t v212 = 343;
  *(void *)uint64_t v213 = "CONSTRAINT";
  *((void *)v213 + 1) = 10;
  v213[16] = 2;
  v8();
  uint64_t v214 = (void *)(v989 + v3 + 106 * v2);
  uint64_t v215 = (char *)v214 + v1[14];
  *uint64_t v214 = 344;
  *(void *)uint64_t v215 = "CONSTRAINTS";
  *((void *)v215 + 1) = 11;
  v215[16] = 2;
  v8();
  unint64_t v216 = (void *)(v989 + v3 + 107 * v2);
  unint64_t v217 = (char *)v216 + v1[14];
  *unint64_t v216 = 345;
  *(void *)unint64_t v217 = "CONTENT_P";
  *((void *)v217 + 1) = 9;
  v217[16] = 2;
  v8();
  v218 = (void *)(v989 + v3 + 108 * v2);
  v219 = (char *)v218 + v1[14];
  *v218 = 346;
  *(void *)v219 = "CONTINUE_P";
  *((void *)v219 + 1) = 10;
  v219[16] = 2;
  v8();
  v220 = (void *)(v989 + v3 + 109 * v2);
  v221 = (char *)v220 + v1[14];
  *v220 = 347;
  *(void *)v221 = "CONVERSION_P";
  *((void *)v221 + 1) = 12;
  v221[16] = 2;
  v8();
  v222 = (void *)(v989 + v3 + 110 * v2);
  v223 = (char *)v222 + v1[14];
  *v222 = 348;
  *(void *)v223 = "COPY";
  *((void *)v223 + 1) = 4;
  v223[16] = 2;
  v8();
  v224 = (void *)(v989 + v3 + 111 * v2);
  v225 = (char *)v224 + v1[14];
  *v224 = 349;
  *(void *)v225 = "COST";
  *((void *)v225 + 1) = 4;
  v225[16] = 2;
  v8();
  v226 = (void *)(v989 + v3 + 112 * v2);
  v227 = (char *)v226 + v1[14];
  *v226 = 350;
  *(void *)v227 = "CREATE";
  *((void *)v227 + 1) = 6;
  v227[16] = 2;
  v8();
  v228 = (void *)(v989 + v3 + 113 * v2);
  v229 = (char *)v228 + v1[14];
  *v228 = 351;
  *(void *)v229 = "CROSS";
  *((void *)v229 + 1) = 5;
  v229[16] = 2;
  v8();
  v230 = (void *)(v989 + v3 + 114 * v2);
  v231 = (char *)v230 + v1[14];
  *v230 = 352;
  *(void *)v231 = "CSV";
  *((void *)v231 + 1) = 3;
  v231[16] = 2;
  v8();
  v232 = (void *)(v989 + v3 + 115 * v2);
  v233 = (char *)v232 + v1[14];
  *v232 = 353;
  *(void *)v233 = "CUBE";
  *((void *)v233 + 1) = 4;
  v233[16] = 2;
  v8();
  v234 = (void *)(v989 + v3 + 116 * v2);
  v235 = (char *)v234 + v1[14];
  *v234 = 354;
  *(void *)v235 = "CURRENT_P";
  *((void *)v235 + 1) = 9;
  v235[16] = 2;
  v8();
  v236 = (void *)(v989 + v3 + 117 * v2);
  v237 = (char *)v236 + v1[14];
  *v236 = 355;
  *(void *)v237 = "CURRENT_CATALOG";
  *((void *)v237 + 1) = 15;
  v237[16] = 2;
  v8();
  v238 = (void *)(v989 + v3 + 118 * v2);
  v239 = (char *)v238 + v1[14];
  *v238 = 356;
  *(void *)v239 = "CURRENT_DATE";
  *((void *)v239 + 1) = 12;
  v239[16] = 2;
  v8();
  v240 = (void *)(v989 + v3 + 119 * v2);
  v241 = (char *)v240 + v1[14];
  *v240 = 357;
  *(void *)v241 = "CURRENT_ROLE";
  *((void *)v241 + 1) = 12;
  v241[16] = 2;
  v8();
  v242 = (void *)(v989 + v3 + 120 * v2);
  v243 = (char *)v242 + v1[14];
  *v242 = 358;
  *(void *)v243 = "CURRENT_SCHEMA";
  *((void *)v243 + 1) = 14;
  v243[16] = 2;
  v8();
  v244 = (void *)(v989 + v3 + 121 * v2);
  v245 = (char *)v244 + v1[14];
  *v244 = 359;
  *(void *)v245 = "CURRENT_TIME";
  *((void *)v245 + 1) = 12;
  v245[16] = 2;
  v8();
  v246 = (void *)(v989 + v3 + 122 * v2);
  v247 = (char *)v246 + v1[14];
  *v246 = 360;
  *(void *)v247 = "CURRENT_TIMESTAMP";
  *((void *)v247 + 1) = 17;
  v247[16] = 2;
  v8();
  v248 = (void *)(v989 + v3 + 123 * v2);
  v249 = (char *)v248 + v1[14];
  *v248 = 361;
  *(void *)v249 = "CURRENT_USER";
  *((void *)v249 + 1) = 12;
  v249[16] = 2;
  v8();
  v250 = (void *)(v989 + v3 + 124 * v2);
  v251 = (char *)v250 + v1[14];
  *v250 = 362;
  *(void *)v251 = "CURSOR";
  *((void *)v251 + 1) = 6;
  v251[16] = 2;
  v8();
  v252 = (void *)(v989 + v3 + 125 * v2);
  v253 = (char *)v252 + v1[14];
  *v252 = 363;
  *(void *)v253 = "CYCLE";
  *((void *)v253 + 1) = 5;
  v253[16] = 2;
  v8();
  v254 = (void *)(v989 + v3 + 126 * v2);
  v255 = (char *)v254 + v1[14];
  *v254 = 364;
  *(void *)v255 = "DATA_P";
  *((void *)v255 + 1) = 6;
  v255[16] = 2;
  v8();
  v256 = (void *)(v989 + v3 + 127 * v2);
  v257 = (char *)v256 + v1[14];
  *v256 = 365;
  *(void *)v257 = "DATABASE";
  *((void *)v257 + 1) = 8;
  v257[16] = 2;
  v8();
  v258 = v989 + v3 + (v2 << 7) + v1[14];
  *(void *)(v4 + (v2 << 7)) = 366;
  *(void *)v258 = "DAY_P";
  *(void *)(v258 + 8) = 5;
  *(unsigned char *)(v258 + 16) = 2;
  v8();
  v259 = (void *)(v989 + v3 + 129 * v2);
  v260 = (char *)v259 + v1[14];
  *v259 = 367;
  *(void *)v260 = "DEALLOCATE";
  *((void *)v260 + 1) = 10;
  v260[16] = 2;
  v8();
  v261 = (void *)(v989 + v3 + 130 * v2);
  v262 = (char *)v261 + v1[14];
  *v261 = 368;
  *(void *)v262 = "DEC";
  *((void *)v262 + 1) = 3;
  v262[16] = 2;
  v8();
  v263 = (void *)(v989 + v3 + 131 * v2);
  v264 = (char *)v263 + v1[14];
  *v263 = 369;
  *(void *)v264 = "DECIMAL_P";
  *((void *)v264 + 1) = 9;
  v264[16] = 2;
  v8();
  v265 = (void *)(v989 + v3 + 132 * v2);
  v266 = (char *)v265 + v1[14];
  *v265 = 370;
  *(void *)v266 = "DECLARE";
  *((void *)v266 + 1) = 7;
  v266[16] = 2;
  v8();
  v267 = (void *)(v989 + v3 + 133 * v2);
  v268 = (char *)v267 + v1[14];
  *v267 = 371;
  *(void *)v268 = "DEFAULT";
  *((void *)v268 + 1) = 7;
  v268[16] = 2;
  v8();
  v269 = (void *)(v989 + v3 + 134 * v2);
  v270 = (char *)v269 + v1[14];
  *v269 = 372;
  *(void *)v270 = "DEFAULTS";
  *((void *)v270 + 1) = 8;
  v270[16] = 2;
  v8();
  v271 = (void *)(v989 + v3 + 135 * v2);
  v272 = (char *)v271 + v1[14];
  *v271 = 373;
  *(void *)v272 = "DEFERRABLE";
  *((void *)v272 + 1) = 10;
  v272[16] = 2;
  v8();
  v273 = (void *)(v989 + v3 + 136 * v2);
  v274 = (char *)v273 + v1[14];
  *v273 = 374;
  *(void *)v274 = "DEFERRED";
  *((void *)v274 + 1) = 8;
  v274[16] = 2;
  v8();
  v275 = (void *)(v989 + v3 + 137 * v2);
  v276 = (char *)v275 + v1[14];
  *v275 = 375;
  *(void *)v276 = "DEFINER";
  *((void *)v276 + 1) = 7;
  v276[16] = 2;
  v8();
  v277 = (void *)(v989 + v3 + 138 * v2);
  v278 = (char *)v277 + v1[14];
  *v277 = 376;
  *(void *)v278 = "DELETE_P";
  *((void *)v278 + 1) = 8;
  v278[16] = 2;
  v8();
  v279 = (void *)(v989 + v3 + 139 * v2);
  v280 = (char *)v279 + v1[14];
  *v279 = 377;
  *(void *)v280 = "DELIMITER";
  *((void *)v280 + 1) = 9;
  v280[16] = 2;
  v8();
  v281 = (void *)(v989 + v3 + 140 * v2);
  v282 = (char *)v281 + v1[14];
  *v281 = 378;
  *(void *)v282 = "DELIMITERS";
  *((void *)v282 + 1) = 10;
  v282[16] = 2;
  v8();
  v283 = (void *)(v989 + v3 + 141 * v2);
  v284 = (char *)v283 + v1[14];
  *v283 = 379;
  *(void *)v284 = "DEPENDS";
  *((void *)v284 + 1) = 7;
  v284[16] = 2;
  v8();
  v285 = (void *)(v989 + v3 + 142 * v2);
  v286 = (char *)v285 + v1[14];
  *v285 = 380;
  *(void *)v286 = "DESC";
  *((void *)v286 + 1) = 4;
  v286[16] = 2;
  v8();
  v287 = (void *)(v989 + v3 + 143 * v2);
  v288 = (char *)v287 + v1[14];
  *v287 = 381;
  *(void *)v288 = "DETACH";
  *((void *)v288 + 1) = 6;
  v288[16] = 2;
  v8();
  v289 = (void *)(v989 + v3 + 144 * v2);
  v290 = (char *)v289 + v1[14];
  *v289 = 382;
  *(void *)v290 = "DICTIONARY";
  *((void *)v290 + 1) = 10;
  v290[16] = 2;
  v8();
  v291 = (void *)(v989 + v3 + 145 * v2);
  v292 = (char *)v291 + v1[14];
  *v291 = 383;
  *(void *)v292 = "DISABLE_P";
  *((void *)v292 + 1) = 9;
  v292[16] = 2;
  v8();
  v293 = (void *)(v989 + v3 + 146 * v2);
  v294 = (char *)v293 + v1[14];
  *v293 = 384;
  *(void *)v294 = "DISCARD";
  *((void *)v294 + 1) = 7;
  v294[16] = 2;
  v8();
  v295 = (void *)(v989 + v3 + 147 * v2);
  v296 = (char *)v295 + v1[14];
  *v295 = 385;
  *(void *)v296 = "DISTINCT";
  *((void *)v296 + 1) = 8;
  v296[16] = 2;
  v8();
  v297 = (void *)(v989 + v3 + 148 * v2);
  v298 = (char *)v297 + v1[14];
  *v297 = 386;
  *(void *)v298 = "DO";
  *((void *)v298 + 1) = 2;
  v298[16] = 2;
  v8();
  v299 = (void *)(v989 + v3 + 149 * v2);
  v300 = (char *)v299 + v1[14];
  *v299 = 387;
  *(void *)v300 = "DOCUMENT_P";
  *((void *)v300 + 1) = 10;
  v300[16] = 2;
  v8();
  v301 = (void *)(v989 + v3 + 150 * v2);
  v302 = (char *)v301 + v1[14];
  *v301 = 388;
  *(void *)v302 = "DOMAIN_P";
  *((void *)v302 + 1) = 8;
  v302[16] = 2;
  v8();
  v303 = (void *)(v989 + v3 + 151 * v2);
  v304 = (char *)v303 + v1[14];
  *v303 = 389;
  *(void *)v304 = "DOUBLE_P";
  *((void *)v304 + 1) = 8;
  v304[16] = 2;
  v8();
  v305 = (void *)(v989 + v3 + 152 * v2);
  v306 = (char *)v305 + v1[14];
  *v305 = 390;
  *(void *)v306 = "DROP";
  *((void *)v306 + 1) = 4;
  v306[16] = 2;
  v8();
  v307 = (void *)(v989 + v3 + 153 * v2);
  v308 = (char *)v307 + v1[14];
  *v307 = 391;
  *(void *)v308 = "EACH";
  *((void *)v308 + 1) = 4;
  v308[16] = 2;
  v8();
  v309 = (void *)(v989 + v3 + 154 * v2);
  v310 = (char *)v309 + v1[14];
  *v309 = 392;
  *(void *)v310 = "ELSE";
  *((void *)v310 + 1) = 4;
  v310[16] = 2;
  v8();
  v311 = (void *)(v989 + v3 + 155 * v2);
  v312 = (char *)v311 + v1[14];
  *v311 = 393;
  *(void *)v312 = "ENABLE_P";
  *((void *)v312 + 1) = 8;
  v312[16] = 2;
  v8();
  v313 = (void *)(v989 + v3 + 156 * v2);
  v314 = (char *)v313 + v1[14];
  *v313 = 394;
  *(void *)v314 = "ENCODING";
  *((void *)v314 + 1) = 8;
  v314[16] = 2;
  v8();
  v315 = (void *)(v989 + v3 + 157 * v2);
  v316 = (char *)v315 + v1[14];
  *v315 = 395;
  *(void *)v316 = "ENCRYPTED";
  *((void *)v316 + 1) = 9;
  v316[16] = 2;
  v8();
  v317 = (void *)(v989 + v3 + 158 * v2);
  v318 = (char *)v317 + v1[14];
  *v317 = 396;
  *(void *)v318 = "END_P";
  *((void *)v318 + 1) = 5;
  v318[16] = 2;
  v8();
  v319 = (void *)(v989 + v3 + 159 * v2);
  v320 = (char *)v319 + v1[14];
  *v319 = 397;
  *(void *)v320 = "ENUM_P";
  *((void *)v320 + 1) = 6;
  v320[16] = 2;
  v8();
  v321 = (void *)(v989 + v3 + 160 * v2);
  v322 = (char *)v321 + v1[14];
  *v321 = 398;
  *(void *)v322 = "ESCAPE";
  *((void *)v322 + 1) = 6;
  v322[16] = 2;
  v8();
  v323 = (void *)(v989 + v3 + 161 * v2);
  v324 = (char *)v323 + v1[14];
  *v323 = 399;
  *(void *)v324 = "EVENT";
  *((void *)v324 + 1) = 5;
  v324[16] = 2;
  v8();
  v325 = (void *)(v989 + v3 + 162 * v2);
  v326 = (char *)v325 + v1[14];
  *v325 = 400;
  *(void *)v326 = "EXCEPT";
  *((void *)v326 + 1) = 6;
  v326[16] = 2;
  v8();
  v327 = (void *)(v989 + v3 + 163 * v2);
  v328 = (char *)v327 + v1[14];
  *v327 = 401;
  *(void *)v328 = "EXCLUDE";
  *((void *)v328 + 1) = 7;
  v328[16] = 2;
  v8();
  v329 = (void *)(v989 + v3 + 164 * v2);
  v330 = (char *)v329 + v1[14];
  *v329 = 402;
  *(void *)v330 = "EXCLUDING";
  *((void *)v330 + 1) = 9;
  v330[16] = 2;
  v8();
  v331 = (void *)(v989 + v3 + 165 * v2);
  v332 = (char *)v331 + v1[14];
  *v331 = 403;
  *(void *)v332 = "EXCLUSIVE";
  *((void *)v332 + 1) = 9;
  v332[16] = 2;
  v8();
  v333 = (void *)(v989 + v3 + 166 * v2);
  v334 = (char *)v333 + v1[14];
  *v333 = 404;
  *(void *)v334 = "EXECUTE";
  *((void *)v334 + 1) = 7;
  v334[16] = 2;
  v8();
  v335 = (void *)(v989 + v3 + 167 * v2);
  v336 = (char *)v335 + v1[14];
  *v335 = 405;
  *(void *)v336 = "EXISTS";
  *((void *)v336 + 1) = 6;
  v336[16] = 2;
  v8();
  v337 = (void *)(v989 + v3 + 168 * v2);
  v338 = (char *)v337 + v1[14];
  *v337 = 406;
  *(void *)v338 = "EXPLAIN";
  *((void *)v338 + 1) = 7;
  v338[16] = 2;
  v8();
  v339 = (void *)(v989 + v3 + 169 * v2);
  v340 = (char *)v339 + v1[14];
  *v339 = 407;
  *(void *)v340 = "EXPRESSION";
  *((void *)v340 + 1) = 10;
  v340[16] = 2;
  v8();
  v341 = (void *)(v989 + v3 + 170 * v2);
  v342 = (char *)v341 + v1[14];
  *v341 = 408;
  *(void *)v342 = "EXTENSION";
  *((void *)v342 + 1) = 9;
  v342[16] = 2;
  v8();
  v343 = (void *)(v989 + v3 + 171 * v2);
  v344 = (char *)v343 + v1[14];
  *v343 = 409;
  *(void *)v344 = "EXTERNAL";
  *((void *)v344 + 1) = 8;
  v344[16] = 2;
  v8();
  v345 = (void *)(v989 + v3 + 172 * v2);
  v346 = (char *)v345 + v1[14];
  *v345 = 410;
  *(void *)v346 = "EXTRACT";
  *((void *)v346 + 1) = 7;
  v346[16] = 2;
  v8();
  v347 = (void *)(v989 + v3 + 173 * v2);
  v348 = (char *)v347 + v1[14];
  *v347 = 411;
  *(void *)v348 = "FALSE_P";
  *((void *)v348 + 1) = 7;
  v348[16] = 2;
  v8();
  v349 = (void *)(v989 + v3 + 174 * v2);
  v350 = (char *)v349 + v1[14];
  *v349 = 412;
  *(void *)v350 = "FAMILY";
  *((void *)v350 + 1) = 6;
  v350[16] = 2;
  v8();
  v351 = (void *)(v989 + v3 + 175 * v2);
  v352 = (char *)v351 + v1[14];
  *v351 = 413;
  *(void *)v352 = "FETCH";
  *((void *)v352 + 1) = 5;
  v352[16] = 2;
  v8();
  v353 = (void *)(v989 + v3 + 176 * v2);
  v354 = (char *)v353 + v1[14];
  *v353 = 414;
  *(void *)v354 = "FILTER";
  *((void *)v354 + 1) = 6;
  v354[16] = 2;
  v8();
  v355 = (void *)(v989 + v3 + 177 * v2);
  v356 = (char *)v355 + v1[14];
  *v355 = 415;
  *(void *)v356 = "FIRST_P";
  *((void *)v356 + 1) = 7;
  v356[16] = 2;
  v8();
  v357 = (void *)(v989 + v3 + 178 * v2);
  v358 = (char *)v357 + v1[14];
  *v357 = 416;
  *(void *)v358 = "FLOAT_P";
  *((void *)v358 + 1) = 7;
  v358[16] = 2;
  v8();
  v359 = (void *)(v989 + v3 + 179 * v2);
  v360 = (char *)v359 + v1[14];
  *v359 = 417;
  *(void *)v360 = "FOLLOWING";
  *((void *)v360 + 1) = 9;
  v360[16] = 2;
  v8();
  v361 = (void *)(v989 + v3 + 180 * v2);
  v362 = (char *)v361 + v1[14];
  *v361 = 418;
  *(void *)v362 = "FOR";
  *((void *)v362 + 1) = 3;
  v362[16] = 2;
  v8();
  v363 = (void *)(v989 + v3 + 181 * v2);
  v364 = (char *)v363 + v1[14];
  *v363 = 419;
  *(void *)v364 = "FORCE";
  *((void *)v364 + 1) = 5;
  v364[16] = 2;
  v8();
  v365 = (void *)(v989 + v3 + 182 * v2);
  v366 = (char *)v365 + v1[14];
  *v365 = 420;
  *(void *)v366 = "FOREIGN";
  *((void *)v366 + 1) = 7;
  v366[16] = 2;
  v8();
  v367 = (void *)(v989 + v3 + 183 * v2);
  v368 = (char *)v367 + v1[14];
  *v367 = 421;
  *(void *)v368 = "FORWARD";
  *((void *)v368 + 1) = 7;
  v368[16] = 2;
  v8();
  v369 = (void *)(v989 + v3 + 184 * v2);
  v370 = (char *)v369 + v1[14];
  *v369 = 422;
  *(void *)v370 = "FREEZE";
  *((void *)v370 + 1) = 6;
  v370[16] = 2;
  v8();
  v371 = (void *)(v989 + v3 + 185 * v2);
  v372 = (char *)v371 + v1[14];
  *v371 = 423;
  *(void *)v372 = "FROM";
  *((void *)v372 + 1) = 4;
  v372[16] = 2;
  v8();
  v373 = (void *)(v989 + v3 + 186 * v2);
  v374 = (char *)v373 + v1[14];
  *v373 = 424;
  *(void *)v374 = "FULL";
  *((void *)v374 + 1) = 4;
  v374[16] = 2;
  v8();
  v375 = (void *)(v989 + v3 + 187 * v2);
  v376 = (char *)v375 + v1[14];
  *v375 = 425;
  *(void *)v376 = "FUNCTION";
  *((void *)v376 + 1) = 8;
  v376[16] = 2;
  v8();
  v377 = (void *)(v989 + v3 + 188 * v2);
  v378 = (char *)v377 + v1[14];
  *v377 = 426;
  *(void *)v378 = "FUNCTIONS";
  *((void *)v378 + 1) = 9;
  v378[16] = 2;
  v8();
  v379 = (void *)(v989 + v3 + 189 * v2);
  v380 = (char *)v379 + v1[14];
  *v379 = 427;
  *(void *)v380 = "GENERATED";
  *((void *)v380 + 1) = 9;
  v380[16] = 2;
  v8();
  v381 = (void *)(v989 + v3 + 190 * v2);
  v382 = (char *)v381 + v1[14];
  *v381 = 428;
  *(void *)v382 = "GLOBAL";
  *((void *)v382 + 1) = 6;
  v382[16] = 2;
  v8();
  v383 = (void *)(v989 + v3 + 191 * v2);
  v384 = (char *)v383 + v1[14];
  *v383 = 429;
  *(void *)v384 = "GRANT";
  *((void *)v384 + 1) = 5;
  v384[16] = 2;
  v8();
  v385 = (void *)(v989 + v3 + 192 * v2);
  v386 = (char *)v385 + v1[14];
  *v385 = 430;
  *(void *)v386 = "GRANTED";
  *((void *)v386 + 1) = 7;
  v386[16] = 2;
  v8();
  v387 = (void *)(v989 + v3 + 193 * v2);
  v388 = (char *)v387 + v1[14];
  *v387 = 431;
  *(void *)v388 = "GREATEST";
  *((void *)v388 + 1) = 8;
  v388[16] = 2;
  v8();
  v389 = (void *)(v989 + v3 + 194 * v2);
  v390 = (char *)v389 + v1[14];
  *v389 = 432;
  *(void *)v390 = "GROUP_P";
  *((void *)v390 + 1) = 7;
  v390[16] = 2;
  v8();
  v391 = (void *)(v989 + v3 + 195 * v2);
  v392 = (char *)v391 + v1[14];
  *v391 = 433;
  *(void *)v392 = "GROUPING";
  *((void *)v392 + 1) = 8;
  v392[16] = 2;
  v8();
  v393 = (void *)(v989 + v3 + 196 * v2);
  v394 = (char *)v393 + v1[14];
  *v393 = 434;
  *(void *)v394 = "GROUPS";
  *((void *)v394 + 1) = 6;
  v394[16] = 2;
  v8();
  v395 = (void *)(v989 + v3 + 197 * v2);
  v396 = (char *)v395 + v1[14];
  *v395 = 435;
  *(void *)v396 = "HANDLER";
  *((void *)v396 + 1) = 7;
  v396[16] = 2;
  v8();
  v397 = (void *)(v989 + v3 + 198 * v2);
  v398 = (char *)v397 + v1[14];
  *v397 = 436;
  *(void *)v398 = "HAVING";
  *((void *)v398 + 1) = 6;
  v398[16] = 2;
  v8();
  v399 = (void *)(v989 + v3 + 199 * v2);
  v400 = (char *)v399 + v1[14];
  *v399 = 437;
  *(void *)v400 = "HEADER_P";
  *((void *)v400 + 1) = 8;
  v400[16] = 2;
  v8();
  v401 = (void *)(v989 + v3 + 200 * v2);
  v402 = (char *)v401 + v1[14];
  *v401 = 438;
  *(void *)v402 = "HOLD";
  *((void *)v402 + 1) = 4;
  v402[16] = 2;
  v8();
  v403 = (void *)(v989 + v3 + 201 * v2);
  v404 = (char *)v403 + v1[14];
  *v403 = 439;
  *(void *)v404 = "HOUR_P";
  *((void *)v404 + 1) = 6;
  v404[16] = 2;
  v8();
  v405 = (void *)(v989 + v3 + 202 * v2);
  v406 = (char *)v405 + v1[14];
  *v405 = 440;
  *(void *)v406 = "IDENTITY_P";
  *((void *)v406 + 1) = 10;
  v406[16] = 2;
  v8();
  v407 = (void *)(v989 + v3 + 203 * v2);
  v408 = (char *)v407 + v1[14];
  *v407 = 441;
  *(void *)v408 = "IF_P";
  *((void *)v408 + 1) = 4;
  v408[16] = 2;
  v8();
  v409 = (void *)(v989 + v3 + 204 * v2);
  v410 = (char *)v409 + v1[14];
  *v409 = 442;
  *(void *)v410 = "ILIKE";
  *((void *)v410 + 1) = 5;
  v410[16] = 2;
  v8();
  v411 = (void *)(v989 + v3 + 205 * v2);
  v412 = (char *)v411 + v1[14];
  *v411 = 443;
  *(void *)v412 = "IMMEDIATE";
  *((void *)v412 + 1) = 9;
  v412[16] = 2;
  v8();
  v413 = (void *)(v989 + v3 + 206 * v2);
  v414 = (char *)v413 + v1[14];
  *v413 = 444;
  *(void *)v414 = "IMMUTABLE";
  *((void *)v414 + 1) = 9;
  v414[16] = 2;
  v8();
  v415 = (void *)(v989 + v3 + 207 * v2);
  v416 = (char *)v415 + v1[14];
  *v415 = 445;
  *(void *)v416 = "IMPLICIT_P";
  *((void *)v416 + 1) = 10;
  v416[16] = 2;
  v8();
  v417 = (void *)(v989 + v3 + 208 * v2);
  v418 = (char *)v417 + v1[14];
  *v417 = 446;
  *(void *)v418 = "IMPORT_P";
  *((void *)v418 + 1) = 8;
  v418[16] = 2;
  v8();
  v419 = (void *)(v989 + v3 + 209 * v2);
  v420 = (char *)v419 + v1[14];
  *v419 = 447;
  *(void *)v420 = "IN_P";
  *((void *)v420 + 1) = 4;
  v420[16] = 2;
  v8();
  v421 = (void *)(v989 + v3 + 210 * v2);
  v422 = (char *)v421 + v1[14];
  *v421 = 448;
  *(void *)v422 = "INCLUDE";
  *((void *)v422 + 1) = 7;
  v422[16] = 2;
  v8();
  v423 = (void *)(v989 + v3 + 211 * v2);
  v424 = (char *)v423 + v1[14];
  *v423 = 449;
  *(void *)v424 = "INCLUDING";
  *((void *)v424 + 1) = 9;
  v424[16] = 2;
  v8();
  v425 = (void *)(v989 + v3 + 212 * v2);
  v426 = (char *)v425 + v1[14];
  *v425 = 450;
  *(void *)v426 = "INCREMENT";
  *((void *)v426 + 1) = 9;
  v426[16] = 2;
  v8();
  v427 = (void *)(v989 + v3 + 213 * v2);
  v428 = (char *)v427 + v1[14];
  *v427 = 451;
  *(void *)v428 = "INDEX";
  *((void *)v428 + 1) = 5;
  v428[16] = 2;
  v8();
  v429 = (void *)(v989 + v3 + 214 * v2);
  v430 = (char *)v429 + v1[14];
  *v429 = 452;
  *(void *)v430 = "INDEXES";
  *((void *)v430 + 1) = 7;
  v430[16] = 2;
  v8();
  v431 = (void *)(v989 + v3 + 215 * v2);
  v432 = (char *)v431 + v1[14];
  *v431 = 453;
  *(void *)v432 = "INHERIT";
  *((void *)v432 + 1) = 7;
  v432[16] = 2;
  v8();
  v433 = (void *)(v989 + v3 + 216 * v2);
  v434 = (char *)v433 + v1[14];
  *v433 = 454;
  *(void *)v434 = "INHERITS";
  *((void *)v434 + 1) = 8;
  v434[16] = 2;
  v8();
  v435 = (void *)(v989 + v3 + 217 * v2);
  v436 = (char *)v435 + v1[14];
  *v435 = 455;
  *(void *)v436 = "INITIALLY";
  *((void *)v436 + 1) = 9;
  v436[16] = 2;
  v8();
  v437 = (void *)(v989 + v3 + 218 * v2);
  v438 = (char *)v437 + v1[14];
  *v437 = 456;
  *(void *)v438 = "INLINE_P";
  *((void *)v438 + 1) = 8;
  v438[16] = 2;
  v8();
  v439 = (void *)(v989 + v3 + 219 * v2);
  v440 = (char *)v439 + v1[14];
  *v439 = 457;
  *(void *)v440 = "INNER_P";
  *((void *)v440 + 1) = 7;
  v440[16] = 2;
  v8();
  v441 = (void *)(v989 + v3 + 220 * v2);
  v442 = (char *)v441 + v1[14];
  *v441 = 458;
  *(void *)v442 = "INOUT";
  *((void *)v442 + 1) = 5;
  v442[16] = 2;
  v8();
  v443 = (void *)(v989 + v3 + 221 * v2);
  v444 = (char *)v443 + v1[14];
  *v443 = 459;
  *(void *)v444 = "INPUT_P";
  *((void *)v444 + 1) = 7;
  v444[16] = 2;
  v8();
  v445 = (void *)(v989 + v3 + 222 * v2);
  v446 = (char *)v445 + v1[14];
  *v445 = 460;
  *(void *)v446 = "INSENSITIVE";
  *((void *)v446 + 1) = 11;
  v446[16] = 2;
  v8();
  v447 = (void *)(v989 + v3 + 223 * v2);
  v448 = (char *)v447 + v1[14];
  *v447 = 461;
  *(void *)v448 = "INSERT";
  *((void *)v448 + 1) = 6;
  v448[16] = 2;
  v8();
  v449 = (void *)(v989 + v3 + 224 * v2);
  v450 = (char *)v449 + v1[14];
  *v449 = 462;
  *(void *)v450 = "INSTEAD";
  *((void *)v450 + 1) = 7;
  v450[16] = 2;
  v8();
  v451 = (void *)(v989 + v3 + 225 * v2);
  v452 = (char *)v451 + v1[14];
  *v451 = 463;
  *(void *)v452 = "INT_P";
  *((void *)v452 + 1) = 5;
  v452[16] = 2;
  v8();
  v453 = (void *)(v989 + v3 + 226 * v2);
  v454 = (char *)v453 + v1[14];
  *v453 = 464;
  *(void *)v454 = "INTEGER";
  *((void *)v454 + 1) = 7;
  v454[16] = 2;
  v8();
  v455 = (void *)(v989 + v3 + 227 * v2);
  v456 = (char *)v455 + v1[14];
  *v455 = 465;
  *(void *)v456 = "INTERSECT";
  *((void *)v456 + 1) = 9;
  v456[16] = 2;
  v8();
  v457 = (void *)(v989 + v3 + 228 * v2);
  v458 = (char *)v457 + v1[14];
  *v457 = 466;
  *(void *)v458 = "INTERVAL";
  *((void *)v458 + 1) = 8;
  v458[16] = 2;
  v8();
  v459 = (void *)(v989 + v3 + 229 * v2);
  v460 = (char *)v459 + v1[14];
  *v459 = 467;
  *(void *)v460 = "INTO";
  *((void *)v460 + 1) = 4;
  v460[16] = 2;
  v8();
  v461 = (void *)(v989 + v3 + 230 * v2);
  v462 = (char *)v461 + v1[14];
  *v461 = 468;
  *(void *)v462 = "INVOKER";
  *((void *)v462 + 1) = 7;
  v462[16] = 2;
  v8();
  v463 = (void *)(v989 + v3 + 231 * v2);
  v464 = (char *)v463 + v1[14];
  *v463 = 469;
  *(void *)v464 = "IS";
  *((void *)v464 + 1) = 2;
  v464[16] = 2;
  v8();
  v465 = (void *)(v989 + v3 + 232 * v2);
  v466 = (char *)v465 + v1[14];
  *v465 = 470;
  *(void *)v466 = "ISNULL";
  *((void *)v466 + 1) = 6;
  v466[16] = 2;
  v8();
  v467 = (void *)(v989 + v3 + 233 * v2);
  v468 = (char *)v467 + v1[14];
  *v467 = 471;
  *(void *)v468 = "ISOLATION";
  *((void *)v468 + 1) = 9;
  v468[16] = 2;
  v8();
  v469 = (void *)(v989 + v3 + 234 * v2);
  v470 = (char *)v469 + v1[14];
  *v469 = 472;
  *(void *)v470 = "JOIN";
  *((void *)v470 + 1) = 4;
  v470[16] = 2;
  v8();
  v471 = (void *)(v989 + v3 + 235 * v2);
  v472 = (char *)v471 + v1[14];
  *v471 = 473;
  *(void *)v472 = "KEY";
  *((void *)v472 + 1) = 3;
  v472[16] = 2;
  v8();
  v473 = (void *)(v989 + v3 + 236 * v2);
  v474 = (char *)v473 + v1[14];
  *v473 = 474;
  *(void *)v474 = "LABEL";
  *((void *)v474 + 1) = 5;
  v474[16] = 2;
  v8();
  v475 = (void *)(v989 + v3 + 237 * v2);
  v476 = (char *)v475 + v1[14];
  *v475 = 475;
  *(void *)v476 = "LANGUAGE";
  *((void *)v476 + 1) = 8;
  v476[16] = 2;
  v8();
  v477 = (void *)(v989 + v3 + 238 * v2);
  v478 = (char *)v477 + v1[14];
  *v477 = 476;
  *(void *)v478 = "LARGE_P";
  *((void *)v478 + 1) = 7;
  v478[16] = 2;
  v8();
  v479 = (void *)(v989 + v3 + 239 * v2);
  v480 = (char *)v479 + v1[14];
  *v479 = 477;
  *(void *)v480 = "LAST_P";
  *((void *)v480 + 1) = 6;
  v480[16] = 2;
  v8();
  v481 = (void *)(v989 + v3 + 240 * v2);
  v482 = (char *)v481 + v1[14];
  *v481 = 478;
  *(void *)v482 = "LATERAL_P";
  *((void *)v482 + 1) = 9;
  v482[16] = 2;
  v8();
  v483 = (void *)(v989 + v3 + 241 * v2);
  v484 = (char *)v483 + v1[14];
  *v483 = 479;
  *(void *)v484 = "LEADING";
  *((void *)v484 + 1) = 7;
  v484[16] = 2;
  v8();
  v485 = (void *)(v989 + v3 + 242 * v2);
  v486 = (char *)v485 + v1[14];
  *v485 = 480;
  *(void *)v486 = "LEAKPROOF";
  *((void *)v486 + 1) = 9;
  v486[16] = 2;
  v8();
  v487 = (void *)(v989 + v3 + 243 * v2);
  v488 = (char *)v487 + v1[14];
  *v487 = 481;
  *(void *)v488 = "LEAST";
  *((void *)v488 + 1) = 5;
  v488[16] = 2;
  v8();
  v489 = (void *)(v989 + v3 + 244 * v2);
  v490 = (char *)v489 + v1[14];
  *v489 = 482;
  *(void *)v490 = "LEFT";
  *((void *)v490 + 1) = 4;
  v490[16] = 2;
  v8();
  v491 = (void *)(v989 + v3 + 245 * v2);
  v492 = (char *)v491 + v1[14];
  *v491 = 483;
  *(void *)v492 = "LEVEL";
  *((void *)v492 + 1) = 5;
  v492[16] = 2;
  v8();
  v493 = (void *)(v989 + v3 + 246 * v2);
  v494 = (char *)v493 + v1[14];
  *v493 = 484;
  *(void *)v494 = "LIKE";
  *((void *)v494 + 1) = 4;
  v494[16] = 2;
  v8();
  v495 = (void *)(v989 + v3 + 247 * v2);
  v496 = (char *)v495 + v1[14];
  *v495 = 485;
  *(void *)v496 = "LIMIT";
  *((void *)v496 + 1) = 5;
  v496[16] = 2;
  v8();
  v497 = (void *)(v989 + v3 + 248 * v2);
  v498 = (char *)v497 + v1[14];
  *v497 = 486;
  *(void *)v498 = "LISTEN";
  *((void *)v498 + 1) = 6;
  v498[16] = 2;
  v8();
  v499 = (void *)(v989 + v3 + 249 * v2);
  v500 = (char *)v499 + v1[14];
  *v499 = 487;
  *(void *)v500 = "LOAD";
  *((void *)v500 + 1) = 4;
  v500[16] = 2;
  v8();
  v501 = (void *)(v989 + v3 + 250 * v2);
  v502 = (char *)v501 + v1[14];
  *v501 = 488;
  *(void *)v502 = "LOCAL";
  *((void *)v502 + 1) = 5;
  v502[16] = 2;
  v8();
  v503 = (void *)(v989 + v3 + 251 * v2);
  v504 = (char *)v503 + v1[14];
  *v503 = 489;
  *(void *)v504 = "LOCALTIME";
  *((void *)v504 + 1) = 9;
  v504[16] = 2;
  v8();
  v505 = (void *)(v989 + v3 + 252 * v2);
  v506 = (char *)v505 + v1[14];
  *v505 = 490;
  *(void *)v506 = "LOCALTIMESTAMP";
  *((void *)v506 + 1) = 14;
  v506[16] = 2;
  v8();
  v507 = (void *)(v989 + v3 + 253 * v2);
  v508 = (char *)v507 + v1[14];
  *v507 = 491;
  *(void *)v508 = "LOCATION";
  *((void *)v508 + 1) = 8;
  v508[16] = 2;
  v8();
  v509 = (void *)(v989 + v3 + 254 * v2);
  v510 = (char *)v509 + v1[14];
  *v509 = 492;
  *(void *)v510 = "LOCK_P";
  *((void *)v510 + 1) = 6;
  v510[16] = 2;
  v8();
  v511 = (void *)(v989 + v3 + 255 * v2);
  v512 = (char *)v511 + v1[14];
  *v511 = 493;
  *(void *)v512 = "LOCKED";
  *((void *)v512 + 1) = 6;
  v512[16] = 2;
  v8();
  v513 = v989 + v3 + (v2 << 8) + v1[14];
  *(void *)(v4 + (v2 << 8)) = 494;
  *(void *)v513 = "LOGGED";
  *(void *)(v513 + 8) = 6;
  *(unsigned char *)(v513 + 16) = 2;
  v8();
  v514 = (void *)(v989 + v3 + 257 * v2);
  v515 = (char *)v514 + v1[14];
  *v514 = 495;
  *(void *)v515 = "MAPPING";
  *((void *)v515 + 1) = 7;
  v515[16] = 2;
  v8();
  v516 = (void *)(v989 + v3 + 258 * v2);
  v517 = (char *)v516 + v1[14];
  *v516 = 496;
  *(void *)v517 = "MATCH";
  *((void *)v517 + 1) = 5;
  v517[16] = 2;
  v8();
  v518 = (void *)(v989 + v3 + 259 * v2);
  v519 = (char *)v518 + v1[14];
  *v518 = 497;
  *(void *)v519 = "MATERIALIZED";
  *((void *)v519 + 1) = 12;
  v519[16] = 2;
  v8();
  v520 = (void *)(v989 + v3 + 260 * v2);
  v521 = (char *)v520 + v1[14];
  *v520 = 498;
  *(void *)v521 = "MAXVALUE";
  *((void *)v521 + 1) = 8;
  v521[16] = 2;
  v8();
  v522 = (void *)(v989 + v3 + 261 * v2);
  v523 = (char *)v522 + v1[14];
  *v522 = 499;
  *(void *)v523 = "METHOD";
  *((void *)v523 + 1) = 6;
  v523[16] = 2;
  v8();
  v524 = (void *)(v989 + v3 + 262 * v2);
  v525 = (char *)v524 + v1[14];
  *v524 = 500;
  *(void *)v525 = "MINUTE_P";
  *((void *)v525 + 1) = 8;
  v525[16] = 2;
  v8();
  v526 = (void *)(v989 + v3 + 263 * v2);
  v527 = (char *)v526 + v1[14];
  *v526 = 501;
  *(void *)v527 = "MINVALUE";
  *((void *)v527 + 1) = 8;
  v527[16] = 2;
  v8();
  v528 = (void *)(v989 + v3 + 264 * v2);
  v529 = (char *)v528 + v1[14];
  *v528 = 502;
  *(void *)v529 = "MODE";
  *((void *)v529 + 1) = 4;
  v529[16] = 2;
  v8();
  v530 = (void *)(v989 + v3 + 265 * v2);
  v531 = (char *)v530 + v1[14];
  *v530 = 503;
  *(void *)v531 = "MONTH_P";
  *((void *)v531 + 1) = 7;
  v531[16] = 2;
  v8();
  v532 = (void *)(v989 + v3 + 266 * v2);
  v533 = (char *)v532 + v1[14];
  *v532 = 504;
  *(void *)v533 = "MOVE";
  *((void *)v533 + 1) = 4;
  v533[16] = 2;
  v8();
  v534 = (void *)(v989 + v3 + 267 * v2);
  v535 = (char *)v534 + v1[14];
  *v534 = 505;
  *(void *)v535 = "NAME_P";
  *((void *)v535 + 1) = 6;
  v535[16] = 2;
  v8();
  v536 = (void *)(v989 + v3 + 268 * v2);
  v537 = (char *)v536 + v1[14];
  *v536 = 506;
  *(void *)v537 = "NAMES";
  *((void *)v537 + 1) = 5;
  v537[16] = 2;
  v8();
  v538 = (void *)(v989 + v3 + 269 * v2);
  v539 = (char *)v538 + v1[14];
  *v538 = 507;
  *(void *)v539 = "NATIONAL";
  *((void *)v539 + 1) = 8;
  v539[16] = 2;
  v8();
  v540 = (void *)(v989 + v3 + 270 * v2);
  v541 = (char *)v540 + v1[14];
  *v540 = 508;
  *(void *)v541 = "NATURAL";
  *((void *)v541 + 1) = 7;
  v541[16] = 2;
  v8();
  v542 = (void *)(v989 + v3 + 271 * v2);
  v543 = (char *)v542 + v1[14];
  *v542 = 509;
  *(void *)v543 = "NCHAR";
  *((void *)v543 + 1) = 5;
  v543[16] = 2;
  v8();
  v544 = (void *)(v989 + v3 + 272 * v2);
  v545 = (char *)v544 + v1[14];
  *v544 = 510;
  *(void *)v545 = "NEW";
  *((void *)v545 + 1) = 3;
  v545[16] = 2;
  v8();
  v546 = (void *)(v989 + v3 + 273 * v2);
  v547 = (char *)v546 + v1[14];
  *v546 = 511;
  *(void *)v547 = "NEXT";
  *((void *)v547 + 1) = 4;
  v547[16] = 2;
  v8();
  v548 = (void *)(v989 + v3 + 274 * v2);
  v549 = (char *)v548 + v1[14];
  *v548 = 512;
  *(void *)v549 = "NFC";
  *((void *)v549 + 1) = 3;
  v549[16] = 2;
  v8();
  v550 = (void *)(v989 + v3 + 275 * v2);
  v551 = (char *)v550 + v1[14];
  *v550 = 513;
  *(void *)v551 = "NFD";
  *((void *)v551 + 1) = 3;
  v551[16] = 2;
  v8();
  v552 = (void *)(v989 + v3 + 276 * v2);
  v553 = (char *)v552 + v1[14];
  *v552 = 514;
  *(void *)v553 = "NFKC";
  *((void *)v553 + 1) = 4;
  v553[16] = 2;
  v8();
  v554 = (void *)(v989 + v3 + 277 * v2);
  v555 = (char *)v554 + v1[14];
  *v554 = 515;
  *(void *)v555 = "NFKD";
  *((void *)v555 + 1) = 4;
  v555[16] = 2;
  v8();
  v556 = (void *)(v989 + v3 + 278 * v2);
  v557 = (char *)v556 + v1[14];
  *v556 = 516;
  *(void *)v557 = "NO";
  *((void *)v557 + 1) = 2;
  v557[16] = 2;
  v8();
  v558 = (void *)(v989 + v3 + 279 * v2);
  v559 = (char *)v558 + v1[14];
  *v558 = 517;
  *(void *)v559 = "NONE";
  *((void *)v559 + 1) = 4;
  v559[16] = 2;
  v8();
  v560 = (void *)(v989 + v3 + 280 * v2);
  v561 = (char *)v560 + v1[14];
  *v560 = 518;
  *(void *)v561 = "NORMALIZE";
  *((void *)v561 + 1) = 9;
  v561[16] = 2;
  v8();
  v562 = (void *)(v989 + v3 + 281 * v2);
  v563 = (char *)v562 + v1[14];
  *v562 = 519;
  *(void *)v563 = "NORMALIZED";
  *((void *)v563 + 1) = 10;
  v563[16] = 2;
  v8();
  v564 = (void *)(v989 + v3 + 282 * v2);
  v565 = (char *)v564 + v1[14];
  *v564 = 520;
  *(void *)v565 = "NOT";
  *((void *)v565 + 1) = 3;
  v565[16] = 2;
  v8();
  v566 = (void *)(v989 + v3 + 283 * v2);
  v567 = (char *)v566 + v1[14];
  *v566 = 521;
  *(void *)v567 = "NOTHING";
  *((void *)v567 + 1) = 7;
  v567[16] = 2;
  v8();
  v568 = (void *)(v989 + v3 + 284 * v2);
  v569 = (char *)v568 + v1[14];
  *v568 = 522;
  *(void *)v569 = "NOTIFY";
  *((void *)v569 + 1) = 6;
  v569[16] = 2;
  v8();
  v570 = (void *)(v989 + v3 + 285 * v2);
  v571 = (char *)v570 + v1[14];
  *v570 = 523;
  *(void *)v571 = "NOTNULL";
  *((void *)v571 + 1) = 7;
  v571[16] = 2;
  v8();
  v572 = (void *)(v989 + v3 + 286 * v2);
  v573 = (char *)v572 + v1[14];
  *v572 = 524;
  *(void *)v573 = "NOWAIT";
  *((void *)v573 + 1) = 6;
  v573[16] = 2;
  v8();
  v574 = (void *)(v989 + v3 + 287 * v2);
  v575 = (char *)v574 + v1[14];
  *v574 = 525;
  *(void *)v575 = "NULL_P";
  *((void *)v575 + 1) = 6;
  v575[16] = 2;
  v8();
  v576 = (void *)(v989 + v3 + 288 * v2);
  v577 = (char *)v576 + v1[14];
  *v576 = 526;
  *(void *)v577 = "NULLIF";
  *((void *)v577 + 1) = 6;
  v577[16] = 2;
  v8();
  v578 = (void *)(v989 + v3 + 289 * v2);
  v579 = (char *)v578 + v1[14];
  *v578 = 527;
  *(void *)v579 = "NULLS_P";
  *((void *)v579 + 1) = 7;
  v579[16] = 2;
  v8();
  v580 = (void *)(v989 + v3 + 290 * v2);
  v581 = (char *)v580 + v1[14];
  *v580 = 528;
  *(void *)v581 = "NUMERIC";
  *((void *)v581 + 1) = 7;
  v581[16] = 2;
  v8();
  v582 = (void *)(v989 + v3 + 291 * v2);
  v583 = (char *)v582 + v1[14];
  *v582 = 529;
  *(void *)v583 = "OBJECT_P";
  *((void *)v583 + 1) = 8;
  v583[16] = 2;
  v8();
  v584 = (void *)(v989 + v3 + 292 * v2);
  v585 = (char *)v584 + v1[14];
  *v584 = 530;
  *(void *)v585 = "OF";
  *((void *)v585 + 1) = 2;
  v585[16] = 2;
  v8();
  v586 = (void *)(v989 + v3 + 293 * v2);
  v587 = (char *)v586 + v1[14];
  *v586 = 531;
  *(void *)v587 = "OFF";
  *((void *)v587 + 1) = 3;
  v587[16] = 2;
  v8();
  v588 = (void *)(v989 + v3 + 294 * v2);
  v589 = (char *)v588 + v1[14];
  *v588 = 532;
  *(void *)v589 = "OFFSET";
  *((void *)v589 + 1) = 6;
  v589[16] = 2;
  v8();
  v590 = (void *)(v989 + v3 + 295 * v2);
  v591 = (char *)v590 + v1[14];
  *v590 = 533;
  *(void *)v591 = "OIDS";
  *((void *)v591 + 1) = 4;
  v591[16] = 2;
  v8();
  v592 = (void *)(v989 + v3 + 296 * v2);
  v593 = (char *)v592 + v1[14];
  *v592 = 534;
  *(void *)v593 = "OLD";
  *((void *)v593 + 1) = 3;
  v593[16] = 2;
  v8();
  v594 = (void *)(v989 + v3 + 297 * v2);
  v595 = (char *)v594 + v1[14];
  *v594 = 535;
  *(void *)v595 = "ON";
  *((void *)v595 + 1) = 2;
  v595[16] = 2;
  v8();
  v596 = (void *)(v989 + v3 + 298 * v2);
  v597 = (char *)v596 + v1[14];
  *v596 = 536;
  *(void *)v597 = "ONLY";
  *((void *)v597 + 1) = 4;
  v597[16] = 2;
  v8();
  v598 = (void *)(v989 + v3 + 299 * v2);
  v599 = (char *)v598 + v1[14];
  *v598 = 537;
  *(void *)v599 = "OPERATOR";
  *((void *)v599 + 1) = 8;
  v599[16] = 2;
  v8();
  v600 = (void *)(v989 + v3 + 300 * v2);
  v601 = (char *)v600 + v1[14];
  *v600 = 538;
  *(void *)v601 = "OPTION";
  *((void *)v601 + 1) = 6;
  v601[16] = 2;
  v8();
  v602 = (void *)(v989 + v3 + 301 * v2);
  v603 = (char *)v602 + v1[14];
  *v602 = 539;
  *(void *)v603 = "OPTIONS";
  *((void *)v603 + 1) = 7;
  v603[16] = 2;
  v8();
  v604 = (void *)(v989 + v3 + 302 * v2);
  v605 = (char *)v604 + v1[14];
  *v604 = 540;
  *(void *)v605 = "OR";
  *((void *)v605 + 1) = 2;
  v605[16] = 2;
  v8();
  v606 = (void *)(v989 + v3 + 303 * v2);
  v607 = (char *)v606 + v1[14];
  *v606 = 541;
  *(void *)v607 = "ORDER";
  *((void *)v607 + 1) = 5;
  v607[16] = 2;
  v8();
  v608 = (void *)(v989 + v3 + 304 * v2);
  v609 = (char *)v608 + v1[14];
  *v608 = 542;
  *(void *)v609 = "ORDINALITY";
  *((void *)v609 + 1) = 10;
  v609[16] = 2;
  v8();
  v610 = (void *)(v989 + v3 + 305 * v2);
  v611 = (char *)v610 + v1[14];
  *v610 = 543;
  *(void *)v611 = "OTHERS";
  *((void *)v611 + 1) = 6;
  v611[16] = 2;
  v8();
  v612 = (void *)(v989 + v3 + 306 * v2);
  v613 = (char *)v612 + v1[14];
  *v612 = 544;
  *(void *)v613 = "OUT_P";
  *((void *)v613 + 1) = 5;
  v613[16] = 2;
  v8();
  v614 = (void *)(v989 + v3 + 307 * v2);
  v615 = (char *)v614 + v1[14];
  *v614 = 545;
  *(void *)v615 = "OUTER_P";
  *((void *)v615 + 1) = 7;
  v615[16] = 2;
  v8();
  v616 = (void *)(v989 + v3 + 308 * v2);
  v617 = (char *)v616 + v1[14];
  *v616 = 546;
  *(void *)v617 = "OVER";
  *((void *)v617 + 1) = 4;
  v617[16] = 2;
  v8();
  v618 = (void *)(v989 + v3 + 309 * v2);
  v619 = (char *)v618 + v1[14];
  *v618 = 547;
  *(void *)v619 = "OVERLAPS";
  *((void *)v619 + 1) = 8;
  v619[16] = 2;
  v8();
  v620 = (void *)(v989 + v3 + 310 * v2);
  v621 = (char *)v620 + v1[14];
  *v620 = 548;
  *(void *)v621 = "OVERLAY";
  *((void *)v621 + 1) = 7;
  v621[16] = 2;
  v8();
  v622 = (void *)(v989 + v3 + 311 * v2);
  v623 = (char *)v622 + v1[14];
  *v622 = 549;
  *(void *)v623 = "OVERRIDING";
  *((void *)v623 + 1) = 10;
  v623[16] = 2;
  v8();
  v624 = (void *)(v989 + v3 + 312 * v2);
  v625 = (char *)v624 + v1[14];
  *v624 = 550;
  *(void *)v625 = "OWNED";
  *((void *)v625 + 1) = 5;
  v625[16] = 2;
  v8();
  v626 = (void *)(v989 + v3 + 313 * v2);
  v627 = (char *)v626 + v1[14];
  *v626 = 551;
  *(void *)v627 = "OWNER";
  *((void *)v627 + 1) = 5;
  v627[16] = 2;
  v8();
  v628 = (void *)(v989 + v3 + 314 * v2);
  v629 = (char *)v628 + v1[14];
  *v628 = 552;
  *(void *)v629 = "PARALLEL";
  *((void *)v629 + 1) = 8;
  v629[16] = 2;
  v8();
  v630 = (void *)(v989 + v3 + 315 * v2);
  v631 = (char *)v630 + v1[14];
  *v630 = 553;
  *(void *)v631 = "PARSER";
  *((void *)v631 + 1) = 6;
  v631[16] = 2;
  v8();
  v632 = (void *)(v989 + v3 + 316 * v2);
  v633 = (char *)v632 + v1[14];
  *v632 = 554;
  *(void *)v633 = "PARTIAL";
  *((void *)v633 + 1) = 7;
  v633[16] = 2;
  v8();
  v634 = (void *)(v989 + v3 + 317 * v2);
  v635 = (char *)v634 + v1[14];
  *v634 = 555;
  *(void *)v635 = "PARTITION";
  *((void *)v635 + 1) = 9;
  v635[16] = 2;
  v8();
  v636 = (void *)(v989 + v3 + 318 * v2);
  v637 = (char *)v636 + v1[14];
  *v636 = 556;
  *(void *)v637 = "PASSING";
  *((void *)v637 + 1) = 7;
  v637[16] = 2;
  v8();
  v638 = (void *)(v989 + v3 + 319 * v2);
  v639 = (char *)v638 + v1[14];
  *v638 = 557;
  *(void *)v639 = "PASSWORD";
  *((void *)v639 + 1) = 8;
  v639[16] = 2;
  v8();
  v640 = (void *)(v989 + v3 + 320 * v2);
  v641 = (char *)v640 + v1[14];
  *v640 = 558;
  *(void *)v641 = "PLACING";
  *((void *)v641 + 1) = 7;
  v641[16] = 2;
  v8();
  v642 = (void *)(v989 + v3 + 321 * v2);
  v643 = (char *)v642 + v1[14];
  *v642 = 559;
  *(void *)v643 = "PLANS";
  *((void *)v643 + 1) = 5;
  v643[16] = 2;
  v8();
  v644 = (void *)(v989 + v3 + 322 * v2);
  v645 = (char *)v644 + v1[14];
  *v644 = 560;
  *(void *)v645 = "POLICY";
  *((void *)v645 + 1) = 6;
  v645[16] = 2;
  v8();
  v646 = (void *)(v989 + v3 + 323 * v2);
  v647 = (char *)v646 + v1[14];
  *v646 = 561;
  *(void *)v647 = "POSITION";
  *((void *)v647 + 1) = 8;
  v647[16] = 2;
  v8();
  v648 = (void *)(v989 + v3 + 324 * v2);
  v649 = (char *)v648 + v1[14];
  *v648 = 562;
  *(void *)v649 = "PRECEDING";
  *((void *)v649 + 1) = 9;
  v649[16] = 2;
  v8();
  v650 = (void *)(v989 + v3 + 325 * v2);
  v651 = (char *)v650 + v1[14];
  *v650 = 563;
  *(void *)v651 = "PRECISION";
  *((void *)v651 + 1) = 9;
  v651[16] = 2;
  v8();
  v652 = (void *)(v989 + v3 + 326 * v2);
  v653 = (char *)v652 + v1[14];
  *v652 = 564;
  *(void *)v653 = "PRESERVE";
  *((void *)v653 + 1) = 8;
  v653[16] = 2;
  v8();
  v654 = (void *)(v989 + v3 + 327 * v2);
  v655 = (char *)v654 + v1[14];
  *v654 = 565;
  *(void *)v655 = "PREPARE";
  *((void *)v655 + 1) = 7;
  v655[16] = 2;
  v8();
  v656 = (void *)(v989 + v3 + 328 * v2);
  v657 = (char *)v656 + v1[14];
  *v656 = 566;
  *(void *)v657 = "PREPARED";
  *((void *)v657 + 1) = 8;
  v657[16] = 2;
  v8();
  v658 = (void *)(v989 + v3 + 329 * v2);
  v659 = (char *)v658 + v1[14];
  *v658 = 567;
  *(void *)v659 = "PRIMARY";
  *((void *)v659 + 1) = 7;
  v659[16] = 2;
  v8();
  v660 = (void *)(v989 + v3 + 330 * v2);
  v661 = (char *)v660 + v1[14];
  *v660 = 568;
  *(void *)v661 = "PRIOR";
  *((void *)v661 + 1) = 5;
  v661[16] = 2;
  v8();
  v662 = (void *)(v989 + v3 + 331 * v2);
  v663 = (char *)v662 + v1[14];
  *v662 = 569;
  *(void *)v663 = "PRIVILEGES";
  *((void *)v663 + 1) = 10;
  v663[16] = 2;
  v8();
  v664 = (void *)(v989 + v3 + 332 * v2);
  v665 = (char *)v664 + v1[14];
  *v664 = 570;
  *(void *)v665 = "PROCEDURAL";
  *((void *)v665 + 1) = 10;
  v665[16] = 2;
  v8();
  v666 = (void *)(v989 + v3 + 333 * v2);
  v667 = (char *)v666 + v1[14];
  *v666 = 571;
  *(void *)v667 = "PROCEDURE";
  *((void *)v667 + 1) = 9;
  v667[16] = 2;
  v8();
  v668 = (void *)(v989 + v3 + 334 * v2);
  v669 = (char *)v668 + v1[14];
  *v668 = 572;
  *(void *)v669 = "PROCEDURES";
  *((void *)v669 + 1) = 10;
  v669[16] = 2;
  v8();
  v670 = (void *)(v989 + v3 + 335 * v2);
  v671 = (char *)v670 + v1[14];
  *v670 = 573;
  *(void *)v671 = "PROGRAM";
  *((void *)v671 + 1) = 7;
  v671[16] = 2;
  v8();
  v672 = (void *)(v989 + v3 + 336 * v2);
  v673 = (char *)v672 + v1[14];
  *v672 = 574;
  *(void *)v673 = "PUBLICATION";
  *((void *)v673 + 1) = 11;
  v673[16] = 2;
  v8();
  v674 = (void *)(v989 + v3 + 337 * v2);
  v675 = (char *)v674 + v1[14];
  *v674 = 575;
  *(void *)v675 = "QUOTE";
  *((void *)v675 + 1) = 5;
  v675[16] = 2;
  v8();
  v676 = (void *)(v989 + v3 + 338 * v2);
  v677 = (char *)v676 + v1[14];
  *v676 = 576;
  *(void *)v677 = "RANGE";
  *((void *)v677 + 1) = 5;
  v677[16] = 2;
  v8();
  v678 = (void *)(v989 + v3 + 339 * v2);
  v679 = (char *)v678 + v1[14];
  *v678 = 577;
  *(void *)v679 = "READ";
  *((void *)v679 + 1) = 4;
  v679[16] = 2;
  v8();
  v680 = (void *)(v989 + v3 + 340 * v2);
  v681 = (char *)v680 + v1[14];
  *v680 = 578;
  *(void *)v681 = "REAL";
  *((void *)v681 + 1) = 4;
  v681[16] = 2;
  v8();
  v682 = (void *)(v989 + v3 + 341 * v2);
  v683 = (char *)v682 + v1[14];
  *v682 = 579;
  *(void *)v683 = "REASSIGN";
  *((void *)v683 + 1) = 8;
  v683[16] = 2;
  v8();
  v684 = (void *)(v989 + v3 + 342 * v2);
  v685 = (char *)v684 + v1[14];
  *v684 = 580;
  *(void *)v685 = "RECHECK";
  *((void *)v685 + 1) = 7;
  v685[16] = 2;
  v8();
  v686 = (void *)(v989 + v3 + 343 * v2);
  v687 = (char *)v686 + v1[14];
  *v686 = 581;
  *(void *)v687 = "RECURSIVE";
  *((void *)v687 + 1) = 9;
  v687[16] = 2;
  v8();
  v688 = (void *)(v989 + v3 + 344 * v2);
  v689 = (char *)v688 + v1[14];
  *v688 = 582;
  *(void *)v689 = "REF";
  *((void *)v689 + 1) = 3;
  v689[16] = 2;
  v8();
  v690 = (void *)(v989 + v3 + 345 * v2);
  v691 = (char *)v690 + v1[14];
  *v690 = 583;
  *(void *)v691 = "REFERENCES";
  *((void *)v691 + 1) = 10;
  v691[16] = 2;
  v8();
  v692 = (void *)(v989 + v3 + 346 * v2);
  v693 = (char *)v692 + v1[14];
  *v692 = 584;
  *(void *)v693 = "REFERENCING";
  *((void *)v693 + 1) = 11;
  v693[16] = 2;
  v8();
  v694 = (void *)(v989 + v3 + 347 * v2);
  v695 = (char *)v694 + v1[14];
  *v694 = 585;
  *(void *)v695 = "REFRESH";
  *((void *)v695 + 1) = 7;
  v695[16] = 2;
  v8();
  v696 = (void *)(v989 + v3 + 348 * v2);
  v697 = (char *)v696 + v1[14];
  *v696 = 586;
  *(void *)v697 = "REINDEX";
  *((void *)v697 + 1) = 7;
  v697[16] = 2;
  v8();
  v698 = (void *)(v989 + v3 + 349 * v2);
  v699 = (char *)v698 + v1[14];
  *v698 = 587;
  *(void *)v699 = "RELATIVE_P";
  *((void *)v699 + 1) = 10;
  v699[16] = 2;
  v8();
  v700 = (void *)(v989 + v3 + 350 * v2);
  v701 = (char *)v700 + v1[14];
  *v700 = 588;
  *(void *)v701 = "RELEASE";
  *((void *)v701 + 1) = 7;
  v701[16] = 2;
  v8();
  v702 = (void *)(v989 + v3 + 351 * v2);
  v703 = (char *)v702 + v1[14];
  *v702 = 589;
  *(void *)v703 = "RENAME";
  *((void *)v703 + 1) = 6;
  v703[16] = 2;
  v8();
  v704 = (void *)(v989 + v3 + 352 * v2);
  v705 = (char *)v704 + v1[14];
  *v704 = 590;
  *(void *)v705 = "REPEATABLE";
  *((void *)v705 + 1) = 10;
  v705[16] = 2;
  v8();
  v706 = (void *)(v989 + v3 + 353 * v2);
  v707 = (char *)v706 + v1[14];
  *v706 = 591;
  *(void *)v707 = "REPLACE";
  *((void *)v707 + 1) = 7;
  v707[16] = 2;
  v8();
  v708 = (void *)(v989 + v3 + 354 * v2);
  v709 = (char *)v708 + v1[14];
  *v708 = 592;
  *(void *)v709 = "REPLICA";
  *((void *)v709 + 1) = 7;
  v709[16] = 2;
  v8();
  v710 = (void *)(v989 + v3 + 355 * v2);
  v711 = (char *)v710 + v1[14];
  *v710 = 593;
  *(void *)v711 = "RESET";
  *((void *)v711 + 1) = 5;
  v711[16] = 2;
  v8();
  v712 = (void *)(v989 + v3 + 356 * v2);
  v713 = (char *)v712 + v1[14];
  *v712 = 594;
  *(void *)v713 = "RESTART";
  *((void *)v713 + 1) = 7;
  v713[16] = 2;
  v8();
  v714 = (void *)(v989 + v3 + 357 * v2);
  v715 = (char *)v714 + v1[14];
  *v714 = 595;
  *(void *)v715 = "RESTRICT";
  *((void *)v715 + 1) = 8;
  v715[16] = 2;
  v8();
  v716 = (void *)(v989 + v3 + 358 * v2);
  v717 = (char *)v716 + v1[14];
  *v716 = 596;
  *(void *)v717 = "RETURNING";
  *((void *)v717 + 1) = 9;
  v717[16] = 2;
  v8();
  v718 = (void *)(v989 + v3 + 359 * v2);
  v719 = (char *)v718 + v1[14];
  *v718 = 597;
  *(void *)v719 = "RETURNS";
  *((void *)v719 + 1) = 7;
  v719[16] = 2;
  v8();
  v720 = (void *)(v989 + v3 + 360 * v2);
  v721 = (char *)v720 + v1[14];
  *v720 = 598;
  *(void *)v721 = "REVOKE";
  *((void *)v721 + 1) = 6;
  v721[16] = 2;
  v8();
  v722 = (void *)(v989 + v3 + 361 * v2);
  v723 = (char *)v722 + v1[14];
  *v722 = 599;
  *(void *)v723 = "RIGHT";
  *((void *)v723 + 1) = 5;
  v723[16] = 2;
  v8();
  v724 = (void *)(v989 + v3 + 362 * v2);
  v725 = (char *)v724 + v1[14];
  *v724 = 600;
  *(void *)v725 = "ROLE";
  *((void *)v725 + 1) = 4;
  v725[16] = 2;
  v8();
  v726 = (void *)(v989 + v3 + 363 * v2);
  v727 = (char *)v726 + v1[14];
  *v726 = 601;
  *(void *)v727 = "ROLLBACK";
  *((void *)v727 + 1) = 8;
  v727[16] = 2;
  v8();
  v728 = (void *)(v989 + v3 + 364 * v2);
  v729 = (char *)v728 + v1[14];
  *v728 = 602;
  *(void *)v729 = "ROLLUP";
  *((void *)v729 + 1) = 6;
  v729[16] = 2;
  v8();
  v730 = (void *)(v989 + v3 + 365 * v2);
  v731 = (char *)v730 + v1[14];
  *v730 = 603;
  *(void *)v731 = "ROUTINE";
  *((void *)v731 + 1) = 7;
  v731[16] = 2;
  v8();
  v732 = (void *)(v989 + v3 + 366 * v2);
  v733 = (char *)v732 + v1[14];
  *v732 = 604;
  *(void *)v733 = "ROUTINES";
  *((void *)v733 + 1) = 8;
  v733[16] = 2;
  v8();
  v734 = (void *)(v989 + v3 + 367 * v2);
  v735 = (char *)v734 + v1[14];
  *v734 = 605;
  *(void *)v735 = "ROW";
  *((void *)v735 + 1) = 3;
  v735[16] = 2;
  v8();
  v736 = (void *)(v989 + v3 + 368 * v2);
  v737 = (char *)v736 + v1[14];
  *v736 = 606;
  *(void *)v737 = "ROWS";
  *((void *)v737 + 1) = 4;
  v737[16] = 2;
  v8();
  v738 = (void *)(v989 + v3 + 369 * v2);
  v739 = (char *)v738 + v1[14];
  *v738 = 607;
  *(void *)v739 = "RULE";
  *((void *)v739 + 1) = 4;
  v739[16] = 2;
  v8();
  v740 = (void *)(v989 + v3 + 370 * v2);
  v741 = (char *)v740 + v1[14];
  *v740 = 608;
  *(void *)v741 = "SAVEPOINT";
  *((void *)v741 + 1) = 9;
  v741[16] = 2;
  v8();
  v742 = (void *)(v989 + v3 + 371 * v2);
  v743 = (char *)v742 + v1[14];
  *v742 = 609;
  *(void *)v743 = "SCHEMA";
  *((void *)v743 + 1) = 6;
  v743[16] = 2;
  v8();
  v744 = (void *)(v989 + v3 + 372 * v2);
  v745 = (char *)v744 + v1[14];
  *v744 = 610;
  *(void *)v745 = "SCHEMAS";
  *((void *)v745 + 1) = 7;
  v745[16] = 2;
  v8();
  v746 = (void *)(v989 + v3 + 373 * v2);
  v747 = (char *)v746 + v1[14];
  *v746 = 611;
  *(void *)v747 = "SCROLL";
  *((void *)v747 + 1) = 6;
  v747[16] = 2;
  v8();
  v748 = (void *)(v989 + v3 + 374 * v2);
  v749 = (char *)v748 + v1[14];
  *v748 = 612;
  *(void *)v749 = "SEARCH";
  *((void *)v749 + 1) = 6;
  v749[16] = 2;
  v8();
  v750 = (void *)(v989 + v3 + 375 * v2);
  v751 = (char *)v750 + v1[14];
  *v750 = 613;
  *(void *)v751 = "SECOND_P";
  *((void *)v751 + 1) = 8;
  v751[16] = 2;
  v8();
  v752 = (void *)(v989 + v3 + 376 * v2);
  v753 = (char *)v752 + v1[14];
  *v752 = 614;
  *(void *)v753 = "SECURITY";
  *((void *)v753 + 1) = 8;
  v753[16] = 2;
  v8();
  v754 = (void *)(v989 + v3 + 377 * v2);
  v755 = (char *)v754 + v1[14];
  *v754 = 615;
  *(void *)v755 = "SELECT";
  *((void *)v755 + 1) = 6;
  v755[16] = 2;
  v8();
  v756 = (void *)(v989 + v3 + 378 * v2);
  v757 = (char *)v756 + v1[14];
  *v756 = 616;
  *(void *)v757 = "SEQUENCE";
  *((void *)v757 + 1) = 8;
  v757[16] = 2;
  v8();
  v758 = (void *)(v989 + v3 + 379 * v2);
  v759 = (char *)v758 + v1[14];
  *v758 = 617;
  *(void *)v759 = "SEQUENCES";
  *((void *)v759 + 1) = 9;
  v759[16] = 2;
  v8();
  v760 = (void *)(v989 + v3 + 380 * v2);
  v761 = (char *)v760 + v1[14];
  *v760 = 618;
  *(void *)v761 = "SERIALIZABLE";
  *((void *)v761 + 1) = 12;
  v761[16] = 2;
  v8();
  v762 = (void *)(v989 + v3 + 381 * v2);
  v763 = (char *)v762 + v1[14];
  *v762 = 619;
  *(void *)v763 = "SERVER";
  *((void *)v763 + 1) = 6;
  v763[16] = 2;
  v8();
  v764 = (void *)(v989 + v3 + 382 * v2);
  v765 = (char *)v764 + v1[14];
  *v764 = 620;
  *(void *)v765 = "SESSION";
  *((void *)v765 + 1) = 7;
  v765[16] = 2;
  v8();
  v766 = (void *)(v989 + v3 + 383 * v2);
  v767 = (char *)v766 + v1[14];
  *v766 = 621;
  *(void *)v767 = "SESSION_USER";
  *((void *)v767 + 1) = 12;
  v767[16] = 2;
  v8();
  v768 = (void *)(v989 + v3 + 384 * v2);
  v769 = (char *)v768 + v1[14];
  *v768 = 622;
  *(void *)v769 = "SET";
  *((void *)v769 + 1) = 3;
  v769[16] = 2;
  v8();
  v770 = (void *)(v989 + v3 + 385 * v2);
  v771 = (char *)v770 + v1[14];
  *v770 = 623;
  *(void *)v771 = "SETS";
  *((void *)v771 + 1) = 4;
  v771[16] = 2;
  v8();
  v772 = (void *)(v989 + v3 + 386 * v2);
  v773 = (char *)v772 + v1[14];
  *v772 = 624;
  *(void *)v773 = "SETOF";
  *((void *)v773 + 1) = 5;
  v773[16] = 2;
  v8();
  v774 = (void *)(v989 + v3 + 387 * v2);
  v775 = (char *)v774 + v1[14];
  *v774 = 625;
  *(void *)v775 = "SHARE";
  *((void *)v775 + 1) = 5;
  v775[16] = 2;
  v8();
  v776 = (void *)(v989 + v3 + 388 * v2);
  v777 = (char *)v776 + v1[14];
  *v776 = 626;
  *(void *)v777 = "SHOW";
  *((void *)v777 + 1) = 4;
  v777[16] = 2;
  v8();
  v778 = (void *)(v989 + v3 + 389 * v2);
  v779 = (char *)v778 + v1[14];
  *v778 = 627;
  *(void *)v779 = "SIMILAR";
  *((void *)v779 + 1) = 7;
  v779[16] = 2;
  v8();
  v780 = (void *)(v989 + v3 + 390 * v2);
  v781 = (char *)v780 + v1[14];
  *v780 = 628;
  *(void *)v781 = "SIMPLE";
  *((void *)v781 + 1) = 6;
  v781[16] = 2;
  v8();
  v782 = (void *)(v989 + v3 + 391 * v2);
  v783 = (char *)v782 + v1[14];
  *v782 = 629;
  *(void *)v783 = "SKIP";
  *((void *)v783 + 1) = 4;
  v783[16] = 2;
  v8();
  v784 = (void *)(v989 + v3 + 392 * v2);
  v785 = (char *)v784 + v1[14];
  *v784 = 630;
  *(void *)v785 = "SMALLINT";
  *((void *)v785 + 1) = 8;
  v785[16] = 2;
  v8();
  v786 = (void *)(v989 + v3 + 393 * v2);
  v787 = (char *)v786 + v1[14];
  *v786 = 631;
  *(void *)v787 = "SNAPSHOT";
  *((void *)v787 + 1) = 8;
  v787[16] = 2;
  v8();
  v788 = (void *)(v989 + v3 + 394 * v2);
  v789 = (char *)v788 + v1[14];
  *v788 = 632;
  *(void *)v789 = "SOME";
  *((void *)v789 + 1) = 4;
  v789[16] = 2;
  v8();
  v790 = (void *)(v989 + v3 + 395 * v2);
  v791 = (char *)v790 + v1[14];
  *v790 = 633;
  *(void *)v791 = "SQL_P";
  *((void *)v791 + 1) = 5;
  v791[16] = 2;
  v8();
  v792 = (void *)(v989 + v3 + 396 * v2);
  v793 = (char *)v792 + v1[14];
  *v792 = 634;
  *(void *)v793 = "STABLE";
  *((void *)v793 + 1) = 6;
  v793[16] = 2;
  v8();
  v794 = (void *)(v989 + v3 + 397 * v2);
  v795 = (char *)v794 + v1[14];
  *v794 = 635;
  *(void *)v795 = "STANDALONE_P";
  *((void *)v795 + 1) = 12;
  v795[16] = 2;
  v8();
  v796 = (void *)(v989 + v3 + 398 * v2);
  v797 = (char *)v796 + v1[14];
  *v796 = 636;
  *(void *)v797 = "START";
  *((void *)v797 + 1) = 5;
  v797[16] = 2;
  v8();
  v798 = (void *)(v989 + v3 + 399 * v2);
  v799 = (char *)v798 + v1[14];
  *v798 = 637;
  *(void *)v799 = "STATEMENT";
  *((void *)v799 + 1) = 9;
  v799[16] = 2;
  v8();
  v800 = (void *)(v989 + v3 + 400 * v2);
  v801 = (char *)v800 + v1[14];
  *v800 = 638;
  *(void *)v801 = "STATISTICS";
  *((void *)v801 + 1) = 10;
  v801[16] = 2;
  v8();
  v802 = (void *)(v989 + v3 + 401 * v2);
  v803 = (char *)v802 + v1[14];
  *v802 = 639;
  *(void *)v803 = "STDIN";
  *((void *)v803 + 1) = 5;
  v803[16] = 2;
  v8();
  v804 = (void *)(v989 + v3 + 402 * v2);
  v805 = (char *)v804 + v1[14];
  *v804 = 640;
  *(void *)v805 = "STDOUT";
  *((void *)v805 + 1) = 6;
  v805[16] = 2;
  v8();
  v806 = (void *)(v989 + v3 + 403 * v2);
  v807 = (char *)v806 + v1[14];
  *v806 = 641;
  *(void *)v807 = "STORAGE";
  *((void *)v807 + 1) = 7;
  v807[16] = 2;
  v8();
  v808 = (void *)(v989 + v3 + 404 * v2);
  v809 = (char *)v808 + v1[14];
  *v808 = 642;
  *(void *)v809 = "STORED";
  *((void *)v809 + 1) = 6;
  v809[16] = 2;
  v8();
  v810 = (void *)(v989 + v3 + 405 * v2);
  v811 = (char *)v810 + v1[14];
  *v810 = 643;
  *(void *)v811 = "STRICT_P";
  *((void *)v811 + 1) = 8;
  v811[16] = 2;
  v8();
  v812 = (void *)(v989 + v3 + 406 * v2);
  v813 = (char *)v812 + v1[14];
  *v812 = 644;
  *(void *)v813 = "STRIP_P";
  *((void *)v813 + 1) = 7;
  v813[16] = 2;
  v8();
  v814 = (void *)(v989 + v3 + 407 * v2);
  v815 = (char *)v814 + v1[14];
  *v814 = 645;
  *(void *)v815 = "SUBSCRIPTION";
  *((void *)v815 + 1) = 12;
  v815[16] = 2;
  v8();
  v816 = (void *)(v989 + v3 + 408 * v2);
  v817 = (char *)v816 + v1[14];
  *v816 = 646;
  *(void *)v817 = "SUBSTRING";
  *((void *)v817 + 1) = 9;
  v817[16] = 2;
  v8();
  v818 = (void *)(v989 + v3 + 409 * v2);
  v819 = (char *)v818 + v1[14];
  *v818 = 647;
  *(void *)v819 = "SUPPORT";
  *((void *)v819 + 1) = 7;
  v819[16] = 2;
  v8();
  v820 = (void *)(v989 + v3 + 410 * v2);
  v821 = (char *)v820 + v1[14];
  *v820 = 648;
  *(void *)v821 = "SYMMETRIC";
  *((void *)v821 + 1) = 9;
  v821[16] = 2;
  v8();
  v822 = (void *)(v989 + v3 + 411 * v2);
  v823 = (char *)v822 + v1[14];
  *v822 = 649;
  *(void *)v823 = "SYSID";
  *((void *)v823 + 1) = 5;
  v823[16] = 2;
  v8();
  v824 = (void *)(v989 + v3 + 412 * v2);
  v825 = (char *)v824 + v1[14];
  *v824 = 650;
  *(void *)v825 = "SYSTEM_P";
  *((void *)v825 + 1) = 8;
  v825[16] = 2;
  v8();
  v826 = (void *)(v989 + v3 + 413 * v2);
  v827 = (char *)v826 + v1[14];
  *v826 = 651;
  *(void *)v827 = "TABLE";
  *((void *)v827 + 1) = 5;
  v827[16] = 2;
  v8();
  v828 = (void *)(v989 + v3 + 414 * v2);
  v829 = (char *)v828 + v1[14];
  *v828 = 652;
  *(void *)v829 = "TABLES";
  *((void *)v829 + 1) = 6;
  v829[16] = 2;
  v8();
  v830 = (void *)(v989 + v3 + 415 * v2);
  v831 = (char *)v830 + v1[14];
  *v830 = 653;
  *(void *)v831 = "TABLESAMPLE";
  *((void *)v831 + 1) = 11;
  v831[16] = 2;
  v8();
  v832 = (void *)(v989 + v3 + 416 * v2);
  v833 = (char *)v832 + v1[14];
  *v832 = 654;
  *(void *)v833 = "TABLESPACE";
  *((void *)v833 + 1) = 10;
  v833[16] = 2;
  v8();
  v834 = (void *)(v989 + v3 + 417 * v2);
  v835 = (char *)v834 + v1[14];
  *v834 = 655;
  *(void *)v835 = "TEMP";
  *((void *)v835 + 1) = 4;
  v835[16] = 2;
  v8();
  v836 = (void *)(v989 + v3 + 418 * v2);
  v837 = (char *)v836 + v1[14];
  *v836 = 656;
  *(void *)v837 = "TEMPLATE";
  *((void *)v837 + 1) = 8;
  v837[16] = 2;
  v8();
  v838 = (void *)(v989 + v3 + 419 * v2);
  v839 = (char *)v838 + v1[14];
  *v838 = 657;
  *(void *)v839 = "TEMPORARY";
  *((void *)v839 + 1) = 9;
  v839[16] = 2;
  v8();
  v840 = (void *)(v989 + v3 + 420 * v2);
  v841 = (char *)v840 + v1[14];
  *v840 = 658;
  *(void *)v841 = "TEXT_P";
  *((void *)v841 + 1) = 6;
  v841[16] = 2;
  v8();
  v842 = (void *)(v989 + v3 + 421 * v2);
  v843 = (char *)v842 + v1[14];
  *v842 = 659;
  *(void *)v843 = "THEN";
  *((void *)v843 + 1) = 4;
  v843[16] = 2;
  v8();
  v844 = (void *)(v989 + v3 + 422 * v2);
  v845 = (char *)v844 + v1[14];
  *v844 = 660;
  *(void *)v845 = "TIES";
  *((void *)v845 + 1) = 4;
  v845[16] = 2;
  v8();
  v846 = (void *)(v989 + v3 + 423 * v2);
  v847 = (char *)v846 + v1[14];
  *v846 = 661;
  *(void *)v847 = "TIME";
  *((void *)v847 + 1) = 4;
  v847[16] = 2;
  v8();
  v848 = (void *)(v989 + v3 + 424 * v2);
  v849 = (char *)v848 + v1[14];
  *v848 = 662;
  *(void *)v849 = "TIMESTAMP";
  *((void *)v849 + 1) = 9;
  v849[16] = 2;
  v8();
  v850 = (void *)(v989 + v3 + 425 * v2);
  v851 = (char *)v850 + v1[14];
  *v850 = 663;
  *(void *)v851 = "TO";
  *((void *)v851 + 1) = 2;
  v851[16] = 2;
  v8();
  v852 = (void *)(v989 + v3 + 426 * v2);
  v853 = (char *)v852 + v1[14];
  *v852 = 664;
  *(void *)v853 = "TRAILING";
  *((void *)v853 + 1) = 8;
  v853[16] = 2;
  v8();
  v854 = (void *)(v989 + v3 + 427 * v2);
  v855 = (char *)v854 + v1[14];
  *v854 = 665;
  *(void *)v855 = "TRANSACTION";
  *((void *)v855 + 1) = 11;
  v855[16] = 2;
  v8();
  v856 = (void *)(v989 + v3 + 428 * v2);
  v857 = (char *)v856 + v1[14];
  *v856 = 666;
  *(void *)v857 = "TRANSFORM";
  *((void *)v857 + 1) = 9;
  v857[16] = 2;
  v8();
  v858 = (void *)(v989 + v3 + 429 * v2);
  v859 = (char *)v858 + v1[14];
  *v858 = 667;
  *(void *)v859 = "TREAT";
  *((void *)v859 + 1) = 5;
  v859[16] = 2;
  v8();
  v860 = (void *)(v989 + v3 + 430 * v2);
  v861 = (char *)v860 + v1[14];
  *v860 = 668;
  *(void *)v861 = "TRIGGER";
  *((void *)v861 + 1) = 7;
  v861[16] = 2;
  v8();
  v862 = (void *)(v989 + v3 + 431 * v2);
  v863 = (char *)v862 + v1[14];
  *v862 = 669;
  *(void *)v863 = "TRIM";
  *((void *)v863 + 1) = 4;
  v863[16] = 2;
  v8();
  v864 = (void *)(v989 + v3 + 432 * v2);
  v865 = (char *)v864 + v1[14];
  *v864 = 670;
  *(void *)v865 = "TRUE_P";
  *((void *)v865 + 1) = 6;
  v865[16] = 2;
  v8();
  v866 = (void *)(v989 + v3 + 433 * v2);
  v867 = (char *)v866 + v1[14];
  *v866 = 671;
  *(void *)v867 = "TRUNCATE";
  *((void *)v867 + 1) = 8;
  v867[16] = 2;
  v8();
  v868 = (void *)(v989 + v3 + 434 * v2);
  v869 = (char *)v868 + v1[14];
  *v868 = 672;
  *(void *)v869 = "TRUSTED";
  *((void *)v869 + 1) = 7;
  v869[16] = 2;
  v8();
  v870 = (void *)(v989 + v3 + 435 * v2);
  v871 = (char *)v870 + v1[14];
  *v870 = 673;
  *(void *)v871 = "TYPE_P";
  *((void *)v871 + 1) = 6;
  v871[16] = 2;
  v8();
  v872 = (void *)(v989 + v3 + 436 * v2);
  v873 = (char *)v872 + v1[14];
  *v872 = 674;
  *(void *)v873 = "TYPES_P";
  *((void *)v873 + 1) = 7;
  v873[16] = 2;
  v8();
  v874 = (void *)(v989 + v3 + 437 * v2);
  v875 = (char *)v874 + v1[14];
  *v874 = 675;
  *(void *)v875 = "UESCAPE";
  *((void *)v875 + 1) = 7;
  v875[16] = 2;
  v8();
  v876 = (void *)(v989 + v3 + 438 * v2);
  v877 = (char *)v876 + v1[14];
  *v876 = 676;
  *(void *)v877 = "UNBOUNDED";
  *((void *)v877 + 1) = 9;
  v877[16] = 2;
  v8();
  v878 = (void *)(v989 + v3 + 439 * v2);
  v879 = (char *)v878 + v1[14];
  *v878 = 677;
  *(void *)v879 = "UNCOMMITTED";
  *((void *)v879 + 1) = 11;
  v879[16] = 2;
  v8();
  v880 = (void *)(v989 + v3 + 440 * v2);
  v881 = (char *)v880 + v1[14];
  *v880 = 678;
  *(void *)v881 = "UNENCRYPTED";
  *((void *)v881 + 1) = 11;
  v881[16] = 2;
  v8();
  v882 = (void *)(v989 + v3 + 441 * v2);
  v883 = (char *)v882 + v1[14];
  *v882 = 679;
  *(void *)v883 = "UNION";
  *((void *)v883 + 1) = 5;
  v883[16] = 2;
  v8();
  v884 = (void *)(v989 + v3 + 442 * v2);
  v885 = (char *)v884 + v1[14];
  *v884 = 680;
  *(void *)v885 = "UNIQUE";
  *((void *)v885 + 1) = 6;
  v885[16] = 2;
  v8();
  v886 = (void *)(v989 + v3 + 443 * v2);
  v887 = (char *)v886 + v1[14];
  *v886 = 681;
  *(void *)v887 = "UNKNOWN";
  *((void *)v887 + 1) = 7;
  v887[16] = 2;
  v8();
  v888 = (void *)(v989 + v3 + 444 * v2);
  v889 = (char *)v888 + v1[14];
  *v888 = 682;
  *(void *)v889 = "UNLISTEN";
  *((void *)v889 + 1) = 8;
  v889[16] = 2;
  v8();
  v890 = (void *)(v989 + v3 + 445 * v2);
  v891 = (char *)v890 + v1[14];
  *v890 = 683;
  *(void *)v891 = "UNLOGGED";
  *((void *)v891 + 1) = 8;
  v891[16] = 2;
  v8();
  v892 = (void *)(v989 + v3 + 446 * v2);
  v893 = (char *)v892 + v1[14];
  *v892 = 684;
  *(void *)v893 = "UNTIL";
  *((void *)v893 + 1) = 5;
  v893[16] = 2;
  v8();
  v894 = (void *)(v989 + v3 + 447 * v2);
  v895 = (char *)v894 + v1[14];
  *v894 = 685;
  *(void *)v895 = "UPDATE";
  *((void *)v895 + 1) = 6;
  v895[16] = 2;
  v8();
  v896 = (void *)(v989 + v3 + 448 * v2);
  v897 = (char *)v896 + v1[14];
  *v896 = 686;
  *(void *)v897 = "USER";
  *((void *)v897 + 1) = 4;
  v897[16] = 2;
  v8();
  v898 = (void *)(v989 + v3 + 449 * v2);
  v899 = (char *)v898 + v1[14];
  *v898 = 687;
  *(void *)v899 = "USING";
  *((void *)v899 + 1) = 5;
  v899[16] = 2;
  v8();
  v900 = (void *)(v989 + v3 + 450 * v2);
  v901 = (char *)v900 + v1[14];
  *v900 = 688;
  *(void *)v901 = "VACUUM";
  *((void *)v901 + 1) = 6;
  v901[16] = 2;
  v8();
  v902 = (void *)(v989 + v3 + 451 * v2);
  v903 = (char *)v902 + v1[14];
  *v902 = 689;
  *(void *)v903 = "VALID";
  *((void *)v903 + 1) = 5;
  v903[16] = 2;
  v8();
  v904 = (void *)(v989 + v3 + 452 * v2);
  v905 = (char *)v904 + v1[14];
  *v904 = 690;
  *(void *)v905 = "VALIDATE";
  *((void *)v905 + 1) = 8;
  v905[16] = 2;
  v8();
  v906 = (void *)(v989 + v3 + 453 * v2);
  v907 = (char *)v906 + v1[14];
  *v906 = 691;
  *(void *)v907 = "VALIDATOR";
  *((void *)v907 + 1) = 9;
  v907[16] = 2;
  v8();
  v908 = (void *)(v989 + v3 + 454 * v2);
  v909 = (char *)v908 + v1[14];
  *v908 = 692;
  *(void *)v909 = "VALUE_P";
  *((void *)v909 + 1) = 7;
  v909[16] = 2;
  v8();
  v910 = (void *)(v989 + v3 + 455 * v2);
  v911 = (char *)v910 + v1[14];
  *v910 = 693;
  *(void *)v911 = "VALUES";
  *((void *)v911 + 1) = 6;
  v911[16] = 2;
  v8();
  v912 = (void *)(v989 + v3 + 456 * v2);
  v913 = (char *)v912 + v1[14];
  *v912 = 694;
  *(void *)v913 = "VARCHAR";
  *((void *)v913 + 1) = 7;
  v913[16] = 2;
  v8();
  v914 = (void *)(v989 + v3 + 457 * v2);
  v915 = (char *)v914 + v1[14];
  *v914 = 695;
  *(void *)v915 = "VARIADIC";
  *((void *)v915 + 1) = 8;
  v915[16] = 2;
  v8();
  v916 = (void *)(v989 + v3 + 458 * v2);
  v917 = (char *)v916 + v1[14];
  *v916 = 696;
  *(void *)v917 = "VARYING";
  *((void *)v917 + 1) = 7;
  v917[16] = 2;
  v8();
  v918 = (void *)(v989 + v3 + 459 * v2);
  v919 = (char *)v918 + v1[14];
  *v918 = 697;
  *(void *)v919 = "VERBOSE";
  *((void *)v919 + 1) = 7;
  v919[16] = 2;
  v8();
  v920 = (void *)(v989 + v3 + 460 * v2);
  v921 = (char *)v920 + v1[14];
  *v920 = 698;
  *(void *)v921 = "VERSION_P";
  *((void *)v921 + 1) = 9;
  v921[16] = 2;
  v8();
  v922 = (void *)(v989 + v3 + 461 * v2);
  v923 = (char *)v922 + v1[14];
  *v922 = 699;
  *(void *)v923 = "VIEW";
  *((void *)v923 + 1) = 4;
  v923[16] = 2;
  v8();
  v924 = (void *)(v989 + v3 + 462 * v2);
  v925 = (char *)v924 + v1[14];
  *v924 = 700;
  *(void *)v925 = "VIEWS";
  *((void *)v925 + 1) = 5;
  v925[16] = 2;
  v8();
  v926 = (void *)(v989 + v3 + 463 * v2);
  v927 = (char *)v926 + v1[14];
  *v926 = 701;
  *(void *)v927 = "VOLATILE";
  *((void *)v927 + 1) = 8;
  v927[16] = 2;
  v8();
  v928 = (void *)(v989 + v3 + 464 * v2);
  v929 = (char *)v928 + v1[14];
  *v928 = 702;
  *(void *)v929 = "WHEN";
  *((void *)v929 + 1) = 4;
  v929[16] = 2;
  v8();
  v930 = (void *)(v989 + v3 + 465 * v2);
  v931 = (char *)v930 + v1[14];
  *v930 = 703;
  *(void *)v931 = "WHERE";
  *((void *)v931 + 1) = 5;
  v931[16] = 2;
  v8();
  v932 = (void *)(v989 + v3 + 466 * v2);
  v933 = (char *)v932 + v1[14];
  *v932 = 704;
  *(void *)v933 = "WHITESPACE_P";
  *((void *)v933 + 1) = 12;
  v933[16] = 2;
  v8();
  v934 = (void *)(v989 + v3 + 467 * v2);
  v935 = (char *)v934 + v1[14];
  *v934 = 705;
  *(void *)v935 = "WINDOW";
  *((void *)v935 + 1) = 6;
  v935[16] = 2;
  v8();
  v936 = (void *)(v989 + v3 + 468 * v2);
  v937 = (char *)v936 + v1[14];
  *v936 = 706;
  *(void *)v937 = "WITH";
  *((void *)v937 + 1) = 4;
  v937[16] = 2;
  v8();
  v938 = (void *)(v989 + v3 + 469 * v2);
  v939 = (char *)v938 + v1[14];
  *v938 = 707;
  *(void *)v939 = "WITHIN";
  *((void *)v939 + 1) = 6;
  v939[16] = 2;
  v8();
  v940 = (void *)(v989 + v3 + 470 * v2);
  v941 = (char *)v940 + v1[14];
  *v940 = 708;
  *(void *)v941 = "WITHOUT";
  *((void *)v941 + 1) = 7;
  v941[16] = 2;
  v8();
  v942 = (void *)(v989 + v3 + 471 * v2);
  v943 = (char *)v942 + v1[14];
  *v942 = 709;
  *(void *)v943 = "WORK";
  *((void *)v943 + 1) = 4;
  v943[16] = 2;
  v8();
  v944 = (void *)(v989 + v3 + 472 * v2);
  v945 = (char *)v944 + v1[14];
  *v944 = 710;
  *(void *)v945 = "WRAPPER";
  *((void *)v945 + 1) = 7;
  v945[16] = 2;
  v8();
  v946 = (void *)(v989 + v3 + 473 * v2);
  v947 = (char *)v946 + v1[14];
  *v946 = 711;
  *(void *)v947 = "WRITE";
  *((void *)v947 + 1) = 5;
  v947[16] = 2;
  v8();
  v948 = (void *)(v989 + v3 + 474 * v2);
  v949 = (char *)v948 + v1[14];
  *v948 = 712;
  *(void *)v949 = "XML_P";
  *((void *)v949 + 1) = 5;
  v949[16] = 2;
  v8();
  v950 = (void *)(v989 + v3 + 475 * v2);
  v951 = (char *)v950 + v1[14];
  *v950 = 713;
  *(void *)v951 = "XMLATTRIBUTES";
  *((void *)v951 + 1) = 13;
  v951[16] = 2;
  v8();
  v952 = (void *)(v989 + v3 + 476 * v2);
  v953 = (char *)v952 + v1[14];
  *v952 = 714;
  *(void *)v953 = "XMLCONCAT";
  *((void *)v953 + 1) = 9;
  v953[16] = 2;
  v8();
  v954 = (void *)(v989 + v3 + 477 * v2);
  v955 = (char *)v954 + v1[14];
  *v954 = 715;
  *(void *)v955 = "XMLELEMENT";
  *((void *)v955 + 1) = 10;
  v955[16] = 2;
  v8();
  v956 = (void *)(v989 + v3 + 478 * v2);
  v957 = (char *)v956 + v1[14];
  *v956 = 716;
  *(void *)v957 = "XMLEXISTS";
  *((void *)v957 + 1) = 9;
  v957[16] = 2;
  v8();
  v958 = (void *)(v989 + v3 + 479 * v2);
  v959 = (char *)v958 + v1[14];
  *v958 = 717;
  *(void *)v959 = "XMLFOREST";
  *((void *)v959 + 1) = 9;
  v959[16] = 2;
  v8();
  v960 = (void *)(v989 + v3 + 480 * v2);
  v961 = (char *)v960 + v1[14];
  *v960 = 718;
  *(void *)v961 = "XMLNAMESPACES";
  *((void *)v961 + 1) = 13;
  v961[16] = 2;
  v8();
  v962 = (void *)(v989 + v3 + 481 * v2);
  v963 = (char *)v962 + v1[14];
  *v962 = 719;
  *(void *)v963 = "XMLPARSE";
  *((void *)v963 + 1) = 8;
  v963[16] = 2;
  v8();
  v964 = (void *)(v989 + v3 + 482 * v2);
  v965 = (char *)v964 + v1[14];
  *v964 = 720;
  *(void *)v965 = "XMLPI";
  *((void *)v965 + 1) = 5;
  v965[16] = 2;
  v8();
  v966 = (void *)(v989 + v3 + 483 * v2);
  v967 = (char *)v966 + v1[14];
  *v966 = 721;
  *(void *)v967 = "XMLROOT";
  *((void *)v967 + 1) = 7;
  v967[16] = 2;
  v8();
  v968 = (void *)(v989 + v3 + 484 * v2);
  v969 = (char *)v968 + v1[14];
  *v968 = 722;
  *(void *)v969 = "XMLSERIALIZE";
  *((void *)v969 + 1) = 12;
  v969[16] = 2;
  v8();
  v970 = (void *)(v989 + v3 + 485 * v2);
  v971 = (char *)v970 + v1[14];
  *v970 = 723;
  *(void *)v971 = "XMLTABLE";
  *((void *)v971 + 1) = 8;
  v971[16] = 2;
  v8();
  v972 = (void *)(v989 + v3 + 486 * v2);
  v973 = (char *)v972 + v1[14];
  *v972 = 724;
  *(void *)v973 = "YEAR_P";
  *((void *)v973 + 1) = 6;
  v973[16] = 2;
  v8();
  v974 = (void *)(v989 + v3 + 487 * v2);
  v975 = (char *)v974 + v1[14];
  *v974 = 725;
  *(void *)v975 = "YES_P";
  *((void *)v975 + 1) = 5;
  v975[16] = 2;
  v8();
  v976 = (void *)(v989 + v3 + 488 * v2);
  v977 = (char *)v976 + v1[14];
  *v976 = 726;
  *(void *)v977 = "ZONE";
  *((void *)v977 + 1) = 4;
  v977[16] = 2;
  v8();
  v978 = (void *)(v989 + v3 + 489 * v2);
  v979 = (char *)v978 + v1[14];
  *v978 = 727;
  *(void *)v979 = "NOT_LA";
  *((void *)v979 + 1) = 6;
  v979[16] = 2;
  v8();
  v980 = (void *)(v989 + v3 + 490 * v2);
  v981 = (char *)v980 + v1[14];
  *v980 = 728;
  *(void *)v981 = "NULLS_LA";
  *((void *)v981 + 1) = 8;
  v981[16] = 2;
  v8();
  v982 = (void *)(v989 + v3 + 491 * v2);
  v983 = (char *)v982 + v1[14];
  *v982 = 729;
  *(void *)v983 = "WITH_LA";
  *((void *)v983 + 1) = 7;
  v983[16] = 2;
  v8();
  v984 = (void *)(v989 + v3 + 492 * v2);
  v985 = (char *)v984 + v1[14];
  *v984 = 730;
  *(void *)v985 = "POSTFIXOP";
  *((void *)v985 + 1) = 9;
  v985[16] = 2;
  v8();
  v986 = (void *)(v989 + v3 + 493 * v2);
  v987 = (char *)v986 + v1[14];
  *v986 = 731;
  *(void *)v987 = "UMINUS";
  *((void *)v987 + 1) = 6;
  v987[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ParseResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ParseResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "stmts";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ScanResult._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ScanResult._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "version";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "tokens";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  uint64_t v10;
  void *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  char *v32;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  void *v53;
  char *v54;
  uint64_t v55;
  void *v56;
  char *v57;
  uint64_t v58;
  void *v59;
  char *v60;
  uint64_t v61;
  void *v62;
  char *v63;
  uint64_t v64;
  void *v65;
  char *v66;
  uint64_t v67;
  void *v68;
  char *v69;
  uint64_t v70;
  void *v71;
  char *v72;
  uint64_t v73;
  void *v74;
  char *v75;
  uint64_t v76;
  void *v77;
  char *v78;
  uint64_t v79;
  void *v80;
  char *v81;
  uint64_t v82;
  void *v83;
  char *v84;
  uint64_t v85;
  void *v86;
  char *v87;
  uint64_t v88;
  void *v89;
  char *v90;
  uint64_t v91;
  void *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  char *v97;
  uint64_t v98;
  void *v99;
  char *v100;
  uint64_t v101;
  void *v102;
  char *v103;
  uint64_t v104;
  void *v105;
  char *v106;
  uint64_t v107;
  void *v108;
  char *v109;
  uint64_t v110;
  void *v111;
  char *v112;
  uint64_t v113;
  void *v114;
  char *v115;
  uint64_t v116;
  void *v117;
  char *v118;
  uint64_t v119;
  void *v120;
  char *v121;
  uint64_t v122;
  void *v123;
  char *v124;
  uint64_t v125;
  void *v126;
  char *v127;
  uint64_t v128;
  void *v129;
  char *v130;
  uint64_t v131;
  void *v132;
  char *v133;
  uint64_t v134;
  void *v135;
  char *v136;
  uint64_t v137;
  void *v138;
  char *v139;
  uint64_t v140;
  void *v141;
  char *v142;
  uint64_t v143;
  void *v144;
  char *v145;
  uint64_t v146;
  void *v147;
  char *v148;
  uint64_t v149;
  void *v150;
  char *v151;
  uint64_t v152;
  void *v153;
  char *v154;
  uint64_t v155;
  void *v156;
  char *v157;
  uint64_t v158;
  void *v159;
  char *v160;
  uint64_t v161;
  void *v162;
  char *v163;
  uint64_t v164;
  void *v165;
  char *v166;
  uint64_t v167;
  void *v168;
  char *v169;
  uint64_t v170;
  void *v171;
  char *v172;
  uint64_t v173;
  void *v174;
  char *v175;
  uint64_t v176;
  void *v177;
  char *v178;
  uint64_t v179;
  void *v180;
  char *v181;
  uint64_t v182;
  void *v183;
  char *v184;
  uint64_t v185;
  void *v186;
  char *v187;
  unint64_t v188;
  uint64_t v189;
  void *v190;
  char *v191;
  uint64_t v192;
  void *v193;
  char *v194;
  uint64_t v195;
  void *v196;
  char *v197;
  uint64_t v198;
  void *v199;
  char *v200;
  uint64_t v201;
  void *v202;
  char *v203;
  uint64_t v204;
  void *v205;
  char *v206;
  uint64_t v207;
  void *v208;
  char *v209;
  uint64_t v210;
  void *v211;
  char *v212;
  uint64_t v213;
  void *v214;
  char *v215;
  uint64_t v216;
  void *v217;
  char *v218;
  uint64_t v219;
  void *v220;
  char *v221;
  uint64_t v222;
  void *v223;
  char *v224;
  uint64_t v225;
  void *v226;
  char *v227;
  uint64_t v228;
  void *v229;
  char *v230;
  uint64_t v231;
  void *v232;
  char *v233;
  uint64_t v234;
  void *v235;
  char *v236;
  uint64_t v237;
  void *v238;
  char *v239;
  uint64_t v240;
  void *v241;
  char *v242;
  uint64_t v243;
  void *v244;
  char *v245;
  uint64_t v246;
  void *v247;
  char *v248;
  uint64_t v249;
  void *v250;
  char *v251;
  uint64_t v252;
  void *v253;
  char *v254;
  uint64_t v255;
  void *v256;
  char *v257;
  uint64_t v258;
  void *v259;
  char *v260;
  uint64_t v261;
  void *v262;
  char *v263;
  uint64_t v264;
  void *v265;
  char *v266;
  uint64_t v267;
  void *v268;
  char *v269;
  uint64_t v270;
  void *v271;
  char *v272;
  uint64_t v273;
  void *v274;
  char *v275;
  uint64_t v276;
  void *v277;
  char *v278;
  uint64_t v279;
  void *v280;
  char *v281;
  uint64_t v282;
  void *v283;
  char *v284;
  uint64_t v285;
  void *v286;
  char *v287;
  uint64_t v288;
  void *v289;
  char *v290;
  uint64_t v291;
  void *v292;
  char *v293;
  uint64_t v294;
  void *v295;
  char *v296;
  uint64_t v297;
  void *v298;
  char *v299;
  uint64_t v300;
  void *v301;
  char *v302;
  uint64_t v303;
  void *v304;
  char *v305;
  uint64_t v306;
  void *v307;
  char *v308;
  uint64_t v309;
  void *v310;
  char *v311;
  uint64_t v312;
  void *v313;
  char *v314;
  uint64_t v315;
  void *v316;
  char *v317;
  uint64_t v318;
  void *v319;
  char *v320;
  uint64_t v321;
  void *v322;
  char *v323;
  uint64_t v324;
  void *v325;
  char *v326;
  uint64_t v327;
  void *v328;
  char *v329;
  uint64_t v330;
  void *v331;
  char *v332;
  uint64_t v333;
  void *v334;
  char *v335;
  uint64_t v336;
  void *v337;
  char *v338;
  uint64_t v339;
  void *v340;
  char *v341;
  uint64_t v342;
  void *v343;
  char *v344;
  uint64_t v345;
  void *v346;
  char *v347;
  uint64_t v348;
  void *v349;
  char *v350;
  uint64_t v351;
  void *v352;
  char *v353;
  uint64_t v354;
  void *v355;
  char *v356;
  uint64_t v357;
  void *v358;
  char *v359;
  uint64_t v360;
  void *v361;
  char *v362;
  uint64_t v363;
  void *v364;
  char *v365;
  uint64_t v366;
  void *v367;
  char *v368;
  uint64_t v369;
  void *v370;
  char *v371;
  uint64_t v372;
  void *v373;
  char *v374;
  uint64_t v375;
  void *v376;
  char *v377;
  unint64_t v378;
  uint64_t v379;
  void *v380;
  char *v381;
  uint64_t v382;
  void *v383;
  char *v384;
  uint64_t v385;
  void *v386;
  char *v387;
  uint64_t v388;
  void *v389;
  char *v390;
  uint64_t v391;
  void *v392;
  char *v393;
  uint64_t v394;
  void *v395;
  char *v396;
  uint64_t v397;
  void *v398;
  char *v399;
  uint64_t v400;
  void *v401;
  char *v402;
  uint64_t v403;
  void *v404;
  char *v405;
  uint64_t v406;
  void *v407;
  char *v408;
  uint64_t v409;
  void *v410;
  char *v411;
  uint64_t v412;
  void *v413;
  char *v414;
  uint64_t v415;
  void *v416;
  char *v417;
  uint64_t v418;
  void *v419;
  char *v420;
  uint64_t v421;
  void *v422;
  char *v423;
  uint64_t v424;
  void *v425;
  char *v426;
  uint64_t v427;
  void *v428;
  char *v429;
  uint64_t v430;
  void *v431;
  char *v432;
  uint64_t v433;
  void *v434;
  char *v435;
  uint64_t v436;
  void *v437;
  char *v438;
  uint64_t v439;
  void *v440;
  char *v441;
  uint64_t v442;
  void *v443;
  char *v444;
  uint64_t v445;
  void *v446;
  char *v447;
  uint64_t v448;
  void *v449;
  char *v450;
  uint64_t v451;
  void *v452;
  char *v453;
  uint64_t v454;
  void *v455;
  char *v456;
  uint64_t v457;
  void *v458;
  char *v459;
  uint64_t v460;
  void *v461;
  char *v462;
  uint64_t v463;
  void *v464;
  char *v465;
  uint64_t v466;
  void *v467;
  char *v468;
  uint64_t v469;
  void *v470;
  char *v471;
  uint64_t v472;
  void *v473;
  char *v474;
  uint64_t v475;
  void *v476;
  char *v477;
  uint64_t v478;
  void *v479;
  char *v480;
  uint64_t v481;
  void *v482;
  char *v483;
  uint64_t v484;
  void *v485;
  char *v486;
  uint64_t v487;
  void *v488;
  char *v489;
  uint64_t v490;
  void *v491;
  char *v492;
  uint64_t v493;
  void *v494;
  char *v495;
  uint64_t v496;
  void *v497;
  char *v498;
  uint64_t v499;
  void *v500;
  char *v501;
  uint64_t v502;
  void *v503;
  char *v504;
  uint64_t v505;
  void *v506;
  char *v507;
  uint64_t v508;
  void *v509;
  char *v510;
  uint64_t v511;
  void *v512;
  char *v513;
  uint64_t v514;
  void *v515;
  char *v516;
  uint64_t v517;
  void *v518;
  char *v519;
  uint64_t v520;
  void *v521;
  char *v522;
  uint64_t v523;
  void *v524;
  char *v525;
  uint64_t v526;
  void *v527;
  char *v528;
  uint64_t v529;
  void *v530;
  char *v531;
  uint64_t v532;
  void *v533;
  char *v534;
  uint64_t v535;
  void *v536;
  char *v537;
  uint64_t v538;
  void *v539;
  char *v540;
  uint64_t v541;
  void *v542;
  char *v543;
  uint64_t v544;
  void *v545;
  char *v546;
  uint64_t v547;
  void *v548;
  char *v549;
  uint64_t v550;
  void *v551;
  char *v552;
  uint64_t v553;
  void *v554;
  char *v555;
  uint64_t v556;
  void *v557;
  char *v558;
  uint64_t v559;
  void *v560;
  char *v561;
  uint64_t v562;
  void *v563;
  char *v564;
  uint64_t v565;
  void *v566;
  char *v567;
  uint64_t v568;
  void *v569;
  char *v570;
  uint64_t v571;
  void *v572;
  char *v573;
  uint64_t v574;
  void *v575;
  char *v576;
  uint64_t v577;
  void *v578;
  char *v579;
  uint64_t v580;
  void *v581;
  char *v582;
  uint64_t v583;
  void *v584;
  char *v585;
  uint64_t v586;
  void *v587;
  char *v588;
  uint64_t v589;
  void *v590;
  char *v591;
  uint64_t v592;
  void *v593;
  char *v594;
  uint64_t v595;
  void *v596;
  char *v597;
  uint64_t v598;
  void *v599;
  char *v600;
  uint64_t v601;
  void *v602;
  char *v603;
  uint64_t v604;
  void *v605;
  char *v606;
  uint64_t v607;
  void *v608;
  char *v609;
  uint64_t v610;
  void *v611;
  char *v612;
  uint64_t v613;
  void *v614;
  char *v615;
  uint64_t v616;
  void *v617;
  char *v618;
  uint64_t v619;
  void *v620;
  char *v621;
  uint64_t v622;
  void *v623;
  char *v624;
  uint64_t v625;
  void *v626;
  char *v627;
  uint64_t v628;
  void *v629;
  char *v630;
  uint64_t v631;
  void *v632;
  char *v633;
  uint64_t v634;
  void *v635;
  char *v636;
  uint64_t v637;
  void *v638;
  char *v639;
  uint64_t v640;
  void *v641;
  char *v642;
  uint64_t v643;
  void *v644;
  char *v645;
  uint64_t v646;
  void *v647;
  char *v648;
  uint64_t v649;
  void *v650;
  char *v651;
  uint64_t v652;
  void *v653;
  char *v654;
  uint64_t v655;
  void *v656;
  char *v657;
  uint64_t v658;
  void *v659;
  char *v660;
  uint64_t v661;
  void *v662;
  char *v663;
  uint64_t v664;
  void *v665;
  char *v666;
  uint64_t v667;
  void *v668;
  char *v669;
  uint64_t v670;
  void *v671;
  char *v672;
  uint64_t v673;
  void *v674;
  char *v675;
  uint64_t v677;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Node._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Node._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  v677 = swift_allocObject();
  *(_OWORD *)(v677 + 16) = xmmword_18EB38E20;
  uint64_t v4 = v677 + v3;
  unint64_t v5 = v677 + v3 + v1[14];
  *(void *)(v677 + v3) = 1;
  *(void *)unint64_t v5 = "alias";
  *(void *)(v5 + 8) = 5;
  *(unsigned char *)(v5 + 16) = 2;
  *(void *)(v5 + 24) = "Alias";
  *(void *)(v5 + 32) = 5;
  *(unsigned char *)(v5 + 40) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FC0];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v677 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "range_var";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  *(void *)(v9 + 24) = "RangeVar";
  *(void *)(v9 + 32) = 8;
  *(unsigned char *)(v9 + 40) = 2;
  v8();
  unint64_t v10 = v1[14];
  uint64_t v11 = (void *)(v677 + v3 + 2 * v2);
  *uint64_t v11 = 3;
  uint64_t v12 = (char *)v11 + v10;
  *(void *)uint64_t v12 = "table_func";
  *((void *)v12 + 1) = 10;
  void v12[16] = 2;
  *((void *)v12 + 3) = "TableFunc";
  *((void *)v12 + 4) = 9;
  v12[40] = 2;
  v8();
  uint64_t v13 = v1[14];
  uint64_t v14 = (void *)(v677 + v3 + 3 * v2);
  *uint64_t v14 = 4;
  char v15 = (char *)v14 + v13;
  *(void *)char v15 = "expr";
  *((void *)v15 + 1) = 4;
  v15[16] = 2;
  *((void *)v15 + 3) = "Expr";
  *((void *)v15 + 4) = 4;
  v15[40] = 2;
  v8();
  uint64_t v16 = (void *)(v677 + v3 + 4 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 5;
  *(void *)uint64_t v17 = "var";
  *((void *)v17 + 1) = 3;
  v17[16] = 2;
  *((void *)v17 + 3) = "Var";
  *((void *)v17 + 4) = 3;
  v17[40] = 2;
  v8();
  uint64_t v18 = v1[14];
  uint64_t v19 = (void *)(v677 + v3 + 5 * v2);
  *uint64_t v19 = 6;
  unint64_t v20 = (char *)v19 + v18;
  *(void *)unint64_t v20 = "param";
  *((void *)v20 + 1) = 5;
  v20[16] = 2;
  *((void *)v20 + 3) = "Param";
  *((void *)v20 + 4) = 5;
  v20[40] = 2;
  v8();
  uint64_t v21 = v1[14];
  Swift::String v22 = (void *)(v677 + v3 + 6 * v2);
  *Swift::String v22 = 7;
  uint64_t v23 = (char *)v22 + v21;
  *(void *)uint64_t v23 = "aggref";
  *((void *)v23 + 1) = 6;
  v23[16] = 2;
  *((void *)v23 + 3) = "Aggref";
  *((void *)v23 + 4) = 6;
  v23[40] = 2;
  v8();
  Swift::String v24 = v1[14];
  char v25 = (void *)(v677 + v3 + 7 * v2);
  *char v25 = 8;
  uint64_t v26 = (char *)v25 + v24;
  *(void *)uint64_t v26 = "grouping_func";
  *((void *)v26 + 1) = 13;
  v26[16] = 2;
  *((void *)v26 + 3) = "GroupingFunc";
  *((void *)v26 + 4) = 12;
  v26[40] = 2;
  v8();
  uint64_t v27 = v677 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)uint64_t v27 = "window_func";
  *(void *)(v27 + 8) = 11;
  *(unsigned char *)(v27 + 16) = 2;
  *(void *)(v27 + 24) = "WindowFunc";
  *(void *)(v27 + 32) = 10;
  *(unsigned char *)(v27 + 40) = 2;
  v8();
  Swift::String v28 = (void *)(v677 + v3 + 9 * v2);
  uint64_t v29 = (char *)v28 + v1[14];
  unint64_t *v28 = 10;
  *(void *)uint64_t v29 = "subscripting_ref";
  *((void *)v29 + 1) = 16;
  v29[16] = 2;
  *((void *)v29 + 3) = "SubscriptingRef";
  *((void *)v29 + 4) = 15;
  v29[40] = 2;
  v8();
  uint64_t v30 = v1[14];
  unint64_t v31 = (void *)(v677 + v3 + 10 * v2);
  void *v31 = 11;
  uint64_t v32 = (char *)v31 + v30;
  *(void *)uint64_t v32 = "func_expr";
  *((void *)v32 + 1) = 9;
  v32[16] = 2;
  *((void *)v32 + 3) = "FuncExpr";
  *((void *)v32 + 4) = 8;
  v32[40] = 2;
  v8();
  int v33 = v1[14];
  uint64_t v34 = (void *)(v677 + v3 + 11 * v2);
  *uint64_t v34 = 12;
  uint64_t v35 = (char *)v34 + v33;
  *(void *)uint64_t v35 = "named_arg_expr";
  *((void *)v35 + 1) = 14;
  v35[16] = 2;
  *((void *)v35 + 3) = "NamedArgExpr";
  *((void *)v35 + 4) = 12;
  v35[40] = 2;
  v8();
  uint64_t v36 = v1[14];
  uint64_t v37 = (void *)(v677 + v3 + 12 * v2);
  *uint64_t v37 = 13;
  uint64_t v38 = (char *)v37 + v36;
  *(void *)uint64_t v38 = "op_expr";
  *((void *)v38 + 1) = 7;
  v38[16] = 2;
  *((void *)v38 + 3) = "OpExpr";
  *((void *)v38 + 4) = 6;
  v38[40] = 2;
  v8();
  uint64_t v39 = v1[14];
  uint64_t v40 = (void *)(v677 + v3 + 13 * v2);
  *uint64_t v40 = 14;
  uint64_t v41 = (char *)v40 + v39;
  *(void *)uint64_t v41 = "distinct_expr";
  *((void *)v41 + 1) = 13;
  v41[16] = 2;
  *((void *)v41 + 3) = "DistinctExpr";
  *((void *)v41 + 4) = 12;
  v41[40] = 2;
  v8();
  unint64_t v42 = v1[14];
  uint64_t v43 = (void *)(v677 + v3 + 14 * v2);
  char *v43 = 15;
  uint64_t v44 = (char *)v43 + v42;
  *(void *)uint64_t v44 = "null_if_expr";
  *((void *)v44 + 1) = 12;
  v44[16] = 2;
  *((void *)v44 + 3) = "NullIfExpr";
  *((void *)v44 + 4) = 10;
  v44[40] = 2;
  v8();
  unint64_t v45 = v1[14];
  uint64_t v46 = (void *)(v677 + v3 + 15 * v2);
  *uint64_t v46 = 16;
  Swift::String v47 = (char *)v46 + v45;
  *(void *)Swift::String v47 = "scalar_array_op_expr";
  *((void *)v47 + 1) = 20;
  v47[16] = 2;
  *((void *)v47 + 3) = "ScalarArrayOpExpr";
  *((void *)v47 + 4) = 17;
  v47[40] = 2;
  v8();
  Swift::String v48 = v677 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)Swift::String v48 = "BOOL_expr";
  *(void *)(v48 + 8) = 9;
  *(unsigned char *)(v48 + 16) = 2;
  *(void *)(v48 + 24) = "BoolExpr";
  *(void *)(v48 + 32) = 8;
  *(unsigned char *)(v48 + 40) = 2;
  v8();
  unint64_t v49 = v1[14];
  unint64_t v50 = (void *)(v677 + v3 + 17 * v2);
  *unint64_t v50 = 18;
  uint64_t v51 = (char *)v50 + v49;
  *(void *)uint64_t v51 = "sub_link";
  *((void *)v51 + 1) = 8;
  v51[16] = 2;
  *((void *)v51 + 3) = "SubLink";
  *((void *)v51 + 4) = 7;
  v51[40] = 2;
  v8();
  uint64_t v52 = v1[14];
  uint64_t v53 = (void *)(v677 + v3 + 18 * v2);
  *uint64_t v53 = 19;
  uint64_t v54 = (char *)v53 + v52;
  *(void *)uint64_t v54 = "sub_plan";
  *((void *)v54 + 1) = 8;
  v54[16] = 2;
  *((void *)v54 + 3) = "SubPlan";
  *((void *)v54 + 4) = 7;
  v54[40] = 2;
  v8();
  uint64_t v55 = v1[14];
  uint64_t v56 = (void *)(v677 + v3 + 19 * v2);
  *uint64_t v56 = 20;
  uint64_t v57 = (char *)v56 + v55;
  *(void *)uint64_t v57 = "alternative_sub_plan";
  *((void *)v57 + 1) = 20;
  v57[16] = 2;
  *((void *)v57 + 3) = "AlternativeSubPlan";
  *((void *)v57 + 4) = 18;
  v57[40] = 2;
  v8();
  uint64_t v58 = v1[14];
  int v59 = (void *)(v677 + v3 + 20 * v2);
  *int v59 = 21;
  uint64_t v60 = (char *)v59 + v58;
  *(void *)uint64_t v60 = "field_select";
  *((void *)v60 + 1) = 12;
  v60[16] = 2;
  *((void *)v60 + 3) = "FieldSelect";
  *((void *)v60 + 4) = 11;
  v60[40] = 2;
  v8();
  uint64_t v61 = v1[14];
  uint64_t v62 = (void *)(v677 + v3 + 21 * v2);
  *uint64_t v62 = 22;
  uint64_t v63 = (char *)v62 + v61;
  *(void *)uint64_t v63 = "field_store";
  *((void *)v63 + 1) = 11;
  v63[16] = 2;
  *((void *)v63 + 3) = "FieldStore";
  *((void *)v63 + 4) = 10;
  v63[40] = 2;
  v8();
  uint64_t v64 = v1[14];
  uint64_t v65 = (void *)(v677 + v3 + 22 * v2);
  *uint64_t v65 = 23;
  uint64_t v66 = (char *)v65 + v64;
  *(void *)uint64_t v66 = "relabel_type";
  *((void *)v66 + 1) = 12;
  v66[16] = 2;
  *((void *)v66 + 3) = "RelabelType";
  *((void *)v66 + 4) = 11;
  v66[40] = 2;
  v8();
  uint64_t v67 = v1[14];
  unint64_t v68 = (void *)(v677 + v3 + 23 * v2);
  *unint64_t v68 = 24;
  uint64_t v69 = (char *)v68 + v67;
  *(void *)uint64_t v69 = "coerce_via_io";
  *((void *)v69 + 1) = 13;
  v69[16] = 2;
  *((void *)v69 + 3) = "CoerceViaIO";
  *((void *)v69 + 4) = 11;
  v69[40] = 2;
  v8();
  Swift::String v70 = v1[14];
  Swift::String v71 = (void *)(v677 + v3 + 24 * v2);
  *Swift::String v71 = 25;
  unint64_t v72 = (char *)v71 + v70;
  *(void *)unint64_t v72 = "array_coerce_expr";
  *((void *)v72 + 1) = 17;
  v72[16] = 2;
  *((void *)v72 + 3) = "ArrayCoerceExpr";
  *((void *)v72 + 4) = 15;
  v72[40] = 2;
  v8();
  uint64_t v73 = v1[14];
  Swift::String v74 = (void *)(v677 + v3 + 25 * v2);
  *Swift::String v74 = 26;
  uint64_t v75 = (char *)v74 + v73;
  *(void *)uint64_t v75 = "convert_rowtype_expr";
  *((void *)v75 + 1) = 20;
  v75[16] = 2;
  *((void *)v75 + 3) = "ConvertRowtypeExpr";
  *((void *)v75 + 4) = 18;
  v75[40] = 2;
  v8();
  uint64_t v76 = v1[14];
  uint64_t v77 = (void *)(v677 + v3 + 26 * v2);
  *uint64_t v77 = 27;
  uint64_t v78 = (char *)v77 + v76;
  *(void *)uint64_t v78 = "collate_expr";
  *((void *)v78 + 1) = 12;
  v78[16] = 2;
  *((void *)v78 + 3) = "CollateExpr";
  *((void *)v78 + 4) = 11;
  v78[40] = 2;
  v8();
  uint64_t v79 = v1[14];
  int v80 = (void *)(v677 + v3 + 27 * v2);
  *int v80 = 28;
  uint64_t v81 = (char *)v80 + v79;
  *(void *)uint64_t v81 = "case_expr";
  *((void *)v81 + 1) = 9;
  v81[16] = 2;
  *((void *)v81 + 3) = "CaseExpr";
  *((void *)v81 + 4) = 8;
  v81[40] = 2;
  v8();
  uint64_t v82 = v1[14];
  uint64_t v83 = (void *)(v677 + v3 + 28 * v2);
  *uint64_t v83 = 29;
  uint64_t v84 = (char *)v83 + v82;
  *(void *)uint64_t v84 = "case_when";
  *((void *)v84 + 1) = 9;
  v84[16] = 2;
  *((void *)v84 + 3) = "CaseWhen";
  *((void *)v84 + 4) = 8;
  v84[40] = 2;
  v8();
  uint64_t v85 = v1[14];
  uint64_t v86 = (void *)(v677 + v3 + 29 * v2);
  *uint64_t v86 = 30;
  uint64_t v87 = (char *)v86 + v85;
  *(void *)uint64_t v87 = "case_test_expr";
  *((void *)v87 + 1) = 14;
  v87[16] = 2;
  *((void *)v87 + 3) = "CaseTestExpr";
  *((void *)v87 + 4) = 12;
  v87[40] = 2;
  v8();
  uint64_t v88 = v1[14];
  uint64_t v89 = (void *)(v677 + v3 + 30 * v2);
  *uint64_t v89 = 31;
  uint64_t v90 = (char *)v89 + v88;
  *(void *)uint64_t v90 = "array_expr";
  *((void *)v90 + 1) = 10;
  v90[16] = 2;
  *((void *)v90 + 3) = "ArrayExpr";
  *((void *)v90 + 4) = 9;
  v90[40] = 2;
  v8();
  unint64_t v91 = v1[14];
  uint64_t v92 = (void *)(v677 + v3 + 31 * v2);
  *uint64_t v92 = 32;
  uint64_t v93 = (char *)v92 + v91;
  *(void *)uint64_t v93 = "row_expr";
  *((void *)v93 + 1) = 8;
  v93[16] = 2;
  *((void *)v93 + 3) = "RowExpr";
  *((void *)v93 + 4) = 7;
  v93[40] = 2;
  v8();
  unint64_t v94 = v677 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 33;
  *(void *)unint64_t v94 = "row_compare_expr";
  *(void *)(v94 + 8) = 16;
  *(unsigned char *)(v94 + 16) = 2;
  *(void *)(v94 + 24) = "RowCompareExpr";
  *(void *)(v94 + 32) = 14;
  *(unsigned char *)(v94 + 40) = 2;
  v8();
  uint64_t v95 = v1[14];
  Swift::String v96 = (void *)(v677 + v3 + 33 * v2);
  *Swift::String v96 = 34;
  Swift::String v97 = (char *)v96 + v95;
  *(void *)Swift::String v97 = "coalesce_expr";
  *((void *)v97 + 1) = 13;
  v97[16] = 2;
  *((void *)v97 + 3) = "CoalesceExpr";
  *((void *)v97 + 4) = 12;
  v97[40] = 2;
  v8();
  unint64_t v98 = v1[14];
  uint64_t v99 = (void *)(v677 + v3 + 34 * v2);
  *uint64_t v99 = 35;
  uint64_t v100 = (char *)v99 + v98;
  *(void *)uint64_t v100 = "min_max_expr";
  *((void *)v100 + 1) = 12;
  v100[16] = 2;
  *((void *)v100 + 3) = "MinMaxExpr";
  *((void *)v100 + 4) = 10;
  v100[40] = 2;
  v8();
  Swift::String v101 = v1[14];
  Swift::String v102 = (void *)(v677 + v3 + 35 * v2);
  *Swift::String v102 = 36;
  uint64_t v103 = (char *)v102 + v101;
  *(void *)uint64_t v103 = "sqlvalue_function";
  *((void *)v103 + 1) = 17;
  v103[16] = 2;
  *((void *)v103 + 3) = "SQLValueFunction";
  *((void *)v103 + 4) = 16;
  v103[40] = 2;
  v8();
  uint64_t v104 = v1[14];
  uint64_t v105 = (void *)(v677 + v3 + 36 * v2);
  *uint64_t v105 = 37;
  uint64_t v106 = (char *)v105 + v104;
  *(void *)uint64_t v106 = "xml_expr";
  *((void *)v106 + 1) = 8;
  v106[16] = 2;
  *((void *)v106 + 3) = "XmlExpr";
  *((void *)v106 + 4) = 7;
  v106[40] = 2;
  v8();
  uint64_t v107 = v1[14];
  uint64_t v108 = (void *)(v677 + v3 + 37 * v2);
  *uint64_t v108 = 38;
  uint64_t v109 = (char *)v108 + v107;
  *(void *)uint64_t v109 = "null_test";
  *((void *)v109 + 1) = 9;
  v109[16] = 2;
  *((void *)v109 + 3) = "NullTest";
  *((void *)v109 + 4) = 8;
  v109[40] = 2;
  v8();
  uint64_t v110 = v1[14];
  uint64_t v111 = (void *)(v677 + v3 + 38 * v2);
  *uint64_t v111 = 39;
  uint64_t v112 = (char *)v111 + v110;
  *(void *)uint64_t v112 = "BOOLean_test";
  *((void *)v112 + 1) = 12;
  v112[16] = 2;
  *((void *)v112 + 3) = "BooleanTest";
  *((void *)v112 + 4) = 11;
  v112[40] = 2;
  v8();
  uint64_t v113 = v1[14];
  uint64_t v114 = (void *)(v677 + v3 + 39 * v2);
  *uint64_t v114 = 40;
  uint64_t v115 = (char *)v114 + v113;
  *(void *)uint64_t v115 = "coerce_to_domain";
  *((void *)v115 + 1) = 16;
  v115[16] = 2;
  *((void *)v115 + 3) = "CoerceToDomain";
  *((void *)v115 + 4) = 14;
  v115[40] = 2;
  v8();
  uint64_t v116 = v1[14];
  uint64_t v117 = (void *)(v677 + v3 + 40 * v2);
  *uint64_t v117 = 41;
  uint64_t v118 = (char *)v117 + v116;
  *(void *)uint64_t v118 = "coerce_to_domain_value";
  *((void *)v118 + 1) = 22;
  v118[16] = 2;
  *((void *)v118 + 3) = "CoerceToDomainValue";
  *((void *)v118 + 4) = 19;
  v118[40] = 2;
  v8();
  uint64_t v119 = v1[14];
  uint64_t v120 = (void *)(v677 + v3 + 41 * v2);
  *uint64_t v120 = 42;
  uint64_t v121 = (char *)v120 + v119;
  *(void *)uint64_t v121 = "set_to_default";
  *((void *)v121 + 1) = 14;
  v121[16] = 2;
  *((void *)v121 + 3) = "SetToDefault";
  *((void *)v121 + 4) = 12;
  v121[40] = 2;
  v8();
  uint64_t v122 = v1[14];
  uint64_t v123 = (void *)(v677 + v3 + 42 * v2);
  *uint64_t v123 = 43;
  unint64_t v124 = (char *)v123 + v122;
  *(void *)unint64_t v124 = "current_of_expr";
  *((void *)v124 + 1) = 15;
  v124[16] = 2;
  *((void *)v124 + 3) = "CurrentOfExpr";
  *((void *)v124 + 4) = 13;
  v124[40] = 2;
  v8();
  uint64_t v125 = v1[14];
  unint64_t v126 = (void *)(v677 + v3 + 43 * v2);
  *unint64_t v126 = 44;
  unint64_t v127 = (char *)v126 + v125;
  *(void *)unint64_t v127 = "next_value_expr";
  *((void *)v127 + 1) = 15;
  id v127[16] = 2;
  *((void *)v127 + 3) = "NextValueExpr";
  *((void *)v127 + 4) = 13;
  v127[40] = 2;
  v8();
  uint64_t v128 = v1[14];
  uint64_t v129 = (void *)(v677 + v3 + 44 * v2);
  Swift::String *v129 = 45;
  uint64_t v130 = (char *)v129 + v128;
  *(void *)uint64_t v130 = "inference_elem";
  *((void *)v130 + 1) = 14;
  v130[16] = 2;
  *((void *)v130 + 3) = "InferenceElem";
  *((void *)v130 + 4) = 13;
  v130[40] = 2;
  v8();
  uint64_t v131 = v1[14];
  uint64_t v132 = (void *)(v677 + v3 + 45 * v2);
  *uint64_t v132 = 46;
  uint64_t v133 = (char *)v132 + v131;
  *(void *)uint64_t v133 = "target_entry";
  *((void *)v133 + 1) = 12;
  v133[16] = 2;
  *((void *)v133 + 3) = "TargetEntry";
  *((void *)v133 + 4) = 11;
  v133[40] = 2;
  v8();
  uint64_t v134 = v1[14];
  Swift::String v135 = (void *)(v677 + v3 + 46 * v2);
  *Swift::String v135 = 47;
  Swift::String v136 = (char *)v135 + v134;
  *(void *)Swift::String v136 = "range_tbl_ref";
  *((void *)v136 + 1) = 13;
  v136[16] = 2;
  *((void *)v136 + 3) = "RangeTblRef";
  *((void *)v136 + 4) = 11;
  v136[40] = 2;
  v8();
  Swift::String v137 = v1[14];
  Swift::String v138 = (void *)(v677 + v3 + 47 * v2);
  void *v138 = 48;
  uint64_t v139 = (char *)v138 + v137;
  *(void *)uint64_t v139 = "join_expr";
  *((void *)v139 + 1) = 9;
  v139[16] = 2;
  *((void *)v139 + 3) = "JoinExpr";
  *((void *)v139 + 4) = 8;
  v139[40] = 2;
  v8();
  uint64_t v140 = v1[14];
  uint64_t v141 = (void *)(v677 + v3 + 48 * v2);
  void *v141 = 49;
  uint64_t v142 = (char *)v141 + v140;
  *(void *)uint64_t v142 = "from_expr";
  *((void *)v142 + 1) = 9;
  v142[16] = 2;
  *((void *)v142 + 3) = "FromExpr";
  *((void *)v142 + 4) = 8;
  v142[40] = 2;
  v8();
  char v143 = v1[14];
  uint64_t v144 = (void *)(v677 + v3 + 49 * v2);
  uint64_t *v144 = 50;
  uint64_t v145 = (char *)v144 + v143;
  *(void *)uint64_t v145 = "on_conflict_expr";
  *((void *)v145 + 1) = 16;
  v145[16] = 2;
  *((void *)v145 + 3) = "OnConflictExpr";
  *((void *)v145 + 4) = 14;
  v145[40] = 2;
  v8();
  uint64_t v146 = v1[14];
  uint64_t v147 = (void *)(v677 + v3 + 50 * v2);
  *uint64_t v147 = 51;
  uint64_t v148 = (char *)v147 + v146;
  *(void *)uint64_t v148 = "into_clause";
  *((void *)v148 + 1) = 11;
  v148[16] = 2;
  *((void *)v148 + 3) = "IntoClause";
  *((void *)v148 + 4) = 10;
  v148[40] = 2;
  v8();
  uint64_t v149 = v1[14];
  char v150 = (void *)(v677 + v3 + 51 * v2);
  *char v150 = 52;
  uint64_t v151 = (char *)v150 + v149;
  *(void *)uint64_t v151 = "raw_stmt";
  *((void *)v151 + 1) = 8;
  v151[16] = 2;
  *((void *)v151 + 3) = "RawStmt";
  *((void *)v151 + 4) = 7;
  v151[40] = 2;
  v8();
  uint64_t v152 = v1[14];
  uint64_t v153 = (void *)(v677 + v3 + 52 * v2);
  *uint64_t v153 = 53;
  uint64_t v154 = (char *)v153 + v152;
  *(void *)uint64_t v154 = "query";
  *((void *)v154 + 1) = 5;
  v154[16] = 2;
  *((void *)v154 + 3) = "Query";
  *((void *)v154 + 4) = 5;
  v154[40] = 2;
  v8();
  uint64_t v155 = v1[14];
  uint64_t v156 = (void *)(v677 + v3 + 53 * v2);
  *uint64_t v156 = 54;
  uint64_t v157 = (char *)v156 + v155;
  *(void *)uint64_t v157 = "insert_stmt";
  *((void *)v157 + 1) = 11;
  v157[16] = 2;
  *((void *)v157 + 3) = "InsertStmt";
  *((void *)v157 + 4) = 10;
  v157[40] = 2;
  v8();
  uint64_t v158 = v1[14];
  uint64_t v159 = (void *)(v677 + v3 + 54 * v2);
  *uint64_t v159 = 55;
  uint64_t v160 = (char *)v159 + v158;
  *(void *)uint64_t v160 = "delete_stmt";
  *((void *)v160 + 1) = 11;
  v160[16] = 2;
  *((void *)v160 + 3) = "DeleteStmt";
  *((void *)v160 + 4) = 10;
  v160[40] = 2;
  v8();
  uint64_t v161 = v1[14];
  uint64_t v162 = (void *)(v677 + v3 + 55 * v2);
  *uint64_t v162 = 56;
  v163 = (char *)v162 + v161;
  *(void *)v163 = "update_stmt";
  *((void *)v163 + 1) = 11;
  v163[16] = 2;
  *((void *)v163 + 3) = "UpdateStmt";
  *((void *)v163 + 4) = 10;
  v163[40] = 2;
  v8();
  uint64_t v164 = v1[14];
  uint64_t v165 = (void *)(v677 + v3 + 56 * v2);
  *uint64_t v165 = 57;
  uint64_t v166 = (char *)v165 + v164;
  *(void *)uint64_t v166 = "select_stmt";
  *((void *)v166 + 1) = 11;
  v166[16] = 2;
  *((void *)v166 + 3) = "SelectStmt";
  *((void *)v166 + 4) = 10;
  v166[40] = 2;
  v8();
  uint64_t v167 = v1[14];
  uint64_t v168 = (void *)(v677 + v3 + 57 * v2);
  *uint64_t v168 = 58;
  uint64_t v169 = (char *)v168 + v167;
  *(void *)uint64_t v169 = "alter_table_stmt";
  *((void *)v169 + 1) = 16;
  v169[16] = 2;
  *((void *)v169 + 3) = "AlterTableStmt";
  *((void *)v169 + 4) = 14;
  v169[40] = 2;
  v8();
  v170 = v1[14];
  uint64_t v171 = (void *)(v677 + v3 + 58 * v2);
  *uint64_t v171 = 59;
  uint64_t v172 = (char *)v171 + v170;
  *(void *)uint64_t v172 = "alter_table_cmd";
  *((void *)v172 + 1) = 15;
  v172[16] = 2;
  *((void *)v172 + 3) = "AlterTableCmd";
  *((void *)v172 + 4) = 13;
  v172[40] = 2;
  v8();
  uint64_t v173 = v1[14];
  v174 = (void *)(v677 + v3 + 59 * v2);
  *v174 = 60;
  uint64_t v175 = (char *)v174 + v173;
  *(void *)uint64_t v175 = "alter_domain_stmt";
  *((void *)v175 + 1) = 17;
  v175[16] = 2;
  *((void *)v175 + 3) = "AlterDomainStmt";
  *((void *)v175 + 4) = 15;
  v175[40] = 2;
  v8();
  uint64_t v176 = v1[14];
  uint64_t v177 = (void *)(v677 + v3 + 60 * v2);
  *uint64_t v177 = 61;
  uint64_t v178 = (char *)v177 + v176;
  *(void *)uint64_t v178 = "set_operation_stmt";
  *((void *)v178 + 1) = 18;
  v178[16] = 2;
  *((void *)v178 + 3) = "SetOperationStmt";
  *((void *)v178 + 4) = 16;
  v178[40] = 2;
  v8();
  uint64_t v179 = v1[14];
  uint64_t v180 = (void *)(v677 + v3 + 61 * v2);
  *uint64_t v180 = 62;
  uint64_t v181 = (char *)v180 + v179;
  *(void *)uint64_t v181 = "grant_stmt";
  *((void *)v181 + 1) = 10;
  v181[16] = 2;
  *((void *)v181 + 3) = "GrantStmt";
  *((void *)v181 + 4) = 9;
  v181[40] = 2;
  v8();
  uint64_t v182 = v1[14];
  uint64_t v183 = (void *)(v677 + v3 + 62 * v2);
  *uint64_t v183 = 63;
  char v184 = (char *)v183 + v182;
  *(void *)char v184 = "grant_role_stmt";
  *((void *)v184 + 1) = 15;
  v184[16] = 2;
  *((void *)v184 + 3) = "GrantRoleStmt";
  *((void *)v184 + 4) = 13;
  v184[40] = 2;
  v8();
  uint64_t v185 = v1[14];
  uint64_t v186 = (void *)(v677 + v3 + 63 * v2);
  *uint64_t v186 = 64;
  uint64_t v187 = (char *)v186 + v185;
  *(void *)uint64_t v187 = "alter_default_privileges_stmt";
  *((void *)v187 + 1) = 29;
  v187[16] = 2;
  *((void *)v187 + 3) = "AlterDefaultPrivilegesStmt";
  *((void *)v187 + 4) = 26;
  v187[40] = 2;
  v8();
  uint64_t v188 = v677 + v3 + (v2 << 6) + v1[14];
  *(void *)(v4 + (v2 << 6)) = 65;
  *(void *)uint64_t v188 = "close_portal_stmt";
  *(void *)(v188 + 8) = 17;
  *(unsigned char *)(v188 + 16) = 2;
  *(void *)(v188 + 24) = "ClosePortalStmt";
  *(void *)(v188 + 32) = 15;
  *(unsigned char *)(v188 + 40) = 2;
  v8();
  uint64_t v189 = v1[14];
  uint64_t v190 = (void *)(v677 + v3 + 65 * v2);
  *uint64_t v190 = 66;
  uint64_t v191 = (char *)v190 + v189;
  *(void *)uint64_t v191 = "cluster_stmt";
  *((void *)v191 + 1) = 12;
  v191[16] = 2;
  *((void *)v191 + 3) = "ClusterStmt";
  *((void *)v191 + 4) = 11;
  v191[40] = 2;
  v8();
  uint64_t v192 = v1[14];
  uint64_t v193 = (void *)(v677 + v3 + 66 * v2);
  unint64_t *v193 = 67;
  uint64_t v194 = (char *)v193 + v192;
  *(void *)uint64_t v194 = "copy_stmt";
  *((void *)v194 + 1) = 9;
  v194[16] = 2;
  *((void *)v194 + 3) = "CopyStmt";
  *((void *)v194 + 4) = 8;
  v194[40] = 2;
  v8();
  uint64_t v195 = v1[14];
  uint64_t v196 = (void *)(v677 + v3 + 67 * v2);
  char *v196 = 68;
  v197 = (char *)v196 + v195;
  *(void *)v197 = "create_stmt";
  *((void *)v197 + 1) = 11;
  v197[16] = 2;
  *((void *)v197 + 3) = "CreateStmt";
  *((void *)v197 + 4) = 10;
  v197[40] = 2;
  v8();
  uint64_t v198 = v1[14];
  uint64_t v199 = (void *)(v677 + v3 + 68 * v2);
  *uint64_t v199 = 69;
  uint64_t v200 = (char *)v199 + v198;
  *(void *)uint64_t v200 = "define_stmt";
  *((void *)v200 + 1) = 11;
  v200[16] = 2;
  *((void *)v200 + 3) = "DefineStmt";
  *((void *)v200 + 4) = 10;
  v200[40] = 2;
  v8();
  uint64_t v201 = v1[14];
  uint64_t v202 = (void *)(v677 + v3 + 69 * v2);
  *uint64_t v202 = 70;
  uint64_t v203 = (char *)v202 + v201;
  *(void *)uint64_t v203 = "drop_stmt";
  *((void *)v203 + 1) = 9;
  v203[16] = 2;
  *((void *)v203 + 3) = "DropStmt";
  *((void *)v203 + 4) = 8;
  v203[40] = 2;
  v8();
  uint64_t v204 = v1[14];
  uint64_t v205 = (void *)(v677 + v3 + 70 * v2);
  *uint64_t v205 = 71;
  uint64_t v206 = (char *)v205 + v204;
  *(void *)uint64_t v206 = "truncate_stmt";
  *((void *)v206 + 1) = 13;
  v206[16] = 2;
  *((void *)v206 + 3) = "TruncateStmt";
  *((void *)v206 + 4) = 12;
  v206[40] = 2;
  v8();
  uint64_t v207 = v1[14];
  uint64_t v208 = (void *)(v677 + v3 + 71 * v2);
  *uint64_t v208 = 72;
  long long v209 = (char *)v208 + v207;
  *(void *)long long v209 = "comment_stmt";
  *((void *)v209 + 1) = 12;
  v209[16] = 2;
  *((void *)v209 + 3) = "CommentStmt";
  *((void *)v209 + 4) = 11;
  v209[40] = 2;
  v8();
  v210 = v1[14];
  uint64_t v211 = (void *)(v677 + v3 + 72 * v2);
  *uint64_t v211 = 73;
  uint64_t v212 = (char *)v211 + v210;
  *(void *)uint64_t v212 = "fetch_stmt";
  *((void *)v212 + 1) = 10;
  v212[16] = 2;
  *((void *)v212 + 3) = "FetchStmt";
  *((void *)v212 + 4) = 9;
  v212[40] = 2;
  v8();
  uint64_t v213 = v1[14];
  uint64_t v214 = (void *)(v677 + v3 + 73 * v2);
  *uint64_t v214 = 74;
  uint64_t v215 = (char *)v214 + v213;
  *(void *)uint64_t v215 = "index_stmt";
  *((void *)v215 + 1) = 10;
  v215[16] = 2;
  *((void *)v215 + 3) = "IndexStmt";
  *((void *)v215 + 4) = 9;
  v215[40] = 2;
  v8();
  unint64_t v216 = v1[14];
  unint64_t v217 = (void *)(v677 + v3 + 74 * v2);
  *unint64_t v217 = 75;
  v218 = (char *)v217 + v216;
  *(void *)v218 = "create_function_stmt";
  *((void *)v218 + 1) = 20;
  v218[16] = 2;
  *((void *)v218 + 3) = "CreateFunctionStmt";
  *((void *)v218 + 4) = 18;
  v218[40] = 2;
  v8();
  v219 = v1[14];
  v220 = (void *)(v677 + v3 + 75 * v2);
  *v220 = 76;
  v221 = (char *)v220 + v219;
  *(void *)v221 = "alter_function_stmt";
  *((void *)v221 + 1) = 19;
  v221[16] = 2;
  *((void *)v221 + 3) = "AlterFunctionStmt";
  *((void *)v221 + 4) = 17;
  v221[40] = 2;
  v8();
  v222 = v1[14];
  v223 = (void *)(v677 + v3 + 76 * v2);
  *v223 = 77;
  v224 = (char *)v223 + v222;
  *(void *)v224 = "do_stmt";
  *((void *)v224 + 1) = 7;
  v224[16] = 2;
  *((void *)v224 + 3) = "DoStmt";
  *((void *)v224 + 4) = 6;
  v224[40] = 2;
  v8();
  v225 = v1[14];
  v226 = (void *)(v677 + v3 + 77 * v2);
  *v226 = 78;
  v227 = (char *)v226 + v225;
  *(void *)v227 = "rename_stmt";
  *((void *)v227 + 1) = 11;
  v227[16] = 2;
  *((void *)v227 + 3) = "RenameStmt";
  *((void *)v227 + 4) = 10;
  v227[40] = 2;
  v8();
  v228 = v1[14];
  v229 = (void *)(v677 + v3 + 78 * v2);
  *v229 = 79;
  v230 = (char *)v229 + v228;
  *(void *)v230 = "rule_stmt";
  *((void *)v230 + 1) = 9;
  v230[16] = 2;
  *((void *)v230 + 3) = "RuleStmt";
  *((void *)v230 + 4) = 8;
  v230[40] = 2;
  v8();
  v231 = v1[14];
  v232 = (void *)(v677 + v3 + 79 * v2);
  *v232 = 80;
  v233 = (char *)v232 + v231;
  *(void *)v233 = "notify_stmt";
  *((void *)v233 + 1) = 11;
  v233[16] = 2;
  *((void *)v233 + 3) = "NotifyStmt";
  *((void *)v233 + 4) = 10;
  v233[40] = 2;
  v8();
  v234 = v1[14];
  v235 = (void *)(v677 + v3 + 80 * v2);
  *v235 = 81;
  v236 = (char *)v235 + v234;
  *(void *)v236 = "listen_stmt";
  *((void *)v236 + 1) = 11;
  v236[16] = 2;
  *((void *)v236 + 3) = "ListenStmt";
  *((void *)v236 + 4) = 10;
  v236[40] = 2;
  v8();
  v237 = v1[14];
  v238 = (void *)(v677 + v3 + 81 * v2);
  *v238 = 82;
  v239 = (char *)v238 + v237;
  *(void *)v239 = "unlisten_stmt";
  *((void *)v239 + 1) = 13;
  v239[16] = 2;
  *((void *)v239 + 3) = "UnlistenStmt";
  *((void *)v239 + 4) = 12;
  v239[40] = 2;
  v8();
  v240 = v1[14];
  v241 = (void *)(v677 + v3 + 82 * v2);
  *v241 = 83;
  v242 = (char *)v241 + v240;
  *(void *)v242 = "transaction_stmt";
  *((void *)v242 + 1) = 16;
  v242[16] = 2;
  *((void *)v242 + 3) = "TransactionStmt";
  *((void *)v242 + 4) = 15;
  v242[40] = 2;
  v8();
  v243 = v1[14];
  v244 = (void *)(v677 + v3 + 83 * v2);
  *v244 = 84;
  v245 = (char *)v244 + v243;
  *(void *)v245 = "view_stmt";
  *((void *)v245 + 1) = 9;
  v245[16] = 2;
  *((void *)v245 + 3) = "ViewStmt";
  *((void *)v245 + 4) = 8;
  v245[40] = 2;
  v8();
  v246 = v1[14];
  v247 = (void *)(v677 + v3 + 84 * v2);
  *v247 = 85;
  v248 = (char *)v247 + v246;
  *(void *)v248 = "load_stmt";
  *((void *)v248 + 1) = 9;
  v248[16] = 2;
  *((void *)v248 + 3) = "LoadStmt";
  *((void *)v248 + 4) = 8;
  v248[40] = 2;
  v8();
  v249 = v1[14];
  v250 = (void *)(v677 + v3 + 85 * v2);
  *v250 = 86;
  v251 = (char *)v250 + v249;
  *(void *)v251 = "create_domain_stmt";
  *((void *)v251 + 1) = 18;
  v251[16] = 2;
  *((void *)v251 + 3) = "CreateDomainStmt";
  *((void *)v251 + 4) = 16;
  v251[40] = 2;
  v8();
  v252 = v1[14];
  v253 = (void *)(v677 + v3 + 86 * v2);
  *v253 = 87;
  v254 = (char *)v253 + v252;
  *(void *)v254 = "createdb_stmt";
  *((void *)v254 + 1) = 13;
  v254[16] = 2;
  *((void *)v254 + 3) = "CreatedbStmt";
  *((void *)v254 + 4) = 12;
  v254[40] = 2;
  v8();
  v255 = v1[14];
  v256 = (void *)(v677 + v3 + 87 * v2);
  *v256 = 88;
  v257 = (char *)v256 + v255;
  *(void *)v257 = "dropdb_stmt";
  *((void *)v257 + 1) = 11;
  v257[16] = 2;
  *((void *)v257 + 3) = "DropdbStmt";
  *((void *)v257 + 4) = 10;
  v257[40] = 2;
  v8();
  v258 = v1[14];
  v259 = (void *)(v677 + v3 + 88 * v2);
  *v259 = 89;
  v260 = (char *)v259 + v258;
  *(void *)v260 = "vacuum_stmt";
  *((void *)v260 + 1) = 11;
  v260[16] = 2;
  *((void *)v260 + 3) = "VacuumStmt";
  *((void *)v260 + 4) = 10;
  v260[40] = 2;
  v8();
  v261 = v1[14];
  v262 = (void *)(v677 + v3 + 89 * v2);
  *v262 = 90;
  v263 = (char *)v262 + v261;
  *(void *)v263 = "explain_stmt";
  *((void *)v263 + 1) = 12;
  v263[16] = 2;
  *((void *)v263 + 3) = "ExplainStmt";
  *((void *)v263 + 4) = 11;
  v263[40] = 2;
  v8();
  v264 = v1[14];
  v265 = (void *)(v677 + v3 + 90 * v2);
  *v265 = 91;
  v266 = (char *)v265 + v264;
  *(void *)v266 = "create_table_as_stmt";
  *((void *)v266 + 1) = 20;
  v266[16] = 2;
  *((void *)v266 + 3) = "CreateTableAsStmt";
  *((void *)v266 + 4) = 17;
  v266[40] = 2;
  v8();
  v267 = v1[14];
  v268 = (void *)(v677 + v3 + 91 * v2);
  *v268 = 92;
  v269 = (char *)v268 + v267;
  *(void *)v269 = "create_seq_stmt";
  *((void *)v269 + 1) = 15;
  v269[16] = 2;
  *((void *)v269 + 3) = "CreateSeqStmt";
  *((void *)v269 + 4) = 13;
  v269[40] = 2;
  v8();
  v270 = v1[14];
  v271 = (void *)(v677 + v3 + 92 * v2);
  *v271 = 93;
  v272 = (char *)v271 + v270;
  *(void *)v272 = "alter_seq_stmt";
  *((void *)v272 + 1) = 14;
  v272[16] = 2;
  *((void *)v272 + 3) = "AlterSeqStmt";
  *((void *)v272 + 4) = 12;
  v272[40] = 2;
  v8();
  v273 = v1[14];
  v274 = (void *)(v677 + v3 + 93 * v2);
  *v274 = 94;
  v275 = (char *)v274 + v273;
  *(void *)v275 = 0x18EBF3000;
  *((void *)v275 + 1) = 17;
  v275[16] = 2;
  *((void *)v275 + 3) = "VariableSetStmt";
  *((void *)v275 + 4) = 15;
  v275[40] = 2;
  v8();
  v276 = v1[14];
  v277 = (void *)(v677 + v3 + 94 * v2);
  *v277 = 95;
  v278 = (char *)v277 + v276;
  *(void *)v278 = "variable_show_stmt";
  *((void *)v278 + 1) = 18;
  v278[16] = 2;
  *((void *)v278 + 3) = "VariableShowStmt";
  *((void *)v278 + 4) = 16;
  v278[40] = 2;
  v8();
  v279 = v1[14];
  v280 = (void *)(v677 + v3 + 95 * v2);
  *v280 = 96;
  v281 = (char *)v280 + v279;
  *(void *)v281 = "discard_stmt";
  *((void *)v281 + 1) = 12;
  v281[16] = 2;
  *((void *)v281 + 3) = "DiscardStmt";
  *((void *)v281 + 4) = 11;
  v281[40] = 2;
  v8();
  v282 = v1[14];
  v283 = (void *)(v677 + v3 + 96 * v2);
  *v283 = 97;
  v284 = (char *)v283 + v282;
  *(void *)v284 = "create_trig_stmt";
  *((void *)v284 + 1) = 16;
  v284[16] = 2;
  *((void *)v284 + 3) = "CreateTrigStmt";
  *((void *)v284 + 4) = 14;
  v284[40] = 2;
  v8();
  v285 = v1[14];
  v286 = (void *)(v677 + v3 + 97 * v2);
  *v286 = 98;
  v287 = (char *)v286 + v285;
  *(void *)v287 = "create_plang_stmt";
  *((void *)v287 + 1) = 17;
  v287[16] = 2;
  *((void *)v287 + 3) = "CreatePLangStmt";
  *((void *)v287 + 4) = 15;
  v287[40] = 2;
  v8();
  v288 = v1[14];
  v289 = (void *)(v677 + v3 + 98 * v2);
  *v289 = 99;
  v290 = (char *)v289 + v288;
  *(void *)v290 = "create_role_stmt";
  *((void *)v290 + 1) = 16;
  v290[16] = 2;
  *((void *)v290 + 3) = "CreateRoleStmt";
  *((void *)v290 + 4) = 14;
  v290[40] = 2;
  v8();
  v291 = v1[14];
  v292 = (void *)(v677 + v3 + 99 * v2);
  *v292 = 100;
  v293 = (char *)v292 + v291;
  *(void *)v293 = "alter_role_stmt";
  *((void *)v293 + 1) = 15;
  v293[16] = 2;
  *((void *)v293 + 3) = "AlterRoleStmt";
  *((void *)v293 + 4) = 13;
  v293[40] = 2;
  v8();
  v294 = v1[14];
  v295 = (void *)(v677 + v3 + 100 * v2);
  *v295 = 101;
  v296 = (char *)v295 + v294;
  *(void *)v296 = "drop_role_stmt";
  *((void *)v296 + 1) = 14;
  v296[16] = 2;
  *((void *)v296 + 3) = "DropRoleStmt";
  *((void *)v296 + 4) = 12;
  v296[40] = 2;
  v8();
  v297 = v1[14];
  v298 = (void *)(v677 + v3 + 101 * v2);
  *v298 = 102;
  v299 = (char *)v298 + v297;
  *(void *)v299 = "lock_stmt";
  *((void *)v299 + 1) = 9;
  v299[16] = 2;
  *((void *)v299 + 3) = "LockStmt";
  *((void *)v299 + 4) = 8;
  v299[40] = 2;
  v8();
  v300 = v1[14];
  v301 = (void *)(v677 + v3 + 102 * v2);
  *v301 = 103;
  v302 = (char *)v301 + v300;
  *(void *)v302 = "constraints_set_stmt";
  *((void *)v302 + 1) = 20;
  v302[16] = 2;
  *((void *)v302 + 3) = "ConstraintsSetStmt";
  *((void *)v302 + 4) = 18;
  v302[40] = 2;
  v8();
  v303 = v1[14];
  v304 = (void *)(v677 + v3 + 103 * v2);
  *v304 = 104;
  v305 = (char *)v304 + v303;
  *(void *)v305 = "reindex_stmt";
  *((void *)v305 + 1) = 12;
  v305[16] = 2;
  *((void *)v305 + 3) = "ReindexStmt";
  *((void *)v305 + 4) = 11;
  v305[40] = 2;
  v8();
  v306 = v1[14];
  v307 = (void *)(v677 + v3 + 104 * v2);
  *v307 = 105;
  v308 = (char *)v307 + v306;
  *(void *)v308 = "check_point_stmt";
  *((void *)v308 + 1) = 16;
  v308[16] = 2;
  *((void *)v308 + 3) = "CheckPointStmt";
  *((void *)v308 + 4) = 14;
  v308[40] = 2;
  v8();
  v309 = v1[14];
  v310 = (void *)(v677 + v3 + 105 * v2);
  *v310 = 106;
  v311 = (char *)v310 + v309;
  *(void *)v311 = "create_schema_stmt";
  *((void *)v311 + 1) = 18;
  v311[16] = 2;
  *((void *)v311 + 3) = "CreateSchemaStmt";
  *((void *)v311 + 4) = 16;
  v311[40] = 2;
  v8();
  v312 = v1[14];
  v313 = (void *)(v677 + v3 + 106 * v2);
  *v313 = 107;
  v314 = (char *)v313 + v312;
  *(void *)v314 = "alter_database_stmt";
  *((void *)v314 + 1) = 19;
  v314[16] = 2;
  *((void *)v314 + 3) = "AlterDatabaseStmt";
  *((void *)v314 + 4) = 17;
  v314[40] = 2;
  v8();
  v315 = v1[14];
  v316 = (void *)(v677 + v3 + 107 * v2);
  *v316 = 108;
  v317 = (char *)v316 + v315;
  *(void *)v317 = "alter_database_set_stmt";
  *((void *)v317 + 1) = 23;
  v317[16] = 2;
  *((void *)v317 + 3) = "AlterDatabaseSetStmt";
  *((void *)v317 + 4) = 20;
  v317[40] = 2;
  v8();
  v318 = v1[14];
  v319 = (void *)(v677 + v3 + 108 * v2);
  *v319 = 109;
  v320 = (char *)v319 + v318;
  *(void *)v320 = "alter_role_set_stmt";
  *((void *)v320 + 1) = 19;
  v320[16] = 2;
  *((void *)v320 + 3) = "AlterRoleSetStmt";
  *((void *)v320 + 4) = 16;
  v320[40] = 2;
  v8();
  v321 = v1[14];
  v322 = (void *)(v677 + v3 + 109 * v2);
  *v322 = 110;
  v323 = (char *)v322 + v321;
  *(void *)v323 = "create_conversion_stmt";
  *((void *)v323 + 1) = 22;
  v323[16] = 2;
  *((void *)v323 + 3) = "CreateConversionStmt";
  *((void *)v323 + 4) = 20;
  v323[40] = 2;
  v8();
  v324 = v1[14];
  v325 = (void *)(v677 + v3 + 110 * v2);
  *v325 = 111;
  v326 = (char *)v325 + v324;
  *(void *)v326 = "create_cast_stmt";
  *((void *)v326 + 1) = 16;
  v326[16] = 2;
  *((void *)v326 + 3) = "CreateCastStmt";
  *((void *)v326 + 4) = 14;
  v326[40] = 2;
  v8();
  v327 = v1[14];
  v328 = (void *)(v677 + v3 + 111 * v2);
  *v328 = 112;
  v329 = (char *)v328 + v327;
  *(void *)v329 = "create_op_class_stmt";
  *((void *)v329 + 1) = 20;
  v329[16] = 2;
  *((void *)v329 + 3) = "CreateOpClassStmt";
  *((void *)v329 + 4) = 17;
  v329[40] = 2;
  v8();
  v330 = v1[14];
  v331 = (void *)(v677 + v3 + 112 * v2);
  *v331 = 113;
  v332 = (char *)v331 + v330;
  *(void *)v332 = "create_op_family_stmt";
  *((void *)v332 + 1) = 21;
  v332[16] = 2;
  *((void *)v332 + 3) = "CreateOpFamilyStmt";
  *((void *)v332 + 4) = 18;
  v332[40] = 2;
  v8();
  v333 = v1[14];
  v334 = (void *)(v677 + v3 + 113 * v2);
  *v334 = 114;
  v335 = (char *)v334 + v333;
  *(void *)v335 = "alter_op_family_stmt";
  *((void *)v335 + 1) = 20;
  v335[16] = 2;
  *((void *)v335 + 3) = "AlterOpFamilyStmt";
  *((void *)v335 + 4) = 17;
  v335[40] = 2;
  v8();
  v336 = v1[14];
  v337 = (void *)(v677 + v3 + 114 * v2);
  *v337 = 115;
  v338 = (char *)v337 + v336;
  *(void *)v338 = "prepare_stmt";
  *((void *)v338 + 1) = 12;
  v338[16] = 2;
  *((void *)v338 + 3) = "PrepareStmt";
  *((void *)v338 + 4) = 11;
  v338[40] = 2;
  v8();
  v339 = v1[14];
  v340 = (void *)(v677 + v3 + 115 * v2);
  *v340 = 116;
  v341 = (char *)v340 + v339;
  *(void *)v341 = "execute_stmt";
  *((void *)v341 + 1) = 12;
  v341[16] = 2;
  *((void *)v341 + 3) = "ExecuteStmt";
  *((void *)v341 + 4) = 11;
  v341[40] = 2;
  v8();
  v342 = v1[14];
  v343 = (void *)(v677 + v3 + 116 * v2);
  *v343 = 117;
  v344 = (char *)v343 + v342;
  *(void *)v344 = "deallocate_stmt";
  *((void *)v344 + 1) = 15;
  v344[16] = 2;
  *((void *)v344 + 3) = "DeallocateStmt";
  *((void *)v344 + 4) = 14;
  v344[40] = 2;
  v8();
  v345 = v1[14];
  v346 = (void *)(v677 + v3 + 117 * v2);
  *v346 = 118;
  v347 = (char *)v346 + v345;
  *(void *)v347 = "declare_cursor_stmt";
  *((void *)v347 + 1) = 19;
  v347[16] = 2;
  *((void *)v347 + 3) = "DeclareCursorStmt";
  *((void *)v347 + 4) = 17;
  v347[40] = 2;
  v8();
  v348 = v1[14];
  v349 = (void *)(v677 + v3 + 118 * v2);
  *v349 = 119;
  v350 = (char *)v349 + v348;
  *(void *)v350 = "create_table_space_stmt";
  *((void *)v350 + 1) = 23;
  v350[16] = 2;
  *((void *)v350 + 3) = "CreateTableSpaceStmt";
  *((void *)v350 + 4) = 20;
  v350[40] = 2;
  v8();
  v351 = v1[14];
  v352 = (void *)(v677 + v3 + 119 * v2);
  *v352 = 120;
  v353 = (char *)v352 + v351;
  *(void *)v353 = "drop_table_space_stmt";
  *((void *)v353 + 1) = 21;
  v353[16] = 2;
  *((void *)v353 + 3) = "DropTableSpaceStmt";
  *((void *)v353 + 4) = 18;
  v353[40] = 2;
  v8();
  v354 = v1[14];
  v355 = (void *)(v677 + v3 + 120 * v2);
  *v355 = 121;
  v356 = (char *)v355 + v354;
  *(void *)v356 = "alter_object_depends_stmt";
  *((void *)v356 + 1) = 25;
  v356[16] = 2;
  *((void *)v356 + 3) = "AlterObjectDependsStmt";
  *((void *)v356 + 4) = 22;
  v356[40] = 2;
  v8();
  v357 = v1[14];
  v358 = (void *)(v677 + v3 + 121 * v2);
  *v358 = 122;
  v359 = (char *)v358 + v357;
  *(void *)v359 = "alter_object_schema_stmt";
  *((void *)v359 + 1) = 24;
  v359[16] = 2;
  *((void *)v359 + 3) = "AlterObjectSchemaStmt";
  *((void *)v359 + 4) = 21;
  v359[40] = 2;
  v8();
  v360 = v1[14];
  v361 = (void *)(v677 + v3 + 122 * v2);
  *v361 = 123;
  v362 = (char *)v361 + v360;
  *(void *)v362 = "alter_owner_stmt";
  *((void *)v362 + 1) = 16;
  v362[16] = 2;
  *((void *)v362 + 3) = "AlterOwnerStmt";
  *((void *)v362 + 4) = 14;
  v362[40] = 2;
  v8();
  v363 = v1[14];
  v364 = (void *)(v677 + v3 + 123 * v2);
  *v364 = 124;
  v365 = (char *)v364 + v363;
  *(void *)v365 = "alter_operator_stmt";
  *((void *)v365 + 1) = 19;
  v365[16] = 2;
  *((void *)v365 + 3) = "AlterOperatorStmt";
  *((void *)v365 + 4) = 17;
  v365[40] = 2;
  v8();
  v366 = v1[14];
  v367 = (void *)(v677 + v3 + 124 * v2);
  *v367 = 125;
  v368 = (char *)v367 + v366;
  *(void *)v368 = "alter_type_stmt";
  *((void *)v368 + 1) = 15;
  v368[16] = 2;
  *((void *)v368 + 3) = "AlterTypeStmt";
  *((void *)v368 + 4) = 13;
  v368[40] = 2;
  v8();
  v369 = v1[14];
  v370 = (void *)(v677 + v3 + 125 * v2);
  *v370 = 126;
  v371 = (char *)v370 + v369;
  *(void *)v371 = "drop_owned_stmt";
  *((void *)v371 + 1) = 15;
  v371[16] = 2;
  *((void *)v371 + 3) = "DropOwnedStmt";
  *((void *)v371 + 4) = 13;
  v371[40] = 2;
  v8();
  v372 = v1[14];
  v373 = (void *)(v677 + v3 + 126 * v2);
  *v373 = 127;
  v374 = (char *)v373 + v372;
  *(void *)v374 = "reassign_owned_stmt";
  *((void *)v374 + 1) = 19;
  v374[16] = 2;
  *((void *)v374 + 3) = "ReassignOwnedStmt";
  *((void *)v374 + 4) = 17;
  v374[40] = 2;
  v8();
  v375 = v1[14];
  v376 = (void *)(v677 + v3 + 127 * v2);
  *v376 = 128;
  v377 = (char *)v376 + v375;
  *(void *)v377 = "composite_type_stmt";
  *((void *)v377 + 1) = 19;
  v377[16] = 2;
  *((void *)v377 + 3) = "CompositeTypeStmt";
  *((void *)v377 + 4) = 17;
  v377[40] = 2;
  v8();
  v378 = v677 + v3 + (v2 << 7) + v1[14];
  *(void *)(v4 + (v2 << 7)) = 129;
  *(void *)v378 = "create_enum_stmt";
  *(void *)(v378 + 8) = 16;
  *(unsigned char *)(v378 + 16) = 2;
  *(void *)(v378 + 24) = "CreateEnumStmt";
  *(void *)(v378 + 32) = 14;
  *(unsigned char *)(v378 + 40) = 2;
  v8();
  v379 = v1[14];
  v380 = (void *)(v677 + v3 + 129 * v2);
  *v380 = 130;
  v381 = (char *)v380 + v379;
  *(void *)v381 = "create_range_stmt";
  *((void *)v381 + 1) = 17;
  v381[16] = 2;
  *((void *)v381 + 3) = "CreateRangeStmt";
  *((void *)v381 + 4) = 15;
  v381[40] = 2;
  v8();
  v382 = v1[14];
  v383 = (void *)(v677 + v3 + 130 * v2);
  *v383 = 131;
  v384 = (char *)v383 + v382;
  *(void *)v384 = "alter_enum_stmt";
  *((void *)v384 + 1) = 15;
  v384[16] = 2;
  *((void *)v384 + 3) = "AlterEnumStmt";
  *((void *)v384 + 4) = 13;
  v384[40] = 2;
  v8();
  v385 = v1[14];
  v386 = (void *)(v677 + v3 + 131 * v2);
  *v386 = 132;
  v387 = (char *)v386 + v385;
  *(void *)v387 = "alter_tsdictionary_stmt";
  *((void *)v387 + 1) = 23;
  v387[16] = 2;
  *((void *)v387 + 3) = "AlterTSDictionaryStmt";
  *((void *)v387 + 4) = 21;
  v387[40] = 2;
  v8();
  v388 = v1[14];
  v389 = (void *)(v677 + v3 + 132 * v2);
  *v389 = 133;
  v390 = (char *)v389 + v388;
  *(void *)v390 = "alter_tsconfiguration_stmt";
  *((void *)v390 + 1) = 26;
  v390[16] = 2;
  *((void *)v390 + 3) = "AlterTSConfigurationStmt";
  *((void *)v390 + 4) = 24;
  v390[40] = 2;
  v8();
  v391 = v1[14];
  v392 = (void *)(v677 + v3 + 133 * v2);
  *v392 = 134;
  v393 = (char *)v392 + v391;
  *(void *)v393 = "create_fdw_stmt";
  *((void *)v393 + 1) = 15;
  v393[16] = 2;
  *((void *)v393 + 3) = "CreateFdwStmt";
  *((void *)v393 + 4) = 13;
  v393[40] = 2;
  v8();
  v394 = v1[14];
  v395 = (void *)(v677 + v3 + 134 * v2);
  *v395 = 135;
  v396 = (char *)v395 + v394;
  *(void *)v396 = "alter_fdw_stmt";
  *((void *)v396 + 1) = 14;
  v396[16] = 2;
  *((void *)v396 + 3) = "AlterFdwStmt";
  *((void *)v396 + 4) = 12;
  v396[40] = 2;
  v8();
  v397 = v1[14];
  v398 = (void *)(v677 + v3 + 135 * v2);
  *v398 = 136;
  v399 = (char *)v398 + v397;
  *(void *)v399 = "create_foreign_server_stmt";
  *((void *)v399 + 1) = 26;
  v399[16] = 2;
  *((void *)v399 + 3) = "CreateForeignServerStmt";
  *((void *)v399 + 4) = 23;
  v399[40] = 2;
  v8();
  v400 = v1[14];
  v401 = (void *)(v677 + v3 + 136 * v2);
  *v401 = 137;
  v402 = (char *)v401 + v400;
  *(void *)v402 = "alter_foreign_server_stmt";
  *((void *)v402 + 1) = 25;
  v402[16] = 2;
  *((void *)v402 + 3) = "AlterForeignServerStmt";
  *((void *)v402 + 4) = 22;
  v402[40] = 2;
  v8();
  v403 = v1[14];
  v404 = (void *)(v677 + v3 + 137 * v2);
  *v404 = 138;
  v405 = (char *)v404 + v403;
  *(void *)v405 = "create_user_mapping_stmt";
  *((void *)v405 + 1) = 24;
  v405[16] = 2;
  *((void *)v405 + 3) = "CreateUserMappingStmt";
  *((void *)v405 + 4) = 21;
  v405[40] = 2;
  v8();
  v406 = v1[14];
  v407 = (void *)(v677 + v3 + 138 * v2);
  *v407 = 139;
  v408 = (char *)v407 + v406;
  *(void *)v408 = "alter_user_mapping_stmt";
  *((void *)v408 + 1) = 23;
  v408[16] = 2;
  *((void *)v408 + 3) = "AlterUserMappingStmt";
  *((void *)v408 + 4) = 20;
  v408[40] = 2;
  v8();
  v409 = v1[14];
  v410 = (void *)(v677 + v3 + 139 * v2);
  *v410 = 140;
  v411 = (char *)v410 + v409;
  *(void *)v411 = "drop_user_mapping_stmt";
  *((void *)v411 + 1) = 22;
  v411[16] = 2;
  *((void *)v411 + 3) = "DropUserMappingStmt";
  *((void *)v411 + 4) = 19;
  v411[40] = 2;
  v8();
  v412 = v1[14];
  v413 = (void *)(v677 + v3 + 140 * v2);
  *v413 = 141;
  v414 = (char *)v413 + v412;
  *(void *)v414 = "alter_table_space_options_stmt";
  *((void *)v414 + 1) = 30;
  v414[16] = 2;
  *((void *)v414 + 3) = "AlterTableSpaceOptionsStmt";
  *((void *)v414 + 4) = 26;
  v414[40] = 2;
  v8();
  v415 = v1[14];
  v416 = (void *)(v677 + v3 + 141 * v2);
  *v416 = 142;
  v417 = (char *)v416 + v415;
  *(void *)v417 = "alter_table_move_all_stmt";
  *((void *)v417 + 1) = 25;
  v417[16] = 2;
  *((void *)v417 + 3) = "AlterTableMoveAllStmt";
  *((void *)v417 + 4) = 21;
  v417[40] = 2;
  v8();
  v418 = v1[14];
  v419 = (void *)(v677 + v3 + 142 * v2);
  *v419 = 143;
  v420 = (char *)v419 + v418;
  *(void *)v420 = "sec_label_stmt";
  *((void *)v420 + 1) = 14;
  v420[16] = 2;
  *((void *)v420 + 3) = "SecLabelStmt";
  *((void *)v420 + 4) = 12;
  v420[40] = 2;
  v8();
  v421 = v1[14];
  v422 = (void *)(v677 + v3 + 143 * v2);
  *v422 = 144;
  v423 = (char *)v422 + v421;
  *(void *)v423 = "create_foreign_table_stmt";
  *((void *)v423 + 1) = 25;
  v423[16] = 2;
  *((void *)v423 + 3) = "CreateForeignTableStmt";
  *((void *)v423 + 4) = 22;
  v423[40] = 2;
  v8();
  v424 = v1[14];
  v425 = (void *)(v677 + v3 + 144 * v2);
  *v425 = 145;
  v426 = (char *)v425 + v424;
  *(void *)v426 = "import_foreign_schema_stmt";
  *((void *)v426 + 1) = 26;
  v426[16] = 2;
  *((void *)v426 + 3) = "ImportForeignSchemaStmt";
  *((void *)v426 + 4) = 23;
  v426[40] = 2;
  v8();
  v427 = v1[14];
  v428 = (void *)(v677 + v3 + 145 * v2);
  *v428 = 146;
  v429 = (char *)v428 + v427;
  *(void *)v429 = "create_extension_stmt";
  *((void *)v429 + 1) = 21;
  v429[16] = 2;
  *((void *)v429 + 3) = "CreateExtensionStmt";
  *((void *)v429 + 4) = 19;
  v429[40] = 2;
  v8();
  v430 = v1[14];
  v431 = (void *)(v677 + v3 + 146 * v2);
  *v431 = 147;
  v432 = (char *)v431 + v430;
  *(void *)v432 = "alter_extension_stmt";
  *((void *)v432 + 1) = 20;
  v432[16] = 2;
  *((void *)v432 + 3) = "AlterExtensionStmt";
  *((void *)v432 + 4) = 18;
  v432[40] = 2;
  v8();
  v433 = v1[14];
  v434 = (void *)(v677 + v3 + 147 * v2);
  *v434 = 148;
  v435 = (char *)v434 + v433;
  *(void *)v435 = "alter_extension_contents_stmt";
  *((void *)v435 + 1) = 29;
  v435[16] = 2;
  *((void *)v435 + 3) = "AlterExtensionContentsStmt";
  *((void *)v435 + 4) = 26;
  v435[40] = 2;
  v8();
  v436 = v1[14];
  v437 = (void *)(v677 + v3 + 148 * v2);
  *v437 = 149;
  v438 = (char *)v437 + v436;
  *(void *)v438 = "create_event_trig_stmt";
  *((void *)v438 + 1) = 22;
  v438[16] = 2;
  *((void *)v438 + 3) = "CreateEventTrigStmt";
  *((void *)v438 + 4) = 19;
  v438[40] = 2;
  v8();
  v439 = v1[14];
  v440 = (void *)(v677 + v3 + 149 * v2);
  *v440 = 150;
  v441 = (char *)v440 + v439;
  *(void *)v441 = "alter_event_trig_stmt";
  *((void *)v441 + 1) = 21;
  v441[16] = 2;
  *((void *)v441 + 3) = "AlterEventTrigStmt";
  *((void *)v441 + 4) = 18;
  v441[40] = 2;
  v8();
  v442 = v1[14];
  v443 = (void *)(v677 + v3 + 150 * v2);
  *v443 = 151;
  v444 = (char *)v443 + v442;
  *(void *)v444 = "refresh_mat_view_stmt";
  *((void *)v444 + 1) = 21;
  v444[16] = 2;
  *((void *)v444 + 3) = "RefreshMatViewStmt";
  *((void *)v444 + 4) = 18;
  v444[40] = 2;
  v8();
  v445 = v1[14];
  v446 = (void *)(v677 + v3 + 151 * v2);
  *v446 = 152;
  v447 = (char *)v446 + v445;
  *(void *)v447 = "replica_identity_stmt";
  *((void *)v447 + 1) = 21;
  v447[16] = 2;
  *((void *)v447 + 3) = "ReplicaIdentityStmt";
  *((void *)v447 + 4) = 19;
  v447[40] = 2;
  v8();
  v448 = v1[14];
  v449 = (void *)(v677 + v3 + 152 * v2);
  *v449 = 153;
  v450 = (char *)v449 + v448;
  *(void *)v450 = "alter_system_stmt";
  *((void *)v450 + 1) = 17;
  v450[16] = 2;
  *((void *)v450 + 3) = "AlterSystemStmt";
  *((void *)v450 + 4) = 15;
  v450[40] = 2;
  v8();
  v451 = v1[14];
  v452 = (void *)(v677 + v3 + 153 * v2);
  *v452 = 154;
  v453 = (char *)v452 + v451;
  *(void *)v453 = "create_policy_stmt";
  *((void *)v453 + 1) = 18;
  v453[16] = 2;
  *((void *)v453 + 3) = "CreatePolicyStmt";
  *((void *)v453 + 4) = 16;
  v453[40] = 2;
  v8();
  v454 = v1[14];
  v455 = (void *)(v677 + v3 + 154 * v2);
  *v455 = 155;
  v456 = (char *)v455 + v454;
  *(void *)v456 = "alter_policy_stmt";
  *((void *)v456 + 1) = 17;
  v456[16] = 2;
  *((void *)v456 + 3) = "AlterPolicyStmt";
  *((void *)v456 + 4) = 15;
  v456[40] = 2;
  v8();
  v457 = v1[14];
  v458 = (void *)(v677 + v3 + 155 * v2);
  *v458 = 156;
  v459 = (char *)v458 + v457;
  *(void *)v459 = "create_transform_stmt";
  *((void *)v459 + 1) = 21;
  v459[16] = 2;
  *((void *)v459 + 3) = "CreateTransformStmt";
  *((void *)v459 + 4) = 19;
  v459[40] = 2;
  v8();
  v460 = v1[14];
  v461 = (void *)(v677 + v3 + 156 * v2);
  *v461 = 157;
  v462 = (char *)v461 + v460;
  *(void *)v462 = "create_am_stmt";
  *((void *)v462 + 1) = 14;
  v462[16] = 2;
  *((void *)v462 + 3) = "CreateAmStmt";
  *((void *)v462 + 4) = 12;
  v462[40] = 2;
  v8();
  v463 = v1[14];
  v464 = (void *)(v677 + v3 + 157 * v2);
  *v464 = 158;
  v465 = (char *)v464 + v463;
  *(void *)v465 = "create_publication_stmt";
  *((void *)v465 + 1) = 23;
  v465[16] = 2;
  *((void *)v465 + 3) = "CreatePublicationStmt";
  *((void *)v465 + 4) = 21;
  v465[40] = 2;
  v8();
  v466 = v1[14];
  v467 = (void *)(v677 + v3 + 158 * v2);
  *v467 = 159;
  v468 = (char *)v467 + v466;
  *(void *)v468 = "alter_publication_stmt";
  *((void *)v468 + 1) = 22;
  v468[16] = 2;
  *((void *)v468 + 3) = "AlterPublicationStmt";
  *((void *)v468 + 4) = 20;
  v468[40] = 2;
  v8();
  v469 = v1[14];
  v470 = (void *)(v677 + v3 + 159 * v2);
  *v470 = 160;
  v471 = (char *)v470 + v469;
  *(void *)v471 = "create_subscription_stmt";
  *((void *)v471 + 1) = 24;
  v471[16] = 2;
  *((void *)v471 + 3) = "CreateSubscriptionStmt";
  *((void *)v471 + 4) = 22;
  v471[40] = 2;
  v8();
  v472 = v1[14];
  v473 = (void *)(v677 + v3 + 160 * v2);
  *v473 = 161;
  v474 = (char *)v473 + v472;
  *(void *)v474 = "alter_subscription_stmt";
  *((void *)v474 + 1) = 23;
  v474[16] = 2;
  *((void *)v474 + 3) = "AlterSubscriptionStmt";
  *((void *)v474 + 4) = 21;
  v474[40] = 2;
  v8();
  v475 = v1[14];
  v476 = (void *)(v677 + v3 + 161 * v2);
  *v476 = 162;
  v477 = (char *)v476 + v475;
  *(void *)v477 = "drop_subscription_stmt";
  *((void *)v477 + 1) = 22;
  v477[16] = 2;
  *((void *)v477 + 3) = "DropSubscriptionStmt";
  *((void *)v477 + 4) = 20;
  v477[40] = 2;
  v8();
  v478 = v1[14];
  v479 = (void *)(v677 + v3 + 162 * v2);
  *v479 = 163;
  v480 = (char *)v479 + v478;
  *(void *)v480 = "create_stats_stmt";
  *((void *)v480 + 1) = 17;
  v480[16] = 2;
  *((void *)v480 + 3) = "CreateStatsStmt";
  *((void *)v480 + 4) = 15;
  v480[40] = 2;
  v8();
  v481 = v1[14];
  v482 = (void *)(v677 + v3 + 163 * v2);
  *v482 = 164;
  v483 = (char *)v482 + v481;
  *(void *)v483 = "alter_collation_stmt";
  *((void *)v483 + 1) = 20;
  v483[16] = 2;
  *((void *)v483 + 3) = "AlterCollationStmt";
  *((void *)v483 + 4) = 18;
  v483[40] = 2;
  v8();
  v484 = v1[14];
  v485 = (void *)(v677 + v3 + 164 * v2);
  *v485 = 165;
  v486 = (char *)v485 + v484;
  *(void *)v486 = "call_stmt";
  *((void *)v486 + 1) = 9;
  v486[16] = 2;
  *((void *)v486 + 3) = "CallStmt";
  *((void *)v486 + 4) = 8;
  v486[40] = 2;
  v8();
  v487 = v1[14];
  v488 = (void *)(v677 + v3 + 165 * v2);
  *v488 = 166;
  v489 = (char *)v488 + v487;
  *(void *)v489 = "alter_stats_stmt";
  *((void *)v489 + 1) = 16;
  v489[16] = 2;
  *((void *)v489 + 3) = "AlterStatsStmt";
  *((void *)v489 + 4) = 14;
  v489[40] = 2;
  v8();
  v490 = v1[14];
  v491 = (void *)(v677 + v3 + 166 * v2);
  *v491 = 167;
  v492 = (char *)v491 + v490;
  *(void *)v492 = "a_expr";
  *((void *)v492 + 1) = 6;
  v492[16] = 2;
  *((void *)v492 + 3) = "A_Expr";
  *((void *)v492 + 4) = 6;
  v492[40] = 2;
  v8();
  v493 = v1[14];
  v494 = (void *)(v677 + v3 + 167 * v2);
  *v494 = 168;
  v495 = (char *)v494 + v493;
  *(void *)v495 = "column_ref";
  *((void *)v495 + 1) = 10;
  v495[16] = 2;
  *((void *)v495 + 3) = "ColumnRef";
  *((void *)v495 + 4) = 9;
  v495[40] = 2;
  v8();
  v496 = v1[14];
  v497 = (void *)(v677 + v3 + 168 * v2);
  *v497 = 169;
  v498 = (char *)v497 + v496;
  *(void *)v498 = "param_ref";
  *((void *)v498 + 1) = 9;
  v498[16] = 2;
  *((void *)v498 + 3) = "ParamRef";
  *((void *)v498 + 4) = 8;
  v498[40] = 2;
  v8();
  v499 = v1[14];
  v500 = (void *)(v677 + v3 + 169 * v2);
  *v500 = 170;
  v501 = (char *)v500 + v499;
  *(void *)v501 = "a_const";
  *((void *)v501 + 1) = 7;
  v501[16] = 2;
  *((void *)v501 + 3) = "A_Const";
  *((void *)v501 + 4) = 7;
  v501[40] = 2;
  v8();
  v502 = v1[14];
  v503 = (void *)(v677 + v3 + 170 * v2);
  *v503 = 171;
  v504 = (char *)v503 + v502;
  *(void *)v504 = "func_call";
  *((void *)v504 + 1) = 9;
  v504[16] = 2;
  *((void *)v504 + 3) = "FuncCall";
  *((void *)v504 + 4) = 8;
  v504[40] = 2;
  v8();
  v505 = v1[14];
  v506 = (void *)(v677 + v3 + 171 * v2);
  *v506 = 172;
  v507 = (char *)v506 + v505;
  *(void *)v507 = "a_star";
  *((void *)v507 + 1) = 6;
  v507[16] = 2;
  *((void *)v507 + 3) = "A_Star";
  *((void *)v507 + 4) = 6;
  v507[40] = 2;
  v8();
  v508 = v1[14];
  v509 = (void *)(v677 + v3 + 172 * v2);
  *v509 = 173;
  v510 = (char *)v509 + v508;
  *(void *)v510 = "a_indices";
  *((void *)v510 + 1) = 9;
  v510[16] = 2;
  *((void *)v510 + 3) = "A_Indices";
  *((void *)v510 + 4) = 9;
  v510[40] = 2;
  v8();
  v511 = v1[14];
  v512 = (void *)(v677 + v3 + 173 * v2);
  *v512 = 174;
  v513 = (char *)v512 + v511;
  *(void *)v513 = "a_indirection";
  *((void *)v513 + 1) = 13;
  v513[16] = 2;
  *((void *)v513 + 3) = "A_Indirection";
  *((void *)v513 + 4) = 13;
  v513[40] = 2;
  v8();
  v514 = v1[14];
  v515 = (void *)(v677 + v3 + 174 * v2);
  *v515 = 175;
  v516 = (char *)v515 + v514;
  *(void *)v516 = "a_array_expr";
  *((void *)v516 + 1) = 12;
  v516[16] = 2;
  *((void *)v516 + 3) = "A_ArrayExpr";
  *((void *)v516 + 4) = 11;
  v516[40] = 2;
  v8();
  v517 = v1[14];
  v518 = (void *)(v677 + v3 + 175 * v2);
  *v518 = 176;
  v519 = (char *)v518 + v517;
  *(void *)v519 = "res_target";
  *((void *)v519 + 1) = 10;
  v519[16] = 2;
  *((void *)v519 + 3) = "ResTarget";
  *((void *)v519 + 4) = 9;
  v519[40] = 2;
  v8();
  v520 = v1[14];
  v521 = (void *)(v677 + v3 + 176 * v2);
  *v521 = 177;
  v522 = (char *)v521 + v520;
  *(void *)v522 = "multi_assign_ref";
  *((void *)v522 + 1) = 16;
  v522[16] = 2;
  *((void *)v522 + 3) = "MultiAssignRef";
  *((void *)v522 + 4) = 14;
  v522[40] = 2;
  v8();
  v523 = v1[14];
  v524 = (void *)(v677 + v3 + 177 * v2);
  *v524 = 178;
  v525 = (char *)v524 + v523;
  *(void *)v525 = "type_cast";
  *((void *)v525 + 1) = 9;
  v525[16] = 2;
  *((void *)v525 + 3) = "TypeCast";
  *((void *)v525 + 4) = 8;
  v525[40] = 2;
  v8();
  v526 = v1[14];
  v527 = (void *)(v677 + v3 + 178 * v2);
  *v527 = 179;
  v528 = (char *)v527 + v526;
  *(void *)v528 = "collate_clause";
  *((void *)v528 + 1) = 14;
  v528[16] = 2;
  *((void *)v528 + 3) = "CollateClause";
  *((void *)v528 + 4) = 13;
  v528[40] = 2;
  v8();
  v529 = v1[14];
  v530 = (void *)(v677 + v3 + 179 * v2);
  *v530 = 180;
  v531 = (char *)v530 + v529;
  *(void *)v531 = "sort_by";
  *((void *)v531 + 1) = 7;
  v531[16] = 2;
  *((void *)v531 + 3) = "SortBy";
  *((void *)v531 + 4) = 6;
  v531[40] = 2;
  v8();
  v532 = v1[14];
  v533 = (void *)(v677 + v3 + 180 * v2);
  *v533 = 181;
  v534 = (char *)v533 + v532;
  *(void *)v534 = "window_def";
  *((void *)v534 + 1) = 10;
  v534[16] = 2;
  *((void *)v534 + 3) = "WindowDef";
  *((void *)v534 + 4) = 9;
  v534[40] = 2;
  v8();
  v535 = v1[14];
  v536 = (void *)(v677 + v3 + 181 * v2);
  *v536 = 182;
  v537 = (char *)v536 + v535;
  *(void *)v537 = "range_subselect";
  *((void *)v537 + 1) = 15;
  v537[16] = 2;
  *((void *)v537 + 3) = "RangeSubselect";
  *((void *)v537 + 4) = 14;
  v537[40] = 2;
  v8();
  v538 = v1[14];
  v539 = (void *)(v677 + v3 + 182 * v2);
  *v539 = 183;
  v540 = (char *)v539 + v538;
  *(void *)v540 = "range_function";
  *((void *)v540 + 1) = 14;
  v540[16] = 2;
  *((void *)v540 + 3) = "RangeFunction";
  *((void *)v540 + 4) = 13;
  v540[40] = 2;
  v8();
  v541 = v1[14];
  v542 = (void *)(v677 + v3 + 183 * v2);
  *v542 = 184;
  v543 = (char *)v542 + v541;
  *(void *)v543 = 0x18EBF4000;
  *((void *)v543 + 1) = 18;
  v543[16] = 2;
  *((void *)v543 + 3) = "RangeTableSample";
  *((void *)v543 + 4) = 16;
  v543[40] = 2;
  v8();
  v544 = v1[14];
  v545 = (void *)(v677 + v3 + 184 * v2);
  *v545 = 185;
  v546 = (char *)v545 + v544;
  *(void *)v546 = "range_table_func";
  *((void *)v546 + 1) = 16;
  v546[16] = 2;
  *((void *)v546 + 3) = "RangeTableFunc";
  *((void *)v546 + 4) = 14;
  v546[40] = 2;
  v8();
  v547 = v1[14];
  v548 = (void *)(v677 + v3 + 185 * v2);
  *v548 = 186;
  v549 = (char *)v548 + v547;
  *(void *)v549 = "range_table_func_col";
  *((void *)v549 + 1) = 20;
  v549[16] = 2;
  *((void *)v549 + 3) = "RangeTableFuncCol";
  *((void *)v549 + 4) = 17;
  v549[40] = 2;
  v8();
  v550 = v1[14];
  v551 = (void *)(v677 + v3 + 186 * v2);
  *v551 = 187;
  v552 = (char *)v551 + v550;
  *(void *)v552 = "type_name";
  *((void *)v552 + 1) = 9;
  v552[16] = 2;
  *((void *)v552 + 3) = "TypeName";
  *((void *)v552 + 4) = 8;
  v552[40] = 2;
  v8();
  v553 = v1[14];
  v554 = (void *)(v677 + v3 + 187 * v2);
  *v554 = 188;
  v555 = (char *)v554 + v553;
  *(void *)v555 = "column_def";
  *((void *)v555 + 1) = 10;
  v555[16] = 2;
  *((void *)v555 + 3) = "ColumnDef";
  *((void *)v555 + 4) = 9;
  v555[40] = 2;
  v8();
  v556 = v1[14];
  v557 = (void *)(v677 + v3 + 188 * v2);
  *v557 = 189;
  v558 = (char *)v557 + v556;
  *(void *)v558 = "index_elem";
  *((void *)v558 + 1) = 10;
  v558[16] = 2;
  *((void *)v558 + 3) = "IndexElem";
  *((void *)v558 + 4) = 9;
  v558[40] = 2;
  v8();
  v559 = v1[14];
  v560 = (void *)(v677 + v3 + 189 * v2);
  *v560 = 190;
  v561 = (char *)v560 + v559;
  *(void *)v561 = "constraint";
  *((void *)v561 + 1) = 10;
  v561[16] = 2;
  *((void *)v561 + 3) = "Constraint";
  *((void *)v561 + 4) = 10;
  v561[40] = 2;
  v8();
  v562 = v1[14];
  v563 = (void *)(v677 + v3 + 190 * v2);
  *v563 = 191;
  v564 = (char *)v563 + v562;
  *(void *)v564 = "def_elem";
  *((void *)v564 + 1) = 8;
  v564[16] = 2;
  *((void *)v564 + 3) = "DefElem";
  *((void *)v564 + 4) = 7;
  v564[40] = 2;
  v8();
  v565 = v1[14];
  v566 = (void *)(v677 + v3 + 191 * v2);
  *v566 = 192;
  v567 = (char *)v566 + v565;
  *(void *)v567 = "range_tbl_entry";
  *((void *)v567 + 1) = 15;
  v567[16] = 2;
  *((void *)v567 + 3) = "RangeTblEntry";
  *((void *)v567 + 4) = 13;
  v567[40] = 2;
  v8();
  v568 = v1[14];
  v569 = (void *)(v677 + v3 + 192 * v2);
  *v569 = 193;
  v570 = (char *)v569 + v568;
  *(void *)v570 = "range_tbl_function";
  *((void *)v570 + 1) = 18;
  v570[16] = 2;
  *((void *)v570 + 3) = "RangeTblFunction";
  *((void *)v570 + 4) = 16;
  v570[40] = 2;
  v8();
  v571 = v1[14];
  v572 = (void *)(v677 + v3 + 193 * v2);
  *v572 = 194;
  v573 = (char *)v572 + v571;
  *(void *)v573 = "table_sample_clause";
  *((void *)v573 + 1) = 19;
  v573[16] = 2;
  *((void *)v573 + 3) = "TableSampleClause";
  *((void *)v573 + 4) = 17;
  v573[40] = 2;
  v8();
  v574 = v1[14];
  v575 = (void *)(v677 + v3 + 194 * v2);
  *v575 = 195;
  v576 = (char *)v575 + v574;
  *(void *)v576 = "with_check_option";
  *((void *)v576 + 1) = 17;
  v576[16] = 2;
  *((void *)v576 + 3) = "WithCheckOption";
  *((void *)v576 + 4) = 15;
  v576[40] = 2;
  v8();
  v577 = v1[14];
  v578 = (void *)(v677 + v3 + 195 * v2);
  *v578 = 196;
  v579 = (char *)v578 + v577;
  *(void *)v579 = "sort_group_clause";
  *((void *)v579 + 1) = 17;
  v579[16] = 2;
  *((void *)v579 + 3) = "SortGroupClause";
  *((void *)v579 + 4) = 15;
  v579[40] = 2;
  v8();
  v580 = v1[14];
  v581 = (void *)(v677 + v3 + 196 * v2);
  *v581 = 197;
  v582 = (char *)v581 + v580;
  *(void *)v582 = "grouping_set";
  *((void *)v582 + 1) = 12;
  v582[16] = 2;
  *((void *)v582 + 3) = "GroupingSet";
  *((void *)v582 + 4) = 11;
  v582[40] = 2;
  v8();
  v583 = v1[14];
  v584 = (void *)(v677 + v3 + 197 * v2);
  *v584 = 198;
  v585 = (char *)v584 + v583;
  *(void *)v585 = "window_clause";
  *((void *)v585 + 1) = 13;
  v585[16] = 2;
  *((void *)v585 + 3) = "WindowClause";
  *((void *)v585 + 4) = 12;
  v585[40] = 2;
  v8();
  v586 = v1[14];
  v587 = (void *)(v677 + v3 + 198 * v2);
  *v587 = 199;
  v588 = (char *)v587 + v586;
  *(void *)v588 = "object_with_args";
  *((void *)v588 + 1) = 16;
  v588[16] = 2;
  *((void *)v588 + 3) = "ObjectWithArgs";
  *((void *)v588 + 4) = 14;
  v588[40] = 2;
  v8();
  v589 = v1[14];
  v590 = (void *)(v677 + v3 + 199 * v2);
  *v590 = 200;
  v591 = (char *)v590 + v589;
  *(void *)v591 = "access_priv";
  *((void *)v591 + 1) = 11;
  v591[16] = 2;
  *((void *)v591 + 3) = "AccessPriv";
  *((void *)v591 + 4) = 10;
  v591[40] = 2;
  v8();
  v592 = v1[14];
  v593 = (void *)(v677 + v3 + 200 * v2);
  *v593 = 201;
  v594 = (char *)v593 + v592;
  *(void *)v594 = "create_op_class_item";
  *((void *)v594 + 1) = 20;
  v594[16] = 2;
  *((void *)v594 + 3) = "CreateOpClassItem";
  *((void *)v594 + 4) = 17;
  v594[40] = 2;
  v8();
  v595 = v1[14];
  v596 = (void *)(v677 + v3 + 201 * v2);
  *v596 = 202;
  v597 = (char *)v596 + v595;
  *(void *)v597 = "table_like_clause";
  *((void *)v597 + 1) = 17;
  v597[16] = 2;
  *((void *)v597 + 3) = "TableLikeClause";
  *((void *)v597 + 4) = 15;
  v597[40] = 2;
  v8();
  v598 = v1[14];
  v599 = (void *)(v677 + v3 + 202 * v2);
  *v599 = 203;
  v600 = (char *)v599 + v598;
  *(void *)v600 = "function_parameter";
  *((void *)v600 + 1) = 18;
  v600[16] = 2;
  *((void *)v600 + 3) = "FunctionParameter";
  *((void *)v600 + 4) = 17;
  v600[40] = 2;
  v8();
  v601 = v1[14];
  v602 = (void *)(v677 + v3 + 203 * v2);
  *v602 = 204;
  v603 = (char *)v602 + v601;
  *(void *)v603 = "locking_clause";
  *((void *)v603 + 1) = 14;
  v603[16] = 2;
  *((void *)v603 + 3) = "LockingClause";
  *((void *)v603 + 4) = 13;
  v603[40] = 2;
  v8();
  v604 = v1[14];
  v605 = (void *)(v677 + v3 + 204 * v2);
  *v605 = 205;
  v606 = (char *)v605 + v604;
  *(void *)v606 = "row_mark_clause";
  *((void *)v606 + 1) = 15;
  v606[16] = 2;
  *((void *)v606 + 3) = "RowMarkClause";
  *((void *)v606 + 4) = 13;
  v606[40] = 2;
  v8();
  v607 = v1[14];
  v608 = (void *)(v677 + v3 + 205 * v2);
  *v608 = 206;
  v609 = (char *)v608 + v607;
  *(void *)v609 = "xml_serialize";
  *((void *)v609 + 1) = 13;
  v609[16] = 2;
  *((void *)v609 + 3) = "XmlSerialize";
  *((void *)v609 + 4) = 12;
  v609[40] = 2;
  v8();
  v610 = v1[14];
  v611 = (void *)(v677 + v3 + 206 * v2);
  *v611 = 207;
  v612 = (char *)v611 + v610;
  *(void *)v612 = "with_clause";
  *((void *)v612 + 1) = 11;
  v612[16] = 2;
  *((void *)v612 + 3) = "WithClause";
  *((void *)v612 + 4) = 10;
  v612[40] = 2;
  v8();
  v613 = v1[14];
  v614 = (void *)(v677 + v3 + 207 * v2);
  *v614 = 208;
  v615 = (char *)v614 + v613;
  *(void *)v615 = "infer_clause";
  *((void *)v615 + 1) = 12;
  v615[16] = 2;
  *((void *)v615 + 3) = "InferClause";
  *((void *)v615 + 4) = 11;
  v615[40] = 2;
  v8();
  v616 = v1[14];
  v617 = (void *)(v677 + v3 + 208 * v2);
  *v617 = 209;
  v618 = (char *)v617 + v616;
  *(void *)v618 = "on_conflict_clause";
  *((void *)v618 + 1) = 18;
  v618[16] = 2;
  *((void *)v618 + 3) = "OnConflictClause";
  *((void *)v618 + 4) = 16;
  v618[40] = 2;
  v8();
  v619 = v1[14];
  v620 = (void *)(v677 + v3 + 209 * v2);
  *v620 = 210;
  v621 = (char *)v620 + v619;
  *(void *)v621 = "common_table_expr";
  *((void *)v621 + 1) = 17;
  v621[16] = 2;
  *((void *)v621 + 3) = "CommonTableExpr";
  *((void *)v621 + 4) = 15;
  v621[40] = 2;
  v8();
  v622 = v1[14];
  v623 = (void *)(v677 + v3 + 210 * v2);
  *v623 = 211;
  v624 = (char *)v623 + v622;
  *(void *)v624 = "role_spec";
  *((void *)v624 + 1) = 9;
  v624[16] = 2;
  *((void *)v624 + 3) = "RoleSpec";
  *((void *)v624 + 4) = 8;
  v624[40] = 2;
  v8();
  v625 = v1[14];
  v626 = (void *)(v677 + v3 + 211 * v2);
  *v626 = 212;
  v627 = (char *)v626 + v625;
  *(void *)v627 = "trigger_transition";
  *((void *)v627 + 1) = 18;
  v627[16] = 2;
  *((void *)v627 + 3) = "TriggerTransition";
  *((void *)v627 + 4) = 17;
  v627[40] = 2;
  v8();
  v628 = v1[14];
  v629 = (void *)(v677 + v3 + 212 * v2);
  *v629 = 213;
  v630 = (char *)v629 + v628;
  *(void *)v630 = "partition_elem";
  *((void *)v630 + 1) = 14;
  v630[16] = 2;
  *((void *)v630 + 3) = "PartitionElem";
  *((void *)v630 + 4) = 13;
  v630[40] = 2;
  v8();
  v631 = v1[14];
  v632 = (void *)(v677 + v3 + 213 * v2);
  *v632 = 214;
  v633 = (char *)v632 + v631;
  *(void *)v633 = "partition_spec";
  *((void *)v633 + 1) = 14;
  v633[16] = 2;
  *((void *)v633 + 3) = "PartitionSpec";
  *((void *)v633 + 4) = 13;
  v633[40] = 2;
  v8();
  v634 = v1[14];
  v635 = (void *)(v677 + v3 + 214 * v2);
  *v635 = 215;
  v636 = (char *)v635 + v634;
  *(void *)v636 = "partition_bound_spec";
  *((void *)v636 + 1) = 20;
  v636[16] = 2;
  *((void *)v636 + 3) = "PartitionBoundSpec";
  *((void *)v636 + 4) = 18;
  v636[40] = 2;
  v8();
  v637 = v1[14];
  v638 = (void *)(v677 + v3 + 215 * v2);
  *v638 = 216;
  v639 = (char *)v638 + v637;
  *(void *)v639 = "partition_range_datum";
  *((void *)v639 + 1) = 21;
  v639[16] = 2;
  *((void *)v639 + 3) = "PartitionRangeDatum";
  *((void *)v639 + 4) = 19;
  v639[40] = 2;
  v8();
  v640 = v1[14];
  v641 = (void *)(v677 + v3 + 216 * v2);
  *v641 = 217;
  v642 = (char *)v641 + v640;
  *(void *)v642 = "partition_cmd";
  *((void *)v642 + 1) = 13;
  v642[16] = 2;
  *((void *)v642 + 3) = "PartitionCmd";
  *((void *)v642 + 4) = 12;
  v642[40] = 2;
  v8();
  v643 = v1[14];
  v644 = (void *)(v677 + v3 + 217 * v2);
  *v644 = 218;
  v645 = (char *)v644 + v643;
  *(void *)v645 = "vacuum_relation";
  *((void *)v645 + 1) = 15;
  v645[16] = 2;
  *((void *)v645 + 3) = "VacuumRelation";
  *((void *)v645 + 4) = 14;
  v645[40] = 2;
  v8();
  v646 = v1[14];
  v647 = (void *)(v677 + v3 + 218 * v2);
  *v647 = 219;
  v648 = (char *)v647 + v646;
  *(void *)v648 = "inline_code_block";
  *((void *)v648 + 1) = 17;
  v648[16] = 2;
  *((void *)v648 + 3) = "InlineCodeBlock";
  *((void *)v648 + 4) = 15;
  v648[40] = 2;
  v8();
  v649 = v1[14];
  v650 = (void *)(v677 + v3 + 219 * v2);
  *v650 = 220;
  v651 = (char *)v650 + v649;
  *(void *)v651 = "call_context";
  *((void *)v651 + 1) = 12;
  v651[16] = 2;
  *((void *)v651 + 3) = "CallContext";
  *((void *)v651 + 4) = 11;
  v651[40] = 2;
  v8();
  v652 = v1[14];
  v653 = (void *)(v677 + v3 + 220 * v2);
  *v653 = 221;
  v654 = (char *)v653 + v652;
  *(void *)v654 = "integer";
  *((void *)v654 + 1) = 7;
  v654[16] = 2;
  *((void *)v654 + 3) = "Integer";
  *((void *)v654 + 4) = 7;
  v654[40] = 2;
  v8();
  v655 = v1[14];
  v656 = (void *)(v677 + v3 + 221 * v2);
  *v656 = 222;
  v657 = (char *)v656 + v655;
  *(void *)v657 = "float";
  *((void *)v657 + 1) = 5;
  v657[16] = 2;
  *((void *)v657 + 3) = "Float";
  *((void *)v657 + 4) = 5;
  v657[40] = 2;
  v8();
  v658 = v1[14];
  v659 = (void *)(v677 + v3 + 222 * v2);
  *v659 = 223;
  v660 = (char *)v659 + v658;
  *(void *)v660 = "string";
  *((void *)v660 + 1) = 6;
  v660[16] = 2;
  *((void *)v660 + 3) = "String";
  *((void *)v660 + 4) = 6;
  v660[40] = 2;
  v8();
  v661 = v1[14];
  v662 = (void *)(v677 + v3 + 223 * v2);
  *v662 = 224;
  v663 = (char *)v662 + v661;
  *(void *)v663 = "bit_string";
  *((void *)v663 + 1) = 10;
  v663[16] = 2;
  *((void *)v663 + 3) = "BitString";
  *((void *)v663 + 4) = 9;
  v663[40] = 2;
  v8();
  v664 = v1[14];
  v665 = (void *)(v677 + v3 + 224 * v2);
  *v665 = 225;
  v666 = (char *)v665 + v664;
  *(void *)v666 = "null";
  *((void *)v666 + 1) = 4;
  v666[16] = 2;
  *((void *)v666 + 3) = "Null";
  *((void *)v666 + 4) = 4;
  v666[40] = 2;
  v8();
  v667 = v1[14];
  v668 = (void *)(v677 + v3 + 225 * v2);
  *v668 = 226;
  v669 = (char *)v668 + v667;
  *(void *)v669 = "list";
  *((void *)v669 + 1) = 4;
  v669[16] = 2;
  *((void *)v669 + 3) = "List";
  *((void *)v669 + 4) = 4;
  v669[40] = 2;
  v8();
  v670 = v1[14];
  v671 = (void *)(v677 + v3 + 226 * v2);
  *v671 = 227;
  v672 = (char *)v671 + v670;
  *(void *)v672 = "int_list";
  *((void *)v672 + 1) = 8;
  v672[16] = 2;
  *((void *)v672 + 3) = "IntList";
  *((void *)v672 + 4) = 7;
  v672[40] = 2;
  v8();
  v673 = v1[14];
  v674 = (void *)(v677 + v3 + 227 * v2);
  *v674 = 228;
  v675 = (char *)v674 + v673;
  *(void *)v675 = "oid_list";
  *((void *)v675 + 1) = 8;
  v675[16] = 2;
  *((void *)v675 + 3) = "OidList";
  *((void *)v675 + 4) = 7;
  v675[40] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Alias._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Alias._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "aliasname";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "colnames";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeVar._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeVar._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "catalogname";
  *(void *)(v4 + 8) = 11;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "schemaname";
  *(void *)(v8 + 8) = 10;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "relname";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "inh";
  *((void *)v12 + 1) = 3;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "relpersistence";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "alias";
  *((void *)v16 + 1) = 5;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "location";
  *((void *)v18 + 1) = 8;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  uint64_t v32;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TableFunc._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TableFunc._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_18EB38E30;
  uint64_t v4 = v32 + v3;
  unint64_t v5 = v32 + v3 + v1[14];
  *(void *)(v32 + v3) = 1;
  *(void *)unint64_t v5 = "ns_uris";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "ns_names";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "docexpr";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "rowexpr";
  *((void *)v13 + 1) = 7;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "colnames";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "coltypes";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "coltypmods";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "colcollations";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "colexprs";
  *(void *)(v22 + 8) = 8;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "coldefexprs";
  *((void *)v24 + 1) = 11;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "notnulls";
  *((void *)v26 + 1) = 8;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 12;
  *(void *)Swift::String v28 = "ordinalitycol";
  *((void *)v28 + 1) = 13;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "location";
  *((void *)v30 + 1) = 8;
  v30[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Var._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Var._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_18EB38D80;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "varno";
  *(void *)(v9 + 8) = 5;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "varattno";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "vartype";
  *((void *)v13 + 1) = 7;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "vartypmod";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "varcollid";
  *((void *)v17 + 1) = 9;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "varlevelsup";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v26 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "varnosyn";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  Swift::String v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "varattnosyn";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "location";
  *((void *)v24 + 1) = 8;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Param._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Param._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "xpr";
  *(void *)(v4 + 8) = 3;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "paramkind";
  *(void *)(v8 + 8) = 9;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "paramid";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "paramtype";
  *((void *)v12 + 1) = 9;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "paramtypmod";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "paramcollid";
  *((void *)v16 + 1) = 11;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "location";
  *((void *)v18 + 1) = 8;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  uint64_t v41;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Aggref._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Aggref._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = xmmword_18EB38E40;
  uint64_t v4 = v41 + v3;
  unint64_t v5 = v41 + v3 + v1[14];
  *(void *)(v41 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v41 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "aggfnoid";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v41 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "aggtype";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v41 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "aggcollid";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v41 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "inputcollid";
  *((void *)v15 + 1) = 11;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v41 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "aggtranstype";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v41 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "aggargtypes";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v41 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "aggdirectargs";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  Swift::String v22 = v41 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "args";
  *(void *)(v22 + 8) = 4;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v41 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "aggorder";
  *((void *)v24 + 1) = 8;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v41 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "aggdistinct";
  *((void *)v26 + 1) = 11;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v41 + v3 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 12;
  *(void *)Swift::String v28 = "aggfilter";
  *((void *)v28 + 1) = 9;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v41 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "aggstar";
  *((void *)v30 + 1) = 7;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v41 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "aggvariadic";
  *((void *)v32 + 1) = 11;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v41 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 15;
  *(void *)uint64_t v34 = "aggkind";
  *((void *)v34 + 1) = 7;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v41 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)uint64_t v36 = "agglevelsup";
  *((void *)v36 + 1) = 11;
  v36[16] = 2;
  v8();
  uint64_t v37 = v41 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)uint64_t v37 = "aggsplit";
  *(void *)(v37 + 8) = 8;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v41 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  *uint64_t v38 = 18;
  *(void *)uint64_t v39 = "location";
  *((void *)v39 + 1) = 8;
  v39[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_GroupingFunc._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_GroupingFunc._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18EB38D50;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "xpr";
  *(void *)(v4 + 8) = 3;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "args";
  *(void *)(v8 + 8) = 4;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "refs";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "cols";
  *((void *)v12 + 1) = 4;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "agglevelsup";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "location";
  *((void *)v16 + 1) = 8;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v28;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_WindowFunc._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_WindowFunc._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Swift::String v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_18EB38DD0;
  uint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "winfnoid";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "wintype";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "wincollid";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "inputcollid";
  *((void *)v15 + 1) = 11;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "args";
  *((void *)v17 + 1) = 4;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "aggfilter";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "winref";
  *((void *)v21 + 1) = 6;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "winstar";
  *(void *)(v22 + 8) = 7;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "winagg";
  *((void *)v24 + 1) = 6;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "location";
  *((void *)v26 + 1) = 8;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SubscriptingRef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SubscriptingRef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Swift::String v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18EB38DE0;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "refcontainertype";
  *(void *)(v9 + 8) = 16;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "refelemtype";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "reftypmod";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "refcollid";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "refupperindexpr";
  *((void *)v17 + 1) = 15;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "reflowerindexpr";
  *((void *)v19 + 1) = 15;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "refexpr";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "refassgnexpr";
  *(void *)(v22 + 8) = 12;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FuncExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FuncExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_18EB38D80;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "funcid";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "funcresulttype";
  *((void *)v11 + 1) = 14;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "funcretset";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "funcvariadic";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "funcformat";
  *((void *)v17 + 1) = 10;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "funccollid";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "inputcollid";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "args";
  *(void *)(v22 + 8) = 4;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "location";
  *((void *)v24 + 1) = 8;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_NamedArgExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_NamedArgExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "arg";
  *(void *)(v9 + 8) = 3;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "name";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "argnumber";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "location";
  *(void *)(v14 + 8) = 8;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_OpExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_OpExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Swift::String v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18EB38DE0;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "opno";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "opfuncid";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "opresulttype";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "opretset";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "opcollid";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "inputcollid";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "args";
  *((void *)v21 + 1) = 4;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "location";
  *(void *)(v22 + 8) = 8;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DistinctExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DistinctExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Swift::String v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18EB38DE0;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "opno";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "opfuncid";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "opresulttype";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "opretset";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "opcollid";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "inputcollid";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "args";
  *((void *)v21 + 1) = 4;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "location";
  *(void *)(v22 + 8) = 8;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_NullIfExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_NullIfExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Swift::String v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_18EB38DE0;
  uint64_t v4 = v24 + v3;
  unint64_t v5 = v24 + v3 + v1[14];
  *(void *)(v24 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "opno";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "opfuncid";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "opresulttype";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "opretset";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "opcollid";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "inputcollid";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "args";
  *((void *)v21 + 1) = 4;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "location";
  *(void *)(v22 + 8) = 8;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ScalarArrayOpExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ScalarArrayOpExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "xpr";
  *(void *)(v4 + 8) = 3;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "opno";
  *(void *)(v8 + 8) = 4;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "opfuncid";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "use_or";
  *((void *)v12 + 1) = 6;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "inputcollid";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "args";
  *((void *)v16 + 1) = 4;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "location";
  *((void *)v18 + 1) = 8;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_BoolExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_BoolExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "BOOLop";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "args";
  *((void *)v12 + 1) = 4;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "location";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SubLink._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SubLink._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "xpr";
  *(void *)(v4 + 8) = 3;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "sub_link_type";
  *(void *)(v8 + 8) = 13;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "sub_link_id";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "testexpr";
  *((void *)v12 + 1) = 8;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "oper_name";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "subselect";
  *((void *)v16 + 1) = 9;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "location";
  *((void *)v18 + 1) = 8;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SubPlan._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SubPlan._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_18EB38D70;
  uint64_t v4 = v39 + v3;
  unint64_t v5 = v39 + v3 + v1[14];
  *(void *)(v39 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "sub_link_type";
  *(void *)(v9 + 8) = 13;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "testexpr";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "param_ids";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "plan_id";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "plan_name";
  *((void *)v17 + 1) = 9;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "first_col_type";
  *((void *)v19 + 1) = 14;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "first_col_typmod";
  *((void *)v21 + 1) = 16;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "first_col_collation";
  *(void *)(v22 + 8) = 19;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "use_hash_table";
  *((void *)v24 + 1) = 14;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "unknown_eq_false";
  *((void *)v26 + 1) = 16;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 12;
  *(void *)Swift::String v28 = "parallel_safe";
  *((void *)v28 + 1) = 13;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "set_param";
  *((void *)v30 + 1) = 9;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "par_param";
  *((void *)v32 + 1) = 9;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v4 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 15;
  *(void *)uint64_t v34 = "args";
  *((void *)v34 + 1) = 4;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v4 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)uint64_t v36 = "startup_cost";
  *((void *)v36 + 1) = 12;
  v36[16] = 2;
  v8();
  uint64_t v37 = v4 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)uint64_t v37 = "per_call_cost";
  *(void *)(v37 + 8) = 13;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlternativeSubPlan._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlternativeSubPlan._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "subplans";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FieldSelect._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FieldSelect._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18EB38D50;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "xpr";
  *(void *)(v4 + 8) = 3;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "arg";
  *(void *)(v8 + 8) = 3;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "fieldnum";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "resulttype";
  *((void *)v12 + 1) = 10;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "resulttypmod";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "resultcollid";
  *((void *)v16 + 1) = 12;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FieldStore._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FieldStore._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "arg";
  *(void *)(v10 + 8) = 3;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "newvals";
  *((void *)v12 + 1) = 7;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "fieldnums";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "resulttype";
  *(void *)(v15 + 8) = 10;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RelabelType._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RelabelType._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "xpr";
  *(void *)(v4 + 8) = 3;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "arg";
  *(void *)(v8 + 8) = 3;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "resulttype";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "resulttypmod";
  *((void *)v12 + 1) = 12;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "resultcollid";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "relabelformat";
  *((void *)v16 + 1) = 13;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "location";
  *((void *)v18 + 1) = 8;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CoerceViaIO._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CoerceViaIO._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18EB38D50;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "xpr";
  *(void *)(v4 + 8) = 3;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "arg";
  *(void *)(v8 + 8) = 3;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "resulttype";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "resultcollid";
  *((void *)v12 + 1) = 12;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "coerceformat";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "location";
  *((void *)v16 + 1) = 8;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ArrayCoerceExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ArrayCoerceExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "arg";
  *(void *)(v9 + 8) = 3;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "elemexpr";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "resulttype";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "resulttypmod";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "resultcollid";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "coerceformat";
  *((void *)v19 + 1) = 12;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "location";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ConvertRowtypeExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ConvertRowtypeExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "arg";
  *(void *)(v10 + 8) = 3;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "resulttype";
  *((void *)v12 + 1) = 10;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "convertformat";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "location";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CollateExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CollateExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "arg";
  *(void *)(v10 + 8) = 3;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "coll_oid";
  *((void *)v12 + 1) = 8;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "location";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CaseExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CaseExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "xpr";
  *(void *)(v4 + 8) = 3;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "casetype";
  *(void *)(v8 + 8) = 8;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "casecollid";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "arg";
  *((void *)v12 + 1) = 3;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "args";
  *((void *)v14 + 1) = 4;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "defresult";
  *((void *)v16 + 1) = 9;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "location";
  *((void *)v18 + 1) = 8;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CaseWhen._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CaseWhen._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "expr";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "result";
  *((void *)v12 + 1) = 6;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "location";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CaseTestExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CaseTestExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "type_id";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "type_mod";
  *((void *)v12 + 1) = 8;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "collation";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ArrayExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ArrayExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "xpr";
  *(void *)(v4 + 8) = 3;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "array_typeid";
  *(void *)(v8 + 8) = 12;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "array_collid";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "element_typeid";
  *((void *)v12 + 1) = 14;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "elements";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "multidims";
  *((void *)v16 + 1) = 9;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "location";
  *((void *)v18 + 1) = 8;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RowExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RowExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18EB38D50;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "xpr";
  *(void *)(v4 + 8) = 3;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "args";
  *(void *)(v8 + 8) = 4;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "row_typeid";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "row_format";
  *((void *)v12 + 1) = 10;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "colnames";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "location";
  *((void *)v16 + 1) = 8;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RowCompareExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RowCompareExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "xpr";
  *(void *)(v4 + 8) = 3;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "rctype";
  *(void *)(v8 + 8) = 6;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "opnos";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "opfamilies";
  *((void *)v12 + 1) = 10;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "inputcollids";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "largs";
  *((void *)v16 + 1) = 5;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "rargs";
  *((void *)v18 + 1) = 5;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CoalesceExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CoalesceExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "coalescetype";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "coalescecollid";
  *((void *)v12 + 1) = 14;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "args";
  *((void *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "location";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_MinMaxExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_MinMaxExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38DB0;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "minmaxtype";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "minmaxcollid";
  *((void *)v12 + 1) = 12;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "inputcollid";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "op";
  *((void *)v16 + 1) = 2;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "args";
  *((void *)v18 + 1) = 4;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v5 + 6 * v2);
  unint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 7;
  *(void *)unint64_t v20 = "location";
  *((void *)v20 + 1) = 8;
  v20[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SQLValueFunction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SQLValueFunction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "op";
  *(void *)(v9 + 8) = 2;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "type";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "typmod";
  *((void *)v13 + 1) = 6;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "location";
  *(void *)(v14 + 8) = 8;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_XmlExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_XmlExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_18EB38D80;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "op";
  *(void *)(v9 + 8) = 2;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "name";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "named_args";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "arg_names";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "args";
  *((void *)v17 + 1) = 4;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "xmloption";
  *((void *)v19 + 1) = 9;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "type";
  *((void *)v21 + 1) = 4;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "typmod";
  *(void *)(v22 + 8) = 6;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "location";
  *((void *)v24 + 1) = 8;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_NullTest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_NullTest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "arg";
  *(void *)(v10 + 8) = 3;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "nulltesttype";
  *((void *)v12 + 1) = 12;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "argisrow";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "location";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_BooleanTest._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_BooleanTest._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "arg";
  *(void *)(v10 + 8) = 3;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "BOOLtesttype";
  *((void *)v12 + 1) = 12;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "location";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CoerceToDomain._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CoerceToDomain._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "xpr";
  *(void *)(v4 + 8) = 3;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "arg";
  *(void *)(v8 + 8) = 3;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "resulttype";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "resulttypmod";
  *((void *)v12 + 1) = 12;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "resultcollid";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "coercionformat";
  *((void *)v16 + 1) = 14;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "location";
  *((void *)v18 + 1) = 8;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CurrentOfExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CurrentOfExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "cvarno";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "cursor_name";
  *((void *)v12 + 1) = 11;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "cursor_param";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_NextValueExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_NextValueExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "seqid";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "type_id";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_InferenceElem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_InferenceElem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xpr";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "expr";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "infercollid";
  *((void *)v12 + 1) = 11;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "inferopclass";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TargetEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TargetEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "xpr";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "expr";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "resno";
  *((void *)v11 + 1) = 5;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "resname";
  *((void *)v13 + 1) = 7;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "ressortgroupref";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "resorigtbl";
  *((void *)v17 + 1) = 10;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "resorigcol";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "resjunk";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_JoinExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_JoinExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "jointype";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "is_natural";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "larg";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "rarg";
  *((void *)v13 + 1) = 4;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "using_clause";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "quals";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "alias";
  *((void *)v19 + 1) = 5;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "rtindex";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FromExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FromExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "fromlist";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "quals";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_OnConflictExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_OnConflictExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "action";
  *(void *)(v5 + 8) = 6;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "arbiter_elems";
  *(void *)(v9 + 8) = 13;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "arbiter_where";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "constraint";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "on_conflict_set";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "on_conflict_where";
  *((void *)v17 + 1) = 17;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "excl_rel_index";
  *((void *)v19 + 1) = 14;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "excl_rel_tlist";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_IntoClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_IntoClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "rel";
  *(void *)(v5 + 8) = 3;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "col_names";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "access_method";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "options";
  *((void *)v13 + 1) = 7;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "on_commit";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "table_space_name";
  *((void *)v17 + 1) = 16;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "view_query";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "skip_data";
  *((void *)v21 + 1) = 9;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RawStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RawStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "stmt";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "stmt_location";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "stmt_len";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  void *v30;
  char *v31;
  void *v32;
  char *v33;
  void *v34;
  char *v35;
  void *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  char *v40;
  void *v41;
  char *v42;
  void *v43;
  char *v44;
  void *v45;
  char *v46;
  void *v47;
  char *v48;
  void *v49;
  char *v50;
  void *v51;
  char *v52;
  void *v53;
  char *v54;
  void *v55;
  char *v56;
  void *v57;
  char *v58;
  void *v59;
  char *v60;
  void *v61;
  char *v62;
  void *v63;
  char *v64;
  void *v65;
  char *v66;
  void *v67;
  char *v68;
  uint64_t v69;
  void *v70;
  char *v71;
  void *v72;
  char *v73;
  void *v74;
  char *v75;
  uint64_t v77;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Query._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Query._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v77 = swift_allocObject();
  *(_OWORD *)(v77 + 16) = xmmword_18EB38E50;
  uint64_t v4 = v77 + v3;
  unint64_t v5 = v77 + v3 + v1[14];
  *(void *)(v77 + v3) = 1;
  *(void *)unint64_t v5 = "command_type";
  *(void *)(v5 + 8) = 12;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FD0];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v77 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "query_source";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v77 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "can_set_tag";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v77 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "utility_stmt";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v77 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "result_relation";
  *((void *)v15 + 1) = 15;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v77 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "has_aggs";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v77 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "has_window_funcs";
  *((void *)v19 + 1) = 16;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v77 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "has_target_srfs";
  *((void *)v21 + 1) = 15;
  v21[16] = 2;
  *((void *)v21 + 3) = "hasTargetSRFs";
  *((void *)v21 + 4) = 13;
  v21[40] = 2;
  v8();
  Swift::String v22 = v77 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "has_sub_links";
  *(void *)(v22 + 8) = 13;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v77 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "has_distinct_on";
  *((void *)v24 + 1) = 15;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v77 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "has_recursive";
  *((void *)v26 + 1) = 13;
  v26[16] = 2;
  v8();
  uint64_t v27 = v1[14];
  Swift::String v28 = (void *)(v77 + v3 + 11 * v2);
  unint64_t *v28 = 12;
  uint64_t v29 = (char *)v28 + v27;
  *(void *)uint64_t v29 = "has_modifying_cte";
  *((void *)v29 + 1) = 17;
  v29[16] = 2;
  *((void *)v29 + 3) = "hasModifyingCTE";
  *((void *)v29 + 4) = 15;
  v29[40] = 2;
  v8();
  uint64_t v30 = (void *)(v77 + v3 + 12 * v2);
  unint64_t v31 = (char *)v30 + v1[14];
  uint64_t *v30 = 13;
  *(void *)unint64_t v31 = "has_for_update";
  *((void *)v31 + 1) = 14;
  v31[16] = 2;
  v8();
  uint64_t v32 = (void *)(v77 + v3 + 13 * v2);
  int v33 = (char *)v32 + v1[14];
  *uint64_t v32 = 14;
  *(void *)int v33 = "has_row_security";
  *((void *)v33 + 1) = 16;
  v33[16] = 2;
  v8();
  uint64_t v34 = (void *)(v77 + v3 + 14 * v2);
  uint64_t v35 = (char *)v34 + v1[14];
  *uint64_t v34 = 15;
  *(void *)uint64_t v35 = "cte_list";
  *((void *)v35 + 1) = 8;
  v35[16] = 2;
  v8();
  uint64_t v36 = (void *)(v77 + v3 + 15 * v2);
  uint64_t v37 = (char *)v36 + v1[14];
  *uint64_t v36 = 16;
  *(void *)uint64_t v37 = "rtable";
  *((void *)v37 + 1) = 6;
  v37[16] = 2;
  v8();
  uint64_t v38 = v77 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)uint64_t v38 = "jointree";
  *(void *)(v38 + 8) = 8;
  *(unsigned char *)(v38 + 16) = 2;
  v8();
  uint64_t v39 = (void *)(v77 + v3 + 17 * v2);
  uint64_t v40 = (char *)v39 + v1[14];
  *uint64_t v39 = 18;
  *(void *)uint64_t v40 = "target_list";
  *((void *)v40 + 1) = 11;
  v40[16] = 2;
  v8();
  uint64_t v41 = (void *)(v77 + v3 + 18 * v2);
  unint64_t v42 = (char *)v41 + v1[14];
  char *v41 = 19;
  *(void *)unint64_t v42 = "override";
  *((void *)v42 + 1) = 8;
  v42[16] = 2;
  v8();
  uint64_t v43 = (void *)(v77 + v3 + 19 * v2);
  uint64_t v44 = (char *)v43 + v1[14];
  char *v43 = 20;
  *(void *)uint64_t v44 = "on_conflict";
  *((void *)v44 + 1) = 11;
  v44[16] = 2;
  v8();
  unint64_t v45 = (void *)(v77 + v3 + 20 * v2);
  uint64_t v46 = (char *)v45 + v1[14];
  void *v45 = 21;
  *(void *)uint64_t v46 = "returning_list";
  *((void *)v46 + 1) = 14;
  v46[16] = 2;
  v8();
  Swift::String v47 = (void *)(v77 + v3 + 21 * v2);
  Swift::String v48 = (char *)v47 + v1[14];
  *Swift::String v47 = 22;
  *(void *)Swift::String v48 = "group_clause";
  *((void *)v48 + 1) = 12;
  v48[16] = 2;
  v8();
  unint64_t v49 = (void *)(v77 + v3 + 22 * v2);
  unint64_t v50 = (char *)v49 + v1[14];
  *unint64_t v49 = 23;
  *(void *)unint64_t v50 = "grouping_sets";
  *((void *)v50 + 1) = 13;
  v50[16] = 2;
  v8();
  uint64_t v51 = (void *)(v77 + v3 + 23 * v2);
  uint64_t v52 = (char *)v51 + v1[14];
  *uint64_t v51 = 24;
  *(void *)uint64_t v52 = "having_qual";
  *((void *)v52 + 1) = 11;
  v52[16] = 2;
  v8();
  uint64_t v53 = (void *)(v77 + v3 + 24 * v2);
  uint64_t v54 = (char *)v53 + v1[14];
  *uint64_t v53 = 25;
  *(void *)uint64_t v54 = "window_clause";
  *((void *)v54 + 1) = 13;
  v54[16] = 2;
  v8();
  uint64_t v55 = (void *)(v77 + v3 + 25 * v2);
  uint64_t v56 = (char *)v55 + v1[14];
  *uint64_t v55 = 26;
  *(void *)uint64_t v56 = "distinct_clause";
  *((void *)v56 + 1) = 15;
  v56[16] = 2;
  v8();
  uint64_t v57 = (void *)(v77 + v3 + 26 * v2);
  uint64_t v58 = (char *)v57 + v1[14];
  *uint64_t v57 = 27;
  *(void *)uint64_t v58 = "sort_clause";
  *((void *)v58 + 1) = 11;
  v58[16] = 2;
  v8();
  int v59 = (void *)(v77 + v3 + 27 * v2);
  uint64_t v60 = (char *)v59 + v1[14];
  *int v59 = 28;
  *(void *)uint64_t v60 = "limit_offset";
  *((void *)v60 + 1) = 12;
  v60[16] = 2;
  v8();
  uint64_t v61 = (void *)(v77 + v3 + 28 * v2);
  uint64_t v62 = (char *)v61 + v1[14];
  *uint64_t v61 = 29;
  *(void *)uint64_t v62 = "limit_count";
  *((void *)v62 + 1) = 11;
  v62[16] = 2;
  v8();
  uint64_t v63 = (void *)(v77 + v3 + 29 * v2);
  uint64_t v64 = (char *)v63 + v1[14];
  *uint64_t v63 = 30;
  *(void *)uint64_t v64 = "limit_option";
  *((void *)v64 + 1) = 12;
  v64[16] = 2;
  v8();
  uint64_t v65 = (void *)(v77 + v3 + 30 * v2);
  uint64_t v66 = (char *)v65 + v1[14];
  *uint64_t v65 = 31;
  *(void *)uint64_t v66 = "row_marks";
  *((void *)v66 + 1) = 9;
  v66[16] = 2;
  v8();
  uint64_t v67 = (void *)(v77 + v3 + 31 * v2);
  unint64_t v68 = (char *)v67 + v1[14];
  *uint64_t v67 = 32;
  *(void *)unint64_t v68 = "set_operations";
  *((void *)v68 + 1) = 14;
  v68[16] = 2;
  v8();
  uint64_t v69 = v77 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 33;
  *(void *)uint64_t v69 = "constraint_deps";
  *(void *)(v69 + 8) = 15;
  *(unsigned char *)(v69 + 16) = 2;
  v8();
  Swift::String v70 = (void *)(v77 + v3 + 33 * v2);
  Swift::String v71 = (char *)v70 + v1[14];
  *Swift::String v70 = 34;
  *(void *)Swift::String v71 = "with_check_options";
  *((void *)v71 + 1) = 18;
  v71[16] = 2;
  v8();
  unint64_t v72 = (void *)(v77 + v3 + 34 * v2);
  uint64_t v73 = (char *)v72 + v1[14];
  *unint64_t v72 = 35;
  *(void *)uint64_t v73 = "stmt_location";
  *((void *)v73 + 1) = 13;
  v73[16] = 2;
  v8();
  Swift::String v74 = (void *)(v77 + v3 + 35 * v2);
  uint64_t v75 = (char *)v74 + v1[14];
  *Swift::String v74 = 36;
  *(void *)uint64_t v75 = "stmt_len";
  *((void *)v75 + 1) = 8;
  v75[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  uint64_t v21;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_InsertStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_InsertStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v21 + v3;
  unint64_t v5 = v21 + v3 + v1[14];
  *(void *)(v21 + v3) = 1;
  *(void *)unint64_t v5 = "relation";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "cols";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "select_stmt";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "on_conflict_clause";
  *((void *)v13 + 1) = 18;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "returning_list";
  *((void *)v15 + 1) = 14;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "with_clause";
  *((void *)v17 + 1) = 11;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "override";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DeleteStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DeleteStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "relation";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "using_clause";
  *(void *)(v9 + 8) = 12;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "where_clause";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "returning_list";
  *((void *)v13 + 1) = 14;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "with_clause";
  *(void *)(v14 + 8) = 11;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_UpdateStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_UpdateStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "relation";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "target_list";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "where_clause";
  *((void *)v12 + 1) = 12;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "from_clause";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "returning_list";
  *((void *)v16 + 1) = 14;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "with_clause";
  *((void *)v18 + 1) = 11;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  uint64_t v43;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SelectStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SelectStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v43 = swift_allocObject();
  *(_OWORD *)(v43 + 16) = xmmword_18EB38A00;
  uint64_t v4 = v43 + v3;
  unint64_t v5 = v43 + v3 + v1[14];
  *(void *)(v43 + v3) = 1;
  *(void *)unint64_t v5 = "distinct_clause";
  *(void *)(v5 + 8) = 15;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FD0];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v43 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "into_clause";
  *(void *)(v9 + 8) = 11;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v43 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "target_list";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v43 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "from_clause";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v43 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "where_clause";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v43 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "group_clause";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v43 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "having_clause";
  *((void *)v19 + 1) = 13;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v43 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "window_clause";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  Swift::String v22 = v43 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "values_lists";
  *(void *)(v22 + 8) = 12;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v43 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "sort_clause";
  *((void *)v24 + 1) = 11;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v43 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "limit_offset";
  *((void *)v26 + 1) = 12;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v43 + v3 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 12;
  *(void *)Swift::String v28 = "limit_count";
  *((void *)v28 + 1) = 11;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v43 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "limit_option";
  *((void *)v30 + 1) = 12;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v43 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "locking_clause";
  *((void *)v32 + 1) = 14;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v43 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 15;
  *(void *)uint64_t v34 = "with_clause";
  *((void *)v34 + 1) = 11;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v43 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)uint64_t v36 = "op";
  *((void *)v36 + 1) = 2;
  v36[16] = 2;
  v8();
  uint64_t v37 = v43 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)uint64_t v37 = "all";
  *(void *)(v37 + 8) = 3;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v43 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  *uint64_t v38 = 18;
  *(void *)uint64_t v39 = "larg";
  *((void *)v39 + 1) = 4;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v43 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 19;
  *(void *)uint64_t v41 = "rarg";
  *((void *)v41 + 1) = 4;
  v41[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTableStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTableStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "relation";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "cmds";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "relkind";
  *((void *)v12 + 1) = 7;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "missing_ok";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  uint64_t v21;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTableCmd._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTableCmd._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v21 + v3;
  unint64_t v5 = v21 + v3 + v1[14];
  *(void *)(v21 + v3) = 1;
  *(void *)unint64_t v5 = "subtype";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "name";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "num";
  *((void *)v11 + 1) = 3;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "newowner";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "def";
  *((void *)v15 + 1) = 3;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "behavior";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "missing_ok";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterDomainStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterDomainStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18EB38D50;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "subtype";
  *(void *)(v4 + 8) = 7;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "type_name";
  *(void *)(v8 + 8) = 9;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "name";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "def";
  *((void *)v12 + 1) = 3;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "behavior";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "missing_ok";
  *((void *)v16 + 1) = 10;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SetOperationStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SetOperationStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "op";
  *(void *)(v5 + 8) = 2;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "all";
  *(void *)(v9 + 8) = 3;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "larg";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "rarg";
  *((void *)v13 + 1) = 4;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "col_types";
  *((void *)v15 + 1) = 9;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "col_typmods";
  *((void *)v17 + 1) = 11;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "col_collations";
  *((void *)v19 + 1) = 14;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "group_clauses";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v22;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_GrantStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_GrantStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Swift::String v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v22 + v3 + v1[14];
  *(void *)(v22 + v3) = 1;
  *(void *)uint64_t v4 = "is_grant";
  *(void *)(v4 + 8) = 8;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v22 + v3 + v2 + v1[14];
  *(void *)(v22 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "targtype";
  *(void *)(v8 + 8) = 8;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v22 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "objtype";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v22 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "objects";
  *((void *)v12 + 1) = 7;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v22 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "privileges";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v22 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "grantees";
  *((void *)v16 + 1) = 8;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v22 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "grant_option";
  *((void *)v18 + 1) = 12;
  v18[16] = 2;
  v7();
  uint64_t v19 = (void *)(v22 + v3 + 7 * v2);
  unint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 8;
  *(void *)unint64_t v20 = "behavior";
  *((void *)v20 + 1) = 8;
  v20[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_GrantRoleStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_GrantRoleStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18EB38D50;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "granted_roles";
  *(void *)(v4 + 8) = 13;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "grantee_roles";
  *(void *)(v8 + 8) = 13;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "is_grant";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "admin_opt";
  *((void *)v12 + 1) = 9;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "grantor";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "behavior";
  *((void *)v16 + 1) = 8;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterDefaultPrivilegesStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterDefaultPrivilegesStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "options";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "action";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ClusterStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ClusterStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "relation";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "indexname";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "options";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CopyStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CopyStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "relation";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "query";
  *(void *)(v9 + 8) = 5;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "attlist";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "is_from";
  *((void *)v13 + 1) = 7;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "is_program";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "filename";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "options";
  *((void *)v19 + 1) = 7;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "where_clause";
  *((void *)v21 + 1) = 12;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  uint64_t v30;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_18EB38E60;
  uint64_t v4 = v30 + v3;
  unint64_t v5 = v30 + v3 + v1[14];
  *(void *)(v30 + v3) = 1;
  *(void *)unint64_t v5 = "relation";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v30 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "table_elts";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v30 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "inh_relations";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v30 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "partbound";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v30 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "partspec";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v30 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "of_typename";
  *((void *)v17 + 1) = 11;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v30 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "constraints";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v30 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "options";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  Swift::String v22 = v30 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "oncommit";
  *(void *)(v22 + 8) = 8;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v30 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "tablespacename";
  *((void *)v24 + 1) = 14;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v30 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "access_method";
  *((void *)v26 + 1) = 13;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v30 + v3 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 12;
  *(void *)Swift::String v28 = "if_not_exists";
  *((void *)v28 + 1) = 13;
  v28[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DefineStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DefineStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "kind";
  *(void *)(v4 + 8) = 4;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "oldstyle";
  *(void *)(v8 + 8) = 8;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "defnames";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "args";
  *((void *)v12 + 1) = 4;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "definition";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "if_not_exists";
  *((void *)v16 + 1) = 13;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "replace";
  *((void *)v18 + 1) = 7;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "objects";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "remove_type";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "behavior";
  *((void *)v12 + 1) = 8;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "missing_ok";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "concurrent";
  *(void *)(v15 + 8) = 10;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TruncateStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TruncateStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "relations";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "restart_seqs";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "behavior";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CommentStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CommentStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "objtype";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "object";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "comment";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FetchStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FetchStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "direction";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "how_many";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "portalname";
  *((void *)v12 + 1) = 10;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "ismove";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  uint64_t v51;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_IndexStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_IndexStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_18EB38E70;
  uint64_t v4 = v51 + v3;
  unint64_t v5 = v51 + v3 + v1[14];
  *(void *)(v51 + v3) = 1;
  *(void *)unint64_t v5 = "idxname";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v51 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "relation";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v51 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "access_method";
  *((void *)v11 + 1) = 13;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v51 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "table_space";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v51 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "index_params";
  *((void *)v15 + 1) = 12;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v51 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "index_including_params";
  *((void *)v17 + 1) = 22;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v51 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "options";
  *((void *)v19 + 1) = 7;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v51 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "where_clause";
  *((void *)v21 + 1) = 12;
  v21[16] = 2;
  v8();
  Swift::String v22 = v51 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "exclude_op_names";
  *(void *)(v22 + 8) = 16;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v51 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "idxcomment";
  *((void *)v24 + 1) = 10;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v51 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "index_oid";
  *((void *)v26 + 1) = 9;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v51 + v3 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 12;
  *(void *)Swift::String v28 = "old_node";
  *((void *)v28 + 1) = 8;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v51 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "old_create_subid";
  *((void *)v30 + 1) = 16;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v51 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "old_first_relfilenode_subid";
  *((void *)v32 + 1) = 27;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v51 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 15;
  *(void *)uint64_t v34 = "unique";
  *((void *)v34 + 1) = 6;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v51 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)uint64_t v36 = "primary";
  *((void *)v36 + 1) = 7;
  v36[16] = 2;
  v8();
  uint64_t v37 = v51 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)uint64_t v37 = "isconstraint";
  *(void *)(v37 + 8) = 12;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v51 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  *uint64_t v38 = 18;
  *(void *)uint64_t v39 = "deferrable";
  *((void *)v39 + 1) = 10;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v51 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 19;
  *(void *)uint64_t v41 = "initdeferred";
  *((void *)v41 + 1) = 12;
  v41[16] = 2;
  v8();
  unint64_t v42 = (void *)(v51 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  void *v42 = 20;
  *(void *)uint64_t v43 = "transformed";
  *((void *)v43 + 1) = 11;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v51 + v3 + 20 * v2);
  unint64_t v45 = (char *)v44 + v1[14];
  char *v44 = 21;
  *(void *)unint64_t v45 = "concurrent";
  *((void *)v45 + 1) = 10;
  v45[16] = 2;
  v8();
  uint64_t v46 = (void *)(v51 + v3 + 21 * v2);
  Swift::String v47 = (char *)v46 + v1[14];
  *uint64_t v46 = 22;
  *(void *)Swift::String v47 = "if_not_exists";
  *((void *)v47 + 1) = 13;
  v47[16] = 2;
  v8();
  Swift::String v48 = (void *)(v51 + v3 + 22 * v2);
  unint64_t v49 = (char *)v48 + v1[14];
  *Swift::String v48 = 23;
  *(void *)unint64_t v49 = "reset_default_tblspc";
  *((void *)v49 + 1) = 20;
  v49[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateFunctionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateFunctionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "is_procedure";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "replace";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "funcname";
  *((void *)v12 + 1) = 8;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "parameters";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "return_type";
  *((void *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "options";
  *((void *)v18 + 1) = 7;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterFunctionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterFunctionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "objtype";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "func";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "actions";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RenameStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RenameStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "rename_type";
  *(void *)(v5 + 8) = 11;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FD0];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "relation_type";
  *(void *)(v9 + 8) = 13;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "relation";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "object";
  *((void *)v13 + 1) = 6;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "subname";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "newname";
  *((void *)v17 + 1) = 7;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "behavior";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "missing_ok";
  *((void *)v21 + 1) = 10;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RuleStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RuleStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "relation";
  *(void *)(v4 + 8) = 8;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "rulename";
  *(void *)(v8 + 8) = 8;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "where_clause";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "event";
  *((void *)v12 + 1) = 5;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "instead";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "actions";
  *((void *)v16 + 1) = 7;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "replace";
  *((void *)v18 + 1) = 7;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_NotifyStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_NotifyStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "conditionname";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "payload";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TransactionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TransactionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "kind";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "options";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "savepoint_name";
  *((void *)v11 + 1) = 14;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "gid";
  *((void *)v13 + 1) = 3;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "chain";
  *(void *)(v14 + 8) = 5;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ViewStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ViewStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18EB38D50;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "view";
  *(void *)(v4 + 8) = 4;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "aliases";
  *(void *)(v8 + 8) = 7;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "query";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "replace";
  *((void *)v12 + 1) = 7;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "options";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "with_check_option";
  *((void *)v16 + 1) = 17;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateDomainStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateDomainStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "domainname";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "type_name";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "coll_clause";
  *((void *)v12 + 1) = 11;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "constraints";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreatedbStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreatedbStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "dbname";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropdbStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropdbStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "dbname";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "missing_ok";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "options";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_VacuumStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_VacuumStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "options";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "rels";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "is_vacuumcmd";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ExplainStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ExplainStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "query";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateTableAsStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateTableAsStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "query";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "into";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "relkind";
  *((void *)v12 + 1) = 7;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "is_select_into";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "if_not_exists";
  *(void *)(v15 + 8) = 13;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateSeqStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateSeqStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "sequence";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "owner_id";
  *((void *)v12 + 1) = 8;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "for_identity";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "if_not_exists";
  *(void *)(v15 + 8) = 13;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterSeqStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterSeqStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "sequence";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "for_identity";
  *((void *)v12 + 1) = 12;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "missing_ok";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_VariableSetStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_VariableSetStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "kind";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "name";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "args";
  *((void *)v12 + 1) = 4;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "is_local";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v34;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateTrigStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateTrigStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_18EB38E80;
  uint64_t v4 = v34 + v3;
  unint64_t v5 = v34 + v3 + v1[14];
  *(void *)(v34 + v3) = 1;
  *(void *)unint64_t v5 = "trigname";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v34 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "relation";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v34 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "funcname";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v34 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "args";
  *((void *)v13 + 1) = 4;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v34 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "row";
  *((void *)v15 + 1) = 3;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v34 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "timing";
  *((void *)v17 + 1) = 6;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v34 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "events";
  *((void *)v19 + 1) = 6;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v34 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "columns";
  *((void *)v21 + 1) = 7;
  v21[16] = 2;
  v8();
  Swift::String v22 = v34 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "when_clause";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v34 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "isconstraint";
  *((void *)v24 + 1) = 12;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v34 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "transition_rels";
  *((void *)v26 + 1) = 15;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v34 + v3 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 12;
  *(void *)Swift::String v28 = "deferrable";
  *((void *)v28 + 1) = 10;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v34 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "initdeferred";
  *((void *)v30 + 1) = 12;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v34 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "constrrel";
  *((void *)v32 + 1) = 9;
  v32[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreatePLangStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreatePLangStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "replace";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "plname";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "plhandler";
  *((void *)v12 + 1) = 9;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "plinline";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "plvalidator";
  *((void *)v16 + 1) = 11;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "pltrusted";
  *((void *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateRoleStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateRoleStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "stmt_type";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "role";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "options";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterRoleStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterRoleStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "role";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "action";
  *(void *)(v11 + 8) = 6;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropRoleStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropRoleStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "roles";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "missing_ok";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_LockStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_LockStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "relations";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "mode";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "nowait";
  *(void *)(v11 + 8) = 6;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ConstraintsSetStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ConstraintsSetStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "constraints";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "deferred";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ReindexStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ReindexStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "kind";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "relation";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "name";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "options";
  *((void *)v13 + 1) = 7;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "concurrent";
  *(void *)(v14 + 8) = 10;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateSchemaStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateSchemaStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "schemaname";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "authrole";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "schema_elts";
  *((void *)v12 + 1) = 11;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "if_not_exists";
  *((void *)v14 + 1) = 13;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterDatabaseStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterDatabaseStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "dbname";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterDatabaseSetStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterDatabaseSetStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "dbname";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "setstmt";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterRoleSetStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterRoleSetStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "role";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "database";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "setstmt";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateConversionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateConversionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "conversion_name";
  *(void *)(v6 + 8) = 15;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "for_encoding_name";
  *(void *)(v10 + 8) = 17;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "to_encoding_name";
  *((void *)v12 + 1) = 16;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "func_name";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "def";
  *(void *)(v15 + 8) = 3;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateCastStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateCastStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "sourcetype";
  *(void *)(v5 + 8) = 10;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "targettype";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "func";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "context";
  *((void *)v13 + 1) = 7;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "inout";
  *(void *)(v14 + 8) = 5;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateOpClassStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateOpClassStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "opclassname";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "opfamilyname";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "amname";
  *((void *)v12 + 1) = 6;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "datatype";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "items";
  *((void *)v16 + 1) = 5;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "is_default";
  *((void *)v18 + 1) = 10;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateOpFamilyStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateOpFamilyStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "opfamilyname";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "amname";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterOpFamilyStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterOpFamilyStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "opfamilyname";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "amname";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "is_drop";
  *((void *)v12 + 1) = 7;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "items";
  *((void *)v14 + 1) = 5;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PrepareStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PrepareStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "name";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "argtypes";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "query";
  *(void *)(v11 + 8) = 5;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ExecuteStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ExecuteStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "name";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "params";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DeclareCursorStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DeclareCursorStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "portalname";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "query";
  *(void *)(v11 + 8) = 5;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateTableSpaceStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateTableSpaceStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "tablespacename";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "owner";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "location";
  *((void *)v12 + 1) = 8;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "options";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropTableSpaceStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropTableSpaceStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "tablespacename";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "missing_ok";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterObjectDependsStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterObjectDependsStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "object_type";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FD0];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "relation";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "object";
  *((void *)v12 + 1) = 6;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "extname";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "remove";
  *(void *)(v15 + 8) = 6;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterObjectSchemaStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterObjectSchemaStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "object_type";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FD0];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "relation";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "object";
  *((void *)v12 + 1) = 6;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "newschema";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "missing_ok";
  *(void *)(v15 + 8) = 10;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterOwnerStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterOwnerStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "object_type";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FD0];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "relation";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "object";
  *((void *)v12 + 1) = 6;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "newowner";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterOperatorStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterOperatorStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "opername";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropOwnedStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropOwnedStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "roles";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "behavior";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ReassignOwnedStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ReassignOwnedStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "roles";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "newrole";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CompositeTypeStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CompositeTypeStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "typevar";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "coldeflist";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterEnumStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterEnumStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_18EB38D50;
  uint64_t v4 = v18 + v3 + v1[14];
  *(void *)(v18 + v3) = 1;
  *(void *)uint64_t v4 = "type_name";
  *(void *)(v4 + 8) = 9;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FD0];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v18 + v3 + v2 + v1[14];
  *(void *)(v18 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "old_val";
  *(void *)(v8 + 8) = 7;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v18 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "new_val";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v18 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "new_val_neighbor";
  *((void *)v12 + 1) = 16;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v18 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "new_val_is_after";
  *((void *)v14 + 1) = 16;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v18 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "skip_if_new_val_exists";
  *((void *)v16 + 1) = 22;
  v16[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTSDictionaryStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTSDictionaryStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "dictname";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTSConfigurationStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTSConfigurationStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "kind";
  *(void *)(v4 + 8) = 4;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "cfgname";
  *(void *)(v8 + 8) = 7;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "tokentype";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "dicts";
  *((void *)v12 + 1) = 5;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "override";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "replace";
  *((void *)v16 + 1) = 7;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "missing_ok";
  *((void *)v18 + 1) = 10;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateFdwStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateFdwStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "fdwname";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "func_options";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "options";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterFdwStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterFdwStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "fdwname";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "func_options";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "options";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateForeignServerStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateForeignServerStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "servername";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "servertype";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "version";
  *((void *)v12 + 1) = 7;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "fdwname";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "if_not_exists";
  *((void *)v16 + 1) = 13;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "options";
  *((void *)v18 + 1) = 7;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterForeignServerStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterForeignServerStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "servername";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "version";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "options";
  *((void *)v12 + 1) = 7;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "has_version";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateUserMappingStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateUserMappingStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "user";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "servername";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "if_not_exists";
  *((void *)v12 + 1) = 13;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "options";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterUserMappingStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterUserMappingStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "user";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "servername";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "options";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropUserMappingStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropUserMappingStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "user";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "servername";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "missing_ok";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTableSpaceOptionsStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTableSpaceOptionsStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "tablespacename";
  *(void *)(v6 + 8) = 14;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "is_reset";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterTableMoveAllStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterTableMoveAllStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "orig_tablespacename";
  *(void *)(v6 + 8) = 19;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "objtype";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "roles";
  *((void *)v12 + 1) = 5;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "new_tablespacename";
  *((void *)v14 + 1) = 18;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "nowait";
  *(void *)(v15 + 8) = 6;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SecLabelStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SecLabelStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "objtype";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "object";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "provider";
  *((void *)v12 + 1) = 8;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "label";
  *((void *)v14 + 1) = 5;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateForeignTableStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateForeignTableStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "base_stmt";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  *(void *)(v6 + 24) = "base";
  *(void *)(v6 + 32) = 4;
  *(unsigned char *)(v6 + 40) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FC0];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "servername";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "options";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ImportForeignSchemaStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ImportForeignSchemaStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "server_name";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "remote_schema";
  *(void *)(v10 + 8) = 13;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "local_schema";
  *((void *)v12 + 1) = 12;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "list_type";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "table_list";
  *((void *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "options";
  *((void *)v18 + 1) = 7;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateExtensionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateExtensionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "extname";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "if_not_exists";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "options";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterExtensionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterExtensionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "extname";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterExtensionContentsStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterExtensionContentsStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "extname";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "action";
  *(void *)(v10 + 8) = 6;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "objtype";
  *((void *)v12 + 1) = 7;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "object";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateEventTrigStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateEventTrigStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "trigname";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "eventname";
  *(void *)(v10 + 8) = 9;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "whenclause";
  *((void *)v12 + 1) = 10;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "funcname";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterEventTrigStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterEventTrigStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "trigname";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "tgenabled";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RefreshMatViewStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RefreshMatViewStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "concurrent";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "skip_data";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "relation";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ReplicaIdentityStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ReplicaIdentityStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "identity_type";
  *(void *)(v6 + 8) = 13;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "name";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreatePolicyStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreatePolicyStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "policy_name";
  *(void *)(v4 + 8) = 11;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "table";
  *(void *)(v8 + 8) = 5;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "cmd_name";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "permissive";
  *((void *)v12 + 1) = 10;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "roles";
  *((void *)v14 + 1) = 5;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "qual";
  *((void *)v16 + 1) = 4;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "with_check";
  *((void *)v18 + 1) = 10;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterPolicyStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterPolicyStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "policy_name";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "table";
  *(void *)(v10 + 8) = 5;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "roles";
  *((void *)v12 + 1) = 5;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "qual";
  *((void *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "with_check";
  *(void *)(v15 + 8) = 10;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateTransformStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateTransformStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "replace";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "type_name";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "lang";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "fromsql";
  *((void *)v13 + 1) = 7;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "tosql";
  *(void *)(v14 + 8) = 5;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateAmStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateAmStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "amname";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "handler_name";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "amtype";
  *(void *)(v11 + 8) = 6;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreatePublicationStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreatePublicationStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "pubname";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "tables";
  *((void *)v12 + 1) = 6;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "for_all_tables";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterPublicationStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterPublicationStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "pubname";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "tables";
  *((void *)v12 + 1) = 6;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "for_all_tables";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "table_action";
  *(void *)(v15 + 8) = 12;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateSubscriptionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateSubscriptionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "subname";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "conninfo";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "publication";
  *((void *)v12 + 1) = 11;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "options";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterSubscriptionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterSubscriptionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "kind";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "subname";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "conninfo";
  *((void *)v12 + 1) = 8;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "publication";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "options";
  *(void *)(v15 + 8) = 7;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DropSubscriptionStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DropSubscriptionStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "subname";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "missing_ok";
  *((void *)v10 + 1) = 10;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "behavior";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateStatsStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateStatsStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "defnames";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "stat_types";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "exprs";
  *((void *)v12 + 1) = 5;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "relations";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "stxcomment";
  *((void *)v16 + 1) = 10;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "if_not_exists";
  *((void *)v18 + 1) = 13;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CallStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CallStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "funccall";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "funcexpr";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AlterStatsStmt._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AlterStatsStmt._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "defnames";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "stxstattarget";
  *((void *)v10 + 1) = 13;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "missing_ok";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_A_Expr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_A_Expr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "kind";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "name";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "lexpr";
  *((void *)v11 + 1) = 5;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "rexpr";
  *((void *)v13 + 1) = 5;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "location";
  *(void *)(v14 + 8) = 8;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ColumnRef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ColumnRef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "fields";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "location";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ParamRef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ParamRef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "number";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "location";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_A_Const._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_A_Const._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "val";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "location";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  uint64_t v26;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FuncCall._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FuncCall._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_18EB38D80;
  uint64_t v4 = v26 + v3;
  unint64_t v5 = v26 + v3 + v1[14];
  *(void *)(v26 + v3) = 1;
  *(void *)unint64_t v5 = "funcname";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v26 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "args";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v26 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "agg_order";
  *((void *)v11 + 1) = 9;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v26 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "agg_filter";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v26 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "agg_within_group";
  *((void *)v15 + 1) = 16;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v26 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "agg_star";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v26 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "agg_distinct";
  *((void *)v19 + 1) = 12;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v26 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "func_variadic";
  *((void *)v21 + 1) = 13;
  v21[16] = 2;
  v8();
  Swift::String v22 = v26 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "over";
  *(void *)(v22 + 8) = 4;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v26 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "location";
  *((void *)v24 + 1) = 8;
  v24[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_A_Indices._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_A_Indices._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "is_slice";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "lidx";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "uidx";
  *(void *)(v11 + 8) = 4;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_A_Indirection._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_A_Indirection._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "arg";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "indirection";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_A_ArrayExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_A_ArrayExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "elements";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "location";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ResTarget._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ResTarget._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "name";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "indirection";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "val";
  *((void *)v12 + 1) = 3;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "location";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_MultiAssignRef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_MultiAssignRef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "source";
  *(void *)(v6 + 8) = 6;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "colno";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "ncolumns";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TypeCast._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TypeCast._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "arg";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "type_name";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "location";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CollateClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CollateClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "arg";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "collname";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "location";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SortBy._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SortBy._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "node";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "sortby_dir";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "sortby_nulls";
  *((void *)v12 + 1) = 12;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "use_op";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "location";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_WindowDef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_WindowDef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "name";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "refname";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "partition_clause";
  *((void *)v11 + 1) = 16;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "order_clause";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "frame_options";
  *((void *)v15 + 1) = 13;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "start_offset";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "end_offset";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "location";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeSubselect._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeSubselect._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "lateral";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "subquery";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "alias";
  *(void *)(v11 + 8) = 5;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeFunction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeFunction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D50;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "lateral";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "ordinality";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "is_rowsfrom";
  *((void *)v12 + 1) = 11;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "functions";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  char v15 = (void *)(v5 + 4 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 5;
  *(void *)uint64_t v16 = "alias";
  *((void *)v16 + 1) = 5;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 6;
  *(void *)uint64_t v18 = "coldeflist";
  *((void *)v18 + 1) = 10;
  v18[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeTableSample._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeTableSample._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "relation";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v16 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "method";
  *(void *)(v9 + 8) = 6;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v16 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "args";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v16 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "repeatable";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = v16 + v3 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "location";
  *(void *)(v14 + 8) = 8;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  uint64_t v21;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeTableFunc._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeTableFunc._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v21 + v3;
  unint64_t v5 = v21 + v3 + v1[14];
  *(void *)(v21 + v3) = 1;
  *(void *)unint64_t v5 = "lateral";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "docexpr";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "rowexpr";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "namespaces";
  *((void *)v13 + 1) = 10;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "columns";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "alias";
  *((void *)v17 + 1) = 5;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "location";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  uint64_t v21;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeTableFuncCol._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeTableFuncCol._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v21 + v3;
  unint64_t v5 = v21 + v3 + v1[14];
  *(void *)(v21 + v3) = 1;
  *(void *)unint64_t v5 = "colname";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "type_name";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "for_ordinality";
  *((void *)v11 + 1) = 14;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "is_not_null";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "colexpr";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "coldefexpr";
  *((void *)v17 + 1) = 10;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "location";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TypeName._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TypeName._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "names";
  *(void *)(v5 + 8) = 5;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "type_oid";
  *(void *)(v9 + 8) = 8;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "setof";
  *((void *)v11 + 1) = 5;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "pct_type";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "typmods";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "typemod";
  *((void *)v17 + 1) = 7;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "array_bounds";
  *((void *)v19 + 1) = 12;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "location";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ColumnDef._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ColumnDef._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v39 = swift_allocObject();
  *(_OWORD *)(v39 + 16) = xmmword_18EB38D70;
  uint64_t v4 = v39 + v3;
  unint64_t v5 = v39 + v3 + v1[14];
  *(void *)(v39 + v3) = 1;
  *(void *)unint64_t v5 = "colname";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "type_name";
  *(void *)(v9 + 8) = 9;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "inhcount";
  *((void *)v11 + 1) = 8;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "is_local";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "is_not_null";
  *((void *)v15 + 1) = 11;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "is_from_type";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "storage";
  *((void *)v19 + 1) = 7;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "raw_default";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "cooked_default";
  *(void *)(v22 + 8) = 14;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "identity";
  *((void *)v24 + 1) = 8;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "identity_sequence";
  *((void *)v26 + 1) = 17;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v4 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 12;
  *(void *)Swift::String v28 = "generated";
  *((void *)v28 + 1) = 9;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v4 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "coll_clause";
  *((void *)v30 + 1) = 11;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v4 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "coll_oid";
  *((void *)v32 + 1) = 8;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v4 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 15;
  *(void *)uint64_t v34 = "constraints";
  *((void *)v34 + 1) = 11;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v4 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)uint64_t v36 = "fdwoptions";
  *((void *)v36 + 1) = 10;
  v36[16] = 2;
  v8();
  uint64_t v37 = v4 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)uint64_t v37 = "location";
  *(void *)(v37 + 8) = 8;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v23;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_IndexElem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_IndexElem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v23 + v3;
  unint64_t v5 = v23 + v3 + v1[14];
  *(void *)(v23 + v3) = 1;
  *(void *)unint64_t v5 = "name";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "expr";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "indexcolname";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "collation";
  *((void *)v13 + 1) = 9;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "opclass";
  *((void *)v15 + 1) = 7;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "opclassopts";
  *((void *)v17 + 1) = 11;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "ordering";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "nulls_ordering";
  *((void *)v21 + 1) = 14;
  v21[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  uint64_t v61;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_Constraint._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_Constraint._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_18EB38E90;
  uint64_t v4 = v61 + v3;
  unint64_t v5 = v61 + v3 + v1[14];
  *(void *)(v61 + v3) = 1;
  *(void *)unint64_t v5 = "contype";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v61 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "conname";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v61 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "deferrable";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v61 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "initdeferred";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v61 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "location";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v61 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "is_no_inherit";
  *((void *)v17 + 1) = 13;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v61 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "raw_expr";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v61 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "cooked_expr";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  Swift::String v22 = v61 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "generated_when";
  *(void *)(v22 + 8) = 14;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v61 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "keys";
  *((void *)v24 + 1) = 4;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v61 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "including";
  *((void *)v26 + 1) = 9;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v61 + v3 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 12;
  *(void *)Swift::String v28 = "exclusions";
  *((void *)v28 + 1) = 10;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v61 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "options";
  *((void *)v30 + 1) = 7;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v61 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "indexname";
  *((void *)v32 + 1) = 9;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v61 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 15;
  *(void *)uint64_t v34 = "indexspace";
  *((void *)v34 + 1) = 10;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v61 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)uint64_t v36 = "reset_default_tblspc";
  *((void *)v36 + 1) = 20;
  v36[16] = 2;
  v8();
  uint64_t v37 = v61 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)uint64_t v37 = "access_method";
  *(void *)(v37 + 8) = 13;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v61 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  *uint64_t v38 = 18;
  *(void *)uint64_t v39 = "where_clause";
  *((void *)v39 + 1) = 12;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v61 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 19;
  *(void *)uint64_t v41 = "pktable";
  *((void *)v41 + 1) = 7;
  v41[16] = 2;
  v8();
  unint64_t v42 = (void *)(v61 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  void *v42 = 20;
  *(void *)uint64_t v43 = "fk_attrs";
  *((void *)v43 + 1) = 8;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v61 + v3 + 20 * v2);
  unint64_t v45 = (char *)v44 + v1[14];
  char *v44 = 21;
  *(void *)unint64_t v45 = "pk_attrs";
  *((void *)v45 + 1) = 8;
  v45[16] = 2;
  v8();
  uint64_t v46 = (void *)(v61 + v3 + 21 * v2);
  Swift::String v47 = (char *)v46 + v1[14];
  *uint64_t v46 = 22;
  *(void *)Swift::String v47 = "fk_matchtype";
  *((void *)v47 + 1) = 12;
  v47[16] = 2;
  v8();
  Swift::String v48 = (void *)(v61 + v3 + 22 * v2);
  unint64_t v49 = (char *)v48 + v1[14];
  *Swift::String v48 = 23;
  *(void *)unint64_t v49 = "fk_upd_action";
  *((void *)v49 + 1) = 13;
  v49[16] = 2;
  v8();
  unint64_t v50 = (void *)(v61 + v3 + 23 * v2);
  uint64_t v51 = (char *)v50 + v1[14];
  *unint64_t v50 = 24;
  *(void *)uint64_t v51 = "fk_del_action";
  *((void *)v51 + 1) = 13;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v61 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 25;
  *(void *)uint64_t v53 = "old_conpfeqop";
  *((void *)v53 + 1) = 13;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v61 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 26;
  *(void *)uint64_t v55 = "old_pktable_oid";
  *((void *)v55 + 1) = 15;
  v55[16] = 2;
  v8();
  uint64_t v56 = (void *)(v61 + v3 + 26 * v2);
  uint64_t v57 = (char *)v56 + v1[14];
  *uint64_t v56 = 27;
  *(void *)uint64_t v57 = "skip_validation";
  *((void *)v57 + 1) = 15;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v61 + v3 + 27 * v2);
  int v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 28;
  *(void *)int v59 = "initially_valid";
  *((void *)v59 + 1) = 15;
  v59[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_DefElem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_DefElem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "defnamespace";
  *(void *)(v6 + 8) = 12;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "defname";
  *(void *)(v10 + 8) = 7;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "arg";
  *((void *)v12 + 1) = 3;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "defaction";
  *((void *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "location";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  void *v40;
  char *v41;
  void *v42;
  char *v43;
  void *v44;
  char *v45;
  void *v46;
  char *v47;
  void *v48;
  char *v49;
  void *v50;
  char *v51;
  void *v52;
  char *v53;
  void *v54;
  char *v55;
  void *v56;
  char *v57;
  void *v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  char *v63;
  void *v64;
  char *v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void *v71;
  char *v72;
  void *v73;
  char *v74;
  uint64_t v76;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeTblEntry._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeTblEntry._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_18EB38E50;
  uint64_t v4 = v76 + v3;
  unint64_t v5 = v76 + v3 + v1[14];
  *(void *)(v76 + v3) = 1;
  *(void *)unint64_t v5 = "rtekind";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v76 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "relid";
  *(void *)(v9 + 8) = 5;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v76 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "relkind";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v76 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "rellockmode";
  *((void *)v13 + 1) = 11;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v76 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "tablesample";
  *((void *)v15 + 1) = 11;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v76 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "subquery";
  *((void *)v17 + 1) = 8;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v76 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "security_barrier";
  *((void *)v19 + 1) = 16;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v76 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "jointype";
  *((void *)v21 + 1) = 8;
  v21[16] = 2;
  v8();
  Swift::String v22 = v76 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "joinmergedcols";
  *(void *)(v22 + 8) = 14;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v76 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "joinaliasvars";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v76 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "joinleftcols";
  *((void *)v26 + 1) = 12;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v76 + v3 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 12;
  *(void *)Swift::String v28 = "joinrightcols";
  *((void *)v28 + 1) = 13;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v76 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "functions";
  *((void *)v30 + 1) = 9;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v76 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "funcordinality";
  *((void *)v32 + 1) = 14;
  v32[16] = 2;
  v8();
  int v33 = (void *)(v76 + v3 + 14 * v2);
  uint64_t v34 = (char *)v33 + v1[14];
  *int v33 = 15;
  *(void *)uint64_t v34 = "tablefunc";
  *((void *)v34 + 1) = 9;
  v34[16] = 2;
  v8();
  uint64_t v35 = (void *)(v76 + v3 + 15 * v2);
  uint64_t v36 = (char *)v35 + v1[14];
  *uint64_t v35 = 16;
  *(void *)uint64_t v36 = "values_lists";
  *((void *)v36 + 1) = 12;
  v36[16] = 2;
  v8();
  uint64_t v37 = v76 + v3 + 16 * v2 + v1[14];
  *(void *)(v4 + 16 * v2) = 17;
  *(void *)uint64_t v37 = "ctename";
  *(void *)(v37 + 8) = 7;
  *(unsigned char *)(v37 + 16) = 2;
  v8();
  uint64_t v38 = (void *)(v76 + v3 + 17 * v2);
  uint64_t v39 = (char *)v38 + v1[14];
  *uint64_t v38 = 18;
  *(void *)uint64_t v39 = "ctelevelsup";
  *((void *)v39 + 1) = 11;
  v39[16] = 2;
  v8();
  uint64_t v40 = (void *)(v76 + v3 + 18 * v2);
  uint64_t v41 = (char *)v40 + v1[14];
  *uint64_t v40 = 19;
  *(void *)uint64_t v41 = "self_reference";
  *((void *)v41 + 1) = 14;
  v41[16] = 2;
  v8();
  unint64_t v42 = (void *)(v76 + v3 + 19 * v2);
  uint64_t v43 = (char *)v42 + v1[14];
  void *v42 = 20;
  *(void *)uint64_t v43 = "coltypes";
  *((void *)v43 + 1) = 8;
  v43[16] = 2;
  v8();
  uint64_t v44 = (void *)(v76 + v3 + 20 * v2);
  unint64_t v45 = (char *)v44 + v1[14];
  char *v44 = 21;
  *(void *)unint64_t v45 = "coltypmods";
  *((void *)v45 + 1) = 10;
  v45[16] = 2;
  v8();
  uint64_t v46 = (void *)(v76 + v3 + 21 * v2);
  Swift::String v47 = (char *)v46 + v1[14];
  *uint64_t v46 = 22;
  *(void *)Swift::String v47 = "colcollations";
  *((void *)v47 + 1) = 13;
  v47[16] = 2;
  v8();
  Swift::String v48 = (void *)(v76 + v3 + 22 * v2);
  unint64_t v49 = (char *)v48 + v1[14];
  *Swift::String v48 = 23;
  *(void *)unint64_t v49 = "enrname";
  *((void *)v49 + 1) = 7;
  v49[16] = 2;
  v8();
  unint64_t v50 = (void *)(v76 + v3 + 23 * v2);
  uint64_t v51 = (char *)v50 + v1[14];
  *unint64_t v50 = 24;
  *(void *)uint64_t v51 = "enrtuples";
  *((void *)v51 + 1) = 9;
  v51[16] = 2;
  v8();
  uint64_t v52 = (void *)(v76 + v3 + 24 * v2);
  uint64_t v53 = (char *)v52 + v1[14];
  *uint64_t v52 = 25;
  *(void *)uint64_t v53 = "alias";
  *((void *)v53 + 1) = 5;
  v53[16] = 2;
  v8();
  uint64_t v54 = (void *)(v76 + v3 + 25 * v2);
  uint64_t v55 = (char *)v54 + v1[14];
  *uint64_t v54 = 26;
  *(void *)uint64_t v55 = "eref";
  *((void *)v55 + 1) = 4;
  v55[16] = 2;
  v8();
  uint64_t v56 = (void *)(v76 + v3 + 26 * v2);
  uint64_t v57 = (char *)v56 + v1[14];
  *uint64_t v56 = 27;
  *(void *)uint64_t v57 = "lateral";
  *((void *)v57 + 1) = 7;
  v57[16] = 2;
  v8();
  uint64_t v58 = (void *)(v76 + v3 + 27 * v2);
  int v59 = (char *)v58 + v1[14];
  *uint64_t v58 = 28;
  *(void *)int v59 = "inh";
  *((void *)v59 + 1) = 3;
  v59[16] = 2;
  v8();
  uint64_t v60 = (void *)(v76 + v3 + 28 * v2);
  uint64_t v61 = (char *)v60 + v1[14];
  *uint64_t v60 = 29;
  *(void *)uint64_t v61 = "in_from_cl";
  *((void *)v61 + 1) = 10;
  v61[16] = 2;
  v8();
  uint64_t v62 = (void *)(v76 + v3 + 29 * v2);
  uint64_t v63 = (char *)v62 + v1[14];
  *uint64_t v62 = 30;
  *(void *)uint64_t v63 = "required_perms";
  *((void *)v63 + 1) = 14;
  v63[16] = 2;
  v8();
  uint64_t v64 = (void *)(v76 + v3 + 30 * v2);
  uint64_t v65 = (char *)v64 + v1[14];
  *uint64_t v64 = 31;
  *(void *)uint64_t v65 = "check_as_user";
  *((void *)v65 + 1) = 13;
  v65[16] = 2;
  v8();
  uint64_t v66 = (void *)(v76 + v3 + 31 * v2);
  uint64_t v67 = (char *)v66 + v1[14];
  *uint64_t v66 = 32;
  *(void *)uint64_t v67 = "selected_cols";
  *((void *)v67 + 1) = 13;
  v67[16] = 2;
  v8();
  unint64_t v68 = v76 + v3 + 32 * v2 + v1[14];
  *(void *)(v4 + 32 * v2) = 33;
  *(void *)unint64_t v68 = "inserted_cols";
  *(void *)(v68 + 8) = 13;
  *(unsigned char *)(v68 + 16) = 2;
  v8();
  uint64_t v69 = (void *)(v76 + v3 + 33 * v2);
  Swift::String v70 = (char *)v69 + v1[14];
  *uint64_t v69 = 34;
  *(void *)Swift::String v70 = "updated_cols";
  *((void *)v70 + 1) = 12;
  v70[16] = 2;
  v8();
  Swift::String v71 = (void *)(v76 + v3 + 34 * v2);
  unint64_t v72 = (char *)v71 + v1[14];
  *Swift::String v71 = 35;
  *(void *)unint64_t v72 = "extra_updated_cols";
  *((void *)v72 + 1) = 18;
  v72[16] = 2;
  v8();
  uint64_t v73 = (void *)(v76 + v3 + 35 * v2);
  Swift::String v74 = (char *)v73 + v1[14];
  *uint64_t v73 = 36;
  *(void *)Swift::String v74 = "security_quals";
  *((void *)v74 + 1) = 14;
  v74[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  uint64_t v20;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RangeTblFunction._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RangeTblFunction._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  unint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_18EB38DB0;
  uint64_t v4 = v20 + v3 + v1[14];
  *(void *)(v20 + v3) = 1;
  *(void *)uint64_t v4 = "funcexpr";
  *(void *)(v4 + 8) = 8;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v20 + v3 + v2 + v1[14];
  *(void *)(v20 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "funccolcount";
  *(void *)(v8 + 8) = 12;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v20 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "funccolnames";
  *((void *)v10 + 1) = 12;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v20 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "funccoltypes";
  *((void *)v12 + 1) = 12;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v20 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "funccoltypmods";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v20 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "funccolcollations";
  *((void *)v16 + 1) = 17;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v20 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "funcparams";
  *((void *)v18 + 1) = 10;
  v18[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TableSampleClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TableSampleClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "tsmhandler";
  *(void *)(v6 + 8) = 10;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "args";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "repeatable";
  *(void *)(v11 + 8) = 10;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_WithCheckOption._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_WithCheckOption._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "kind";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "relname";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "polname";
  *((void *)v11 + 1) = 7;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "qual";
  *((void *)v13 + 1) = 4;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "cascaded";
  *(void *)(v14 + 8) = 8;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_SortGroupClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_SortGroupClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "tle_sort_group_ref";
  *(void *)(v6 + 8) = 18;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FD0];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "eqop";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "sortop";
  *((void *)v12 + 1) = 6;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "nulls_first";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "hashable";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_GroupingSet._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_GroupingSet._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "kind";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "content";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "location";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v34;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_WindowClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_WindowClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_18EB38E80;
  uint64_t v4 = v34 + v3;
  unint64_t v5 = v34 + v3 + v1[14];
  *(void *)(v34 + v3) = 1;
  *(void *)unint64_t v5 = "name";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v34 + v3 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "refname";
  *(void *)(v9 + 8) = 7;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v34 + v3 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "partition_clause";
  *((void *)v11 + 1) = 16;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v34 + v3 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "order_clause";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v34 + v3 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "frame_options";
  *((void *)v15 + 1) = 13;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v34 + v3 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "start_offset";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v34 + v3 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "end_offset";
  *((void *)v19 + 1) = 10;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v34 + v3 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "start_in_range_func";
  *((void *)v21 + 1) = 19;
  v21[16] = 2;
  v8();
  Swift::String v22 = v34 + v3 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "end_in_range_func";
  *(void *)(v22 + 8) = 17;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v34 + v3 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "in_range_coll";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v34 + v3 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "in_range_asc";
  *((void *)v26 + 1) = 12;
  v26[16] = 2;
  v8();
  uint64_t v27 = (void *)(v34 + v3 + 11 * v2);
  Swift::String v28 = (char *)v27 + v1[14];
  uint64_t *v27 = 12;
  *(void *)Swift::String v28 = "in_range_nulls_first";
  *((void *)v28 + 1) = 20;
  v28[16] = 2;
  v8();
  uint64_t v29 = (void *)(v34 + v3 + 12 * v2);
  uint64_t v30 = (char *)v29 + v1[14];
  void *v29 = 13;
  *(void *)uint64_t v30 = "winref";
  *((void *)v30 + 1) = 6;
  v30[16] = 2;
  v8();
  unint64_t v31 = (void *)(v34 + v3 + 13 * v2);
  uint64_t v32 = (char *)v31 + v1[14];
  void *v31 = 14;
  *(void *)uint64_t v32 = "copied_order";
  *((void *)v32 + 1) = 12;
  v32[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ObjectWithArgs._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ObjectWithArgs._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "objname";
  *(void *)(v6 + 8) = 7;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "objargs";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "args_unspecified";
  *(void *)(v11 + 8) = 16;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_AccessPriv._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_AccessPriv._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "priv_name";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "cols";
  *((void *)v10 + 1) = 4;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  uint64_t v19;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CreateOpClassItem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CreateOpClassItem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_18EB38D50;
  uint64_t v4 = v19 + v3;
  unint64_t v5 = v19 + v3 + v1[14];
  *(void *)(v19 + v3) = 1;
  *(void *)unint64_t v5 = "itemtype";
  *(void *)(v5 + 8) = 8;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "name";
  *(void *)(v9 + 8) = 4;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "number";
  *((void *)v11 + 1) = 6;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "order_family";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "class_args";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "storedtype";
  *((void *)v17 + 1) = 10;
  v17[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TableLikeClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TableLikeClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "relation";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "options";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "relation_oid";
  *(void *)(v11 + 8) = 12;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_FunctionParameter._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_FunctionParameter._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "name";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "arg_type";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "mode";
  *((void *)v12 + 1) = 4;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "defexpr";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_LockingClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_LockingClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "locked_rels";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FD0];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "strength";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "wait_policy";
  *(void *)(v11 + 8) = 11;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RowMarkClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RowMarkClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "rti";
  *(void *)(v6 + 8) = 3;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "strength";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "wait_policy";
  *((void *)v12 + 1) = 11;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "pushed_down";
  *((void *)v14 + 1) = 11;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_XmlSerialize._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_XmlSerialize._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "xmloption";
  *(void *)(v6 + 8) = 9;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "expr";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "type_name";
  *((void *)v12 + 1) = 9;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "location";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_WithClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_WithClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "ctes";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "recursive";
  *((void *)v10 + 1) = 9;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "location";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_InferClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_InferClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "index_elems";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FD0];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "where_clause";
  *(void *)(v10 + 8) = 12;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "conname";
  *((void *)v12 + 1) = 7;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "location";
  *((void *)v14 + 1) = 8;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_OnConflictClause._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_OnConflictClause._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_18EB38D60;
  uint64_t v4 = v16 + v3;
  unint64_t v5 = v16 + v3 + v1[14];
  *(void *)(v16 + v3) = 1;
  *(void *)unint64_t v5 = "action";
  *(void *)(v5 + 8) = 6;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "infer";
  *(void *)(v9 + 8) = 5;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "target_list";
  *((void *)v11 + 1) = 11;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "where_clause";
  *((void *)v13 + 1) = 12;
  v13[16] = 2;
  v8();
  uint64_t v14 = v4 + 4 * v2 + v1[14];
  *(void *)(v4 + 4 * v2) = 5;
  *(void *)uint64_t v14 = "location";
  *(void *)(v14 + 8) = 8;
  *(unsigned char *)(v14 + 16) = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  unint64_t v9;
  void *v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  char *v15;
  void *v16;
  char *v17;
  void *v18;
  char *v19;
  void *v20;
  char *v21;
  uint64_t v22;
  void *v23;
  char *v24;
  void *v25;
  char *v26;
  uint64_t v28;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_CommonTableExpr._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_CommonTableExpr._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Swift::String v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_18EB38DD0;
  uint64_t v4 = v28 + v3;
  unint64_t v5 = v28 + v3 + v1[14];
  *(void *)(v28 + v3) = 1;
  *(void *)unint64_t v5 = "ctename";
  *(void *)(v5 + 8) = 7;
  *(unsigned char *)(v5 + 16) = 2;
  unint64_t v6 = *MEMORY[0x1E4F70FB8];
  uint64_t v7 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  char v9 = v4 + v2 + v1[14];
  *(void *)(v4 + v2) = 2;
  *(void *)char v9 = "aliascolnames";
  *(void *)(v9 + 8) = 13;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  unint64_t v10 = (void *)(v4 + 2 * v2);
  uint64_t v11 = (char *)v10 + v1[14];
  *unint64_t v10 = 3;
  *(void *)uint64_t v11 = "ctematerialized";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v4 + 3 * v2);
  uint64_t v13 = (char *)v12 + v1[14];
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "ctequery";
  *((void *)v13 + 1) = 8;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v4 + 4 * v2);
  char v15 = (char *)v14 + v1[14];
  *uint64_t v14 = 5;
  *(void *)char v15 = "location";
  *((void *)v15 + 1) = 8;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v4 + 5 * v2);
  uint64_t v17 = (char *)v16 + v1[14];
  *uint64_t v16 = 6;
  *(void *)uint64_t v17 = "cterecursive";
  *((void *)v17 + 1) = 12;
  v17[16] = 2;
  v8();
  uint64_t v18 = (void *)(v4 + 6 * v2);
  uint64_t v19 = (char *)v18 + v1[14];
  *uint64_t v18 = 7;
  *(void *)uint64_t v19 = "cterefcount";
  *((void *)v19 + 1) = 11;
  v19[16] = 2;
  v8();
  unint64_t v20 = (void *)(v4 + 7 * v2);
  uint64_t v21 = (char *)v20 + v1[14];
  *unint64_t v20 = 8;
  *(void *)uint64_t v21 = "ctecolnames";
  *((void *)v21 + 1) = 11;
  v21[16] = 2;
  v8();
  Swift::String v22 = v4 + 8 * v2 + v1[14];
  *(void *)(v4 + 8 * v2) = 9;
  *(void *)Swift::String v22 = "ctecoltypes";
  *(void *)(v22 + 8) = 11;
  *(unsigned char *)(v22 + 16) = 2;
  v8();
  uint64_t v23 = (void *)(v4 + 9 * v2);
  Swift::String v24 = (char *)v23 + v1[14];
  *uint64_t v23 = 10;
  *(void *)Swift::String v24 = "ctecoltypmods";
  *((void *)v24 + 1) = 13;
  v24[16] = 2;
  v8();
  char v25 = (void *)(v4 + 10 * v2);
  uint64_t v26 = (char *)v25 + v1[14];
  *char v25 = 11;
  *(void *)uint64_t v26 = "ctecolcollations";
  *((void *)v26 + 1) = 16;
  v26[16] = 2;
  v8();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_RoleSpec._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_RoleSpec._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "roletype";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "rolename";
  *((void *)v10 + 1) = 8;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "location";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_TriggerTransition._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_TriggerTransition._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "name";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "is_new";
  *((void *)v10 + 1) = 6;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "is_table";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  uint64_t v15;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PartitionElem._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PartitionElem._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D60;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "name";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "expr";
  *(void *)(v10 + 8) = 4;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "collation";
  *((void *)v12 + 1) = 9;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "opclass";
  *((void *)v14 + 1) = 7;
  v14[16] = 2;
  v9();
  char v15 = v5 + 4 * v2 + v1[14];
  *(void *)(v5 + 4 * v2) = 5;
  *(void *)char v15 = "location";
  *(void *)(v15 + 8) = 8;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PartitionSpec._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PartitionSpec._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "strategy";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "part_params";
  *((void *)v10 + 1) = 11;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "location";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  unint64_t v8;
  void *v9;
  char *v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;
  void *v15;
  char *v16;
  void *v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v22;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PartitionBoundSpec._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PartitionBoundSpec._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  Swift::String v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_18EB38E00;
  uint64_t v4 = v22 + v3 + v1[14];
  *(void *)(v22 + v3) = 1;
  *(void *)uint64_t v4 = "strategy";
  *(void *)(v4 + 8) = 8;
  *(unsigned char *)(v4 + 16) = 2;
  unint64_t v5 = *MEMORY[0x1E4F70FB8];
  unint64_t v6 = type metadata accessor for _NameMap.NameDescription();
  uint64_t v7 = *(void (**)(void))(*(void *)(v6 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v7)(v4, v5, v6);
  uint64_t v8 = v22 + v3 + v2 + v1[14];
  *(void *)(v22 + v3 + v2) = 2;
  *(void *)uint64_t v8 = "is_default";
  *(void *)(v8 + 8) = 10;
  *(unsigned char *)(v8 + 16) = 2;
  v7();
  char v9 = (void *)(v22 + v3 + 2 * v2);
  unint64_t v10 = (char *)v9 + v1[14];
  *char v9 = 3;
  *(void *)unint64_t v10 = "modulus";
  *((void *)v10 + 1) = 7;
  v10[16] = 2;
  v7();
  uint64_t v11 = (void *)(v22 + v3 + 3 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "remainder";
  *((void *)v12 + 1) = 9;
  void v12[16] = 2;
  v7();
  uint64_t v13 = (void *)(v22 + v3 + 4 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "listdatums";
  *((void *)v14 + 1) = 10;
  v14[16] = 2;
  v7();
  char v15 = (void *)(v22 + v3 + 5 * v2);
  uint64_t v16 = (char *)v15 + v1[14];
  *char v15 = 6;
  *(void *)uint64_t v16 = "lowerdatums";
  *((void *)v16 + 1) = 11;
  v16[16] = 2;
  v7();
  uint64_t v17 = (void *)(v22 + v3 + 6 * v2);
  uint64_t v18 = (char *)v17 + v1[14];
  *uint64_t v17 = 7;
  *(void *)uint64_t v18 = "upperdatums";
  *((void *)v18 + 1) = 11;
  v18[16] = 2;
  v7();
  uint64_t v19 = (void *)(v22 + v3 + 7 * v2);
  unint64_t v20 = (char *)v19 + v1[14];
  *uint64_t v19 = 8;
  *(void *)unint64_t v20 = "location";
  *((void *)v20 + 1) = 8;
  v20[16] = 2;
  v7();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PartitionRangeDatum._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PartitionRangeDatum._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "kind";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "value";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "location";
  *(void *)(v11 + 8) = 8;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_PartitionCmd._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_PartitionCmd._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB382C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "name";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "bound";
  *((void *)v10 + 1) = 5;
  v10[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  char *v10;
  uint64_t v11;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_VacuumRelation._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_VacuumRelation._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB384C0;
  unint64_t v5 = (void *)(v4 + v3);
  unint64_t v6 = v4 + v3 + v1[14];
  int *v5 = 1;
  *(void *)unint64_t v6 = "relation";
  *(void *)(v6 + 8) = 8;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = (char *)v5 + v2 + v1[14];
  *(void *)((char *)v5 + v2) = 2;
  *(void *)unint64_t v10 = "oid";
  *((void *)v10 + 1) = 3;
  v10[16] = 2;
  v9();
  uint64_t v11 = (uint64_t)v5 + 2 * v2 + v1[14];
  *(void *)((char *)v5 + 2 * v2) = 3;
  *(void *)uint64_t v11 = "va_cols";
  *(void *)(v11 + 8) = 7;
  *(unsigned char *)(v11 + 16) = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_InlineCodeBlock._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_InlineCodeBlock._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "source_text";
  *(void *)(v6 + 8) = 11;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "lang_oid";
  *(void *)(v10 + 8) = 8;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "lang_is_trusted";
  *((void *)v12 + 1) = 15;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "atomic";
  *((void *)v14 + 1) = 6;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  void *v11;
  char *v12;
  void *v13;
  char *v14;

  uint64_t v0 = type metadata accessor for _NameMap();
  __swift_allocate_value_buffer(v0, static PgQuery_ScanToken._protobuf_nameMap);
  __swift_project_value_buffer(v0, (uint64_t)static PgQuery_ScanToken._protobuf_nameMap);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Int, _NameMap.NameDescription)>);
  uint64_t v1 = (int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Int, _NameMap.NameDescription))
             - 8);
  uint64_t v2 = *(void *)(*(void *)v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18EB38D40;
  unint64_t v5 = v4 + v3;
  unint64_t v6 = v4 + v3 + v1[14];
  *(void *)(v4 + v3) = 1;
  *(void *)unint64_t v6 = "start";
  *(void *)(v6 + 8) = 5;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x1E4F70FB8];
  uint64_t v8 = type metadata accessor for _NameMap.NameDescription();
  char v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v2 + v1[14];
  *(void *)(v5 + v2) = 2;
  *(void *)unint64_t v10 = "end";
  *(void *)(v10 + 8) = 3;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v2);
  uint64_t v12 = (char *)v11 + v1[14];
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "token";
  *((void *)v12 + 1) = 5;
  void v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v2);
  uint64_t v14 = (char *)v13 + v1[14];
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "keyword_kind";
  *((void *)v14 + 1) = 12;
  v14[16] = 2;
  v9();
  return _NameMap.init(dictionaryLiteral:)();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OverridingKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_QuerySource@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_QuerySource._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SortByDir@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SortByDir._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SortByNulls@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SortByNulls._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_A_Expr_Kind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_A_Expr_Kind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RoleSpecType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RoleSpecType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TableLikeOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TableLikeOption._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DefElemAction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DefElemAction._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_PartitionRangeDatumKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_PartitionRangeDatumKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RTEKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RTEKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_WCOKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_WCOKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_GroupingSetKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_GroupingSetKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CTEMaterialize@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CTEMaterialize._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SetOperation@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SetOperation._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ObjectType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ObjectType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DropBehavior@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DropBehavior._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTableType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTableType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_GrantTargetType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_GrantTargetType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_VariableSetKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_VariableSetKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ConstrType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ConstrType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ImportForeignSchemaType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ImportForeignSchemaType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RoleStmtType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RoleStmtType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FetchDirection@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FetchDirection._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_FunctionParameterMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_FunctionParameterMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_TransactionStmtKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_TransactionStmtKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ViewCheckOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ViewCheckOption._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ClusterOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ClusterOption._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_DiscardMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_DiscardMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ReindexObjectType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ReindexObjectType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterTSConfigType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterTSConfigType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AlterSubscriptionType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AlterSubscriptionType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OnCommitAction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OnCommitAction._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ParamKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ParamKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CoercionContext@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CoercionContext._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CoercionForm@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CoercionForm._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_BoolExprType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_BoolExprType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SubLinkType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SubLinkType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_RowCompareType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_RowCompareType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_MinMaxOp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_MinMaxOp._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SQLValueFunctionOp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SQLValueFunctionOp._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_XmlExprOp@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_XmlExprOp._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_XmlOptionType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_XmlOptionType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_NullTestType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_NullTestType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_BoolTestType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_BoolTestType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_CmdType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_CmdType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_JoinType@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_JoinType._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AggStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AggStrategy._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_AggSplit@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_AggSplit._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SetOpCmd@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SetOpCmd._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_SetOpStrategy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_SetOpStrategy._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OnConflictAction@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_OnConflictAction._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LimitOption@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LimitOption._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LockClauseStrength@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LockClauseStrength._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LockWaitPolicy@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LockWaitPolicy._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_LockTupleMode@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_LockTupleMode._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_KeywordKind@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_KeywordKind._protobuf_nameMap, a1);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_Token@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_Token._protobuf_nameMap, a1);
}

uint64_t PgQuery_ParseResult.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ParseResult.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_RawStmt, &lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RawStmt);
}

uint64_t PgQuery_ParseResult.traverse<A>(visitor:)()
{
  if (!*(_DWORD *)v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(*(void *)(v0 + 8) + 16)
      || (type metadata accessor for PgQuery_RawStmt(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RawStmt), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for PgQuery_ParseResult(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ParseResult()
{
  return 0xD000000000000014;
}

uint64_t protocol witness for Message.isInitialized.getter in conformance PgQuery_ParseResult()
{
  return MEMORY[0x1F4127330]();
}

uint64_t (*protocol witness for Message.unknownFields.modify in conformance PgQuery_ParseResult())(void, void)
{
  return destructiveProjectEnumData for StorableValue;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ParseResult()
{
  return PgQuery_ParseResult.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.hash(into:) in conformance PgQuery_ParseResult()
{
  return MEMORY[0x1F4127398]();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ParseResult(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ParseResult);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for _MessageImplementationBase._protobuf_generated_isEqualTo(other:) in conformance PgQuery_ParseResult()
{
  return MEMORY[0x1F4127138]();
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ParseResult@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ParseResult._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ParseResult(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ParseResult);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ParseResult(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParseResult and conformance PgQuery_ParseResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ParseResult);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ParseResult(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_ParseResult.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for PgQuery_ParseResult) & 1;
}

uint64_t PgQuery_ScanResult.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PgQuery_ParseResult.decodeMessage<A>(decoder:)(a1, a2, a3, (void (*)(void))type metadata accessor for PgQuery_ScanToken, &lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanToken);
}

uint64_t PgQuery_ParseResult.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
  if (!v6)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        a4(0);
        lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(a5, a6);
        dispatch thunk of Decoder.decodeRepeatedMessageField<A>(value:)();
      }
      else if (result == 1)
      {
        dispatch thunk of Decoder.decodeSingularInt32Field(value:)();
      }
      uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    }
  }
  return result;
}

uint64_t PgQuery_ScanResult.traverse<A>(visitor:)()
{
  if (!*(_DWORD *)v0 || (uint64_t result = dispatch thunk of Visitor.visitSingularInt32Field(value:fieldNumber:)(), !v1))
  {
    if (!*(void *)(*(void *)(v0 + 8) + 16)
      || (type metadata accessor for PgQuery_ScanToken(0),
          lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanToken and conformance PgQuery_ScanToken, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanToken), uint64_t result = dispatch thunk of Visitor.visitRepeatedMessageField<A>(value:fieldNumber:)(), !v1))
    {
      type metadata accessor for PgQuery_ScanResult(0);
      return UnknownStorage.traverse<A>(visitor:)();
    }
  }
  return result;
}

uint64_t protocol witness for Message.init() in conformance PgQuery_ScanResult@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = MEMORY[0x1E4FBC860];
  return UnknownStorage.init()();
}

unint64_t protocol witness for static Message.protoMessageName.getter in conformance PgQuery_ScanResult()
{
  return 0xD000000000000013;
}

uint64_t protocol witness for Message.traverse<A>(visitor:) in conformance PgQuery_ScanResult()
{
  return PgQuery_ScanResult.traverse<A>(visitor:)();
}

uint64_t protocol witness for Message.isEqualTo(message:) in conformance PgQuery_ScanResult(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanResult);

  return MEMORY[0x1F4127150](a1, a2, Scan);
}

uint64_t protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_ScanResult@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static _ProtoNameProviding._protobuf_nameMap.getter in conformance PgQuery_OverridingKind(&one-time initialization token for _protobuf_nameMap, (uint64_t)static PgQuery_ScanResult._protobuf_nameMap, a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PgQuery_ScanResult(uint64_t a1)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanResult);

  return MEMORY[0x1F4127378](a1, Scan);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PgQuery_ScanResult(uint64_t a1, uint64_t a2)
{
  uint64_t Scan = lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScanResult and conformance PgQuery_ScanResult, (void (*)(uint64_t))type metadata accessor for PgQuery_ScanResult);

  return MEMORY[0x1F4127398](a1, a2, Scan);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PgQuery_ScanResult(uint64_t a1, uint64_t a2)
{
  return specialized static PgQuery_ParseResult.== infix(_:_:)(a1, a2, specialized static Array<A>.== infix(_:_:), type metadata accessor for PgQuery_ScanResult) & 1;
}

uint64_t one-time initialization function for defaultInstance()
{
  type metadata accessor for PgQuery_Node._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  uint64_t v2 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  static PgQuery_Node._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_Var._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__vartypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varlevelsup) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varnosyn) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__varattnosyn) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser11PgQuery_VarP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_Var._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_Param._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramkind;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramtypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__paramcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser13PgQuery_ParamP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_Param._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_GroupingFunc._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refs) = v4;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols) = v4;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__agglevelsup) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_GroupingFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_GroupingFunc._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  type metadata accessor for PgQuery_SubscriptingRef._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcontainertype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refelemtype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reftypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refupperindexpr) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__reflowerindexpr) = v4;
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refexpr, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_SubscriptingRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__refassgnexpr, 1, 1, Node);
  static PgQuery_SubscriptingRef._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  void *v5;

  type metadata accessor for PgQuery_NamedArgExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  unint64_t v5 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__name);
  int *v5 = 0;
  v5[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argnumber) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_NamedArgExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_NamedArgExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_OpExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_OpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_OpExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_DistinctExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_DistinctExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_DistinctExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_NullIfExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opresulttype) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opretset) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_NullIfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_NullIfExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_ScalarArrayOpExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfuncvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOr) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_ScalarArrayOpExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_ScalarArrayOpExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_BoolExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLop;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_BoolExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_BoolExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  type metadata accessor for PgQuery_SubLink._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkType;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subLinkID) = 0;
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__testexpr, 1, 1, Node);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__operName) = MEMORY[0x1E4FBC860];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subselect, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_SubLinkP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_SubLink._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_FieldSelect._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnum) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_FieldSelectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  static PgQuery_FieldSelect._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_FieldStore._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  unint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newvals) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fieldnums) = v5;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_FieldStoreP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  static PgQuery_FieldStore._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_RelabelType._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  unint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relabelformat;
  *(void *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_RelabelTypeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_RelabelType._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_CoerceViaIO._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  unint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat;
  *(void *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CoerceViaIOP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CoerceViaIO._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_ArrayCoerceExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elemexpr, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  unint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coerceformat;
  *(void *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_ArrayCoerceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_ArrayCoerceExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_ConvertRowtypeExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  unint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__convertformat;
  *(void *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser26PgQuery_ConvertRowtypeExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_ConvertRowtypeExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_CollateExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collOvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CollateExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CollateExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_CaseExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casetype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__casecollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E4FBC860];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defresult, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CaseExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_CaseWhen._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__result, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CaseWhenP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CaseWhen._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_CaseTestExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CaseTestExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = 0;
  static PgQuery_CaseTestExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_ArrayExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayTypevoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arrayCollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elementTypevoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__elements) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__multidims) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ArrayExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_ArrayExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PgQuery_RowExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowTypevoid (*v25)(uint64_t, uint64_t, id) = 0;
  unint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowFormat;
  *(void *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colnames) = v4;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RowExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_RowExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PgQuery_RowCompareExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rctype;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  unint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opnos) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opfamilies) = v5;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollids) = v5;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__largs) = v5;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RowCompareExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rargs) = v5;
  static PgQuery_RowCompareExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_CoalesceExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescetype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coalescecollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_CoalesceExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CoalesceExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_MinMaxExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxtype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__minmaxcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inputcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  uint64_t v4 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_MinMaxExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_MinMaxExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_SQLValueFunction._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__op;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__type) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SQLValueFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_SQLValueFunction._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_NullTest._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  unint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nulltesttype;
  *(void *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argisrow) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_NullTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_NullTest._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_BooleanTest._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  unint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__BOOLtesttype;
  *(void *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_BooleanTestP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_BooleanTest._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_CoerceToDomain._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttype) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resulttypmod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resultcollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  unint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coercionformat;
  *(void *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CoerceToDomainP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CoerceToDomain._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_CoerceToDomainValue._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_CoerceToDomainValueP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CoerceToDomainValue._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_SetToDefault._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeMod) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SetToDefaultP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_SetToDefault._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  void *v4;

  type metadata accessor for PgQuery_CurrentOfExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cvarno) = 0;
  uint64_t v4 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorName);
  void *v4 = 0;
  v4[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CurrentOfExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cursorParam) = 0;
  static PgQuery_CurrentOfExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_NextValueExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__seqvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_NextValueExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeID) = 0;
  static PgQuery_NextValueExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_InferenceElem._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infercollvoid (*v25)(uint64_t, uint64_t, id) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_InferenceElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inferopclass) = 0;
  static PgQuery_InferenceElem._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  void *v5;

  type metadata accessor for PgQuery_TargetEntry._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__xpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resno) = 0;
  unint64_t v5 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resname);
  int *v5 = 0;
  v5[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ressortgroupref) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigtbl) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resorigcol) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_TargetEntryP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__resjunk) = 0;
  static PgQuery_TargetEntry._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t Alias;
  uint64_t result;

  type metadata accessor for PgQuery_JoinExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(_WORD *)(v0 + 24) = 1;
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, 1, 1, Node);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause) = MEMORY[0x1E4FBC860];
  v3(v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals, 1, 1, Node);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 56))(v4, 1, 1, Alias);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_JoinExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rtindex) = 0;
  static PgQuery_JoinExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_FromExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FromExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__quals;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  static PgQuery_FromExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Node;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_OnConflictExpr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 32) = MEMORY[0x1E4FBC860];
  uint64_t v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arbiterWhere;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v4(v2, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraint) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictSet) = v1;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictWhere, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelIndex) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_OnConflictExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__exclRelTlist) = v1;
  static PgQuery_OnConflictExpr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_IntoClause._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rel;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colNames) = MEMORY[0x1E4FBC860];
  uint64_t v4 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__accessMethod);
  void *v4 = 0;
  v4[1] = 0xE000000000000000;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v3;
  unint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onCommit;
  *(void *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  uint64_t v6 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__tableSpaceName);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__viewQuery;
  *uint64_t v6 = 0;
  v6[1] = 0xE000000000000000;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v7, 1, 1, Node);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_IntoClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__skipData) = 0;
  static PgQuery_IntoClause._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_RawStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmt;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLocation) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_RawStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__stmtLen) = 0;
  static PgQuery_RawStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  type metadata accessor for PgQuery_InsertStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cols) = MEMORY[0x1E4FBC860];
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__selectStmt;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v4, 1, 1, Node);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__onConflictClause;
  uint64_t v7 = type metadata accessor for PgQuery_OnConflictClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v3;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  char v9 = type metadata accessor for PgQuery_WithClause(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  uint64_t v11 = v0
      + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_InsertStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__override;
  *(void *)uint64_t v11 = 0;
  *(unsigned char *)(v11 + 8) = 1;
  static PgQuery_InsertStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for PgQuery_DeleteStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__usingClause) = MEMORY[0x1E4FBC860];
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v4, 1, 1, Node);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v3;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_DeleteStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  uint64_t v7 = type metadata accessor for PgQuery_WithClause(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  static PgQuery_DeleteStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  type metadata accessor for PgQuery_UpdateStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = MEMORY[0x1E4FBC860];
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v4, 1, 1, Node);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__fromClause) = v3;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__returningList) = v3;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_UpdateStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withClause;
  uint64_t v7 = type metadata accessor for PgQuery_WithClause(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  static PgQuery_UpdateStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RoleSpec;
  uint64_t v3;
  uint64_t Node;
  uint64_t result;
  uint64_t v6;

  type metadata accessor for PgQuery_AlterTableCmd._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0xE000000000000000;
  *(_DWORD *)(v0 + 48) = 0;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner;
  unint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 56))(v1, 1, 1, RoleSpec);
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v3, 1, 1, Node);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_AlterTableCmdP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) = 0;
  static PgQuery_AlterTableCmd._StorageClass.defaultInstance = v0;
  return result;
}

{
  void *v0;
  char *v1;
  uint64_t Node;
  uint64_t result;
  char *v4;

  type metadata accessor for PgQuery_AlterDomainStmt._StorageClass(0);
  uint64_t v0 = (void *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = MEMORY[0x1E4FBC860];
  v0[5] = 0;
  v0[6] = 0xE000000000000000;
  uint64_t v1 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__def;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior;
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  *((unsigned char *)v0
  + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) = 0;
  static PgQuery_AlterDomainStmt._StorageClass.defaultInstance = (uint64_t)v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v5;

  type metadata accessor for PgQuery_SetOperationStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(_WORD *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__larg;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rarg, 1, 1, Node);
  unint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypes) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colTypmods) = v5;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colCollations) = v5;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_SetOperationStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__groupClauses) = v5;
  static PgQuery_SetOperationStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  void *v7;
  uint64_t result;

  type metadata accessor for PgQuery_CopyStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__attlist) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isFrom) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isProgram) = 0;
  uint64_t v7 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__filename);
  ValueMetadata *v7 = 0;
  v7[1] = 0xE000000000000000;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v6;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CopyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause, 1, 1, Node);
  static PgQuery_CopyStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  void *v4;

  type metadata accessor for PgQuery_CommentStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_CommentStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__comment);
  void *v4 = 0;
  v4[1] = 0xE000000000000000;
  static PgQuery_CommentStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t Node;
  uint64_t result;
  void *v6;
  void *v7;
  uint64_t v8;

  type metadata accessor for PgQuery_RenameStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v3, 1, 1, Node);
  uint64_t v6 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subname);
  *uint64_t v6 = 0;
  v6[1] = 0xE000000000000000;
  uint64_t v7 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newname);
  ValueMetadata *v7 = 0;
  v7[1] = 0xE000000000000000;
  uint64_t v8 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__behavior;
  *(void *)uint64_t v8 = 0;
  *(unsigned char *)(v8 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser18PgQuery_RenameStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) = 0;
  static PgQuery_RenameStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  void *v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t result;
  uint64_t v7;

  type metadata accessor for PgQuery_RuleStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rulename);
  ValueMetadata *v3 = 0;
  v3[1] = 0xE000000000000000;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v4, 1, 1, Node);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__event;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__instead) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__actions) = MEMORY[0x1E4FBC860];
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_RuleStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace) = 0;
  static PgQuery_RuleStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t result;
  uint64_t v7;

  type metadata accessor for PgQuery_ViewStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__view;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aliases) = MEMORY[0x1E4FBC860];
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v4, 1, 1, Node);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__replace) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__options) = v3;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_ViewStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheckOption;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  static PgQuery_ViewStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t TypeName;
  uint64_t v4;
  uint64_t CollateClause;
  uint64_t result;

  type metadata accessor for PgQuery_CreateDomainStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56))(v2, 1, 1, TypeName);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collClause;
  CollateClause = type metadata accessor for PgQuery_CollateClause(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(CollateClause - 8) + 56))(v4, 1, 1, CollateClause);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreateDomainStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__constraints) = v1;
  static PgQuery_CreateDomainStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t v3;
  uint64_t IntoClause;
  uint64_t result;
  uint64_t v6;

  type metadata accessor for PgQuery_CreateTableAsStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__into;
  IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(IntoClause - 8) + 56))(v3, 1, 1, IntoClause);
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relkind;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isSelectInto) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_CreateTableAsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ifNotExists) = 0;
  static PgQuery_CreateTableAsStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t TypeName;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t ObjectWithArgs;
  uint64_t result;
  uint64_t v7;

  type metadata accessor for PgQuery_CreateCastStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sourcetype;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56);
  v3(v1, 1, 1, TypeName);
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targettype, 1, 1, TypeName);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__func;
  ObjectWithArgs = type metadata accessor for PgQuery_ObjectWithArgs(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(ObjectWithArgs - 8) + 56))(v4, 1, 1, ObjectWithArgs);
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__context;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_CreateCastStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__inout) = 0;
  static PgQuery_CreateCastStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  void *v0;
  char *v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_PrepareStmt._StorageClass(0);
  uint64_t v0 = (void *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = MEMORY[0x1E4FBC860];
  uint64_t v1 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_PrepareStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  static PgQuery_PrepareStmt._StorageClass.defaultInstance = (uint64_t)v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_DeclareCursorStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  *(_DWORD *)(v0 + 32) = 0;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_DeclareCursorStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__query;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  static PgQuery_DeclareCursorStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_AlterObjectDependsStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__extname, 1, 1, Node);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser30PgQuery_AlterObjectDependsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__remove) = 0;
  static PgQuery_AlterObjectDependsStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t Node;
  uint64_t result;
  void *v6;

  type metadata accessor for PgQuery_AlterObjectSchemaStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v3, 1, 1, Node);
  uint64_t v6 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newschema);
  *uint64_t v6 = 0;
  v6[1] = 0xE000000000000000;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser29PgQuery_AlterObjectSchemaStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__missingOk) = 0;
  static PgQuery_AlterObjectSchemaStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t Node;
  uint64_t v5;
  uint64_t RoleSpec;
  uint64_t result;

  type metadata accessor for PgQuery_AlterOwnerStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v3, 1, 1, Node);
  unint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_AlterOwnerStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__newowner;
  unint64_t RoleSpec = type metadata accessor for PgQuery_RoleSpec(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RoleSpec - 8) + 56))(v5, 1, 1, RoleSpec);
  static PgQuery_AlterOwnerStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  void *v4;
  void *v5;

  type metadata accessor for PgQuery_SecLabelStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__provider);
  void *v4 = 0;
  v4[1] = 0xE000000000000000;
  unint64_t v5 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_SecLabelStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__label);
  int *v5 = 0;
  v5[1] = 0xE000000000000000;
  static PgQuery_SecLabelStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_AlterExtensionContentsStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  *(_DWORD *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(unsigned char *)(v0 + 48) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser34PgQuery_AlterExtensionContentsStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__object;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  static PgQuery_AlterExtensionContentsStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  void *v3;
  uint64_t v4;
  uint64_t Node;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_CreatePolicyStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  unint64_t v3 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cmdName);
  ValueMetadata *v3 = 0;
  v3[1] = 0xE000000000000000;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__permissive) = 0;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles) = MEMORY[0x1E4FBC860];
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v6(v4, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v6)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_CreatePolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, 1, 1, Node);
  static PgQuery_CreatePolicyStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t RangeVar;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_AlterPolicyStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__table;
  RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(RangeVar - 8) + 56))(v1, 1, 1, RangeVar);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__roles) = MEMORY[0x1E4FBC860];
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_AlterPolicyStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__withCheck, 1, 1, Node);
  static PgQuery_AlterPolicyStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t FuncExpr;
  uint64_t result;

  type metadata accessor for PgQuery_CallStmt._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccall;
  uint64_t v2 = type metadata accessor for PgQuery_FuncCall(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_CallStmtP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
  FuncExpr = type metadata accessor for PgQuery_FuncExpr(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(FuncExpr - 8) + 56))(v3, 1, 1, FuncExpr);
  static PgQuery_CallStmt._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_A_Expr._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(void *)(v0 + 32) = MEMORY[0x1E4FBC860];
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rexpr, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_A_ExprP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_A_Expr._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_A_Const._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_A_ConstP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_A_Const._StorageClass.defaultInstance = v0;
  return result;
}

{
  void *v0;
  uint64_t v1;
  char *v2;
  uint64_t Node;
  char *v4;
  uint64_t WindowDef;
  uint64_t result;

  type metadata accessor for PgQuery_FuncCall._StorageClass(0);
  uint64_t v0 = (void *)swift_allocObject();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  v0[2] = MEMORY[0x1E4FBC860];
  v0[3] = v1;
  v0[4] = v1;
  uint64_t v2 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggFilter;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v2, 1, 1, Node);
  *((unsigned char *)v0
  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggWithinGroup) = 0;
  *((unsigned char *)v0
  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggStar) = 0;
  *((unsigned char *)v0
  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__aggDistinct) = 0;
  *((unsigned char *)v0
  + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcVariadic) = 0;
  uint64_t v4 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__over;
  WindowDef = type metadata accessor for PgQuery_WindowDef(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(WindowDef - 8) + 56))(v4, 1, 1, WindowDef);
  *(_DWORD *)((char *)v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_FuncCallP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_FuncCall._StorageClass.defaultInstance = (uint64_t)v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_A_Indices._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__lidx;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_A_IndicesP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__uidx, 1, 1, Node);
  static PgQuery_A_Indices._StorageClass.defaultInstance = v0;
  return result;
}

{
  void *v0;
  char *v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_ResTarget._StorageClass(0);
  uint64_t v0 = (void *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = MEMORY[0x1E4FBC860];
  uint64_t v1 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__val;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)((char *)v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_ResTargetP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_ResTarget._StorageClass.defaultInstance = (uint64_t)v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_MultiAssignRef._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__source;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colno) = 0;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_MultiAssignRefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ncolumns) = 0;
  static PgQuery_MultiAssignRef._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t v3;
  uint64_t TypeName;
  uint64_t result;

  type metadata accessor for PgQuery_TypeCast._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56))(v3, 1, 1, TypeName);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser16PgQuery_TypeCastP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_TypeCast._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_CollateClause._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collname) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_CollateClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_CollateClause._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  type metadata accessor for PgQuery_SortBy._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0 + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyDir;
  *(void *)uint64_t v4 = 0;
  *(unsigned char *)(v4 + 8) = 1;
  unint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__sortbyNulls;
  *(void *)unint64_t v5 = 0;
  *(unsigned char *)(v5 + 8) = 1;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__useOp) = MEMORY[0x1E4FBC860];
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser14PgQuery_SortByP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_SortBy._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t Node;
  void (*v4)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_WindowDef._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0xE000000000000000;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 48) = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 56) = v1;
  *(_DWORD *)(v0 + 64) = 0;
  uint64_t v2 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__startOffset;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v4(v2, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v4)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__endOffset, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_WindowDefP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_WindowDef._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t v3;
  uint64_t Alias;
  uint64_t result;

  type metadata accessor for PgQuery_RangeSubselect._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__subquery;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeSubselectP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 56))(v3, 1, 1, Alias);
  static PgQuery_RangeSubselect._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t result;

  type metadata accessor for PgQuery_RangeTableSample._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__relation;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__method) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__args) = v4;
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v3)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTableSampleP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_RangeTableSample._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  void (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t Alias;
  uint64_t result;

  type metadata accessor for PgQuery_RangeTableFunc._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 0;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__docexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v3(v1, 1, 1, Node);
  v3(v0+ OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__rowexpr, 1, 1, Node);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__namespaces) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__columns) = v4;
  unint64_t v5 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__alias;
  Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Alias - 8) + 56))(v5, 1, 1, Alias);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser22PgQuery_RangeTableFuncP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_RangeTableFunc._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t TypeName;
  uint64_t v3;
  uint64_t Node;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t result;

  type metadata accessor for PgQuery_RangeTableFuncCol._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56))(v1, 1, 1, TypeName);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__forOrdinality) = 0;
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__isNotNull) = 0;
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__colexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56);
  v5(v3, 1, 1, Node);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v5)(v0+ OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__coldefexpr, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_RangeTableFuncColP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_RangeTableFuncCol._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for PgQuery_IndexElem._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__indexcolname);
  void *v4 = 0;
  v4[1] = 0xE000000000000000;
  unint64_t v5 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass) = v5;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclassopts) = v5;
  uint64_t v6 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__ordering;
  *(void *)uint64_t v6 = 0;
  *(unsigned char *)(v6 + 8) = 1;
  uint64_t v7 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser17PgQuery_IndexElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__nullsOrdering;
  *(void *)uint64_t v7 = 0;
  *(unsigned char *)(v7 + 8) = 1;
  static PgQuery_IndexElem._StorageClass.defaultInstance = v0;
  return result;
}

{
  void *v0;
  char *v1;
  uint64_t Node;
  uint64_t result;
  char *v4;

  type metadata accessor for PgQuery_DefElem._StorageClass(0);
  uint64_t v0 = (void *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = 0;
  v0[5] = 0xE000000000000000;
  uint64_t v1 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__arg;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = (char *)v0
     + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defaction;
  *(void *)uint64_t v4 = 0;
  v4[8] = 1;
  *(_DWORD *)((char *)v0
            + OBJC_IVAR____TtCV14BiomeSQLParser15PgQuery_DefElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_DefElem._StorageClass.defaultInstance = (uint64_t)v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_RangeTblFunction._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcount) = 0;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolnames) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypes) = v4;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccoltypmods) = v4;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funccolcollations) = v4;
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_RangeTblFunctionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__funcparams) = v4;
  static PgQuery_RangeTblFunction._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_TableSampleClause._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(_DWORD *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = MEMORY[0x1E4FBC860];
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_TableSampleClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__repeatable;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  static PgQuery_TableSampleClause._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_WithCheckOption._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0xE000000000000000;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__qual;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(unsigned char *)(v0
           + OBJC_IVAR____TtCV14BiomeSQLParser23PgQuery_WithCheckOptionP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__cascaded) = 0;
  static PgQuery_WithCheckOption._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t TypeName;
  uint64_t v3;
  uint64_t v4;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_FunctionParameter._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__argType;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56))(v1, 1, 1, TypeName);
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__mode;
  *(void *)unint64_t v3 = 0;
  *(unsigned char *)(v3 + 8) = 1;
  uint64_t v4 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser25PgQuery_FunctionParameterP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__defexpr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v4, 1, 1, Node);
  static PgQuery_FunctionParameter._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t v3;
  uint64_t TypeName;
  uint64_t result;

  type metadata accessor for PgQuery_XmlSerialize._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  Node = type metadata accessor for PgQuery_Node(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__typeName;
  TypeName = type metadata accessor for PgQuery_TypeName(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(TypeName - 8) + 56))(v3, 1, 1, TypeName);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser20PgQuery_XmlSerializeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_XmlSerialize._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  void *v4;

  type metadata accessor for PgQuery_InferClause._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = (void *)(v0
                + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__conname);
  void *v4 = 0;
  v4[1] = 0xE000000000000000;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser19PgQuery_InferClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_InferClause._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t InferClause;
  uint64_t v3;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_OnConflictClause._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__infer;
  InferClause = type metadata accessor for PgQuery_InferClause(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(InferClause - 8) + 56))(v1, 1, 1, InferClause);
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__targetList) = MEMORY[0x1E4FBC860];
  unint64_t v3 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__whereClause;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v3, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser24PgQuery_OnConflictClauseP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_OnConflictClause._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for PgQuery_PartitionElem._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__expr;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__collation) = MEMORY[0x1E4FBC860];
  *(void *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__opclass) = v4;
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser21PgQuery_PartitionElemP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_PartitionElem._StorageClass.defaultInstance = v0;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t Node;
  uint64_t result;

  type metadata accessor for PgQuery_PartitionRangeDatum._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__value;
  Node = type metadata accessor for PgQuery_Node(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Node - 8) + 56))(v1, 1, 1, Node);
  *(_DWORD *)(v0
            + OBJC_IVAR____TtCV14BiomeSQLParser27PgQuery_PartitionRangeDatumP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__location) = 0;
  static PgQuery_PartitionRangeDatum._StorageClass.defaultInstance = v0;
  return result;
}

uint64_t PgQuery_Node._StorageClass.__deallocating_deinit()
{
  return PgQuery_Node._StorageClass.__deallocating_deinit(&OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
}

uint64_t ObjC metadata update function for PgQuery_Node._StorageClass()
{
  return type metadata accessor for PgQuery_Node._StorageClass(0);
}

uint64_t type metadata accessor for PgQuery_Node._StorageClass(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Node._StorageClass);
}

void type metadata completion function for PgQuery_Node._StorageClass()
{
  type metadata accessor for PgQuery_Node.OneOf_Node?(319, &lazy cache variable for type metadata for PgQuery_Node.OneOf_Node?, (void (*)(uint64_t))type metadata accessor for PgQuery_Node.OneOf_Node);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PgQuery_Node.OneOf_Node(uint64_t a1)
{
  return type metadata accessor for PgQuery_Node._StorageClass(a1, (uint64_t *)&type metadata singleton initialization cache for PgQuery_Node.OneOf_Node);
}

uint64_t PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(int *)(type metadata accessor for PgQuery_Node(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v8 = *(void *)(v3 + v7);
    type metadata accessor for PgQuery_Node._StorageClass(0);
    uint64_t v15 = a3;
    uint64_t v9 = swift_allocObject();
    uint64_t v10 = v9 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
    uint64_t v11 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 1, v11);
    uint64_t v12 = v8 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
    swift_retain();
    outlined destroy of AnyValue?(v10, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with copy of PgQuery_Alias?(v12, v10, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    swift_release();
    *(void *)(v3 + v7) = v9;
    a3 = v15;
    swift_release();
  }
  uint64_t v13 = swift_retain();
  closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(v13, a1, a2, a3);
  return swift_release();
}

uint64_t closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  while (1)
  {
    uint64_t result = dispatch thunk of Decoder.nextFieldNumber()();
    if (v4 || (v10 & 1) != 0) {
      return result;
    }
    switch(result)
    {
      case 1:
        closure #1 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 2:
        closure #2 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 3:
        closure #3 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 4:
        closure #4 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 5:
        closure #5 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 6:
        closure #6 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 7:
        closure #7 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 8:
        closure #8 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 9:
        closure #9 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 10:
        closure #10 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 11:
        closure #11 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 12:
        closure #12 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 13:
        closure #13 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 14:
        closure #14 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 15:
        closure #15 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 16:
        closure #16 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 17:
        closure #17 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 18:
        closure #18 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 19:
        closure #19 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 20:
        closure #20 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 21:
        closure #21 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 22:
        closure #22 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 23:
        closure #23 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 24:
        closure #24 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 25:
        closure #25 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 26:
        closure #26 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 27:
        closure #27 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 28:
        closure #28 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 29:
        closure #29 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 30:
        closure #30 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 31:
        closure #31 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 32:
        closure #32 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 33:
        closure #33 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 34:
        closure #34 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 35:
        closure #35 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 36:
        closure #36 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 37:
        closure #37 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 38:
        closure #38 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 39:
        closure #39 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 40:
        closure #40 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 41:
        closure #41 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 42:
        closure #42 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 43:
        closure #43 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 44:
        closure #44 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 45:
        closure #45 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 46:
        closure #46 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 47:
        closure #47 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 48:
        closure #48 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 49:
        closure #49 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 50:
        closure #50 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 51:
        closure #51 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 52:
        closure #52 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 53:
        closure #53 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 54:
        closure #54 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 55:
        closure #55 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 56:
        closure #56 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 57:
        closure #57 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 58:
        closure #58 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 59:
        closure #59 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 60:
        closure #60 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 61:
        closure #61 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 62:
        closure #62 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 63:
        closure #63 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      case 64:
        closure #64 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
        break;
      default:
        switch(result)
        {
          case 65:
            closure #65 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 66:
            closure #66 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 67:
            closure #67 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 68:
            closure #68 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 69:
            closure #69 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 70:
            closure #70 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 71:
            closure #71 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 72:
            closure #72 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 73:
            closure #73 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 74:
            closure #74 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 75:
            closure #75 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 76:
            closure #76 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 77:
            closure #77 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 78:
            closure #78 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 79:
            closure #79 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 80:
            closure #80 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 81:
            closure #81 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 82:
            closure #82 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 83:
            closure #83 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 84:
            closure #84 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 85:
            closure #85 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 86:
            closure #86 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 87:
            closure #87 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 88:
            closure #88 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 89:
            closure #89 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 90:
            closure #90 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 91:
            closure #91 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 92:
            closure #92 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 93:
            closure #93 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 94:
            closure #94 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 95:
            closure #95 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 96:
            closure #96 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 97:
            closure #97 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 98:
            closure #98 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 99:
            closure #99 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 100:
            closure #100 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 101:
            closure #101 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 102:
            closure #102 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 103:
            closure #103 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 104:
            closure #104 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 105:
            closure #105 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 106:
            closure #106 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 107:
            closure #107 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 108:
            closure #108 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 109:
            closure #109 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 110:
            closure #110 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 111:
            closure #111 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 112:
            closure #112 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 113:
            closure #113 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 114:
            closure #114 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 115:
            closure #115 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 116:
            closure #116 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 117:
            closure #117 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 118:
            closure #118 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 119:
            closure #119 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 120:
            closure #120 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 121:
            closure #121 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 122:
            closure #122 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 123:
            closure #123 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 124:
            closure #124 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 125:
            closure #125 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 126:
            closure #126 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 127:
            closure #127 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          case 128:
            closure #128 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
            break;
          default:
            switch(result)
            {
              case 129:
                closure #129 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 130:
                closure #130 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 131:
                closure #131 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 132:
                closure #132 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 133:
                closure #133 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 134:
                closure #134 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 135:
                closure #135 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 136:
                closure #136 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 137:
                closure #137 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 138:
                closure #138 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 139:
                closure #139 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 140:
                closure #140 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 141:
                closure #141 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 142:
                closure #142 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 143:
                closure #143 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 144:
                closure #144 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 145:
                closure #145 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 146:
                closure #146 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 147:
                closure #147 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 148:
                closure #148 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 149:
                closure #149 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 150:
                closure #150 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 151:
                closure #151 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 152:
                closure #152 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 153:
                closure #153 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 154:
                closure #154 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 155:
                closure #155 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 156:
                closure #156 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 157:
                closure #157 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 158:
                closure #158 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 159:
                closure #159 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 160:
                closure #160 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 161:
                closure #161 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 162:
                closure #162 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 163:
                closure #163 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 164:
                closure #164 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 165:
                closure #165 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 166:
                closure #166 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 167:
                closure #167 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 168:
                closure #168 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 169:
                closure #169 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 170:
                closure #170 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 171:
                closure #171 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 172:
                closure #172 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 173:
                closure #173 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 174:
                closure #174 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 175:
                closure #175 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 176:
                closure #176 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 177:
                closure #177 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 178:
                closure #178 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 179:
                closure #179 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 180:
                closure #180 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 181:
                closure #181 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 182:
                closure #182 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 183:
                closure #183 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 184:
                closure #184 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 185:
                closure #185 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 186:
                closure #186 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 187:
                closure #187 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 188:
                closure #188 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 189:
                closure #189 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 190:
                closure #190 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 191:
                closure #191 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              case 192:
                closure #192 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                break;
              default:
                switch(result)
                {
                  case 193:
                    closure #193 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 194:
                    closure #194 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 195:
                    closure #195 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 196:
                    closure #196 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 197:
                    closure #197 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 198:
                    closure #198 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 199:
                    closure #199 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 200:
                    closure #200 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 201:
                    closure #201 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 202:
                    closure #202 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 203:
                    closure #203 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 204:
                    closure #204 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 205:
                    closure #205 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 206:
                    closure #206 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 207:
                    closure #207 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 208:
                    closure #208 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 209:
                    closure #209 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 210:
                    closure #210 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 211:
                    closure #211 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 212:
                    closure #212 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 213:
                    closure #213 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 214:
                    closure #214 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 215:
                    closure #215 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 216:
                    closure #216 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 217:
                    closure #217 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 218:
                    closure #218 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 219:
                    closure #219 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 220:
                    closure #220 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 221:
                    closure #221 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 222:
                    closure #222 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 223:
                    closure #223 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 224:
                    closure #224 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 225:
                    closure #225 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 226:
                    closure #226 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 227:
                    closure #227 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  case 228:
                    closure #228 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(a1, a2, a3, a4);
                    break;
                  default:
                    continue;
                }
                break;
            }
            break;
        }
        break;
    }
  }
}

uint64_t closure #1 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t Alias = type metadata accessor for PgQuery_Alias(0);
  uint64_t v5 = *(void *)(Alias - 8);
  uint64_t v6 = MEMORY[0x1F4188790](Alias);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Alias?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = Alias;
  v24((char *)&v34 - v22, 1, 1, Alias);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
LABEL_5:
    uint64_t v28 = v41;
    uint64_t v27 = v42;
    goto LABEL_6;
  }
  uint64_t v26 = (uint64_t)v40;
  outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
  outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  uint64_t v25 = v12;
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    goto LABEL_5;
  }
  outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
  outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_Alias);
  outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_Alias);
  uint64_t v28 = v41;
  v24(v23, 0, 1, v41);
  uint64_t v27 = v42;
LABEL_6:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Alias and conformance PgQuery_Alias, (void (*)(uint64_t))type metadata accessor for PgQuery_Alias);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v27) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_Alias?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v28) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Alias?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_Alias);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Alias?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_Alias);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #2 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RangeVar = type metadata accessor for PgQuery_RangeVar(0);
  uint64_t v5 = *(void *)(RangeVar - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RangeVar);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeVar?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RangeVar;
  v24((char *)&v34 - v22, 1, 1, RangeVar);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RangeVar);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RangeVar);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeVar and conformance PgQuery_RangeVar, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeVar);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RangeVar?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RangeVar);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeVar?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RangeVar);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #3 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t TableFunc = type metadata accessor for PgQuery_TableFunc(0);
  uint64_t v5 = *(void *)(TableFunc - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TableFunc);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TableFunc?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TableFunc;
  v24((char *)&v34 - v22, 1, 1, TableFunc);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TableFunc?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_TableFunc);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_TableFunc);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TableFunc and conformance PgQuery_TableFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_TableFunc);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TableFunc?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_TableFunc?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_TableFunc);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TableFunc?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_TableFunc);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #4 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t Expr = type metadata accessor for PgQuery_Expr(0);
  uint64_t v5 = *(void *)(Expr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](Expr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Expr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = Expr;
  v24((char *)&v34 - v22, 1, 1, Expr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 3)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Expr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_Expr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_Expr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Expr and conformance PgQuery_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_Expr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Expr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_Expr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Expr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Expr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_Expr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Expr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_Expr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #5 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t Var = type metadata accessor for PgQuery_Var(0);
  uint64_t v5 = *(void *)(Var - 8);
  uint64_t v6 = MEMORY[0x1F4188790](Var);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Var?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = Var;
  v24((char *)&v34 - v22, 1, 1, Var);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 4)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Var?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_Var);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_Var);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Var and conformance PgQuery_Var, (void (*)(uint64_t))type metadata accessor for PgQuery_Var);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Var?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_Var?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Var?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Var?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_Var);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Var?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_Var);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #6 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t Param = type metadata accessor for PgQuery_Param(0);
  uint64_t v5 = *(void *)(Param - 8);
  uint64_t v6 = MEMORY[0x1F4188790](Param);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Param?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = Param;
  v24((char *)&v34 - v22, 1, 1, Param);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 5)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Param?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_Param);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_Param);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Param and conformance PgQuery_Param, (void (*)(uint64_t))type metadata accessor for PgQuery_Param);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Param?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_Param?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Param?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Param?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_Param);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Param?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_Param);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #7 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t Aggref = type metadata accessor for PgQuery_Aggref(0);
  uint64_t v5 = *(void *)(Aggref - 8);
  uint64_t v6 = MEMORY[0x1F4188790](Aggref);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Aggref?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = Aggref;
  v24((char *)&v34 - v22, 1, 1, Aggref);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Aggref?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_Aggref);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_Aggref);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Aggref and conformance PgQuery_Aggref, (void (*)(uint64_t))type metadata accessor for PgQuery_Aggref);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Aggref?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_Aggref?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Aggref?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Aggref?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_Aggref);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Aggref?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_Aggref);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #8 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t GroupingFunc = type metadata accessor for PgQuery_GroupingFunc(0);
  uint64_t v5 = *(void *)(GroupingFunc - 8);
  uint64_t v6 = MEMORY[0x1F4188790](GroupingFunc);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GroupingFunc?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = GroupingFunc;
  v24((char *)&v34 - v22, 1, 1, GroupingFunc);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 7)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GroupingFunc?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_GroupingFunc);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_GroupingFunc);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GroupingFunc and conformance PgQuery_GroupingFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_GroupingFunc);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GroupingFunc?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_GroupingFunc?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GroupingFunc?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_GroupingFunc?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_GroupingFunc);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GroupingFunc?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_GroupingFunc);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #9 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t WindowFunc = type metadata accessor for PgQuery_WindowFunc(0);
  uint64_t v5 = *(void *)(WindowFunc - 8);
  uint64_t v6 = MEMORY[0x1F4188790](WindowFunc);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_WindowFunc?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = WindowFunc;
  v24((char *)&v34 - v22, 1, 1, WindowFunc);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 8)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WindowFunc?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_WindowFunc);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_WindowFunc);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_WindowFunc and conformance PgQuery_WindowFunc, (void (*)(uint64_t))type metadata accessor for PgQuery_WindowFunc);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WindowFunc?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_WindowFunc?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WindowFunc?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_WindowFunc?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_WindowFunc);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_WindowFunc?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_WindowFunc);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #10 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t SubscriptingRef = type metadata accessor for PgQuery_SubscriptingRef(0);
  uint64_t v5 = *(void *)(SubscriptingRef - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SubscriptingRef);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SubscriptingRef;
  v24((char *)&v34 - v22, 1, 1, SubscriptingRef);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 9)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_SubscriptingRef);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_SubscriptingRef);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubscriptingRef and conformance PgQuery_SubscriptingRef, (void (*)(uint64_t))type metadata accessor for PgQuery_SubscriptingRef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_SubscriptingRef);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SubscriptingRef?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_SubscriptingRef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #11 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Funcuint64_t Expr = type metadata accessor for PgQuery_FuncExpr(0);
  uint64_t v5 = *(void *)(FuncExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](FuncExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FuncExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = FuncExpr;
  v24((char *)&v34 - v22, 1, 1, FuncExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 10)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_FuncExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_FuncExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncExpr and conformance PgQuery_FuncExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_FuncExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FuncExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_FuncExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #12 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  NamedArguint64_t Expr = type metadata accessor for PgQuery_NamedArgExpr(0);
  uint64_t v5 = *(void *)(NamedArgExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](NamedArgExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = NamedArgExpr;
  v24((char *)&v34 - v22, 1, 1, NamedArgExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 11)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_NamedArgExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_NamedArgExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NamedArgExpr and conformance PgQuery_NamedArgExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NamedArgExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_NamedArgExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NamedArgExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_NamedArgExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #13 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Opuint64_t Expr = type metadata accessor for PgQuery_OpExpr(0);
  uint64_t v5 = *(void *)(OpExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](OpExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OpExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = OpExpr;
  v24((char *)&v34 - v22, 1, 1, OpExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 12)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OpExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_OpExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_OpExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OpExpr and conformance PgQuery_OpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OpExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OpExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_OpExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OpExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_OpExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_OpExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OpExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_OpExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #14 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Distinctuint64_t Expr = type metadata accessor for PgQuery_DistinctExpr(0);
  uint64_t v5 = *(void *)(DistinctExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DistinctExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DistinctExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DistinctExpr;
  v24((char *)&v34 - v22, 1, 1, DistinctExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 13)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DistinctExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DistinctExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DistinctExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DistinctExpr and conformance PgQuery_DistinctExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_DistinctExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DistinctExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DistinctExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DistinctExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DistinctExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DistinctExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DistinctExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DistinctExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #15 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  NullIfuint64_t Expr = type metadata accessor for PgQuery_NullIfExpr(0);
  uint64_t v5 = *(void *)(NullIfExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](NullIfExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_NullIfExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = NullIfExpr;
  v24((char *)&v34 - v22, 1, 1, NullIfExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 14)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NullIfExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_NullIfExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_NullIfExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullIfExpr and conformance PgQuery_NullIfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NullIfExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NullIfExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_NullIfExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NullIfExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_NullIfExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_NullIfExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NullIfExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_NullIfExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #16 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  ScalarArrayOpuint64_t Expr = type metadata accessor for PgQuery_ScalarArrayOpExpr(0);
  uint64_t v5 = *(void *)(ScalarArrayOpExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ScalarArrayOpExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ScalarArrayOpExpr;
  v24((char *)&v34 - v22, 1, 1, ScalarArrayOpExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 15)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ScalarArrayOpExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ScalarArrayOpExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ScalarArrayOpExpr and conformance PgQuery_ScalarArrayOpExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ScalarArrayOpExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ScalarArrayOpExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ScalarArrayOpExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ScalarArrayOpExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #17 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t BoolExpr = type metadata accessor for PgQuery_BoolExpr(0);
  uint64_t v5 = *(void *)(BoolExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](BoolExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_BoolExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = BoolExpr;
  v24((char *)&v34 - v22, 1, 1, BoolExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 16)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_BoolExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_BoolExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_BoolExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BoolExpr and conformance PgQuery_BoolExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_BoolExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_BoolExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_BoolExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_BoolExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_BoolExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_BoolExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_BoolExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_BoolExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #18 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  SubLinunint64_t k = type metadata accessor for PgQuery_SubLink(0);
  uint64_t v5 = *(void *)(SubLink - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SubLink);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SubLink?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SubLink;
  v24((char *)&v34 - v22, 1, 1, SubLink);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 17)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SubLink?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_SubLink);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_SubLink);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubLink and conformance PgQuery_SubLink, (void (*)(uint64_t))type metadata accessor for PgQuery_SubLink);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SubLink?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_SubLink?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SubLink?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_SubLink?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_SubLink);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SubLink?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_SubLink);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #19 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t SubPlan = type metadata accessor for PgQuery_SubPlan(0);
  uint64_t v5 = *(void *)(SubPlan - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SubPlan);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SubPlan?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SubPlan;
  v24((char *)&v34 - v22, 1, 1, SubPlan);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 18)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SubPlan?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_SubPlan);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_SubPlan);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SubPlan and conformance PgQuery_SubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_SubPlan);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SubPlan?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_SubPlan?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SubPlan?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_SubPlan?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_SubPlan);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SubPlan?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_SubPlan);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #20 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Alternativeuint64_t SubPlan = type metadata accessor for PgQuery_AlternativeSubPlan(0);
  uint64_t v5 = *(void *)(AlternativeSubPlan - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlternativeSubPlan);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlternativeSubPlan;
  v24((char *)&v34 - v22, 1, 1, AlternativeSubPlan);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 19)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlternativeSubPlan);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlternativeSubPlan);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlternativeSubPlan and conformance PgQuery_AlternativeSubPlan, (void (*)(uint64_t))type metadata accessor for PgQuery_AlternativeSubPlan);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlternativeSubPlan);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlternativeSubPlan?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlternativeSubPlan);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #21 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t FieldSelect = type metadata accessor for PgQuery_FieldSelect(0);
  uint64_t v5 = *(void *)(FieldSelect - 8);
  uint64_t v6 = MEMORY[0x1F4188790](FieldSelect);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FieldSelect?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = FieldSelect;
  v24((char *)&v34 - v22, 1, 1, FieldSelect);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 20)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FieldSelect?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_FieldSelect);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_FieldSelect);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldSelect and conformance PgQuery_FieldSelect, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldSelect);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FieldSelect?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_FieldSelect?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FieldSelect?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_FieldSelect?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_FieldSelect);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FieldSelect?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_FieldSelect);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #22 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t FieldStore = type metadata accessor for PgQuery_FieldStore(0);
  uint64_t v5 = *(void *)(FieldStore - 8);
  uint64_t v6 = MEMORY[0x1F4188790](FieldStore);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FieldStore?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = FieldStore;
  v24((char *)&v34 - v22, 1, 1, FieldStore);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 21)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FieldStore?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_FieldStore);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_FieldStore);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FieldStore and conformance PgQuery_FieldStore, (void (*)(uint64_t))type metadata accessor for PgQuery_FieldStore);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FieldStore?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_FieldStore?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FieldStore?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_FieldStore?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_FieldStore);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FieldStore?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_FieldStore);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #23 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RelabelType = type metadata accessor for PgQuery_RelabelType(0);
  uint64_t v5 = *(void *)(RelabelType - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RelabelType);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RelabelType?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RelabelType;
  v24((char *)&v34 - v22, 1, 1, RelabelType);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 22)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RelabelType?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RelabelType);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RelabelType);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RelabelType and conformance PgQuery_RelabelType, (void (*)(uint64_t))type metadata accessor for PgQuery_RelabelType);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RelabelType?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RelabelType?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RelabelType?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RelabelType?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RelabelType);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RelabelType?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RelabelType);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #24 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t CoerceViaIO = type metadata accessor for PgQuery_CoerceViaIO(0);
  uint64_t v5 = *(void *)(CoerceViaIO - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CoerceViaIO);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CoerceViaIO;
  v24((char *)&v34 - v22, 1, 1, CoerceViaIO);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 23)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CoerceViaIO);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CoerceViaIO);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceViaIO and conformance PgQuery_CoerceViaIO, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceViaIO);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CoerceViaIO);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoerceViaIO?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CoerceViaIO);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #25 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  ArrayCoerceuint64_t Expr = type metadata accessor for PgQuery_ArrayCoerceExpr(0);
  uint64_t v5 = *(void *)(ArrayCoerceExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ArrayCoerceExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ArrayCoerceExpr;
  v24((char *)&v34 - v22, 1, 1, ArrayCoerceExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 24)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ArrayCoerceExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ArrayCoerceExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayCoerceExpr and conformance PgQuery_ArrayCoerceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayCoerceExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ArrayCoerceExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ArrayCoerceExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ArrayCoerceExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #26 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  ConvertRowtypeuint64_t Expr = type metadata accessor for PgQuery_ConvertRowtypeExpr(0);
  uint64_t v5 = *(void *)(ConvertRowtypeExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ConvertRowtypeExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ConvertRowtypeExpr;
  v24((char *)&v34 - v22, 1, 1, ConvertRowtypeExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 25)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ConvertRowtypeExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ConvertRowtypeExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConvertRowtypeExpr and conformance PgQuery_ConvertRowtypeExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ConvertRowtypeExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ConvertRowtypeExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ConvertRowtypeExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ConvertRowtypeExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #27 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Collateuint64_t Expr = type metadata accessor for PgQuery_CollateExpr(0);
  uint64_t v5 = *(void *)(CollateExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CollateExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CollateExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CollateExpr;
  v24((char *)&v34 - v22, 1, 1, CollateExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 26)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CollateExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CollateExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CollateExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CollateExpr and conformance PgQuery_CollateExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CollateExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CollateExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CollateExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CollateExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CollateExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CollateExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CollateExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CollateExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #28 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Caseuint64_t Expr = type metadata accessor for PgQuery_CaseExpr(0);
  uint64_t v5 = *(void *)(CaseExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CaseExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CaseExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CaseExpr;
  v24((char *)&v34 - v22, 1, 1, CaseExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 27)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CaseExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CaseExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CaseExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseExpr and conformance PgQuery_CaseExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CaseExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CaseExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CaseExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CaseExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CaseExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CaseExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CaseExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #29 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t CaseWhen = type metadata accessor for PgQuery_CaseWhen(0);
  uint64_t v5 = *(void *)(CaseWhen - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CaseWhen);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CaseWhen?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CaseWhen;
  v24((char *)&v34 - v22, 1, 1, CaseWhen);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 28)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CaseWhen?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CaseWhen);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CaseWhen);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseWhen and conformance PgQuery_CaseWhen, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseWhen);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CaseWhen?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CaseWhen?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CaseWhen?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CaseWhen?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CaseWhen);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CaseWhen?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CaseWhen);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #30 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  CaseTestuint64_t Expr = type metadata accessor for PgQuery_CaseTestExpr(0);
  uint64_t v5 = *(void *)(CaseTestExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CaseTestExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CaseTestExpr;
  v24((char *)&v34 - v22, 1, 1, CaseTestExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 29)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CaseTestExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CaseTestExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CaseTestExpr and conformance PgQuery_CaseTestExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CaseTestExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CaseTestExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CaseTestExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CaseTestExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #31 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Arrayuint64_t Expr = type metadata accessor for PgQuery_ArrayExpr(0);
  uint64_t v5 = *(void *)(ArrayExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ArrayExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ArrayExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ArrayExpr;
  v24((char *)&v34 - v22, 1, 1, ArrayExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 30)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ArrayExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ArrayExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ArrayExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ArrayExpr and conformance PgQuery_ArrayExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_ArrayExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ArrayExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ArrayExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ArrayExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ArrayExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ArrayExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ArrayExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ArrayExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #32 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Rowuint64_t Expr = type metadata accessor for PgQuery_RowExpr(0);
  uint64_t v5 = *(void *)(RowExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RowExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RowExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RowExpr;
  v24((char *)&v34 - v22, 1, 1, RowExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 31)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RowExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RowExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RowExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowExpr and conformance PgQuery_RowExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RowExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RowExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RowExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RowExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RowExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RowExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RowExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #33 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  RowCompareuint64_t Expr = type metadata accessor for PgQuery_RowCompareExpr(0);
  uint64_t v5 = *(void *)(RowCompareExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RowCompareExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RowCompareExpr;
  v24((char *)&v34 - v22, 1, 1, RowCompareExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 32)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RowCompareExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RowCompareExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RowCompareExpr and conformance PgQuery_RowCompareExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_RowCompareExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RowCompareExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RowCompareExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RowCompareExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #34 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Coalesceuint64_t Expr = type metadata accessor for PgQuery_CoalesceExpr(0);
  uint64_t v5 = *(void *)(CoalesceExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CoalesceExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CoalesceExpr;
  v24((char *)&v34 - v22, 1, 1, CoalesceExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 33)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CoalesceExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CoalesceExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoalesceExpr and conformance PgQuery_CoalesceExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CoalesceExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CoalesceExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoalesceExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CoalesceExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #35 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  MinMaxuint64_t Expr = type metadata accessor for PgQuery_MinMaxExpr(0);
  uint64_t v5 = *(void *)(MinMaxExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](MinMaxExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = MinMaxExpr;
  v24((char *)&v34 - v22, 1, 1, MinMaxExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 34)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_MinMaxExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_MinMaxExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_MinMaxExpr and conformance PgQuery_MinMaxExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_MinMaxExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_MinMaxExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_MinMaxExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_MinMaxExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #36 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t SQLValueFunction = type metadata accessor for PgQuery_SQLValueFunction(0);
  uint64_t v5 = *(void *)(SQLValueFunction - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SQLValueFunction);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SQLValueFunction;
  v24((char *)&v34 - v22, 1, 1, SQLValueFunction);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 35)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_SQLValueFunction);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_SQLValueFunction);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SQLValueFunction and conformance PgQuery_SQLValueFunction, (void (*)(uint64_t))type metadata accessor for PgQuery_SQLValueFunction);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_SQLValueFunction);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SQLValueFunction?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_SQLValueFunction);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #37 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t XmlExpr = type metadata accessor for PgQuery_XmlExpr(0);
  uint64_t v5 = *(void *)(XmlExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](XmlExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_XmlExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = XmlExpr;
  v24((char *)&v34 - v22, 1, 1, XmlExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 36)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_XmlExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_XmlExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_XmlExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_XmlExpr and conformance PgQuery_XmlExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_XmlExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_XmlExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_XmlExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_XmlExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_XmlExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_XmlExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_XmlExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_XmlExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #38 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t NullTest = type metadata accessor for PgQuery_NullTest(0);
  uint64_t v5 = *(void *)(NullTest - 8);
  uint64_t v6 = MEMORY[0x1F4188790](NullTest);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_NullTest?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = NullTest;
  v24((char *)&v34 - v22, 1, 1, NullTest);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 37)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NullTest?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_NullTest);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_NullTest);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NullTest and conformance PgQuery_NullTest, (void (*)(uint64_t))type metadata accessor for PgQuery_NullTest);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NullTest?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_NullTest?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NullTest?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_NullTest?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_NullTest);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NullTest?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_NullTest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #39 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t BooleanTest = type metadata accessor for PgQuery_BooleanTest(0);
  uint64_t v5 = *(void *)(BooleanTest - 8);
  uint64_t v6 = MEMORY[0x1F4188790](BooleanTest);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_BooleanTest?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = BooleanTest;
  v24((char *)&v34 - v22, 1, 1, BooleanTest);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 38)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_BooleanTest?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_BooleanTest);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_BooleanTest);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_BooleanTest and conformance PgQuery_BooleanTest, (void (*)(uint64_t))type metadata accessor for PgQuery_BooleanTest);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_BooleanTest?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_BooleanTest?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_BooleanTest?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_BooleanTest?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_BooleanTest);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_BooleanTest?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_BooleanTest);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #40 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t CoerceToDomain = type metadata accessor for PgQuery_CoerceToDomain(0);
  uint64_t v5 = *(void *)(CoerceToDomain - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CoerceToDomain);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CoerceToDomain;
  v24((char *)&v34 - v22, 1, 1, CoerceToDomain);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 39)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CoerceToDomain);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CoerceToDomain);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomain and conformance PgQuery_CoerceToDomain, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomain);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CoerceToDomain);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoerceToDomain?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CoerceToDomain);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #41 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t CoerceToDomainValue = type metadata accessor for PgQuery_CoerceToDomainValue(0);
  uint64_t v5 = *(void *)(CoerceToDomainValue - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CoerceToDomainValue);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CoerceToDomainValue;
  v24((char *)&v34 - v22, 1, 1, CoerceToDomainValue);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 40)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CoerceToDomainValue);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CoerceToDomainValue);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CoerceToDomainValue and conformance PgQuery_CoerceToDomainValue, (void (*)(uint64_t))type metadata accessor for PgQuery_CoerceToDomainValue);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CoerceToDomainValue);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CoerceToDomainValue?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CoerceToDomainValue);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #42 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t SetToDefault = type metadata accessor for PgQuery_SetToDefault(0);
  uint64_t v5 = *(void *)(SetToDefault - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SetToDefault);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SetToDefault?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SetToDefault;
  v24((char *)&v34 - v22, 1, 1, SetToDefault);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 41)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SetToDefault?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_SetToDefault);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_SetToDefault);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetToDefault and conformance PgQuery_SetToDefault, (void (*)(uint64_t))type metadata accessor for PgQuery_SetToDefault);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SetToDefault?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_SetToDefault?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SetToDefault?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_SetToDefault?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_SetToDefault);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SetToDefault?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_SetToDefault);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #43 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  CurrentOfuint64_t Expr = type metadata accessor for PgQuery_CurrentOfExpr(0);
  uint64_t v5 = *(void *)(CurrentOfExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CurrentOfExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CurrentOfExpr;
  v24((char *)&v34 - v22, 1, 1, CurrentOfExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 42)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CurrentOfExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CurrentOfExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CurrentOfExpr and conformance PgQuery_CurrentOfExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_CurrentOfExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CurrentOfExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CurrentOfExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CurrentOfExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #44 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  NextValueuint64_t Expr = type metadata accessor for PgQuery_NextValueExpr(0);
  uint64_t v5 = *(void *)(NextValueExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](NextValueExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_NextValueExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = NextValueExpr;
  v24((char *)&v34 - v22, 1, 1, NextValueExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 43)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NextValueExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_NextValueExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_NextValueExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NextValueExpr and conformance PgQuery_NextValueExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_NextValueExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NextValueExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_NextValueExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NextValueExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_NextValueExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_NextValueExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NextValueExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_NextValueExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #45 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t InferenceElem = type metadata accessor for PgQuery_InferenceElem(0);
  uint64_t v5 = *(void *)(InferenceElem - 8);
  uint64_t v6 = MEMORY[0x1F4188790](InferenceElem);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_InferenceElem?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = InferenceElem;
  v24((char *)&v34 - v22, 1, 1, InferenceElem);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 44)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InferenceElem?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_InferenceElem);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_InferenceElem);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InferenceElem and conformance PgQuery_InferenceElem, (void (*)(uint64_t))type metadata accessor for PgQuery_InferenceElem);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InferenceElem?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_InferenceElem?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InferenceElem?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_InferenceElem?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_InferenceElem);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InferenceElem?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_InferenceElem);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #46 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t TargetEntry = type metadata accessor for PgQuery_TargetEntry(0);
  uint64_t v5 = *(void *)(TargetEntry - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TargetEntry);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TargetEntry?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TargetEntry;
  v24((char *)&v34 - v22, 1, 1, TargetEntry);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 45)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TargetEntry?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_TargetEntry);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_TargetEntry);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TargetEntry and conformance PgQuery_TargetEntry, (void (*)(uint64_t))type metadata accessor for PgQuery_TargetEntry);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TargetEntry?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_TargetEntry?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TargetEntry?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_TargetEntry?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_TargetEntry);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TargetEntry?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_TargetEntry);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #47 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RangeTblRef = type metadata accessor for PgQuery_RangeTblRef(0);
  uint64_t v5 = *(void *)(RangeTblRef - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RangeTblRef);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RangeTblRef?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RangeTblRef;
  v24((char *)&v34 - v22, 1, 1, RangeTblRef);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 46)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTblRef?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RangeTblRef);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RangeTblRef);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RangeTblRef and conformance PgQuery_RangeTblRef, (void (*)(uint64_t))type metadata accessor for PgQuery_RangeTblRef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTblRef?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RangeTblRef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTblRef?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RangeTblRef?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RangeTblRef);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RangeTblRef?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RangeTblRef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #48 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Joinuint64_t Expr = type metadata accessor for PgQuery_JoinExpr(0);
  uint64_t v5 = *(void *)(JoinExpr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](JoinExpr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_JoinExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = JoinExpr;
  v24((char *)&v34 - v22, 1, 1, JoinExpr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 47)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_JoinExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_JoinExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_JoinExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_JoinExpr and conformance PgQuery_JoinExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_JoinExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_JoinExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_JoinExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_JoinExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_JoinExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_JoinExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_JoinExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_JoinExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #49 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for PgQuery_FromExpr(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FromExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 48)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FromExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_FromExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_FromExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FromExpr and conformance PgQuery_FromExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_FromExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FromExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_FromExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_FromExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FromExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_FromExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #50 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for PgQuery_OnConflictExpr(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 49)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_OnConflictExpr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_OnConflictExpr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_OnConflictExpr and conformance PgQuery_OnConflictExpr, (void (*)(uint64_t))type metadata accessor for PgQuery_OnConflictExpr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_OnConflictExpr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_OnConflictExpr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_OnConflictExpr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #51 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t IntoClause = type metadata accessor for PgQuery_IntoClause(0);
  uint64_t v5 = *(void *)(IntoClause - 8);
  uint64_t v6 = MEMORY[0x1F4188790](IntoClause);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IntoClause?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = IntoClause;
  v24((char *)&v34 - v22, 1, 1, IntoClause);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 50)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IntoClause?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_IntoClause);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_IntoClause);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IntoClause and conformance PgQuery_IntoClause, (void (*)(uint64_t))type metadata accessor for PgQuery_IntoClause);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IntoClause?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_IntoClause?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_IntoClause);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IntoClause?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_IntoClause);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #52 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RawStmt = type metadata accessor for PgQuery_RawStmt(0);
  uint64_t v5 = *(void *)(RawStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RawStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RawStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RawStmt;
  v24((char *)&v34 - v22, 1, 1, RawStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 51)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RawStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RawStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RawStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RawStmt and conformance PgQuery_RawStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RawStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RawStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RawStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RawStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RawStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RawStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RawStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RawStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #53 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t Query = type metadata accessor for PgQuery_Query(0);
  uint64_t v5 = *(void *)(Query - 8);
  uint64_t v6 = MEMORY[0x1F4188790](Query);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Query?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = Query;
  v24((char *)&v34 - v22, 1, 1, Query);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 52)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Query?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_Query);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_Query);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_Query and conformance PgQuery_Query, (void (*)(uint64_t))type metadata accessor for PgQuery_Query);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Query?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_Query?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Query?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_Query?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_Query);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_Query?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_Query);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #54 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t InsertStmt = type metadata accessor for PgQuery_InsertStmt(0);
  uint64_t v5 = *(void *)(InsertStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](InsertStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_InsertStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = InsertStmt;
  v24((char *)&v34 - v22, 1, 1, InsertStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 53)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InsertStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_InsertStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_InsertStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_InsertStmt and conformance PgQuery_InsertStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_InsertStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InsertStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_InsertStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InsertStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_InsertStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_InsertStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_InsertStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_InsertStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #55 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for PgQuery_DeleteStmt(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DeleteStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 54)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DeleteStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DeleteStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DeleteStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeleteStmt and conformance PgQuery_DeleteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeleteStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DeleteStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DeleteStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DeleteStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DeleteStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DeleteStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DeleteStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DeleteStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #56 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t UpdateStmt = type metadata accessor for PgQuery_UpdateStmt(0);
  uint64_t v5 = *(void *)(UpdateStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](UpdateStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_UpdateStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = UpdateStmt;
  v24((char *)&v34 - v22, 1, 1, UpdateStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 55)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_UpdateStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_UpdateStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_UpdateStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UpdateStmt and conformance PgQuery_UpdateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UpdateStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_UpdateStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_UpdateStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_UpdateStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_UpdateStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_UpdateStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_UpdateStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_UpdateStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #57 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t SelectStmt = type metadata accessor for PgQuery_SelectStmt(0);
  uint64_t v5 = *(void *)(SelectStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SelectStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SelectStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SelectStmt;
  v24((char *)&v34 - v22, 1, 1, SelectStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 56)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_SelectStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_SelectStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SelectStmt and conformance PgQuery_SelectStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SelectStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_SelectStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SelectStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_SelectStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #58 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t AlterTableStmt = type metadata accessor for PgQuery_AlterTableStmt(0);
  uint64_t v5 = *(void *)(AlterTableStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterTableStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterTableStmt;
  v24((char *)&v34 - v22, 1, 1, AlterTableStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 57)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterTableStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterTableStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableStmt and conformance PgQuery_AlterTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterTableStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterTableStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #59 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterTableunint64_t Cmd = type metadata accessor for PgQuery_AlterTableCmd(0);
  uint64_t v5 = *(void *)(AlterTableCmd - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterTableCmd);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterTableCmd;
  v24((char *)&v34 - v22, 1, 1, AlterTableCmd);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 58)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterTableCmd);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterTableCmd);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableCmd and conformance PgQuery_AlterTableCmd, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableCmd);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterTableCmd);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableCmd?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterTableCmd);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #60 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t AlterDomainStmt = type metadata accessor for PgQuery_AlterDomainStmt(0);
  uint64_t v5 = *(void *)(AlterDomainStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterDomainStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterDomainStmt;
  v24((char *)&v34 - v22, 1, 1, AlterDomainStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 59)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterDomainStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterDomainStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDomainStmt and conformance PgQuery_AlterDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDomainStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterDomainStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDomainStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterDomainStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #61 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t SetOperationStmt = type metadata accessor for PgQuery_SetOperationStmt(0);
  uint64_t v5 = *(void *)(SetOperationStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SetOperationStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SetOperationStmt;
  v24((char *)&v34 - v22, 1, 1, SetOperationStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 60)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_SetOperationStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_SetOperationStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SetOperationStmt and conformance PgQuery_SetOperationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SetOperationStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_SetOperationStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SetOperationStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_SetOperationStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #62 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t GrantStmt = type metadata accessor for PgQuery_GrantStmt(0);
  uint64_t v5 = *(void *)(GrantStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](GrantStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = GrantStmt;
  v24((char *)&v34 - v22, 1, 1, GrantStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 61)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_GrantStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_GrantStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantStmt and conformance PgQuery_GrantStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_GrantStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GrantStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_GrantStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #63 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Grantunint64_t RoleStmt = type metadata accessor for PgQuery_GrantRoleStmt(0);
  uint64_t v5 = *(void *)(GrantRoleStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](GrantRoleStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = GrantRoleStmt;
  v24((char *)&v34 - v22, 1, 1, GrantRoleStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 62)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_GrantRoleStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_GrantRoleStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_GrantRoleStmt and conformance PgQuery_GrantRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_GrantRoleStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_GrantRoleStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_GrantRoleStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_GrantRoleStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #64 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t AlterDefaultPrivilegesStmt = type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt(0);
  uint64_t v5 = *(void *)(AlterDefaultPrivilegesStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterDefaultPrivilegesStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterDefaultPrivilegesStmt;
  v24((char *)&v34 - v22, 1, 1, AlterDefaultPrivilegesStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 63)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDefaultPrivilegesStmt and conformance PgQuery_AlterDefaultPrivilegesStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDefaultPrivilegesStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterDefaultPrivilegesStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #65 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t ClosePortalStmt = type metadata accessor for PgQuery_ClosePortalStmt(0);
  uint64_t v5 = *(void *)(ClosePortalStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ClosePortalStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ClosePortalStmt;
  v24((char *)&v34 - v22, 1, 1, ClosePortalStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 64)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ClosePortalStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ClosePortalStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClosePortalStmt and conformance PgQuery_ClosePortalStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClosePortalStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ClosePortalStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ClosePortalStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ClosePortalStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #66 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t ClusterStmt = type metadata accessor for PgQuery_ClusterStmt(0);
  uint64_t v5 = *(void *)(ClusterStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ClusterStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ClusterStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ClusterStmt;
  v24((char *)&v34 - v22, 1, 1, ClusterStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 65)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ClusterStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ClusterStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ClusterStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ClusterStmt and conformance PgQuery_ClusterStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ClusterStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ClusterStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ClusterStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ClusterStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ClusterStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ClusterStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ClusterStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ClusterStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #67 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t CopyStmt = type metadata accessor for PgQuery_CopyStmt(0);
  uint64_t v5 = *(void *)(CopyStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CopyStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CopyStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CopyStmt;
  v24((char *)&v34 - v22, 1, 1, CopyStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 66)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CopyStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CopyStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CopyStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CopyStmt and conformance PgQuery_CopyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CopyStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CopyStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CopyStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CopyStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CopyStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CopyStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CopyStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CopyStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #68 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t Stmt = type metadata accessor for PgQuery_CreateStmt(0);
  uint64_t v5 = *(void *)(Stmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](Stmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = Stmt;
  v24((char *)&v34 - v22, 1, 1, Stmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 67)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStmt and conformance PgQuery_CreateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #69 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Defineuint64_t Stmt = type metadata accessor for PgQuery_DefineStmt(0);
  uint64_t v5 = *(void *)(DefineStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DefineStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DefineStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DefineStmt;
  v24((char *)&v34 - v22, 1, 1, DefineStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 68)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DefineStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DefineStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DefineStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DefineStmt and conformance PgQuery_DefineStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DefineStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DefineStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DefineStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DefineStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DefineStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DefineStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DefineStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DefineStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #70 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Dropuint64_t Stmt = type metadata accessor for PgQuery_DropStmt(0);
  uint64_t v5 = *(void *)(DropStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DropStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DropStmt;
  v24((char *)&v34 - v22, 1, 1, DropStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 69)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DropStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DropStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropStmt and conformance PgQuery_DropStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DropStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DropStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DropStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DropStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #71 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Truncateuint64_t Stmt = type metadata accessor for PgQuery_TruncateStmt(0);
  uint64_t v5 = *(void *)(TruncateStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TruncateStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TruncateStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TruncateStmt;
  v24((char *)&v34 - v22, 1, 1, TruncateStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 70)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TruncateStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_TruncateStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_TruncateStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TruncateStmt and conformance PgQuery_TruncateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TruncateStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TruncateStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_TruncateStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TruncateStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_TruncateStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_TruncateStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TruncateStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_TruncateStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #72 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Commentuint64_t Stmt = type metadata accessor for PgQuery_CommentStmt(0);
  uint64_t v5 = *(void *)(CommentStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CommentStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CommentStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CommentStmt;
  v24((char *)&v34 - v22, 1, 1, CommentStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 71)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CommentStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CommentStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CommentStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CommentStmt and conformance PgQuery_CommentStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CommentStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CommentStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CommentStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CommentStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CommentStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CommentStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CommentStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CommentStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #73 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t Stmt = type metadata accessor for PgQuery_FetchStmt(0);
  uint64_t v5 = *(void *)(Stmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](Stmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FetchStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = Stmt;
  v24((char *)&v34 - v22, 1, 1, Stmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 72)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FetchStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_FetchStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_FetchStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FetchStmt and conformance PgQuery_FetchStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_FetchStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FetchStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_FetchStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FetchStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_FetchStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_FetchStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FetchStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_FetchStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #74 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Indexuint64_t Stmt = type metadata accessor for PgQuery_IndexStmt(0);
  uint64_t v5 = *(void *)(IndexStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](IndexStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_IndexStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = IndexStmt;
  v24((char *)&v34 - v22, 1, 1, IndexStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 73)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IndexStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_IndexStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_IndexStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_IndexStmt and conformance PgQuery_IndexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_IndexStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IndexStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_IndexStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IndexStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_IndexStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_IndexStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_IndexStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_IndexStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #75 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Functionuint64_t Stmt = type metadata accessor for PgQuery_CreateFunctionStmt(0);
  uint64_t v5 = *(void *)(FunctionStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](FunctionStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = FunctionStmt;
  v24((char *)&v34 - v22, 1, 1, FunctionStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 74)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateFunctionStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateFunctionStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFunctionStmt and conformance PgQuery_CreateFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFunctionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateFunctionStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateFunctionStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateFunctionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #76 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterFunctionuint64_t Stmt = type metadata accessor for PgQuery_AlterFunctionStmt(0);
  uint64_t v5 = *(void *)(AlterFunctionStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterFunctionStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterFunctionStmt;
  v24((char *)&v34 - v22, 1, 1, AlterFunctionStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 75)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterFunctionStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterFunctionStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFunctionStmt and conformance PgQuery_AlterFunctionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFunctionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterFunctionStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterFunctionStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterFunctionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #77 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Douint64_t Stmt = type metadata accessor for PgQuery_DoStmt(0);
  uint64_t v5 = *(void *)(DoStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DoStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DoStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DoStmt;
  v24((char *)&v34 - v22, 1, 1, DoStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 76)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DoStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DoStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DoStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DoStmt and conformance PgQuery_DoStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DoStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DoStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DoStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DoStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DoStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DoStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DoStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DoStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #78 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Renameuint64_t Stmt = type metadata accessor for PgQuery_RenameStmt(0);
  uint64_t v5 = *(void *)(RenameStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RenameStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RenameStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RenameStmt;
  v24((char *)&v34 - v22, 1, 1, RenameStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 77)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RenameStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RenameStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RenameStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RenameStmt and conformance PgQuery_RenameStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RenameStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RenameStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RenameStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RenameStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RenameStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RenameStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RenameStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RenameStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #79 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Ruleuint64_t Stmt = type metadata accessor for PgQuery_RuleStmt(0);
  uint64_t v5 = *(void *)(RuleStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RuleStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RuleStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RuleStmt;
  v24((char *)&v34 - v22, 1, 1, RuleStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 78)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RuleStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RuleStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RuleStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RuleStmt and conformance PgQuery_RuleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RuleStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RuleStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RuleStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RuleStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RuleStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RuleStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RuleStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RuleStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #80 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Notifyuint64_t Stmt = type metadata accessor for PgQuery_NotifyStmt(0);
  uint64_t v5 = *(void *)(NotifyStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](NotifyStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_NotifyStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = NotifyStmt;
  v24((char *)&v34 - v22, 1, 1, NotifyStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 79)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NotifyStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_NotifyStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_NotifyStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_NotifyStmt and conformance PgQuery_NotifyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_NotifyStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NotifyStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_NotifyStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NotifyStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_NotifyStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_NotifyStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_NotifyStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_NotifyStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #81 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Listenuint64_t Stmt = type metadata accessor for PgQuery_ListenStmt(0);
  uint64_t v5 = *(void *)(ListenStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ListenStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ListenStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ListenStmt;
  v24((char *)&v34 - v22, 1, 1, ListenStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 80)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ListenStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ListenStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ListenStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ListenStmt and conformance PgQuery_ListenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ListenStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ListenStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ListenStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ListenStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ListenStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ListenStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ListenStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ListenStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #82 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Unlistenuint64_t Stmt = type metadata accessor for PgQuery_UnlistenStmt(0);
  uint64_t v5 = *(void *)(UnlistenStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](UnlistenStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = UnlistenStmt;
  v24((char *)&v34 - v22, 1, 1, UnlistenStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 81)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_UnlistenStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_UnlistenStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_UnlistenStmt and conformance PgQuery_UnlistenStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_UnlistenStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_UnlistenStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_UnlistenStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_UnlistenStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #83 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t TransactionStmt = type metadata accessor for PgQuery_TransactionStmt(0);
  uint64_t v5 = *(void *)(TransactionStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TransactionStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_TransactionStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TransactionStmt;
  v24((char *)&v34 - v22, 1, 1, TransactionStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 82)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TransactionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_TransactionStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_TransactionStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_TransactionStmt and conformance PgQuery_TransactionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_TransactionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TransactionStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_TransactionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TransactionStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_TransactionStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_TransactionStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_TransactionStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_TransactionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #84 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Viewuint64_t Stmt = type metadata accessor for PgQuery_ViewStmt(0);
  uint64_t v5 = *(void *)(ViewStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ViewStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ViewStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ViewStmt;
  v24((char *)&v34 - v22, 1, 1, ViewStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 83)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ViewStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ViewStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ViewStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ViewStmt and conformance PgQuery_ViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ViewStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ViewStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ViewStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ViewStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ViewStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ViewStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ViewStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ViewStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #85 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Loaduint64_t Stmt = type metadata accessor for PgQuery_LoadStmt(0);
  uint64_t v5 = *(void *)(LoadStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](LoadStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_LoadStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = LoadStmt;
  v24((char *)&v34 - v22, 1, 1, LoadStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 84)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_LoadStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_LoadStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_LoadStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LoadStmt and conformance PgQuery_LoadStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LoadStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_LoadStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_LoadStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_LoadStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_LoadStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_LoadStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_LoadStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_LoadStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #86 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Domainuint64_t Stmt = type metadata accessor for PgQuery_CreateDomainStmt(0);
  uint64_t v5 = *(void *)(DomainStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DomainStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DomainStmt;
  v24((char *)&v34 - v22, 1, 1, DomainStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 85)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateDomainStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateDomainStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateDomainStmt and conformance PgQuery_CreateDomainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateDomainStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateDomainStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateDomainStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateDomainStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #87 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Createdbuint64_t Stmt = type metadata accessor for PgQuery_CreatedbStmt(0);
  uint64_t v5 = *(void *)(CreatedbStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CreatedbStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CreatedbStmt;
  v24((char *)&v34 - v22, 1, 1, CreatedbStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 86)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreatedbStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreatedbStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatedbStmt and conformance PgQuery_CreatedbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatedbStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreatedbStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatedbStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreatedbStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #88 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Dropdbuint64_t Stmt = type metadata accessor for PgQuery_DropdbStmt(0);
  uint64_t v5 = *(void *)(DropdbStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DropdbStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropdbStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DropdbStmt;
  v24((char *)&v34 - v22, 1, 1, DropdbStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 87)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropdbStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DropdbStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DropdbStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropdbStmt and conformance PgQuery_DropdbStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropdbStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropdbStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DropdbStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropdbStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DropdbStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DropdbStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropdbStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DropdbStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #89 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Vacuumuint64_t Stmt = type metadata accessor for PgQuery_VacuumStmt(0);
  uint64_t v5 = *(void *)(VacuumStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](VacuumStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VacuumStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = VacuumStmt;
  v24((char *)&v34 - v22, 1, 1, VacuumStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 88)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VacuumStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_VacuumStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_VacuumStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VacuumStmt and conformance PgQuery_VacuumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VacuumStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VacuumStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_VacuumStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VacuumStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_VacuumStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_VacuumStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VacuumStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_VacuumStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #90 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Explainuint64_t Stmt = type metadata accessor for PgQuery_ExplainStmt(0);
  uint64_t v5 = *(void *)(ExplainStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ExplainStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ExplainStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ExplainStmt;
  v24((char *)&v34 - v22, 1, 1, ExplainStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 89)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ExplainStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ExplainStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ExplainStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExplainStmt and conformance PgQuery_ExplainStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExplainStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ExplainStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ExplainStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ExplainStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ExplainStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ExplainStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ExplainStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ExplainStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #91 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  TableAsuint64_t Stmt = type metadata accessor for PgQuery_CreateTableAsStmt(0);
  uint64_t v5 = *(void *)(TableAsStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TableAsStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TableAsStmt;
  v24((char *)&v34 - v22, 1, 1, TableAsStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 90)
    {
      outlined destroy of AnyValue?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateTableAsStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateTableAsStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableAsStmt and conformance PgQuery_CreateTableAsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableAsStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, (uint64_t *)&demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
    return outlined destroy of AnyValue?(v30, (uint64_t *)&demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateTableAsStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for PgQuery_CreateTableAsStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateTableAsStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #92 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Sequint64_t Stmt = type metadata accessor for PgQuery_CreateSeqStmt(0);
  uint64_t v5 = *(void *)(SeqStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SeqStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SeqStmt;
  v24((char *)&v34 - v22, 1, 1, SeqStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 91)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateSeqStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateSeqStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSeqStmt and conformance PgQuery_CreateSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSeqStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateSeqStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateSeqStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateSeqStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #93 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterSequint64_t Stmt = type metadata accessor for PgQuery_AlterSeqStmt(0);
  uint64_t v5 = *(void *)(AlterSeqStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterSeqStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterSeqStmt;
  v24((char *)&v34 - v22, 1, 1, AlterSeqStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 92)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterSeqStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterSeqStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSeqStmt and conformance PgQuery_AlterSeqStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSeqStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterSeqStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterSeqStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterSeqStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #94 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  VariableSetuint64_t Stmt = type metadata accessor for PgQuery_VariableSetStmt(0);
  uint64_t v5 = *(void *)(VariableSetStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](VariableSetStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = VariableSetStmt;
  v24((char *)&v34 - v22, 1, 1, VariableSetStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 93)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_VariableSetStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_VariableSetStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableSetStmt and conformance PgQuery_VariableSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableSetStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_VariableSetStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableSetStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_VariableSetStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #95 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  VariableShowuint64_t Stmt = type metadata accessor for PgQuery_VariableShowStmt(0);
  uint64_t v5 = *(void *)(VariableShowStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](VariableShowStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = VariableShowStmt;
  v24((char *)&v34 - v22, 1, 1, VariableShowStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 94)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_VariableShowStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_VariableShowStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_VariableShowStmt and conformance PgQuery_VariableShowStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_VariableShowStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_VariableShowStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_VariableShowStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_VariableShowStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #96 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Discarduint64_t Stmt = type metadata accessor for PgQuery_DiscardStmt(0);
  uint64_t v5 = *(void *)(DiscardStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DiscardStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DiscardStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DiscardStmt;
  v24((char *)&v34 - v22, 1, 1, DiscardStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 95)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DiscardStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DiscardStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DiscardStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DiscardStmt and conformance PgQuery_DiscardStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DiscardStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DiscardStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DiscardStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DiscardStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DiscardStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DiscardStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DiscardStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DiscardStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #97 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Triguint64_t Stmt = type metadata accessor for PgQuery_CreateTrigStmt(0);
  uint64_t v5 = *(void *)(TrigStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TrigStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TrigStmt;
  v24((char *)&v34 - v22, 1, 1, TrigStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 96)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateTrigStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateTrigStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTrigStmt and conformance PgQuery_CreateTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTrigStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateTrigStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateTrigStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateTrigStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #98 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  PLanguint64_t Stmt = type metadata accessor for PgQuery_CreatePLangStmt(0);
  uint64_t v5 = *(void *)(PLangStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](PLangStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = PLangStmt;
  v24((char *)&v34 - v22, 1, 1, PLangStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 97)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreatePLangStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreatePLangStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePLangStmt and conformance PgQuery_CreatePLangStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePLangStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreatePLangStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatePLangStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreatePLangStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #99 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t RoleStmt = type metadata accessor for PgQuery_CreateRoleStmt(0);
  uint64_t v5 = *(void *)(RoleStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RoleStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RoleStmt;
  v24((char *)&v34 - v22, 1, 1, RoleStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 98)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateRoleStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateRoleStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRoleStmt and conformance PgQuery_CreateRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRoleStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateRoleStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateRoleStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateRoleStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #100 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Alteruint64_t RoleStmt = type metadata accessor for PgQuery_AlterRoleStmt(0);
  uint64_t v5 = *(void *)(AlterRoleStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterRoleStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterRoleStmt;
  v24((char *)&v34 - v22, 1, 1, AlterRoleStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 99)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterRoleStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterRoleStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleStmt and conformance PgQuery_AlterRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterRoleStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterRoleStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterRoleStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #101 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Dropuint64_t RoleStmt = type metadata accessor for PgQuery_DropRoleStmt(0);
  uint64_t v5 = *(void *)(DropRoleStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DropRoleStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DropRoleStmt;
  v24((char *)&v34 - v22, 1, 1, DropRoleStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 100)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DropRoleStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DropRoleStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropRoleStmt and conformance PgQuery_DropRoleStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropRoleStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DropRoleStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropRoleStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DropRoleStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #102 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Lockuint64_t Stmt = type metadata accessor for PgQuery_LockStmt(0);
  uint64_t v5 = *(void *)(LockStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](LockStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_LockStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = LockStmt;
  v24((char *)&v34 - v22, 1, 1, LockStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 101)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_LockStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_LockStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_LockStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_LockStmt and conformance PgQuery_LockStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_LockStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_LockStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_LockStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_LockStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_LockStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_LockStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_LockStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_LockStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #103 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  ConstraintsSetuint64_t Stmt = type metadata accessor for PgQuery_ConstraintsSetStmt(0);
  uint64_t v5 = *(void *)(ConstraintsSetStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ConstraintsSetStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ConstraintsSetStmt;
  v24((char *)&v34 - v22, 1, 1, ConstraintsSetStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 102)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ConstraintsSetStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ConstraintsSetStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ConstraintsSetStmt and conformance PgQuery_ConstraintsSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ConstraintsSetStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ConstraintsSetStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ConstraintsSetStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ConstraintsSetStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #104 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Reindexuint64_t Stmt = type metadata accessor for PgQuery_ReindexStmt(0);
  uint64_t v5 = *(void *)(ReindexStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ReindexStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ReindexStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ReindexStmt;
  v24((char *)&v34 - v22, 1, 1, ReindexStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 103)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ReindexStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ReindexStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ReindexStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReindexStmt and conformance PgQuery_ReindexStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReindexStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ReindexStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ReindexStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ReindexStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ReindexStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ReindexStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ReindexStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ReindexStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #105 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for PgQuery_CheckPointStmt(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 104)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CheckPointStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CheckPointStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CheckPointStmt and conformance PgQuery_CheckPointStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CheckPointStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CheckPointStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CheckPointStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CheckPointStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #106 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Schemauint64_t Stmt = type metadata accessor for PgQuery_CreateSchemaStmt(0);
  uint64_t v5 = *(void *)(SchemaStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SchemaStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SchemaStmt;
  v24((char *)&v34 - v22, 1, 1, SchemaStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 105)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateSchemaStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateSchemaStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSchemaStmt and conformance PgQuery_CreateSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSchemaStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateSchemaStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateSchemaStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateSchemaStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #107 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterDatabaseuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseStmt(0);
  uint64_t v5 = *(void *)(AlterDatabaseStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterDatabaseStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterDatabaseStmt;
  v24((char *)&v34 - v22, 1, 1, AlterDatabaseStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 106)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterDatabaseStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterDatabaseStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseStmt and conformance PgQuery_AlterDatabaseStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterDatabaseStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDatabaseStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterDatabaseStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #108 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterDatabaseSetuint64_t Stmt = type metadata accessor for PgQuery_AlterDatabaseSetStmt(0);
  uint64_t v5 = *(void *)(AlterDatabaseSetStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterDatabaseSetStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterDatabaseSetStmt;
  v24((char *)&v34 - v22, 1, 1, AlterDatabaseSetStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 107)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterDatabaseSetStmt and conformance PgQuery_AlterDatabaseSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterDatabaseSetStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterDatabaseSetStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterDatabaseSetStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #109 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterRoleSetuint64_t Stmt = type metadata accessor for PgQuery_AlterRoleSetStmt(0);
  uint64_t v5 = *(void *)(AlterRoleSetStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterRoleSetStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterRoleSetStmt;
  v24((char *)&v34 - v22, 1, 1, AlterRoleSetStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 108)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterRoleSetStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterRoleSetStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterRoleSetStmt and conformance PgQuery_AlterRoleSetStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterRoleSetStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterRoleSetStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterRoleSetStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterRoleSetStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #110 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Conversionuint64_t Stmt = type metadata accessor for PgQuery_CreateConversionStmt(0);
  uint64_t v5 = *(void *)(ConversionStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ConversionStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ConversionStmt;
  v24((char *)&v34 - v22, 1, 1, ConversionStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 109)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateConversionStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateConversionStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateConversionStmt and conformance PgQuery_CreateConversionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateConversionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateConversionStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateConversionStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateConversionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #111 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Castuint64_t Stmt = type metadata accessor for PgQuery_CreateCastStmt(0);
  uint64_t v5 = *(void *)(CastStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CastStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CastStmt;
  v24((char *)&v34 - v22, 1, 1, CastStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 110)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateCastStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateCastStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateCastStmt and conformance PgQuery_CreateCastStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateCastStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateCastStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateCastStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateCastStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #112 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  OpClassuint64_t Stmt = type metadata accessor for PgQuery_CreateOpClassStmt(0);
  uint64_t v5 = *(void *)(OpClassStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](OpClassStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = OpClassStmt;
  v24((char *)&v34 - v22, 1, 1, OpClassStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 111)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateOpClassStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateOpClassStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpClassStmt and conformance PgQuery_CreateOpClassStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpClassStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateOpClassStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateOpClassStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateOpClassStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #113 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  OpFamilyuint64_t Stmt = type metadata accessor for PgQuery_CreateOpFamilyStmt(0);
  uint64_t v5 = *(void *)(OpFamilyStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](OpFamilyStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = OpFamilyStmt;
  v24((char *)&v34 - v22, 1, 1, OpFamilyStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 112)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateOpFamilyStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateOpFamilyStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateOpFamilyStmt and conformance PgQuery_CreateOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateOpFamilyStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateOpFamilyStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateOpFamilyStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateOpFamilyStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #114 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterOpFamilyuint64_t Stmt = type metadata accessor for PgQuery_AlterOpFamilyStmt(0);
  uint64_t v5 = *(void *)(AlterOpFamilyStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterOpFamilyStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterOpFamilyStmt;
  v24((char *)&v34 - v22, 1, 1, AlterOpFamilyStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 113)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterOpFamilyStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterOpFamilyStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOpFamilyStmt and conformance PgQuery_AlterOpFamilyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOpFamilyStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterOpFamilyStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterOpFamilyStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterOpFamilyStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #115 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Prepareuint64_t Stmt = type metadata accessor for PgQuery_PrepareStmt(0);
  uint64_t v5 = *(void *)(PrepareStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](PrepareStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_PrepareStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = PrepareStmt;
  v24((char *)&v34 - v22, 1, 1, PrepareStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 114)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PrepareStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_PrepareStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_PrepareStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_PrepareStmt and conformance PgQuery_PrepareStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_PrepareStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PrepareStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_PrepareStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PrepareStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_PrepareStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_PrepareStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_PrepareStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_PrepareStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #116 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Executeuint64_t Stmt = type metadata accessor for PgQuery_ExecuteStmt(0);
  uint64_t v5 = *(void *)(ExecuteStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ExecuteStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ExecuteStmt;
  v24((char *)&v34 - v22, 1, 1, ExecuteStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 115)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ExecuteStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ExecuteStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ExecuteStmt and conformance PgQuery_ExecuteStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ExecuteStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ExecuteStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ExecuteStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ExecuteStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #117 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Deallocateuint64_t Stmt = type metadata accessor for PgQuery_DeallocateStmt(0);
  uint64_t v5 = *(void *)(DeallocateStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DeallocateStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DeallocateStmt;
  v24((char *)&v34 - v22, 1, 1, DeallocateStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 116)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DeallocateStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DeallocateStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeallocateStmt and conformance PgQuery_DeallocateStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeallocateStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DeallocateStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DeallocateStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DeallocateStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #118 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  DeclareCursoruint64_t Stmt = type metadata accessor for PgQuery_DeclareCursorStmt(0);
  uint64_t v5 = *(void *)(DeclareCursorStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DeclareCursorStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DeclareCursorStmt;
  v24((char *)&v34 - v22, 1, 1, DeclareCursorStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 117)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DeclareCursorStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DeclareCursorStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DeclareCursorStmt and conformance PgQuery_DeclareCursorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DeclareCursorStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DeclareCursorStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DeclareCursorStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DeclareCursorStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #119 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  TableSpaceuint64_t Stmt = type metadata accessor for PgQuery_CreateTableSpaceStmt(0);
  uint64_t v5 = *(void *)(TableSpaceStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TableSpaceStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TableSpaceStmt;
  v24((char *)&v34 - v22, 1, 1, TableSpaceStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 118)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateTableSpaceStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateTableSpaceStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTableSpaceStmt and conformance PgQuery_CreateTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTableSpaceStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateTableSpaceStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateTableSpaceStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateTableSpaceStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #120 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  DropTableSpaceuint64_t Stmt = type metadata accessor for PgQuery_DropTableSpaceStmt(0);
  uint64_t v5 = *(void *)(DropTableSpaceStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DropTableSpaceStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DropTableSpaceStmt;
  v24((char *)&v34 - v22, 1, 1, DropTableSpaceStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 119)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DropTableSpaceStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DropTableSpaceStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropTableSpaceStmt and conformance PgQuery_DropTableSpaceStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropTableSpaceStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DropTableSpaceStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropTableSpaceStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DropTableSpaceStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #121 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterObjectDependsuint64_t Stmt = type metadata accessor for PgQuery_AlterObjectDependsStmt(0);
  uint64_t v5 = *(void *)(AlterObjectDependsStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterObjectDependsStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterObjectDependsStmt;
  v24((char *)&v34 - v22, 1, 1, AlterObjectDependsStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 120)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterObjectDependsStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterObjectDependsStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectDependsStmt and conformance PgQuery_AlterObjectDependsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectDependsStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterObjectDependsStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterObjectDependsStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterObjectDependsStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #122 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterObjectSchemauint64_t Stmt = type metadata accessor for PgQuery_AlterObjectSchemaStmt(0);
  uint64_t v5 = *(void *)(AlterObjectSchemaStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterObjectSchemaStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterObjectSchemaStmt;
  v24((char *)&v34 - v22, 1, 1, AlterObjectSchemaStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 121)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterObjectSchemaStmt and conformance PgQuery_AlterObjectSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterObjectSchemaStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterObjectSchemaStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterObjectSchemaStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #123 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterOwneruint64_t Stmt = type metadata accessor for PgQuery_AlterOwnerStmt(0);
  uint64_t v5 = *(void *)(AlterOwnerStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterOwnerStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterOwnerStmt;
  v24((char *)&v34 - v22, 1, 1, AlterOwnerStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 122)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterOwnerStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterOwnerStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOwnerStmt and conformance PgQuery_AlterOwnerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOwnerStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterOwnerStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterOwnerStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterOwnerStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #124 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterOperatoruint64_t Stmt = type metadata accessor for PgQuery_AlterOperatorStmt(0);
  uint64_t v5 = *(void *)(AlterOperatorStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterOperatorStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterOperatorStmt;
  v24((char *)&v34 - v22, 1, 1, AlterOperatorStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 123)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterOperatorStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterOperatorStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterOperatorStmt and conformance PgQuery_AlterOperatorStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterOperatorStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterOperatorStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterOperatorStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterOperatorStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #125 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterTypeuint64_t Stmt = type metadata accessor for PgQuery_AlterTypeStmt(0);
  uint64_t v5 = *(void *)(AlterTypeStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterTypeStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterTypeStmt;
  v24((char *)&v34 - v22, 1, 1, AlterTypeStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 124)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterTypeStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterTypeStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTypeStmt and conformance PgQuery_AlterTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTypeStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterTypeStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTypeStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterTypeStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #126 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  DropOwneduint64_t Stmt = type metadata accessor for PgQuery_DropOwnedStmt(0);
  uint64_t v5 = *(void *)(DropOwnedStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DropOwnedStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DropOwnedStmt;
  v24((char *)&v34 - v22, 1, 1, DropOwnedStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 125)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DropOwnedStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DropOwnedStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropOwnedStmt and conformance PgQuery_DropOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropOwnedStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DropOwnedStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropOwnedStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DropOwnedStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #127 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  ReassignOwneduint64_t Stmt = type metadata accessor for PgQuery_ReassignOwnedStmt(0);
  uint64_t v5 = *(void *)(ReassignOwnedStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ReassignOwnedStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ReassignOwnedStmt;
  v24((char *)&v34 - v22, 1, 1, ReassignOwnedStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 126)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ReassignOwnedStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ReassignOwnedStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReassignOwnedStmt and conformance PgQuery_ReassignOwnedStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReassignOwnedStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ReassignOwnedStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ReassignOwnedStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ReassignOwnedStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #128 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  CompositeTypeuint64_t Stmt = type metadata accessor for PgQuery_CompositeTypeStmt(0);
  uint64_t v5 = *(void *)(CompositeTypeStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](CompositeTypeStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = CompositeTypeStmt;
  v24((char *)&v34 - v22, 1, 1, CompositeTypeStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 127)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CompositeTypeStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CompositeTypeStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CompositeTypeStmt and conformance PgQuery_CompositeTypeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CompositeTypeStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CompositeTypeStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CompositeTypeStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CompositeTypeStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #129 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Enumuint64_t Stmt = type metadata accessor for PgQuery_CreateEnumStmt(0);
  uint64_t v5 = *(void *)(EnumStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](EnumStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = EnumStmt;
  v24((char *)&v34 - v22, 1, 1, EnumStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 128)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateEnumStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateEnumStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEnumStmt and conformance PgQuery_CreateEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEnumStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateEnumStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateEnumStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateEnumStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #130 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Rangeuint64_t Stmt = type metadata accessor for PgQuery_CreateRangeStmt(0);
  uint64_t v5 = *(void *)(RangeStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RangeStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RangeStmt;
  v24((char *)&v34 - v22, 1, 1, RangeStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 129)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateRangeStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateRangeStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateRangeStmt and conformance PgQuery_CreateRangeStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateRangeStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateRangeStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateRangeStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateRangeStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #131 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterEnumuint64_t Stmt = type metadata accessor for PgQuery_AlterEnumStmt(0);
  uint64_t v5 = *(void *)(AlterEnumStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterEnumStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterEnumStmt;
  v24((char *)&v34 - v22, 1, 1, AlterEnumStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 130)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterEnumStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterEnumStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEnumStmt and conformance PgQuery_AlterEnumStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEnumStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterEnumStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterEnumStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterEnumStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #132 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterTSDictionaryuint64_t Stmt = type metadata accessor for PgQuery_AlterTSDictionaryStmt(0);
  uint64_t v5 = *(void *)(AlterTSDictionaryStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterTSDictionaryStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterTSDictionaryStmt;
  v24((char *)&v34 - v22, 1, 1, AlterTSDictionaryStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 131)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSDictionaryStmt and conformance PgQuery_AlterTSDictionaryStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSDictionaryStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTSDictionaryStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterTSDictionaryStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #133 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterTSConfigurationuint64_t Stmt = type metadata accessor for PgQuery_AlterTSConfigurationStmt(0);
  uint64_t v5 = *(void *)(AlterTSConfigurationStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterTSConfigurationStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterTSConfigurationStmt;
  v24((char *)&v34 - v22, 1, 1, AlterTSConfigurationStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 132)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTSConfigurationStmt and conformance PgQuery_AlterTSConfigurationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTSConfigurationStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTSConfigurationStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterTSConfigurationStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #134 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Fdwuint64_t Stmt = type metadata accessor for PgQuery_CreateFdwStmt(0);
  uint64_t v5 = *(void *)(FdwStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](FdwStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = FdwStmt;
  v24((char *)&v34 - v22, 1, 1, FdwStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 133)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateFdwStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateFdwStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateFdwStmt and conformance PgQuery_CreateFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateFdwStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateFdwStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateFdwStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateFdwStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #135 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterFdwuint64_t Stmt = type metadata accessor for PgQuery_AlterFdwStmt(0);
  uint64_t v5 = *(void *)(AlterFdwStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterFdwStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterFdwStmt;
  v24((char *)&v34 - v22, 1, 1, AlterFdwStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 134)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterFdwStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterFdwStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterFdwStmt and conformance PgQuery_AlterFdwStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterFdwStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterFdwStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterFdwStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterFdwStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #136 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  ForeignServeruint64_t Stmt = type metadata accessor for PgQuery_CreateForeignServerStmt(0);
  uint64_t v5 = *(void *)(ForeignServerStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ForeignServerStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ForeignServerStmt;
  v24((char *)&v34 - v22, 1, 1, ForeignServerStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 135)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateForeignServerStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateForeignServerStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignServerStmt and conformance PgQuery_CreateForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignServerStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateForeignServerStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateForeignServerStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateForeignServerStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #137 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterForeignServeruint64_t Stmt = type metadata accessor for PgQuery_AlterForeignServerStmt(0);
  uint64_t v5 = *(void *)(AlterForeignServerStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterForeignServerStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterForeignServerStmt;
  v24((char *)&v34 - v22, 1, 1, AlterForeignServerStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 136)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterForeignServerStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterForeignServerStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterForeignServerStmt and conformance PgQuery_AlterForeignServerStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterForeignServerStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterForeignServerStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterForeignServerStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterForeignServerStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #138 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  UserMappinguint64_t Stmt = type metadata accessor for PgQuery_CreateUserMappingStmt(0);
  uint64_t v5 = *(void *)(UserMappingStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](UserMappingStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = UserMappingStmt;
  v24((char *)&v34 - v22, 1, 1, UserMappingStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 137)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateUserMappingStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateUserMappingStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateUserMappingStmt and conformance PgQuery_CreateUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateUserMappingStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateUserMappingStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateUserMappingStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateUserMappingStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #139 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterUserMappinguint64_t Stmt = type metadata accessor for PgQuery_AlterUserMappingStmt(0);
  uint64_t v5 = *(void *)(AlterUserMappingStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterUserMappingStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterUserMappingStmt;
  v24((char *)&v34 - v22, 1, 1, AlterUserMappingStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 138)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterUserMappingStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterUserMappingStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterUserMappingStmt and conformance PgQuery_AlterUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterUserMappingStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterUserMappingStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterUserMappingStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterUserMappingStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #140 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  DropUserMappinguint64_t Stmt = type metadata accessor for PgQuery_DropUserMappingStmt(0);
  uint64_t v5 = *(void *)(DropUserMappingStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DropUserMappingStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DropUserMappingStmt;
  v24((char *)&v34 - v22, 1, 1, DropUserMappingStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 139)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DropUserMappingStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DropUserMappingStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropUserMappingStmt and conformance PgQuery_DropUserMappingStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropUserMappingStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DropUserMappingStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropUserMappingStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DropUserMappingStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #141 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterTableSpaceOptionsuint64_t Stmt = type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt(0);
  uint64_t v5 = *(void *)(AlterTableSpaceOptionsStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterTableSpaceOptionsStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterTableSpaceOptionsStmt;
  v24((char *)&v34 - v22, 1, 1, AlterTableSpaceOptionsStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 140)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableSpaceOptionsStmt and conformance PgQuery_AlterTableSpaceOptionsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableSpaceOptionsStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterTableSpaceOptionsStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #142 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterTableMoveAlluint64_t Stmt = type metadata accessor for PgQuery_AlterTableMoveAllStmt(0);
  uint64_t v5 = *(void *)(AlterTableMoveAllStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterTableMoveAllStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterTableMoveAllStmt;
  v24((char *)&v34 - v22, 1, 1, AlterTableMoveAllStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 141)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterTableMoveAllStmt and conformance PgQuery_AlterTableMoveAllStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterTableMoveAllStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterTableMoveAllStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterTableMoveAllStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #143 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  SecLabeluint64_t Stmt = type metadata accessor for PgQuery_SecLabelStmt(0);
  uint64_t v5 = *(void *)(SecLabelStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SecLabelStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SecLabelStmt;
  v24((char *)&v34 - v22, 1, 1, SecLabelStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 142)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_SecLabelStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_SecLabelStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_SecLabelStmt and conformance PgQuery_SecLabelStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_SecLabelStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_SecLabelStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_SecLabelStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_SecLabelStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #144 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  ForeignTableuint64_t Stmt = type metadata accessor for PgQuery_CreateForeignTableStmt(0);
  uint64_t v5 = *(void *)(ForeignTableStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ForeignTableStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ForeignTableStmt;
  v24((char *)&v34 - v22, 1, 1, ForeignTableStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 143)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateForeignTableStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateForeignTableStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateForeignTableStmt and conformance PgQuery_CreateForeignTableStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateForeignTableStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateForeignTableStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateForeignTableStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateForeignTableStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #145 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  ImportForeignSchemauint64_t Stmt = type metadata accessor for PgQuery_ImportForeignSchemaStmt(0);
  uint64_t v5 = *(void *)(ImportForeignSchemaStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ImportForeignSchemaStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ImportForeignSchemaStmt;
  v24((char *)&v34 - v22, 1, 1, ImportForeignSchemaStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 144)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ImportForeignSchemaStmt and conformance PgQuery_ImportForeignSchemaStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ImportForeignSchemaStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ImportForeignSchemaStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ImportForeignSchemaStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #146 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Extensionuint64_t Stmt = type metadata accessor for PgQuery_CreateExtensionStmt(0);
  uint64_t v5 = *(void *)(ExtensionStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ExtensionStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ExtensionStmt;
  v24((char *)&v34 - v22, 1, 1, ExtensionStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 145)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateExtensionStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateExtensionStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateExtensionStmt and conformance PgQuery_CreateExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateExtensionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateExtensionStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateExtensionStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateExtensionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #147 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterExtensionuint64_t Stmt = type metadata accessor for PgQuery_AlterExtensionStmt(0);
  uint64_t v5 = *(void *)(AlterExtensionStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterExtensionStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterExtensionStmt;
  v24((char *)&v34 - v22, 1, 1, AlterExtensionStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 146)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterExtensionStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterExtensionStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionStmt and conformance PgQuery_AlterExtensionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterExtensionStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterExtensionStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterExtensionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #148 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterExtensionContentsuint64_t Stmt = type metadata accessor for PgQuery_AlterExtensionContentsStmt(0);
  uint64_t v5 = *(void *)(AlterExtensionContentsStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterExtensionContentsStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterExtensionContentsStmt;
  v24((char *)&v34 - v22, 1, 1, AlterExtensionContentsStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 147)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterExtensionContentsStmt and conformance PgQuery_AlterExtensionContentsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterExtensionContentsStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterExtensionContentsStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterExtensionContentsStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #149 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  EventTriguint64_t Stmt = type metadata accessor for PgQuery_CreateEventTrigStmt(0);
  uint64_t v5 = *(void *)(EventTrigStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](EventTrigStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = EventTrigStmt;
  v24((char *)&v34 - v22, 1, 1, EventTrigStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 148)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateEventTrigStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateEventTrigStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateEventTrigStmt and conformance PgQuery_CreateEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateEventTrigStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateEventTrigStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateEventTrigStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateEventTrigStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #150 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterEventTriguint64_t Stmt = type metadata accessor for PgQuery_AlterEventTrigStmt(0);
  uint64_t v5 = *(void *)(AlterEventTrigStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterEventTrigStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterEventTrigStmt;
  v24((char *)&v34 - v22, 1, 1, AlterEventTrigStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 149)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterEventTrigStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterEventTrigStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterEventTrigStmt and conformance PgQuery_AlterEventTrigStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterEventTrigStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterEventTrigStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterEventTrigStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterEventTrigStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #151 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  RefreshMatViewuint64_t Stmt = type metadata accessor for PgQuery_RefreshMatViewStmt(0);
  uint64_t v5 = *(void *)(RefreshMatViewStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](RefreshMatViewStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = RefreshMatViewStmt;
  v24((char *)&v34 - v22, 1, 1, RefreshMatViewStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 150)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_RefreshMatViewStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_RefreshMatViewStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_RefreshMatViewStmt and conformance PgQuery_RefreshMatViewStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_RefreshMatViewStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_RefreshMatViewStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_RefreshMatViewStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_RefreshMatViewStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #152 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  ReplicaIdentityuint64_t Stmt = type metadata accessor for PgQuery_ReplicaIdentityStmt(0);
  uint64_t v5 = *(void *)(ReplicaIdentityStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ReplicaIdentityStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ReplicaIdentityStmt;
  v24((char *)&v34 - v22, 1, 1, ReplicaIdentityStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 151)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ReplicaIdentityStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ReplicaIdentityStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ReplicaIdentityStmt and conformance PgQuery_ReplicaIdentityStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_ReplicaIdentityStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ReplicaIdentityStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ReplicaIdentityStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ReplicaIdentityStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #153 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterSystemuint64_t Stmt = type metadata accessor for PgQuery_AlterSystemStmt(0);
  uint64_t v5 = *(void *)(AlterSystemStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterSystemStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterSystemStmt;
  v24((char *)&v34 - v22, 1, 1, AlterSystemStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 152)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterSystemStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterSystemStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSystemStmt and conformance PgQuery_AlterSystemStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSystemStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterSystemStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterSystemStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterSystemStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #154 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Policyuint64_t Stmt = type metadata accessor for PgQuery_CreatePolicyStmt(0);
  uint64_t v5 = *(void *)(PolicyStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](PolicyStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = PolicyStmt;
  v24((char *)&v34 - v22, 1, 1, PolicyStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 153)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreatePolicyStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreatePolicyStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePolicyStmt and conformance PgQuery_CreatePolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePolicyStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreatePolicyStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatePolicyStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreatePolicyStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #155 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterPolicyuint64_t Stmt = type metadata accessor for PgQuery_AlterPolicyStmt(0);
  uint64_t v5 = *(void *)(AlterPolicyStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterPolicyStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterPolicyStmt;
  v24((char *)&v34 - v22, 1, 1, AlterPolicyStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 154)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterPolicyStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterPolicyStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPolicyStmt and conformance PgQuery_AlterPolicyStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPolicyStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterPolicyStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterPolicyStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterPolicyStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #156 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Transformuint64_t Stmt = type metadata accessor for PgQuery_CreateTransformStmt(0);
  uint64_t v5 = *(void *)(TransformStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](TransformStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = TransformStmt;
  v24((char *)&v34 - v22, 1, 1, TransformStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 155)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateTransformStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateTransformStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateTransformStmt and conformance PgQuery_CreateTransformStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateTransformStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateTransformStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateTransformStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateTransformStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #157 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Amuint64_t Stmt = type metadata accessor for PgQuery_CreateAmStmt(0);
  uint64_t v5 = *(void *)(AmStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AmStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AmStmt;
  v24((char *)&v34 - v22, 1, 1, AmStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 156)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateAmStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateAmStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateAmStmt and conformance PgQuery_CreateAmStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateAmStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateAmStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateAmStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateAmStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #158 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Publicationuint64_t Stmt = type metadata accessor for PgQuery_CreatePublicationStmt(0);
  uint64_t v5 = *(void *)(PublicationStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](PublicationStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = PublicationStmt;
  v24((char *)&v34 - v22, 1, 1, PublicationStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 157)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreatePublicationStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreatePublicationStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreatePublicationStmt and conformance PgQuery_CreatePublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreatePublicationStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreatePublicationStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreatePublicationStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreatePublicationStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #159 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterPublicationuint64_t Stmt = type metadata accessor for PgQuery_AlterPublicationStmt(0);
  uint64_t v5 = *(void *)(AlterPublicationStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterPublicationStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterPublicationStmt;
  v24((char *)&v34 - v22, 1, 1, AlterPublicationStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 158)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterPublicationStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterPublicationStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterPublicationStmt and conformance PgQuery_AlterPublicationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterPublicationStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterPublicationStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterPublicationStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterPublicationStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #160 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Subscriptionuint64_t Stmt = type metadata accessor for PgQuery_CreateSubscriptionStmt(0);
  uint64_t v5 = *(void *)(SubscriptionStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](SubscriptionStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = SubscriptionStmt;
  v24((char *)&v34 - v22, 1, 1, SubscriptionStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 159)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateSubscriptionStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateSubscriptionStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateSubscriptionStmt and conformance PgQuery_CreateSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateSubscriptionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateSubscriptionStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateSubscriptionStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateSubscriptionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #161 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterSubscriptionuint64_t Stmt = type metadata accessor for PgQuery_AlterSubscriptionStmt(0);
  uint64_t v5 = *(void *)(AlterSubscriptionStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterSubscriptionStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterSubscriptionStmt;
  v24((char *)&v34 - v22, 1, 1, AlterSubscriptionStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 160)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterSubscriptionStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterSubscriptionStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterSubscriptionStmt and conformance PgQuery_AlterSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterSubscriptionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterSubscriptionStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterSubscriptionStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterSubscriptionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #162 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  DropSubscriptionuint64_t Stmt = type metadata accessor for PgQuery_DropSubscriptionStmt(0);
  uint64_t v5 = *(void *)(DropSubscriptionStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](DropSubscriptionStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = DropSubscriptionStmt;
  v24((char *)&v34 - v22, 1, 1, DropSubscriptionStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 161)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_DropSubscriptionStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_DropSubscriptionStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_DropSubscriptionStmt and conformance PgQuery_DropSubscriptionStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_DropSubscriptionStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_DropSubscriptionStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_DropSubscriptionStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_DropSubscriptionStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #163 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  Statsuint64_t Stmt = type metadata accessor for PgQuery_CreateStatsStmt(0);
  uint64_t v5 = *(void *)(StatsStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](StatsStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = StatsStmt;
  v24((char *)&v34 - v22, 1, 1, StatsStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 162)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CreateStatsStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CreateStatsStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CreateStatsStmt and conformance PgQuery_CreateStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CreateStatsStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CreateStatsStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CreateStatsStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CreateStatsStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #164 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterCollationuint64_t Stmt = type metadata accessor for PgQuery_AlterCollationStmt(0);
  uint64_t v5 = *(void *)(AlterCollationStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterCollationStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterCollationStmt;
  v24((char *)&v34 - v22, 1, 1, AlterCollationStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 163)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterCollationStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterCollationStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterCollationStmt and conformance PgQuery_AlterCollationStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterCollationStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterCollationStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterCollationStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterCollationStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #165 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for PgQuery_CallStmt(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_CallStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 164)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CallStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_CallStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_CallStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_CallStmt and conformance PgQuery_CallStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_CallStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CallStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_CallStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CallStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_CallStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_CallStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_CallStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_CallStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #166 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  AlterStatsuint64_t Stmt = type metadata accessor for PgQuery_AlterStatsStmt(0);
  uint64_t v5 = *(void *)(AlterStatsStmt - 8);
  uint64_t v6 = MEMORY[0x1F4188790](AlterStatsStmt);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = AlterStatsStmt;
  v24((char *)&v34 - v22, 1, 1, AlterStatsStmt);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 165)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_AlterStatsStmt);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_AlterStatsStmt);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_AlterStatsStmt and conformance PgQuery_AlterStatsStmt, (void (*)(uint64_t))type metadata accessor for PgQuery_AlterStatsStmt);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_AlterStatsStmt);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_AlterStatsStmt?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_AlterStatsStmt);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #167 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t A_Expr = type metadata accessor for PgQuery_A_Expr(0);
  uint64_t v5 = *(void *)(A_Expr - 8);
  uint64_t v6 = MEMORY[0x1F4188790](A_Expr);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_A_Expr?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = A_Expr;
  v24((char *)&v34 - v22, 1, 1, A_Expr);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 166)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Expr?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_A_Expr);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_A_Expr);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Expr and conformance PgQuery_A_Expr, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Expr);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Expr?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_A_Expr?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Expr?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_A_Expr?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_A_Expr);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Expr?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_A_Expr);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #168 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t ColumnRef = type metadata accessor for PgQuery_ColumnRef(0);
  uint64_t v5 = *(void *)(ColumnRef - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ColumnRef);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ColumnRef?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ColumnRef;
  v24((char *)&v34 - v22, 1, 1, ColumnRef);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 167)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ColumnRef?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ColumnRef);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ColumnRef);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ColumnRef and conformance PgQuery_ColumnRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ColumnRef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ColumnRef?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ColumnRef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ColumnRef?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ColumnRef?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ColumnRef);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ColumnRef?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ColumnRef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #169 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t ParamRef = type metadata accessor for PgQuery_ParamRef(0);
  uint64_t v5 = *(void *)(ParamRef - 8);
  uint64_t v6 = MEMORY[0x1F4188790](ParamRef);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_ParamRef?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = ParamRef;
  v24((char *)&v34 - v22, 1, 1, ParamRef);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 168)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ParamRef?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_ParamRef);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_ParamRef);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_ParamRef and conformance PgQuery_ParamRef, (void (*)(uint64_t))type metadata accessor for PgQuery_ParamRef);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ParamRef?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_ParamRef?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ParamRef?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_ParamRef?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_ParamRef);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_ParamRef?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_ParamRef);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #170 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t A_Const = type metadata accessor for PgQuery_A_Const(0);
  uint64_t v5 = *(void *)(A_Const - 8);
  uint64_t v6 = MEMORY[0x1F4188790](A_Const);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_A_Const?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = A_Const;
  v24((char *)&v34 - v22, 1, 1, A_Const);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 169)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Const?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_A_Const);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_A_Const);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Const and conformance PgQuery_A_Const, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Const);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Const?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_A_Const?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Const?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_A_Const?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_A_Const);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Const?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_A_Const);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #171 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v4 = type metadata accessor for PgQuery_FuncCall(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_FuncCall?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v4;
  v24((char *)&v34 - v22, 1, 1, v4);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 170)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FuncCall?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_FuncCall);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_FuncCall);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_FuncCall and conformance PgQuery_FuncCall, (void (*)(uint64_t))type metadata accessor for PgQuery_FuncCall);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FuncCall?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_FuncCall?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_FuncCall);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_FuncCall?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_FuncCall);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}

uint64_t closure #172 in closure #1 in PgQuery_Node.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t A_Star = type metadata accessor for PgQuery_A_Star(0);
  uint64_t v5 = *(void *)(A_Star - 8);
  uint64_t v6 = MEMORY[0x1F4188790](A_Star);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v40 = (char *)&v34 - v8;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for PgQuery_Node.OneOf_Node(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v34 - v17;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PgQuery_A_Star?);
  uint64_t v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v38 = (uint64_t)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v34 - v22;
  uint64_t v39 = v5;
  Swift::String v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = A_Star;
  v24((char *)&v34 - v22, 1, 1, A_Star);
  uint64_t v35 = v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node;
  outlined init with copy of PgQuery_Alias?(v46 + OBJC_IVAR____TtCV14BiomeSQLParser12PgQuery_NodeP33_A784F7F2ED97E043416F18646CF1BF1713_StorageClass__node, (uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
  uint64_t v36 = v13;
  LODWORD(v46) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  if (v46 == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v11, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    uint64_t v25 = v12;
  }
  else
  {
    uint64_t v26 = (uint64_t)v40;
    outlined init with take of PgQuery_OidList((uint64_t)v11, (uint64_t)v18, type metadata accessor for PgQuery_Node.OneOf_Node);
    outlined init with take of PgQuery_OidList((uint64_t)v18, (uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
    uint64_t v25 = v12;
    if (swift_getEnumCaseMultiPayload() == 171)
    {
      outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Star?);
      outlined init with take of PgQuery_OidList((uint64_t)v16, v26, type metadata accessor for PgQuery_A_Star);
      outlined init with take of PgQuery_OidList(v26, (uint64_t)v23, type metadata accessor for PgQuery_A_Star);
      uint64_t v27 = v41;
      v24(v23, 0, 1, v41);
      uint64_t v28 = v42;
      goto LABEL_7;
    }
    outlined destroy of PgQuery_Alias((uint64_t)v16, type metadata accessor for PgQuery_Node.OneOf_Node);
  }
  uint64_t v27 = v41;
  uint64_t v28 = v42;
LABEL_7:
  lazy protocol witness table accessor for type PgQuery_ScanToken and conformance PgQuery_ScanToken(&lazy protocol witness table cache variable for type PgQuery_A_Star and conformance PgQuery_A_Star, (void (*)(uint64_t))type metadata accessor for PgQuery_A_Star);
  dispatch thunk of Decoder.decodeSingularMessageField<A>(value:)();
  if (v28) {
    return outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Star?);
  }
  uint64_t v30 = v38;
  outlined init with copy of PgQuery_Alias?((uint64_t)v23, v38, &demangling cache variable for type metadata for PgQuery_A_Star?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v30, 1, v27) == 1)
  {
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Star?);
    return outlined destroy of AnyValue?(v30, &demangling cache variable for type metadata for PgQuery_A_Star?);
  }
  else
  {
    uint64_t v31 = v30;
    uint64_t v32 = v37;
    outlined init with take of PgQuery_OidList(v31, v37, type metadata accessor for PgQuery_A_Star);
    if (v46 != 1) {
      dispatch thunk of Decoder.handleConflictingOneOf()();
    }
    outlined destroy of AnyValue?((uint64_t)v23, &demangling cache variable for type metadata for PgQuery_A_Star?);
    uint64_t v33 = v35;
    outlined destroy of AnyValue?(v35, &demangling cache variable for type metadata for PgQuery_Node.OneOf_Node?);
    outlined init with take of PgQuery_OidList(v32, v33, type metadata accessor for PgQuery_A_Star);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v25);
  }
}