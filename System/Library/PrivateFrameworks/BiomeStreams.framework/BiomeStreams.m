uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t destroy for DatabaseValue(uint64_t a1)
{
  return outlined consume of DatabaseValue(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t closure #2 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v123 = a7;
  uint64_t v122 = a6;
  uint64_t v141 = a5;
  uint64_t v134 = a4;
  uint64_t v133 = a3;
  uint64_t v150 = a1;
  v169[4] = *MEMORY[0x1E4F143B8];
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v125 = (uint64_t)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v138 = (uint64_t)&v121 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (unint64_t)&v121 - v13;
  v147 = type metadata accessor for SQLDataType();
  Swift::Int Description = (Swift::Int)v147[-1].Description;
  MEMORY[0x1F4188790](v147);
  v146 = (void (**)(char *, char *, void *))((char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v155 = type metadata accessor for StorableValue(0);
  uint64_t v156 = *(void *)(v155 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v155);
  uint64_t v151 = (uint64_t)&v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  v140 = (uint64_t *)((char *)&v121 - v20);
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  v158 = (void (*)(uint64_t, char *, char *))((char *)&v121 - v22);
  MEMORY[0x1F4188790](v21);
  v24 = (char *)&v121 - v23;
  v159 = type metadata accessor for SQLExpression();
  unint64_t v25 = (unint64_t)v159[-1].Description;
  uint64_t v26 = MEMORY[0x1F4188790](v159);
  unint64_t v28 = (unint64_t)&v121 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  unint64_t v139 = (unint64_t)&v121 - v30;
  MEMORY[0x1F4188790](v29);
  uint64_t v149 = (uint64_t)&v121 - v31;
  object = (char *)type metadata accessor for ResultColumn();
  uint64_t v161 = *((void *)object - 1);
  uint64_t v33 = MEMORY[0x1F4188790](object);
  uint64_t countAndFlagsBits = (uint64_t)&v121 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x1F4188790](v33);
  v136 = (char *)&v121 - v37;
  uint64_t v38 = MEMORY[0x1F4188790](v36);
  isUniquelyReferenced_nonNull_native = (ValueMetadata *)((char *)&v121 - v39);
  uint64_t v41 = MEMORY[0x1F4188790](v38);
  v162 = (void (**)(unint64_t, ValueMetadata *))((char *)&v121 - v42);
  uint64_t v135 = MEMORY[0x192FB0A00](v41);
  id v43 = objc_msgSend(a2, sel_schema);
  id v44 = objc_msgSend(v43, sel_columns);

  type metadata accessor for BMSQLColumn(0, &lazy cache variable for type metadata for BMSQLColumn);
  unint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v46 = v45;
  v148 = (void (**)(uint64_t, ValueMetadata *))v45;
  if (v45 >> 62) {
    goto LABEL_83;
  }
  uint64_t v47 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v152 = isUniquelyReferenced_nonNull_native;
    unint64_t v143 = v25;
    unint64_t v124 = v28;
    v160 = object;
    uint64_t v157 = countAndFlagsBits;
    if (!v47)
    {
      swift_bridgeObjectRelease();
      uint64_t v163 = 0;
      isUniquelyReferenced_nonNull_native = (ValueMetadata *)MEMORY[0x1E4FBC868];
LABEL_35:
      swift_bridgeObjectRetain();
      unint64_t v28 = SelectCore.select.getter();
      v73 = (ValueMetadata *)MEMORY[0x1E4FBC860];
      v169[0] = MEMORY[0x1E4FBC860];
      v158 = *(void (**)(uint64_t, char *, char *))(v28 + 16);
      v147 = isUniquelyReferenced_nonNull_native;
      if (v158)
      {
        unint64_t v74 = v25;
        unint64_t v25 = 0;
        v154 = (void (**)(uint64_t, char *))(v161 + 16);
        v148 = (void (**)(uint64_t, ValueMetadata *))(v74 + 8);
        v146 = (void (**)(char *, char *, void *))(v161 + 32);
        v153 = (void (**)(char *, void *))(v161 + 8);
        uint64_t v150 = (v161 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t countAndFlagsBits = v161 + 16;
        while (1)
        {
          if (v25 >= *(void *)(v28 + 16))
          {
            __break(1u);
            goto LABEL_78;
          }
          v75 = v162;
          unint64_t v14 = (*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80);
          Swift::Int Description = *(void *)(v161 + 72);
          isUniquelyReferenced_nonNull_native = (ValueMetadata *)v28;
          v76 = *(void (**)(void (**)(unint64_t, ValueMetadata *), unint64_t, char *))(v161 + 16);
          v76(v162, v28 + v14 + Description * v25, object);
          ResultColumn.alias.getter();
          uint64_t v78 = v77;
          swift_bridgeObjectRelease();
          v24 = (char *)v152;
          v76((void (**)(unint64_t, ValueMetadata *))v152, (unint64_t)v75, object);
          if (v78)
          {
            uint64_t v79 = v149;
            ResultColumn.expression.getter(v149);
            uint64_t v80 = SQLExpression.aggregationFunctions.getter();
            (*v148)(v79, v159);
            uint64_t v81 = *(void *)(v80 + 16);
            swift_bridgeObjectRelease();
            v82 = *v153;
            (*v153)(v24, object);
            if (!v81)
            {
              v24 = (char *)*v146;
              (*v146)(v136, (char *)v162, object);
              uint64_t v83 = v169[0];
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v83 = v169[0];
              }
              unint64_t v28 = (unint64_t)isUniquelyReferenced_nonNull_native;
              unint64_t v84 = *(void *)(v83 + 16);
              if (v84 >= *(void *)(v83 + 24) >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                uint64_t v83 = v169[0];
              }
              *(void *)(v83 + 16) = v84 + 1;
              object = v160;
              ((void (*)(unint64_t, char *, char *))v24)(v83 + v14 + v84 * Description, v136, v160);
              v169[0] = v83;
              goto LABEL_47;
            }
          }
          else
          {
            v82 = *v153;
            (*v153)(v24, object);
          }
          v82((char *)v162, object);
          unint64_t v28 = (unint64_t)isUniquelyReferenced_nonNull_native;
LABEL_47:
          if (v158 == (void (*)(uint64_t, char *, char *))++v25)
          {
            v73 = (ValueMetadata *)v169[0];
            unint64_t v25 = v143;
            uint64_t countAndFlagsBits = v157;
            isUniquelyReferenced_nonNull_native = v147;
            break;
          }
        }
      }
      swift_bridgeObjectRelease();
      Swift::Int Description = v73[1].Kind;
      if (Description)
      {
        v158 = *(void (**)(uint64_t, char *, char *))(v161 + 16);
        unint64_t v85 = (*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80);
        v86 = object;
        v152 = v73;
        object = (char *)v73 + v85;
        v162 = (void (**)(unint64_t, ValueMetadata *))(v25 + 8);
        v154 = (void (**)(uint64_t, char *))(v161 + 8);
        v161 += 16;
        v153 = *(void (***)(char *, void *))(v161 + 56);
        unint64_t v28 = (unint64_t)isUniquelyReferenced_nonNull_native;
        v87 = v140;
        while (1)
        {
          v158(countAndFlagsBits, object, v86);
          unint64_t v25 = v139;
          ResultColumn.expression.getter(v139);
          uint64_t v56 = v163;
          SQLExpressionEvaluator.execute(expression:payload:)(v25, (uint64_t)v147, v87);
          if (v56) {
            break;
          }
          uint64_t v163 = 0;
          (*v162)(v25, v159);
          outlined init with copy of StorableValue((uint64_t)v87, v151, (void (*)(void))type metadata accessor for StorableValue);
          v24 = (char *)ResultColumn.name.getter();
          unint64_t v14 = v88;
          isUniquelyReferenced_nonNull_native = (ValueMetadata *)swift_isUniquelyReferenced_nonNull_native();
          v169[0] = v28;
          unint64_t v89 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v24, v14);
          uint64_t v91 = *(void *)(v28 + 16);
          BOOL v92 = (v90 & 1) == 0;
          unint64_t v28 = v91 + v92;
          if (__OFADD__(v91, v92)) {
            goto LABEL_80;
          }
          unint64_t v25 = v89;
          uint64_t countAndFlagsBits = v90;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)isUniquelyReferenced_nonNull_native, v28))
          {
            unint64_t v93 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v24, v14);
            if ((countAndFlagsBits & 1) != (v94 & 1)) {
              goto LABEL_85;
            }
            unint64_t v25 = v93;
          }
          unint64_t v28 = v169[0];
          if (countAndFlagsBits)
          {
            unint64_t v95 = *(void *)(v156 + 72) * v25;
            uint64_t v96 = v138;
            outlined init with take of StorableValue(*(void *)(v169[0] + 56) + v95, v138, (void (*)(void))type metadata accessor for StorableValue);
            outlined init with take of StorableValue(v151, *(void *)(v28 + 56) + v95, (void (*)(void))type metadata accessor for StorableValue);
            __swift_storeEnumTagSinglePayload(v96, 0, 1, v155);
          }
          else
          {
            *(void *)(v169[0] + 8 * (v25 >> 6) + 64) |= 1 << v25;
            v97 = (char **)(*(void *)(v28 + 48) + 16 * v25);
            *v97 = v24;
            v97[1] = (char *)v14;
            outlined init with take of StorableValue(v151, *(void *)(v28 + 56) + *(void *)(v156 + 72) * v25, (void (*)(void))type metadata accessor for StorableValue);
            uint64_t v98 = *(void *)(v28 + 16);
            BOOL v71 = __OFADD__(v98, 1);
            uint64_t v99 = v98 + 1;
            if (v71) {
              goto LABEL_82;
            }
            *(void *)(v28 + 16) = v99;
            uint64_t v96 = v138;
            __swift_storeEnumTagSinglePayload(v138, 1, 1, v155);
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of UUID?(v96, &demangling cache variable for type metadata for StorableValue?);
          v87 = v140;
          outlined destroy of StorableValue((uint64_t)v140, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t countAndFlagsBits = v157;
          v86 = v160;
          (*v154)(v157, v160);
          object = (char *)v153 + (void)object;
          --Description;
          unint64_t v25 = v143;
          if (!Description)
          {
            swift_release();
            goto LABEL_63;
          }
        }
        swift_bridgeObjectRelease();
        (*v162)(v25, v159);
        (*v154)(countAndFlagsBits, v160);
        swift_bridgeObjectRelease();
        swift_release();
LABEL_72:
        v102 = (void *)v135;
        v118 = *(void **)(v133 + 16);
        *(void *)(v133 + 16) = v56;

        BOOL v107 = 0;
LABEL_73:
        return v107;
      }
      swift_release();
      unint64_t v28 = (unint64_t)isUniquelyReferenced_nonNull_native;
LABEL_63:
      swift_bridgeObjectRelease();
      uint64_t v100 = v125;
      SelectCore.where.getter(v125);
      v101 = v159;
      if (__swift_getEnumTagSinglePayload(v100, 1, (uint64_t)v159) == 1)
      {
        outlined destroy of UUID?(v100, &demangling cache variable for type metadata for SQLExpression?);
        v102 = (void *)v135;
      }
      else
      {
        uint64_t v116 = v124;
        (*(void (**)(unint64_t, uint64_t, ValueMetadata *))(v25 + 32))(v124, v100, v101);
        swift_bridgeObjectRetain();
        uint64_t v56 = v163;
        char v117 = SQLExpressionEvaluator.evaluatesToTrue(expression:payload:)(v116, v28);
        if (v56)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, ValueMetadata *))(v25 + 8))(v116, v101);
LABEL_70:
          swift_bridgeObjectRelease();
          goto LABEL_72;
        }
        char v120 = v117;
        swift_bridgeObjectRelease();
        v102 = (void *)v135;
        if ((v120 & 1) == 0)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, ValueMetadata *))(v25 + 8))(v124, v101);
          BOOL v107 = 1;
          goto LABEL_73;
        }
        (*(void (**)(unint64_t, ValueMetadata *))(v25 + 8))(v124, v101);
      }
      v103 = (uint64_t *)(v122 + 16);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v104 = *(void *)(*v103 + 16);
      specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v104);
      uint64_t v105 = *v103;
      *(void *)(v105 + 16) = v104 + 1;
      uint64_t v106 = v105 + 16 * v104;
      *(unsigned char *)(v106 + 32) = 0;
      *(void *)(v106 + 40) = v28;
      BOOL v107 = *(void *)(*v103 + 16) < v123;
      goto LABEL_73;
    }
    uint64_t v163 = 0;
    unint64_t v145 = v46 & 0xC000000000000001;
    int v132 = 2;
    v144 = (void (**)(char **, uint64_t, ValueMetadata *))(Description + 104);
    int v131 = 0;
    int v130 = 1;
    int v129 = 3;
    int v128 = 4;
    int v127 = 6;
    unint64_t v25 = 4;
    unsigned int v137 = 5;
    unsigned int v126 = 7;
    isUniquelyReferenced_nonNull_native = (ValueMetadata *)MEMORY[0x1E4FBC868];
    uint64_t v142 = v47;
LABEL_5:
    id v48 = v145 ? (id)MEMORY[0x192FB0330](v25 - 4, v46) : *(id *)(v46 + 8 * v25);
    uint64_t countAndFlagsBits = (uint64_t)v48;
    object = (char *)(v25 - 3);
    if (!__OFADD__(v25 - 4, 1)) {
      break;
    }
LABEL_78:
    __break(1u);
LABEL_79:
    __break(1u);
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    swift_bridgeObjectRetain();
    uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v46 = (unint64_t)v148;
  }
  v49 = objc_msgSend(v48, sel_extractBlock);
  if (!v49) {
    __break(1u);
  }
  v50 = v49;
  uint64_t v51 = v150;
  v168[3] = swift_getObjectType();
  v168[0] = v51;
  id v166 = 0;
  v52 = (uint64_t (*)(void *, uint64_t, id *))v50[2];
  swift_unknownObjectRetain();
  if ((id)v52(v50, v51, &v166))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v167, 0, sizeof(v167));
  }
  outlined init with take of UUID?((uint64_t)v167, (uint64_t)v169, &demangling cache variable for type metadata for Any?);
  _Block_release(v50);
  id v53 = v166;
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v168);
  if (v53)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v108 = swift_allocError();
    uint64_t v110 = v109;
    id v111 = objc_msgSend((id)countAndFlagsBits, sel_name);
    uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v114 = v113;

    *(void *)uint64_t v110 = v112;
    *(void *)(v110 + 8) = v114;
    *(unsigned char *)(v110 + 64) = 0;

    v115 = *(void **)(v133 + 16);
    *(void *)(v133 + 16) = v108;

    outlined destroy of UUID?((uint64_t)v169, &demangling cache variable for type metadata for Any?);
    BOOL v107 = 0;
    v102 = (void *)v135;
    goto LABEL_73;
  }
  outlined init with copy of Date?((uint64_t)v169, (uint64_t)v168, &demangling cache variable for type metadata for Any?);
  id v54 = objc_msgSend((id)countAndFlagsBits, sel_dataType);
  uint64_t v55 = v137;
  uint64_t v56 = v163;
  switch((unint64_t)v54)
  {
    case 0uLL:
      v57 = (void (***)(unint64_t, ValueMetadata *))&v164;
      goto LABEL_22;
    case 1uLL:
      v57 = (void (***)(unint64_t, ValueMetadata *))((char *)&v163 + 4);
      goto LABEL_22;
    case 2uLL:
      v57 = (void (***)(unint64_t, ValueMetadata *))&v165;
      goto LABEL_22;
    case 3uLL:
      v57 = (void (***)(unint64_t, ValueMetadata *))&v163;
      goto LABEL_22;
    case 4uLL:
      v57 = (void (***)(unint64_t, ValueMetadata *))((char *)&v162 + 4);
      goto LABEL_22;
    case 5uLL:
      break;
    case 6uLL:
      v57 = &v162;
LABEL_22:
      uint64_t v55 = *((unsigned int *)v57 - 64);
      break;
    default:
      uint64_t v55 = v126;
      uint64_t v56 = v163;
      break;
  }
  uint64_t v58 = (uint64_t)v146;
  (*v144)((char **)v146, v55, v147);
  StorableValue.init(_:dataType:)((uint64_t)v168, v58, (unint64_t *)v24);
  if (v56)
  {

    outlined destroy of UUID?((uint64_t)v169, &demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRelease();
    goto LABEL_70;
  }
  v153 = (void (**)(char *, void *))(v25 - 3);
  v154 = (void (**)(uint64_t, char *))v25;
  uint64_t v59 = (uint64_t)v24;
  v24 = (char *)v14;
  uint64_t v163 = 0;
  uint64_t v60 = v59;
  outlined init with copy of StorableValue(v59, (uint64_t)v158, (void (*)(void))type metadata accessor for StorableValue);
  unint64_t v25 = countAndFlagsBits;
  id v61 = objc_msgSend((id)countAndFlagsBits, sel_name);
  unint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v62 = isUniquelyReferenced_nonNull_native;

  Swift::String v63 = String.lowercased()();
  uint64_t countAndFlagsBits = v63._countAndFlagsBits;
  object = (char *)v63._object;
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = (ValueMetadata *)swift_isUniquelyReferenced_nonNull_native();
  v168[0] = v62;
  unint64_t v64 = specialized __RawDictionaryStorage.find<A>(_:)(v63._countAndFlagsBits, (uint64_t)v63._object);
  uint64_t Kind = v62[1].Kind;
  BOOL v67 = (v65 & 1) == 0;
  Swift::Int Description = Kind + v67;
  if (__OFADD__(Kind, v67)) {
    goto LABEL_79;
  }
  unint64_t v28 = v64;
  unint64_t v14 = v65;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)((Swift::Bool)isUniquelyReferenced_nonNull_native, Description))
  {
LABEL_28:
    isUniquelyReferenced_nonNull_native = (ValueMetadata *)v168[0];
    if (v14)
    {
      Swift::Int Description = *(void *)(v156 + 72) * v28;
      unint64_t v14 = (unint64_t)v24;
      outlined init with take of StorableValue(*(void *)(v168[0] + 56) + Description, (uint64_t)v24, (void (*)(void))type metadata accessor for StorableValue);
      outlined init with take of StorableValue((uint64_t)v158, (uint64_t)isUniquelyReferenced_nonNull_native[3].Description + Description, (void (*)(void))type metadata accessor for StorableValue);
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 0, 1, v155);
    }
    else
    {
      *(void *)(v168[0] + 8 * (v28 >> 6) + 64) |= 1 << v28;
      *(Swift::String *)(isUniquelyReferenced_nonNull_native[3].Kind + 16 * v28) = v63;
      outlined init with take of StorableValue((uint64_t)v158, (uint64_t)isUniquelyReferenced_nonNull_native[3].Description + *(void *)(v156 + 72) * v28, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v70 = isUniquelyReferenced_nonNull_native[1].Kind;
      BOOL v71 = __OFADD__(v70, 1);
      uint64_t v72 = v70 + 1;
      if (v71) {
        goto LABEL_81;
      }
      isUniquelyReferenced_nonNull_native[1].uint64_t Kind = v72;
      unint64_t v14 = (unint64_t)v24;
      __swift_storeEnumTagSinglePayload((uint64_t)v24, 1, 1, v155);
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    outlined destroy of UUID?(v14, &demangling cache variable for type metadata for StorableValue?);
    v24 = (char *)v60;
    outlined destroy of StorableValue(v60, (void (*)(void))type metadata accessor for StorableValue);
    outlined destroy of UUID?((uint64_t)v169, &demangling cache variable for type metadata for Any?);
    unint64_t v25 = (unint64_t)v154 + 1;
    object = v160;
    uint64_t countAndFlagsBits = v157;
    unint64_t v46 = (unint64_t)v148;
    if (v153 == (void (**)(char *, void *))v142)
    {
      swift_bridgeObjectRelease();
      unint64_t v25 = v143;
      goto LABEL_35;
    }
    goto LABEL_5;
  }
  unint64_t v68 = specialized __RawDictionaryStorage.find<A>(_:)(v63._countAndFlagsBits, (uint64_t)v63._object);
  if ((v14 & 1) == (v69 & 1))
  {
    unint64_t v28 = v68;
    goto LABEL_28;
  }
LABEL_85:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

uint64_t outlined init with copy of StorableValue(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_4_3();
  uint64_t v4 = OUTLINED_FUNCTION_88();
  v5(v4);
  return a2;
}

uint64_t _s12BiomeStreams13StorableValueOWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_4_3();
  uint64_t v4 = OUTLINED_FUNCTION_88();
  v5(v4);
  return a2;
}

uint64_t _s12BiomeStreams13StorableValueOWOcTm_1(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_15_0();
  v4();
  return a2;
}

uint64_t outlined init with copy of Date?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_4_3();
  uint64_t v4 = OUTLINED_FUNCTION_88();
  v5(v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_88()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_88_0()
{
  return *(void *)(v0 - 280);
}

uint64_t OUTLINED_FUNCTION_88_1()
{
  return swift_getEnumCaseMultiPayload();
}

BOOL OUTLINED_FUNCTION_88_2@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t destroy for ResultColumn(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t destroy for SQLExpression(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1Tm(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t __swift_destroy_boxed_opaque_existential_1Tm(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t StorableValue.init(_:dataType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X8>)
{
  BOOL v107 = a3;
  uint64_t v102 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_10();
  uint64_t v101 = v7;
  uint64_t v106 = type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v8);
  uint64_t v99 = (char *)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_21();
  v103 = v11;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_21();
  uint64_t v100 = v13;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_21();
  uint64_t v105 = v15;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_45();
  uint64_t v104 = v17;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_68();
  uint64_t v19 = type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v21 = v20;
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_24();
  uint64_t v23 = *(void (**)(void))(v21 + 16);
  uint64_t v109 = a2;
  OUTLINED_FUNCTION_40();
  v23();
  uint64_t v108 = v21;
  OUTLINED_FUNCTION_92();
  int v25 = v24();
  if (!v25)
  {
    outlined init with copy of Date?(a1, (uint64_t)&v111, &demangling cache variable for type metadata for Any?);
    uint64_t v26 = v112;
    if (!v112)
    {
      uint64_t v41 = OUTLINED_FUNCTION_1_9();
      v42(v41);
      outlined destroy of UUID?(a1, &demangling cache variable for type metadata for Any?);
      outlined destroy of UUID?((uint64_t)&v111, &demangling cache variable for type metadata for Any?);
      unint64_t v28 = 0;
LABEL_19:
      unint64_t v45 = v107;
      *BOOL v107 = v28;
      *((unsigned char *)v45 + 8) = v26 == 0;
      return swift_storeEnumTagMultiPayload();
    }
    outlined init with take of Any(&v111, v113);
    outlined init with copy of Any((uint64_t)v113, (uint64_t)&v111);
    type metadata accessor for BMSQLColumn(0, &lazy cache variable for type metadata for NSNumber);
    if (OUTLINED_FUNCTION_7_0())
    {
      uint64_t v27 = (void *)v110;
      unint64_t v28 = (unint64_t)objc_msgSend((id)v110, sel_longLongValue);

LABEL_5:
      uint64_t v29 = OUTLINED_FUNCTION_1_9();
      v30(v29);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v113);
LABEL_6:
      outlined destroy of UUID?(a1, &demangling cache variable for type metadata for Any?);
LABEL_18:
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v111);
      goto LABEL_19;
    }
    if (OUTLINED_FUNCTION_7_0())
    {
      uint64_t v43 = OUTLINED_FUNCTION_1_9();
      v44(v43);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v113);
      outlined destroy of UUID?(a1, &demangling cache variable for type metadata for Any?);
      unint64_t v28 = v110;
      goto LABEL_18;
    }
    if (OUTLINED_FUNCTION_7_0())
    {
      unint64_t v28 = (int)v110;
      goto LABEL_5;
    }
    if (OUTLINED_FUNCTION_7_0())
    {
      unint64_t v28 = (__int16)v110;
      goto LABEL_5;
    }
    if (OUTLINED_FUNCTION_7_0())
    {
      unint64_t v28 = (char)v110;
      goto LABEL_5;
    }
    if (OUTLINED_FUNCTION_7_0()) {
      goto LABEL_58;
    }
    if (OUTLINED_FUNCTION_7_0())
    {
      uint64_t v88 = OUTLINED_FUNCTION_1_9();
      v89(v88);
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v113);
      unint64_t v28 = v110;
      goto LABEL_6;
    }
    if (OUTLINED_FUNCTION_7_0())
    {
      unint64_t v28 = v110;
      goto LABEL_5;
    }
    if (OUTLINED_FUNCTION_7_0())
    {
      unint64_t v28 = (unsigned __int16)v110;
      goto LABEL_5;
    }
    if (OUTLINED_FUNCTION_7_0())
    {
      unint64_t v28 = v110;
      goto LABEL_5;
    }
    if (swift_dynamicCast())
    {
LABEL_58:
      unint64_t v28 = v110;
      goto LABEL_5;
    }
    goto LABEL_81;
  }
  if (v25 == 1)
  {
    outlined init with copy of Date?(a1, (uint64_t)&v111, &demangling cache variable for type metadata for Any?);
    if (v112)
    {
      outlined init with take of Any(&v111, v113);
      outlined init with copy of Any((uint64_t)v113, (uint64_t)&v111);
      type metadata accessor for BMSQLColumn(0, &lazy cache variable for type metadata for NSNumber);
      if (OUTLINED_FUNCTION_7_0())
      {
        uint64_t v31 = (void *)v110;
        objc_msgSend((id)v110, sel_doubleValue);
        unint64_t v33 = v32;

        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v113);
        unint64_t v34 = v33;
      }
      else
      {
        if (!OUTLINED_FUNCTION_7_0())
        {
LABEL_81:
          lazy protocol witness table accessor for type SQLError and conformance SQLError();
          OUTLINED_FUNCTION_39();
          OUTLINED_FUNCTION_93();
          outlined init with copy of Any((uint64_t)v113, v96);
          OUTLINED_FUNCTION_72();
          uint64_t v97 = OUTLINED_FUNCTION_1_9();
          v98(v97);
          __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v113);
          outlined destroy of UUID?(a1, &demangling cache variable for type metadata for Any?);
          return __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v111);
        }
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v113);
        unint64_t v34 = v110;
      }
      __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v111);
      if ((~v34 & 0x7FF0000000000000) != 0)
      {
        uint64_t v65 = OUTLINED_FUNCTION_1_9();
        v66(v65);
        outlined destroy of UUID?(a1, &demangling cache variable for type metadata for Any?);
        BOOL v57 = 0;
      }
      else
      {
        uint64_t v58 = OUTLINED_FUNCTION_1_9();
        v59(v58);
        outlined destroy of UUID?(a1, &demangling cache variable for type metadata for Any?);
        BOOL v57 = (v34 & 0xFFFFFFFFFFFFFLL) != 0;
        if ((v34 & 0xFFFFFFFFFFFFFLL) != 0) {
          unint64_t v34 = 0;
        }
      }
    }
    else
    {
      outlined destroy of UUID?((uint64_t)&v111, &demangling cache variable for type metadata for Any?);
      uint64_t v55 = OUTLINED_FUNCTION_1_9();
      v56(v55);
      outlined destroy of UUID?(a1, &demangling cache variable for type metadata for Any?);
      unint64_t v34 = 0;
      BOOL v57 = 1;
    }
    BOOL v67 = v107;
    *BOOL v107 = v34;
    *((unsigned char *)v67 + 8) = v57;
    return swift_storeEnumTagMultiPayload();
  }
  if (v25 != 2)
  {
    switch(v25)
    {
      case 3:
        outlined init with copy of Date?(a1, (uint64_t)v113, &demangling cache variable for type metadata for Any?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        if (!swift_dynamicCast()) {
          goto LABEL_61;
        }
        outlined destroy of UUID?(v3, (uint64_t *)&demangling cache variable for type metadata for Date?);
        uint64_t v46 = OUTLINED_FUNCTION_1_9();
        uint64_t v48 = v47(v46);
        OUTLINED_FUNCTION_62(v48, v49, &demangling cache variable for type metadata for Any?);
        if (v112)
        {
          outlined init with take of Any(&v111, v113);
          uint64_t v50 = type metadata accessor for Date();
          uint64_t v51 = (void *)v104;
          swift_dynamicCast();
          uint64_t v52 = (uint64_t)v51;
          uint64_t v53 = 0;
          uint64_t v54 = v50;
        }
        else
        {
          outlined destroy of UUID?((uint64_t)&v111, &demangling cache variable for type metadata for Any?);
          uint64_t v54 = type metadata accessor for Date();
          uint64_t v51 = (void *)v104;
          uint64_t v52 = v104;
          uint64_t v53 = 1;
        }
        __swift_storeEnumTagSinglePayload(v52, v53, 1, v54);
        break;
      case 4:
        OUTLINED_FUNCTION_60_0();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
        if (!OUTLINED_FUNCTION_38()) {
          goto LABEL_61;
        }
        outlined consume of Data?(v111, *((unint64_t *)&v111 + 1));
        uint64_t v60 = OUTLINED_FUNCTION_1_9();
        uint64_t v62 = v61(v60);
        OUTLINED_FUNCTION_62(v62, v63, &demangling cache variable for type metadata for Any?);
        if (v112)
        {
          outlined init with take of Any(&v111, v113);
          OUTLINED_FUNCTION_44();
          long long v64 = v110;
        }
        else
        {
          outlined destroy of UUID?((uint64_t)&v111, &demangling cache variable for type metadata for Any?);
          long long v64 = xmmword_18EB37160;
        }
        uint64_t v51 = v103;
        long long *v103 = v64;
        break;
      case 5:
        OUTLINED_FUNCTION_60_0();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        if (!OUTLINED_FUNCTION_38()) {
          goto LABEL_61;
        }
        swift_bridgeObjectRelease();
        uint64_t v69 = OUTLINED_FUNCTION_1_9();
        uint64_t v71 = v70(v69);
        OUTLINED_FUNCTION_62(v71, v72, &demangling cache variable for type metadata for Any?);
        if (v112)
        {
          outlined init with take of Any(&v111, v113);
          OUTLINED_FUNCTION_44();
          uint64_t v74 = *((void *)&v110 + 1);
          uint64_t v73 = v110;
        }
        else
        {
          outlined destroy of UUID?((uint64_t)&v111, &demangling cache variable for type metadata for Any?);
          uint64_t v73 = 0;
          uint64_t v74 = 0;
        }
        uint64_t v51 = v100;
        *uint64_t v100 = v73;
        v51[1] = v74;
        break;
      case 6:
        outlined init with copy of Date?(a1, (uint64_t)v113, &demangling cache variable for type metadata for Any?);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
        uint64_t v76 = v101;
        if (!swift_dynamicCast()) {
          goto LABEL_61;
        }
        outlined destroy of UUID?(v76, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v77 = OUTLINED_FUNCTION_1_9();
        uint64_t v79 = v78(v77);
        OUTLINED_FUNCTION_62(v79, v80, &demangling cache variable for type metadata for Any?);
        if (v112)
        {
          outlined init with take of Any(&v111, v113);
          uint64_t v81 = type metadata accessor for UUID();
          OUTLINED_FUNCTION_98((uint64_t)&v114);
          swift_dynamicCast();
          uint64_t v82 = a2;
          uint64_t v83 = 0;
          uint64_t v84 = v81;
        }
        else
        {
          outlined destroy of UUID?((uint64_t)&v111, &demangling cache variable for type metadata for Any?);
          type metadata accessor for UUID();
          uint64_t v82 = OUTLINED_FUNCTION_98((uint64_t)&v114);
          uint64_t v83 = 1;
        }
        __swift_storeEnumTagSinglePayload(v82, v83, 1, v84);
        swift_storeEnumTagMultiPayload();
        uint64_t v93 = a2;
        return outlined init with take of StorableValue(v93, (uint64_t)v107, (void (*)(void))type metadata accessor for StorableValue);
      case 7:
        if (!*(void *)(a1 + 24))
        {
          uint64_t v94 = OUTLINED_FUNCTION_1_9();
          v95(v94);
          outlined destroy of UUID?(a1, &demangling cache variable for type metadata for Any?);
          return swift_storeEnumTagMultiPayload();
        }
LABEL_61:
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        OUTLINED_FUNCTION_39();
        OUTLINED_FUNCTION_93();
        outlined init with copy of Date?(a1, v85, &demangling cache variable for type metadata for Any?);
        OUTLINED_FUNCTION_72();
        uint64_t v86 = OUTLINED_FUNCTION_1_9();
        v87(v86);
        return outlined destroy of UUID?(a1, &demangling cache variable for type metadata for Any?);
      default:
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        OUTLINED_FUNCTION_39();
        uint64_t v91 = v90;
        v90[3] = (uint64_t)v19;
        __swift_allocate_boxed_opaque_existential_0Tm(v90);
        OUTLINED_FUNCTION_40();
        v23();
        *((_OWORD *)v91 + 2) = 0u;
        *((_OWORD *)v91 + 3) = 0u;
        *((unsigned char *)v91 + 64) = 3;
        swift_willThrow();
        BOOL v92 = *(void (**)(void))(v108 + 8);
        OUTLINED_FUNCTION_59();
        v92();
        outlined destroy of UUID?(a1, &demangling cache variable for type metadata for Any?);
        OUTLINED_FUNCTION_59();
        return ((uint64_t (*)(void))v92)();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v93 = (uint64_t)v51;
    return outlined init with take of StorableValue(v93, (uint64_t)v107, (void (*)(void))type metadata accessor for StorableValue);
  }
  OUTLINED_FUNCTION_60_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  if (!OUTLINED_FUNCTION_38()) {
    goto LABEL_61;
  }
  swift_bridgeObjectRelease();
  uint64_t v35 = OUTLINED_FUNCTION_1_9();
  uint64_t v37 = v36(v35);
  OUTLINED_FUNCTION_62(v37, v38, &demangling cache variable for type metadata for Any?);
  if (v112)
  {
    outlined init with take of Any(&v111, v113);
    OUTLINED_FUNCTION_44();
    uint64_t v40 = *((void *)&v110 + 1);
    uint64_t v39 = v110;
  }
  else
  {
    outlined destroy of UUID?((uint64_t)&v111, &demangling cache variable for type metadata for Any?);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
  }
  uint64_t v75 = (uint64_t)v105;
  *uint64_t v105 = v39;
  *(void *)(v75 + 8) = v40;
  swift_storeEnumTagMultiPayload();
  return outlined init with take of StorableValue(v75, (uint64_t)v107, (void (*)(void))type metadata accessor for StorableValue);
}

uint64_t OUTLINED_FUNCTION_11_0()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

void OUTLINED_FUNCTION_11_2()
{
  *(void *)(v0 - 112) = 0;
  *(void *)(v0 - 104) = 0xE000000000000000;
  _StringGuts.grow(_:)(34);
}

uint64_t OUTLINED_FUNCTION_11_3@<X0>(int a1@<W8>)
{
  *(_DWORD *)(v5 - 436) = a1;
  *(void *)(v5 - 448) = v4 + 104;
  *(void *)(v5 - 456) = v1 + 32;
  *(void *)(v5 - 464) = v3 + 8;
  *(void *)(v5 - 496) = v2 + 64;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_11_4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v2 - 344);
  return outlined init with copy of (key: String, value: SQLDataType)(a1, v4, v1);
}

uint64_t OUTLINED_FUNCTION_21_0()
{
  *(_OWORD *)(v1 - 112) = 0u;
  *(_OWORD *)(v1 - 96) = 0u;
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_1()
{
  return Optional<A>.hashValue.getter();
}

uint64_t OUTLINED_FUNCTION_21_2()
{
  return v0;
}

ValueMetadata *type metadata accessor for SQLDataType()
{
  return &type metadata for SQLDataType;
}

uint64_t outlined init with take of UUID?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_4_3();
  uint64_t v4 = OUTLINED_FUNCTION_89();
  v5(v4);
  return a2;
}

uint64_t outlined init with take of (key: String, value: StorableValue)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_4_3();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t _s10Foundation4UUIDVSgWObTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_45_1();
  v4();
  return a2;
}

uint64_t outlined destroy of UUID?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_2_4();
  v3();
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined destroy of StorableValue(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_2_4();
  v3();
  return a1;
}

uint64_t _s12BiomeStreams13StorableValueOWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_2_4();
  v3();
  return a1;
}

uint64_t _s12BiomeStreams13StorableValueOWOhTm_1(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_2_4();
  v3();
  return a1;
}

uint64_t _s12BiomeStreams13StorableValueOWOhTm_2(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_2_4();
  v3();
  return a1;
}

void OUTLINED_FUNCTION_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_4_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xEu);
}

void OUTLINED_FUNCTION_4_2(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t OUTLINED_FUNCTION_4_4()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_4_5()
{
  return v0;
}

void OUTLINED_FUNCTION_4_6(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

void OUTLINED_FUNCTION_4_7()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_4_8()
{
  uint64_t v3 = *(unsigned int *)(v1 - 4);
  return scanner_errposition(v3, v0);
}

uint64_t type metadata accessor for SelectCorePhysicalPlan(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void OUTLINED_FUNCTION_0_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_2_5(uint64_t a1@<X8>)
{
  *(void *)(v2 - 232) = a1;
  *(void *)(v2 - 224) = (v1 - 32) | 0x8000000000000000;
}

unint64_t OUTLINED_FUNCTION_2_6()
{
  return lazy protocol witness table accessor for type String and conformance String();
}

void OUTLINED_FUNCTION_2_7()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_2_8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 - 112) = 0x336574696C71732ELL;
  *(void *)(v2 - 104) = 0xE800000000000000;
  *(void *)(v2 - 128) = a1;
  *(void *)(v2 - 120) = a2;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_2_9@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 288) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for TimeZone();
}

uint64_t OUTLINED_FUNCTION_2_11()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_2_12()
{
  return errcode();
}

uint64_t destroy for StorableValue(uint64_t *a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 2:
      uint64_t v3 = type metadata accessor for Date();
      goto LABEL_7;
    case 3:
    case 4:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 5:
      unint64_t v6 = a1[1];
      if (v6 >> 60 != 15)
      {
        uint64_t v7 = *a1;
        uint64_t result = outlined consume of Data._Representation(v7, v6);
      }
      break;
    case 6:
      uint64_t v3 = type metadata accessor for UUID();
LABEL_7:
      uint64_t v4 = v3;
      uint64_t result = __swift_getEnumTagSinglePayload((uint64_t)a1, 1, v3);
      if (!result)
      {
        uint64_t v5 = *(uint64_t (**)(uint64_t *, uint64_t))(*(void *)(v4 - 8) + 8);
        uint64_t result = v5(a1, v4);
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined init with copy of SQLExpressionEvaluatorError(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_15_0();
  v4();
  return a2;
}

uint64_t type metadata accessor for StorableValue(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, type metadata singleton initialization cache for StorableValue);
}

uint64_t OUTLINED_FUNCTION_15(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F41854D8](a1, a2, v2, a1);
}

uint64_t OUTLINED_FUNCTION_15_1()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_15_2(uint64_t a1@<X8>)
{
  *(void *)(v3 - 256) = v2;
  if (a1 < 64) {
    uint64_t v5 = ~(-1 << a1);
  }
  else {
    uint64_t v5 = -1;
  }
  *(void *)(v4 - 296) = v5 & v1;
}

uint64_t OUTLINED_FUNCTION_15_4()
{
  return *(void *)(v0 - 176);
}

void OUTLINED_FUNCTION_0_1(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 2u);
}

void OUTLINED_FUNCTION_1_5(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, v9, OS_LOG_TYPE_FAULT, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_5(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_1_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_3(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

uint64_t OUTLINED_FUNCTION_1_9()
{
  return *(void *)(v0 - 184);
}

void OUTLINED_FUNCTION_1_11()
{
  *(void *)(v1 - 104) = v0[1];
  *(void *)(v1 - 136) = v0[2];
  *(void *)(v1 - 144) = v0[3];
  *(void *)(v1 - 160) = v0[4];
  *(void *)(v1 - 168) = v0[5];
  *(void *)(v1 - 176) = v0[6];
  *(void *)(v1 - 184) = v0[7];
  *(_DWORD *)(v1 - 188) = v0[14];
}

uint64_t OUTLINED_FUNCTION_1_13()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_1_14()
{
  *(void *)(v1 - 120) = v0;
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t OUTLINED_FUNCTION_1_15()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_1_16()
{
  return errstart(20, 0);
}

uint64_t outlined init with take of StorableValue(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_4_3();
  uint64_t v4 = OUTLINED_FUNCTION_89();
  v5(v4);
  return a2;
}

uint64_t _s12BiomeStreams13StorableValueOWObTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_45_1();
  v4();
  return a2;
}

uint64_t _s12BiomeStreams13StorableValueOWObTm_1(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_45_1();
  v4();
  return a2;
}

uint64_t OUTLINED_FUNCTION_89()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_89_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_89_1()
{
  return outlined init with copy of Date?(v0, v1);
}

BOOL OUTLINED_FUNCTION_89_2@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_10_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t OUTLINED_FUNCTION_10_2@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 200) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
}

uint64_t OUTLINED_FUNCTION_10_3()
{
  return *(void *)(v0 - 480);
}

uint64_t OUTLINED_FUNCTION_40_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_38()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_13(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_38_1()
{
  *(void *)(v8 - 544) = v2;
  *(void *)(v8 - 536) = v6;
  *(void *)(v8 - 528) = v5;
  *(void *)(v8 - 520) = v4;
  *(void *)(v8 - 72) = v1;
  uint64_t v10 = v7 + *(int *)(v3 + 36);
  uint64_t v11 = *(void *)(v8 - 120);
  return SQLExpressionEvaluator.execute(expression:payload:)(v10, v11, v0);
}

uint64_t OUTLINED_FUNCTION_38_2()
{
  return outlined destroy of UUID?(v0, v1);
}

void OUTLINED_FUNCTION_38_3(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_24_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_24_1()
{
  return swift_dynamicCast();
}

double OUTLINED_FUNCTION_13_0@<D0>(double a1@<X8>)
{
  return floor(a1);
}

void OUTLINED_FUNCTION_24_2(uint64_t a1@<X8>)
{
  *(void *)(a1 - 256) = v1;
}

ValueMetadata *OUTLINED_FUNCTION_68_0()
{
  return type metadata accessor for SQLDataType();
}

size_t OUTLINED_FUNCTION_68_2(const void *a1)
{
  return _swift_stdlib_malloc_size(a1);
}

uint64_t OUTLINED_FUNCTION_68_3(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  return static KeyedAggregationMetadataCache.tableName(materializedViewName:)(a1, a2, 27, 0xD000000000000019, a5);
}

uint64_t OUTLINED_FUNCTION_92_0()
{
  return outlined destroy of UUID?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_92_1()
{
  *(void *)(v1 - 152) = 0;
  *(void *)(v1 - 144) = 0xE000000000000000;
  return v0;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t static BMPoirotSchematizerShim.searchValue(in:withFieldNumber:typeRawValue:error:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t)@<X5>, _OWORD *a6@<X8>)
{
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyValue?);
  MEMORY[0x1F4188790](v13 - 8);
  OUTLINED_FUNCTION_68();
  type metadata accessor for TypeSchema();
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_3_13();
  static BMPoirotSchematizerShim.bmTypeToPoirotType(type:)(a4, v15);
  a5(a1, a2, a3, v6);
  static BMPoirotSchematizerShim.poirotValueToObjcValue(value:)(v7, a6);
  outlined destroy of AnyValue?(v7, (uint64_t *)&demangling cache variable for type metadata for AnyValue?);
  uint64_t v16 = OUTLINED_FUNCTION_2_11();
  return v17(v16);
}

void OUTLINED_FUNCTION_3_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  return objc_opt_class();
}

uint64_t OUTLINED_FUNCTION_3_4(uint64_t a1)
{
  return a1 + *(int *)(v1 + 36);
}

uint64_t OUTLINED_FUNCTION_3_5()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t OUTLINED_FUNCTION_3_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_3_7(uint64_t a1)
{
  return a1 - 8;
}

unint64_t OUTLINED_FUNCTION_3_8()
{
  return lazy protocol witness table accessor for type String and conformance String();
}

void OUTLINED_FUNCTION_3_10()
{
  uint64_t v1 = 0x6E20612073616820;
  unint64_t v2 = 0xEF68746170206C69;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_3_11()
{
  return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
}

unint64_t OUTLINED_FUNCTION_3_12()
{
  return *(void *)(v1 - 184)
       + ((*(unsigned __int8 *)(*(void *)(v1 - 216) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 216) + 80))
       + *(void *)(*(void *)(v1 - 216) + 72) * v0;
}

uint64_t OUTLINED_FUNCTION_3_14()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_3_15()
{
  uint64_t v3 = *v1;
  return scanner_errposition(v3, v0);
}

uint64_t outlined destroy of AnyValue?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t static BMPoirotSchematizerShim.searchValue(in:withFieldNumber:typeRawValue:error:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  return static BMPoirotSchematizerShim.searchValue(in:withFieldNumber:typeRawValue:error:)(a1, a2, a3, a4, MEMORY[0x1E4F92150], a5);
}

uint64_t static BMPoirotSchematizerShim.poirotValueToObjcValue(value:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for SchematizedData();
  uint64_t v33 = *(void *)(v4 - 8);
  ((void (*)(void))MEMORY[0x1F4188790])();
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for EnumValue();
  uint64_t v32 = *(void *)(v7 - 8);
  ((void (*)(void))MEMORY[0x1F4188790])();
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyValue?);
  ((void (*)(void))MEMORY[0x1F4188790])();
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AnyValue();
  uint64_t v13 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v32 - v16;
  outlined init with copy of AnyValue?(a1, (uint64_t)v11);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12) == 1)
  {
    uint64_t result = outlined destroy of AnyValue?((uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for AnyValue?);
    *a2 = 0u;
    a2[1] = 0u;
  }
  else
  {
    outlined init with take of AnyValue((uint64_t)v11, (uint64_t)v17);
    outlined init with copy of AnyValue((uint64_t)v17, (uint64_t)v15);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        int v19 = *(_DWORD *)v15;
        uint64_t v20 = MEMORY[0x1E4FBC4C0];
        goto LABEL_11;
      case 2u:
        uint64_t v22 = *(void *)v15;
        uint64_t v23 = MEMORY[0x1E4FBC1C8];
        goto LABEL_9;
      case 3u:
        uint64_t v22 = *(void *)v15;
        uint64_t v23 = MEMORY[0x1E4FBC538];
LABEL_9:
        uint64_t v35 = v23;
        *(void *)&long long v34 = v22;
        goto LABEL_15;
      case 4u:
        int v21 = *(_DWORD *)v15;
        uint64_t v35 = MEMORY[0x1E4FBB470];
        LODWORD(v34) = v21;
        goto LABEL_15;
      case 5u:
        uint64_t v26 = *(void *)v15;
        uint64_t v35 = MEMORY[0x1E4FBB3D0];
        *(void *)&long long v34 = v26;
        goto LABEL_15;
      case 6u:
        char v27 = *v15;
        uint64_t v35 = MEMORY[0x1E4FBB390];
        LOBYTE(v34) = v27;
        goto LABEL_15;
      case 7u:
        (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v9, v15, v7);
        *(void *)&long long v34 = 0;
        *((void *)&v34 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(62);
        v30._uint64_t countAndFlagsBits = 0xD000000000000016;
        v30._object = (void *)0x800000018EBE9E50;
        String.append(_:)(v30);
        _print_unlocked<A, B>(_:_:)();
        v31._object = (void *)0x800000018EBE9E20;
        v31._uint64_t countAndFlagsBits = 0xD000000000000026;
        String.append(_:)(v31);
        goto LABEL_19;
      case 8u:
        uint64_t v24 = *(void *)v15;
        uint64_t v25 = *((void *)v15 + 1);
        uint64_t v35 = MEMORY[0x1E4FBB1A0];
        *(void *)&long long v34 = v24;
        *((void *)&v34 + 1) = v25;
        goto LABEL_15;
      case 9u:
        uint64_t v35 = MEMORY[0x1E4F277C0];
        long long v34 = *(_OWORD *)v15;
        goto LABEL_15;
      case 0xAu:
        (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v6, v15, v4);
        *(void *)&long long v34 = 0;
        *((void *)&v34 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(65);
        v28._uint64_t countAndFlagsBits = 0xD000000000000019;
        v28._object = (void *)0x800000018EBE9E00;
        String.append(_:)(v28);
        _print_unlocked<A, B>(_:_:)();
        v29._object = (void *)0x800000018EBE9E20;
        v29._uint64_t countAndFlagsBits = 0xD000000000000026;
        String.append(_:)(v29);
LABEL_19:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        break;
      default:
        int v19 = *(_DWORD *)v15;
        uint64_t v20 = MEMORY[0x1E4FBC150];
LABEL_11:
        uint64_t v35 = v20;
        LODWORD(v34) = v19;
LABEL_15:
        outlined destroy of AnyValue((uint64_t)v17);
        uint64_t result = outlined init with take of Any?((uint64_t)&v34, (uint64_t)a2);
        break;
    }
  }
  return result;
}

uint64_t outlined init with copy of AnyValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for KeyedAggregationMetadataCache(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, type metadata singleton initialization cache for KeyedAggregationMetadataCache);
}

uint64_t OUTLINED_FUNCTION_62(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return outlined init with take of UUID?(v3, v4 - 152, a3);
}

uint64_t OUTLINED_FUNCTION_62_2@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = *(void *)(v2 + a1);
  return swift_bridgeObjectRetain();
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_35(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_44()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_44_0()
{
  return 0;
}

uint64_t type metadata accessor for KeyedFirstMatchingRecordCache(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for KeyedFirstMatchingRecordCache);
}

uint64_t ResultColumn.alias.getter()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t destroy for KeyedFirstMatchingRecordCache(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_81_2();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_2_4();
  v4();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = *(void *)(v2 + *(int *)(a2 + 60) + 8);
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_81()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_81_0()
{
  return v0 + *(int *)(type metadata accessor for AggregationEvent(0) + 20);
}

void OUTLINED_FUNCTION_81_1()
{
  Hasher._combine(_:)(1u);
}

ValueMetadata *OUTLINED_FUNCTION_81_2()
{
  return type metadata accessor for MaterializedView();
}

uint64_t type metadata accessor for BookmarkCache(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for BookmarkCache);
}

uint64_t type metadata accessor for BMSQLColumn(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

void initializeWithCopy for KeyedFirstMatchingRecordCache()
{
  OUTLINED_FUNCTION_104_1();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  OUTLINED_FUNCTION_81_2();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_15_0();
  v5();
  uint64_t v6 = v2[6];
  *(void *)(v0 + v2[5]) = *(void *)(v4 + v2[5]);
  *(void *)(v0 + v6) = *(void *)(v4 + v6);
  uint64_t v7 = v2[8];
  *(void *)(v0 + v2[7]) = *(void *)(v4 + v2[7]);
  uint64_t v8 = (void *)(v0 + v7);
  uint64_t v9 = v4 + v7;
  uint64_t v10 = *(void **)v9;
  uint64_t v20 = *(void *)(v9 + 8);
  *uint64_t v8 = *(void *)v9;
  v8[1] = v20;
  uint64_t v11 = v2[10];
  *(void *)(v0 + v2[9]) = *(void *)(v4 + v2[9]);
  *(void *)(v0 + v11) = *(void *)(v4 + v11);
  uint64_t v12 = v2[12];
  *(void *)(v0 + v2[11]) = *(void *)(v4 + v2[11]);
  *(void *)(v0 + v12) = *(void *)(v4 + v12);
  uint64_t v13 = v2[14];
  *(void *)(v0 + v2[13]) = *(void *)(v4 + v2[13]);
  *(unsigned char *)(v0 + v13) = *(unsigned char *)(v4 + v13);
  uint64_t v14 = v2[15];
  uint64_t v15 = (_OWORD *)(v0 + v14);
  uint64_t v16 = v4 + v14;
  uint64_t v17 = *(void *)(v16 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v18 = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v17)
  {
    OUTLINED_FUNCTION_94_2();
    swift_retain();
  }
  else
  {
    long long v19 = *(_OWORD *)(v16 + 16);
    _OWORD *v15 = *(_OWORD *)v16;
    v15[1] = v19;
  }
  OUTLINED_FUNCTION_93_2();
}

uint64_t OUTLINED_FUNCTION_94@<X0>(unint64_t a1@<X8>)
{
  if (a1 >= 0xFFFFFFFF) {
    LODWORD(a1) = -1;
  }
  return (a1 + 1);
}

uint64_t OUTLINED_FUNCTION_94_0()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t OUTLINED_FUNCTION_94_2()
{
  *uint64_t v2 = *v1;
  v2[1] = v0;
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  v2[2] = v4;
  v2[3] = v5;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_104(uint64_t a1@<X8>)
{
  *(void *)((a1 + 7 + v2) & 0xFFFFFFFFFFFFFFF8) = *(void *)((a1 + 7 + v1) & 0xFFFFFFFFFFFFFFF8);
}

void OUTLINED_FUNCTION_104_0()
{
  Swift::UInt v2 = *(void *)(v0 + 16);
  Hasher._combine(_:)(v2);
}

uint64_t OUTLINED_FUNCTION_93_1()
{
  uint64_t v3 = *(void *)(v1 - 224);
  return outlined destroy of UUID?(v3, v0);
}

uint64_t type metadata accessor for AggregationEvent(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for AggregationEvent);
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1))
  {
    uint64_t result = a2(v3 > 1);
    *(void *)uint64_t v2 = result;
  }
  return result;
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(result, *(void *)(v3 + 16) + 1, 1, v3);
    *uint64_t v1 = result;
  }
  return result;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(v5 + 16) = a1 + 1;
  uint64_t v6 = type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_3_7(v6);
  return _s12BiomeStreams13StorableValueOWObTm_1(a2, v5+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v8 + 72) * a1, (void (*)(void))type metadata accessor for StorableValue);
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    OUTLINED_FUNCTION_17();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_60();
      if (v12)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_26_0();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v16 = (void *)swift_allocObject();
    size_t v17 = _swift_stdlib_malloc_size(v16);
    v16[2] = v14;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 16);
  }
  else
  {
    uint64_t v16 = (void *)MEMORY[0x1E4FBC860];
  }
  id v18 = v16 + 4;
  if (a1)
  {
    a7(a4 + 32, v14, v18);
    OUTLINED_FUNCTION_46_2();
  }
  else
  {
    a6(0, v14, v18, a4);
  }
}

void *__swift_memcpy128_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80uLL);
}

uint64_t __BMEventBodyDataSQLColumn_block_invoke(uint64_t a1, void *a2)
{
  return [a2 eventBodyData];
}

uint64_t SelectCore.where.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PgQuery_Alias?(v1 + 104, a1, &demangling cache variable for type metadata for SQLExpression?);
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : StorableValue]);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 40 * a1 + 32;
    unint64_t v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Aggregation);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + (a1 << 7) + 32;
    unint64_t v6 = a3 + (v4 << 7);
    if (v5 >= v6 || v5 + (v4 << 7) <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    uint64_t result = (char *)OUTLINED_FUNCTION_3_14();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_7_7(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    uint64_t result = (char *)OUTLINED_FUNCTION_3_14();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_7_7(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    uint64_t result = (char *)OUTLINED_FUNCTION_3_14();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_7_7(a3, result);
  }
  return result;
}

uint64_t SQLExpressionEvaluator.evaluatesToTrue(expression:payload:)(uint64_t a1, uint64_t a2)
{
  uint64_t v58 = a2;
  uint64_t v55 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  uint64_t v53 = v5;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_10();
  uint64_t v54 = v7;
  uint64_t v8 = type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v56 = v9;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_24();
  type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_0_4();
  BOOL v57 = (char *)v11;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_47();
  uint64_t v15 = v13 - v14;
  uint64_t v17 = MEMORY[0x1F4188790](v16);
  long long v19 = (sqlite3_stmt *)((char *)v50 - v18);
  MEMORY[0x1F4188790](v17);
  int v21 = (char *)v50 - v20;
  uint64_t v22 = v59;
  SQLExpressionEvaluator.execute(expression:payload:)(a1, v58, (void *)((char *)v50 - v20));
  if (!v22)
  {
    uint64_t v58 = v3;
    uint64_t v59 = v19;
    uint64_t v51 = v15;
    uint64_t v52 = v8;
    v50[1] = a1;
    uint64_t v24 = *(sqlite3_stmt **)(v2 + 40);
    uint64_t v25 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>);
    uint64_t v26 = *((void *)v57 + 9);
    unint64_t v27 = (v57[80] + 32) & ~(unint64_t)v57[80];
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_18EB384C0;
    uint64_t v29 = v28 + v27;
    outlined init with copy of SQLExpressionEvaluatorError((uint64_t)v21, v29, (void (*)(void))type metadata accessor for StorableValue);
    outlined init with copy of SQLExpressionEvaluatorError((uint64_t)v21, v29 + v26, (void (*)(void))type metadata accessor for StorableValue);
    outlined init with copy of SQLExpressionEvaluatorError((uint64_t)v21, v29 + 2 * v26, (void (*)(void))type metadata accessor for StorableValue);
    uint64_t v30 = SQLExpressionEvaluator.execute(stmt:bindingValues:)(v24, v28);
    BOOL v57 = v21;
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    if (v30 && *(void *)(v30 + 16) == 1)
    {
      uint64_t v31 = specialized Dictionary.startIndex.getter(v30);
      uint64_t v25 = v58;
      uint64_t v24 = v59;
      if (v33)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      if (*(_DWORD *)(v30 + 36) == v32)
      {
        if (v31 != 1 << *(unsigned char *)(v30 + 32))
        {
          uint64_t v34 = OUTLINED_FUNCTION_29_0();
          specialized Dictionary.subscript.getter(v34, v35, v36, v37);
          uint64_t v38 = v62;
          unint64_t v39 = v63;
          int v40 = v64;
          swift_bridgeObjectRetain();
          outlined copy of DatabaseValue(v38, v39, v40);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_16_0();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, void, ValueMetadata *))(v56 + 104))(v25, 0, v52);
          static StorableValue.fromDatabaseValue(_:dataType:)(v38, v39, v40, v25, (uint64_t *)v24);
          uint64_t v42 = OUTLINED_FUNCTION_18_1();
          v43(v42);
          OUTLINED_FUNCTION_16_0();
          uint64_t v25 = v51;
          outlined init with copy of SQLExpressionEvaluatorError((uint64_t)v24, v51, (void (*)(void))type metadata accessor for StorableValue);
          if (!swift_getEnumCaseMultiPayload())
          {
            _s12BiomeStreams13StorableValueOWOhTm_0((uint64_t)v24, (void (*)(void))type metadata accessor for StorableValue);
            _s12BiomeStreams13StorableValueOWOhTm_0((uint64_t)v57, (void (*)(void))type metadata accessor for StorableValue);
            char v23 = (*(void *)v25 > 0) & ~*(unsigned char *)(v25 + 8);
            return v23 & 1;
          }
LABEL_16:
          _s12BiomeStreams13StorableValueOWOhTm_0(v25, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v30 = v54;
          OUTLINED_FUNCTION_15_0();
          v45();
          uint64_t v60 = 0;
          unint64_t v61 = 0xE000000000000000;
          _StringGuts.grow(_:)(61);
          OUTLINED_FUNCTION_36(0xD000000000000029, (uint64_t)"Unexpected result from truthy evaluation ");
          unint64_t v44 = MEMORY[0x1E4FBBEE0];
          _print_unlocked<A, B>(_:_:)();
          OUTLINED_FUNCTION_35_1();
          v46._uint64_t countAndFlagsBits = 0xD000000000000010;
          String.append(_:)(v46);
          _print_unlocked<A, B>(_:_:)();
          while (1)
          {
            OUTLINED_FUNCTION_11_0();
            __break(1u);
LABEL_18:
            v47._uint64_t countAndFlagsBits = String.init(cString:)();
            String.append(_:)(v47);
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_36(v44 + 5, (uint64_t)", expected 1 but got ");
            if (v30)
            {
              uint64_t v48 = *(void *)(v30 + 16);
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v48 = 0;
            }
            uint64_t v65 = v48;
            v49._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v49);
            swift_bridgeObjectRelease();
          }
        }
LABEL_15:
        swift_bridgeObjectRelease();
        __break(1u);
        goto LABEL_16;
      }
      __break(1u);
    }
    unint64_t v44 = 0xD000000000000010;
    uint64_t v60 = 0;
    unint64_t v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    OUTLINED_FUNCTION_36(0xD000000000000025, (uint64_t)"Unexpected number of columns in from ");
    if (sqlite3_sql(v24)) {
      goto LABEL_18;
    }
    __break(1u);
    goto LABEL_14;
  }
  return v23 & 1;
}

uint64_t specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t destroy for AggregationEvent(uint64_t *a1, uint64_t a2)
{
  type metadata accessor for StorableValue(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t v4 = type metadata accessor for Date();
      goto LABEL_5;
    case 3u:
    case 4u:
      swift_bridgeObjectRelease();
      break;
    case 5u:
      unint64_t v6 = a1[1];
      if (v6 >> 60 != 15) {
        outlined consume of Data._Representation(*a1, v6);
      }
      break;
    case 6u:
      uint64_t v4 = type metadata accessor for UUID();
LABEL_5:
      uint64_t v5 = v4;
      if (!__swift_getEnumTagSinglePayload((uint64_t)a1, 1, v4)) {
        (*(void (**)(uint64_t *, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      }
      break;
    default:
      break;
  }
  uint64_t v7 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v8 = type metadata accessor for SQLDataType();
  uint64_t v9 = (uint64_t (*)(char *, ValueMetadata *))*((void *)v8[-1].Description + 1);

  return v9(v7, v8);
}

uint64_t dispatch thunk of static IntelligencePlatformView.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

NSString *__BMEventClassNameSQLColumn_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = (objc_class *)[a2 dataType];

  return NSStringFromClass(v2);
}

id BiomeLibraryNodeBridge()
{
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000;
  uint64_t v0 = (void (*)(void))getBiomeLibraryNodeSymbolLoc_ptr;
  uint64_t v15 = getBiomeLibraryNodeSymbolLoc_ptr;
  if (!getBiomeLibraryNodeSymbolLoc_ptr)
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = __getBiomeLibraryNodeSymbolLoc_block_invoke;
    v11[3] = &unk_1E55D6DA8;
    v11[4] = &v12;
    __getBiomeLibraryNodeSymbolLoc_block_invoke((uint64_t)v11);
    uint64_t v0 = (void (*)(void))v13[3];
  }
  _Block_object_dispose(&v12, 8);
  if (!v0) {
    BiomeLibraryNodeBridge_cold_1();
  }
  uint64_t v1 = v0();
  if (!v1)
  {
    uint64_t v2 = __biome_log_for_category();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      BiomeLibraryNodeBridge_cold_2(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }

  return v1;
}

void sub_18E6865E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id BiomeLibraryInternalNodeBridge()
{
  if (!os_variant_has_internal_content()) {
    goto LABEL_12;
  }
  if (!BiomeLibraryInternalLibraryCore()
    || !BiomeLibraryInternalLibraryCore()
    || !getBiomeLibraryInternalNodeSymbolLoc())
  {
    uint64_t v2 = __biome_log_for_category();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      BiomeLibraryInternalNodeBridge_cold_1(v2, v10, v11, v12, v13, v14, v15, v16);
    }
    goto LABEL_11;
  }
  BiomeLibraryInternalNodeSymbolLoc = (void (*)(void))getBiomeLibraryInternalNodeSymbolLoc();
  if (!BiomeLibraryInternalNodeSymbolLoc) {
    BiomeLibraryInternalNodeBridge_cold_2();
  }
  uint64_t v1 = BiomeLibraryInternalNodeSymbolLoc();
  if (!v1)
  {
    uint64_t v2 = __biome_log_for_category();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      BiomeLibraryInternalNodeBridge_cold_3(v2, v3, v4, v5, v6, v7, v8, v9);
    }
LABEL_11:

LABEL_12:
    uint64_t v1 = 0;
  }

  return v1;
}

uint64_t BiomeLibraryInternalLibraryCore()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = BiomeLibraryInternalLibraryCore_frameworkLibrary;
  uint64_t v5 = BiomeLibraryInternalLibraryCore_frameworkLibrary;
  if (!BiomeLibraryInternalLibraryCore_frameworkLibrary)
  {
    long long v6 = xmmword_1E55D7AD8;
    long long v7 = *(_OWORD *)&off_1E55D7AE8;
    v3[3] = _sl_dlopen();
    BiomeLibraryInternalLibraryCore_frameworkLibrary = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_18E6867D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getBiomeLibraryInternalNodeSymbolLoc()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000;
  uint64_t v0 = getBiomeLibraryInternalNodeSymbolLoc_ptr;
  uint64_t v6 = getBiomeLibraryInternalNodeSymbolLoc_ptr;
  if (!getBiomeLibraryInternalNodeSymbolLoc_ptr)
  {
    uint64_t v1 = (void *)BiomeLibraryInternalLibrary();
    v4[3] = (uint64_t)dlsym(v1, "BiomeLibraryInternalNode");
    getBiomeLibraryInternalNodeSymbolLoc_ptr = v4[3];
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_18E6868C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getBiomeLibraryNodeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  v4[0] = 0;
  if (!BiomeLibraryLibraryCore_frameworkLibrary_2)
  {
    v4[1] = (void *)MEMORY[0x1E4F143A8];
    v4[2] = (void *)3221225472;
    v4[3] = __BiomeLibraryLibraryCore_block_invoke_2;
    v4[4] = &__block_descriptor_40_e5_v8__0l;
    v4[5] = v4;
    long long v5 = xmmword_1E55D7B20;
    uint64_t v6 = 0;
    BiomeLibraryLibraryCore_frameworkLibrary_2 = _sl_dlopen();
  }
  uint64_t v2 = (void *)BiomeLibraryLibraryCore_frameworkLibrary_2;
  if (!BiomeLibraryLibraryCore_frameworkLibrary_2) {
    __getBiomeLibraryNodeSymbolLoc_block_invoke_cold_1(v4);
  }
  if (v4[0]) {
    free(v4[0]);
  }
  uint64_t result = dlsym(v2, "BiomeLibraryNode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBiomeLibraryNodeSymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t BiomeLibraryInternalLibrary()
{
  uint64_t v1 = 0;
  uint64_t result = BiomeLibraryInternalLibraryCore();
  if (!result) {
    BiomeLibraryInternalLibrary_cold_1(&v1);
  }
  return result;
}

uint64_t SQLExpressionEvaluator.__deallocating_deinit()
{
  SQLExpressionEvaluator.deinit();

  return MEMORY[0x1F4186488](v0, 48, 7);
}

uint64_t SQLExpressionEvaluator.deinit()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 32);
  unint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  uint64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    sqlite3_finalize(*(sqlite3_stmt **)(*(void *)(v2 + 56) + 8 * i));
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v7) {
      break;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (v12) {
      goto LABEL_18;
    }
    uint64_t v8 = v11 + 1;
    if (v11 + 1 >= v7) {
      break;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    if (v12) {
      goto LABEL_18;
    }
    uint64_t v8 = v11 + 2;
    if (v11 + 2 >= v7) {
      break;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    if (v12) {
      goto LABEL_18;
    }
    uint64_t v13 = v11 + 3;
    if (v13 >= v7) {
      break;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        uint64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          break;
        }
        if (v8 >= v7) {
          goto LABEL_21;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_18;
        }
      }
LABEL_29:
      __break(1u);
LABEL_30:
      swift_once();
LABEL_24:
      uint64_t v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logging.SQL);
      swift_bridgeObjectRetain();
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        uint64_t v25 = swift_slowAlloc();
        v27[0] = v25;
        *(_DWORD *)uint64_t v24 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v3, v27);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_18E67D000, v22, v23, "SQLExpressionEvaluator: Failed to close database connection with error: %s", v24, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x192FB1900](v25, -1, -1);
        MEMORY[0x192FB1900](v24, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      goto LABEL_27;
    }
    uint64_t v8 = v13;
LABEL_18:
    unint64_t v6 = (v12 - 1) & v12;
  }
LABEL_21:
  swift_release();
  sqlite3_finalize(*(sqlite3_stmt **)(v1 + 40));
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    uint64_t v14 = *(sqlite3 **)(v1 + 24);
    uint64_t v15 = sqlite3_close_v2(v14);
    if (v15)
    {
      id v16 = BMSQLDatabaseError(v15, v14, 0);
      swift_getErrorValue();
      uint64_t v17 = Error.localizedDescription.getter();
      uint64_t v19 = v18;

      v27[0] = v17;
      v27[1] = v19;
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_6_5();
      uint64_t v7 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      unint64_t v3 = v20;
      swift_bridgeObjectRelease();
      if (one-time initialization token for SQL != -1) {
        goto LABEL_30;
      }
      goto LABEL_24;
    }
  }
LABEL_27:
  swift_bridgeObjectRelease();
  return v1;
}

BMSQLEventMetadataColumn *BMEventBodyDataSQLColumn()
{
  uint64_t v0 = -[BMSQLEventMetadataColumn initWithName:dataType:requestOnly:extractBlock:setValueBlock:]([BMSQLEventMetadataColumn alloc], "initWithName:dataType:requestOnly:extractBlock:setValueBlock:", @"_eventBodyData", 4, 1);

  return v0;
}

BMSQLEventMetadataColumn *BMEventClassNameSQLColumn()
{
  uint64_t v0 = -[BMSQLEventMetadataColumn initWithName:dataType:requestOnly:extractBlock:setValueBlock:]([BMSQLEventMetadataColumn alloc], "initWithName:dataType:requestOnly:extractBlock:setValueBlock:", @"_eventClassName", 2, 1);

  return v0;
}

BMSQLEventMetadataColumn *BMEventTimestampSQLColumn()
{
  uint64_t v0 = [BMSQLEventMetadataColumn alloc];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = __BMEventTimestampSQLColumn_block_invoke_2;
  v5[3] = &unk_1E55D72C8;
  id v6 = &__block_literal_global_10;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = __BMEventTimestampSQLColumn_block_invoke_3;
  v3[3] = &unk_1E55D72F0;
  id v4 = &__block_literal_global_10;
  uint64_t v1 = [(BMSQLEventMetadataColumn *)v0 initWithName:@"eventTimestamp" dataType:3 requestOnly:0 extractBlock:v5 setValueBlock:v3];

  return v1;
}

uint64_t *initializeWithCopy for StorableValue(uint64_t *a1, void *a2, uint64_t a3)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t v6 = type metadata accessor for Date();
      if (!__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6)) {
        goto LABEL_11;
      }
      uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
      goto LABEL_12;
    case 3u:
    case 4u:
      uint64_t v8 = a2[1];
      *a1 = *a2;
      a1[1] = v8;
      swift_bridgeObjectRetain();
      goto LABEL_12;
    case 5u:
      unint64_t v9 = a2[1];
      if (v9 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        uint64_t v11 = *a2;
        outlined copy of Data._Representation(v11, v9);
        *a1 = v11;
        a1[1] = v9;
      }
      goto LABEL_12;
    case 6u:
      uint64_t v6 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v6))
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
LABEL_11:
        (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v6);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      break;
    default:
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

const char *bind(_:to:db:)(uint64_t a1, sqlite3_stmt *a2, sqlite3 *a3)
{
  char v165 = a3;
  v189 = a2;
  uint64_t v204 = *MEMORY[0x1E4F143B8];
  uint64_t v162 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v162 - 8);
  int64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v162 - 8);
  uint64_t v161 = (char *)&v151 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v163 = (uint64_t)&v151 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v151 - v9;
  uint64_t v171 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v171 - 8);
  MEMORY[0x1F4188790](v171);
  v168 = (char *)&v151 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (uint64_t *)&demangling cache variable for type metadata for Date?;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v170 = (uint64_t)&v151 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v174 = (uint64_t)&v151 - v17;
  v193 = type metadata accessor for SQLDataType();
  Swift::Int Description = (char *)v193[-1].Description;
  MEMORY[0x1F4188790](v193);
  v192 = (char *)&v151 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v199 = type metadata accessor for StorableValue(0);
  uint64_t v185 = *(void *)(v199 - 8);
  uint64_t v20 = MEMORY[0x1F4188790](v199);
  uint64_t v159 = (uint64_t)&v151 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  v160 = (uint64_t *)((char *)&v151 - v23);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (uint64_t *)((char *)&v151 - v25);
  uint64_t v27 = MEMORY[0x1F4188790](v24);
  uint64_t v164 = (uint64_t)&v151 - v28;
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v175 = (uint64_t)&v151 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v172 = (uint64_t)&v151 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v181 = (uint64_t)&v151 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v183 = (uint64_t)&v151 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v198 = (uint64_t)&v151 - v38;
  MEMORY[0x1F4188790](v37);
  int v40 = (char *)&v151 - v39;
  uint64_t v196 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: StorableValue));
  MEMORY[0x1F4188790](v196);
  v184 = (char *)&v151 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: StorableValue)?);
  uint64_t v43 = MEMORY[0x1F4188790](v42 - 8);
  v195 = (char *)&v151 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v43);
  v194 = (uint64_t *)((char *)&v151 - v45);
  unint64_t v46 = *(void *)(a1 + 16);
  unsigned int v176 = 7;
  v191 = (void (**)(char *, void, ValueMetadata *))(Description + 104);
  unsigned int v177 = 6;
  unsigned int v179 = 4;
  unsigned int v178 = 5;
  unsigned int v182 = 2;
  unsigned int v180 = 3;
  v154 = (uint64_t (**)(char *, ValueMetadata *))Description;
  v190 = (uint64_t (**)(char *, ValueMetadata *))(Description + 88);
  uint64_t v157 = (void (**)(char *, uint64_t, uint64_t))(v4 + 32);
  int64_t v158 = v5;
  int v155 = v5;
  unsigned int v187 = 1;
  uint64_t v156 = (void (**)(char *, uint64_t))(v4 + 8);
  v167 = (void (**)(char *, uint64_t, uint64_t))(v11 + 32);
  id v166 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v47 = (uint64_t)v10;
  unsigned int v197 = 0;
  uint64_t v186 = a1;
  uint64_t v48 = (uint64_t)v40;
  swift_bridgeObjectRetain();
  unint64_t v49 = 0;
  unint64_t v188 = v46;
  v173 = v40;
  while (1)
  {
    if (v49 == v46)
    {
      uint64_t v50 = 1;
      unint64_t v49 = v46;
      uint64_t v52 = (unint64_t *)v195;
      uint64_t v51 = v196;
    }
    else
    {
      uint64_t v52 = (unint64_t *)v195;
      uint64_t v51 = v196;
      if (v49 >= v46) {
        goto LABEL_154;
      }
      uint64_t v53 = (uint64_t)&v184[*(int *)(v196 + 48)];
      outlined init with copy of SQLExpressionEvaluatorError(v186+ ((*(unsigned __int8 *)(v185 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80))+ *(void *)(v185 + 72) * v49, v53, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v54 = (uint64_t)v52 + *(int *)(v51 + 48);
      *uint64_t v52 = v49;
      outlined init with take of StorableValue(v53, v54);
      uint64_t v50 = 0;
      ++v49;
    }
    __swift_storeEnumTagSinglePayload((uint64_t)v52, v50, 1, v51);
    uint64_t v55 = v194;
    outlined init with take of (key: String, value: StorableValue)((uint64_t)v52, (uint64_t)v194, &demangling cache variable for type metadata for (offset: Int, element: StorableValue)?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v55, 1, v51) == 1) {
      return (const char *)swift_bridgeObjectRelease();
    }
    uint64_t v56 = v47;
    uint64_t v57 = *v55;
    outlined init with take of StorableValue((uint64_t)v55 + *(int *)(v51 + 48), v48);
    uint64_t v58 = v57 + 1;
    if (__OFADD__(v57, 1))
    {
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      swift_allocError();
      uint64_t v146 = v48;
      v148 = v147;
      uint64_t v149 = v193;
      v147[3] = (uint64_t)v193;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v147);
      StorableValue.dataType.getter((uint64_t)boxed_opaque_existential_0);
      *((_OWORD *)v148 + 2) = 0u;
      *((_OWORD *)v148 + 3) = 0u;
      *((unsigned char *)v148 + 64) = 3;
      swift_willThrow();
      _s12BiomeStreams13StorableValueOWOhTm_0(v146, (void (*)(void))type metadata accessor for StorableValue);
      return (const char *)v154[1](v192, v149);
    }
    if (v58 < (uint64_t)0xFFFFFFFF80000000) {
      goto LABEL_152;
    }
    if (v58 > 0x7FFFFFFF) {
      goto LABEL_153;
    }
    uint64_t v59 = v13;
    uint64_t v60 = v48;
    outlined init with copy of SQLExpressionEvaluatorError(v48, v198, (void (*)(void))type metadata accessor for StorableValue);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v62 = v193;
    unint64_t v63 = v192;
    switch(EnumCaseMultiPayload)
    {
      case 1:
        (*v191)(v192, v187, v193);
        break;
      case 2:
        (*v191)(v192, v180, v193);
        goto LABEL_18;
      case 3:
        _s12BiomeStreams13StorableValueOWOhTm_0(v198, (void (*)(void))type metadata accessor for StorableValue);
        (*v191)(v63, v182, v62);
        break;
      case 4:
        _s12BiomeStreams13StorableValueOWOhTm_0(v198, (void (*)(void))type metadata accessor for StorableValue);
        (*v191)(v63, v178, v62);
        break;
      case 5:
        _s12BiomeStreams13StorableValueOWOhTm_0(v198, (void (*)(void))type metadata accessor for StorableValue);
        (*v191)(v63, v179, v62);
        break;
      case 6:
        (*v191)(v192, v177, v193);
LABEL_18:
        _s12BiomeStreams13StorableValueOWOhTm_0(v198, (void (*)(void))type metadata accessor for StorableValue);
        break;
      case 7:
        (*v191)(v192, v176, v193);
        break;
      default:
        (*v191)(v192, v197, v193);
        break;
    }
    int v64 = (*v190)(v63, v62);
    if (v64 == v197)
    {
      uint64_t v48 = v60;
      uint64_t v65 = v183;
      outlined init with copy of SQLExpressionEvaluatorError(v60, v183, (void (*)(void))type metadata accessor for StorableValue);
      if (swift_getEnumCaseMultiPayload()) {
        goto LABEL_146;
      }
      uint64_t v13 = v59;
      unint64_t v66 = (unint64_t)v26;
      if (*(unsigned char *)(v65 + 8)) {
        goto LABEL_42;
      }
      uint64_t v67 = sqlite3_bind_int64(v189, v58, *(void *)v65);
      goto LABEL_43;
    }
    uint64_t v13 = v59;
    uint64_t v48 = v60;
    if (v64 == v187)
    {
      uint64_t v68 = v181;
      outlined init with copy of SQLExpressionEvaluatorError(v60, v181, (void (*)(void))type metadata accessor for StorableValue);
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_147;
      }
      unint64_t v66 = (unint64_t)v26;
      if (*(unsigned char *)(v68 + 8)) {
        goto LABEL_42;
      }
      uint64_t v67 = sqlite3_bind_double(v189, v58, *(double *)v68);
      goto LABEL_43;
    }
    if (v64 != v182)
    {
      if (v64 == v180)
      {
        uint64_t v65 = v172;
        outlined init with copy of SQLExpressionEvaluatorError(v60, v172, (void (*)(void))type metadata accessor for StorableValue);
        if (swift_getEnumCaseMultiPayload() != 2) {
          goto LABEL_146;
        }
        unint64_t v169 = (unint64_t)v26;
        uint64_t v72 = v65;
        uint64_t v73 = v174;
        outlined init with take of (key: String, value: StorableValue)(v72, v174, v59);
        uint64_t v74 = v170;
        outlined init with copy of UUID?(v73, v170, v59);
        uint64_t v75 = v171;
        if (__swift_getEnumTagSinglePayload(v74, 1, v171) == 1)
        {
          outlined destroy of UUID?(v74, v59);
          uint64_t v71 = sqlite3_bind_null(v189, v58);
        }
        else
        {
          uint64_t v77 = v168;
          (*v167)(v168, v74, v75);
          Date.timeIntervalSince1970.getter();
          uint64_t v71 = sqlite3_bind_double(v189, v58, v78);
          uint64_t v79 = v77;
          uint64_t v13 = v59;
          uint64_t v48 = v60;
          (*v166)(v79, v75);
        }
        outlined destroy of UUID?(v174, v59);
        uint64_t v47 = v56;
        goto LABEL_52;
      }
      if (v64 == v179)
      {
        outlined init with copy of SQLExpressionEvaluatorError(v60, (uint64_t)v26, (void (*)(void))type metadata accessor for StorableValue);
        if (swift_getEnumCaseMultiPayload() != 5) {
          goto LABEL_150;
        }
        unint64_t v76 = v26[1];
        if (v76 >> 60 == 15)
        {
LABEL_41:
          unint64_t v66 = (unint64_t)v26;
          goto LABEL_42;
        }
        uint64_t v83 = *v26;
        switch(v76 >> 62)
        {
          case 1uLL:
            if (v83 >> 32 < (int)v83) {
              goto LABEL_159;
            }
            uint64_t v152 = v83 >> 32;
            uint64_t v92 = (int)v83;
            uint64_t v153 = v83;
            unint64_t v169 = v76;
            outlined copy of Data._Representation(v83, v76);
            uint64_t v93 = __DataStorage._bytes.getter();
            if (v93)
            {
              uint64_t v94 = v93;
              uint64_t v95 = __DataStorage._offset.getter();
              if (__OFSUB__(v92, v95)) {
                goto LABEL_163;
              }
              uint64_t v151 = (const void *)(v94 + v92 - v95);
            }
            else
            {
              uint64_t v151 = 0;
            }
            uint64_t v113 = __DataStorage._length.getter();
            if (v113 >= v152 - v92) {
              uint64_t v114 = v152 - v92;
            }
            else {
              uint64_t v114 = v113;
            }
            uint64_t v13 = v59;
            v115 = v151;
            if (v151)
            {
              if (v114 < (uint64_t)0xFFFFFFFF80000000) {
                goto LABEL_157;
              }
              uint64_t v48 = v60;
              if (v114 > 0x7FFFFFFF) {
                goto LABEL_158;
              }
            }
            else
            {
              LODWORD(v114) = 0;
              uint64_t v48 = v60;
            }
            unint64_t v66 = (unint64_t)v26;
            if (one-time initialization token for SQLITE_TRANSIENT != -1) {
              swift_once();
            }
            uint64_t v71 = sqlite3_bind_blob(v189, v58, v115, v114, (void (__cdecl *)(void *))SQLITE_TRANSIENT);
            uint64_t v112 = v153;
LABEL_109:
            unint64_t v85 = v169;
            outlined consume of Data?(v112, v169);
            uint64_t v101 = v112;
LABEL_110:
            outlined consume of Data?(v101, v85);
            break;
          case 2uLL:
            unint64_t v66 = (unint64_t)v26;
            uint64_t v96 = *(void *)(v83 + 16);
            uint64_t v152 = *(void *)(v83 + 24);
            uint64_t v97 = v83;
            unint64_t v169 = v76;
            outlined copy of Data?(v83, v76);
            uint64_t v153 = v97;
            swift_retain();
            swift_retain();
            uint64_t v98 = __DataStorage._bytes.getter();
            if (v98)
            {
              uint64_t v99 = v98;
              uint64_t v100 = __DataStorage._offset.getter();
              if (__OFSUB__(v96, v100)) {
                goto LABEL_164;
              }
              uint64_t v151 = (const void *)(v99 + v96 - v100);
            }
            else
            {
              uint64_t v151 = 0;
            }
            BOOL v106 = __OFSUB__(v152, v96);
            uint64_t v107 = v152 - v96;
            if (v106) {
              goto LABEL_160;
            }
            uint64_t v13 = v59;
            uint64_t v108 = __DataStorage._length.getter();
            if (v108 >= v107) {
              uint64_t v109 = v107;
            }
            else {
              uint64_t v109 = v108;
            }
            long long v110 = v151;
            if (v151) {
              uint64_t v111 = v109;
            }
            else {
              uint64_t v111 = 0;
            }
            uint64_t v48 = (uint64_t)v173;
            if (v111 < (uint64_t)0xFFFFFFFF80000000) {
              goto LABEL_161;
            }
            if (v111 > 0x7FFFFFFF) {
              goto LABEL_162;
            }
            if (one-time initialization token for SQLITE_TRANSIENT != -1) {
              swift_once();
            }
            uint64_t v71 = sqlite3_bind_blob(v189, v58, v110, v111, (void (__cdecl *)(void *))SQLITE_TRANSIENT);
            swift_release();
            uint64_t v112 = v153;
            swift_release();
            goto LABEL_109;
          case 3uLL:
            unint64_t v66 = (unint64_t)v26;
            uint64_t v84 = *v26;
            unint64_t v85 = v26[1];
            *(void *)((char *)&__dst + 6) = 0;
            *(void *)&long long __dst = 0;
            if (one-time initialization token for SQLITE_TRANSIENT != -1) {
              swift_once();
            }
            uint64_t v71 = sqlite3_bind_blob(v189, v58, &__dst, 0, (void (__cdecl *)(void *))SQLITE_TRANSIENT);
            goto LABEL_80;
          default:
            unint64_t v66 = (unint64_t)v26;
            *(void *)&long long __dst = *v26;
            WORD4(__dst) = v76;
            BYTE10(__dst) = BYTE2(v76);
            BYTE11(__dst) = BYTE3(v76);
            BYTE12(__dst) = BYTE4(v76);
            BYTE13(__dst) = BYTE5(v76);
            uint64_t v84 = v83;
            if (one-time initialization token for SQLITE_TRANSIENT != -1)
            {
              unint64_t v126 = v76;
              swift_once();
              unint64_t v76 = v126;
            }
            unint64_t v85 = v76;
            uint64_t v71 = sqlite3_bind_blob(v189, v58, &__dst, BYTE6(v76), (void (__cdecl *)(void *))SQLITE_TRANSIENT);
LABEL_80:
            outlined consume of Data?(v84, v85);
            uint64_t v101 = v84;
            goto LABEL_110;
        }
        goto LABEL_44;
      }
      if (v64 == v178)
      {
        uint64_t v65 = v164;
        outlined init with copy of SQLExpressionEvaluatorError(v60, v164, (void (*)(void))type metadata accessor for StorableValue);
        if (swift_getEnumCaseMultiPayload() != 4)
        {
LABEL_146:
          swift_bridgeObjectRelease();
          uint64_t v141 = v65;
          goto LABEL_148;
        }
        goto LABEL_30;
      }
      if (v64 != v177)
      {
        if (v64 != v176) {
          goto LABEL_155;
        }
        uint64_t v68 = v159;
        outlined init with copy of SQLExpressionEvaluatorError(v60, v159, (void (*)(void))type metadata accessor for StorableValue);
        if (swift_getEnumCaseMultiPayload() != 7)
        {
LABEL_147:
          swift_bridgeObjectRelease();
          uint64_t v141 = v68;
          goto LABEL_148;
        }
        unint64_t v66 = (unint64_t)v26;
        _s12BiomeStreams13StorableValueOWOhTm_0(v68, (void (*)(void))type metadata accessor for StorableValue);
LABEL_42:
        uint64_t v67 = sqlite3_bind_null(v189, v58);
LABEL_43:
        uint64_t v71 = v67;
LABEL_44:
        uint64_t v47 = v56;
        goto LABEL_45;
      }
      unint64_t v169 = (unint64_t)v26;
      uint64_t v26 = v160;
      outlined init with copy of SQLExpressionEvaluatorError(v60, (uint64_t)v160, (void (*)(void))type metadata accessor for StorableValue);
      if (swift_getEnumCaseMultiPayload() != 6)
      {
LABEL_150:
        swift_bridgeObjectRelease();
        uint64_t v141 = (uint64_t)v26;
LABEL_148:
        _s12BiomeStreams13StorableValueOWOhTm_0(v141, (void (*)(void))type metadata accessor for StorableValue);
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        swift_allocError();
        uint64_t v142 = v48;
        v144 = v143;
        v143[3] = v199;
        unint64_t v145 = __swift_allocate_boxed_opaque_existential_0(v143);
        outlined init with copy of SQLExpressionEvaluatorError(v142, (uint64_t)v145, (void (*)(void))type metadata accessor for StorableValue);
        *((_OWORD *)v144 + 2) = 0u;
        *((_OWORD *)v144 + 3) = 0u;
        *((unsigned char *)v144 + 64) = 3;
        swift_willThrow();
        uint64_t v140 = v142;
        return (const char *)_s12BiomeStreams13StorableValueOWOhTm_0(v140, (void (*)(void))type metadata accessor for StorableValue);
      }
      outlined init with take of (key: String, value: StorableValue)((uint64_t)v26, v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v153 = v56;
      uint64_t v80 = v163;
      outlined init with copy of UUID?(v56, v163, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v81 = v80;
      uint64_t v82 = v162;
      if (__swift_getEnumTagSinglePayload(v81, 1, v162) == 1)
      {
        outlined destroy of UUID?(v163, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v71 = sqlite3_bind_null(v189, v58);
        uint64_t v47 = v153;
        outlined destroy of UUID?(v153, (uint64_t *)&demangling cache variable for type metadata for UUID?);
LABEL_52:
        unint64_t v66 = v169;
        goto LABEL_45;
      }
      (*v157)(v161, v163, v82);
      unint64_t v86 = v169;
      if (v158)
      {
        if (v158 >= 15)
        {
          unint64_t v87 = v158;
          type metadata accessor for __DataStorage();
          swift_allocObject();
          uint64_t v153 = __DataStorage.init(bytes:length:)();
          if (v87 > 0x7FFFFFFE)
          {
            type metadata accessor for Data.RangeReference();
            uint64_t inited = swift_initStackObject();
            *(void *)(inited + 16) = 0;
            *(void *)(inited + 24) = v87;
            uint64_t v117 = __DataStorage._bytes.getter();
            if (v117)
            {
              uint64_t v118 = v117;
              uint64_t v119 = __DataStorage._offset.getter();
              if (__OFSUB__(0, v119)) {
                goto LABEL_166;
              }
              uint64_t v152 = v118 - v119;
            }
            else
            {
              uint64_t v152 = 0;
            }
            uint64_t v151 = (const void *)inited;
            uint64_t v123 = __DataStorage._length.getter();
            if (v123 >= v158) {
              uint64_t v124 = v158;
            }
            else {
              uint64_t v124 = v123;
            }
            uint64_t v13 = v59;
            uint64_t v125 = (const void *)v152;
            if (v152)
            {
              if (v124 < (uint64_t)0xFFFFFFFF80000000) {
                goto LABEL_156;
              }
              uint64_t v48 = v60;
              if (v124 > 0x7FFFFFFF) {
                goto LABEL_167;
              }
            }
            else
            {
              LODWORD(v124) = 0;
              uint64_t v48 = v60;
            }
            unint64_t v66 = v86;
            if (one-time initialization token for SQLITE_TRANSIENT != -1) {
              swift_once();
            }
            uint64_t v71 = sqlite3_bind_blob(v189, v58, v125, v124, (void (__cdecl *)(void *))SQLITE_TRANSIENT);
            swift_release();
          }
          else
          {
            uint64_t v88 = __DataStorage._bytes.getter();
            if (v88)
            {
              uint64_t v89 = v88;
              uint64_t v90 = __DataStorage._offset.getter();
              if (__OFSUB__(0, v90)) {
                goto LABEL_165;
              }
              uint64_t v91 = (const void *)(v89 - v90);
            }
            else
            {
              uint64_t v91 = 0;
            }
            uint64_t v120 = __DataStorage._length.getter();
            uint64_t v13 = v59;
            uint64_t v121 = v91;
            if (v91)
            {
              if (v120 >= v158) {
                int64_t v122 = v158;
              }
              else {
                int64_t v122 = v120;
              }
              uint64_t v48 = v60;
              if (v122 < (uint64_t)0xFFFFFFFF80000000)
              {
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                __break(1u);
LABEL_164:
                __break(1u);
LABEL_165:
                __break(1u);
LABEL_166:
                __break(1u);
LABEL_167:
                __break(1u);
              }
            }
            else
            {
              LODWORD(v122) = 0;
              uint64_t v48 = v60;
            }
            unint64_t v66 = v86;
            if (one-time initialization token for SQLITE_TRANSIENT != -1) {
              swift_once();
            }
            uint64_t v71 = sqlite3_bind_blob(v189, v58, v121, v122, (void (__cdecl *)(void *))SQLITE_TRANSIENT);
          }
          swift_release();
          goto LABEL_142;
        }
        unint64_t v66 = v169;
        *(void *)((char *)&__dst + 6) = 0;
        *(void *)&long long __dst = 0;
        BYTE14(__dst) = v158;
        memcpy(&__dst, v161, v158);
        if (one-time initialization token for SQLITE_TRANSIENT != -1) {
          swift_once();
        }
        uint64_t v102 = (void (__cdecl *)(void *))SQLITE_TRANSIENT;
        v103 = v189;
        int v104 = v57 + 1;
        int v105 = v155;
      }
      else
      {
        unint64_t v66 = v169;
        *(void *)((char *)&__dst + 6) = 0;
        *(void *)&long long __dst = 0;
        if (one-time initialization token for SQLITE_TRANSIENT != -1) {
          swift_once();
        }
        uint64_t v102 = (void (__cdecl *)(void *))SQLITE_TRANSIENT;
        v103 = v189;
        int v104 = v57 + 1;
        int v105 = 0;
      }
      uint64_t v71 = sqlite3_bind_blob(v103, v104, &__dst, v105, v102);
LABEL_142:
      uint64_t v47 = v56;
      outlined destroy of UUID?(v56, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      (*v156)(v161, v162);
      goto LABEL_45;
    }
    uint64_t v65 = v175;
    outlined init with copy of SQLExpressionEvaluatorError(v60, v175, (void (*)(void))type metadata accessor for StorableValue);
    if (swift_getEnumCaseMultiPayload() != 3) {
      goto LABEL_146;
    }
LABEL_30:
    if (!*(void *)(v65 + 8)) {
      goto LABEL_41;
    }
    unint64_t v66 = (unint64_t)v26;
    if (one-time initialization token for SQLITE_TRANSIENT != -1) {
      swift_once();
    }
    uint64_t v69 = (void (__cdecl *)(void *))SQLITE_TRANSIENT;
    uint64_t v70 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v71 = sqlite3_bind_text(v189, v58, (const char *)(v70 + 32), -1, v69);
    swift_release();
    uint64_t v48 = (uint64_t)v173;
    uint64_t v47 = v56;
    uint64_t v13 = v59;
LABEL_45:
    if (v71) {
      break;
    }
    _s12BiomeStreams13StorableValueOWOhTm_0(v48, (void (*)(void))type metadata accessor for StorableValue);
    unint64_t v46 = v188;
    uint64_t v26 = (uint64_t *)v66;
  }
  uint64_t v128 = v48;
  uint64_t result = sqlite3_sql(v189);
  if (result)
  {
    swift_bridgeObjectRelease();
    uint64_t v129 = String.init(cString:)();
    uint64_t v131 = v130;
    id v132 = BMSQLDatabaseError(v71, v165, 0);
    swift_getErrorValue();
    uint64_t v133 = Error.localizedDescription.getter();
    uint64_t v135 = v134;

    *(void *)&long long __dst = v133;
    *((void *)&__dst + 1) = v135;
    strcpy((char *)v202, "BMSQLDatabase");
    v202[7] = -4864;
    uint64_t v200 = 0x62617461444C5153;
    unint64_t v201 = 0xEB00000000657361;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v136 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v138 = v137;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    swift_allocError();
    *(void *)uint64_t v139 = v129;
    *(void *)(v139 + 8) = v131;
    *(void *)(v139 + 16) = v136;
    *(void *)(v139 + 24) = v138;
    *(unsigned char *)(v139 + 32) = 2;
    swift_willThrow();
    uint64_t v140 = v128;
    return (const char *)_s12BiomeStreams13StorableValueOWOhTm_0(v140, (void (*)(void))type metadata accessor for StorableValue);
  }
  __break(1u);
  return result;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

unsigned char *destructiveInjectEnumTag for StorableValue.CodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

uint64_t outlined init with take of StorableValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StorableValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTag for StorableValue.CodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t dispatch thunk of static DataResource.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t selectAndHavingAggregateFunctions(selectCore:)(uint64_t a1)
{
  unint64_t v3 = type metadata accessor for ResultColumn();
  OUTLINED_FUNCTION_0_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_10();
  uint64_t v70 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
  uint64_t v9 = OUTLINED_FUNCTION_35(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_53();
  uint64_t v10 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  uint64_t v12 = v11;
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_47();
  uint64_t v16 = v14 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v61 - v18;
  uint64_t v20 = SelectCore.select.getter();
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    v61[1] = v19;
    uint64_t v62 = v1;
    uint64_t v63 = v12;
    uint64_t v64 = a1;
    uint64_t v23 = *(void *)(v5 + 16);
    uint64_t v22 = v5 + 16;
    unint64_t v24 = (*(unsigned __int8 *)(v22 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 64);
    v61[0] = v20;
    unint64_t v25 = v20 + v24;
    uint64_t v26 = *(void *)(v22 + 56);
    uint64_t v67 = v12 + 8;
    uint64_t v68 = v23;
    uint64_t v69 = v22;
    uint64_t v65 = v22 - 8;
    uint64_t v66 = v26;
    uint64_t v27 = MEMORY[0x1E4FBC860];
    while (1)
    {
      OUTLINED_FUNCTION_96();
      uint64_t v28 = v3;
      OUTLINED_FUNCTION_18();
      v30(v29);
      ResultColumn.expression.getter(v16);
      uint64_t v31 = SQLExpression.aggregationFunctions.getter();
      uint64_t v32 = v10;
      OUTLINED_FUNCTION_2_4();
      v34(v33);
      uint64_t v35 = *(void *)(v31 + 16);
      uint64_t v36 = *(void *)(v27 + 16);
      uint64_t v37 = v36 + v35;
      if (__OFADD__(v36, v35)) {
        break;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v37 > *(void *)(v27 + 24) >> 1)
      {
        if (v36 <= v37) {
          uint64_t v39 = v36 + v35;
        }
        else {
          uint64_t v39 = v36;
        }
        uint64_t v27 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v39, 1, v27);
      }
      if (*(void *)(v31 + 16))
      {
        uint64_t v40 = *(void *)(v27 + 16);
        uint64_t v41 = (*(void *)(v27 + 24) >> 1) - v40;
        Swift::Int Description = type metadata accessor for AggregationFunction()[-1].Description;
        uint64_t v43 = Description[9];
        if (v41 < v35) {
          goto LABEL_30;
        }
        unint64_t v44 = (*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80);
        unint64_t v45 = v27 + v44 + v43 * v40;
        unint64_t v46 = v31 + v44;
        uint64_t v47 = v43 * v35;
        unint64_t v48 = v45 + v47;
        unint64_t v49 = v46 + v47;
        if (v46 < v48 && v45 < v49) {
          goto LABEL_32;
        }
        swift_arrayInitWithCopy();
        if (v35)
        {
          uint64_t v51 = *(void *)(v27 + 16);
          BOOL v52 = __OFADD__(v51, v35);
          uint64_t v53 = v51 + v35;
          if (v52) {
            goto LABEL_31;
          }
          *(void *)(v27 + 16) = v53;
        }
      }
      else if (v35)
      {
        goto LABEL_29;
      }
      swift_bridgeObjectRelease();
      unint64_t v3 = v28;
      OUTLINED_FUNCTION_2_4();
      v55(v54);
      v25 += v66;
      --v21;
      uint64_t v10 = v32;
      if (!v21)
      {
        swift_bridgeObjectRelease();
        uint64_t v1 = v62;
        goto LABEL_24;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v27 = MEMORY[0x1E4FBC860];
LABEL_24:
    uint64_t v72 = v27;
    SelectCore.having.getter(v1);
    if (__swift_getEnumTagSinglePayload(v1, 1, (uint64_t)v10) == 1)
    {
      outlined destroy of UUID?(v1, &demangling cache variable for type metadata for SQLExpression?);
    }
    else
    {
      OUTLINED_FUNCTION_28();
      v57(v56);
      SQLExpression.aggregationFunctions.getter();
      specialized Array.append<A>(contentsOf:)();
      OUTLINED_FUNCTION_95();
      v59(v58);
      uint64_t v27 = v72;
    }
    uint64_t v71 = v27;
    swift_bridgeObjectRetain_n();
    specialized MutableCollection<>.sort(by:)(&v71);
    swift_bridgeObjectRelease_n();
    return v71;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SQLExpression(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t SQLExpression.aggregationFunctions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_96()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_96_0()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_96_1()
{
  uint64_t v2 = v0[1];
  *(void *)(v1 - 192) = *v0;
  *(void *)(v1 - 184) = v2;
}

void OUTLINED_FUNCTION_96_2(uint64_t a1@<X8>)
{
  *(void *)(v4 - 104) = a1;
  *(void *)(v4 - 96) = (v1 - 32) | 0x8000000000000000;
  uint64_t v6 = v2;
  uint64_t v7 = v3;
  String.append(_:)(*(Swift::String *)&v6);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<AggregationFunction>, (uint64_t (*)(void))type metadata accessor for AggregationFunction, (uint64_t (*)(void))type metadata accessor for AggregationFunction);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>, type metadata accessor for StorableValue, type metadata accessor for StorableValue);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Schema>, (uint64_t (*)(void))type metadata accessor for Schema, (uint64_t (*)(void))type metadata accessor for Schema);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<MaterializedViewPhysicalPlan>, type metadata accessor for MaterializedViewPhysicalPlan, type metadata accessor for MaterializedViewPhysicalPlan);
}

uint64_t OUTLINED_FUNCTION_53()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_53_0()
{
  __swift_getEnumTagSinglePayload(v0, 1, v1);
  uint64_t result = v0;
  *(void *)(v2 - 160) = *(void *)(v2 - 168) + 8;
  return result;
}

uint64_t OUTLINED_FUNCTION_53_1@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
}

uint64_t OUTLINED_FUNCTION_53_3()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t SelectCore.having.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of PgQuery_Alias?(v1 + 208, a1, &demangling cache variable for type metadata for SQLExpression?);
}

uint64_t outlined init with copy of PgQuery_Alias?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_14BiomeSQLParser11SQLDataTypeOtG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5c186_pIggnozo_SS_ACtSSsAD_pIegnrzr_TR04_s12a146Streams30KeyedQueryPlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v4 = v18;
    __swift_instantiateConcreteTypeFromMangledName(a2);
    OUTLINED_FUNCTION_11_1();
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v10 = *(void *)(v9 + 72);
    while (1)
    {
      closure #2 in static KeyedQueryPlannerMetadataCache.updateMetadataSQL(materializedViewName:groupBySchema:payloadSchema:)();
      if (v2) {
        break;
      }
      uint64_t v13 = v11;
      uint64_t v14 = v12;
      unint64_t v15 = *(void *)(v18 + 16);
      if (v15 >= *(void *)(v18 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v8 += v10;
      *(void *)(v18 + 16) = v15 + 1;
      uint64_t v16 = v18 + 16 * v15;
      *(void *)(v16 + 32) = v13;
      *(void *)(v16 + 40) = v14;
      if (!--v3) {
        return v4;
      }
    }
    swift_release();
  }
  return v4;
}

void closure #2 in static KeyedQueryPlannerMetadataCache.updateMetadataSQL(materializedViewName:groupBySchema:payloadSchema:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for SQLRawDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_30_2();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v22 - v10;
  SQLDataType.columnType()();
  if (!v12)
  {
    (*(void (**)(uint64_t, uint64_t, ValueMetadata *))(v7 + 104))(v0, 1, v5);
    char v13 = specialized == infix<A>(_:_:)((uint64_t)v11, v0, (void (*)(void))type metadata accessor for SQLRawDataType, &lazy protocol witness table cache variable for type SQLRawDataType and conformance SQLRawDataType, (void (*)(uint64_t))type metadata accessor for SQLRawDataType);
    uint64_t v14 = *(void (**)(uint64_t, ValueMetadata *))(v7 + 8);
    v14(v0, v5);
    v14((uint64_t)v11, v5);
    uint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
    if (v13)
    {
      _StringGuts.grow(_:)(57);
      v15._uint64_t countAndFlagsBits = 0x222873626128;
      v15._object = (void *)0xE600000000000000;
      String.append(_:)(v15);
      v16._uint64_t countAndFlagsBits = v4;
      v16._object = v2;
      String.append(_:)(v16);
      OUTLINED_FUNCTION_35_1();
    }
    else
    {
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease();
      uint64_t v22 = 8744;
      unint64_t v23 = 0xE200000000000000;
      v19._uint64_t countAndFlagsBits = v4;
      v19._object = v2;
      String.append(_:)(v19);
      uint64_t v17 = 0x524F203F203D2022;
      unint64_t v18 = 0xEB00000000222820;
    }
    String.append(_:)(*(Swift::String *)&v17);
    v20._uint64_t countAndFlagsBits = v4;
    v20._object = v2;
    String.append(_:)(v20);
    OUTLINED_FUNCTION_35_1();
    v21._uint64_t countAndFlagsBits = 0xD000000000000019;
    String.append(_:)(v21);
  }
  OUTLINED_FUNCTION_31();
}

BiomeSQLParser::SQLRawDataType __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLDataType.columnType()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_24();
  uint64_t v7 = *(void (**)(void))(v5 + 16);
  OUTLINED_FUNCTION_37_1();
  v7();
  int v8 = (*(uint64_t (**)(uint64_t, ValueMetadata *))(v5 + 88))(v1, v3);
  switch(v8)
  {
    case 0:
      goto LABEL_2;
    case 1:
      goto LABEL_7;
    case 2:
LABEL_5:
      uint64_t v9 = &enum case for SQLRawDataType.TEXT(_:);
      goto LABEL_8;
    case 3:
LABEL_7:
      uint64_t v9 = &enum case for SQLRawDataType.REAL(_:);
      goto LABEL_8;
    case 4:
      goto LABEL_12;
    case 5:
      goto LABEL_5;
    case 6:
LABEL_12:
      uint64_t v9 = &enum case for SQLRawDataType.BLOB(_:);
      goto LABEL_8;
    case 7:
LABEL_2:
      uint64_t v9 = &enum case for SQLRawDataType.INTEGER(_:);
LABEL_8:
      uint64_t v10 = *v9;
      type metadata accessor for SQLRawDataType();
      OUTLINED_FUNCTION_4_3();
      return (*(unsigned __int8 (**)(uint64_t, uint64_t))(v11 + 104))(v2, v10);
  }
  lazy protocol witness table accessor for type SQLError and conformance SQLError();
  OUTLINED_FUNCTION_39();
  uint64_t v14 = v13;
  v13[3] = (uint64_t)v3;
  __swift_allocate_boxed_opaque_existential_0(v13);
  OUTLINED_FUNCTION_37_1();
  v7();
  *((_OWORD *)v14 + 2) = 0u;
  *((_OWORD *)v14 + 3) = 0u;
  *((unsigned char *)v14 + 64) = 3;
  swift_willThrow();
  return (*(unsigned __int8 (**)(uint64_t, ValueMetadata *))(v5 + 8))(v1, v3);
}

void specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)()
{
  OUTLINED_FUNCTION_38_0();
  uint64_t v4 = v3;
  type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_16_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v21 = v9;
  uint64_t v22 = v8;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_80_2();
  if (v2)
  {
    OUTLINED_FUNCTION_86_2();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v10 = v6 + 16;
    uint64_t v11 = v4 + ((*(unsigned __int8 *)(v10 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 64));
    uint64_t v20 = *(void *)(v10 + 56);
    do
    {
      uint64_t v12 = v10;
      OUTLINED_FUNCTION_32_4();
      v13();
      v14._uint64_t countAndFlagsBits = SQLExpression.sql.getter();
      Swift::String v15 = (char *)v1 + *(int *)(v22 + 48);
      strcpy((char *)&v23, "group_by_key_");
      HIWORD(v23) = -4864;
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      uint64_t v16 = *((void *)&v23 + 1);
      *uint64_t v1 = v23;
      v1[1] = v16;
      uint64_t v17 = v0;
      SQLExpression.returnType.getter(v15);
      OUTLINED_FUNCTION_95();
      v18();
      if ((OUTLINED_FUNCTION_146_0() & 1) == 0)
      {
        OUTLINED_FUNCTION_28_5();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v17 = v24;
      }
      unint64_t v19 = *(void *)(v17 + 16);
      if (v19 >= *(void *)(v17 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v17 = v24;
      }
      *(void *)(v17 + 16) = v19 + 1;
      _s10Foundation4UUIDVSgWObTm_0((uint64_t)v1, v17+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v19, &demangling cache variable for type metadata for (String, SQLDataType));
      v11 += v20;
      --v2;
      uint64_t v10 = v12;
    }
    while (v2);
  }
  OUTLINED_FUNCTION_34();
}

void SQLExpression.returnType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 56);
}

void OUTLINED_FUNCTION_32()
{
  uint64_t v2 = v1 + *(int *)(v0 + 48);
  *(void *)uint64_t v2 = 0;
  *(unsigned char *)(v2 + 8) = 1;
}

void OUTLINED_FUNCTION_32_0(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4)
{
  uint64_t v9 = *(const char **)(v7 - 144);
  _os_signpost_emit_with_name_impl(a1, v4, a3, a4, v9, v5, v6, 2u);
}

id OUTLINED_FUNCTION_32_1(uint64_t a1)
{
  return BMSQLDatabaseError(a1, v1, 0);
}

uint64_t OUTLINED_FUNCTION_32_2()
{
  return *(void *)(v0 - 256);
}

uint64_t SQLExpression.sql.getter()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OUTLINED_FUNCTION_146()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

uint64_t OUTLINED_FUNCTION_146_0()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

uint64_t SQLExpressionEvaluator.execute(expression:payload:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v145 = a2;
  uint64_t v134 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_16();
  uint64_t v131 = v8;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_45();
  uint64_t v136 = v10;
  uint64_t v138 = type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v137 = v11;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_47();
  Swift::String v15 = (ValueMetadata *)(v13 - v14);
  MEMORY[0x1F4188790](v16);
  uint64_t v133 = (char *)&v129 - v17;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_45();
  id v132 = (unsigned char *)v19;
  uint64_t v146 = (void (*)(void))type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_0_4();
  uint64_t v149 = v20;
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_47();
  uint64_t v24 = v22 - v23;
  MEMORY[0x1F4188790](v25);
  uint64_t v150 = (uint64_t)&v129 - v26;
  OUTLINED_FUNCTION_11();
  uint64_t v28 = MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v129 - v29;
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_45();
  uint64_t v140 = v31;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  MEMORY[0x1F4188790](v32 - 8);
  OUTLINED_FUNCTION_16();
  uint64_t v144 = v33;
  OUTLINED_FUNCTION_11();
  uint64_t v35 = MEMORY[0x1F4188790](v34);
  uint64_t v37 = (char *)&v129 - v36;
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_45();
  uint64_t v142 = v38;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Binding?);
  MEMORY[0x1F4188790](v39 - 8);
  uint64_t v41 = (char *)&v129 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding();
  OUTLINED_FUNCTION_0_4();
  uint64_t v147 = v43;
  uint64_t v148 = v42;
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_16();
  uint64_t v143 = v44;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v45);
  OUTLINED_FUNCTION_45();
  uint64_t v141 = v46;
  uint64_t v139 = a1;
  BOOL v48 = SQLExpression.expressionString.getter() == 63 && v47 == 0xE100000000000000;
  uint64_t v135 = a3;
  if (v48)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v130 = v6;
    uint64_t v50 = v139;
    uint64_t v51 = SQLExpression.bindings.getter();
    specialized Collection.first.getter(v51, (uint64_t (*)(void))type metadata accessor for Binding, (uint64_t)v41);
    swift_bridgeObjectRelease();
    uint64_t v52 = v148;
    if (__swift_getEnumTagSinglePayload((uint64_t)v41, 1, v148) == 1)
    {
      outlined destroy of UUID?((uint64_t)v41, &demangling cache variable for type metadata for Binding?);
      goto LABEL_10;
    }
    uint64_t v73 = v147;
    uint64_t v74 = v141;
    (*(void (**)(void, char *, uint64_t))(v147 + 32))(v141, v41, v52);
    Binding.name.getter();
    Swift::String v75 = String.lowercased()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    unint64_t v76 = v142;
    specialized Dictionary.subscript.getter(v75._countAndFlagsBits, (uint64_t)v75._object, v145, (uint64_t)v142);
    swift_bridgeObjectRelease();
    outlined init with copy of UUID?((uint64_t)v76, (uint64_t)v37, &demangling cache variable for type metadata for StorableValue?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v37, 1, (uint64_t)v146) == 1)
    {
      outlined destroy of UUID?((uint64_t)v37, &demangling cache variable for type metadata for StorableValue?);
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      OUTLINED_FUNCTION_39();
      *(Swift::String *)uint64_t v77 = v75;
      *(unsigned char *)(v77 + 64) = 2;
      swift_willThrow();
      outlined destroy of UUID?((uint64_t)v76, &demangling cache variable for type metadata for StorableValue?);
      return (*(uint64_t (**)(void (*)(void, void, void), uint64_t))(v73 + 8))(v74, v52);
    }
    swift_bridgeObjectRelease();
    uint64_t v79 = (uint64_t)v37;
    uint64_t v80 = v140;
    outlined init with take of StorableValue(v79, v140);
    uint64_t v81 = v132;
    StorableValue.dataType.getter((uint64_t)v132);
    uint64_t v82 = v133;
    SQLExpression.returnType.getter(v133);
    LODWORD(v149) = specialized == infix<A>(_:_:)((uint64_t)v81, (uint64_t)v82);
    uint64_t v83 = (uint64_t)v30;
    uint64_t v84 = v137;
    unint64_t v85 = *(void (**)(void))(v137 + 8);
    OUTLINED_FUNCTION_95();
    v85();
    uint64_t v146 = v85;
    OUTLINED_FUNCTION_95();
    v85();
    uint64_t v150 = v83;
    outlined init with copy of SQLExpressionEvaluatorError(v80, v83, (void (*)(void))type metadata accessor for StorableValue);
    uint64_t v86 = v130;
    unint64_t v87 = *(void (**)(uint64_t, uint64_t, ValueMetadata *))(v130 + 16);
    uint64_t v88 = v136;
    uint64_t v89 = v134;
    v87(v136, v50, v134);
    if (v149)
    {
      (*(void (**)(uint64_t, ValueMetadata *))(v86 + 8))(v88, v89);
      _s12BiomeStreams13StorableValueOWOhTm_0(v150, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v90 = v142;
LABEL_29:
      outlined destroy of UUID?((uint64_t)v90, &demangling cache variable for type metadata for StorableValue?);
      OUTLINED_FUNCTION_2_4();
      v91();
      return outlined init with take of StorableValue(v140, (uint64_t)v135);
    }
    StorableValue.dataType.getter((uint64_t)v81);
    uint64_t v149 = v87;
    uint64_t v145 = *(void *)(v84 + 104);
    ((void (*)(unsigned char *, uint64_t, ValueMetadata *))v145)(v82, 2, v138);
    char v113 = specialized == infix<A>(_:_:)((uint64_t)v81, (uint64_t)v82);
    uint64_t v114 = v146;
    OUTLINED_FUNCTION_95();
    v114();
    uint64_t v115 = v136;
    OUTLINED_FUNCTION_95();
    v114();
    v149(v131, v115, v89);
    if (v113)
    {
      SQLExpression.returnType.getter(v81);
      ((void (*)(unsigned char *, uint64_t, ValueMetadata *))v145)(v82, 5, v138);
      char v116 = specialized == infix<A>(_:_:)((uint64_t)v81, (uint64_t)v82);
      uint64_t v117 = v146;
      OUTLINED_FUNCTION_95();
      v117();
      OUTLINED_FUNCTION_95();
      v117();
      uint64_t v118 = *(void (**)(void))(v130 + 8);
      OUTLINED_FUNCTION_95();
      v118();
      OUTLINED_FUNCTION_95();
      v118();
      uint64_t v119 = v138;
      _s12BiomeStreams13StorableValueOWOhTm_0(v150, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v120 = v141;
      uint64_t v90 = v142;
      if (v116) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v121 = *(void (**)(void))(v130 + 8);
      OUTLINED_FUNCTION_95();
      v121();
      OUTLINED_FUNCTION_95();
      v121();
      _s12BiomeStreams13StorableValueOWOhTm_0(v150, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v120 = v141;
      uint64_t v90 = v142;
      uint64_t v119 = v138;
    }
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    OUTLINED_FUNCTION_39();
    v122[3] = (uint64_t)v119;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v122);
    uint64_t v124 = v140;
    StorableValue.dataType.getter((uint64_t)boxed_opaque_existential_0);
    OUTLINED_FUNCTION_27_1();
    swift_willThrow();
    _s12BiomeStreams13StorableValueOWOhTm_0(v124, (void (*)(void))type metadata accessor for StorableValue);
    outlined destroy of UUID?((uint64_t)v90, &demangling cache variable for type metadata for StorableValue?);
    return (*(uint64_t (**)(void (*)(void, void, void), uint64_t))(v147 + 8))(v120, v148);
  }
  char v49 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v49) {
    goto LABEL_8;
  }
LABEL_10:
  uint64_t v134 = v15;
  uint64_t v53 = SQLExpression.bindings.getter();
  uint64_t v54 = *(void *)(v53 + 16);
  if (!v54)
  {
    swift_bridgeObjectRelease();
    v93._rawValue = (void *)MEMORY[0x1E4FBC860];
LABEL_32:
    uint64_t v151 = 0x205443454C4553;
    unint64_t v152 = 0xE700000000000000;
    v94._uint64_t countAndFlagsBits = SQLExpression.expressionString.getter();
    String.append(_:)(v94);
    swift_bridgeObjectRelease();
    uint64_t v96 = v151;
    uint64_t v95 = (void *)v152;
    swift_bridgeObjectRetain();
    v97._uint64_t countAndFlagsBits = v96;
    v97._object = v95;
    unint64_t v98 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v97, v93);
    if (v99)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
    unint64_t v100 = v98;
    swift_bridgeObjectRelease();
    if (!v100 || *(void *)(v100 + 16) != 1) {
      goto LABEL_48;
    }
    swift_bridgeObjectRelease();
    uint64_t v101 = specialized Dictionary.startIndex.getter(v100);
    if ((v103 & 1) == 0)
    {
      if (*(_DWORD *)(v100 + 36) == v102)
      {
        if (v101 != 1 << *(unsigned char *)(v100 + 32))
        {
          uint64_t v104 = OUTLINED_FUNCTION_29_0();
          specialized Dictionary.subscript.getter(v104, v105, v106, v107);
          uint64_t v108 = v153;
          unint64_t v109 = v154;
          int v110 = v155;
          swift_bridgeObjectRetain();
          outlined copy of DatabaseValue(v108, v109, v110);
          swift_bridgeObjectRelease();
          outlined consume of DatabaseValue(v108, v109, v110);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v111 = v134;
          SQLExpression.returnType.getter(v134);
          static StorableValue.fromDatabaseValue(_:dataType:)(v108, v109, v110, (uint64_t)v111, v135);
          OUTLINED_FUNCTION_2_4();
          v112();
          return outlined consume of DatabaseValue(v108, v109, v110);
        }
        goto LABEL_47;
      }
      __break(1u);
    }
    __break(1u);
LABEL_47:
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_48:
    uint64_t v151 = 0;
    unint64_t v152 = 0xE000000000000000;
    _StringGuts.grow(_:)(62);
    OUTLINED_FUNCTION_36(0xD000000000000025, (uint64_t)"Unexpected number of columns in from ");
    v125._uint64_t countAndFlagsBits = v96;
    v125._object = v95;
    String.append(_:)(v125);
    OUTLINED_FUNCTION_35_1();
    v126._uint64_t countAndFlagsBits = 0xD000000000000015;
    String.append(_:)(v126);
    if (v100)
    {
      uint64_t v127 = *(void *)(v100 + 16);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v127 = 0;
    }
    uint64_t v156 = v127;
    v128._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v128);
    swift_bridgeObjectRelease();
    uint64_t result = OUTLINED_FUNCTION_11_0();
    __break(1u);
    return result;
  }
  uint64_t v141 = *(void (**)(void, void, void))(v147 + 16);
  unint64_t v55 = (*(unsigned __int8 *)(v147 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v147 + 80);
  uint64_t v136 = v53;
  unint64_t v56 = v53 + v55;
  uint64_t v142 = (uint64_t (**)(uint64_t, uint64_t))(v147 + 8);
  uint64_t v140 = *(void *)(v147 + 72);
  uint64_t v57 = MEMORY[0x1E4FBC860];
  uint64_t v58 = v148;
  uint64_t v59 = v143;
  uint64_t v60 = v144;
  v147 += 16;
  while (1)
  {
    v141(v59, v56, v58);
    Binding.name.getter();
    Swift::String v61 = String.lowercased()();
    swift_bridgeObjectRelease();
    uint64_t v62 = v145;
    if (!*(void *)(v145 + 16)) {
      break;
    }
    swift_bridgeObjectRetain();
    unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v61._countAndFlagsBits, (uint64_t)v61._object);
    if (v64)
    {
      uint64_t v60 = v144;
      outlined init with copy of SQLExpressionEvaluatorError(*(void *)(v62 + 56) + *((void *)v149 + 9) * v63, v144, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v65 = 0;
    }
    else
    {
      uint64_t v65 = 1;
      uint64_t v60 = v144;
    }
    uint64_t v66 = (uint64_t)v146;
    __swift_storeEnumTagSinglePayload(v60, v65, 1, (uint64_t)v146);
    swift_bridgeObjectRelease();
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v60, 1, v66);
    uint64_t v59 = v143;
    if (EnumTagSinglePayload == 1) {
      goto LABEL_31;
    }
    swift_bridgeObjectRelease();
    uint64_t v68 = v150;
    outlined init with take of StorableValue(v60, v150);
    outlined init with copy of SQLExpressionEvaluatorError(v68, v24, (void (*)(void))type metadata accessor for StorableValue);
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v58 = v148;
      uint64_t v69 = v57;
    }
    else
    {
      uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v57 + 16) + 1, 1, v57);
      uint64_t v58 = v148;
    }
    unint64_t v71 = *(void *)(v69 + 16);
    unint64_t v70 = *(void *)(v69 + 24);
    if (v71 >= v70 >> 1) {
      uint64_t v69 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1, v69);
    }
    *(void *)(v69 + 16) = v71 + 1;
    uint64_t v57 = v69;
    outlined init with take of StorableValue(v24, v69+ ((*((unsigned __int8 *)v149 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v149 + 80))+ *((void *)v149 + 9) * v71);
    _s12BiomeStreams13StorableValueOWOhTm_0(v150, (void (*)(void))type metadata accessor for StorableValue);
    OUTLINED_FUNCTION_2_4();
    v72();
    v56 += v140;
    if (!--v54)
    {
      swift_bridgeObjectRelease();
      v93._rawValue = (void *)v57;
      goto LABEL_32;
    }
  }
  __swift_storeEnumTagSinglePayload(v60, 1, 1, (uint64_t)v146);
LABEL_31:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v60, &demangling cache variable for type metadata for StorableValue?);
  lazy protocol witness table accessor for type SQLError and conformance SQLError();
  OUTLINED_FUNCTION_39();
  *(Swift::String *)uint64_t v92 = v61;
  *(unsigned char *)(v92 + 64) = 2;
  swift_willThrow();
  return (*v142)(v59, v148);
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return outlined consume of DatabaseValue(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_16_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 224) = (char *)&a9 - v9;
  return type metadata accessor for StorableValue(0);
}

uint64_t OUTLINED_FUNCTION_47_1@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
}

uint64_t OUTLINED_FUNCTION_47_2(uint64_t result)
{
  *(void *)(v2 - 176) = result;
  *(void *)(v2 - 168) = v1;
  *(void *)(v2 - 128) = 91;
  *(void *)(v2 - 120) = 0xE100000000000000;
  return result;
}

ValueMetadata *type metadata accessor for SQLExpression()
{
  return &type metadata for SQLExpression;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_95_0(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = *(void *)(v2 - 360);
  return _s12BiomeStreams13StorableValueOWOhTm_1(v4, a2);
}

void OUTLINED_FUNCTION_95_1(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = *(_DWORD *)(v1 - 308);
  *(void *)(a1 + 8) = *(void *)(v1 - 320);
}

void OUTLINED_FUNCTION_95_2()
{
  uint64_t v3 = *(int *)(v2 + 40);
  *(void *)(v0 + *(int *)(v2 + 36)) = *(void *)(v1 + *(int *)(v2 + 36));
  *(void *)(v0 + v3) = *(void *)(v1 + v3);
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_15_0();
  v4();
  return a2;
}

ValueMetadata *type metadata accessor for Binding()
{
  return &type metadata for Binding;
}

uint64_t destroy for ChangeRecord()
{
  return swift_bridgeObjectRelease();
}

uint64_t StorableValue.dataType.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_67();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = OUTLINED_FUNCTION_90();
  outlined init with copy of StorableValue(v6, v7, v8);
  OUTLINED_FUNCTION_71();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = &enum case for SQLDataType.double(_:);
      goto LABEL_11;
    case 2u:
      uint64_t v10 = &enum case for SQLDataType.date(_:);
      goto LABEL_9;
    case 3u:
      outlined destroy of StorableValue(v5, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v9 = &enum case for SQLDataType.string(_:);
      goto LABEL_11;
    case 4u:
      outlined destroy of StorableValue(v5, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v9 = &enum case for SQLDataType.json(_:);
      goto LABEL_11;
    case 5u:
      outlined destroy of StorableValue(v5, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v9 = &enum case for SQLDataType.data(_:);
      goto LABEL_11;
    case 6u:
      uint64_t v10 = &enum case for SQLDataType.uuid(_:);
LABEL_9:
      uint64_t v11 = *v10;
      type metadata accessor for SQLDataType();
      OUTLINED_FUNCTION_4_3();
      (*(void (**)(uint64_t, uint64_t))(v12 + 104))(a1, v11);
      return outlined destroy of StorableValue(v5, (void (*)(void))type metadata accessor for StorableValue);
    case 7u:
      uint64_t v9 = &enum case for SQLDataType.null(_:);
      goto LABEL_11;
    default:
      uint64_t v9 = &enum case for SQLDataType.integer(_:);
LABEL_11:
      uint64_t v14 = *v9;
      type metadata accessor for SQLDataType();
      OUTLINED_FUNCTION_4_3();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 104))(a1, v14);
  }
}

uint64_t OUTLINED_FUNCTION_67_0@<X0>(void *a1@<X8>)
{
  uint64_t v7 = (void *)(v5 + v4);
  uint64_t v8 = a1[1];
  *uint64_t v7 = *a1;
  v7[1] = v8;
  uint64_t v9 = v5 + v4 + *(int *)(v1 + 48);
  *(void *)uint64_t v9 = *(unsigned __int8 *)(v2 + *(int *)(v3 + 32));
  *(unsigned char *)(v9 + 8) = 0;
  return swift_storeEnumTagMultiPayload();
}

void OUTLINED_FUNCTION_67_1()
{
  *(void *)(v1 - 240) = v0;
}

uint64_t OUTLINED_FUNCTION_90()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_90_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_90_2(sqlite3 *a1, const char *a2)
{
  return sqlite3_exec(a1, a2, 0, 0, 0);
}

uint64_t SQLExpression.expressionString.getter()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Binding.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t SQLExpression.bindings.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_80()
{
  return v0;
}

void OUTLINED_FUNCTION_80_0()
{
  MAX.getCurrentAggregationEvent()();
}

uint64_t OUTLINED_FUNCTION_80_1()
{
  return 0;
}

void specialized __RawDictionaryStorage.find<A>(_:)()
{
  OUTLINED_FUNCTION_30_3();
  uint64_t v4 = v3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v6 = OUTLINED_FUNCTION_35(v5);
  MEMORY[0x1F4188790](v6);
  uint64_t v102 = OUTLINED_FUNCTION_2_9(v7, v81[0]);
  OUTLINED_FUNCTION_0_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  uint64_t v98 = OUTLINED_FUNCTION_47_1((uint64_t)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_0_4();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v97 = OUTLINED_FUNCTION_101_0();
  OUTLINED_FUNCTION_0_4();
  uint64_t v108 = v15;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_5_5(v17, v81[0]);
  uint64_t v96 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  OUTLINED_FUNCTION_0_4();
  uint64_t v107 = v18;
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_100_0();
  uint64_t v95 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  OUTLINED_FUNCTION_0_4();
  uint64_t v100 = v20;
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_99_0();
  uint64_t v93 = type metadata accessor for Date.ISO8601FormatStyle();
  OUTLINED_FUNCTION_0_4();
  uint64_t v91 = v22;
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_70((uint64_t)v81 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v104 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v25);
  uint64_t v103 = (uint64_t)v81 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v28 = OUTLINED_FUNCTION_35(v27);
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_4_6(v29, v81[0]);
  uint64_t v31 = MEMORY[0x1F4188790](v30);
  uint64_t v109 = OUTLINED_FUNCTION_16_2(v31, v32, v33, v34, v35, v36, v37, v38, v81[0]);
  OUTLINED_FUNCTION_0_4();
  uint64_t v40 = v39;
  uint64_t v42 = MEMORY[0x1F4188790](v41);
  uint64_t v44 = (char *)v81 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v42);
  unint64_t v46 = (char *)v81 - v45;
  uint64_t v92 = v0;
  Hasher.init(_seed:)();
  uint64_t v101 = v4;
  Swift::UInt v47 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v47);
  if (!v47)
  {
LABEL_26:
    Swift::Int v80 = Hasher._finalize()();
    specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v101, v80);
    OUTLINED_FUNCTION_31_2();
    return;
  }
  uint64_t v48 = v13;
  uint64_t v49 = v101 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
  uint64_t v90 = v100 + 104;
  uint64_t v89 = v107 + 104;
  uint64_t v88 = v108 + 104;
  uint64_t v87 = v48 + 104;
  uint64_t v82 = (void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  int v86 = *MEMORY[0x1E4F27880];
  int v85 = *MEMORY[0x1E4F27878];
  int v84 = *MEMORY[0x1E4F27888];
  int v83 = *MEMORY[0x1E4F27890];
  v81[1] = v91 + 8;
  uint64_t v50 = *(void *)(v40 + 72);
  uint64_t v108 = v1;
  uint64_t v91 = v2;
  uint64_t v51 = v50;
  uint64_t v107 = v50;
  while (2)
  {
    outlined init with copy of StorableValue(v49, (uint64_t)v46);
    outlined init with copy of StorableValue((uint64_t)v46, (uint64_t)v44);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        if (v44[8])
        {
          double v110 = *(double *)v44;
          LOBYTE(v111) = 1;
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
          goto LABEL_7;
        }
        double v69 = OUTLINED_FUNCTION_13_0(*(double *)v44);
        if (v70)
        {
          __break(1u);
        }
        else if (v69 > -9.22337204e18)
        {
          OUTLINED_FUNCTION_45_2();
          if (v71)
          {
            Int.hashValue.getter();
            Swift::UInt v53 = Int.hashValue.getter();
            goto LABEL_20;
          }
          goto LABEL_29;
        }
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      case 2u:
        uint64_t v54 = v106;
        outlined init with take of (key: String, value: StorableValue)((uint64_t)v44, v106, (uint64_t *)&demangling cache variable for type metadata for Date?);
        uint64_t v55 = v54;
        uint64_t v56 = v105;
        outlined init with copy of Date?(v55, v105);
        uint64_t v57 = type metadata accessor for Date();
        if (__swift_getEnumTagSinglePayload(v56, 1, v57) == 1)
        {
          outlined destroy of UUID?(v56, (uint64_t *)&demangling cache variable for type metadata for Date?);
          OUTLINED_FUNCTION_79_1();
LABEL_23:
          uint64_t v67 = v106;
          uint64_t v68 = (uint64_t *)&demangling cache variable for type metadata for Date?;
LABEL_24:
          outlined destroy of UUID?(v67, v68);
LABEL_25:
          outlined destroy of StorableValue((uint64_t)v46);
          v49 += v51;
          if (!--v47) {
            goto LABEL_26;
          }
          continue;
        }
        uint64_t v100 = v57;
        OUTLINED_FUNCTION_1_0();
        v72();
        OUTLINED_FUNCTION_106();
        OUTLINED_FUNCTION_1_0();
        v73();
        OUTLINED_FUNCTION_106();
        OUTLINED_FUNCTION_1_0();
        v74();
        OUTLINED_FUNCTION_106();
        OUTLINED_FUNCTION_1_0();
        v75();
        uint64_t v76 = v99;
        TimeZone.init(secondsFromGMT:)();
        if (__swift_getEnumTagSinglePayload(v76, 1, v102) != 1)
        {
          (*v82)(v94, v76, v102);
          Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
          Date.ISO8601Format(_:)();
          OUTLINED_FUNCTION_106();
          OUTLINED_FUNCTION_2_4();
          v77();
          OUTLINED_FUNCTION_14();
          OUTLINED_FUNCTION_2_4();
          v78();
          Swift::UInt v79 = String.hashValue.getter();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_81_1();
          Hasher._combine(_:)(v79);
          uint64_t v51 = v107;
          goto LABEL_23;
        }
LABEL_30:
        __break(1u);
        return;
      case 3u:
        unint64_t v58 = *((void *)v44 + 1);
        double v110 = *(double *)v44;
        unint64_t v111 = v58;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v59 = Optional<A>.hashValue.getter();
        swift_bridgeObjectRelease();
        Swift::UInt v53 = v59;
        goto LABEL_20;
      case 4u:
        unint64_t v60 = *((void *)v44 + 1);
        double v110 = *(double *)v44;
        unint64_t v111 = v60;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
        uint64_t v61 = Optional<A>.hashValue.getter();
        swift_bridgeObjectRelease();
        Swift::UInt v53 = v61;
        goto LABEL_20;
      case 5u:
        unint64_t v63 = *((void *)v44 + 1);
        double v110 = *(double *)v44;
        uint64_t v62 = *(void *)&v110;
        unint64_t v111 = v63;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
        lazy protocol witness table accessor for type Data and conformance Data();
        uint64_t v51 = v107;
        Swift::UInt v64 = Optional<A>.hashValue.getter();
        Hasher._combine(_:)(v64);
        outlined consume of Data?(v62, v63);
        goto LABEL_25;
      case 6u:
        uint64_t v65 = v103;
        outlined init with take of (key: String, value: StorableValue)((uint64_t)v44, v103, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        lazy protocol witness table accessor for type UUID and conformance UUID();
        Swift::UInt v66 = Optional<A>.hashValue.getter();
        Hasher._combine(_:)(v66);
        uint64_t v67 = v65;
        uint64_t v51 = v107;
        uint64_t v68 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
        goto LABEL_24;
      case 7u:
        Swift::UInt v53 = OUTLINED_FUNCTION_80_1();
        goto LABEL_20;
      default:
        char v52 = v44[8];
        double v110 = *(double *)v44;
        LOBYTE(v111) = v52;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
LABEL_7:
        Swift::UInt v53 = Optional<A>.hashValue.getter();
LABEL_20:
        Hasher._combine(_:)(v53);
        goto LABEL_25;
    }
  }
}

uint64_t OUTLINED_FUNCTION_0_5(uint64_t a1)
{
  return MEMORY[0x1F40E7228](v2, v1, a1);
}

void OUTLINED_FUNCTION_0_8(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_9(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_error_impl(a1, v4, OS_LOG_TYPE_ERROR, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_0_10(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_0_11(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_0_13()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_0_15(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t OUTLINED_FUNCTION_0_17()
{
  return errstart(20, 0);
}

uint64_t OUTLINED_FUNCTION_0_18()
{
  return errstart(20, 0);
}

uint64_t OUTLINED_FUNCTION_0_19(_DWORD *a1)
{
  *a1 = -1;
  return errstart(20, 0);
}

uint64_t outlined init with copy of StorableValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StorableValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL OUTLINED_FUNCTION_35_0@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_35_2()
{
  return (v0 & 0xFFFFFFFFFFFFFFFLL) + 32;
}

void OUTLINED_FUNCTION_35_4()
{
  uint64_t v1 = 0x5420455441455243;
  unint64_t v2 = 0xED000020454C4241;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t outlined destroy of StorableValue(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StorableValue(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_39()
{
  return swift_allocError();
}

void OUTLINED_FUNCTION_5_2(uint64_t a1@<X8>)
{
  *(void *)(v2 - 232) = a1;
  *(void *)(v2 - 224) = (v1 - 32) | 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_5_4()
{
  return v0;
}

void OUTLINED_FUNCTION_5_5(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 264) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_5_6()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_5_7()
{
  uint64_t v3 = *(unsigned int *)(v1 - 8);
  return scanner_errposition(v3, v0);
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  OUTLINED_FUNCTION_43_0();
  if (v6)
  {
    OUTLINED_FUNCTION_17();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_60();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_26_0();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(v5);
    uint64_t v12 = (void *)swift_allocObject();
    size_t v13 = _swift_stdlib_malloc_size(v12);
    v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 16);
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 4;
  uint64_t v15 = v0 + 32;
  if (v3)
  {
    v2(v15, v10, v14);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;

  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_40_0();
  if (v8)
  {
    OUTLINED_FUNCTION_17();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_60();
      if (v10)
      {
LABEL_23:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_26_0();
    }
  }
  else
  {
    char v9 = v6;
  }
  uint64_t v12 = *(void *)(v0 + 16);
  if (v9 <= v12) {
    size_t v13 = *(void *)(v0 + 16);
  }
  else {
    size_t v13 = v9;
  }
  if (!v13) {
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(v7);
  uint64_t v14 = v4(0);
  OUTLINED_FUNCTION_3_7(v14);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = (void *)OUTLINED_FUNCTION_27_0();
  uint64_t v18 = _swift_stdlib_malloc_size(v17);
  if (!v16)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v18 - v5 == 0x8000000000000000 && v16 == -1) {
    goto LABEL_22;
  }
  v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v5) / v16);
LABEL_17:
  uint64_t v20 = *(void *)(v4(0) - 8);
  uint64_t v21 = OUTLINED_FUNCTION_37_0(*(unsigned __int8 *)(v20 + 80));
  if (v3)
  {
    v2(v21);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v21);
  }
  swift_release();
  OUTLINED_FUNCTION_34();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  size_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_40_0();
  if (v8)
  {
    OUTLINED_FUNCTION_17();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_60();
      if (v10)
      {
LABEL_23:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_26_0();
    }
  }
  else
  {
    char v9 = v6;
  }
  uint64_t v12 = *(void *)(v0 + 16);
  if (v9 <= v12) {
    size_t v13 = *(void *)(v0 + 16);
  }
  else {
    size_t v13 = v9;
  }
  if (!v13) {
    goto LABEL_17;
  }
  __swift_instantiateConcreteTypeFromMangledName(v7);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(v4);
  OUTLINED_FUNCTION_3_7(v14);
  uint64_t v16 = *(void *)(v15 + 72);
  uint64_t v17 = (void *)OUTLINED_FUNCTION_27_0();
  uint64_t v18 = _swift_stdlib_malloc_size(v17);
  if (!v16)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if (v18 - v5 == 0x8000000000000000 && v16 == -1) {
    goto LABEL_22;
  }
  v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v5) / v16);
LABEL_17:
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(v4);
  OUTLINED_FUNCTION_13(v20);
  uint64_t v22 = OUTLINED_FUNCTION_37_0(*(unsigned __int8 *)(v21 + 80));
  if (v3)
  {
    v2(v22);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v22);
  }
  swift_release();
  OUTLINED_FUNCTION_34();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, void *);
  void (*v2)(uint64_t, uint64_t, void *);
  char v3;
  uint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  size_t v13;
  void *v14;
  uint64_t v15;

  OUTLINED_FUNCTION_43_0();
  if (v6)
  {
    OUTLINED_FUNCTION_17();
    if (v8 != v9)
    {
      OUTLINED_FUNCTION_60();
      if (v8)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_26_0();
    }
  }
  else
  {
    uint64_t v7 = v4;
  }
  uint64_t v10 = *(void *)(v0 + 16);
  if (v7 <= v10) {
    uint64_t v11 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v11 = v7;
  }
  if (v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(v5);
    uint64_t v12 = (void *)swift_allocObject();
    size_t v13 = _swift_stdlib_malloc_size(v12);
    v12[2] = v10;
    v12[3] = 2 * ((uint64_t)(v13 - 32) / 8);
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 4;
  uint64_t v15 = v0 + 32;
  if (v3)
  {
    v2(v15, v10, v14);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v15, v10, v14);
  }
  swift_release();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_43(uint64_t a1)
{
  return a1 + *(int *)(v1 + 20);
}

uint64_t OUTLINED_FUNCTION_43_3(uint64_t a1, uint64_t a2)
{
  return __swift_getEnumTagSinglePayload(a1, a2, *(void *)(v2 - 360));
}

void OUTLINED_FUNCTION_43_4()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_9_6();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_8_5();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_70_2();
  if (!v5 && v4)
  {
    BOOL v4 = v3 >= v2;
    BOOL v5 = v3 == v2;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v5 = 0;
  }
  if (!v5 && v4)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_10_4();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  void (*v3)(void);
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_9_6();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_8_5();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_30_4();
  v3(0);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_75_2();
  if (!v6 & v5) {
    uint64_t v7 = v4 > v2;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_10_4();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_21_2();

  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_9_6();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_8_5();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_30_4();
  __swift_instantiateConcreteTypeFromMangledName(v3);
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_75_2();
  if (!v6 & v5) {
    uint64_t v7 = v4 > v2;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_10_4();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_21_2();

  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  BOOL v5;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_9_6();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_8_5();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_70_2();
  if (!v5 && v4)
  {
    BOOL v4 = v3 >= v2;
    BOOL v5 = v3 == v2;
  }
  else
  {
    BOOL v4 = 0;
    BOOL v5 = 0;
  }
  if (!v5 && v4)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_10_4();
    goto LABEL_11;
  }

  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_9_6();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_8_5();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_30_4();
  if (v4 + 8 * v3 > v2 && v2 + 8 * v3 > v4)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_10_4();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(v5);
  OUTLINED_FUNCTION_21_2();

  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_9_6();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_8_5();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_30_4();
  if (v4 + 40 * v3 > v2 && v2 + 40 * v3 > v4)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_10_4();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Aggregation);
  OUTLINED_FUNCTION_21_2();

  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

void OUTLINED_FUNCTION_70(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

uint64_t OUTLINED_FUNCTION_70_0()
{
  return *(void *)(v0 - 176);
}

void OUTLINED_FUNCTION_70_1(int a1@<W8>)
{
  *(_DWORD *)(v2 - 388) = a1;
  *(void *)(v2 - 400) = v1 + 104;
}

ValueMetadata *OUTLINED_FUNCTION_99()
{
  uint64_t v3 = v1[1];
  *uint64_t v0 = *v1;
  v0[1] = v3;
  return type metadata accessor for SQLExpression();
}

uint64_t OUTLINED_FUNCTION_99_0()
{
  return 0;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    OUTLINED_FUNCTION_17();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_60();
      if (v12)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_26_0();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15)
  {
    uint64_t v19 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v16 = *(void *)(a6(0) - 8);
  uint64_t v17 = *(void *)(v16 + 72);
  unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (void *)swift_allocObject();
  size_t v20 = _swift_stdlib_malloc_size(v19);
  if (!v17 || (v20 - v18 == 0x8000000000000000 ? (BOOL v21 = v17 == -1) : (BOOL v21 = 0), v21))
  {
LABEL_23:
    OUTLINED_FUNCTION_0_16();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v19[2] = v14;
  v19[3] = 2 * ((uint64_t)(v20 - v18) / v17);
LABEL_18:
  uint64_t v22 = *(void *)(a6(0) - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v23, v14);
    OUTLINED_FUNCTION_46_2();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v14, (unint64_t)v19 + v23, a4, a7);
  }
  return (uint64_t)v19;
}

uint64_t OUTLINED_FUNCTION_17_0()
{
  return v1 + *(int *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_17_1()
{
  return _NativeDictionary._delete(at:)();
}

uint64_t OUTLINED_FUNCTION_17_2(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v5 = v2[1];
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v5;
  *(unsigned char *)(a2 + 64) = 8;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_17_3()
{
  *(void *)(v2 - 296) = (v0 - 1) & v0;
  *(void *)(v2 - 304) = v1;
}

void OUTLINED_FUNCTION_17_4()
{
  uint64_t v3 = v0;
  uint64_t v4 = v1;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_17_6()
{
  return swift_allocError();
}

uint64_t OUTLINED_FUNCTION_60_0()
{
  return outlined init with copy of Date?(v1, v2 - 120, v0);
}

void OUTLINED_FUNCTION_60_2(uint64_t a1@<X8>)
{
  **(void **)(a1 - 256) = v1;
}

void OUTLINED_FUNCTION_60_4()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

ValueMetadata *type metadata accessor for AggregationFunction()
{
  return &type metadata for AggregationFunction;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_9_6();
    goto LABEL_11;
  }
  uint64_t v9 = *(void *)(a5(0) - 8);
  uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  uint64_t v11 = *(void *)(v9 + 72);
  unint64_t v12 = v10 + v11 * a1;
  unint64_t v13 = a3 + v11 * v5;
  if (v12 >= v13 || v12 + v11 * v5 <= a3)
  {
    swift_arrayInitWithCopy();
    swift_bridgeObjectRelease();
    return v13;
  }
  OUTLINED_FUNCTION_0_16();
  OUTLINED_FUNCTION_10_4();
LABEL_11:
  uint64_t result = OUTLINED_FUNCTION_8_5();
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_14_0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_37_0@<X0>(uint64_t a1@<X8>)
{
  return v1 + ((a1 + 32) & ~a1);
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  *(void *)(v2 - 560) = v0;
  *(void *)(v2 - 552) = v1;
  return *(void *)(v2 - 152);
}

uint64_t OUTLINED_FUNCTION_37_3()
{
  return TimeZone.init(secondsFromGMT:)();
}

uint64_t OUTLINED_FUNCTION_34_1()
{
  return swift_deallocPartialClassInstance();
}

uint64_t OUTLINED_FUNCTION_34_2()
{
  return (v2 + v0 + v1) & ~v0;
}

uint64_t OUTLINED_FUNCTION_13_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_4()
{
  return v0;
}

void OUTLINED_FUNCTION_27(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 240) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_27_0()
{
  return swift_allocObject();
}

double OUTLINED_FUNCTION_27_1()
{
  double result = 0.0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(unsigned char *)(v0 + 64) = 3;
  return result;
}

void OUTLINED_FUNCTION_27_2(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)(v2 + a1) = a2;
}

uint64_t OUTLINED_FUNCTION_27_3()
{
  *(void *)(v0 - 296) = *(void *)(v0 - 144);
  *(void *)(v0 - 304) = *(void *)(v0 - 136);
  return outlined retain of Dataflow(v0 - 240);
}

Swift::OpaquePointer_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> SQLExpressionEvaluator.execute(sql:bindingValues:)(Swift::String sql, Swift::OpaquePointer bindingValues)
{
  object = sql._object;
  uint64_t countAndFlagsBits = sql._countAndFlagsBits;
  v29[1] = *(sqlite3_stmt **)MEMORY[0x1E4F143B8];
  uint64_t v6 = (uint64_t *)(v2 + 32);
  if (!*(void *)(*(void *)(v2 + 32) + 16)
    || (swift_bridgeObjectRetain(),
        uint64_t v7 = OUTLINED_FUNCTION_26_1(),
        specialized __RawDictionaryStorage.find<A>(_:)(v7, v8),
        char v10 = v9,
        swift_bridgeObjectRelease(),
        (v10 & 1) == 0))
  {
    uint64_t v11 = *(sqlite3 **)(v2 + 24);
    v29[0] = 0;
    OUTLINED_FUNCTION_26_1();
    uint64_t v12 = String.utf8CString.getter();
    uint64_t v15 = OUTLINED_FUNCTION_23_1(v11, (const char *)(v12 + 32), v13, v14, v29);
    swift_release();
    if (v15 || (unint64_t v23 = v29[0]) == 0)
    {
      id v16 = OUTLINED_FUNCTION_32_1(v15);
      swift_getErrorValue();
      Error.localizedDescription.getter();

      OUTLINED_FUNCTION_2_6();
      OUTLINED_FUNCTION_6_5();
      uint64_t v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v19 = v18;
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
      OUTLINED_FUNCTION_39();
      *(void *)uint64_t v20 = countAndFlagsBits;
      *(void *)(v20 + 8) = object;
      *(void *)(v20 + 16) = v17;
      *(void *)(v20 + 24) = v19;
      *(unsigned char *)(v20 + 32) = 2;
      swift_bridgeObjectRetain();
      BOOL v21 = (void *)swift_willThrow();
      goto LABEL_10;
    }
    swift_bridgeObjectRetain();
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v23, countAndFlagsBits, (uint64_t)object);
    swift_bridgeObjectRelease();
  }
  uint64_t v24 = *v6;
  swift_bridgeObjectRetain();
  uint64_t v25 = OUTLINED_FUNCTION_26_1();
  uint64_t v27 = (sqlite3_stmt *)specialized Dictionary.subscript.getter(v25, v26, v24);
  swift_bridgeObjectRelease();
  if (v27)
  {
    BOOL v21 = (void *)SQLExpressionEvaluator.execute(stmt:bindingValues:)(v27, (uint64_t)bindingValues._rawValue);
  }
  else
  {
    _StringGuts.grow(_:)(50);
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_26_1();
    String.append(_:)(v28);
    BOOL v21 = (void *)OUTLINED_FUNCTION_11_0();
    __break(1u);
  }
LABEL_10:
  result.value._rawValue = v21;
  result.is_nil = v22;
  return result;
}

void OUTLINED_FUNCTION_26(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 208) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_26_1()
{
  return v0;
}

void OUTLINED_FUNCTION_36(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_26_2()
{
  return swift_allocObject();
}

void OUTLINED_FUNCTION_26_3(unint64_t a1@<X8>)
{
  *(void *)(v2 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  *(void *)(v3[6] + 8 * a1) = v1;
  *(void *)(v3[7] + 8 * a1) = *(void *)(v4 - 312);
  ++v3[2];
}

uint64_t OUTLINED_FUNCTION_26_4()
{
  return *(void *)(v0 - 320);
}

uint64_t OUTLINED_FUNCTION_23()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

uint64_t OUTLINED_FUNCTION_23_1(sqlite3 *a1, const char *a2, uint64_t a3, uint64_t a4, sqlite3_stmt **a5)
{
  return sqlite3_prepare_v3(a1, a2, -1, 1u, a5, 0);
}

uint64_t OUTLINED_FUNCTION_23_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_4()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(a3 + 56) + 8 * v4);
  }
  else {
    return 0;
  }
}

{
  char v3;

  if (*(void *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v3 & 1) != 0)) {
    return swift_retain();
  }
  else {
    return 0;
  }
}

ValueMetadata *type metadata accessor for ResultColumn()
{
  return &type metadata for ResultColumn;
}

void OUTLINED_FUNCTION_46_0(void *a1, uint64_t a2, os_signpost_type_t a3, os_signpost_id_t a4, const char *a5)
{
  _os_signpost_emit_with_name_impl(a1, v5, a3, a4, a5, v6, v7, 2u);
}

uint64_t OUTLINED_FUNCTION_46_1()
{
  uint64_t result = v1;
  *(void *)(v2 - 128) = v0;
  return result;
}

uint64_t OUTLINED_FUNCTION_46_2()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_46_3()
{
  unint64_t v4 = (void *)(*(void *)(v2 - 400) | 0x8000000000000000);
  return static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v1, v0, 36, 0xD000000000000022, v4);
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_31_0();
  a4(a1, a2, a3);
  *unint64_t v4 = v10;

  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, OpaquePointer>);
  uint64_t result = _NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15);
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = result;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    *(void *)(v20[7] + 8 * v16) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  BOOL v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t vars8;

  char v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    BOOL v21 = *(void *)(v20 + 56);
    Swift::Bool v22 = v21 + *(void *)(*(void *)(type metadata accessor for StorableValue(0) - 8) + 72) * v16;
    return outlined assign with take of StorableValue(a1, v22);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
}

{
  void *v4;
  void **v5;
  void *v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  BOOL v14;
  Swift::Int v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t vars8;

  char v5 = (void **)v4;
  uint64_t v10 = (void *)*v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, DatabaseWithAccess>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  uint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  uint64_t v20 = *v5;
  if (v17)
  {
    BOOL v21 = v20[7];
    uint64_t result = swift_release();
    *(void *)(v21 + 8 * v16) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  char v5 = (void *)(a5[6] + 16 * result);
  *char v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_30(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(v1, 1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_30_0()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

void OUTLINED_FUNCTION_30_1()
{
  uint64_t v1 = *(void *)(v0 - 96);
  *(void *)uint64_t v1 = 0;
  *(unsigned char *)(v1 + 8) = 1;
}

uint64_t OUTLINED_FUNCTION_75(uint64_t a1)
{
  return a1 + *(int *)(v1 + 20);
}

uint64_t OUTLINED_FUNCTION_75_0()
{
  return __swift_storeEnumTagSinglePayload(v1, 0, 1, v0);
}

void specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_3_14();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_57_3();
    if (v6 && (v5(0), OUTLINED_FUNCTION_4_3(), v3 + *(void *)(v7 + 72) * v2 > v4))
    {
      if (v4 != v3)
      {
        OUTLINED_FUNCTION_20_3();
        swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      v5(0);
      OUTLINED_FUNCTION_20_3();
      swift_arrayInitWithTakeFrontToBack();
    }
  }
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t v7;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    OUTLINED_FUNCTION_3_14();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_57_3();
    if (v6
      && (__swift_instantiateConcreteTypeFromMangledName(v5),
          OUTLINED_FUNCTION_4_3(),
          v3 + *(void *)(v7 + 72) * v2 > v4))
    {
      if (v4 != v3)
      {
        OUTLINED_FUNCTION_20_3();
        swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(v5);
      OUTLINED_FUNCTION_20_3();
      swift_arrayInitWithTakeFrontToBack();
    }
  }
}

void OUTLINED_FUNCTION_20()
{
  uint64_t v3 = (char *)v1 + *(int *)(v0 + 48);
  *(void *)uint64_t v3 = 0;
  v3[8] = 1;
  uint64_t v4 = *(void *)(v2 - 176);
  *uint64_t v1 = *(void *)(v2 - 184);
  v1[1] = v4;
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  *(void *)(v1 - 368) = v0;
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_20_2(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(v1, 1, a1);
}

uint64_t OUTLINED_FUNCTION_20_3()
{
  return v0;
}

void OUTLINED_FUNCTION_57(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 232) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_57_1()
{
  outlined consume of Data?(v0, v1);
  return outlined consume of Data?(v0, v1);
}

void OUTLINED_FUNCTION_57_2(uint64_t a1@<X8>)
{
  *(void *)(v1 - 192) = a1;
  *(unsigned char *)(v1 - 184) = 1;
}

double OUTLINED_FUNCTION_57_4(uint64_t a1)
{
  *(unsigned char *)(v1 + *(int *)(a1 + 56)) = 1;
  uint64_t v2 = (_OWORD *)(v1 + *(int *)(a1 + 60));
  double result = 0.0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  return result;
}

uint64_t OUTLINED_FUNCTION_101_0()
{
  return type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
}

uint64_t OUTLINED_FUNCTION_101_1()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t OUTLINED_FUNCTION_100_0()
{
  return 0;
}

void OUTLINED_FUNCTION_100_1()
{
  *(void *)(v1 - 216) = v0;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for StorableValue(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5 - 8);
  char v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  unint64_t v11 = (char *)&v22 - v10;
  uint64_t v12 = v2 + 64;
  uint64_t v13 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v14 = a2 & ~v13;
  if ((*(void *)(v2 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(a1 + 16);
    uint64_t v24 = v2 + 64;
    uint64_t v25 = v6;
    uint64_t v22 = v16;
    uint64_t v23 = ~v13;
    do
    {
      uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      if (*(void *)(v17 + 16) == v16)
      {
        if (!v16 || v17 == a1) {
          return v14;
        }
        unint64_t v18 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
        swift_bridgeObjectRetain();
        uint64_t v19 = *(void *)(v6 + 72);
        while (1)
        {
          outlined init with copy of StorableValue(v17 + v18, (uint64_t)v11);
          outlined init with copy of StorableValue(a1 + v18, (uint64_t)v9);
          char v20 = static StorableValue.== infix(_:_:)((uint64_t)v11, (uint64_t)v9);
          outlined destroy of StorableValue((uint64_t)v9);
          outlined destroy of StorableValue((uint64_t)v11);
          if ((v20 & 1) == 0) {
            break;
          }
          v18 += v19;
          if (!--v16)
          {
            swift_bridgeObjectRelease();
            return v14;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v12 = v24;
        uint64_t v6 = v25;
        uint64_t v16 = v22;
        uint64_t v15 = v23;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v12 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

uint64_t OUTLINED_FUNCTION_86()
{
  return KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
}

ValueMetadata *OUTLINED_FUNCTION_86_0(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  return type metadata accessor for SQLExpression();
}

void OUTLINED_FUNCTION_86_1()
{
  *(void *)(v2 - 472) = v0;
  *(void *)(v2 - 480) = v1;
}

uint64_t OUTLINED_FUNCTION_86_2()
{
  *(void *)(v1 - 88) = v0;
  return 0;
}

uint64_t specialized Dictionary.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(a3 + 56);
    uint64_t v10 = type metadata accessor for StorableValue(0);
    OUTLINED_FUNCTION_4_3();
    outlined init with copy of MaterializedViewPhysicalPlan(v9 + *(void *)(v11 + 72) * v8, a4, (void (*)(void))type metadata accessor for StorableValue);
    uint64_t v12 = a4;
    uint64_t v13 = 0;
    uint64_t v14 = v10;
  }
  else
  {
    uint64_t v14 = type metadata accessor for StorableValue(0);
    uint64_t v12 = a4;
    uint64_t v13 = 1;
  }

  return __swift_storeEnumTagSinglePayload(v12, v13, 1, v14);
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))type metadata accessor for SQLDataType, (unint64_t *)&lazy protocol witness table cache variable for type SQLDataType and conformance SQLDataType, (void (*)(uint64_t))type metadata accessor for SQLDataType);
}

{
  return specialized == infix<A>(_:_:)(a1, a2, (void (*)(void))type metadata accessor for SQLRawDataType, &lazy protocol witness table cache variable for type SQLRawDataType and conformance SQLRawDataType, (void (*)(uint64_t))type metadata accessor for SQLRawDataType);
}

uint64_t specialized Collection.first.getter@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = a2(0);
  if (v4)
  {
    OUTLINED_FUNCTION_15_0();
    v6();
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 1;
  }

  return __swift_storeEnumTagSinglePayload(a3, v7, 1, v5);
}

uint64_t initializeBufferWithCopyOfBuffer for Binding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t storeEnumTagSinglePayload for Binding(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for Binding(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t specialized Dictionary.startIndex.getter(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v2 = 64;
  for (uint64_t i = 10; i - 8 < (unint64_t)(v3 + 63) >> 6; ++i)
  {
    unint64_t v1 = *(void *)(a1 + 8 * i);
    v2 += 64;
    if (v1) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  uint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    uint64_t v7 = 2;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64;
  while (v8)
  {
    uint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

ValueMetadata *type metadata accessor for Schema()
{
  return &type metadata for Schema;
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    goto LABEL_10;
  }
  if (a2 < 0 || (OUTLINED_FUNCTION_8_0(), v9 ^ v10 | v8))
  {
    __break(1u);
  }
  else if ((*(void *)(v7 + 8 * (v5 >> 6) + 64) >> v5))
  {
    if (*(_DWORD *)(v7 + 36) == v6)
    {
      uint64_t v11 = *(void *)(v7 + 56) + 24 * v5;
      uint64_t v12 = *(void *)v11;
      unint64_t v13 = *(void *)(v11 + 8);
      *(void *)uint64_t v4 = *(void *)v11;
      *(void *)(v4 + 8) = v13;
      char v14 = *(unsigned char *)(v11 + 16);
      *(unsigned char *)(v4 + 16) = v14;
      swift_bridgeObjectRetain();
      outlined copy of DatabaseValue(v12, v13, v14);
      return;
    }
    goto LABEL_9;
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
}

uint64_t OUTLINED_FUNCTION_8_2()
{
  return v0;
}

void OUTLINED_FUNCTION_8_3(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000011;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

void OUTLINED_FUNCTION_8_4(uint64_t a1@<X8>)
{
  *(void *)(v1 - 208) = *(void *)(*(void *)(a1 - 256) + 72);
}

uint64_t OUTLINED_FUNCTION_8_5()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_8_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_7()
{
  return scanner_errposition(v1, v0);
}

uint64_t OUTLINED_FUNCTION_29()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_29_0()
{
  return v0 + 16;
}

void OUTLINED_FUNCTION_29_2()
{
  ++*(void *)(v0 + 16);
}

uint64_t OUTLINED_FUNCTION_29_4()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

uint64_t BiomeLibraryAndInternalLibraryNode()
{
  return objc_opt_class();
}

void sub_18E69066C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18E691618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, os_activity_scope_state_s state)
{
  os_activity_scope_leave(&state);
  os_unfair_lock_unlock(v15);
  _Unwind_Resume(a1);
}

void sub_18E6921D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t dispatch thunk of static IntelligencePlatformView.configStr.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of static IntelligencePlatformView.type.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static DatabaseResource.views.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of static LibraryBase.lookupDatabaseResource(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> (@unowned Bool)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  swift_unknownObjectRelease();
  return v1 & 1;
}

uint64_t partial apply for closure #2 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:)(uint64_t a1)
{
  Swift::Int Description = type metadata accessor for SelectCore()[-1].Description;
  unint64_t v4 = (*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80);
  unint64_t v5 = (Description[8] + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void **)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  uint64_t v9 = *(void *)(v1 + v5);
  uint64_t v10 = *(void *)(v1 + v6);
  uint64_t v11 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));

  return closure #2 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:)(a1, v7, v8, v1 + v4, v9, v10, v11);
}

uint64_t QueryPlannerMetadata.__deallocating_deinit()
{
  QueryPlannerMetadata.deinit();
  OUTLINED_FUNCTION_44_2();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);

  return MEMORY[0x1F4186488](v0, v2, v3);
}

uint64_t QueryPlannerMetadata.deinit()
{
  type metadata accessor for MaterializedView();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_2_4();
  v1();
  _s12BiomeStreams13StorableValueOWOhTm_2(v0 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_bookmark, (void (*)(void))type metadata accessor for BookmarkCache);
  _s12BiomeStreams13StorableValueOWOhTm_2(v0 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedAggregationMetadata, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
  _s12BiomeStreams13StorableValueOWOhTm_2(v0 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedFirstMatchingRecord, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
  return v0;
}

uint64_t destroy for BookmarkCache(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, ValueMetadata *))v2[-1].Description + 1))(a1, v2);
  swift_unknownObjectRelease();

  return swift_release();
}

uint64_t SelectCorePhysicalPlan.update(metadata:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v4 = OUTLINED_FUNCTION_35(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16();
  uint64_t v178 = v5;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_45();
  uint64_t v192 = v7;
  OUTLINED_FUNCTION_52();
  v189 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  uint64_t v167 = v8;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_26(v10, v165);
  uint64_t v193 = type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_0_4();
  uint64_t v186 = v11;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_16();
  uint64_t v177 = v13;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_21();
  uint64_t v194 = v15;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_45();
  unsigned int v187 = v17;
  OUTLINED_FUNCTION_52();
  unint64_t v188 = type metadata accessor for ResultColumn();
  OUTLINED_FUNCTION_0_4();
  uint64_t v170 = v18;
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_57(v20, v165);
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
  uint64_t v22 = OUTLINED_FUNCTION_35(v21);
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_10();
  uint64_t v171 = v23;
  OUTLINED_FUNCTION_52();
  uint64_t v183 = type metadata accessor for SelectCore();
  OUTLINED_FUNCTION_0_4();
  uint64_t v176 = v24;
  uint64_t v26 = *(void *)(v25 + 64);
  uint64_t v28 = MEMORY[0x1F4188790](v27);
  uint64_t v174 = (void *)MEMORY[0x192FB0A00](v28);
  uint64_t v29 = (int *)type metadata accessor for SelectCorePhysicalPlan(0);
  uint64_t v30 = v29[5];
  uint64_t v31 = *(void **)(v1 + v29[6]);
  uint64_t v32 = v29[8];
  uint64_t v166 = v29[7];
  uint64_t v185 = *(void *)(v1 + v166);
  uint64_t v33 = v1 + v30;
  uint64_t v172 = v1;
  uint64_t v169 = v32;
  uint64_t v184 = *(void *)(v1 + v32);
  uint64_t v182 = swift_allocObject();
  *(void *)(v182 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = 0;
  uint64_t v35 = v34;
  v191 = (char *)objc_msgSend(v31, sel_publisher);
  uint64_t v36 = a1 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_bookmark;
  uint64_t v180 = *(void *)(v36 + *(int *)(type metadata accessor for BookmarkCache(0) + 20));
  uint64_t v37 = (void *)swift_allocObject();
  v37[2] = v31;
  v37[3] = v35;
  uint64_t v195 = v35;
  v37[4] = a1;
  v202 = partial apply for closure #1 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:);
  v203 = v37;
  aBlock = (void **)MEMORY[0x1E4F143A8];
  uint64_t v199 = 1107296256;
  uint64_t v179 = (uint64_t)&v200;
  uint64_t v200 = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion, @guaranteed BMBookmark) -> ();
  unint64_t v201 = &block_descriptor;
  uint64_t v181 = _Block_copy(&aBlock);
  swift_unknownObjectRetain();
  id v38 = v31;
  id v175 = v38;
  swift_retain();
  uint64_t v168 = a1;
  swift_retain();
  swift_release();
  uint64_t v39 = v176;
  uint64_t v40 = (char *)&v165 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v173 = v33;
  uint64_t v41 = v183;
  OUTLINED_FUNCTION_18();
  v42();
  unint64_t v43 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  unint64_t v44 = (v26 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = v195;
  *(void *)(v46 + 16) = v38;
  *(void *)(v46 + 24) = v47;
  (*(void (**)(unint64_t, char *, ValueMetadata *))(v39 + 32))(v46 + v43, v40, v41);
  *(void *)(v46 + v44) = v184;
  uint64_t v48 = v182;
  *(void *)(v46 + v45) = v182;
  *(void *)(v46 + ((v45 + 15) & 0xFFFFFFFFFFFFFFF8)) = v185;
  v202 = partial apply for closure #2 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:);
  v203 = (void *)v46;
  aBlock = (void **)MEMORY[0x1E4F143A8];
  uint64_t v199 = 1107296256;
  uint64_t v200 = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed Swift.AnyObject) -> (@unowned Bool);
  unint64_t v201 = &block_descriptor_16;
  uint64_t v49 = _Block_copy(&aBlock);
  id v50 = v175;
  uint64_t v51 = v195;
  swift_retain();
  swift_retain();
  uint64_t v52 = v48;
  swift_retain();
  swift_release();
  id v53 = v191;
  uint64_t v54 = v181;
  id v55 = objc_msgSend(v191, sel_drivableSinkWithBookmark_completion_shouldContinue_, v180, v181, v49);
  _Block_release(v49);
  _Block_release(v54);

  swift_unknownObjectRelease();
  uint64_t v56 = *(void **)(v51 + 16);
  if (v56)
  {
    id v57 = v56;
    swift_willThrow();
    swift_release();
    swift_release();
    goto LABEL_77;
  }
  uint64_t v58 = v196;
  uint64_t v59 = *(void *)(v48 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_release();
  uint64_t v165 = *(void *)(v59 + 16);
  uint64_t v60 = v173;
  uint64_t v61 = SelectCore.groupBy.getter();
  if (!v61)
  {
    uint64_t v74 = v172;
    uint64_t v75 = v190;
LABEL_44:
    uint64_t v104 = SelectCore.select.getter();
    uint64_t v105 = *(void *)(v59 + 16);
    if (!v105)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v52 = MEMORY[0x1E4FBC860];
LABEL_77:
      return v52;
    }
    uint64_t v183 = *(ValueMetadata **)(v74 + v169);
    aBlock = (void **)MEMORY[0x1E4FBC860];
    uint64_t v169 = v105;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v173 = *(void *)(v104 + 16);
    uint64_t v176 = v59;
    uint64_t v171 = v59 + 32;
    uint64_t v181 = (void *)(v170 + 16);
    uint64_t v182 = v167 + 8;
    uint64_t v180 = v170 + 8;
    uint64_t v106 = v104;
    uint64_t v107 = 0;
    uint64_t v168 = v106;
    while (1)
    {
      uint64_t v108 = (unsigned __int8 *)(v171 + 16 * v107);
      LODWORD(v175) = *v108;
      uint64_t v109 = *((void *)v108 + 1);
      swift_bridgeObjectRetain_n();
      uint64_t v195 = Dictionary.init(dictionaryLiteral:)();
      uint64_t v110 = v173;
      if (v173) {
        break;
      }
LABEL_70:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v52 = (uint64_t)aBlock;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v52 = (uint64_t)aBlock;
      }
      uint64_t v159 = v169;
      unint64_t v160 = *(void *)(v52 + 16);
      if (v160 >= *(void *)(v52 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v159 = v169;
        uint64_t v52 = (uint64_t)aBlock;
      }
      ++v107;
      *(void *)(v52 + 16) = v160 + 1;
      uint64_t v161 = v52 + 16 * v160;
      *(unsigned char *)(v161 + 32) = (_BYTE)v175;
      *(void *)(v161 + 40) = v195;
      uint64_t v75 = v190;
      if (v107 == v159)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_77;
      }
    }
    uint64_t v167 = v107;
    uint64_t v196 = v58;
    unint64_t v111 = v106 + ((*(unsigned __int8 *)(v170 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v170 + 80));
    uint64_t v179 = *(void *)(v170 + 72);
    uint64_t v184 = *(void *)(v170 + 16);
    swift_bridgeObjectRetain();
    uint64_t v112 = v110;
    uint64_t v185 = v109;
    char v113 = (void *)v109;
    while (1)
    {
      OUTLINED_FUNCTION_18();
      v114();
      uint64_t v115 = ResultColumn.name.getter();
      uint64_t v117 = v116;
      ResultColumn.expression.getter(v75);
      uint64_t v118 = v187;
      uint64_t v52 = (uint64_t)v183;
      uint64_t v119 = v196;
      SQLExpressionEvaluator.execute(expression:payload:)(v75, v185, v187);
      uint64_t v196 = v119;
      if (v119)
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_2_4();
        v162();
        OUTLINED_FUNCTION_2_4();
        v163();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_98((uint64_t)&aBlock);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_77;
      }
      OUTLINED_FUNCTION_2_4();
      v120();
      outlined init with take of StorableValue((uint64_t)v118, v194, (void (*)(void))type metadata accessor for StorableValue);
      swift_bridgeObjectRetain();
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v197[0] = v113;
      unint64_t v122 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v117);
      uint64_t v124 = v113[2];
      BOOL v125 = (v123 & 1) == 0;
      Swift::Int v126 = v124 + v125;
      if (__OFADD__(v124, v125))
      {
        __break(1u);
        goto LABEL_80;
      }
      unint64_t v127 = v122;
      char v128 = v123;
      v191 = (char *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v126))
      {
        uint64_t v129 = OUTLINED_FUNCTION_80();
        unint64_t v131 = specialized __RawDictionaryStorage.find<A>(_:)(v129, v130);
        if ((v128 & 1) != (v132 & 1)) {
          goto LABEL_95;
        }
        unint64_t v127 = v131;
      }
      char v113 = (void *)v197[0];
      if (v128)
      {
        OUTLINED_FUNCTION_87();
        outlined assign with take of StorableValue(v194, v133);
        uint64_t v134 = v192;
      }
      else
      {
        *(void *)(v197[0] + 8 * (v127 >> 6) + 64) |= 1 << v127;
        uint64_t v135 = (uint64_t *)(v113[6] + 16 * v127);
        *uint64_t v135 = v115;
        v135[1] = v117;
        OUTLINED_FUNCTION_87();
        outlined init with take of StorableValue(v194, v136, (void (*)(void))type metadata accessor for StorableValue);
        uint64_t v137 = v113[2];
        BOOL v138 = __OFADD__(v137, 1);
        uint64_t v139 = v137 + 1;
        uint64_t v134 = v192;
        if (v138) {
          goto LABEL_92;
        }
        _OWORD v113[2] = v139;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v113[2]) {
        break;
      }
      swift_bridgeObjectRetain();
      unint64_t v140 = specialized __RawDictionaryStorage.find<A>(_:)(v115, v117);
      if (v141)
      {
        uint64_t v134 = v192;
        outlined init with copy of StorableValue(v113[7] + isUniquelyReferenced_nonNull_native * v140, v192, (void (*)(void))type metadata accessor for StorableValue);
        uint64_t v142 = 0;
      }
      else
      {
        uint64_t v142 = 1;
        uint64_t v134 = v192;
      }
      uint64_t v143 = v193;
      __swift_storeEnumTagSinglePayload(v134, v142, 1, v193);
      swift_bridgeObjectRelease();
      if (__swift_getEnumTagSinglePayload(v134, 1, v143) == 1) {
        goto LABEL_63;
      }
      uint64_t v154 = v134;
      uint64_t v155 = v177;
      outlined init with take of StorableValue(v154, v177, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v156 = v195;
      char v157 = swift_isUniquelyReferenced_nonNull_native();
      v197[0] = v156;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v155, v115, v117, v157);
      uint64_t v195 = v197[0];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v75 = v190;
LABEL_68:
      OUTLINED_FUNCTION_2_4();
      v158();
      v111 += v179;
      if (!--v112)
      {
        uint64_t v106 = v168;
        swift_bridgeObjectRelease();
        uint64_t v58 = v196;
        uint64_t v107 = v167;
        goto LABEL_70;
      }
    }
    __swift_storeEnumTagSinglePayload(v134, 1, 1, v193);
LABEL_63:
    outlined destroy of UUID?(v134, &demangling cache variable for type metadata for StorableValue?);
    uint64_t v144 = v195;
    swift_bridgeObjectRetain();
    uint64_t v145 = v115;
    uint64_t v146 = v144;
    unint64_t v147 = specialized __RawDictionaryStorage.find<A>(_:)(v145, v117);
    char v149 = v148;
    swift_bridgeObjectRelease();
    if (v149)
    {
      char v150 = swift_isUniquelyReferenced_nonNull_native();
      v197[0] = v144;
      _NativeDictionary.ensureUnique(isUnique:capacity:)(v150, *(void *)(v144 + 24));
      uint64_t v146 = v197[0];
      swift_bridgeObjectRelease();
      uint64_t v151 = v178;
      outlined init with take of StorableValue(*(void *)(v146 + 56) + isUniquelyReferenced_nonNull_native * v147, v178, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v152 = v193;
      _NativeDictionary._delete(at:)();
      swift_bridgeObjectRelease();
      uint64_t v153 = 0;
      uint64_t v75 = v190;
    }
    else
    {
      uint64_t v153 = 1;
      uint64_t v151 = v178;
      uint64_t v75 = v190;
      uint64_t v152 = v193;
    }
    uint64_t v195 = v146;
    __swift_storeEnumTagSinglePayload(v151, v153, 1, v152);
    outlined destroy of UUID?(v151, &demangling cache variable for type metadata for StorableValue?);
    swift_bridgeObjectRelease();
    goto LABEL_68;
  }
  uint64_t v62 = v61;
  uint64_t v176 = v59;
  uint64_t v185 = selectAndHavingAggregateFunctions(selectCore:)(v60);
  uint64_t v184 = SelectCore.select.getter();
  SelectCore.having.getter(v171);
  uint64_t v63 = *(void *)(v172 + v169);
  aBlock = (void **)v62;
  uint64_t v183 = (ValueMetadata *)v62;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&aBlock);
  if (v58) {
    goto LABEL_96;
  }
  uint64_t v58 = 0;
  uint64_t v64 = (uint64_t)aBlock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : StorableValue]);
  lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]();
  uint64_t v65 = OUTLINED_FUNCTION_79();
  uint64_t v66 = OUTLINED_FUNCTION_79();
  aBlock = (void **)MEMORY[0x1E4FBC870];
  uint64_t v199 = v65;
  uint64_t v200 = v66;
  uint64_t v67 = v176;
  uint64_t v68 = *(void *)(v176 + 16);
  uint64_t v69 = v168;
  if (v68)
  {
    swift_bridgeObjectRetain();
    char v70 = (void *)(v67 + 40);
    uint64_t v71 = v171;
    do
    {
      uint64_t v72 = *v70;
      LOBYTE(v197[0]) = *((unsigned char *)v70 - 8);
      v197[1] = v72;
      swift_bridgeObjectRetain();
      closure #2 in group(changes:by:metadata:aggregationFunctions:resultColumns:having:expressionEvaluator:)((uint64_t *)&aBlock, (unsigned __int8 *)v197, v64, v63, v69, v185, v71, v184);
      swift_bridgeObjectRelease();
      v70 += 2;
      --v68;
    }
    while (v68);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v73 = (void *)v199;
    uint64_t v180 = (uint64_t)aBlock;
    uint64_t v182 = v200;
  }
  else
  {
    uint64_t v182 = v66;
    swift_release();
    uint64_t v180 = MEMORY[0x1E4FBC870];
    uint64_t v73 = (void *)v65;
  }
  uint64_t v76 = v73[2];
  uint64_t v181 = v73;
  if (!v76)
  {
    uint64_t v179 = MEMORY[0x1E4FBC860];
    goto LABEL_27;
  }
  uint64_t v196 = 0;
  aBlock = (void **)MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_78();
  uint64_t v77 = v181;
  uint64_t v78 = (uint64_t)aBlock;
  uint64_t v79 = specialized Dictionary.startIndex.getter(v181);
  if (v81) {
    goto LABEL_93;
  }
  uint64_t v82 = v79;
  int v83 = v77 + 64;
  int v84 = (char *)(v76 - 1);
  if (v79 < 0) {
    goto LABEL_80;
  }
  do
  {
    if (v82 >= 1 << v77[32]) {
      break;
    }
    if ((*(void *)&v83[8 * ((unint64_t)v82 >> 6)] & (1 << v82)) == 0) {
      goto LABEL_81;
    }
    if (*((_DWORD *)v77 + 9) != v80) {
      goto LABEL_82;
    }
    uint64_t v195 = v80;
    v191 = v84;
    aBlock = (void **)v78;
    unint64_t v86 = *(void *)(v78 + 16);
    unint64_t v85 = *(void *)(v78 + 24);
    swift_bridgeObjectRetain();
    if (v86 >= v85 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v77 = v181;
      uint64_t v78 = (uint64_t)aBlock;
    }
    *(void *)(v78 + 16) = v86 + 1;
    uint64_t v87 = v78 + 16 * v86;
    *(unsigned char *)(v87 + 32) = 1;
    OUTLINED_FUNCTION_58(v87);
    if (v82 >= v88) {
      goto LABEL_83;
    }
    if ((*(void *)&v83[8 * ((unint64_t)v82 >> 6)] & (1 << v82)) == 0) {
      goto LABEL_84;
    }
    if (*((_DWORD *)v77 + 9) != v195) {
      goto LABEL_85;
    }
    uint64_t v89 = _HashTable.occupiedBucket(after:)();
    if (!v191)
    {
      uint64_t v179 = v78;
      swift_bridgeObjectRelease();
      uint64_t v58 = v196;
LABEL_27:
      uint64_t v90 = *(void *)(v182 + 16);
      if (v90)
      {
        uint64_t v196 = v58;
        aBlock = (void **)MEMORY[0x1E4FBC860];
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_78();
        uint64_t v91 = v182;
        uint64_t v92 = (uint64_t)aBlock;
        uint64_t v93 = specialized Dictionary.startIndex.getter(v182);
        if (v95) {
          goto LABEL_94;
        }
        uint64_t v96 = v93;
        uint64_t v97 = v91 + 64;
        for (uint64_t i = (char *)(v90 - 1); ; uint64_t i = v191 - 1)
        {
          if (v96 < 0 || v96 >= 1 << *(unsigned char *)(v91 + 32)) {
            goto LABEL_86;
          }
          if ((*(void *)(v97 + 8 * ((unint64_t)v96 >> 6)) & (1 << v96)) == 0) {
            goto LABEL_87;
          }
          if (*(_DWORD *)(v91 + 36) != v94) {
            goto LABEL_88;
          }
          uint64_t v195 = v94;
          v191 = i;
          aBlock = (void **)v92;
          unint64_t v100 = *(void *)(v92 + 16);
          unint64_t v99 = *(void *)(v92 + 24);
          swift_bridgeObjectRetain();
          if (v100 >= v99 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v91 = v182;
            uint64_t v92 = (uint64_t)aBlock;
          }
          *(void *)(v92 + 16) = v100 + 1;
          uint64_t v101 = v92 + 16 * v100;
          *(unsigned char *)(v101 + 32) = 0;
          OUTLINED_FUNCTION_58(v101);
          if (v96 >= v102) {
            goto LABEL_89;
          }
          if ((*(void *)(v97 + 8 * ((unint64_t)v96 >> 6)) & (1 << v96)) == 0) {
            goto LABEL_90;
          }
          if (*(_DWORD *)(v91 + 36) != v195) {
            goto LABEL_91;
          }
          uint64_t v103 = _HashTable.occupiedBucket(after:)();
          if (!v191) {
            break;
          }
          uint64_t v96 = v103;
          uint64_t v94 = *(unsigned int *)(v91 + 36);
        }
        swift_bridgeObjectRelease();
        uint64_t v58 = v196;
        uint64_t v75 = v190;
      }
      else
      {
        uint64_t v75 = v190;
      }
      aBlock = (void **)v179;
      specialized Array.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v59 = (uint64_t)aBlock;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v171, &demangling cache variable for type metadata for SQLExpression?);
      uint64_t v74 = v172;
      goto LABEL_44;
    }
    uint64_t v82 = v89;
    uint64_t v80 = *((unsigned int *)v77 + 9);
    int v84 = v191 - 1;
  }
  while ((v89 & 0x8000000000000000) == 0);
LABEL_80:
  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
LABEL_83:
  __break(1u);
LABEL_84:
  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  __break(1u);
LABEL_87:
  __break(1u);
LABEL_88:
  __break(1u);
LABEL_89:
  __break(1u);
LABEL_90:
  __break(1u);
LABEL_91:
  __break(1u);
LABEL_92:
  __break(1u);
LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_96:
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  return OS_os_log.signpostsEnabled.getter();
}

uint64_t OUTLINED_FUNCTION_18_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_3()
{
  return v0;
}

uint64_t ResultColumn.expression.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SQLExpression(v1, a1);
}

uint64_t OUTLINED_FUNCTION_52()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_52_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_52_2()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_52_3@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t ResultColumn.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 104);
  outlined init with copy of ResultColumn(v0, (uint64_t)v4);
  if (!v1) {
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  outlined destroy of ResultColumn((uint64_t)v4);
  uint64_t countAndFlagsBits = String.lowercased()()._countAndFlagsBits;
  swift_bridgeObjectRelease();
  return countAndFlagsBits;
}

uint64_t outlined destroy of ResultColumn(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of ResultColumn(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t destroy for MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, ValueMetadata *))v4[-1].Description + 1))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for SelectCorePhysicalPlan(0);
  uint64_t v7 = v5 + *(int *)(v6 + 20);
  uint64_t v8 = type metadata accessor for SelectCore();
  (*((void (**)(uint64_t, ValueMetadata *))v8[-1].Description + 1))(v7, v8);

  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t destroy for MaterializedView(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (a1[6])
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 3));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[18])
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 15));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a1[31])
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 28));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t destroy for SelectCore(void *a1)
{
  swift_bridgeObjectRelease();
  if (a1[4])
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[16])
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 13));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  if (a1[29])
  {
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)(a1 + 26));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for MaterializedView();
  (*((void (**)(uint64_t, uint64_t, ValueMetadata *))v6[-1].Description + 2))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for SelectCorePhysicalPlan(0);
  uint64_t v11 = v10[5];
  uint64_t v23 = v8 + v11;
  uint64_t v12 = v9 + v11;
  uint64_t v13 = type metadata accessor for SelectCore();
  uint64_t v14 = (void (*)(uint64_t, uint64_t, ValueMetadata *))*((void *)v13[-1].Description + 2);
  swift_bridgeObjectRetain();
  v14(v23, v12, v13);
  uint64_t v15 = v10[6];
  uint64_t v16 = *(void **)(v9 + v15);
  *(void *)(v8 + v15) = v16;
  *(void *)(v8 + v10[7]) = *(void *)(v9 + v10[7]);
  *(void *)(v8 + v10[8]) = *(void *)(v9 + v10[8]);
  uint64_t v17 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (void *)(a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  id v21 = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for MaterializedView()
{
  return &type metadata for MaterializedView;
}

ValueMetadata *type metadata accessor for SelectCore()
{
  return &type metadata for SelectCore;
}

uint64_t type metadata accessor for SelectCorePhysicalPlan(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, type metadata singleton initialization cache for SelectCorePhysicalPlan);
}

uint64_t initializeWithCopy for SelectCore(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
    uint64_t v8 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v8;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    uint64_t v9 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v9;
    uint64_t v10 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = v5[3];
    *(_OWORD *)(a1 + 40) = v5[2];
    *(_OWORD *)(a1 + 56) = v11;
    long long v12 = v5[5];
    *(_OWORD *)(a1 + 72) = v5[4];
    *(_OWORD *)(a1 + 88) = v12;
    long long v13 = v5[1];
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 24) = v13;
  }
  uint64_t v14 = (_OWORD *)(a1 + 104);
  uint64_t v15 = (_OWORD *)(a2 + 104);
  uint64_t v16 = *(void *)(a2 + 128);
  if (v16)
  {
    uint64_t v17 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v16;
    *(void *)(a1 + 136) = v17;
    (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v14, v15);
    uint64_t v18 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(void *)(a1 + 152) = v18;
    *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
    uint64_t v19 = *(void *)(a2 + 176);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(void *)(a1 + 176) = v19;
    uint64_t v20 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v21 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v21;
    long long v22 = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 184) = v22;
    long long v23 = *(_OWORD *)(a2 + 120);
    *uint64_t v14 = *v15;
    *(_OWORD *)(a1 + 120) = v23;
  }
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  uint64_t v24 = *(void *)(a2 + 232);
  swift_bridgeObjectRetain();
  if (v24)
  {
    uint64_t v25 = *(void *)(a2 + 240);
    *(void *)(a1 + 232) = v24;
    *(void *)(a1 + 240) = v25;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v24 - 8))(a1 + 208, a2 + 208, v24);
    uint64_t v26 = *(void *)(a2 + 256);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = v26;
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
    uint64_t v27 = *(void *)(a2 + 280);
    *(void *)(a1 + 272) = *(void *)(a2 + 272);
    *(void *)(a1 + 280) = v27;
    uint64_t v28 = *(void *)(a2 + 296);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v29 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v29;
    long long v30 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v30;
    long long v31 = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 224) = v31;
  }
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined init with copy of SQLExpression(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for MaterializedView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = (_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v6;
    *(void *)(a1 + 56) = v7;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v6 - 8))(a1 + 24, v5, v6);
    uint64_t v8 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v8;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    uint64_t v9 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v9;
    uint64_t v10 = *(void *)(a2 + 112);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(void *)(a1 + 112) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v11 = v5[3];
    *(_OWORD *)(a1 + 56) = v5[2];
    *(_OWORD *)(a1 + 72) = v11;
    long long v12 = v5[5];
    *(_OWORD *)(a1 + 88) = v5[4];
    *(_OWORD *)(a1 + 104) = v12;
    long long v13 = v5[1];
    *(_OWORD *)(a1 + 24) = *v5;
    *(_OWORD *)(a1 + 40) = v13;
  }
  uint64_t v14 = (_OWORD *)(a1 + 120);
  uint64_t v15 = (_OWORD *)(a2 + 120);
  uint64_t v16 = *(void *)(a2 + 144);
  if (v16)
  {
    uint64_t v17 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = v16;
    *(void *)(a1 + 152) = v17;
    (**(void (***)(_OWORD *, _OWORD *))(v16 - 8))(v14, v15);
    uint64_t v18 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(void *)(a1 + 168) = v18;
    *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
    uint64_t v19 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v19;
    uint64_t v20 = *(void *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v21 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v21;
    long long v22 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v22;
    long long v23 = *(_OWORD *)(a2 + 136);
    *uint64_t v14 = *v15;
    *(_OWORD *)(a1 + 136) = v23;
  }
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  uint64_t v24 = *(void *)(a2 + 248);
  swift_bridgeObjectRetain();
  if (v24)
  {
    uint64_t v25 = *(void *)(a2 + 256);
    *(void *)(a1 + 248) = v24;
    *(void *)(a1 + 256) = v25;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v24 - 8))(a1 + 224, a2 + 224, v24);
    uint64_t v26 = *(void *)(a2 + 272);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    *(void *)(a1 + 272) = v26;
    *(unsigned char *)(a1 + 280) = *(unsigned char *)(a2 + 280);
    uint64_t v27 = *(void *)(a2 + 296);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
    *(void *)(a1 + 296) = v27;
    uint64_t v28 = *(void *)(a2 + 312);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(void *)(a1 + 312) = v28;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v29 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 272) = v29;
    long long v30 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 304) = v30;
    long long v31 = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(_OWORD *)(a1 + 240) = v31;
  }
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for ResultColumn(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v7;
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  uint64_t v9 = *(void *)(a2 + 112);
  uint64_t v10 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = v9;
  *(void *)(a1 + 120) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for SQLExpression(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for SQLError(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t SelectCore.select.getter()
{
  return swift_bridgeObjectRetain();
}

ValueMetadata *OUTLINED_FUNCTION_87_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  return type metadata accessor for SQLExpression();
}

uint64_t OUTLINED_FUNCTION_87_1()
{
  return swift_bridgeObjectRelease();
}

void OUTLINED_FUNCTION_87_2()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v8 = OUTLINED_FUNCTION_28_0(a1, a2, a3, a4, a5);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  *uint64_t v10 = v11;
  v10[1] = v12;
  uint64_t v14 = *(void *)(v13 + 56);
  uint64_t v15 = type metadata accessor for StorableValue(0);
  uint64_t result = outlined init with take of MaterializedViewPhysicalPlan(a4, v14 + *(void *)(*(void *)(v15 - 8) + 72) * a1, (void (*)(void))type metadata accessor for StorableValue);
  uint64_t v17 = *(void *)(a5 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(a5 + 16) = v19;
  }
  return result;
}

uint64_t outlined assign with take of StorableValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for StorableValue(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void *assignWithTake for StorableValue(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of StorableValue((uint64_t)a1, (void (*)(void))type metadata accessor for StorableValue);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 6)
    {
      uint64_t v9 = type metadata accessor for UUID();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v9))
      {
        uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v9);
      }
      goto LABEL_12;
    }
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload((uint64_t)a2, 1, v7))
      {
        uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        __swift_storeEnumTagSinglePayload((uint64_t)a1, 0, 1, v7);
      }
LABEL_12:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void OUTLINED_FUNCTION_58(uint64_t a1@<X8>)
{
  *(void *)(a1 + 40) = v1;
}

uint64_t OUTLINED_FUNCTION_58_4(uint64_t result)
{
  *(void *)(v2 - 184) = v1;
  *(void *)(v2 - 176) = result;
  *(void *)(v2 - 192) = v1 + *(int *)(result + 48);
  return result;
}

uint64_t OUTLINED_FUNCTION_79()
{
  return Dictionary.init(dictionaryLiteral:)();
}

ValueMetadata *OUTLINED_FUNCTION_79_0()
{
  return type metadata accessor for SQLDataType();
}

void OUTLINED_FUNCTION_79_1()
{
  Hasher._combine(_:)(0);
}

void KeyedAggregationMetadataCache.init(materializedView:database:cacheSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_37();
  a19 = v23;
  a20 = v24;
  a10 = v20;
  uint64_t v194 = v25;
  uint64_t v27 = v26;
  uint64_t v196 = v28;
  uint64_t v191 = v29;
  type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v206 = v31;
  uint64_t v207 = v30;
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_16();
  uint64_t v193 = v32;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v33);
  OUTLINED_FUNCTION_45();
  v214 = v34;
  uint64_t v205 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v190 = v35;
  MEMORY[0x1F4188790](v36);
  OUTLINED_FUNCTION_16();
  v202 = v37;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v38);
  uint64_t v204 = &v175[-v39];
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v40);
  v203 = &v175[-v41];
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v42);
  unint64_t v44 = (uint64_t *)&v175[-v43];
  uint64_t v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v189 = v46;
  MEMORY[0x1F4188790](v47);
  OUTLINED_FUNCTION_169();
  uint64_t v48 = type metadata accessor for SelectCore();
  OUTLINED_FUNCTION_0_4();
  uint64_t v50 = v49;
  MEMORY[0x1F4188790](v51);
  OUTLINED_FUNCTION_103_1();
  MEMORY[0x1F4188790](v52);
  uint64_t v54 = &v175[-v53];
  type metadata accessor for SQLExpressionEvaluator();
  swift_allocObject();
  id v55 = a10;
  uint64_t v56 = SQLExpressionEvaluator.init(db:)(v27);
  if (v55)
  {
    type metadata accessor for MaterializedView();
    OUTLINED_FUNCTION_4_3();
    OUTLINED_FUNCTION_2_4();
    v57();
LABEL_8:
    OUTLINED_FUNCTION_31();
    return;
  }
  unint64_t v201 = v44;
  uint64_t v185 = v45;
  uint64_t v192 = 0;
  uint64_t v187 = v21;
  uint64_t v188 = v56;
  uint64_t v186 = v27;
  MaterializedView.select.getter((uint64_t)v54);
  uint64_t v58 = SelectCore.groupBy.getter();
  uint64_t v59 = *(void (**)(void))(v50 + 8);
  ((void (*)(unsigned char *, ValueMetadata *))v59)(v54, v48);
  if (!v58)
  {
    uint64_t v63 = MEMORY[0x1E4FBC860];
    uint64_t v64 = (int *)type metadata accessor for KeyedAggregationMetadataCache(0);
    uint64_t v65 = v191;
    *(void *)(v191 + v64[12]) = 0;
    *(void *)(v65 + v64[13]) = v63;
    OUTLINED_FUNCTION_57_4((uint64_t)v64);
    uint64_t v66 = v186;
    uint64_t v61 = v194;
LABEL_7:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (value: [[String : StorableValue]], event: CacheEvent));
    lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]();
    uint64_t v67 = Dictionary.init(dictionaryLiteral:)();
    type metadata accessor for KeyedAggregationMetadataCache(0);
    *(void *)(v65 + v64[7]) = v67;
    id v68 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA48]), sel_init);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[String : StorableValue]]?);
    uint64_t v69 = Dictionary.init(dictionaryLiteral:)();
    char v70 = (void *)(v65 + v64[8]);
    *char v70 = v68;
    v70[1] = v69;
    *(void *)(v65 + v64[9]) = v61;
    type metadata accessor for MaterializedView();
    OUTLINED_FUNCTION_5_0();
    OUTLINED_FUNCTION_18();
    v71();
    uint64_t v72 = MEMORY[0x1E4FBC870];
    *(void *)(v65 + v64[6]) = MEMORY[0x1E4FBC870];
    OUTLINED_FUNCTION_95();
    v73();
    *(void *)(v65 + v64[5]) = v72;
    *(void *)(v65 + v64[10]) = v66;
    *(void *)(v65 + v64[11]) = v188;
    goto LABEL_8;
  }
  v216._uint64_t countAndFlagsBits = v58;
  swift_bridgeObjectRetain();
  uint64_t v60 = v192;
  specialized MutableCollection<>.sort(by:)(&v216);
  uint64_t v61 = v194;
  if (v60) {
    goto LABEL_56;
  }
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v216._countAndFlagsBits;
  MaterializedView.select.getter(v22);
  selectAndHavingAggregateFunctions(selectCore:)(v22);
  OUTLINED_FUNCTION_41();
  v59();
  static KeyedAggregationMetadataCache.payloadSchema(aggregationFunctions:)();
  uint64_t v179 = v74;
  swift_bridgeObjectRelease();
  specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)();
  unint64_t v76 = v75;
  uint64_t v77 = MaterializedView.name.getter();
  uint64_t v78 = "_keyedFirstMatchingRecord";
  uint64_t v80 = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v77, v79, 36, 0xD000000000000022, (void *)0x800000018EBEA6C0);
  uint64_t v82 = v81;
  swift_bridgeObjectRelease();
  uint64_t v83 = OUTLINED_FUNCTION_98((uint64_t)&a9);
  int v84 = tableExists(sqlExpressionEvaluator:tableName:)(v83, v80, v82);
  unint64_t v85 = 0;
  int v86 = v84;
  unint64_t v178 = v76;
  uint64_t v177 = countAndFlagsBits;
  swift_bridgeObjectRelease();
  uint64_t v180 = "_keyedFirstMatchingRecord";
  uint64_t v192 = 0;
  if (v86)
  {
    uint64_t v87 = v177;
LABEL_11:
    swift_bridgeObjectRelease();
    uint64_t v64 = (int *)type metadata accessor for KeyedAggregationMetadataCache(0);
    uint64_t v88 = v191;
    *(void *)(v191 + v64[12]) = v87;
    *(void *)(v88 + v64[13]) = v179;
    *(unsigned char *)(v88 + v64[14]) = (v86 & 1) == 0;
    swift_retain();
    MaterializedView.name.getter();
    specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)();
    uint64_t v90 = v89;
    swift_release();
    if (*(void *)(v90 + 16))
    {
      v215._uint64_t countAndFlagsBits = 0;
      v215._object = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(28);
      Swift::String v216 = v215;
      OUTLINED_FUNCTION_36_5();
      v91._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_46_3();
      String.append(_:)(v91);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_72_3();
      uint64_t v92 = v192;
      uint64_t PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_14BiomeSQLParser11SQLDataTypeOtG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5c186_pIggnozo_SS_ACtSSsAD_pIegnrzr_TR04_s12a146Streams30KeyedQueryPlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm(v90, &demangling cache variable for type metadata for (String, SQLDataType));
      uint64_t v192 = v92;
      if (v92)
      {
        swift_bridgeObjectRelease();
        type metadata accessor for MaterializedView();
        OUTLINED_FUNCTION_4_3();
        OUTLINED_FUNCTION_2_4();
        v94();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      v215._uint64_t countAndFlagsBits = PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      uint64_t v166 = OUTLINED_FUNCTION_97_2();
      uint64_t v168 = v167;
      swift_bridgeObjectRelease();
      v169._uint64_t countAndFlagsBits = v166;
      v169._object = v168;
      String.append(_:)(v169);
      swift_bridgeObjectRelease();
      v170._uint64_t countAndFlagsBits = 41;
      v170._object = (void *)0xE100000000000000;
      String.append(_:)(v170);
    }
    else
    {
      OUTLINED_FUNCTION_124_0();
      swift_bridgeObjectRelease();
      strcpy((char *)&v216, "SELECT * FROM ");
      HIBYTE(v216._object) = -18;
      v133._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_46_3();
      String.append(_:)(v133);
      swift_bridgeObjectRelease();
    }
    object = v216._object;
    uint64_t v171 = v216._countAndFlagsBits;
    uint64_t v173 = swift_allocObject();
    *(void *)(v173 + 16) = v90;
    swift_bridgeObjectRelease();
    uint64_t v65 = v191;
    uint64_t v174 = v191 + v64[15];
    *(_OWORD *)uint64_t v174 = __PAIR128__((unint64_t)object, v171);
    *(void *)(v174 + 16) = closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:)partial apply;
    *(void *)(v174 + 24) = v173;
    uint64_t v66 = v186;
    goto LABEL_7;
  }
  int v176 = v86;
  uint64_t v95 = v207;
  uint64_t v96 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v182 = *(void *)(v179 + 16);
  if (!v182)
  {
    uint64_t v97 = v206;
LABEL_31:
    OUTLINED_FUNCTION_152_0();
    if (v135)
    {
      uint64_t v213 = v134 + *(int *)(v185 + 48);
      OUTLINED_FUNCTION_22();
      uint64_t v139 = v137 + v138;
      uint64_t v141 = *(void *)(v140 + 72);
      v214 = (void (**)(void))(v97 + 32);
      v211 = (void (*)(void))(v97 + 40);
      uint64_t v212 = v141;
      uint64_t v142 = v96;
      while (1)
      {
        a10 = v136;
        uint64_t v143 = v187;
        outlined init with copy of UUID?(v139, v187, &demangling cache variable for type metadata for (String, SQLDataType));
        uint64_t v61 = *(uint64_t **)v143;
        uint64_t v144 = *(void *)(v143 + 8);
        uint64_t v145 = *v214;
        OUTLINED_FUNCTION_28();
        v145();
        swift_isUniquelyReferenced_nonNull_native();
        v216._uint64_t countAndFlagsBits = v142;
        specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v61, v144);
        OUTLINED_FUNCTION_41_4();
        if (v124) {
          goto LABEL_53;
        }
        char v147 = v146;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
        BOOL v148 = OUTLINED_FUNCTION_138_0();
        unint64_t v85 = (void *)v206;
        if (v148)
        {
          specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v61, v144);
          OUTLINED_FUNCTION_21_3();
          if (!v149) {
            goto LABEL_55;
          }
        }
        uint64_t v150 = v216._countAndFlagsBits;
        if (v147)
        {
          OUTLINED_FUNCTION_66_2();
          v151();
        }
        else
        {
          OUTLINED_FUNCTION_42_2();
          ValueMetadata *v152 = v61;
          v152[1] = (uint64_t *)v144;
          OUTLINED_FUNCTION_28();
          v145();
          OUTLINED_FUNCTION_118_1();
          if (v124) {
            goto LABEL_54;
          }
          *(void *)(v150 + 16) = v153;
          swift_bridgeObjectRetain();
        }
        OUTLINED_FUNCTION_71_2();
        uint64_t v142 = v216._countAndFlagsBits;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v139 += v212;
        uint64_t v136 = (void *)((char *)a10 - 1);
        if (a10 == (void *)1)
        {
          swift_bridgeObjectRelease();
          uint64_t v78 = v180;
          goto LABEL_44;
        }
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v142 = v96;
LABEL_44:
    uint64_t v154 = MaterializedView.name.getter();
    int v156 = v155;
    v215._uint64_t countAndFlagsBits = 0;
    v215._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(33);
    Swift::String v216 = v215;
    OUTLINED_FUNCTION_35_4();
    v157._uint64_t countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v154, v156, 36, 0xD000000000000022, (void *)((unint64_t)v78 | 0x8000000000000000));
    String.append(_:)(v157);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_105_1();
    uint64_t PlannerMetadataCachePAAE14createTableSQL20materializedViewName6schemaS2S_SDySS0A9SQLParser11cD19OGtKFZS2S_AItKXEfU_Tf3nnnpf_nTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS14BiomeSQLParser11SQLDataTypeOG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5C197_pIggnozo_SS3key_AC5valuetSSsAD_pIegnrzr_TR04_s12a111Streams30KeyedQueryPlannerMetadataCachePAAE14createTableSQL20materializedViewName6schemaS2S_SDySS0A9SQLParser11cD19OGtKFZS2S_AItKXEfU_Tf3nnnpf_nTf1cn_n(v142);
    if (v85)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MaterializedView();
      OUTLINED_FUNCTION_4_3();
      OUTLINED_FUNCTION_2_4();
      v159();
      OUTLINED_FUNCTION_132_0();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    v215._uint64_t countAndFlagsBits = PlannerMetadataCachePAAE14createTableSQL20materializedViewName6schemaS2S_SDySS0A9SQLParser11cD19OGtKFZS2S_AItKXEfU_Tf3nnnpf_nTf1cn_n;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v160 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v162 = v161;
    swift_bridgeObjectRelease();
    v163._uint64_t countAndFlagsBits = v160;
    v163._object = v162;
    String.append(_:)(v163);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_61_3();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v122 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v216, MEMORY[0x1E4FBC860]);
    uint64_t v121 = v164;
    if (v164)
    {
      type metadata accessor for MaterializedView();
      OUTLINED_FUNCTION_4_3();
      OUTLINED_FUNCTION_2_4();
      v165();
      OUTLINED_FUNCTION_132_0();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
LABEL_51:
    unint64_t v178 = v122;
    uint64_t v192 = v121;
    swift_bridgeObjectRelease();
    uint64_t v87 = v177;
    LOBYTE(v86) = v176;
    goto LABEL_11;
  }
  uint64_t v181 = v179 + 32;
  uint64_t v97 = v206;
  a10 = (void *)(v206 + 32);
  uint64_t v198 = (void (**)(void))(v206 + 16);
  uint64_t v195 = v206 + 40;
  uint64_t v197 = v206 + 8;
  swift_bridgeObjectRetain();
  uint64_t v98 = 0;
  uint64_t v99 = v205;
  uint64_t v100 = v190;
  while (!*(void *)(*(void *)(v181 + 8 * v98) + 16))
  {
LABEL_27:
    if (++v98 == v182)
    {
      OUTLINED_FUNCTION_132_0();
      goto LABEL_31;
    }
  }
  uint64_t v213 = *(void *)(*(void *)(v181 + 8 * v98) + 16);
  uint64_t v184 = v98;
  uint64_t v61 = v201;
  uint64_t v200 = (char *)v201 + *(int *)(v99 + 64);
  OUTLINED_FUNCTION_22();
  uint64_t v103 = v101 + v102;
  uint64_t v183 = v101;
  swift_bridgeObjectRetain_n();
  uint64_t v199 = *(void *)(v100 + 72);
  uint64_t v104 = v203;
  unint64_t v85 = v204;
  while (1)
  {
    uint64_t v212 = v96;
    uint64_t v209 = v103;
    outlined init with copy of UUID?(v103, (uint64_t)v61, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
    uint64_t v105 = v205;
    uint64_t v106 = (char *)v104 + *(int *)(v205 + 64);
    uint64_t v107 = *v61;
    uint64_t v108 = v61[1];
    uint64_t v109 = v61[2];
    uint64_t v61 = (uint64_t *)v61[3];
    *uint64_t v104 = v107;
    v104[1] = v108;
    uint64_t v110 = v107;
    v104[2] = v109;
    v104[3] = v61;
    unint64_t v111 = (void (*)(void))*a10;
    v210 = v106;
    v211 = v111;
    OUTLINED_FUNCTION_28();
    v112();
    char v113 = (char *)v85 + *(int *)(v105 + 64);
    *unint64_t v85 = v110;
    v85[1] = v108;
    v85[2] = v109;
    v85[3] = v61;
    uint64_t v114 = *v198;
    v208 = v113;
    v114();
    uint64_t v115 = *(int *)(v105 + 64);
    uint64_t v116 = v202;
    void *v202 = v110;
    v116[1] = v108;
    v116[2] = v109;
    v116[3] = v61;
    ((void (*)(char *, char *, uint64_t))v114)((char *)v116 + v115, v210, v95);
    uint64_t v117 = v211;
    OUTLINED_FUNCTION_28();
    v117();
    uint64_t v118 = v109;
    swift_bridgeObjectRetain();
    uint64_t v119 = v212;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v216._uint64_t countAndFlagsBits = v119;
    uint64_t v121 = v119;
    specialized __RawDictionaryStorage.find<A>(_:)(v118, (uint64_t)v61);
    OUTLINED_FUNCTION_41_4();
    if (v124)
    {
      __break(1u);
      goto LABEL_51;
    }
    char v125 = v123;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
    Swift::Bool v126 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v119);
    uint64_t v97 = v206;
    uint64_t v95 = v207;
    unint64_t v85 = v204;
    if (v126)
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v118, (uint64_t)v61);
      if ((v125 & 1) != (v127 & 1)) {
        goto LABEL_55;
      }
    }
    uint64_t v128 = v216._countAndFlagsBits;
    if ((v125 & 1) == 0) {
      break;
    }
    OUTLINED_FUNCTION_66_2();
    v129();
LABEL_25:
    uint64_t v96 = v216._countAndFlagsBits;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v104 = v203;
    outlined destroy of UUID?((uint64_t)v203, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
    OUTLINED_FUNCTION_2_4();
    v132();
    uint64_t v103 = v209 + v199;
    --v213;
    uint64_t v61 = v201;
    if (!v213)
    {
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_71_2();
      uint64_t v78 = v180;
      uint64_t v99 = v205;
      uint64_t v100 = v190;
      uint64_t v98 = v184;
      goto LABEL_27;
    }
  }
  OUTLINED_FUNCTION_42_2();
  *uint64_t v130 = v118;
  v130[1] = (uint64_t)v61;
  OUTLINED_FUNCTION_28();
  v117();
  OUTLINED_FUNCTION_118_1();
  if (!v124)
  {
    *(void *)(v128 + 16) = v131;
    swift_bridgeObjectRetain();
    goto LABEL_25;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_56:
  swift_release();
  __break(1u);
}

uint64_t static KeyedAggregationMetadataCache.tableName(materializedViewName:)(uint64_t a1, int a2, Swift::Int a3, uint64_t a4, void *a5)
{
  _StringGuts.grow(_:)(a3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = a4;
  v8._object = a5;
  String.append(_:)(v8);
  return a1;
}

uint64_t SelectCore.groupBy.getter()
{
  return swift_bridgeObjectRetain();
}

unint64_t lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [StorableValue] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [StorableValue] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [StorableValue]);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type StorableValue and conformance StorableValue, (void (*)(uint64_t))type metadata accessor for StorableValue);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [StorableValue] and conformance <A> [A]);
  }
  return result;
}

uint64_t *OUTLINED_FUNCTION_97(uint64_t a1, uint64_t *a2)
{
  a2[3] = v2;
  return __swift_allocate_boxed_opaque_existential_0Tm(a2);
}

uint64_t OUTLINED_FUNCTION_97_0()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_97_1()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_97_2()
{
  return BidirectionalCollection<>.joined(separator:)();
}

uint64_t OUTLINED_FUNCTION_72()
{
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(unsigned char *)(v0 + 64) = 3;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_72_0()
{
  uint64_t v2 = *v0;
  char v3 = *((unsigned char *)v0 + 8);
  *(void *)(v1 - 104) = v2;
  *(unsigned char *)(v1 - 96) = v3;
}

uint64_t OUTLINED_FUNCTION_72_2()
{
  return v0 + 32;
}

void OUTLINED_FUNCTION_72_3()
{
  uint64_t v1 = 0x2820455245485720;
  unint64_t v2 = 0xE90000000000000ALL;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t tableExists(sqlExpressionEvaluator:tableName:)(uint64_t a1, uint64_t a2, void *a3)
{
  _StringGuts.grow(_:)(63);
  v5._object = (void *)0x800000018EBEA810;
  v5._uint64_t countAndFlagsBits = 0xD00000000000003CLL;
  String.append(_:)(v5);
  v6._uint64_t countAndFlagsBits = a2;
  v6._object = a3;
  String.append(_:)(v6);
  v7._uint64_t countAndFlagsBits = 39;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._uint64_t countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  unint64_t v9 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v8, MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  if (!v11)
  {
    if (v9)
    {
      swift_bridgeObjectRelease();
      char v10 = 1;
    }
    else
    {
      char v10 = 0;
    }
  }
  return v10 & 1;
}

void *__swift_memcpy312_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x138uLL);
}

void OUTLINED_FUNCTION_78()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_78_0(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_78_2()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

void specialized Array.append<A>(contentsOf:)()
{
  OUTLINED_FUNCTION_58_0();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v4 > *(void *)(v1 + 24) >> 1)
  {
    if (v3 <= v4) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v3;
    }
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v1);
    uint64_t v1 = v10;
  }
  if (!*(void *)(v7 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_56_0();
  if (v11 != v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v12 = OUTLINED_FUNCTION_55_0();
  specialized UnsafeMutablePointer.initialize(from:count:)(v12, v13);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *uint64_t v0 = v1;
    return;
  }
  uint64_t v14 = *(void *)(v1 + 16);
  BOOL v6 = __OFADD__(v14, v2);
  uint64_t v15 = v14 + v2;
  if (!v6)
  {
    *(void *)(v1 + 16) = v15;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  OUTLINED_FUNCTION_58_0();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v4 > *(void *)(v1 + 24) >> 1)
  {
    if (v3 <= v4) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v3;
    }
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v1);
    uint64_t v1 = v10;
  }
  if (!*(void *)(v7 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_56_0();
  if (v11 != v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v12 = OUTLINED_FUNCTION_55_0();
  specialized UnsafeMutablePointer.initialize(from:count:)(v12, v13);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *uint64_t v0 = v1;
    return;
  }
  uint64_t v14 = *(void *)(v1 + 16);
  BOOL v6 = __OFADD__(v14, v2);
  uint64_t v15 = v14 + v2;
  if (!v6)
  {
    *(void *)(v1 + 16) = v15;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void (*v3)(unint64_t, uint64_t, unint64_t);
  uint64_t (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  void (*v9)(unint64_t, uint64_t, unint64_t);
  uint64_t (*v10)(void);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  OUTLINED_FUNCTION_38_0();
  uint64_t v5 = *(void *)(v1 + 16);
  BOOL v6 = *v0;
  uint64_t v7 = *(void *)(*v0 + 16);
  if (__OFADD__(v7, v5))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  Swift::String v8 = v4;
  uint64_t v9 = v3;
  uint64_t v10 = v2;
  char v11 = v1;
  if (!swift_isUniquelyReferenced_nonNull_native() || v7 + v5 > *(void *)(v6 + 24) >> 1) {
    BOOL v6 = v10();
  }
  if (!*(void *)(v11 + 16))
  {
    if (!v5) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  uint64_t v12 = *(void *)(v6 + 16);
  uint64_t v13 = (*(void *)(v6 + 24) >> 1) - v12;
  uint64_t v14 = *(void *)(v8(0) - 8);
  if (v13 < v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v9(v11 + v15, v5, v6 + v15 + *(void *)(v14 + 72) * v12);
  if (!v5)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v0 = v6;
    OUTLINED_FUNCTION_34();
    return;
  }
  uint64_t v16 = *(void *)(v6 + 16);
  uint64_t v17 = __OFADD__(v16, v5);
  BOOL v18 = v16 + v5;
  if (!v17)
  {
    *(void *)(v6 + 16) = v18;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  specialized Array.append<A>(contentsOf:)();
}

{
  specialized Array.append<A>(contentsOf:)();
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<String>, (void (*)(void, uint64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

#error "18E6969DC: call analysis failed (funcsize=56)"

void static KeyedAggregationMetadataCache.metadataFromRow(_:groupBySchema:payloadSchema:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v10 = OUTLINED_FUNCTION_35(v9);
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_10();
  uint64_t v170 = v11;
  uint64_t v174 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v166 = (uint64_t *)((char *)&v164 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_21();
  uint64_t v171 = v17;
  OUTLINED_FUNCTION_11();
  uint64_t v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (uint64_t *)((char *)&v164 - v20);
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_45();
  uint64_t v173 = (uint64_t *)v22;
  uint64_t v172 = type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_0_4();
  uint64_t v185 = v23;
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_16();
  uint64_t v182 = v25;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_21();
  uint64_t v183 = v27;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_21();
  uint64_t v189 = v29;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_111_1();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x1F4188790](v31);
  OUTLINED_FUNCTION_139_0();
  uint64_t v181 = v32;
  OUTLINED_FUNCTION_99_1();
  uint64_t v34 = MEMORY[0x1F4188790](v33);
  uint64_t v36 = (uint64_t *)((char *)&v164 - v35);
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  uint64_t v38 = *(void *)(v6 + 16);
  uint64_t v184 = v21;
  uint64_t v186 = v8;
  uint64_t v169 = v4;
  uint64_t v168 = v13;
  if (v38)
  {
    uint64_t v188 = v1;
    uint64_t v190 = v2;
    OUTLINED_FUNCTION_58_4(v37);
    uint64_t v40 = v6 + v39;
    uint64_t v175 = *(void *)(v41 + 72);
    uint64_t v176 = v8 + 64;
    uint64_t v167 = v6;
    swift_bridgeObjectRetain();
    uint64_t v42 = MEMORY[0x1E4FBC860];
    uint64_t v177 = v36;
    uint64_t v43 = v180;
    while (1)
    {
      uint64_t v187 = v38;
      uint64_t v44 = v42;
      uint64_t v45 = v179;
      outlined init with copy of UUID?(v40, (uint64_t)v179, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      uint64_t v46 = (uint64_t)v36 + *((int *)v43 + 12);
      uint64_t v48 = *v45;
      uint64_t v47 = v45[1];
      *uint64_t v36 = *v45;
      v36[1] = v47;
      uint64_t v49 = type metadata accessor for SQLDataType();
      OUTLINED_FUNCTION_5_0();
      uint64_t v51 = v50;
      OUTLINED_FUNCTION_28();
      v52();
      uint64_t v53 = v181;
      uint64_t v54 = (char *)v181 + *((int *)v43 + 12);
      *uint64_t v181 = v48;
      v53[1] = v47;
      OUTLINED_FUNCTION_18();
      v55();
      uint64_t v56 = *(void (**)(void, void))(v51 + 8);
      swift_bridgeObjectRetain();
      v56(v54, v49);
      uint64_t v57 = v186;
      if (!*(void *)(v186 + 16) || (unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v48, v47), (v59 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_73_3();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
        OUTLINED_FUNCTION_39();
        *int v84 = v48;
        v84[1] = v47;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
LABEL_19:
        unint64_t v85 = (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType);
        int v86 = v177;
        goto LABEL_49;
      }
      uint64_t v60 = v58;
      int v61 = *(_DWORD *)(v57 + 36);
      swift_bridgeObjectRelease();
      if (v60 < 0 || v60 >= 1 << *(unsigned char *)(v57 + 32)) {
        break;
      }
      if (((*(void *)(v176 + (((unint64_t)v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v60) & 1) == 0) {
        goto LABEL_52;
      }
      if (v61 != *(_DWORD *)(v57 + 36)) {
        goto LABEL_53;
      }
      uint64_t v62 = OUTLINED_FUNCTION_106_1();
      outlined copy of DatabaseValue(v62, v63, v64);
      uint64_t v65 = v188;
      uint64_t v66 = OUTLINED_FUNCTION_106_1();
      uint64_t v67 = v190;
      static StorableValue.fromDatabaseValue(_:dataType:)(v66, v68, v69, v46, v70);
      uint64_t v71 = OUTLINED_FUNCTION_106_1();
      if (v67)
      {
        outlined consume of DatabaseValue(v71, v72, v73);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_73_3();
        goto LABEL_19;
      }
      outlined consume of DatabaseValue(v71, v72, v73);
      _s12BiomeStreams13StorableValueOWOcTm_1(v65, (uint64_t)v189, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v42 = v44;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v78 = OUTLINED_FUNCTION_28_5();
        uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v78, v79, v80, v44);
      }
      uint64_t v36 = v177;
      unint64_t v75 = *(void *)(v42 + 16);
      unint64_t v74 = *(void *)(v42 + 24);
      uint64_t v190 = 0;
      if (v75 >= v74 >> 1)
      {
        char v81 = OUTLINED_FUNCTION_52_3(v74);
        uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v81, v82, v83, v42);
      }
      *(void *)(v42 + 16) = v75 + 1;
      OUTLINED_FUNCTION_117_1();
      _s12BiomeStreams13StorableValueOWObTm_1((uint64_t)v189, v76 + v77 * v75, (void (*)(void))type metadata accessor for StorableValue);
      _s12BiomeStreams13StorableValueOWOhTm_2(v188, (void (*)(void))type metadata accessor for StorableValue);
      outlined destroy of UUID?((uint64_t)v36, (uint64_t *)&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      v40 += v175;
      uint64_t v38 = v187 - 1;
      if (v187 == 1)
      {
        OUTLINED_FUNCTION_73_3();
        uint64_t v2 = v190;
        uint64_t v21 = v184;
        uint64_t v4 = v169;
        goto LABEL_20;
      }
    }
    __break(1u);
LABEL_52:
    __break(1u);
LABEL_53:
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    uint64_t v42 = MEMORY[0x1E4FBC860];
LABEL_20:
    uint64_t v87 = *(void *)(v4 + 16);
    if (v87)
    {
      uint64_t v88 = v4 + 32;
      swift_bridgeObjectRetain();
      uint64_t v89 = 0;
      uint64_t v90 = (uint64_t *)MEMORY[0x1E4FBC860];
      uint64_t v175 = v42;
      uint64_t v167 = v87;
      uint64_t v165 = v4 + 32;
      while (1)
      {
        uint64_t v178 = v89;
        uint64_t v91 = v88;
        uint64_t v92 = *(void *)(v88 + 8 * v89);
        swift_bridgeObjectRetain();
        uint64_t v189 = (void (*)(void))Dictionary.init(dictionaryLiteral:)();
        if (*(void *)(v92 + 16)) {
          break;
        }
        swift_bridgeObjectRelease();
        uint64_t v88 = v91;
LABEL_38:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_28_5();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v90 = v150;
        }
        unint64_t v148 = v90[2];
        unint64_t v147 = v90[3];
        uint64_t v149 = v178;
        if (v148 >= v147 >> 1)
        {
          OUTLINED_FUNCTION_52_3(v147);
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v149 = v178;
          uint64_t v90 = v151;
        }
        uint64_t v89 = v149 + 1;
        v90[2] = v148 + 1;
        v90[v148 + 4] = (uint64_t)v189;
        uint64_t v21 = v184;
        if (v89 == v87)
        {
          swift_bridgeObjectRelease();
          goto LABEL_50;
        }
      }
      uint64_t v177 = v90;
      uint64_t v190 = v2;
      uint64_t v180 = (char *)v173 + *(int *)(v174 + 64);
      OUTLINED_FUNCTION_22();
      uint64_t v176 = v92;
      uint64_t v95 = v92 + v94;
      uint64_t v179 = *(uint64_t **)(v96 + 72);
      while (1)
      {
        uint64_t v187 = v93;
        uint64_t v181 = (void *)v95;
        uint64_t v97 = v173;
        outlined init with copy of UUID?(v95, (uint64_t)v173, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
        uint64_t v98 = (uint64_t)v21 + *(int *)(v174 + 64);
        uint64_t v99 = *v97;
        uint64_t v100 = v97[1];
        uint64_t v101 = v97[2];
        uint64_t v102 = v97[3];
        *uint64_t v21 = *v97;
        v21[1] = v100;
        v21[2] = v101;
        v21[3] = v102;
        type metadata accessor for SQLDataType();
        OUTLINED_FUNCTION_5_0();
        uint64_t v104 = v103;
        OUTLINED_FUNCTION_28();
        v105();
        uint64_t v106 = v171;
        *uint64_t v171 = v99;
        v106[1] = v100;
        v106[2] = v101;
        v106[3] = v102;
        uint64_t v107 = *(void (**)(void))(v104 + 16);
        uint64_t v188 = v98;
        uint64_t v108 = v107;
        OUTLINED_FUNCTION_32_4();
        v109();
        uint64_t v110 = v186;
        if (!*(void *)(v186 + 16)) {
          goto LABEL_47;
        }
        swift_bridgeObjectRetain();
        unint64_t v111 = specialized __RawDictionaryStorage.find<A>(_:)(v101, v102);
        uint64_t v112 = v189;
        if ((v113 & 1) == 0)
        {
          swift_bridgeObjectRelease();
LABEL_47:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v189 = *(void (**)(void))(v104 + 8);
          OUTLINED_FUNCTION_41();
          v152();
          uint64_t v187 = OUTLINED_FUNCTION_82_2();
          lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
          uint64_t v190 = OUTLINED_FUNCTION_17_6();
          uint64_t v154 = v153;
          int v155 = v166;
          int v156 = v184;
          uint64_t v158 = *v184;
          uint64_t v157 = v184[1];
          *uint64_t v166 = *v184;
          v155[1] = v157;
          uint64_t v159 = v156[3];
          v155[2] = v156[2];
          v155[3] = v159;
          OUTLINED_FUNCTION_32_4();
          v108();
          *uint64_t v154 = v158;
          v154[1] = v157;
          swift_storeEnumTagMultiPayload();
          swift_bridgeObjectRetain();
          swift_willThrow();
          uint64_t v160 = OUTLINED_FUNCTION_40_2();
          v189(v160);
          unint64_t v85 = (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType);
          int v86 = v156;
          goto LABEL_49;
        }
        uint64_t v114 = *(void *)(v110 + 56) + 24 * v111;
        uint64_t v115 = *(void *)v114;
        unint64_t v116 = *(void *)(v114 + 8);
        char v117 = *(unsigned char *)(v114 + 16);
        uint64_t v118 = OUTLINED_FUNCTION_107_1();
        outlined copy of DatabaseValue(v118, v119, v120);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_41();
        v121();
        uint64_t v122 = v183;
        uint64_t v123 = OUTLINED_FUNCTION_107_1();
        uint64_t v124 = v190;
        static StorableValue.fromDatabaseValue(_:dataType:)(v123, v125, v126, v188, v127);
        if (v124) {
          break;
        }
        uint64_t v188 = v115;
        uint64_t v190 = 0;
        _s12BiomeStreams13StorableValueOWOcTm_1(v122, v182, (void (*)(void))type metadata accessor for StorableValue);
        uint64_t v129 = *v184;
        uint64_t v128 = v184[1];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v191 = v112;
        uint64_t v131 = OUTLINED_FUNCTION_40_2();
        specialized __RawDictionaryStorage.find<A>(_:)(v131, v132);
        OUTLINED_FUNCTION_41_4();
        if (v135) {
          goto LABEL_54;
        }
        unint64_t v136 = v133;
        char v137 = v134;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, (Swift::Int)v112))
        {
          uint64_t v138 = OUTLINED_FUNCTION_40_2();
          unint64_t v140 = specialized __RawDictionaryStorage.find<A>(_:)(v138, v139);
          if ((v137 & 1) != (v141 & 1)) {
            goto LABEL_56;
          }
          unint64_t v136 = v140;
        }
        uint64_t v189 = (void (*)(void))v112;
        if (v137)
        {
          unint64_t v142 = *(void *)(v185 + 72) * v136;
          uint64_t v143 = v170;
          _s12BiomeStreams13StorableValueOWObTm_1(v191[7] + v142, v170, (void (*)(void))type metadata accessor for StorableValue);
          _s12BiomeStreams13StorableValueOWObTm_1(v182, v191[7] + v142, (void (*)(void))type metadata accessor for StorableValue);
          __swift_storeEnumTagSinglePayload(v143, 0, 1, v172);
        }
        else
        {
          OUTLINED_FUNCTION_102_1((uint64_t)&v112[v136 >> 6]);
          uint64_t v144 = (void *)(v112[6] + 16 * v136);
          void *v144 = v129;
          v144[1] = v128;
          _s12BiomeStreams13StorableValueOWObTm_1(v182, v112[7] + *(void *)(v185 + 72) * v136, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v145 = v112[2];
          BOOL v135 = __OFADD__(v145, 1);
          uint64_t v146 = v145 + 1;
          if (v135) {
            goto LABEL_55;
          }
          v112[2] = v146;
          uint64_t v143 = v170;
          __swift_storeEnumTagSinglePayload(v170, 1, 1, v172);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        outlined consume of DatabaseValue(v188, v116, v117);
        outlined destroy of UUID?(v143, &demangling cache variable for type metadata for StorableValue?);
        _s12BiomeStreams13StorableValueOWOhTm_2(v183, (void (*)(void))type metadata accessor for StorableValue);
        uint64_t v21 = v184;
        outlined destroy of UUID?((uint64_t)v184, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
        uint64_t v95 = (uint64_t)v179 + (void)v181;
        uint64_t v93 = v187 - 1;
        if (v187 == 1)
        {
          swift_bridgeObjectRelease();
          uint64_t v2 = v190;
          uint64_t v90 = v177;
          uint64_t v87 = v167;
          uint64_t v88 = v165;
          goto LABEL_38;
        }
      }
      uint64_t v161 = OUTLINED_FUNCTION_107_1();
      outlined consume of DatabaseValue(v161, v162, v163);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v85 = (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType);
      int v86 = v184;
LABEL_49:
      outlined destroy of UUID?((uint64_t)v86, v85);
    }
LABEL_50:
    OUTLINED_FUNCTION_31();
  }
}

uint64_t OUTLINED_FUNCTION_106_0()
{
  return specialized Dictionary.subscript.getter(v1, v3, v0, v2);
}

uint64_t OUTLINED_FUNCTION_106_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_117(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v11 - 200) = (char *)&a9 - v9;
  *(void *)(v11 - 184) = v10;
  return type metadata accessor for Optional();
}

void OUTLINED_FUNCTION_117_0()
{
  *(void *)(v0 - 424) = *(void *)(v0 - 208) + 104;
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v4 = v3;
  char v59 = type metadata accessor for SQLDataType();
  Swift::Int Description = (char *)v59[-1].Description;
  uint64_t v9 = MEMORY[0x1F4188790](v59);
  uint64_t v50 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v49 = (char *)v48 - v12;
  MEMORY[0x1F4188790](v11);
  unint64_t v58 = (char *)v48 - v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (void *)((char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void *)(a1 + 16);
  if (!v19) {
    return swift_bridgeObjectRelease();
  }
  v48[1] = a1;
  v48[2] = v4;
  uint64_t v54 = (char *)v18 + *(int *)(v15 + 48);
  uint64_t v20 = a1 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v51 = *(void *)(v16 + 72);
  id v55 = (void (**)(char *, char *, ValueMetadata *))(Description + 32);
  v48[4] = Description + 8;
  v48[5] = Description + 16;
  v48[3] = Description + 40;
  swift_bridgeObjectRetain();
  uint64_t v52 = v18;
  uint64_t v53 = Description;
  while (1)
  {
    uint64_t v56 = v20;
    uint64_t v57 = v19;
    outlined init with copy of MaterializedViewPhysicalPlan?(v20, (uint64_t)v18, &demangling cache variable for type metadata for (String, SQLDataType));
    uint64_t v22 = *v18;
    uint64_t v21 = v18[1];
    uint64_t v23 = *v55;
    (*v55)(v58, v54, v59);
    uint64_t v24 = a3;
    uint64_t v25 = *a3;
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v21);
    uint64_t v28 = *(void *)(v25 + 16);
    BOOL v29 = (v26 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      break;
    }
    char v31 = v26;
    if (*(void *)(v25 + 24) >= v30)
    {
      if ((a2 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
        _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, a2 & 1);
      unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v21);
      if ((v31 & 1) != (v33 & 1)) {
        goto LABEL_18;
      }
      unint64_t v27 = v32;
    }
    uint64_t v34 = (void *)*v24;
    if (v31)
    {
      uint64_t v35 = v24;
      uint64_t v36 = v53;
      unint64_t v37 = *((void *)v53 + 9) * v27;
      uint64_t v38 = (void (*)(char *, unint64_t, ValueMetadata *))*((void *)v53 + 2);
      uint64_t v39 = v50;
      uint64_t v40 = v59;
      v38(v50, v34[7] + v37, v59);
      uint64_t v41 = v49;
      v38(v49, (unint64_t)v39, v40);
      uint64_t v42 = (void (*)(char *, ValueMetadata *))*((void *)v36 + 1);
      v42(v39, v40);
      v42(v58, v40);
      swift_bridgeObjectRelease();
      (*((void (**)(unint64_t, char *, ValueMetadata *))v36 + 5))(*(void *)(*v35 + 56) + v37, v41, v40);
      a3 = v35;
    }
    else
    {
      v34[(v27 >> 6) + 8] |= 1 << v27;
      uint64_t v43 = (uint64_t *)(v34[6] + 16 * v27);
      *uint64_t v43 = v22;
      v43[1] = v21;
      v23((char *)(v34[7] + *((void *)v53 + 9) * v27), v58, v59);
      uint64_t v44 = v34[2];
      BOOL v45 = __OFADD__(v44, 1);
      uint64_t v46 = v44 + 1;
      if (v45) {
        goto LABEL_17;
      }
      v34[2] = v46;
      a3 = v24;
    }
    uint64_t v18 = v52;
    uint64_t v20 = v56 + v51;
    a2 = 1;
    uint64_t v19 = v57 - 1;
    if (v57 == 1) {
      return swift_bridgeObjectRelease_n();
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void KeyedFirstMatchingRecordCache.init(materializedView:database:cacheSize:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_37();
  a19 = v24;
  a20 = v25;
  uint64_t v357 = v20;
  unint64_t v328 = v26;
  uint64_t v28 = v27;
  uint64_t v317 = v29;
  uint64_t v313 = v30;
  uint64_t v311 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v312 = v31;
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_70(v33);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLDataType?);
  uint64_t v35 = OUTLINED_FUNCTION_35(v34);
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_70(v36);
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
  uint64_t v38 = OUTLINED_FUNCTION_35(v37);
  MEMORY[0x1F4188790](v38);
  OUTLINED_FUNCTION_16();
  v350 = v39;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v40);
  OUTLINED_FUNCTION_45();
  v353 = v41;
  v336 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  uint64_t v314 = v42;
  MEMORY[0x1F4188790](v43);
  OUTLINED_FUNCTION_16();
  uint64_t v326 = v44;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v45);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_14_0(v46);
  v340 = type metadata accessor for ResultColumn();
  OUTLINED_FUNCTION_0_4();
  uint64_t v338 = v47;
  MEMORY[0x1F4188790](v48);
  OUTLINED_FUNCTION_16();
  uint64_t v331 = v49;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v50);
  OUTLINED_FUNCTION_21();
  uint64_t v318 = v51;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v52);
  OUTLINED_FUNCTION_21();
  uint64_t v322 = v53;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v54);
  OUTLINED_FUNCTION_14_0((uint64_t)&v305 - v55);
  type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v351 = v57;
  uint64_t v352 = v56;
  MEMORY[0x1F4188790](v56);
  OUTLINED_FUNCTION_16();
  uint64_t v316 = v58;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v59);
  OUTLINED_FUNCTION_21();
  uint64_t v335 = v60;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v61);
  OUTLINED_FUNCTION_21();
  v325 = v62;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v63);
  v344 = (char *)&v305 - v64;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v65);
  OUTLINED_FUNCTION_21();
  uint64_t v359 = v66;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v67);
  v358 = (void (**)(void))((char *)&v305 - v68);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v69);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_14_0(v70);
  type metadata accessor for Schema();
  OUTLINED_FUNCTION_0_4();
  uint64_t v342 = v72;
  uint64_t v343 = v71;
  MEMORY[0x1F4188790](v71);
  v341 = (char *)&v305 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v74);
  v324 = (char *)&v305 - v75;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v76);
  v347 = (uint64_t *)((char *)&v305 - v77);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v78);
  unint64_t v80 = (unint64_t)&v305 - v79;
  v356 = type metadata accessor for FromClause();
  OUTLINED_FUNCTION_0_4();
  uint64_t v354 = v81;
  MEMORY[0x1F4188790](v82);
  OUTLINED_FUNCTION_67();
  uint64_t v85 = v84 - v83;
  int v86 = type metadata accessor for SelectCore();
  OUTLINED_FUNCTION_0_4();
  uint64_t v88 = v87;
  MEMORY[0x1F4188790](v89);
  OUTLINED_FUNCTION_30_2();
  MEMORY[0x1F4188790](v90);
  OUTLINED_FUNCTION_103_1();
  MEMORY[0x1F4188790](v91);
  OUTLINED_FUNCTION_111_1();
  type metadata accessor for SQLExpressionEvaluator();
  swift_allocObject();
  uint64_t v92 = v357;
  uint64_t v93 = SQLExpressionEvaluator.init(db:)(v28);
  if (v92)
  {
    type metadata accessor for MaterializedView();
    OUTLINED_FUNCTION_4_3();
    OUTLINED_FUNCTION_2_4();
    v94();
    goto LABEL_130;
  }
  uint64_t v355 = v80;
  uint64_t v357 = v21;
  uint64_t v330 = v22;
  uint64_t v310 = 0;
  uint64_t v306 = v93;
  v323 = v28;
  uint64_t v95 = MEMORY[0x1E4FBC860];
  uint64_t v96 = Dictionary.init(dictionaryLiteral:)();
  MaterializedView.select.getter(v23);
  SelectCore.from.getter(v85);
  uint64_t v97 = *(void (**)(void, void))(v88 + 8);
  v309 = v86;
  uint64_t v308 = v88 + 8;
  v307 = v97;
  v97(v23, v86);
  uint64_t v98 = FromClause.schemas.getter();
  OUTLINED_FUNCTION_2_4();
  unint64_t v100 = v99();
  v360._uint64_t countAndFlagsBits = v95;
  uint64_t v346 = *(void *)(v98 + 16);
  if (v346)
  {
    unint64_t v101 = 0;
    uint64_t v345 = v342 + 16;
    LODWORD(v334) = 7;
    v333 = (char *)(v351 + 104);
    uint64_t v332 = v351 + 8;
    v356 = (ValueMetadata *)(v342 + 8);
    v321 = (void (**)(void))(v342 + 32);
    uint64_t v102 = v337;
    uint64_t v348 = v96;
    while (1)
    {
      if (v101 >= *(void *)(v98 + 16))
      {
        __break(1u);
        goto LABEL_136;
      }
      OUTLINED_FUNCTION_22();
      uint64_t v104 = *(void *)(v103 + 72);
      v349 = v105;
      uint64_t v354 = v104;
      uint64_t v106 = v103;
      OUTLINED_FUNCTION_15_0();
      v107();
      uint64_t v108 = Schema.tableName.getter();
      uint64_t v110 = v109;
      (*(void (**)(char *, void, uint64_t))v333)(v102, v334, v352);
      static Schema.JSONEach(with:)(v102, v347);
      OUTLINED_FUNCTION_144_0();
      OUTLINED_FUNCTION_2_4();
      v111();
      uint64_t v112 = Schema.tableName.getter();
      uint64_t v114 = v113;
      uint64_t v115 = *(void (**)(void))(v106 + 8);
      OUTLINED_FUNCTION_20_1();
      v115();
      BOOL v116 = v108 == v112 && v110 == v114;
      if (v116)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        OUTLINED_FUNCTION_40_2();
        char v117 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v117 & 1) == 0)
        {
          uint64_t v118 = *v321;
          OUTLINED_FUNCTION_28();
          v118();
          uint64_t countAndFlagsBits = v360._countAndFlagsBits;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_28_5();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t countAndFlagsBits = v360._countAndFlagsBits;
          }
          unint64_t v121 = *(void *)(countAndFlagsBits + 16);
          unint64_t v120 = *(void *)(countAndFlagsBits + 24);
          if (v121 >= v120 >> 1)
          {
            OUTLINED_FUNCTION_88_2(v120);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t countAndFlagsBits = v360._countAndFlagsBits;
          }
          *(void *)(countAndFlagsBits + 16) = v121 + 1;
          OUTLINED_FUNCTION_28();
          unint64_t v100 = ((uint64_t (*)(void))v118)();
          v360._uint64_t countAndFlagsBits = countAndFlagsBits;
          goto LABEL_18;
        }
      }
      OUTLINED_FUNCTION_20_1();
      unint64_t v100 = ((uint64_t (*)(void))v115)();
LABEL_18:
      ++v101;
      uint64_t v96 = v348;
      uint64_t MatchingRecordCache = v351;
      unint64_t v80 = (unint64_t)v344;
      uint64_t v102 = v337;
      uint64_t object = (uint64_t)v341;
      if (v346 == v101)
      {
        uint64_t v95 = v360._countAndFlagsBits;
        goto LABEL_21;
      }
    }
  }
  uint64_t MatchingRecordCache = v351;
  uint64_t object = (uint64_t)v341;
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v124 = *(char **)(v95 + 16);
  uint64_t v125 = v95;
  uint64_t v126 = v352;
  unint64_t v101 = (unint64_t)v350;
  uint64_t isUniquelyReferenced_nonNull_native = v357;
  v333 = v124;
  if (!v124) {
    goto LABEL_59;
  }
  uint64_t v128 = 0;
  uint64_t v332 = v125 + ((*(unsigned __int8 *)(v342 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v342 + 80));
  v324 = (char *)(v342 + 16);
  uint64_t v355 = MatchingRecordCache + 32;
  v356 = (ValueMetadata *)(MatchingRecordCache + 16);
  uint64_t v346 = MatchingRecordCache + 40;
  v349 = (void (*)(void))(MatchingRecordCache + 8);
  uint64_t v320 = v342 + 8;
  v321 = (void (**)(void))v125;
  do
  {
    if ((unint64_t)v128 >= *(void *)(v125 + 16)) {
      goto LABEL_138;
    }
    v334 = v128 + 1;
    OUTLINED_FUNCTION_15_0();
    v129();
    uint64_t v130 = Schema.columns.getter();
    uint64_t v354 = 0;
    uint64_t v131 = *(void *)(v130 + 64);
    uint64_t v345 = v130 + 64;
    uint64_t v132 = 1 << *(unsigned char *)(v130 + 32);
    if (v132 < 64) {
      uint64_t v133 = ~(-1 << v132);
    }
    else {
      uint64_t v133 = -1;
    }
    unint64_t v80 = v133 & v131;
    v347 = (void *)((unint64_t)(v132 + 63) >> 6);
    uint64_t v348 = v130;
    v319 = (char *)v347 - 1;
    while (1)
    {
      uint64_t v134 = (uint64_t)&demangling cache variable for type metadata for (key: String, value: SQLDataType);
      if (v80)
      {
        unint64_t v135 = __clz(__rbit64(v80));
        v80 &= v80 - 1;
        unint64_t v136 = v135 | (v354 << 6);
LABEL_30:
        char v137 = (void *)(*(void *)(v348 + 48) + 16 * v136);
        uint64_t v138 = v137[1];
        *(void *)unint64_t v101 = *v137;
        *(void *)(v101 + 8) = v138;
        uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
        OUTLINED_FUNCTION_141_0();
        OUTLINED_FUNCTION_15_0();
        v140();
        __swift_storeEnumTagSinglePayload(v101, 0, 1, v139);
        swift_bridgeObjectRetain();
        uint64_t v141 = (uint64_t)v353;
        uint64_t isUniquelyReferenced_nonNull_native = v357;
        goto LABEL_48;
      }
      uint64_t v142 = v354 + 1;
      if (__OFADD__(v354, 1))
      {
        __break(1u);
        goto LABEL_126;
      }
      uint64_t v141 = (uint64_t)v353;
      if (v142 < (uint64_t)v347)
      {
        if (*(void *)(v345 + 8 * v142)) {
          goto LABEL_34;
        }
        uint64_t v147 = v354 + 2;
        ++v354;
        if (v142 + 1 < (uint64_t)v347)
        {
          if (*(void *)(v345 + 8 * v147)) {
            goto LABEL_34;
          }
          uint64_t v354 = v142 + 1;
          if (v142 + 2 < (uint64_t)v347)
          {
            if (*(void *)(v345 + 8 * (v142 + 2))) {
              goto LABEL_34;
            }
            uint64_t v148 = v142 + 3;
            uint64_t v354 = v142 + 2;
            if (v142 + 3 < (uint64_t)v347)
            {
              if (*(void *)(v345 + 8 * v148))
              {
LABEL_34:
                OUTLINED_FUNCTION_116_0();
                unint64_t v80 = v144 & v143;
                unint64_t v136 = v146 + (v145 << 6);
                uint64_t v354 = v145;
                goto LABEL_30;
              }
              while (1)
              {
                uint64_t v149 = v148 + 1;
                if (__OFADD__(v148, 1)) {
                  goto LABEL_141;
                }
                if (v149 >= (uint64_t)v347) {
                  break;
                }
                ++v148;
                if (*(void *)(v345 + 8 * v149)) {
                  goto LABEL_34;
                }
              }
              uint64_t v354 = (uint64_t)v319;
            }
          }
        }
      }
      uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
      __swift_storeEnumTagSinglePayload(v101, 1, 1, v150);
      unint64_t v80 = 0;
LABEL_48:
      _s10Foundation4UUIDVSgWObTm_0(v101, v141, &demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
      uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
      if (__swift_getEnumTagSinglePayload(v141, 1, v151) == 1) {
        break;
      }
      uint64_t v152 = *(void (**)(void))v355;
      uint64_t v153 = (uint64_t)v358;
      OUTLINED_FUNCTION_28();
      v152();
      OUTLINED_FUNCTION_71();
      Swift::String v154 = String.lowercased()();
      uint64_t MatchingRecordCache = v154._countAndFlagsBits;
      uint64_t object = (uint64_t)v154._object;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_15_0();
      v155();
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v360._uint64_t countAndFlagsBits = v96;
      specialized __RawDictionaryStorage.find<A>(_:)(v154._countAndFlagsBits, (uint64_t)v154._object);
      OUTLINED_FUNCTION_140_0();
      if (v158)
      {
        __break(1u);
        goto LABEL_103;
      }
      uint64_t v126 = v157;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
      Swift::Bool v159 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v96);
      uint64_t isUniquelyReferenced_nonNull_native = v357;
      if (v159)
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v154._countAndFlagsBits, (uint64_t)v154._object);
        OUTLINED_FUNCTION_21_3();
        if (!v116) {
          goto LABEL_144;
        }
      }
      uint64_t v160 = v360._countAndFlagsBits;
      if (v126)
      {
        OUTLINED_FUNCTION_136_0();
        OUTLINED_FUNCTION_66_2();
        v161();
      }
      else
      {
        OUTLINED_FUNCTION_31_4();
        *unint64_t v162 = v154;
        OUTLINED_FUNCTION_136_0();
        OUTLINED_FUNCTION_28();
        v152();
        OUTLINED_FUNCTION_118_1();
        if (v158)
        {
          __break(1u);
LABEL_111:
          uint64_t v256 = v355;
          unint64_t v101 = (unint64_t)v152;
          if (*(void *)(v355 + 16))
          {
            uint64_t v359 = *(void *)(v355 + 16);
            v349 = v152;
            v350 = (void (**)(void))v80;
            v257 = v315;
            uint64_t v357 = (uint64_t)v315 + *(int *)(v96 + 48);
            OUTLINED_FUNCTION_22();
            uint64_t v259 = v256 + v258;
            v356 = *(ValueMetadata **)(MatchingRecordCache + 72);
            v358 = (void (**)(void))(v351 + 32);
            uint64_t v354 = v351 + 40;
            swift_bridgeObjectRetain();
            uint64_t v260 = isUniquelyReferenced_nonNull_native;
            while (1)
            {
              outlined init with copy of UUID?(v259, (uint64_t)v257, &demangling cache variable for type metadata for (String, SQLDataType));
              uint64_t v261 = *v257;
              uint64_t v262 = v257[1];
              v263 = *v358;
              OUTLINED_FUNCTION_28();
              v263();
              char v264 = swift_isUniquelyReferenced_nonNull_native();
              v360._uint64_t countAndFlagsBits = v260;
              uint64_t v265 = OUTLINED_FUNCTION_144_0();
              specialized __RawDictionaryStorage.find<A>(_:)(v265, v266);
              OUTLINED_FUNCTION_140_0();
              if (v158) {
                goto LABEL_142;
              }
              unint64_t v269 = v267;
              char v270 = v268;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
              if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v264, v260))
              {
                uint64_t v271 = OUTLINED_FUNCTION_144_0();
                specialized __RawDictionaryStorage.find<A>(_:)(v271, v272);
                OUTLINED_FUNCTION_21_3();
                if (!v116) {
                  goto LABEL_144;
                }
                unint64_t v269 = v273;
              }
              uint64_t v274 = v360._countAndFlagsBits;
              if (v270)
              {
                OUTLINED_FUNCTION_141_0();
                OUTLINED_FUNCTION_66_2();
                v275();
              }
              else
              {
                OUTLINED_FUNCTION_102_1(v360._countAndFlagsBits + 8 * (v269 >> 6));
                v276 = (void *)(*(void *)(v274 + 48) + 16 * v269);
                void *v276 = v261;
                v276[1] = v262;
                OUTLINED_FUNCTION_141_0();
                OUTLINED_FUNCTION_28();
                v263();
                uint64_t v277 = *(void *)(v274 + 16);
                BOOL v158 = __OFADD__(v277, 1);
                uint64_t v278 = v277 + 1;
                if (v158) {
                  goto LABEL_143;
                }
                *(void *)(v274 + 16) = v278;
                swift_bridgeObjectRetain();
              }
              uint64_t v260 = v360._countAndFlagsBits;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v259 += (uint64_t)v356;
              BOOL v116 = v359-- == 1;
              v257 = v315;
              if (v116)
              {
                swift_bridgeObjectRelease();
                unint64_t v101 = (unint64_t)v349;
                unint64_t v80 = (unint64_t)v350;
                goto LABEL_128;
              }
            }
          }
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v260 = isUniquelyReferenced_nonNull_native;
LABEL_128:
          MaterializedView.name.getter();
          v360._uint64_t countAndFlagsBits = static String._createEmpty(withInitialCapacity:)(33);
          v360._uint64_t object = v282;
          OUTLINED_FUNCTION_35_4();
          uint64_t v283 = OUTLINED_FUNCTION_26_1();
          v288._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_68_3(v283, v284, v285, v286, v287);
          String.append(_:)(v288);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_105_1();
          uint64_t v289 = v310;
          _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySS14BiomeSQLParser11SQLDataTypeOG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5C197_pIggnozo_SS3key_AC5valuetSSsAD_pIegnrzr_TR04_s12a111Streams30KeyedQueryPlannerMetadataCachePAAE14createTableSQL20materializedViewName6schemaS2S_SDySS0A9SQLParser11cD19OGtKFZS2S_AItKXEfU_Tf3nnnpf_nTf1cn_n(v260);
          if (v289)
          {
            swift_bridgeObjectRelease();
            type metadata accessor for MaterializedView();
            OUTLINED_FUNCTION_4_3();
            OUTLINED_FUNCTION_2_4();
            v290();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_130;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
          lazy protocol witness table accessor for type [String] and conformance [A]();
          uint64_t v291 = BidirectionalCollection<>.joined(separator:)();
          v293 = v292;
          swift_bridgeObjectRelease();
          v294._uint64_t countAndFlagsBits = v291;
          v294._uint64_t object = v293;
          String.append(_:)(v294);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_61_3();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v100 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v360, MEMORY[0x1E4FBC860]);
          uint64_t v310 = v295;
          if (v295)
          {
            type metadata accessor for MaterializedView();
            OUTLINED_FUNCTION_4_3();
            OUTLINED_FUNCTION_2_4();
            v296();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_130;
          }
LABEL_136:
          uint64_t v355 = v100;
          swift_bridgeObjectRelease();
LABEL_105:
          uint64_t v243 = v313;
          uint64_t v134 = 0x2A205443454C4553;
          swift_bridgeObjectRelease();
          uint64_t MatchingRecordCache = type metadata accessor for KeyedFirstMatchingRecordCache(0);
          *(void *)(v243 + *(int *)(MatchingRecordCache + 48)) = v80;
          *(unsigned char *)(v243 + *(int *)(MatchingRecordCache + 56)) = (v353 & 1) == 0;
          swift_retain();
          uint64_t object = MaterializedView.name.getter();
          LODWORD(isUniquelyReferenced_nonNull_native) = v244;
          specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)();
          uint64_t v126 = v245;
          swift_release();
          if (*(void *)(v126 + 16))
          {
            v360._uint64_t countAndFlagsBits = static String._createEmpty(withInitialCapacity:)(28);
            v360._uint64_t object = v246;
            OUTLINED_FUNCTION_36_5();
            v249._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_68_3(object, isUniquelyReferenced_nonNull_native, v247, v248, (void *)(v101 | 0x8000000000000000));
            String.append(_:)(v249);
            swift_bridgeObjectRelease();
            OUTLINED_FUNCTION_72_3();
            uint64_t v250 = v310;
            _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_14BiomeSQLParser11SQLDataTypeOtG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5c186_pIggnozo_SS_ACtSSsAD_pIegnrzr_TR04_s12a146Streams30KeyedQueryPlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm(v126, &demangling cache variable for type metadata for (String, SQLDataType));
            if (v250)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for MaterializedView();
              OUTLINED_FUNCTION_4_3();
              OUTLINED_FUNCTION_2_4();
              v251();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              goto LABEL_109;
            }
            uint64_t v310 = 0;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
            lazy protocol witness table accessor for type [String] and conformance [A]();
            uint64_t v297 = OUTLINED_FUNCTION_97_2();
            v299 = v298;
            swift_bridgeObjectRelease();
            v300._uint64_t countAndFlagsBits = v297;
            v300._uint64_t object = v299;
            String.append(_:)(v300);
            swift_bridgeObjectRelease();
            v301._uint64_t countAndFlagsBits = 41;
            v301._uint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v301);
LABEL_134:
            uint64_t v302 = v360._countAndFlagsBits;
            uint64_t v166 = (uint64_t)v360._object;
            uint64_t v303 = swift_allocObject();
            *(void *)(v303 + 16) = v126;
            swift_bridgeObjectRelease();
            uint64_t v234 = v313;
            v304 = (uint64_t *)(v313 + *(int *)(MatchingRecordCache + 60));
            uint64_t *v304 = v302;
            v304[1] = v166;
            v304[2] = (uint64_t)partial apply for closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:);
            v304[3] = v303;
            OUTLINED_FUNCTION_125_0();
LABEL_101:
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (value: ChangeRecord, event: CacheEvent));
            lazy protocol witness table accessor for type [StorableValue] and conformance <A> [A]();
            OUTLINED_FUNCTION_40_2();
            uint64_t v235 = Dictionary.init(dictionaryLiteral:)();
            type metadata accessor for KeyedFirstMatchingRecordCache(0);
            *(void *)(v234 + *(int *)(MatchingRecordCache + 28)) = v235;
            id v236 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA48]), sel_init);
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ChangeRecord?);
            OUTLINED_FUNCTION_40_2();
            uint64_t v237 = Dictionary.init(dictionaryLiteral:)();
            v238 = (void *)(v234 + *(int *)(MatchingRecordCache + 32));
            void *v238 = v236;
            v238[1] = v237;
            *(void *)(v234 + *(int *)(MatchingRecordCache + 36)) = v101;
            type metadata accessor for MaterializedView();
            OUTLINED_FUNCTION_5_0();
            OUTLINED_FUNCTION_18();
            v239();
            uint64_t v240 = MEMORY[0x1E4FBC870];
            *(void *)(v234 + *(int *)(MatchingRecordCache + 24)) = MEMORY[0x1E4FBC870];
            uint64_t v241 = OUTLINED_FUNCTION_40_2();
            v242(v241);
            *(void *)(v234 + *(int *)(MatchingRecordCache + 20)) = v240;
            *(void *)(v234 + *(int *)(MatchingRecordCache + 40)) = v166;
            *(void *)(v234 + *(int *)(MatchingRecordCache + 44)) = v306;
            *(void *)(v234 + *(int *)(MatchingRecordCache + 52)) = v348;
            goto LABEL_130;
          }
LABEL_126:
          OUTLINED_FUNCTION_124_0();
          swift_bridgeObjectRelease();
          v360._uint64_t countAndFlagsBits = v134;
          v360._uint64_t object = (void *)0xEE00204D4F524620;
          v281._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_68_3(object, isUniquelyReferenced_nonNull_native, v279, v280, (void *)(v101 | 0x8000000000000000));
          String.append(_:)(v281);
          swift_bridgeObjectRelease();
          goto LABEL_134;
        }
        *(void *)(v160 + 16) = v163;
        swift_bridgeObjectRetain();
      }
      uint64_t v96 = v360._countAndFlagsBits;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_2_4();
      v164();
      unint64_t v101 = (unint64_t)v350;
    }
    swift_release();
    uint64_t object = (uint64_t)v341;
    OUTLINED_FUNCTION_2_4();
    v165();
    uint64_t v128 = v334;
    uint64_t v125 = (uint64_t)v321;
  }
  while (v334 != v333);
LABEL_59:
  swift_release();
  uint64_t v348 = v96;
  MaterializedView.select.getter(isUniquelyReferenced_nonNull_native);
  uint64_t v166 = SelectCore.select.getter();
  OUTLINED_FUNCTION_45_4();
  v167();
  uint64_t v168 = MEMORY[0x1E4FBC860];
  uint64_t v169 = v322;
  uint64_t v170 = v330;
  uint64_t v359 = *(void *)(v166 + 16);
  v360._uint64_t countAndFlagsBits = MEMORY[0x1E4FBC860];
  if (v359)
  {
    unint64_t v171 = 0;
    uint64_t v172 = v338;
    v358 = (void (**)(void))(v338 + 16);
    v353 = (void (**)(void))(v338 + 32);
    uint64_t v354 = v314 + 8;
    v356 = (ValueMetadata *)(v338 + 8);
    uint64_t v357 = v166;
    uint64_t v355 = (v338 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    unint64_t v101 = v338 + 16;
    while (1)
    {
      if (v171 >= *(void *)(v166 + 16))
      {
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_145:
        swift_release();
        __break(1u);
        return;
      }
      uint64_t v173 = *(void (**)(void))(v172 + 16);
      OUTLINED_FUNCTION_98((uint64_t)&a17);
      uint64_t v174 = v340;
      OUTLINED_FUNCTION_32_4();
      v173();
      ResultColumn.alias.getter();
      uint64_t v176 = v175;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_32_4();
      v173();
      if (v176)
      {
        ResultColumn.expression.getter(v329);
        uint64_t v177 = SQLExpression.aggregationFunctions.getter();
        OUTLINED_FUNCTION_2_4();
        v178();
        uint64_t v179 = *(void *)(v177 + 16);
        swift_bridgeObjectRelease();
        uint64_t Kind = (void (*)(void))v356->Kind;
        OUTLINED_FUNCTION_20_1();
        Kind();
        if (!v179)
        {
          uint64_t v182 = *v353;
          OUTLINED_FUNCTION_28();
          v182();
          uint64_t v183 = v360._countAndFlagsBits;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_28_5();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v183 = v360._countAndFlagsBits;
          }
          uint64_t v166 = v357;
          unint64_t v185 = *(void *)(v183 + 16);
          unint64_t v184 = *(void *)(v183 + 24);
          if (v185 >= v184 >> 1)
          {
            OUTLINED_FUNCTION_88_2(v184);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v183 = v360._countAndFlagsBits;
          }
          *(void *)(v183 + 16) = v185 + 1;
          OUTLINED_FUNCTION_28();
          v182();
          v360._uint64_t countAndFlagsBits = v183;
          OUTLINED_FUNCTION_152_0();
          uint64_t v169 = v322;
          goto LABEL_72;
        }
        uint64_t v169 = v322;
      }
      else
      {
        uint64_t Kind = (void (*)(void))v356->Kind;
        ((void (*)(uint64_t, ValueMetadata *))v356->Kind)(v169, v174);
      }
      ((void (*)(uint64_t, ValueMetadata *))Kind)(v339, v174);
      OUTLINED_FUNCTION_152_0();
      uint64_t v166 = v357;
LABEL_72:
      ++v171;
      uint64_t v172 = v338;
      if (v359 == v171)
      {
        uint64_t v168 = v360._countAndFlagsBits;
        uint64_t v170 = v181;
        goto LABEL_75;
      }
    }
  }
  uint64_t v172 = v338;
LABEL_75:
  swift_bridgeObjectRelease();
  uint64_t v186 = *(void *)(v168 + 16);
  OUTLINED_FUNCTION_125_0();
  if (!v186)
  {
    swift_release();
LABEL_97:
    MaterializedView.select.getter(v170);
    uint64_t v223 = SelectCore.groupBy.getter();
    OUTLINED_FUNCTION_45_4();
    v224();
    if (!v223)
    {
      uint64_t MatchingRecordCache = type metadata accessor for KeyedFirstMatchingRecordCache(0);
      uint64_t v234 = v313;
      *(void *)(v313 + *(int *)(MatchingRecordCache + 48)) = 0;
      OUTLINED_FUNCTION_57_4(MatchingRecordCache);
      goto LABEL_101;
    }
    v360._uint64_t countAndFlagsBits = v223;
    swift_bridgeObjectRetain();
    uint64_t v225 = v310;
    specialized MutableCollection<>.sort(by:)(&v360);
    if (v225) {
      goto LABEL_145;
    }
    swift_bridgeObjectRelease();
    uint64_t v153 = v360._countAndFlagsBits;
    specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)();
    uint64_t v355 = v226;
    uint64_t v227 = MaterializedView.name.getter();
    unint64_t v80 = (unint64_t)"to the number of stored keys (";
    uint64_t v231 = OUTLINED_FUNCTION_68_3(v227, v228, v229, v230, (void *)0x800000018EBEA6A0);
    v233 = v232;
    swift_bridgeObjectRelease();
    int v156 = tableExists(sqlExpressionEvaluator:tableName:)(v306, v231, v233);
    uint64_t v310 = 0;
    uint64_t isUniquelyReferenced_nonNull_native = v348;
    uint64_t MatchingRecordCache = v312;
    uint64_t v96 = v311;
LABEL_103:
    uint64_t v152 = (void (*)(void))v80;
    unint64_t v80 = v153;
    LODWORD(v353) = v156;
    swift_bridgeObjectRelease();
    if ((v353 & 1) == 0) {
      goto LABEL_111;
    }
    unint64_t v101 = (unint64_t)v152;
    goto LABEL_105;
  }
  uint64_t v187 = v172 + 16;
  OUTLINED_FUNCTION_22();
  v347 = v188;
  uint64_t v190 = (char *)v188 + v189;
  v349 = (void (*)(void))(v351 + 16);
  v358 = (void (**)(void))(v351 + 32);
  v356 = v192;
  uint64_t v357 = v191 + 8;
  v350 = (void (**)(void))(v351 + 8);
  v353 = (void (**)(void))(v351 + 40);
  uint64_t v355 = v187 - 8;
  uint64_t v338 = v187;
  uint64_t v354 = *(void *)(v187 + 56);
  uint64_t v193 = v348;
  uint64_t v194 = v331;
  while (2)
  {
    OUTLINED_FUNCTION_26_1();
    OUTLINED_FUNCTION_18();
    v195();
    uint64_t v196 = v194;
    uint64_t v197 = ResultColumn.name.getter();
    uint64_t v199 = v198;
    uint64_t v200 = *(void *)(v193 + 16);
    uint64_t v359 = v197;
    if (!v200)
    {
      uint64_t v206 = OUTLINED_FUNCTION_98((uint64_t)&v359);
      __swift_storeEnumTagSinglePayload(v206, 1, 1, v352);
      goto LABEL_83;
    }
    uint64_t v201 = v197;
    swift_bridgeObjectRetain();
    specialized __RawDictionaryStorage.find<A>(_:)(v201, v199);
    uint64_t v202 = v352;
    uint64_t v196 = v327;
    if (v203)
    {
      OUTLINED_FUNCTION_15_0();
      v204();
      uint64_t v205 = 0;
    }
    else
    {
      uint64_t v205 = 1;
    }
    __swift_storeEnumTagSinglePayload(v196, v205, 1, v202);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v196, 1, v202) == 1)
    {
LABEL_83:
      outlined destroy of UUID?(v196, &demangling cache variable for type metadata for SQLDataType?);
      goto LABEL_86;
    }
    OUTLINED_FUNCTION_45_1();
    v207();
    ResultColumn.expression.getter(v329);
    SQLExpression.returnType.getter(v337);
    OUTLINED_FUNCTION_2_4();
    v208();
    lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type SQLDataType and conformance SQLDataType, (void (*)(uint64_t))type metadata accessor for SQLDataType);
    char v209 = dispatch thunk of static Equatable.== infix(_:_:)();
    v210 = *v350;
    OUTLINED_FUNCTION_20_1();
    v210();
    if (v209)
    {
      uint64_t v211 = OUTLINED_FUNCTION_149_0();
      ((void (*)(uint64_t))v210)(v211);
LABEL_86:
      ResultColumn.expression.getter(v326);
      SQLExpression.returnType.getter(v325);
      OUTLINED_FUNCTION_2_4();
      v212();
      uint64_t v213 = *v358;
      OUTLINED_FUNCTION_28();
      v213();
      swift_isUniquelyReferenced_nonNull_native();
      v360._uint64_t countAndFlagsBits = v193;
      specialized __RawDictionaryStorage.find<A>(_:)(v359, v199);
      OUTLINED_FUNCTION_41_4();
      if (v158) {
        goto LABEL_139;
      }
      char v215 = v214;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
      BOOL v216 = OUTLINED_FUNCTION_138_0();
      uint64_t v217 = v359;
      if (v216)
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v359, v199);
        OUTLINED_FUNCTION_21_3();
        if (!v116) {
          goto LABEL_144;
        }
      }
      uint64_t v218 = v360._countAndFlagsBits;
      if (v215)
      {
        OUTLINED_FUNCTION_66_2();
        v219();
      }
      else
      {
        OUTLINED_FUNCTION_31_4();
        uint64_t *v220 = v217;
        v220[1] = v199;
        OUTLINED_FUNCTION_28();
        v213();
        OUTLINED_FUNCTION_118_1();
        if (v158) {
          goto LABEL_140;
        }
        *(void *)(v218 + 16) = v221;
        swift_bridgeObjectRetain();
      }
      uint64_t v193 = v360._countAndFlagsBits;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v194 = v331;
      OUTLINED_FUNCTION_2_4();
      v222();
      v190 += v354;
      --v186;
      uint64_t v166 = (uint64_t)v323;
      unint64_t v101 = v328;
      if (!v186)
      {
        uint64_t v348 = v193;
        swift_release();
        uint64_t v170 = v330;
        goto LABEL_97;
      }
      continue;
    }
    break;
  }
  swift_release();
  type metadata accessor for MetadataSQLError(0);
  lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
  OUTLINED_FUNCTION_39();
  void *v252 = v359;
  v252[1] = v199;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_release();
  type metadata accessor for MaterializedView();
  OUTLINED_FUNCTION_4_3();
  OUTLINED_FUNCTION_2_4();
  v253();
  uint64_t v254 = OUTLINED_FUNCTION_149_0();
  ((void (*)(uint64_t))v210)(v254);
  OUTLINED_FUNCTION_2_4();
  v255();
LABEL_109:
  swift_bridgeObjectRelease();
LABEL_130:
  OUTLINED_FUNCTION_31();
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

unint64_t OUTLINED_FUNCTION_28_0(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(a5 + 8 * (result >> 6) + 64) |= 1 << result;
  return result;
}

uint64_t OUTLINED_FUNCTION_28_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_28_5()
{
  return 0;
}

void OUTLINED_FUNCTION_31_0()
{
  *uint64_t v0 = 0x8000000000000000;
}

void OUTLINED_FUNCTION_31_4()
{
  *(void *)(v0 + 8 * (v1 >> 6) + 64) |= 1 << v1;
}

uint64_t OUTLINED_FUNCTION_71()
{
  return v0;
}

void OUTLINED_FUNCTION_71_0(char a1@<W8>)
{
  **(void **)(v1 - 512) = -1 << a1;
}

uint64_t OUTLINED_FUNCTION_118()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_140()
{
  return type metadata accessor for StorableValue(0);
}

uint64_t OUTLINED_FUNCTION_136()
{
  uint64_t v3 = *(int *)(v0 + 32);
  *(void *)(v2 + *(int *)(v0 + 28)) = *(void *)(v1 + *(int *)(v0 + 28));
  *(unsigned char *)(v2 + v3) = *(unsigned char *)(v1 + v3);
  return v2;
}

uint64_t OUTLINED_FUNCTION_136_0()
{
  return *(void *)(v0 + 56) + *(void *)(*(void *)(v2 - 176) + 72) * v1;
}

uint64_t OUTLINED_FUNCTION_141()
{
  *uint64_t v0 = *v1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_98@<X0>(uint64_t a1@<X8>)
{
  return *(void *)(a1 - 256);
}

void OUTLINED_FUNCTION_98_2()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t MaterializedView.select.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of SelectCore(v1 + 16, a1);
}

uint64_t outlined init with copy of SelectCore(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t OUTLINED_FUNCTION_152@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 64) = 8;
  return swift_bridgeObjectRetain();
}

uint64_t destroy for SQLExpressionInteger()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for Schema(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t Schema.tableName.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

void *OUTLINED_FUNCTION_125()
{
  if (*(_DWORD *)(v2 + 84)) {
    size_t v4 = *(void *)(v2 + 64);
  }
  else {
    size_t v4 = *(void *)(v2 + 64) + 1;
  }
  return memcpy(v0, v1, v4);
}

uint64_t OUTLINED_FUNCTION_144_0()
{
  return v0;
}

#error "18E699D14: call analysis failed (funcsize=34)"

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_37();
  a19 = v22;
  a20 = v23;
  uint64_t v24 = v20;
  unint64_t v26 = v25;
  unint64_t v27 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  uint64_t v173 = v28;
  MEMORY[0x1F4188790](v29);
  OUTLINED_FUNCTION_16();
  uint64_t v167 = v30;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v31);
  uint64_t v182 = (char *)&v159 - v32;
  OUTLINED_FUNCTION_11();
  uint64_t v34 = MEMORY[0x1F4188790](v33);
  uint64_t v36 = (char *)&v159 - v35;
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_103_1();
  MEMORY[0x1F4188790](v37);
  unint64_t v171 = (char *)&v159 - v38;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v39);
  uint64_t v170 = (char *)&v159 - v40;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v41);
  OUTLINED_FUNCTION_21();
  uint64_t v165 = v42;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v43);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_70(v44);
  uint64_t v186 = v26;
  Swift::Int v45 = v26[1];
  Swift::Int v46 = _minimumMergeRunLength(_:)(v45);
  if (v46 >= v45)
  {
    if (v45 < 0) {
      goto LABEL_154;
    }
    if (v45) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)();
    }
LABEL_132:
    OUTLINED_FUNCTION_31();
    return;
  }
  Swift::Int v161 = v46;
  if (v45 < -1) {
    goto LABEL_162;
  }
  uint64_t v47 = (char *)MEMORY[0x1E4FBC860];
  if (v45 > 1) {
    *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)() + 16) = v45 / 2;
  }
  OUTLINED_FUNCTION_22();
  uint64_t v160 = v48;
  uint64_t v172 = v48 + v49;
  if (v45 < 1)
  {
    unint64_t v99 = *((void *)v47 + 2);
LABEL_120:
    if (v99 >= 2)
    {
      uint64_t v152 = *v186;
      do
      {
        unint64_t v153 = v99 - 2;
        if (v99 < 2) {
          goto LABEL_148;
        }
        if (!v152) {
          goto LABEL_161;
        }
        Swift::String v154 = v47;
        uint64_t v155 = *(void *)&v47[16 * v153 + 32];
        uint64_t v156 = *(void *)&v47[16 * v99 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)();
        if (v24) {
          break;
        }
        if (v156 < v155) {
          goto LABEL_149;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          Swift::String v154 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v154);
        }
        if (v153 >= *((void *)v154 + 2)) {
          goto LABEL_150;
        }
        uint64_t v157 = &v154[16 * v153 + 32];
        *(void *)uint64_t v157 = v155;
        *((void *)v157 + 1) = v156;
        unint64_t v158 = *((void *)v154 + 2);
        if (v99 > v158) {
          goto LABEL_151;
        }
        uint64_t v47 = v154;
        memmove(&v154[16 * v99 + 16], &v154[16 * v99 + 32], 16 * (v158 - v99));
        *((void *)v154 + 2) = v158 - 1;
        unint64_t v99 = v158 - 1;
      }
      while (v158 > 2);
    }
LABEL_131:
    swift_bridgeObjectRelease();
    *(void *)(v160 + 16) = 0;
    swift_bridgeObjectRelease();
    goto LABEL_132;
  }
  uint64_t v50 = 0;
  uint64_t v179 = v173 + 16;
  uint64_t v180 = (char *)v27;
  uint64_t v178 = (void (**)(void))(v173 + 8);
  unint64_t v184 = (void (**)(void))(v173 + 32);
  uint64_t v175 = v36;
  uint64_t v169 = v21;
  while (1)
  {
    uint64_t v51 = (char *)v50;
    Swift::Int v52 = (Swift::Int)v50 + 1;
    Swift::Int v183 = v45;
    if (v52 >= v45)
    {
      Swift::Int v61 = v52;
      uint64_t v62 = v180;
    }
    else
    {
      uint64_t v163 = v24;
      uint64_t v53 = *v186;
      Swift::Int v54 = *(void *)(v173 + 72);
      uint64_t v177 = v52;
      uint64_t v55 = *(void (**)(void))(v173 + 16);
      OUTLINED_FUNCTION_98((uint64_t)&a18);
      OUTLINED_FUNCTION_32_4();
      v55();
      uint64_t v168 = v51;
      uint64_t v176 = v53;
      Swift::Int v185 = v54;
      OUTLINED_FUNCTION_32_4();
      v55();
      uint64_t v56 = SQLExpression.sql.getter();
      uint64_t v58 = v57;
      if (v56 == SQLExpression.sql.getter() && v58 == v59) {
        LODWORD(v181) = 0;
      }
      else {
        LODWORD(v181) = OUTLINED_FUNCTION_78_2();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v63 = *v178;
      uint64_t v62 = v180;
      ((void (*)(uint64_t, char *))*v178)(v165, v180);
      ((void (*)(uint64_t, char *))v63)(v164, v62);
      Swift::Int v61 = (Swift::Int)(v168 + 2);
      if ((uint64_t)(v168 + 2) < v183)
      {
        unint64_t v162 = v47;
        uint64_t v64 = v176;
        v177 *= v185;
        while (1)
        {
          Swift::Int v65 = v61;
          OUTLINED_FUNCTION_147_0();
          v55();
          OUTLINED_FUNCTION_147_0();
          v55();
          uint64_t v66 = SQLExpression.sql.getter();
          uint64_t v68 = v67;
          BOOL v70 = v66 == SQLExpression.sql.getter() && v68 == v69;
          int v71 = v70 ? 0 : OUTLINED_FUNCTION_78_2();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v62 = v180;
          OUTLINED_FUNCTION_95();
          v63();
          OUTLINED_FUNCTION_95();
          v63();
          if ((v181 ^ v71)) {
            break;
          }
          Swift::Int v61 = v65 + 1;
          v64 += v185;
          if (v65 + 1 >= v183)
          {
            Swift::Int v61 = v183;
            uint64_t v47 = v162;
            goto LABEL_27;
          }
        }
        uint64_t v47 = v162;
        Swift::Int v61 = v65;
      }
LABEL_27:
      uint64_t v24 = v163;
      uint64_t v51 = v168;
      if (v181)
      {
        if (v61 < (uint64_t)v168) {
          goto LABEL_155;
        }
        if ((uint64_t)v168 < v61)
        {
          unint64_t v162 = v47;
          uint64_t v72 = 0;
          uint64_t v73 = v185 * (v61 - 1);
          Swift::Int v74 = v61 * v185;
          uint64_t v47 = v168;
          uint64_t v24 = (void)v168 * v185;
          do
          {
            if (v47 != (char *)(v61 + v72 - 1))
            {
              uint64_t v75 = v176;
              if (!v176) {
                goto LABEL_160;
              }
              Swift::Int v76 = v61;
              unint64_t v77 = v176 + v24;
              uint64_t v177 = v176 + v73;
              uint64_t v62 = v180;
              uint64_t v181 = *v184;
              OUTLINED_FUNCTION_28();
              v78();
              if (v24 < v73 || v77 >= v75 + v74)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v24 != v73)
              {
                swift_arrayInitWithTakeBackToFront();
              }
              OUTLINED_FUNCTION_28();
              v80();
              Swift::Int v61 = v76;
            }
            ++v47;
            --v72;
            v73 -= v185;
            v74 -= v185;
            v24 += v185;
          }
          while ((uint64_t)v47 < v61 + v72);
          OUTLINED_FUNCTION_120_1();
          uint64_t v51 = v168;
        }
      }
    }
    if (v61 < v183)
    {
      if (__OFSUB__(v61, v51)) {
        goto LABEL_153;
      }
      if (v61 - (uint64_t)v51 < v161) {
        break;
      }
    }
LABEL_66:
    if (v61 < (uint64_t)v51) {
      goto LABEL_152;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v149 = (char *)OUTLINED_FUNCTION_28_5();
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v149, v150, v151, v47);
    }
    unint64_t v98 = *((void *)v47 + 2);
    unint64_t v97 = *((void *)v47 + 3);
    unint64_t v99 = v98 + 1;
    uint64_t v181 = (void (*)(void))v61;
    if (v98 >= v97 >> 1) {
      uint64_t v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v97 > 1), v98 + 1, 1, v47);
    }
    *((void *)v47 + 2) = v99;
    unint64_t v100 = v47 + 32;
    unint64_t v101 = &v47[16 * v98 + 32];
    uint64_t v102 = v181;
    *(void *)unint64_t v101 = v51;
    *((void *)v101 + 1) = v102;
    if (v98)
    {
      while (1)
      {
        unint64_t v103 = v99 - 1;
        if (v99 >= 4)
        {
          uint64_t v108 = &v100[16 * v99];
          uint64_t v109 = *((void *)v108 - 8);
          uint64_t v110 = *((void *)v108 - 7);
          BOOL v114 = __OFSUB__(v110, v109);
          uint64_t v111 = v110 - v109;
          if (v114) {
            goto LABEL_137;
          }
          uint64_t v113 = *((void *)v108 - 6);
          uint64_t v112 = *((void *)v108 - 5);
          BOOL v114 = __OFSUB__(v112, v113);
          uint64_t v106 = v112 - v113;
          char v107 = v114;
          if (v114) {
            goto LABEL_138;
          }
          unint64_t v115 = v99 - 2;
          BOOL v116 = &v100[16 * v99 - 32];
          uint64_t v118 = *(void *)v116;
          uint64_t v117 = *((void *)v116 + 1);
          BOOL v114 = __OFSUB__(v117, v118);
          uint64_t v119 = v117 - v118;
          if (v114) {
            goto LABEL_140;
          }
          BOOL v114 = __OFADD__(v106, v119);
          uint64_t v120 = v106 + v119;
          if (v114) {
            goto LABEL_143;
          }
          if (v120 >= v111)
          {
            uint64_t v138 = &v100[16 * v103];
            uint64_t v140 = *(void *)v138;
            uint64_t v139 = *((void *)v138 + 1);
            BOOL v114 = __OFSUB__(v139, v140);
            uint64_t v141 = v139 - v140;
            if (v114) {
              goto LABEL_147;
            }
            BOOL v131 = v106 < v141;
            goto LABEL_103;
          }
        }
        else
        {
          if (v99 != 3)
          {
            uint64_t v132 = *((void *)v47 + 4);
            uint64_t v133 = *((void *)v47 + 5);
            BOOL v114 = __OFSUB__(v133, v132);
            uint64_t v125 = v133 - v132;
            char v126 = v114;
            goto LABEL_97;
          }
          uint64_t v105 = *((void *)v47 + 4);
          uint64_t v104 = *((void *)v47 + 5);
          BOOL v114 = __OFSUB__(v104, v105);
          uint64_t v106 = v104 - v105;
          char v107 = v114;
        }
        if (v107) {
          goto LABEL_139;
        }
        unint64_t v115 = v99 - 2;
        unint64_t v121 = &v100[16 * v99 - 32];
        uint64_t v123 = *(void *)v121;
        uint64_t v122 = *((void *)v121 + 1);
        BOOL v124 = __OFSUB__(v122, v123);
        uint64_t v125 = v122 - v123;
        char v126 = v124;
        if (v124) {
          goto LABEL_142;
        }
        char v127 = &v100[16 * v103];
        uint64_t v129 = *(void *)v127;
        uint64_t v128 = *((void *)v127 + 1);
        BOOL v114 = __OFSUB__(v128, v129);
        uint64_t v130 = v128 - v129;
        if (v114) {
          goto LABEL_145;
        }
        if (__OFADD__(v125, v130)) {
          goto LABEL_146;
        }
        if (v125 + v130 >= v106)
        {
          BOOL v131 = v106 < v130;
LABEL_103:
          if (v131) {
            unint64_t v103 = v115;
          }
          goto LABEL_105;
        }
LABEL_97:
        if (v126) {
          goto LABEL_141;
        }
        uint64_t v134 = &v100[16 * v103];
        uint64_t v136 = *(void *)v134;
        uint64_t v135 = *((void *)v134 + 1);
        BOOL v114 = __OFSUB__(v135, v136);
        uint64_t v137 = v135 - v136;
        if (v114) {
          goto LABEL_144;
        }
        if (v137 < v125) {
          goto LABEL_114;
        }
LABEL_105:
        unint64_t v142 = v103 - 1;
        if (v103 - 1 >= v99)
        {
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
          goto LABEL_157;
        }
        if (!*v186) {
          goto LABEL_159;
        }
        uint64_t v143 = v47;
        uint64_t v144 = &v100[16 * v142];
        uint64_t v145 = *(void *)v144;
        uint64_t v146 = &v100[16 * v103];
        uint64_t v147 = *((void *)v146 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)();
        if (v24) {
          goto LABEL_131;
        }
        if (v147 < v145) {
          goto LABEL_134;
        }
        if (v103 > *((void *)v143 + 2)) {
          goto LABEL_135;
        }
        *(void *)uint64_t v144 = v145;
        *(void *)&v100[16 * v142 + 8] = v147;
        unint64_t v148 = *((void *)v143 + 2);
        if (v103 >= v148) {
          goto LABEL_136;
        }
        uint64_t v47 = v143;
        unint64_t v99 = v148 - 1;
        memmove(&v100[16 * v103], v146 + 16, 16 * (v148 - 1 - v103));
        *((void *)v143 + 2) = v148 - 1;
        if (v148 <= 2) {
          goto LABEL_114;
        }
      }
    }
    unint64_t v99 = 1;
LABEL_114:
    Swift::Int v45 = v186[1];
    uint64_t v50 = v181;
    if ((uint64_t)v181 >= v45) {
      goto LABEL_120;
    }
  }
  if (__OFADD__(v51, v161)) {
    goto LABEL_156;
  }
  Swift::Int v81 = v183;
  if ((uint64_t)&v51[v161] < v183) {
    Swift::Int v81 = (Swift::Int)&v51[v161];
  }
  if (v81 >= (uint64_t)v51)
  {
    if (v61 != v81)
    {
      uint64_t v168 = v51;
      unint64_t v162 = v47;
      uint64_t v163 = v24;
      uint64_t v82 = *(void *)(v173 + 72);
      uint64_t v174 = *(void (**)(void))(v173 + 16);
      uint64_t v83 = v82 * (v61 - 1);
      uint64_t v176 = v82;
      Swift::Int v185 = v61 * v82;
      Swift::Int v166 = v81;
      do
      {
        uint64_t v84 = 0;
        uint64_t v85 = v168;
        uint64_t v181 = (void (*)(void))v61;
        uint64_t v177 = v83;
        while (1)
        {
          Swift::Int v183 = (Swift::Int)v85;
          int v86 = v174;
          OUTLINED_FUNCTION_147_0();
          v86();
          uint64_t v24 = v83 + v84;
          OUTLINED_FUNCTION_147_0();
          v86();
          uint64_t v47 = v62;
          uint64_t v87 = SQLExpression.sql.getter();
          uint64_t v89 = v88;
          if (v87 == SQLExpression.sql.getter() && v89 == v90) {
            break;
          }
          OUTLINED_FUNCTION_26_1();
          char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v93 = *v178;
          OUTLINED_FUNCTION_7_6();
          v93();
          OUTLINED_FUNCTION_7_6();
          v93();
          if ((v92 & 1) == 0) {
            goto LABEL_63;
          }
          uint64_t v83 = v177;
          if (!*v186) {
            goto LABEL_158;
          }
          uint64_t v94 = *v184;
          uint64_t v47 = v180;
          OUTLINED_FUNCTION_28();
          v94();
          swift_arrayInitWithTakeFrontToBack();
          OUTLINED_FUNCTION_28();
          v94();
          v84 -= v176;
          uint64_t v85 = (char *)(v183 + 1);
          uint64_t v95 = v181;
          uint64_t v62 = v47;
          if (v181 == (void (*)(void))(v183 + 1)) {
            goto LABEL_64;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v96 = *v178;
        OUTLINED_FUNCTION_7_6();
        v96();
        OUTLINED_FUNCTION_7_6();
        v96();
LABEL_63:
        uint64_t v95 = v181;
        uint64_t v83 = v177;
LABEL_64:
        Swift::Int v61 = (Swift::Int)v95 + 1;
        v83 += v176;
        v185 += v176;
      }
      while (v61 != v166);
      Swift::Int v61 = v166;
      OUTLINED_FUNCTION_120_1();
      uint64_t v51 = v168;
    }
    goto LABEL_66;
  }
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t (*v31)(void);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  Swift::Int v51;
  char *v52;
  uint64_t v53;
  char *v54;
  unint64_t v55;
  void (*v56)(void);
  void (*v57)(void);
  char *v58;
  uint64_t v59;
  void (*v60)(void);
  void (*v61)(void);
  uint64_t v62;
  uint64_t (*v63)(void);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::Int v69;
  void (*v70)(void);
  uint64_t v71;
  Swift::Int v72;
  Swift::Int v73;
  uint64_t v74;
  void (*v75)(void);
  uint64_t v76;
  uint64_t (*v77)(void);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(void);
  Swift::Int v87;
  void (*v88)(void);
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void (*v92)(void);
  void (*v94)(void);
  Swift::Int v95;
  uint64_t v96;
  uint64_t v97;
  Swift::Int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t (*v107)(void);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v113;
  void (*v114)(void);
  void (*v115)(void);
  void (*v116)(void);
  void (*v117)(void);
  char isUniquelyReferenced_nonNull_native;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char *v122;
  char *v123;
  void (*v124)(void);
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  BOOL v146;
  uint64_t v147;
  char v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  unint64_t v177;
  uint64_t v178;
  Swift::Int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  Swift::Int v183;
  char *v184;
  char *v185;
  void (*v186)(void);
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t (*v195)(uint64_t, uint64_t, uint64_t);
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  void (**v200)(void);
  uint64_t v201;
  uint64_t (*v202)(void);
  void (*v203)(void);
  uint64_t v204;
  Swift::Int v205;
  void (*v206)(void);
  void (**v207)(void);
  uint64_t *v208;

  OUTLINED_FUNCTION_37();
  a19 = v22;
  a20 = v23;
  uint64_t v192 = v24;
  uint64_t v193 = v25;
  uint64_t v191 = v26;
  uint64_t v202 = v27;
  uint64_t v28 = v20;
  uint64_t v30 = v29;
  uint64_t v32 = v31(0);
  OUTLINED_FUNCTION_0_4();
  uint64_t v34 = v33;
  MEMORY[0x1F4188790](v35);
  Swift::Int v185 = (char *)&v178 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v37);
  OUTLINED_FUNCTION_21();
  uint64_t v204 = v38;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v39);
  OUTLINED_FUNCTION_65();
  MEMORY[0x1F4188790](v40);
  OUTLINED_FUNCTION_21();
  uint64_t v180 = v41;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_21();
  uint64_t v188 = v43;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v44);
  OUTLINED_FUNCTION_21();
  uint64_t v187 = v45;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v46);
  OUTLINED_FUNCTION_21();
  uint64_t v182 = v47;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v48);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_70(v49);
  v208 = v30;
  uint64_t v50 = v30[1];
  uint64_t v51 = _minimumMergeRunLength(_:)(v50);
  if (v51 >= v50)
  {
    if (v50 < 0) {
      goto LABEL_157;
    }
    if (v50) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)();
    }
LABEL_135:
    OUTLINED_FUNCTION_31();
    return;
  }
  uint64_t v179 = v51;
  if (v50 < -1) {
    goto LABEL_165;
  }
  Swift::Int v52 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v53 = MEMORY[0x1E4FBC860];
  if (v50 > 1)
  {
    Swift::Int v54 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v53 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    Swift::Int v52 = v54;
    *(void *)(v53 + 16) = v50 / 2;
  }
  uint64_t v55 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v178 = v53;
  uint64_t v190 = v53 + v55;
  if (v50 < 1)
  {
    unint64_t v121 = *((void *)v52 + 2);
LABEL_123:
    if (v121 >= 2)
    {
      unint64_t v171 = *v208;
      do
      {
        uint64_t v172 = v121 - 2;
        if (v121 < 2) {
          goto LABEL_151;
        }
        if (!v171) {
          goto LABEL_164;
        }
        uint64_t v173 = v52;
        uint64_t v174 = *(void *)&v52[16 * v172 + 32];
        uint64_t v175 = *(void *)&v52[16 * v121 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)();
        if (v28) {
          break;
        }
        if (v175 < v174) {
          goto LABEL_152;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v173 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v173);
        }
        if (v172 >= *((void *)v173 + 2)) {
          goto LABEL_153;
        }
        uint64_t v176 = &v173[16 * v172 + 32];
        *(void *)uint64_t v176 = v174;
        *((void *)v176 + 1) = v175;
        uint64_t v177 = *((void *)v173 + 2);
        if (v121 > v177) {
          goto LABEL_154;
        }
        memmove(&v173[16 * v121 + 16], &v173[16 * v121 + 32], 16 * (v177 - v121));
        Swift::Int v52 = v173;
        *((void *)v173 + 2) = v177 - 1;
        unint64_t v121 = v177 - 1;
      }
      while (v177 > 2);
    }
LABEL_134:
    swift_bridgeObjectRelease();
    *(void *)(v178 + 16) = 0;
    swift_bridgeObjectRelease();
    goto LABEL_135;
  }
  uint64_t v56 = 0;
  uint64_t v200 = (void (**)(void))(v34 + 8);
  uint64_t v201 = v34 + 16;
  uint64_t v207 = (void (**)(void))(v34 + 32);
  Swift::Int v52 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v189 = v34;
  uint64_t v194 = v32;
  uint64_t v196 = v21;
  while (1)
  {
    uint64_t v57 = v56;
    uint64_t v58 = (char *)v56 + 1;
    unint64_t v184 = v52;
    uint64_t v186 = v56;
    if ((uint64_t)v56 + 1 >= v50)
    {
      uint64_t v69 = (Swift::Int)v56 + 1;
    }
    else
    {
      uint64_t v205 = v50;
      uint64_t v181 = v28;
      uint64_t v59 = *v208;
      uint64_t v60 = *(void (**)(void))(v34 + 72);
      Swift::Int v61 = *(void (**)(void))(v34 + 16);
      OUTLINED_FUNCTION_98((uint64_t)&a13);
      OUTLINED_FUNCTION_40();
      v61();
      uint64_t v197 = v59;
      uint64_t v206 = v60;
      char v203 = v61;
      OUTLINED_FUNCTION_40();
      uint64_t v62 = ((uint64_t (*)(void))v61)();
      uint64_t v63 = v202;
      uint64_t v64 = ((uint64_t (*)(uint64_t))v202)(v62);
      uint64_t v66 = v65;
      if (v64 == v63() && v66 == v67) {
        LODWORD(v199) = 0;
      }
      else {
        LODWORD(v199) = OUTLINED_FUNCTION_29();
      }
      uint64_t v28 = v181;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      BOOL v70 = *v200;
      OUTLINED_FUNCTION_22_0();
      v70();
      OUTLINED_FUNCTION_22_0();
      v70();
      uint64_t v69 = (Swift::Int)v57 + 2;
      uint64_t v50 = v205;
      uint64_t v34 = v189;
      if ((uint64_t)v57 + 2 < v205)
      {
        uint64_t v198 = (void)v206 * (void)v58;
        int v71 = v197;
        uint64_t v72 = (void)v206 * v69;
        while (1)
        {
          uint64_t v73 = v69;
          Swift::Int v74 = v194;
          uint64_t v75 = v203;
          ((void (*)(uint64_t, uint64_t, uint64_t))v203)(v187, v71 + v72, v194);
          Swift::Int v76 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v75)(v188, v71 + v198, v74);
          unint64_t v77 = v202;
          uint64_t v78 = ((uint64_t (*)(uint64_t))v202)(v76);
          unint64_t v80 = v79;
          uint64_t v82 = v78 == v77() && v80 == v81;
          uint64_t v83 = v82 ? 0 : OUTLINED_FUNCTION_29();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_22_0();
          v70();
          OUTLINED_FUNCTION_22_0();
          v70();
          if ((v199 ^ v83)) {
            break;
          }
          uint64_t v69 = v73 + 1;
          uint64_t v50 = v205;
          v71 += (uint64_t)v206;
          if (v73 + 1 >= v205)
          {
            uint64_t v69 = v205;
            uint64_t v28 = v181;
            uint64_t v34 = v189;
            uint64_t v57 = v186;
            goto LABEL_27;
          }
        }
        uint64_t v28 = v181;
        uint64_t v34 = v189;
        uint64_t v69 = v73;
        uint64_t v57 = v186;
        uint64_t v50 = v205;
      }
LABEL_27:
      uint64_t v32 = v194;
      if (v199)
      {
        if (v69 < (uint64_t)v57) {
          goto LABEL_158;
        }
        if ((uint64_t)v57 < v69)
        {
          uint64_t v84 = 0;
          uint64_t v85 = (void)v206 * (v69 - 1);
          int v86 = v57;
          uint64_t v87 = v69 * (void)v206;
          uint64_t v88 = v86;
          uint64_t v89 = (void)v86 * (void)v206;
          char v203 = (void (*)(void))v69;
          do
          {
            if (v88 != (void (*)(void))(v69 + v84 - 1))
            {
              uint64_t v90 = v197;
              if (!v197) {
                goto LABEL_163;
              }
              uint64_t v91 = v197 + v89;
              uint64_t v198 = v197 + v85;
              uint64_t v199 = (uint64_t)*v207;
              OUTLINED_FUNCTION_28();
              v92();
              if (v89 < v85 || v91 >= v90 + v87)
              {
                swift_arrayInitWithTakeFrontToBack();
              }
              else if (v89 != v85)
              {
                OUTLINED_FUNCTION_71();
                swift_arrayInitWithTakeBackToFront();
              }
              OUTLINED_FUNCTION_28();
              v94();
              uint64_t v69 = (Swift::Int)v203;
            }
            uint64_t v88 = (void (*)(void))((char *)v88 + 1);
            --v84;
            v85 -= (uint64_t)v206;
            v87 -= (uint64_t)v206;
            v89 += (uint64_t)v206;
          }
          while ((uint64_t)v88 < v69 + v84);
          uint64_t v34 = v189;
          uint64_t v32 = v194;
          uint64_t v57 = v186;
          uint64_t v50 = v205;
        }
      }
    }
    if (v69 < v50)
    {
      if (__OFSUB__(v69, v57)) {
        goto LABEL_156;
      }
      if (v69 - (uint64_t)v57 < v179) {
        break;
      }
    }
LABEL_67:
    if (v69 < (uint64_t)v57) {
      goto LABEL_155;
    }
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    char v203 = (void (*)(void))v69;
    if (isUniquelyReferenced_nonNull_native) {
      Swift::Int v52 = v184;
    }
    else {
      Swift::Int v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v184 + 2) + 1, 1, v184);
    }
    uint64_t v120 = *((void *)v52 + 2);
    uint64_t v119 = *((void *)v52 + 3);
    unint64_t v121 = v120 + 1;
    if (v120 >= v119 >> 1) {
      Swift::Int v52 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v119 > 1), v120 + 1, 1, v52);
    }
    *((void *)v52 + 2) = v121;
    uint64_t v122 = v52 + 32;
    uint64_t v123 = &v52[16 * v120 + 32];
    BOOL v124 = v203;
    *(void *)uint64_t v123 = v57;
    *((void *)v123 + 1) = v124;
    if (v120)
    {
      while (1)
      {
        uint64_t v125 = v121 - 1;
        if (v121 >= 4)
        {
          uint64_t v130 = &v122[16 * v121];
          BOOL v131 = *((void *)v130 - 8);
          uint64_t v132 = *((void *)v130 - 7);
          uint64_t v136 = __OFSUB__(v132, v131);
          uint64_t v133 = v132 - v131;
          if (v136) {
            goto LABEL_140;
          }
          uint64_t v135 = *((void *)v130 - 6);
          uint64_t v134 = *((void *)v130 - 5);
          uint64_t v136 = __OFSUB__(v134, v135);
          uint64_t v128 = v134 - v135;
          uint64_t v129 = v136;
          if (v136) {
            goto LABEL_141;
          }
          uint64_t v137 = v121 - 2;
          uint64_t v138 = &v122[16 * v121 - 32];
          uint64_t v140 = *(void *)v138;
          uint64_t v139 = *((void *)v138 + 1);
          uint64_t v136 = __OFSUB__(v139, v140);
          uint64_t v141 = v139 - v140;
          if (v136) {
            goto LABEL_143;
          }
          uint64_t v136 = __OFADD__(v128, v141);
          unint64_t v142 = v128 + v141;
          if (v136) {
            goto LABEL_146;
          }
          if (v142 >= v133)
          {
            uint64_t v160 = &v122[16 * v125];
            unint64_t v162 = *(void *)v160;
            Swift::Int v161 = *((void *)v160 + 1);
            uint64_t v136 = __OFSUB__(v161, v162);
            uint64_t v163 = v161 - v162;
            if (v136) {
              goto LABEL_150;
            }
            unint64_t v153 = v128 < v163;
            goto LABEL_104;
          }
        }
        else
        {
          if (v121 != 3)
          {
            Swift::String v154 = *((void *)v52 + 4);
            uint64_t v155 = *((void *)v52 + 5);
            uint64_t v136 = __OFSUB__(v155, v154);
            uint64_t v147 = v155 - v154;
            unint64_t v148 = v136;
            goto LABEL_98;
          }
          char v127 = *((void *)v52 + 4);
          char v126 = *((void *)v52 + 5);
          uint64_t v136 = __OFSUB__(v126, v127);
          uint64_t v128 = v126 - v127;
          uint64_t v129 = v136;
        }
        if (v129) {
          goto LABEL_142;
        }
        uint64_t v137 = v121 - 2;
        uint64_t v143 = &v122[16 * v121 - 32];
        uint64_t v145 = *(void *)v143;
        uint64_t v144 = *((void *)v143 + 1);
        uint64_t v146 = __OFSUB__(v144, v145);
        uint64_t v147 = v144 - v145;
        unint64_t v148 = v146;
        if (v146) {
          goto LABEL_145;
        }
        uint64_t v149 = &v122[16 * v125];
        char v151 = *(void *)v149;
        int64_t v150 = *((void *)v149 + 1);
        uint64_t v136 = __OFSUB__(v150, v151);
        uint64_t v152 = v150 - v151;
        if (v136) {
          goto LABEL_148;
        }
        if (__OFADD__(v147, v152)) {
          goto LABEL_149;
        }
        if (v147 + v152 >= v128)
        {
          unint64_t v153 = v128 < v152;
LABEL_104:
          if (v153) {
            uint64_t v125 = v137;
          }
          goto LABEL_106;
        }
LABEL_98:
        if (v148) {
          goto LABEL_144;
        }
        uint64_t v156 = &v122[16 * v125];
        unint64_t v158 = *(void *)v156;
        uint64_t v157 = *((void *)v156 + 1);
        uint64_t v136 = __OFSUB__(v157, v158);
        uint64_t v159 = v157 - v158;
        if (v136) {
          goto LABEL_147;
        }
        if (v159 < v147) {
          goto LABEL_115;
        }
LABEL_106:
        uint64_t v164 = v125 - 1;
        if (v125 - 1 >= v121)
        {
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
          goto LABEL_160;
        }
        if (!*v208) {
          goto LABEL_162;
        }
        uint64_t v165 = v52;
        Swift::Int v166 = &v122[16 * v164];
        uint64_t v167 = *(void *)v166;
        uint64_t v168 = &v122[16 * v125];
        uint64_t v169 = *((void *)v168 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)();
        if (v28) {
          goto LABEL_134;
        }
        if (v169 < v167) {
          goto LABEL_137;
        }
        if (v125 > *((void *)v165 + 2)) {
          goto LABEL_138;
        }
        *(void *)Swift::Int v166 = v167;
        *(void *)&v122[16 * v164 + 8] = v169;
        uint64_t v170 = *((void *)v165 + 2);
        if (v125 >= v170) {
          goto LABEL_139;
        }
        unint64_t v121 = v170 - 1;
        memmove(&v122[16 * v125], v168 + 16, 16 * (v170 - 1 - v125));
        Swift::Int v52 = v165;
        *((void *)v165 + 2) = v170 - 1;
        uint64_t v32 = v194;
        if (v170 <= 2) {
          goto LABEL_115;
        }
      }
    }
    unint64_t v121 = 1;
LABEL_115:
    uint64_t v50 = v208[1];
    uint64_t v56 = v203;
    uint64_t v34 = v189;
    if ((uint64_t)v203 >= v50) {
      goto LABEL_123;
    }
  }
  if (__OFADD__(v57, v179)) {
    goto LABEL_159;
  }
  if ((uint64_t)v57 + v179 >= v50) {
    uint64_t v95 = v50;
  }
  else {
    uint64_t v95 = (Swift::Int)v57 + v179;
  }
  if (v95 >= (uint64_t)v57)
  {
    if (v69 != v95)
    {
      uint64_t v181 = v28;
      uint64_t v96 = *(void *)(v34 + 72);
      uint64_t v195 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 16);
      unint64_t v97 = v96 * (v69 - 1);
      uint64_t v197 = v96;
      unint64_t v98 = v69 * v96;
      unint64_t v99 = v180;
      Swift::Int v183 = v95;
      do
      {
        unint64_t v100 = 0;
        char v203 = (void (*)(void))v69;
        uint64_t v198 = v98;
        uint64_t v199 = v97;
        while (1)
        {
          unint64_t v101 = *v208;
          uint64_t v205 = v98 + v100;
          uint64_t v206 = v57;
          uint64_t v102 = v195;
          v195(v99, v98 + v100 + v101, v32);
          unint64_t v103 = v97 + v100 + v101;
          uint64_t v104 = v99;
          uint64_t v105 = v102(v196, v103, v32);
          uint64_t v106 = v32;
          char v107 = v202;
          uint64_t v108 = ((uint64_t (*)(uint64_t))v202)(v105);
          uint64_t v110 = v109;
          if (v108 == v107() && v110 == v111) {
            break;
          }
          uint64_t v113 = OUTLINED_FUNCTION_29();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          BOOL v114 = *v200;
          OUTLINED_FUNCTION_22_0();
          v114();
          OUTLINED_FUNCTION_22_0();
          v114();
          uint64_t v32 = v106;
          unint64_t v99 = v104;
          if ((v113 & 1) == 0) {
            goto LABEL_64;
          }
          unint64_t v98 = v198;
          unint64_t v97 = v199;
          if (!*v208) {
            goto LABEL_161;
          }
          unint64_t v115 = *v207;
          OUTLINED_FUNCTION_28();
          v115();
          OUTLINED_FUNCTION_96();
          swift_arrayInitWithTakeFrontToBack();
          OUTLINED_FUNCTION_28();
          v115();
          v100 -= v197;
          uint64_t v57 = (void (*)(void))((char *)v206 + 1);
          BOOL v116 = v203;
          if (v203 == (void (*)(void))((char *)v206 + 1)) {
            goto LABEL_65;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v117 = *v200;
        OUTLINED_FUNCTION_22_0();
        v117();
        OUTLINED_FUNCTION_22_0();
        v117();
        uint64_t v32 = v106;
        unint64_t v99 = v104;
LABEL_64:
        BOOL v116 = v203;
        unint64_t v98 = v198;
        unint64_t v97 = v199;
LABEL_65:
        uint64_t v69 = (Swift::Int)v116 + 1;
        v97 += v197;
        v98 += v197;
        uint64_t v57 = v186;
      }
      while (v69 != v183);
      uint64_t v69 = v183;
      uint64_t v28 = v181;
    }
    goto LABEL_67;
  }
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t OUTLINED_FUNCTION_103@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a2 - 256);
  return outlined init with copy of Date?(a1, v4, v2);
}

uint64_t OUTLINED_FUNCTION_103_0()
{
  return v0;
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v43 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v33 = v6;
  uint64_t v38 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v7);
  uint64_t v41 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v31 - v11;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_111_1();
  uint64_t v39 = v3;
  uint64_t v32 = v5;
  if (v3 != v5)
  {
    uint64_t v34 = *(void (**)(char *, uint64_t, ValueMetadata *))(v13 + 16);
    uint64_t v35 = v13 + 16;
    uint64_t v14 = *(void *)(v13 + 72);
    uint64_t v36 = (void (**)(void))(v13 + 8);
    uint64_t v37 = v14;
    uint64_t v40 = (void (**)(void))(v13 + 32);
    uint64_t v45 = v14 * (v39 - 1);
    uint64_t v44 = v14 * v39;
    while (2)
    {
      uint64_t v15 = 0;
      uint64_t v16 = v33;
      uint64_t v17 = v38;
      while (1)
      {
        uint64_t v18 = *v43;
        uint64_t v42 = v44 + v15;
        uint64_t v19 = v34;
        v34(v0, v44 + v15 + v18, v17);
        v19(v12, v45 + v15 + v18, v17);
        uint64_t v20 = SQLExpression.sql.getter();
        uint64_t v21 = v0;
        uint64_t v22 = v12;
        uint64_t v24 = v23;
        if (v20 == SQLExpression.sql.getter() && v24 == v25) {
          break;
        }
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v28 = *v36;
        OUTLINED_FUNCTION_18_4();
        v28();
        OUTLINED_FUNCTION_18_4();
        v28();
        uint64_t v12 = v22;
        uint64_t v0 = v21;
        if (v27)
        {
          if (!*v43)
          {
            __break(1u);
            return;
          }
          uint64_t v29 = *v40;
          uint64_t v17 = v38;
          OUTLINED_FUNCTION_28();
          v29();
          swift_arrayInitWithTakeFrontToBack();
          OUTLINED_FUNCTION_28();
          v29();
          v15 -= v37;
          ++v16;
          uint64_t v0 = v21;
          if (v39 != v16) {
            continue;
          }
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v30 = *v36;
      OUTLINED_FUNCTION_95();
      v30();
      OUTLINED_FUNCTION_95();
      v30();
      uint64_t v12 = v22;
      uint64_t v0 = v21;
LABEL_13:
      v45 += v37;
      v44 += v37;
      if (++v39 != v32) {
        continue;
      }
      break;
    }
  }
  OUTLINED_FUNCTION_31();
}

{
  uint64_t (*v0)(void);
  uint64_t (*v1)(void);
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t (*)(void), uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char v28;
  void (*v29)(void);
  uint64_t v30;
  void (*v31)(void);
  void (*v32)(void);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t (*)(void), uint64_t, uint64_t);
  uint64_t v37;
  void (**v38)(void);
  uint64_t (*v39)(void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (**v43)(void);
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;

  OUTLINED_FUNCTION_37();
  uint64_t v39 = v1;
  Swift::Int v46 = v2;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v35 = v7;
  uint64_t v9 = v8(0);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_16();
  uint64_t v44 = v11;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_48();
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v33 - v15;
  uint64_t v42 = v4;
  uint64_t v34 = v6;
  if (v4 != v6)
  {
    uint64_t v36 = *(uint64_t (**)(uint64_t (*)(void), uint64_t, uint64_t))(v14 + 16);
    uint64_t v37 = v14 + 16;
    uint64_t v17 = *(void *)(v14 + 72);
    uint64_t v38 = (void (**)(void))(v14 + 8);
    uint64_t v43 = (void (**)(void))(v14 + 32);
    uint64_t v18 = v17 * (v42 - 1);
    uint64_t v40 = v17;
    uint64_t v48 = v17 * v42;
    while (2)
    {
      uint64_t v19 = 0;
      uint64_t v47 = v35;
      uint64_t v41 = v18;
      while (1)
      {
        uint64_t v20 = *v46;
        uint64_t v45 = v48 + v19;
        uint64_t v21 = v36;
        v36((uint64_t (*)(void))v16, v48 + v19 + v20, v9);
        uint64_t v22 = v21(v0, v18 + v19 + v20, v9);
        uint64_t v18 = v9;
        uint64_t v9 = (uint64_t)v0;
        uint64_t v0 = v39;
        uint64_t v23 = ((uint64_t (*)(uint64_t))v39)(v22);
        uint64_t v24 = v16;
        uint64_t v16 = v25;
        if (v23 == v0() && v16 == v26) {
          break;
        }
        uint64_t v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v16 = (char *)v38;
        uint64_t v29 = *v38;
        uint64_t v30 = OUTLINED_FUNCTION_80();
        ((void (*)(uint64_t))v29)(v30);
        ((void (*)(char *, uint64_t))v29)(v24, v18);
        OUTLINED_FUNCTION_77();
        if (v28)
        {
          if (!*v46)
          {
            __break(1u);
            return;
          }
          uint64_t v31 = *v43;
          OUTLINED_FUNCTION_28();
          v31();
          swift_arrayInitWithTakeFrontToBack();
          OUTLINED_FUNCTION_28();
          v31();
          v19 -= v40;
          if (v42 != ++v47) {
            continue;
          }
        }
        goto LABEL_13;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v32 = *v38;
      OUTLINED_FUNCTION_80();
      OUTLINED_FUNCTION_22_0();
      v32();
      OUTLINED_FUNCTION_22_0();
      v32();
      OUTLINED_FUNCTION_77();
LABEL_13:
      v18 += v40;
      v48 += v40;
      if (++v42 != v34) {
        continue;
      }
      break;
    }
  }
  OUTLINED_FUNCTION_31();
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t OUTLINED_FUNCTION_111()
{
  return StorableValue.init(_:dataType:)(v2 - 112, v1, v0);
}

void OUTLINED_FUNCTION_111_0(int a1@<W8>)
{
  *(_DWORD *)(v2 - 380) = a1;
  *(void *)(v2 - 392) = v1 + 104;
}

unint64_t static Schema.JSONEach(with:)@<X0>(char *a1@<X0>, void *a2@<X8>)
{
  char v3 = *a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, SQLDataType)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18EB382D0;
  *(void *)(inited + 32) = 0x65756C6176;
  *(void *)(inited + 40) = 0xE500000000000000;
  *(unsigned char *)(inited + 48) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SQLDataType>);
  long long v5 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v6 = *(void *)(inited + 32);
  uint64_t v7 = *(void *)(inited + 40);
  char v8 = *(unsigned char *)(inited + 48);
  swift_retain();
  swift_bridgeObjectRetain();
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
  if (v10)
  {
    __break(1u);
  }
  else
  {
    v5[(result >> 6) + 8] |= 1 << result;
    uint64_t v11 = (uint64_t *)(v5[6] + 16 * result);
    *uint64_t v11 = v6;
    v11[1] = v7;
    *(unsigned char *)(v5[7] + result) = v8;
    uint64_t v12 = v5[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (!v13)
    {
      v5[2] = v14;
      swift_release();
      unint64_t result = swift_bridgeObjectRelease();
      *a2 = 0x6361655F6E6F736ALL;
      a2[1] = 0xE900000000000068;
      a2[2] = v5;
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t SelectCore.from.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of FromClause(v1, a1);
}

uint64_t destroy for FromClause(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 32))
  {
    __swift_destroy_boxed_opaque_existential_1Tm(a1 + 8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

ValueMetadata *type metadata accessor for FromClause()
{
  return &type metadata for FromClause;
}

uint64_t FromClause.schemas.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_107_1()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_138_0()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1, v0);
}

uint64_t getEnumTagSinglePayload for AggregationFunction.AggregationType.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SQLDataType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

double __BMEventTimestampSQLColumn_block_invoke(uint64_t a1, void *a2)
{
  [a2 timestamp];
  return v2 + 978307200.0;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> COUNT_STAR.applyMetadata(metadata:)(Swift::OpaquePointer metadata)
{
  OUTLINED_FUNCTION_69_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v6 = OUTLINED_FUNCTION_35(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_31_1();
  if (v7)
  {
    if (one-time initialization token for countKey != -1)
    {
      swift_once();
      if (!*(void *)(v2 + 16)) {
        goto LABEL_12;
      }
    }
    OUTLINED_FUNCTION_89_0();
    OUTLINED_FUNCTION_189();
    OUTLINED_FUNCTION_174();
    if ((v4 & 1) == 0) {
      goto LABEL_12;
    }
    OUTLINED_FUNCTION_89_0();
    OUTLINED_FUNCTION_74_0();
    swift_bridgeObjectRelease();
    uint64_t v8 = type metadata accessor for StorableValue(0);
    OUTLINED_FUNCTION_10_1(v3, 1, v8);
    if (v9)
    {
      outlined destroy of UUID?(v3, &demangling cache variable for type metadata for StorableValue?);
LABEL_12:
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v13 = OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_17_2(v13, v14);
      swift_bridgeObjectRetain();
      swift_willThrow();
      goto LABEL_13;
    }
    if (swift_getEnumCaseMultiPayload())
    {
      _s12BiomeStreams13StorableValueOWOhTm_1(v3, (void (*)(void))type metadata accessor for StorableValue);
      goto LABEL_12;
    }
    if (*(unsigned char *)(v3 + 8) == 1) {
      goto LABEL_12;
    }
    uint64_t v11 = *(void *)v3;
    uint64_t v10 = type metadata accessor for COUNT_STAR(0);
  }
  else
  {
    uint64_t v10 = type metadata accessor for COUNT_STAR(0);
    uint64_t v11 = 0;
  }
  *(void *)(v1 + *(int *)(v10 + 24)) = v11;
LABEL_13:
  OUTLINED_FUNCTION_132();
}

uint64_t protocol witness for Aggregation.aggregationMetadata() in conformance COUNT_STAR()
{
  return COUNT_STAR.aggregationMetadata()();
}

uint64_t COUNT_STAR.aggregationMetadata()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  OUTLINED_FUNCTION_12_2();
  Swift::Int v0 = (__n128 *)OUTLINED_FUNCTION_26_2();
  OUTLINED_FUNCTION_203(v0, (__n128)xmmword_18EB382D0);
  if (one-time initialization token for countKey != -1) {
    swift_once();
  }
  uint64_t v1 = OUTLINED_FUNCTION_42_0(&static COUNT_STAR.countKey);
  uint64_t v2 = type metadata accessor for COUNT_STAR(v1);
  OUTLINED_FUNCTION_115(*(int *)(v2 + 24));
  OUTLINED_FUNCTION_188();
  swift_bridgeObjectRetain();

  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t type metadata accessor for COUNT_STAR(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, type metadata singleton initialization cache for COUNT_STAR);
}

uint64_t *OUTLINED_FUNCTION_42@<X0>(uint64_t a1@<X8>)
{
  char v4 = *(uint64_t **)(v2 - 104);
  v4[3] = v1;
  v4[4] = a1;
  return __swift_allocate_boxed_opaque_existential_0Tm(v4);
}

void OUTLINED_FUNCTION_9()
{
  JUMPOUT(0x192FB1900);
}

uint64_t OUTLINED_FUNCTION_42_0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (void *)(v1 + v2);
  uint64_t v4 = a1[1];
  *uint64_t v3 = *a1;
  v3[1] = v4;
  return 0;
}

uint64_t OUTLINED_FUNCTION_42_1@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 368) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
}

void OUTLINED_FUNCTION_42_2()
{
  *(void *)(v0 + 8 * (v1 >> 6) + 64) |= 1 << v1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> BookmarkCache.flush()()
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = type metadata accessor for BookmarkCache(0);
  uint64_t v2 = *(void *)(v0 + *(int *)(v1 + 20));
  if (v2 && *(unsigned char *)(v0 + *(int *)(v1 + 24)) == 1)
  {
    uint64_t v3 = self;
    id v28 = 0;
    swift_unknownObjectRetain();
    id v4 = objc_msgSend(v3, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v2, 1, &v28);
    id v5 = v28;
    if (v4)
    {
      uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v27 = v7;

      uint64_t v8 = MaterializedView.name.getter();
      static BookmarkCache.tableName(materializedViewName:)();
      uint64_t v9 = v8;
      uint64_t v11 = v10;
      swift_bridgeObjectRelease();
      id v28 = 0;
      unint64_t v29 = 0xE000000000000000;
      _StringGuts.grow(_:)(56);
      v12._uint64_t countAndFlagsBits = 0x204543414C504552;
      v12._uint64_t object = (void *)0xED0000204F544E49;
      String.append(_:)(v12);
      v13._uint64_t countAndFlagsBits = v9;
      v13._uint64_t object = v11;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_35_1();
      v14._uint64_t countAndFlagsBits = 0xD000000000000029;
      String.append(_:)(v14);
      uint64_t v15 = (uint64_t)v28;
      uint64_t v16 = (void *)v29;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>);
      type metadata accessor for StorableValue(0);
      OUTLINED_FUNCTION_11_1();
      uint64_t v18 = *(void *)(v17 + 72);
      unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
      uint64_t v21 = swift_allocObject();
      *(_OWORD *)(v21 + 16) = xmmword_18EB382C0;
      unint64_t v22 = v21 + v20;
      *(void *)unint64_t v22 = 1;
      *(unsigned char *)(v22 + 8) = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v23 = (uint64_t *)(v22 + v18);
      *uint64_t v23 = v6;
      v23[1] = v27;
      swift_storeEnumTagMultiPayload();
      outlined copy of Data._Representation(v6, v27);
      v24._uint64_t countAndFlagsBits = v15;
      v24._uint64_t object = v16;
      SQLExpressionEvaluator.execute(sql:bindingValues:)(v24, (Swift::OpaquePointer)v21);
      if (!v25) {
        swift_bridgeObjectRelease();
      }
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
      swift_bridgeObjectRelease();
      outlined consume of Data._Representation(v6, v27);
    }
    else
    {
      unint64_t v26 = v5;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    swift_unknownObjectRelease();
  }
}

uint64_t DBViewWriter.init(database:tableName:schema:createTableSQL:)@<X0>(sqlite3 *a1@<X0>, sqlite3 *a2@<X1>, void *a3@<X2>, ValueMetadata *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, sqlite3 **a7@<X8>)
{
  uint64_t v235 = a6;
  uint64_t v259 = a5;
  uint64_t v266 = a4;
  id v236 = a3;
  v232 = a2;
  int v228 = a7;
  char v264 = type metadata accessor for SQLRawDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v231 = v8;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_10();
  uint64_t v263 = v10;
  uint64_t v230 = type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v241 = v11;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_10();
  unint64_t v254 = (unint64_t)v13;
  uint64_t v257 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v245 = v14;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_16();
  uint64_t v256 = v16;
  MEMORY[0x1F4188790](v17);
  v255 = (uint64_t *)((char *)v221 - v18);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v261 = v20;
  uint64_t v262 = v19;
  uint64_t v22 = *(void *)(v21 + 64);
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_4_7();
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_14_4();
  OUTLINED_FUNCTION_4_7();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_14_4();
  uint64_t v258 = v25;
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_14_4();
  OUTLINED_FUNCTION_4_7();
  MEMORY[0x1F4188790](v27);
  OUTLINED_FUNCTION_14_4();
  OUTLINED_FUNCTION_4_7();
  uint64_t v29 = MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)v221 - v30;
  uint64_t v32 = MEMORY[0x1F4188790](v29);
  uint64_t v34 = (char *)v221 - v33;
  uint64_t v35 = MEMORY[0x1F4188790](v32);
  uint64_t v37 = (uint64_t *)((char *)v221 - v36);
  uint64_t v38 = MEMORY[0x1F4188790](v35);
  uint64_t v40 = (char *)v221 - v39;
  MEMORY[0x1F4188790](v38);
  uint64_t v42 = (char *)v221 - v41;
  type metadata accessor for SQLExpressionEvaluator();
  swift_allocObject();
  uint64_t v43 = v265;
  uint64_t v44 = SQLExpressionEvaluator.init(db:)(a1);
  if (v43)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v46 = v44;
  uint64_t v250 = v42;
  uint64_t v247 = v40;
  uint64_t v248 = v37;
  unint64_t v249 = (unint64_t)v34;
  v246 = v31;
  uint64_t v260 = v22;
  v224 = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v47 = swift_bridgeObjectRetain();
  size_t v48 = specialized _copyCollectionToContiguousArray<A>(_:)(v47);
  swift_bridgeObjectRelease();
  v270[0] = v48;
  specialized MutableCollection<>.sort(by:)(v270);
  uint64_t v222 = 0;
  uint64_t v225 = v46;
  swift_bridgeObjectRelease();
  uint64_t v49 = v270[0];
  uint64_t v50 = *(void *)(v270[0] + 16);
  Swift::Int v52 = v256;
  uint64_t v51 = v257;
  uint64_t v53 = v241;
  uint64_t v54 = v245;
  uint64_t v227 = v270[0];
  if (v50)
  {
    v270[0] = MEMORY[0x1E4FBC860];
    swift_retain_n();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v55 = v54;
    uint64_t v56 = v49 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
    uint64_t v240 = *(void *)(v55 + 72);
    int v244 = (unint64_t *)(v53 + 2);
    uint64_t v243 = (void (**)(unint64_t, ValueMetadata *))(v53 + 11);
    int v242 = 0;
    int v237 = 1;
    int v233 = 2;
    int v229 = 3;
    int v223 = 4;
    v221[5] = 5;
    v221[4] = 6;
    v221[3] = 7;
    LODWORD(v245) = 0;
    v239 = (void (**)(uint64_t))(v231 + 104);
    int v226 = 3;
    int v234 = 2;
    uint64_t v241 = v53 + 1;
    int v238 = 1;
    uint64_t v57 = v230;
    uint64_t v58 = v255;
    uint64_t v59 = v250;
    do
    {
      outlined init with copy of (key: String, value: SQLDataType)(v56, (uint64_t)v58, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
      uint64_t v265 = *(int *)(v262 + 48);
      uint64_t v60 = *(int *)(v51 + 48);
      Swift::Int v61 = (ValueMetadata *)((char *)v52 + v60);
      uint64_t v62 = v52;
      uint64_t v63 = (Swift::String *)((char *)v58 + v60);
      uint64_t v65 = *v58;
      uint64_t v64 = v58[1];
      uint64_t *v62 = *v58;
      v62[1] = v64;
      unint64_t v66 = *v244;
      uint64_t v266 = v61;
      OUTLINED_FUNCTION_16_3();
      ((void (*)(void))v66)();
      *uint64_t v59 = v65;
      v59[1] = v64;
      unint64_t v67 = v254;
      OUTLINED_FUNCTION_16_3();
      ((void (*)(void))v66)();
      (*v243)(v67, v57);
      OUTLINED_FUNCTION_2_10();
      if (!v143)
      {
        OUTLINED_FUNCTION_2_10();
        if (!v143)
        {
          OUTLINED_FUNCTION_2_10();
          if (!v143)
          {
            OUTLINED_FUNCTION_2_10();
            if (!v143)
            {
              OUTLINED_FUNCTION_2_10();
              if (!v143)
              {
                OUTLINED_FUNCTION_2_10();
                if (!v143)
                {
                  OUTLINED_FUNCTION_2_10();
                  if (!v143)
                  {
                    OUTLINED_FUNCTION_2_10();
                    if (!v143) {
                      goto LABEL_84;
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v59 = v250;
      (*v239)((uint64_t)v250 + v265);
      uint64_t v68 = *v241;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_7_6();
      v68();
      uint64_t v58 = v255;
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v255, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v69 = *(void *)(v270[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v69);
      uint64_t v70 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v69, (uint64_t)v59);
      destructiveProjectEnumData for StorableValue(v70, v71);
      v56 += v240;
      --v50;
      Swift::Int v52 = v256;
      uint64_t v51 = v257;
    }
    while (v50);
    swift_release();
    uint64_t v72 = v270[0];
  }
  else
  {
    swift_retain();
    uint64_t v72 = MEMORY[0x1E4FBC860];
  }
  unint64_t v66 = *(void *)(v72 + 16);
  uint64_t v57 = (ValueMetadata *)MEMORY[0x1E4FBC860];
  uint64_t v63 = (Swift::String *)v263;
  uint64_t v265 = v72;
  uint64_t v266 = (ValueMetadata *)v66;
  uint64_t v73 = v231;
  if (!v66) {
    goto LABEL_26;
  }
  v269[0] = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  LODWORD(v257) = static StorableValue.DataValueCodingKeys.== infix(_:_:)();
  uint64_t v57 = 0;
  unint64_t v66 = v73 + 16;
  Swift::Int v74 = (void (**)(char *, ValueMetadata *))(v73 + 8);
  do
  {
    if (v257)
    {
      unint64_t v75 = OUTLINED_FUNCTION_3_12();
      uint64_t v76 = (uint64_t)v247;
      outlined init with copy of (key: String, value: SQLDataType)(v75, (uint64_t)v247, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      uint64_t v63 = (Swift::String *)v249;
      unint64_t v77 = v248;
    }
    else
    {
      specialized _ArrayBuffer._getElementSlowPath(_:)((unint64_t)v57, v265);
      OUTLINED_FUNCTION_6_9();
      uint64_t v63 = (Swift::String *)v249;
      unint64_t v77 = v248;
      uint64_t v76 = (uint64_t)v247;
      if (!v143)
      {
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
LABEL_84:
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        swift_allocError();
        uint64_t v218 = v217;
        v217[3] = (uint64_t)v57;
        boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v217);
        ((void (*)(uint64_t *, Swift::String *, ValueMetadata *))v66)(boxed_opaque_existential_0, v63, v57);
        *((_OWORD *)v218 + 2) = 0u;
        *((_OWORD *)v218 + 3) = 0u;
        *((unsigned char *)v218 + 64) = 3;
        swift_bridgeObjectRetain();
        swift_willThrow();
        v220 = *v241;
        OUTLINED_FUNCTION_7_6();
        v220();
        OUTLINED_FUNCTION_7_6();
        v220();
        swift_bridgeObjectRelease();
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v255, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        swift_release();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_10_3();
        swift_release_n();
        swift_release();
        swift_bridgeObjectRelease();
        int v205 = 0;
        goto LABEL_77;
      }
      v270[0] = v78;
      outlined init with copy of (key: String, value: SQLDataType)((uint64_t)v270, (uint64_t)v247, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      swift_unknownObjectRelease();
    }
    outlined init with take of (key: String, value: StorableValue)(v76, (uint64_t)v77, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
    static String._createEmpty(withInitialCapacity:)(7);
    swift_bridgeObjectRelease();
    v270[0] = 34;
    v270[1] = 0xE100000000000000;
    uint64_t v79 = *v77;
    unint64_t v80 = (void *)v77[1];
    uint64_t v81 = (uint64_t)v77;
    v82._uint64_t countAndFlagsBits = *v77;
    v82._uint64_t object = v80;
    String.append(_:)(v82);
    uint64_t v57 = (ValueMetadata *)((char *)v57 + 1);
    v83._uint64_t countAndFlagsBits = 8226;
    v83._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v83);
    uint64_t v84 = *(int *)(v262 + 48);
    uint64_t v85 = (char *)v63 + v84;
    v63->_uint64_t countAndFlagsBits = v79;
    v63->_uint64_t object = v80;
    int v86 = (char *)v63 + v84;
    uint64_t v87 = v264;
    (*(void (**)(char *, uint64_t, ValueMetadata *))v66)(v86, v81 + v84, v264);
    uint64_t v88 = SQLRawDataType.rawValue.getter();
    uint64_t v90 = v89;
    (*v74)(v85, v87);
    v91._uint64_t countAndFlagsBits = v88;
    v91._uint64_t object = v90;
    String.append(_:)(v91);
    swift_bridgeObjectRelease();
    uint64_t v92 = String.init(stringInterpolation:)();
    uint64_t v94 = v93;
    outlined destroy of (key: String, value: StorableValue)(v81, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    uint64_t v95 = *(void *)(v269[0] + 16);
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v95);
    uint64_t v96 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v95, v92, v94);
    destructiveProjectEnumData for StorableValue(v96, v97);
    uint64_t v63 = (Swift::String *)v263;
  }
  while (v266 != v57);
  uint64_t v57 = (ValueMetadata *)v269[0];
  unint64_t v66 = (unint64_t)v266;
LABEL_26:
  v270[0] = (uint64_t)v57;
  uint64_t v98 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  unint64_t v99 = lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v248 = (uint64_t *)v98;
  uint64_t v247 = (char *)v99;
  uint64_t v257 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v101 = v100;
  swift_bridgeObjectRelease();
  uint64_t v103 = v258;
  uint64_t v102 = v259;
  uint64_t v104 = v261;
  uint64_t v105 = v264;
  if (v235)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_12_4();
    uint64_t v106 = v236;
  }
  else
  {
    static String._createEmpty(withInitialCapacity:)(43);
    swift_bridgeObjectRelease();
    v270[0] = 0xD00000000000001BLL;
    v270[1] = 0x800000018EBE9A10;
    uint64_t v106 = v236;
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_12_4();
    v107._uint64_t countAndFlagsBits = (uint64_t)v57;
    v107._uint64_t object = v106;
    String.append(_:)(v107);
    swift_bridgeObjectRelease();
    v108._uint64_t countAndFlagsBits = 2107424;
    v108._uint64_t object = (void *)0xE300000000000000;
    String.append(_:)(v108);
    v109._uint64_t countAndFlagsBits = v257;
    v109._uint64_t object = v101;
    String.append(_:)(v109);
    swift_bridgeObjectRelease();
    v110._uint64_t countAndFlagsBits = 0x4349525453202920;
    v110._uint64_t object = (void *)0xE900000000000054;
    String.append(_:)(v110);
    uint64_t v102 = String.init(stringInterpolation:)();
    uint64_t v235 = v111;
  }
  uint64_t v259 = v102;
  v270[0] = 0;
  v270[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  strcpy((char *)v270, "INSERT INTO ");
  BYTE5(v270[1]) = 0;
  HIWORD(v270[1]) = -5120;
  v112._uint64_t countAndFlagsBits = (uint64_t)v57;
  v112._uint64_t object = v106;
  String.append(_:)(v112);
  v113._uint64_t countAndFlagsBits = 10272;
  v113._uint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v113);
  if (v66)
  {
    uint64_t v267 = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v66);
    char v114 = static StorableValue.DataValueCodingKeys.== infix(_:_:)();
    unint64_t v66 = 0;
    uint64_t v57 = (ValueMetadata *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType);
    do
    {
      if (v114)
      {
        OUTLINED_FUNCTION_11_4(v265+ ((*(unsigned __int8 *)(v104 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80))+ *(void *)(v104 + 72) * v66);
        uint64_t v63 = (Swift::String *)v253;
      }
      else
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v66, v265);
        OUTLINED_FUNCTION_6_9();
        uint64_t v63 = (Swift::String *)v253;
        if (!v143) {
          goto LABEL_81;
        }
        v269[0] = v115;
        OUTLINED_FUNCTION_11_4((uint64_t)v269);
        swift_unknownObjectRelease();
      }
      outlined init with take of (key: String, value: StorableValue)((uint64_t)&v267, (uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      static String._createEmpty(withInitialCapacity:)(4);
      swift_bridgeObjectRelease();
      v269[0] = 34;
      v269[1] = 0xE100000000000000;
      String.append(_:)(*v63);
      ++v66;
      v116._uint64_t countAndFlagsBits = 34;
      v116._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v116);
      uint64_t v117 = String.init(stringInterpolation:)();
      uint64_t v119 = v118;
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v120 = *(void *)(v267 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v120);
      uint64_t v121 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v120, v117, v119);
      destructiveProjectEnumData for StorableValue(v121, v122);
      uint64_t v104 = v261;
      uint64_t v63 = (Swift::String *)v263;
    }
    while (v266 != (ValueMetadata *)v66);
    OUTLINED_FUNCTION_12_4();
    uint64_t v105 = v264;
    uint64_t v103 = v258;
  }
  else
  {
    specialized static Array._allocateUninitialized(_:)(0);
  }
  OUTLINED_FUNCTION_1_14();
  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_9_5();
  swift_bridgeObjectRelease();
  v123._uint64_t countAndFlagsBits = 0x5345554C41562029;
  v123._uint64_t object = (void *)0xEA00000000002820;
  String.append(_:)(v123);
  uint64_t v125 = v265;
  uint64_t v124 = (uint64_t)v266;
  if (v266)
  {
    v269[0] = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v124);
    char v126 = static StorableValue.DataValueCodingKeys.== infix(_:_:)();
    unint64_t v127 = 0;
    while (1)
    {
      if ((v126 & 1) == 0)
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v127, v125);
        swift_unknownObjectRelease();
        OUTLINED_FUNCTION_6_9();
        if (!v143) {
          goto LABEL_82;
        }
      }
      ++v127;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      unint64_t v66 = *(void *)(v269[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v66);
      uint64_t v128 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v66, 63, 0xE100000000000000);
      destructiveProjectEnumData for StorableValue(v128, v129);
      if (v266 == (ValueMetadata *)v127) {
        goto LABEL_47;
      }
    }
  }
  specialized static Array._allocateUninitialized(_:)(0);
LABEL_47:
  OUTLINED_FUNCTION_1_14();
  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_9_5();
  swift_bridgeObjectRelease();
  v130._uint64_t countAndFlagsBits = 41;
  v130._uint64_t object = (void *)0xE100000000000000;
  String.append(_:)(v130);
  uint64_t v245 = String.init(stringInterpolation:)();
  v246 = v131;
  swift_bridgeObjectRetain();
  v270[0] = static String._createEmpty(withInitialCapacity:)(70);
  v270[1] = v132;
  v133._uint64_t countAndFlagsBits = 0x46204554454C4544;
  v133._uint64_t object = (void *)0xEC000000204D4F52;
  String.append(_:)(v133);
  v134._uint64_t countAndFlagsBits = (uint64_t)v57;
  uint64_t v135 = v236;
  v134._uint64_t object = v236;
  String.append(_:)(v134);
  v136._uint64_t countAndFlagsBits = 0xD000000000000022;
  v136._uint64_t object = (void *)0x800000018EBE9A30;
  String.append(_:)(v136);
  v137._uint64_t countAndFlagsBits = (uint64_t)v57;
  v137._uint64_t object = v135;
  String.append(_:)(v137);
  v138._uint64_t countAndFlagsBits = 0x2820455245485720;
  v138._uint64_t object = (void *)0xE800000000000000;
  String.append(_:)(v138);
  uint64_t v139 = (uint64_t)v266;
  if (v266)
  {
    uint64_t v271 = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v139);
    LODWORD(v257) = static StorableValue.DataValueCodingKeys.== infix(_:_:)();
    unint64_t v66 = 0;
    LODWORD(v256) = 1;
    v255 = (uint64_t *)(v231 + 104);
    uint64_t v57 = (ValueMetadata *)(v231 + 8);
    unint64_t v254 = (unint64_t)"SELECT rowid FROM ";
    unint64_t v249 = 0x800000018EBE9A60;
    uint64_t v253 = 0xD000000000000016;
    uint64_t v250 = (void *)0x800000018EBE9AA0;
    while (1)
    {
      if (v257)
      {
        uint64_t v140 = v252;
        outlined init with copy of (key: String, value: SQLDataType)(v125+ ((*(unsigned __int8 *)(v261 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v261 + 80))+ *(void *)(v261 + 72) * v66, v252, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      }
      else
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v66, v125);
        OUTLINED_FUNCTION_6_9();
        if (!v143) {
          goto LABEL_83;
        }
        v269[0] = v141;
        uint64_t v142 = v252;
        outlined init with copy of (key: String, value: SQLDataType)((uint64_t)v269, v252, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
        uint64_t v140 = v142;
        uint64_t v125 = v265;
        swift_unknownObjectRelease();
      }
      outlined init with take of (key: String, value: StorableValue)(v140, v103, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      ((void (*)(Swift::String *, void, ValueMetadata *))*v255)(v63, v256, v105);
      lazy protocol witness table accessor for type SQLDataType and conformance SQLDataType((unint64_t *)&lazy protocol witness table cache variable for type SQLRawDataType and conformance SQLRawDataType, (void (*)(uint64_t))type metadata accessor for SQLRawDataType);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      BOOL v143 = v269[0] == v267 && v269[1] == v268;
      if (v143) {
        break;
      }
      char v144 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v145 = OUTLINED_FUNCTION_18_3();
      v146(v145);
      if (v144) {
        goto LABEL_61;
      }
      static String._createEmpty(withInitialCapacity:)(42);
      swift_bridgeObjectRelease();
      v269[0] = 8744;
      v269[1] = 0xE200000000000000;
      uint64_t v103 = v258;
      OUTLINED_FUNCTION_17_4();
      v147._uint64_t countAndFlagsBits = 0x524F203F203D2022;
      v147._uint64_t object = (void *)0xEB00000000222820;
      String.append(_:)(v147);
      OUTLINED_FUNCTION_17_4();
      unint64_t v148 = 0xD000000000000019;
      unint64_t v149 = v249;
LABEL_62:
      String.append(_:)(*(Swift::String *)&v148);
      uint64_t v155 = String.init(stringInterpolation:)();
      uint64_t v157 = v156;
      ++v66;
      outlined destroy of (key: String, value: StorableValue)(v103, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v158 = *(void *)(v271 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v158);
      uint64_t v159 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v158, v155, v157);
      destructiveProjectEnumData for StorableValue(v159, v160);
      uint64_t v63 = (Swift::String *)v263;
      uint64_t v105 = v264;
      if (v266 == (ValueMetadata *)v66)
      {
        uint64_t v161 = v271;
        OUTLINED_FUNCTION_12_4();
        goto LABEL_65;
      }
    }
    swift_bridgeObjectRelease_n();
    uint64_t v150 = OUTLINED_FUNCTION_18_3();
    v151(v150);
LABEL_61:
    v269[0] = static String._createEmpty(withInitialCapacity:)(57);
    v269[1] = v152;
    v153._uint64_t countAndFlagsBits = 0x222873626128;
    v153._uint64_t object = (void *)0xE600000000000000;
    String.append(_:)(v153);
    uint64_t v103 = v258;
    OUTLINED_FUNCTION_17_4();
    v154._uint64_t countAndFlagsBits = v253;
    v154._uint64_t object = v250;
    String.append(_:)(v154);
    OUTLINED_FUNCTION_17_4();
    unint64_t v149 = v254 | 0x8000000000000000;
    unint64_t v148 = 0xD000000000000019;
    goto LABEL_62;
  }
  uint64_t v161 = specialized static Array._allocateUninitialized(_:)(0);
LABEL_65:
  v269[0] = v161;
  BidirectionalCollection<>.joined(separator:)();
  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_9_5();
  swift_bridgeObjectRelease();
  v162._uint64_t object = (void *)0xEA00000000002931;
  v162._uint64_t countAndFlagsBits = 0x2054494D494C2029;
  String.append(_:)(v162);
  uint64_t v263 = String.init(stringInterpolation:)();
  uint64_t v164 = v163;
  uint64_t v165 = v236;
  uint64_t v166 = MEMORY[0x192FB0010](v57, v236, 0x7865646E695FLL, 0xE600000000000000);
  uint64_t v167 = (uint64_t)v57;
  uint64_t v169 = v168;
  char v264 = v164;
  swift_bridgeObjectRetain();
  static String._createEmpty(withInitialCapacity:)(46);
  swift_bridgeObjectRelease();
  v270[0] = 0xD00000000000001FLL;
  v270[1] = 0x800000018EBE9A80;
  v170._uint64_t countAndFlagsBits = v166;
  v170._uint64_t object = v169;
  String.append(_:)(v170);
  swift_bridgeObjectRelease();
  v171._uint64_t countAndFlagsBits = 542002976;
  v171._uint64_t object = (void *)0xE400000000000000;
  String.append(_:)(v171);
  v172._uint64_t countAndFlagsBits = v167;
  v172._uint64_t object = v165;
  String.append(_:)(v172);
  v173._uint64_t countAndFlagsBits = 2107424;
  v173._uint64_t object = (void *)0xE300000000000000;
  String.append(_:)(v173);
  uint64_t v174 = (uint64_t)v266;
  if (v266)
  {
    uint64_t v267 = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v174);
    char v175 = static StorableValue.DataValueCodingKeys.== infix(_:_:)();
    unint64_t v176 = 0;
    do
    {
      if (v175)
      {
        unint64_t v177 = OUTLINED_FUNCTION_3_12();
        OUTLINED_FUNCTION_19_3(v177);
        uint64_t v178 = v251;
      }
      else
      {
        specialized _ArrayBuffer._getElementSlowPath(_:)(v176, v265);
        OUTLINED_FUNCTION_6_9();
        uint64_t v178 = v251;
        if (!v143)
        {
          __break(1u);
          uint64_t result = swift_release();
          __break(1u);
          return result;
        }
        v269[0] = v179;
        OUTLINED_FUNCTION_19_3((uint64_t)v269);
        swift_unknownObjectRelease();
      }
      outlined init with take of (key: String, value: StorableValue)((uint64_t)v63, (uint64_t)v178, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      static String._createEmpty(withInitialCapacity:)(4);
      swift_bridgeObjectRelease();
      v269[0] = 34;
      v269[1] = 0xE100000000000000;
      String.append(_:)(*v178);
      ++v176;
      v180._uint64_t countAndFlagsBits = 34;
      v180._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v180);
      uint64_t v63 = (Swift::String *)String.init(stringInterpolation:)();
      uint64_t v182 = v181;
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v178, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v183 = *(void *)(v267 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v183);
      uint64_t v184 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v183, (uint64_t)v63, v182);
      destructiveProjectEnumData for StorableValue(v184, v185);
      uint64_t v186 = v259;
    }
    while (v266 != (ValueMetadata *)v176);
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized static Array._allocateUninitialized(_:)(0);
    swift_bridgeObjectRelease();
    uint64_t v186 = v259;
  }
  uint64_t v187 = OUTLINED_FUNCTION_1_14();
  uint64_t v189 = v188;
  swift_bridgeObjectRelease();
  v190._uint64_t countAndFlagsBits = v187;
  v190._uint64_t object = v189;
  String.append(_:)(v190);
  swift_bridgeObjectRelease();
  v191._uint64_t countAndFlagsBits = 10528;
  v191._uint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v191);
  uint64_t v192 = String.init(stringInterpolation:)();
  uint64_t v194 = v193;
  uint64_t v195 = v235;
  uint64_t v196 = (const char *)(String.utf8CString.getter() + 32);
  swift_bridgeObjectRetain();
  uint64_t v197 = v224;
  uint64_t v198 = sqlite3_exec(v224, v196, 0, 0, 0);
  swift_release();
  if (!v198)
  {
    swift_bridgeObjectRelease();
    v210 = (sqlite3 *)v225;
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v211 = v264;
    swift_bridgeObjectRelease();
    uint64_t v212 = (sqlite3 *)v246;
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_10_3();
    swift_bridgeObjectRelease();
    uint64_t v213 = (sqlite3 *)v236;
    swift_bridgeObjectRelease();
    uint64_t result = swift_release_n();
    char v214 = v228;
    *int v228 = v197;
    v214[1] = v210;
    v214[2] = v232;
    v214[3] = v213;
    uint64_t v215 = v245;
    v214[4] = (sqlite3 *)v186;
    v214[5] = (sqlite3 *)v215;
    uint64_t v216 = v263;
    v214[6] = v212;
    v214[7] = (sqlite3 *)v216;
    v214[8] = (sqlite3 *)v211;
    v214[9] = (sqlite3 *)v192;
    v214[10] = v194;
    return result;
  }
  id v199 = BMSQLDatabaseError(v198, v197, 0);
  swift_getErrorValue();
  uint64_t v200 = Error.localizedDescription.getter();
  uint64_t v201 = v186;
  uint64_t v203 = v202;

  v270[0] = v200;
  v270[1] = v203;
  strcpy((char *)v269, "BMSQLDatabase");
  HIWORD(v269[1]) = -4864;
  uint64_t v267 = 0x62617461444C5153;
  unint64_t v268 = 0xEB00000000657361;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v204 = v195;
  int v205 = 1;
  uint64_t v206 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  uint64_t v208 = v207;
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
  swift_allocError();
  *(void *)uint64_t v209 = v201;
  *(void *)(v209 + 8) = v204;
  *(void *)(v209 + 16) = v206;
  *(void *)(v209 + 24) = v208;
  *(unsigned char *)(v209 + 32) = 1;
  swift_bridgeObjectRetain();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_3();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_77:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (v205)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined destroy of (key: String, value: StorableValue)(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_4_3();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with copy of (key: String, value: SQLDataType)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_4_3();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t result, uint64_t (*a2)(BOOL))
{
  unint64_t v3 = *(void *)(*(void *)v2 + 24);
  if (result + 1 > (uint64_t)(v3 >> 1)) {
    return a2(v3 > 1);
  }
  return result;
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(uint64_t (*a1)(void, uint64_t, uint64_t))
{
  uint64_t v2 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v2;
  if ((result & 1) == 0)
  {
    uint64_t v4 = *(void *)(v2 + 16) + 1;
    return a1(0, v4, 1);
  }
  return result;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = result + 1;
  uint64_t v5 = v4 + 16 * result;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  return result;
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(a1, (uint64_t (*)(BOOL))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()((uint64_t (*)(void, uint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  int64_t v3;
  uint64_t vars8;

  uint64_t v1 = *v0;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if ((result & 1) == 0)
  {
    unint64_t v3 = *(void *)(v1 + 16) + 1;
    return (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 1);
  }
  return result;
}

uint64_t static String._createEmpty(withInitialCapacity:)(Swift::Int a1)
{
  if (a1 < 16) {
    return 0;
  }
  _StringGuts.grow(_:)(a1);
  return 0;
}

uint64_t OUTLINED_FUNCTION_9_0()
{
  return String.lowercased()()._countAndFlagsBits;
}

void OUTLINED_FUNCTION_9_1()
{
  *uint64_t v0 = 0x8000000000000000;
}

uint64_t OUTLINED_FUNCTION_9_4@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 248) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Date.ISO8601FormatStyle();
}

void OUTLINED_FUNCTION_9_5()
{
  uint64_t v3 = v0;
  uint64_t v4 = v1;
  String.append(_:)(*(Swift::String *)&v3);
}

unint64_t OUTLINED_FUNCTION_9_7()
{
  *(void *)(v2 - 104) = v0;
  *(void *)(v2 - 96) = v1;
  return lazy protocol witness table accessor for type String and conformance String();
}

uint64_t OUTLINED_FUNCTION_9_8()
{
  return errcode();
}

uint64_t specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2, void (*a3)(void), unint64_t *a4, void (*a5)(uint64_t))
{
  a3(0);
  lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError(a4, a5);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v12 == v10 && v13 == v11) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SQLRawDataType(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x52454745544E49;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1279346002;
      goto LABEL_3;
    case 2:
      *a1 = 1415071060;
      a1[1] = 0xE400000000000000;
      break;
    case 3:
      *a1 = 1112493122;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 1280070990;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

ValueMetadata *type metadata accessor for SQLRawDataType()
{
  return &type metadata for SQLRawDataType;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance SQLDataType(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE700000000000000;
  uint64_t v3 = 0x72656765746E69;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x656C62756F64;
      goto LABEL_3;
    case 2:
      *a1 = 0x676E69727473;
      a1[1] = 0xE600000000000000;
      break;
    case 3:
      *a1 = 1702125924;
      a1[1] = 0xE400000000000000;
      break;
    case 4:
      *a1 = 1635017060;
      a1[1] = 0xE400000000000000;
      break;
    case 5:
      *a1 = 1852797802;
      a1[1] = 0xE400000000000000;
      break;
    case 6:
      *a1 = 1684632949;
      a1[1] = 0xE400000000000000;
      break;
    case 7:
      *a1 = 1819047278;
      a1[1] = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_19_1()
{
  uint64_t v4 = *(void **)(v2 - 96);
  *uint64_t v4 = v0;
  v4[1] = v1;
  return type metadata accessor for StorableValue(0);
}

uint64_t OUTLINED_FUNCTION_19_2()
{
  return __swift_getEnumTagSinglePayload(v0, 1, *(void *)(v1 - 280));
}

uint64_t OUTLINED_FUNCTION_19_3(uint64_t a1)
{
  uint64_t v4 = *(void *)(v2 - 304);
  return outlined init with copy of (key: String, value: SQLDataType)(a1, v4, v1);
}

uint64_t static StorableValue.DataValueCodingKeys.== infix(_:_:)()
{
  return 1;
}

uint64_t specialized ContiguousArray.init()()
{
  return MEMORY[0x1E4FBC860];
}

void specialized ContiguousArray.reserveCapacity(_:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!isUniquelyReferenced_nonNull_native || a1 > *(void *)(v3 + 24) >> 1)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
}

uint64_t partial apply for closure #2 in recordAsSQL #1 (schema:changeRecord:) in DBViewWriter.sendDatabaseUpdate(changeRecords:)(uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4)
{
  return closure #2 in recordAsSQL #1 (schema:changeRecord:) in DBViewWriter.sendDatabaseUpdate(changeRecords:)(a1, a2, a3, a4, *(unsigned __int8 *)(v4 + 16), *(void *)(v4 + 24), *(void *)(v4 + 32));
}

uint64_t closure #2 in recordAsSQL #1 (schema:changeRecord:) in DBViewWriter.sendDatabaseUpdate(changeRecords:)(uint64_t a1, uint64_t a2, uint64_t a3, ValueMetadata *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v59 = a7;
  uint64_t v60 = a4;
  uint64_t v55 = a1;
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  uint64_t v58 = *(char **)(v62 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v62);
  Swift::Int v61 = (uint64_t *)((char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v53 - v12;
  uint64_t v14 = type metadata accessor for SQLDataType();
  Swift::Int Description = (char *)v14[-1].Description;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for StorableValue(0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a6 + 16) && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3), (v21 & 1) != 0))
  {
    uint64_t v62 = a2;
    specialized Dictionary.subscript.getter((uint64_t)v19, v20, *(unsigned int *)(a6 + 36), 0, a6);
    swift_bridgeObjectRelease();
    StorableValue.dataType.getter((uint64_t)v16);
    lazy protocol witness table accessor for type SQLDataType and conformance SQLDataType((unint64_t *)&lazy protocol witness table cache variable for type SQLDataType and conformance SQLDataType, (void (*)(uint64_t))type metadata accessor for SQLDataType);
    uint64_t v22 = v60;
    char v23 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v24 = (void (**)(uint64_t *, ValueMetadata *, ValueMetadata *))Description;
    (*((void (**)(char *, ValueMetadata *))Description + 1))(v16, v14);
    if (v23)
    {
      outlined init with take of StorableValue((uint64_t)v19, v55);
      swift_bridgeObjectRetain();
      return v62;
    }
    else
    {
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      swift_allocError();
      uint64_t v47 = v46;
      size_t v48 = v22;
      uint64_t v49 = v14;
      uint64_t v50 = v46 + 4;
      v46[3] = v17;
      boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v46);
      outlined init with copy of StorableValue((uint64_t)v19, (uint64_t)boxed_opaque_existential_0);
      v47[7] = (uint64_t)v49;
      Swift::Int v52 = __swift_allocate_boxed_opaque_existential_0(v50);
      v24[2](v52, v48, v49);
      *((unsigned char *)v47 + 64) = 3;
      swift_willThrow();
      return outlined destroy of StorableValue((uint64_t)v19);
    }
  }
  else
  {
    uint64_t v56 = a6;
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v26 = swift_allocError();
    uint64_t v28 = v27;
    uint64_t v29 = v59;
    uint64_t v30 = *(void *)(v59 + 16);
    uint64_t v31 = MEMORY[0x1E4FBC860];
    if (v30)
    {
      uint64_t v54 = v27;
      uint64_t v55 = v26;
      uint64_t v60 = v14;
      uint64_t v63 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v32 = v29 + ((v58[80] + 32) & ~(unint64_t)v58[80]);
      uint64_t v33 = *((void *)v58 + 9);
      uint64_t v58 = Description + 16;
      uint64_t v59 = v33;
      uint64_t v34 = (void (**)(char *, ValueMetadata *))(Description + 8);
      do
      {
        outlined init with copy of (key: String, value: SQLDataType)(v32, (uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        uint64_t v35 = v61;
        uint64_t v36 = *(int *)(v62 + 48);
        uint64_t v37 = (char *)v61 + v36;
        uint64_t v38 = *(void *)v13;
        uint64_t v39 = *((void *)v13 + 1);
        *Swift::Int v61 = *(void *)v13;
        v35[1] = v39;
        uint64_t v40 = v60;
        (*(void (**)(char *, char *, ValueMetadata *))v58)(v37, &v13[v36], v60);
        uint64_t v41 = *v34;
        swift_bridgeObjectRetain();
        v41(v37, v40);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v13, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        uint64_t v31 = v63;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v31 = v63;
        }
        unint64_t v42 = *(void *)(v31 + 16);
        if (v42 >= *(void *)(v31 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v31 = v63;
        }
        *(void *)(v31 + 16) = v42 + 1;
        uint64_t v43 = v31 + 16 * v42;
        *(void *)(v43 + 32) = v38;
        *(void *)(v43 + 40) = v39;
        v32 += v59;
        --v30;
      }
      while (v30);
      uint64_t v28 = v54;
    }
    uint64_t v44 = swift_bridgeObjectRetain();
    uint64_t v45 = specialized _copyCollectionToContiguousArray<A>(_:)(v44);
    swift_bridgeObjectRelease();
    *(void *)uint64_t v28 = v31;
    *(void *)(v28 + 8) = v45;
    *(unsigned char *)(v28 + 64) = 7;
    return swift_willThrow();
  }
}

uint64_t lazy protocol witness table accessor for type SQLDataType and conformance SQLDataType(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x72656765746E69;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x72656765746E69;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x656C62756F64;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x676E69727473;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1702125924;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1635017060;
      break;
    case 5:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1852797802;
      break;
    case 6:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1684632949;
      break;
    case 7:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1819047278;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x656C62756F64) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x676E69727473) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1702125924) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1635017060) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1852797802) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1684632949;
      goto LABEL_21;
    case 7:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1819047278) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v2) {
        goto LABEL_25;
      }
LABEL_22:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  uint64_t v2 = 0x52454745544E49;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x52454745544E49;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1279346002;
      break;
    case 2:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1415071060;
      break;
    case 3:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1112493122;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1280070990;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1279346002) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1415071060) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE400000000000000;
      uint64_t v2 = 1112493122;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1280070990) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (a4) {
    goto LABEL_10;
  }
  if (a2 < 0 || 1 << *(unsigned char *)(a5 + 32) <= a2)
  {
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_7_1();
    if (v10)
    {
      if (*(_DWORD *)(v9 + 36) == v8)
      {
        uint64_t v11 = OUTLINED_FUNCTION_4_4();
        uint64_t v12 = type metadata accessor for StorableValue(v11);
        outlined init with copy of StorableValue(v6 + *(void *)(*(void *)(v12 - 8) + 72) * a2, v5);
        swift_bridgeObjectRetain();
        return;
      }
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_9:
  __break(1u);
LABEL_10:
  __break(1u);
}

uint64_t OUTLINED_FUNCTION_7_0()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_7_2()
{
  _StringGuts.grow(_:)(34);
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  uint64_t result = v1;
  *(void *)(v2 - 128) = v0;
  return result;
}

uint64_t OUTLINED_FUNCTION_7_5@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 272) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
}

void *OUTLINED_FUNCTION_7_7@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

void OUTLINED_FUNCTION_7_8()
{
  *(void *)(v0 - 104) = 0;
  *(void *)(v0 - 96) = 0xE000000000000000;
}

uint64_t OUTLINED_FUNCTION_7_9()
{
  return errcode();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SQLDataType(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t OUTLINED_FUNCTION_12()
{
  return v1 + *(int *)(v0 + 40);
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_12_1()
{
  return swift_bridgeObjectRetain();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  *(void *)(*v2 + 16) = a1 + 1;
  uint64_t v6 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType))
                 - 8);
  return outlined init with take of (key: String, value: StorableValue)(a2, v5+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * a1, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
}

uint64_t SQLRawDataType.rawValue.getter()
{
  uint64_t result = 0x52454745544E49;
  switch(*v0)
  {
    case 1:
      uint64_t result = 1279346002;
      break;
    case 2:
      uint64_t result = 1415071060;
      break;
    case 3:
      uint64_t result = 1112493122;
      break;
    case 4:
      uint64_t result = 1280070990;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

void QueryPlannerMetadata.init(materializedView:database:cacheSize:)()
{
  OUTLINED_FUNCTION_37();
  Swift::String v110 = v1;
  uint64_t v107 = v2;
  Swift::String v113 = v3;
  uint64_t v5 = v4;
  uint64_t v120 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_44_2();
  uint64_t v108 = v6;
  uint64_t MatchingRecordCache = type metadata accessor for KeyedFirstMatchingRecordCache(0);
  uint64_t v8 = OUTLINED_FUNCTION_35(MatchingRecordCache);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_10();
  uint64_t v103 = v9;
  uint64_t v10 = type metadata accessor for KeyedAggregationMetadataCache(0);
  uint64_t v11 = OUTLINED_FUNCTION_35(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_65_3(v12, v94);
  uint64_t v13 = type metadata accessor for MaterializedView();
  OUTLINED_FUNCTION_0_4();
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v102 = (uint64_t)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v18);
  uint64_t v105 = (uint64_t)&v94 - v19;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v94 - v21;
  uint64_t v23 = type metadata accessor for BookmarkCache(0);
  OUTLINED_FUNCTION_4_3();
  uint64_t v25 = MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_45();
  uint64_t v104 = v28;
  uint64_t v111 = v0;
  uint64_t v29 = *(void (**)(void))(v15 + 16);
  uint64_t v109 = v0 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_materializedView;
  OUTLINED_FUNCTION_128_0();
  v29();
  uint64_t v114 = v5;
  uint64_t v115 = v22;
  OUTLINED_FUNCTION_128_0();
  v29();
  uint64_t v112 = *(int *)(v23 + 20);
  *(void *)&v27[v112] = 0;
  type metadata accessor for SQLExpressionEvaluator();
  swift_allocObject();
  uint64_t v30 = v110;
  uint64_t v31 = SQLExpressionEvaluator.init(db:)(v113);
  if (v30)
  {
    uint64_t v32 = *(void (**)(void))(v15 + 8);
    ((void (*)(char *, ValueMetadata *))v32)(v115, v13);
    uint64_t v33 = v114;
LABEL_8:
    swift_unknownObjectRelease();
    ((void (*)(uint64_t, ValueMetadata *))v32)(v33, v13);
    ((void (*)(uint64_t, ValueMetadata *))v32)(v109, v13);
    swift_deallocPartialClassInstance();
LABEL_9:
    OUTLINED_FUNCTION_31();
    return;
  }
  uint64_t v98 = v23;
  unint64_t v99 = v29;
  uint64_t v100 = v15 + 16;
  uint64_t v34 = v15;
  Swift::String v110 = v27;
  uint64_t v35 = v31;
  uint64_t v36 = MaterializedView.name.getter();
  static BookmarkCache.tableName(materializedViewName:)();
  uint64_t v101 = v36;
  uint64_t v38 = v37;
  swift_bridgeObjectRelease();
  uint64_t v39 = MaterializedView.name.getter();
  uint64_t v40 = static BookmarkCache.createBookmarkTableSQL(materializedViewName:)(v39);
  unint64_t v42 = v41;
  swift_bridgeObjectRelease();
  v43._uint64_t countAndFlagsBits = v40;
  v43._uint64_t object = v42;
  SQLExpressionEvaluator.execute(sql:bindingValues:)(v43, MEMORY[0x1E4FBC860]);
  if (v44)
  {
    uint64_t v32 = *(void (**)(void))(v34 + 8);
    OUTLINED_FUNCTION_13_5();
    v32();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t v33 = v114;
    goto LABEL_8;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v117._uint64_t countAndFlagsBits = 0;
  v117._uint64_t object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v117._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v117._uint64_t object = (void *)0x800000018EBEA7F0;
  v45._uint64_t countAndFlagsBits = v101;
  v45._uint64_t object = v38;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  unint64_t v46 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v117, MEMORY[0x1E4FBC860]);
  if (v47)
  {
    uint64_t v32 = *(void (**)(void))(v34 + 8);
    OUTLINED_FUNCTION_13_5();
    v32();
    swift_release();
    goto LABEL_7;
  }
  uint64_t v48 = v46;
  swift_bridgeObjectRelease();
  uint64_t v49 = v111;
  if (!v48)
  {
    uint64_t v101 = v35;
    uint64_t v68 = 0;
    uint64_t v70 = v114;
    uint64_t v69 = (uint64_t)v110;
    goto LABEL_20;
  }
  if (*(void *)(v48 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_82_2();
    lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
    OUTLINED_FUNCTION_17_6();
    OUTLINED_FUNCTION_53_3();
    swift_willThrow();
    swift_release();
    uint64_t v32 = *(void (**)(void))(v34 + 8);
    goto LABEL_25;
  }
  uint64_t v101 = v35;
  uint64_t v50 = specialized Dictionary.startIndex.getter(v48);
  uint64_t v52 = v51;
  int v54 = v53;
  uint64_t v55 = specialized Dictionary.endIndex.getter(v48);
  if ((v54 | v57))
  {
    __break(1u);
  }
  else
  {
    if (v52 != v56) {
      __break(1u);
    }
    if (v50 != v55)
    {
      specialized Dictionary.subscript.getter((uint64_t)v118, v50, v52, 0);
      uint64_t v58 = v118[0];
      unint64_t v59 = v118[1];
      int v60 = v119;
      swift_bridgeObjectRetain();
      outlined copy of DatabaseValue(v58, v59, v60);
      swift_bridgeObjectRelease();
      outlined consume of DatabaseValue(v58, v59, v60);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v60 == 3)
      {
        uint64_t v95 = self;
        id v61 = objc_msgSend(self, sel_bm_allowedClassesForSecureCodingBMBookmark);
        static Set._unconditionallyBridgeFromObjectiveC(_:)();

        Class isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        uint64_t v96 = v58;
        unint64_t v97 = v59;
        Class v63 = Data._bridgeToObjectiveC()().super.isa;
        v117._uint64_t countAndFlagsBits = 0;
        id v64 = objc_msgSend(v95, sel_unarchivedObjectOfClasses_fromData_error_, isa, v63, &v117);

        if (v64)
        {
          uint64_t v65 = v96;
          unint64_t v66 = v97;
          id v67 = (id)v117._countAndFlagsBits;
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for BMBookmark);
          if ((swift_dynamicCast() & 1) == 0)
          {
            OUTLINED_FUNCTION_82_2();
            lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
            OUTLINED_FUNCTION_17_6();
            OUTLINED_FUNCTION_53_3();
            swift_willThrow();
            swift_release();
            outlined consume of DatabaseValue(v65, v66, 3);
            uint64_t v32 = *(void (**)(void))(v34 + 8);
            OUTLINED_FUNCTION_13_5();
            v32();
            uint64_t v33 = v114;
            goto LABEL_8;
          }
          outlined consume of DatabaseValue(v65, v66, 3);
          uint64_t v68 = v116;
          uint64_t v69 = (uint64_t)v110;
          swift_unknownObjectRelease();
          uint64_t v70 = v114;
LABEL_20:
          *(void *)(v69 + v112) = v68;
          OUTLINED_FUNCTION_28();
          v71();
          uint64_t v72 = v98;
          *(unsigned char *)(v69 + *(int *)(v98 + 24)) = 0;
          uint64_t v73 = v113;
          *(void *)(v69 + *(int *)(v72 + 28)) = v113;
          *(void *)(v69 + *(int *)(v72 + 32)) = v101;
          uint64_t v74 = v104;
          _s12BiomeStreams13StorableValueOWObTm_1(v69, v104, (void (*)(void))type metadata accessor for BookmarkCache);
          _s12BiomeStreams13StorableValueOWObTm_1(v74, v49 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_bookmark, (void (*)(void))type metadata accessor for BookmarkCache);
          uint64_t v75 = v105;
          uint64_t v76 = v99;
          ((void (*)(uint64_t, uint64_t, ValueMetadata *))v99)(v105, v70, v13);
          uint64_t v77 = v106;
          uint64_t v78 = v75;
          uint64_t v79 = v107;
          KeyedAggregationMetadataCache.init(materializedView:database:cacheSize:)(v78, (uint64_t)v73, v107, v80, v81, v82, v83, v84, v94, v95, v96, v97, v98, (uint64_t)v99, v100, v101, v102, v103, v104,
            v105);
          _s12BiomeStreams13StorableValueOWObTm_1(v77, v49 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedAggregationMetadata, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
          uint64_t v85 = v102;
          OUTLINED_FUNCTION_18();
          v76();
          uint64_t v86 = v103;
          KeyedFirstMatchingRecordCache.init(materializedView:database:cacheSize:)(v85, (uint64_t)v73, v79, v87, v88, v89, v90, v91, v94, (uint64_t)v95, v96, v97, v98, (uint64_t)v99, v100, v101, v102, v103, v104,
            v105);
          OUTLINED_FUNCTION_13_5();
          v92();
          _s12BiomeStreams13StorableValueOWObTm_1(v86, v49 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedFirstMatchingRecord, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
          goto LABEL_9;
        }
        id v93 = (id)v117._countAndFlagsBits;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        swift_release();
        outlined consume of DatabaseValue(v96, v97, 3);
      }
      else
      {
        outlined consume of DatabaseValue(v58, v59, v60);
        OUTLINED_FUNCTION_82_2();
        lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
        OUTLINED_FUNCTION_17_6();
        OUTLINED_FUNCTION_53_3();
        swift_willThrow();
        swift_release();
      }
      uint64_t v32 = *(void (**)(void))(v34 + 8);
LABEL_25:
      OUTLINED_FUNCTION_13_5();
      v32();
      uint64_t v33 = v114;
      goto LABEL_8;
    }
  }
  swift_bridgeObjectRelease();
  __break(1u);
}

uint64_t type metadata accessor for SQLExpressionEvaluator()
{
  return self;
}

uint64_t SQLExpressionEvaluator.init(db:)(sqlite3 *a1)
{
  uint64_t v2 = v1;
  v13[1] = *(sqlite3_stmt **)MEMORY[0x1E4F143B8];
  *(void *)(v2 + 24) = a1;
  *(unsigned char *)(v2 + 16) = 0;
  *(void *)(v2 + 32) = Dictionary.init(dictionaryLiteral:)();
  v13[0] = 0;
  uint64_t v6 = OUTLINED_FUNCTION_23_1(a1, "SELECT NOT ((?) IS NULL OR CAST((?) as NUMERIC) == 0 OR CAST((?) as NUMERIC) == 0.0)", v4, v5, v13);
  if (v6 || !v13[0])
  {
    id v7 = OUTLINED_FUNCTION_32_1(v6);
    swift_getErrorValue();
    Error.localizedDescription.getter();

    OUTLINED_FUNCTION_2_6();
    OUTLINED_FUNCTION_28_1();
    uint64_t v8 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v10 = v9;
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
    OUTLINED_FUNCTION_39();
    *(void *)uint64_t v11 = 0xD000000000000054;
    *(void *)(v11 + 8) = 0x800000018EBE9940;
    *(void *)(v11 + 16) = v8;
    *(void *)(v11 + 24) = v10;
    *(unsigned char *)(v11 + 32) = 2;
    swift_willThrow();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_34_1();
  }
  else
  {
    *(sqlite3_stmt **)(v2 + 40) = v13[0];
  }
  return v2;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> static BookmarkCache.tableName(materializedViewName:)()
{
  swift_bridgeObjectRetain();
  v0._uint64_t countAndFlagsBits = 0x72616D6B6F6F625FLL;
  v0._uint64_t object = (void *)0xE90000000000006BLL;
  String.append(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_128()
{
  return swift_bridgeObjectRetain();
}

uint64_t static BookmarkCache.createBookmarkTableSQL(materializedViewName:)(uint64_t a1)
{
  _StringGuts.grow(_:)(97);
  OUTLINED_FUNCTION_35_1();
  v2._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v2);
  v3._uint64_t countAndFlagsBits = a1;
  static BookmarkCache.tableName(materializedViewName:)();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_35_1();
  String.append(_:)(v4);
  return 0;
}

size_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(key: String, value: SQLDataType)>);
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  OUTLINED_FUNCTION_3_7(v3);
  uint64_t v5 = *(void *)(v4 + 72);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v8);
  if (v5)
  {
    BOOL v10 = result - v7 == 0x8000000000000000 && v5 == -1;
    if (!v10)
    {
      v8[2] = v1;
      v8[3] = 2 * ((uint64_t)(result - v7) / v5);
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
      OUTLINED_FUNCTION_13(v11);
      OUTLINED_FUNCTION_22();
      specialized Sequence._copySequenceContents(initializing:)(v13, (uint64_t)v8 + v12, v1, a1);
      OUTLINED_FUNCTION_122_1();
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_130_0();
      if (v10) {
        return (size_t)v8;
      }
      __break(1u);
      return MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t OUTLINED_FUNCTION_130()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_130_0()
{
  return outlined consume of [String : [String]].Iterator._Variant();
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)&v32 - v13;
  uint64_t v41 = a4;
  uint64_t v15 = *(void *)(a4 + 64);
  uint64_t v37 = a4 + 64;
  uint64_t v16 = -1 << *(unsigned char *)(a4 + 32);
  if (-v16 < 64) {
    uint64_t v17 = ~(-1 << -(char)v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  if (!a2)
  {
    int64_t v19 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v31 = v37;
    *a1 = v41;
    a1[1] = v31;
    a1[2] = ~v16;
    a1[3] = v19;
    a1[4] = v18;
    return a3;
  }
  if (!a3)
  {
    int64_t v19 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v34 = v16;
  uint64_t v35 = a1;
  int64_t v19 = 0;
  uint64_t v20 = 0;
  int64_t v36 = (unint64_t)(63 - v16) >> 6;
  int64_t v33 = v36 - 1;
  uint64_t v38 = a3;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v21 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  unint64_t v22 = v21 | (v19 << 6);
  while (1)
  {
    ++v20;
    uint64_t v26 = *(void *)(v41 + 56);
    uint64_t v27 = (uint64_t *)(*(void *)(v41 + 48) + 16 * v22);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    uint64_t v30 = type metadata accessor for SQLDataType();
    (*((void (**)(char *, unint64_t, ValueMetadata *))v30[-1].Description + 2))(&v11[*(int *)(v40 + 48)], v26 + *((void *)v30[-1].Description + 9) * v22, v30);
    *(void *)uint64_t v11 = v28;
    *((void *)v11 + 1) = v29;
    _s10Foundation4UUIDVSgWObTm_0((uint64_t)v11, (uint64_t)v14, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
    _s10Foundation4UUIDVSgWObTm_0((uint64_t)v14, a2, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
    a3 = v38;
    if (v20 == v38)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    a2 += *(void *)(v39 + 72);
    uint64_t result = swift_bridgeObjectRetain();
    if (v18) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v23 >= v36) {
      goto LABEL_33;
    }
    unint64_t v24 = *(void *)(v37 + 8 * v23);
    if (!v24)
    {
      v19 += 2;
      if (v23 + 1 >= v36)
      {
        unint64_t v18 = 0;
        int64_t v19 = v23;
      }
      else
      {
        unint64_t v24 = *(void *)(v37 + 8 * v19);
        if (v24) {
          goto LABEL_14;
        }
        int64_t v25 = v23 + 2;
        if (v23 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (v24)
        {
LABEL_17:
          int64_t v23 = v25;
          goto LABEL_18;
        }
        int64_t v19 = v23 + 3;
        if (v23 + 3 < v36)
        {
          unint64_t v24 = *(void *)(v37 + 8 * v19);
          if (v24)
          {
LABEL_14:
            int64_t v23 = v19;
            goto LABEL_18;
          }
          int64_t v25 = v23 + 4;
          if (v23 + 4 >= v36)
          {
LABEL_33:
            unint64_t v18 = 0;
            goto LABEL_37;
          }
          unint64_t v24 = *(void *)(v37 + 8 * v25);
          if (!v24)
          {
            while (1)
            {
              int64_t v23 = v25 + 1;
              if (__OFADD__(v25, 1)) {
                goto LABEL_42;
              }
              if (v23 >= v36)
              {
                unint64_t v18 = 0;
                int64_t v19 = v33;
                goto LABEL_37;
              }
              unint64_t v24 = *(void *)(v37 + 8 * v23);
              ++v25;
              if (v24) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v18 = 0;
        int64_t v19 = v23 + 2;
      }
LABEL_37:
      a3 = v20;
LABEL_38:
      uint64_t v16 = v34;
      a1 = v35;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v18 = (v24 - 1) & v24;
    unint64_t v22 = __clz(__rbit64(v24)) + (v23 << 6);
    int64_t v19 = v23;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Dictionary.endIndex.getter(uint64_t a1)
{
  return 1 << *(unsigned char *)(a1 + 32);
}

void *__swift_memcpy328_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x148uLL);
}

uint64_t OUTLINED_FUNCTION_115@<X0>(uint64_t a1@<X8>)
{
  *(void *)uint64_t v2 = *(void *)(v1 + a1);
  *(unsigned char *)(v2 + 8) = 0;
  return type metadata accessor for StorableValue(0);
}

uint64_t OUTLINED_FUNCTION_115_1@<X0>(uint64_t a1@<X8>)
{
  unint64_t v2 = *(void *)(v1 + a1);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

__n128 *OUTLINED_FUNCTION_203(__n128 *result, __n128 a2)
{
  result[1] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_188()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t OUTLINED_FUNCTION_69_1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 - 512);
  return specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(a1 + 63) >> 6, v3);
}

uint64_t OUTLINED_FUNCTION_74()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_74_0()
{
  return specialized Dictionary.subscript.getter(v1, v3, v0, v2);
}

uint64_t OUTLINED_FUNCTION_74_1@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 - 256) = v1;
  return Hasher.init(_seed:)();
}

void OUTLINED_FUNCTION_74_2(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

void OUTLINED_FUNCTION_74_3()
{
  *(void *)(v0 - 112) = *(void *)(v0 - 168);
}

unint64_t OUTLINED_FUNCTION_189()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(v0, v1);
}

uint64_t OUTLINED_FUNCTION_174()
{
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type SQLError and conformance SQLError()
{
  unint64_t result = lazy protocol witness table cache variable for type SQLError and conformance SQLError;
  if (!lazy protocol witness table cache variable for type SQLError and conformance SQLError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SQLError and conformance SQLError);
  }
  return result;
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)(unint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_4();
  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (*(void *)(a2 + 16) <= a1)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 8 * a1 + 0x20);
  swift_unknownObjectRetain_n();
  if (swift_dynamicCast())
  {
    outlined destroy of UUID?(v2, (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLRawDataType));
    return v6;
  }
LABEL_7:
  _StringGuts.grow(_:)(82);
  OUTLINED_FUNCTION_36(0xD000000000000043, (uint64_t)"Down-casted Array element failed to match the target type\nExpected ");
  OUTLINED_FUNCTION_35_1();
  v8._uint64_t countAndFlagsBits = 0xD000000000000024;
  String.append(_:)(v8);
  v9._uint64_t countAndFlagsBits = 0x756F662074756220;
  v9._uint64_t object = (void *)0xEB0000000020646ELL;
  String.append(_:)(v9);
  swift_getObjectType();
  swift_unknownObjectRelease();
  v10._uint64_t countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:flags:)();
  __break(1u);
  return result;
}

void *static UnifiedLibrary.library.getter()
{
  if (one-time initialization token for initializedLibrary != -1) {
    swift_once();
  }
  return &unk_1EDD7E100;
}

uint64_t storeEnumTagSinglePayload for SQLExpression(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t outlined consume of ChangeRecord??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

void MAX.aggregationMetadata()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v32 = v1;
  uint64_t v2 = v0;
  uint64_t v4 = v3;
  type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v28 = v6;
  uint64_t v29 = v5;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_10();
  uint64_t v27 = v7;
  uint64_t v8 = *(void *)(v4 + 16);
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_4();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, StorableValue)>);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  OUTLINED_FUNCTION_11_1();
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_18EB382D0;
  uint64_t v15 = (void *)(v14 + v13);
  uint64_t v16 = (void *)(v2 + *(int *)(v4 + 44));
  uint64_t v17 = v16[1];
  void *v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = OUTLINED_FUNCTION_147();
  v19(v18);
  uint64_t v20 = OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_10_1(v20, v21, v8);
  if (v22)
  {
    int64_t v23 = *(void (**)(void))(v10 + 8);
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_14_2();
    v23();
    long long v30 = 0u;
    long long v31 = 0u;
  }
  else
  {
    *((void *)&v31 + 1) = v8;
    __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v30);
    OUTLINED_FUNCTION_45_1();
    v24();
    swift_bridgeObjectRetain();
  }
  int64_t v25 = (void *)((char *)v15 + *(int *)(v26 + 48));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v27, v2 + *(int *)(v4 + 40), v29);
  StorableValue.init(_:dataType:)((uint64_t)&v30, v27, v25);
  if (v32)
  {
    swift_bridgeObjectRelease();
    *(void *)(v14 + 16) = 0;
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    type metadata accessor for StorableValue(0);
    Dictionary.init(dictionaryLiteral:)();
  }
  OUTLINED_FUNCTION_31();
}

{
  MAX.aggregationMetadata()();
}

uint64_t specialized KeyedQueryPlannerMetadataCache.getValue(forKey:)(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v6 = (int *)type metadata accessor for KeyedAggregationMetadataCache(0);
  uint64_t v7 = *(void *)(v1 + v6[12]);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v6;
  uint64_t v9 = (uint64_t *)(v1 + v6[15]);
  if (!v9[1]) {
    return 0;
  }
  sql = (void *)v9[1];
  uint64_t v10 = *v9;
  uint64_t v11 = (uint64_t (*)(uint64_t))v9[2];
  int v12 = *(unsigned __int8 *)(v1 + v6[14]);
  uint64_t v13 = *(void *)(v1 + v6[7]);
  swift_bridgeObjectRetain();
  if (v12 == 1)
  {
    swift_bridgeObjectRetain();
    outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
    uint64_t v14 = specialized Dictionary.subscript.getter(a1, v13);
    swift_bridgeObjectRelease();
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = v3;
    outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v15 = v11;
    uint64_t v14 = specialized Dictionary.subscript.getter(a1, v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_10;
    }
    uint64_t v16 = v4 + v8[8];
    uint64_t v18 = *(void **)v16;
    uint64_t v17 = *(void *)(v16 + 8);
    swift_bridgeObjectRetain();
    id v19 = v18;
    swift_bridgeObjectRetain();
    uint64_t v14 = specialized OrderedDictionary.subscript.getter(a1, (uint64_t)v19, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if (v14 != 1)
    {
LABEL_10:
      swift_bridgeObjectRelease();
      outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
    }
    else
    {
      swift_retain();
      swift_retain();
      uint64_t v20 = v15(a1);
      uint64_t v14 = v28;
      if (v28)
      {
        swift_bridgeObjectRelease();
        outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
        swift_release();
        swift_release();
      }
      else
      {
        v22._rawValue = (void *)v20;
        swift_release();
        v23._uint64_t countAndFlagsBits = v10;
        v23._uint64_t object = sql;
        unint64_t v24 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v23, v22);
        if (v25)
        {
          swift_bridgeObjectRelease();
          outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          unint64_t v26 = v24;
          swift_release();
          swift_bridgeObjectRelease();
          if (v26)
          {
            specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)(v7);
            swift_bridgeObjectRelease();
            specialized _arrayForceCast<A, B>(_:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRetain();
            static KeyedAggregationMetadataCache.metadataFromRow(_:groupBySchema:payloadSchema:)();
            uint64_t v14 = v27;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v14 = 0;
          }
          specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(v14, a1);
          outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v10, (uint64_t)sql);
        }
      }
    }
  }
  return v14;
}

{
  uint64_t v1;
  uint64_t v2;
  int *MatchingRecordCache;
  uint64_t v5;
  int *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::OpaquePointer v32;
  uint64_t v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t (*v43)(uint64_t);
  uint64_t v44;

  uint64_t v2 = v1;
  uint64_t MatchingRecordCache = (int *)type metadata accessor for KeyedFirstMatchingRecordCache(0);
  uint64_t v5 = *(void *)(v1 + MatchingRecordCache[12]);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = MatchingRecordCache;
  uint64_t v7 = (uint64_t *)(v1 + MatchingRecordCache[15]);
  uint64_t v8 = v7[1];
  if (!v8) {
    return 0;
  }
  uint64_t v9 = *v7;
  uint64_t v10 = (uint64_t (*)(uint64_t))v7[2];
  uint64_t v11 = *(unsigned __int8 *)(v1 + MatchingRecordCache[14]);
  int v12 = *(void *)(v1 + MatchingRecordCache[7]);
  swift_bridgeObjectRetain();
  if (v11 != 1)
  {
    outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Swift::String v43 = v10;
    uint64_t v18 = specialized Dictionary.subscript.getter(a1, v12);
    id v19 = v9;
    uint64_t v21 = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v21)
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = v18 & 1;
      Swift::OpaquePointer v22 = v19;
      Swift::String v23 = v8;
    }
    else
    {
      unint64_t v42 = (void *)v8;
      unint64_t v24 = v2 + v6[8];
      unint64_t v26 = *(void **)v24;
      uint64_t v25 = *(void *)(v24 + 8);
      swift_bridgeObjectRetain();
      uint64_t v27 = v26;
      swift_bridgeObjectRetain();
      uint64_t v17 = specialized OrderedDictionary.subscript.getter(a1, (uint64_t)v27, v25);
      uint64_t v29 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if (v29 == 1)
      {
        uint64_t v17 = *(void *)(v2 + v6[11]);
        swift_retain();
        swift_retain();
        long long v30 = v43(a1);
        if (v44)
        {
          swift_bridgeObjectRelease();
          outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v19, (uint64_t)v42);
          swift_release();
          swift_release();
          return v17;
        }
        v32._rawValue = (void *)v30;
        swift_release();
        int64_t v33 = (uint64_t)v42;
        v34._uint64_t countAndFlagsBits = v19;
        v34._uint64_t object = v42;
        uint64_t v35 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v34, v32);
        if (v36)
        {
          swift_bridgeObjectRelease();
          outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v19, (uint64_t)v42);
          swift_release();
          swift_bridgeObjectRelease();
          return v17;
        }
        uint64_t v37 = v35;
        swift_release();
        swift_bridgeObjectRelease();
        if (v37)
        {
          specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)(v5);
          swift_bridgeObjectRelease();
          specialized _arrayForceCast<A, B>(_:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          static KeyedFirstMatchingRecordCache.metadataFromRow(_:groupBySchema:payloadSchema:)();
          uint64_t v39 = v38;
          uint64_t v41 = v40;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v17 = v39 & 1;
          swift_bridgeObjectRelease();
          int64_t v33 = (uint64_t)v42;
        }
        else
        {
          swift_bridgeObjectRelease();
          uint64_t v17 = 0;
          uint64_t v41 = 0;
        }
        specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(v17, v41, a1);
        Swift::OpaquePointer v22 = v19;
        Swift::String v23 = v33;
      }
      else
      {
        swift_bridgeObjectRelease();
        Swift::String v23 = (uint64_t)v42;
        Swift::OpaquePointer v22 = v19;
      }
    }
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v22, v23);
    return v17;
  }
  swift_bridgeObjectRetain();
  outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, v8);
  uint64_t v13 = specialized Dictionary.subscript.getter(a1, v12);
  uint64_t v14 = v9;
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v14, v8);
  swift_bridgeObjectRelease();
  if (v16) {
    return v13 & 1;
  }
  else {
    return 0;
  }
}

void specialized _arrayForceCast<A, B>(_:)()
{
  OUTLINED_FUNCTION_38_0();
  uint64_t v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_16_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_80_2();
  if (v2)
  {
    OUTLINED_FUNCTION_86_2();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v11 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v12 = *(void *)(v6 + 72);
    uint64_t v13 = v15;
    do
    {
      outlined init with copy of UUID?(v11, v0, &demangling cache variable for type metadata for (String, SQLDataType));
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_28_5();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v13 = v15;
      }
      unint64_t v14 = *(void *)(v13 + 16);
      if (v14 >= *(void *)(v13 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v13 = v15;
      }
      *(void *)(v13 + 16) = v14 + 1;
      _s10Foundation4UUIDVSgWObTm_0(v1, v13+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v14, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      v11 += v12;
      --v2;
    }
    while (v2);
  }
  OUTLINED_FUNCTION_34();
}

uint64_t specialized OrderedDictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 1;
  }
}

{
  uint64_t v4;
  char v5;
  uint64_t v6;

  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

uint64_t specialized KeyedQueryPlannerMetadataCache.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (int *)type metadata accessor for KeyedAggregationMetadataCache(0);
  uint64_t v6 = *(void *)(v2 + v5[12]);
  if (!v6 || (v7 = (uint64_t *)(v2 + v5[15]), (uint64_t v8 = v7[1]) == 0))
  {
    char v14 = 0;
    goto LABEL_13;
  }
  uint64_t v40 = v3;
  uint64_t v9 = *v7;
  uint64_t v10 = (uint64_t (*)(uint64_t))v7[2];
  int v11 = *(unsigned __int8 *)(v2 + v5[14]);
  uint64_t v39 = v5;
  uint64_t v12 = *(void *)(v2 + v5[7]);
  swift_bridgeObjectRetain();
  uint64_t v38 = v12;
  if (v11 == 1)
  {
    swift_bridgeObjectRetain();
    outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, v8);
    uint64_t v13 = specialized Dictionary.subscript.getter(a2, v12);
    swift_bridgeObjectRelease();
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, v8);
    swift_bridgeObjectRelease();
    if (!v13)
    {
      char v14 = 0;
LABEL_13:
      uint64_t v19 = swift_bridgeObjectRetain();
      specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(v19, a2);
      swift_bridgeObjectRelease();
      uint64_t v20 = swift_bridgeObjectRetain();
      specialized Dictionary._Variant.updateValue(_:forKey:)(v20, v14, a2);
      return swift_bridgeObjectRelease();
    }
    goto LABEL_9;
  }
  outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v37 = v10;
  uint64_t v15 = specialized Dictionary.subscript.getter(a2, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
    swift_bridgeObjectRelease();
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, v8);
    goto LABEL_9;
  }
  sql = (void *)v8;
  uint64_t v22 = v2 + v39[8];
  unint64_t v24 = *(void **)v22;
  uint64_t v23 = *(void *)(v22 + 8);
  swift_bridgeObjectRetain();
  id v25 = v24;
  swift_bridgeObjectRetain();
  uint64_t v26 = specialized OrderedDictionary.subscript.getter(a2, (uint64_t)v25, v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if (v26 != 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v28 = v9;
    uint64_t v29 = v26;
    goto LABEL_18;
  }
  swift_retain();
  swift_retain();
  uint64_t v27 = v37(a2);
  if (v40)
  {
    swift_bridgeObjectRelease();
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, (uint64_t)sql);
    swift_release();
    return swift_release();
  }
  v30._rawValue = (void *)v27;
  swift_release();
  uint64_t v28 = v9;
  v31._uint64_t countAndFlagsBits = v9;
  v31._uint64_t object = sql;
  unint64_t v32 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v31, v30);
  if (!v33)
  {
    unint64_t v34 = v32;
    swift_release();
    swift_bridgeObjectRelease();
    if (v34)
    {
      specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)(v6);
      swift_bridgeObjectRelease();
      specialized _arrayForceCast<A, B>(_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      static KeyedAggregationMetadataCache.metadataFromRow(_:groupBySchema:payloadSchema:)();
      uint64_t v29 = v35;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = 0;
    }
    specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(v29, a2);
LABEL_18:
    outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v28, (uint64_t)sql);
    if (!v29)
    {
LABEL_11:
      char v14 = 0;
      goto LABEL_13;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = specialized Dictionary.subscript.getter(a2, v38);
    char v18 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v16 || (swift_bridgeObjectRelease(), (v18 & 1) != 0))
    {
      char v14 = 1;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(v9, (uint64_t)sql);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

{
  uint64_t v3;
  char v4;
  uint64_t v5;

  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v4 & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a2 + 56) + 24 * v3);
  swift_bridgeObjectRetain();
  return v5;
}

void specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for KeyedAggregationMetadataCache(0);
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v2 + *(int *)(v7 + 40);
  specialized OrderedDictionary.updateValue(_:forKey:)(a1, a2);
  uint64_t v11 = *(void *)(*(void *)(v10 + 8) + 16);
  outlined init with copy of StorableValue(v3, (uint64_t)v9, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
  uint64_t v12 = *(void *)&v9[*(int *)(v7 + 44)];
  outlined destroy of StorableValue((uint64_t)v9, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
  if (v12 < v11) {
    specialized OrderedDictionary.removeFirst()();
  }
}

uint64_t specialized OrderedDictionary.updateValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(*(void *)(v2 + 8) + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(), (v4 & 1) == 0))
  {
    uint64_t v5 = *(void **)v2;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OrderedDictionary<[StorableValue], [[String : StorableValue]]?>.KeyWrapper);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = a2;
    swift_bridgeObjectRetain();
    objc_msgSend(v5, sel_addObject_, v6);
    swift_release();
  }
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = specialized Dictionary._Variant.updateValue(_:forKey:)(v7, a2);

  return outlined consume of [[String : StorableValue]]??(v8);
}

uint64_t specialized Dictionary._Variant.updateValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v9 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  uint64_t v7 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, a2, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v9;
  swift_bridgeObjectRelease();
  return v7;
}

#error "18E6A08C8: call analysis failed (funcsize=68)"

uint64_t outlined consume of [[String : StorableValue]]??(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Dictionary._Variant.updateValue(_:forKey:)(uint64_t a1, char a2, uint64_t a3)
{
  char v4 = v3;
  uint64_t v7 = a2 & 1;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  uint64_t v9 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, v7, a3, isUniquelyReferenced_nonNull_native);
  *char v4 = v11;
  swift_bridgeObjectRelease();
  return v9;
}

#error "18E6A0A88: call analysis failed (funcsize=74)"

uint64_t outlined copy of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of (sql: String, argumentsFromKey: @escaping @callee_guaranteed (@guaranteed [StorableValue]) -> (@owned [StorableValue], @error @owned Error))?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

void static KeyedFirstMatchingRecordCache.metadataFromRow(_:groupBySchema:payloadSchema:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v170 = v0;
  uint64_t v153 = v1;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v168 = type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_67();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
  uint64_t v13 = OUTLINED_FUNCTION_35(v12);
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_16();
  char v151 = v14;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_45();
  uint64_t v150 = (uint64_t *)v16;
  uint64_t v17 = type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_0_4();
  uint64_t v166 = v18;
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_16();
  uint64_t v164 = v20;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_21();
  uint64_t v165 = v22;
  OUTLINED_FUNCTION_11();
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)v147 - v25;
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_45();
  uint64_t v161 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_20_4();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_139_0();
  Swift::String v162 = v29;
  OUTLINED_FUNCTION_99_1();
  MEMORY[0x1F4188790](v30);
  uint64_t v163 = (void *)((char *)v147 - v31);
  OUTLINED_FUNCTION_99_1();
  uint64_t v33 = MEMORY[0x1F4188790](v32);
  uint64_t v34 = *(void *)(v3 + 16);
  uint64_t v149 = v11;
  uint64_t v169 = v5;
  uint64_t v148 = v7;
  if (v34)
  {
    v147[0] = v17;
    OUTLINED_FUNCTION_58_4(v33);
    uint64_t v35 = v7;
    uint64_t v37 = v3 + v36;
    uint64_t v152 = *(void *)(v38 + 72);
    uint64_t v156 = v35 + 16;
    uint64_t v157 = v35 + 32;
    uint64_t v154 = v5 + 64;
    uint64_t v155 = (void (**)(void))(v35 + 8);
    v147[1] = v3;
    swift_bridgeObjectRetain();
    uint64_t v39 = MEMORY[0x1E4FBC860];
    uint64_t v40 = v163;
    do
    {
      uint64_t v167 = v34;
      uint64_t v41 = (uint64_t)v26;
      unint64_t v42 = v159;
      outlined init with copy of UUID?(v37, (uint64_t)v159, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      uint64_t v43 = (uint64_t)v40 + *(int *)(v160 + 48);
      uint64_t v44 = *v42;
      uint64_t v45 = v42[1];
      *uint64_t v40 = *v42;
      v40[1] = v45;
      OUTLINED_FUNCTION_45_1();
      v46();
      uint64_t v47 = v162;
      *Swift::String v162 = v44;
      v47[1] = v45;
      OUTLINED_FUNCTION_71();
      OUTLINED_FUNCTION_15_0();
      v48();
      uint64_t v49 = *v155;
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_18_4();
      v49();
      uint64_t v50 = v169;
      if (!*(void *)(v169 + 16) || (unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v44, v45), (v52 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_73_3();
        OUTLINED_FUNCTION_82_2();
        lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
        OUTLINED_FUNCTION_17_6();
        *uint64_t v80 = v44;
        v80[1] = v45;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        outlined destroy of UUID?((uint64_t)v163, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
LABEL_65:
        OUTLINED_FUNCTION_31();
        return;
      }
      uint64_t v53 = v51;
      int v54 = *(_DWORD *)(v50 + 36);
      swift_bridgeObjectRelease();
      if (v53 < 0 || v53 >= 1 << *(unsigned char *)(v50 + 32))
      {
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      if (((*(void *)(v154 + (((unint64_t)v53 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v53) & 1) == 0) {
        goto LABEL_67;
      }
      if (v54 != *(_DWORD *)(v50 + 36)) {
        goto LABEL_68;
      }
      uint64_t v55 = OUTLINED_FUNCTION_109_1();
      outlined copy of DatabaseValue(v55, v56, v57);
      uint64_t v58 = v161;
      uint64_t v59 = OUTLINED_FUNCTION_109_1();
      uint64_t v60 = v170;
      static StorableValue.fromDatabaseValue(_:dataType:)(v59, v61, v62, v43, v63);
      uint64_t v170 = v60;
      uint64_t v64 = OUTLINED_FUNCTION_109_1();
      if (v60)
      {
        outlined consume of DatabaseValue(v64, v65, v66);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_73_3();
        outlined destroy of UUID?((uint64_t)v163, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        goto LABEL_65;
      }
      outlined consume of DatabaseValue(v64, v65, v66);
      uint64_t v26 = (char *)v41;
      _s12BiomeStreams13StorableValueOWOcTm_1(v58, v41, (void (*)(void))type metadata accessor for StorableValue);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v74 = OUTLINED_FUNCTION_28_5();
        uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v74, v75, v76, v39);
      }
      uint64_t v67 = v167;
      unint64_t v69 = *(void *)(v39 + 16);
      unint64_t v68 = *(void *)(v39 + 24);
      if (v69 >= v68 >> 1)
      {
        char v77 = OUTLINED_FUNCTION_52_3(v68);
        uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v77, v78, v79, v39);
      }
      *(void *)(v39 + 16) = v69 + 1;
      OUTLINED_FUNCTION_22();
      _s12BiomeStreams13StorableValueOWObTm_1((uint64_t)v26, v39 + v70 + *(void *)(v71 + 72) * v69, (void (*)(void))type metadata accessor for StorableValue);
      _s12BiomeStreams13StorableValueOWOhTm_2(v58, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v40 = v163;
      uint64_t v72 = OUTLINED_FUNCTION_71();
      outlined destroy of UUID?(v72, v73);
      v37 += v152;
      uint64_t v34 = v67 - 1;
    }
    while (v34);
    uint64_t v156 = v39;
    OUTLINED_FUNCTION_73_3();
    uint64_t v11 = v149;
    uint64_t v7 = v148;
  }
  else
  {
    uint64_t v156 = MEMORY[0x1E4FBC860];
  }
  uint64_t v81 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v82 = *(void *)(v153 + 64);
  uint64_t v157 = v153 + 64;
  uint64_t v83 = 1 << *(unsigned char *)(v153 + 32);
  uint64_t v84 = -1;
  if (v83 < 64) {
    uint64_t v84 = ~(-1 << v83);
  }
  unint64_t v85 = v84 & v82;
  uint64_t v159 = (uint64_t *)(v7 + 16);
  uint64_t v160 = v169 + 64;
  uint64_t v161 = v7 + 8;
  Swift::String v162 = (uint64_t *)(v7 + 32);
  int64_t v158 = (unint64_t)(v83 + 63) >> 6;
  uint64_t v155 = (void (**)(void))(v158 - 1);
  swift_bridgeObjectRetain();
  uint64_t v86 = 0;
  uint64_t v87 = (uint64_t *)&demangling cache variable for type metadata for (key: String, value: SQLDataType);
  uint64_t v88 = v151;
  if (!v85) {
    goto LABEL_24;
  }
LABEL_22:
  uint64_t v167 = (v85 - 1) & v85;
  unint64_t v89 = __clz(__rbit64(v85)) | (v86 << 6);
  while (2)
  {
    uint64_t v90 = (void *)(*(void *)(v153 + 48) + 16 * v89);
    uint64_t v91 = v90[1];
    *uint64_t v88 = *v90;
    v88[1] = v91;
    uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(v87);
    OUTLINED_FUNCTION_15_0();
    v93();
    __swift_storeEnumTagSinglePayload((uint64_t)v88, 0, 1, v92);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v100 = v150;
      _s10Foundation4UUIDVSgWObTm_0((uint64_t)v88, (uint64_t)v150, &demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
      uint64_t v101 = __swift_instantiateConcreteTypeFromMangledName(v87);
      if (__swift_getEnumTagSinglePayload((uint64_t)v100, 1, v101) == 1)
      {
        swift_release();
        goto LABEL_65;
      }
      uint64_t v103 = *v100;
      uint64_t v102 = v100[1];
      OUTLINED_FUNCTION_45_1();
      v104();
      if (!*(void *)(v169 + 16)
        || (unint64_t v105 = specialized __RawDictionaryStorage.find<A>(_:)(v103, v102), (v106 & 1) == 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
        OUTLINED_FUNCTION_39();
        uint64_t *v144 = v103;
        v144[1] = v102;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        OUTLINED_FUNCTION_2_4();
        v145();
        swift_release();
        goto LABEL_65;
      }
      if ((v105 & 0x8000000000000000) != 0) {
        goto LABEL_69;
      }
      OUTLINED_FUNCTION_34_5();
      if (v108 == v109) {
        goto LABEL_69;
      }
      if (((*(void *)(v160 + ((v107 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v107) & 1) == 0) {
        goto LABEL_70;
      }
      uint64_t v163 = (uint64_t *)v86;
      Swift::String v110 = v87;
      uint64_t v111 = OUTLINED_FUNCTION_110_1();
      outlined copy of DatabaseValue(v111, v112, v113);
      uint64_t v114 = v11;
      uint64_t v115 = v165;
      uint64_t v116 = OUTLINED_FUNCTION_110_1();
      uint64_t v117 = v170;
      static StorableValue.fromDatabaseValue(_:dataType:)(v116, v118, v119, v114, v120);
      uint64_t v170 = v117;
      uint64_t v121 = OUTLINED_FUNCTION_110_1();
      if (v117)
      {
        outlined consume of DatabaseValue(v121, v122, v123);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_2_4();
        v146();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_65;
      }
      outlined consume of DatabaseValue(v121, v122, v123);
      _s12BiomeStreams13StorableValueOWOcTm_1(v115, v164, (void (*)(void))type metadata accessor for StorableValue);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v171 = v81;
      unint64_t v125 = specialized __RawDictionaryStorage.find<A>(_:)(v103, v102);
      uint64_t v127 = *(void *)(v81 + 16);
      BOOL v128 = (v126 & 1) == 0;
      Swift::Int v129 = v127 + v128;
      if (__OFADD__(v127, v128)) {
        goto LABEL_71;
      }
      unint64_t v130 = v125;
      char v131 = v126;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
      Swift::Bool v132 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v129);
      uint64_t v11 = v149;
      uint64_t v87 = v110;
      uint64_t v86 = (uint64_t)v163;
      if (v132)
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v103, v102);
        OUTLINED_FUNCTION_21_3();
        if (!v134) {
          goto LABEL_75;
        }
        unint64_t v130 = v133;
      }
      uint64_t v81 = v171;
      if (v131)
      {
        OUTLINED_FUNCTION_142_0();
        outlined assign with take of StorableValue(v164, v135);
        uint64_t v136 = v165;
      }
      else
      {
        OUTLINED_FUNCTION_102_1(v171 + 8 * (v130 >> 6));
        Swift::String v137 = (uint64_t *)(*(void *)(v171 + 48) + 16 * v130);
        *Swift::String v137 = v103;
        v137[1] = v102;
        OUTLINED_FUNCTION_142_0();
        _s12BiomeStreams13StorableValueOWObTm_1(v164, v138, (void (*)(void))type metadata accessor for StorableValue);
        uint64_t v139 = *(void *)(v171 + 16);
        BOOL v109 = __OFADD__(v139, 1);
        uint64_t v140 = v139 + 1;
        uint64_t v136 = v165;
        if (v109) {
          goto LABEL_72;
        }
        *(void *)(v171 + 16) = v140;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s12BiomeStreams13StorableValueOWOhTm_2(v136, (void (*)(void))type metadata accessor for StorableValue);
      OUTLINED_FUNCTION_2_4();
      v141();
      uint64_t v88 = v151;
      unint64_t v85 = v167;
      if (v167) {
        goto LABEL_22;
      }
LABEL_24:
      int64_t v94 = v86 + 1;
      if (__OFADD__(v86, 1)) {
        goto LABEL_73;
      }
      if (v94 < v158)
      {
        if (*(void *)(v157 + 8 * v94)) {
          goto LABEL_27;
        }
        v86 += 2;
        if (v94 + 1 >= v158)
        {
          uint64_t v86 = v94;
          goto LABEL_32;
        }
        if (*(void *)(v157 + 8 * v86)) {
          goto LABEL_27;
        }
        if (v94 + 2 < v158) {
          break;
        }
      }
LABEL_32:
      uint64_t v99 = __swift_instantiateConcreteTypeFromMangledName(v87);
      __swift_storeEnumTagSinglePayload((uint64_t)v88, 1, 1, v99);
      uint64_t v167 = 0;
    }
    if (*(void *)(v157 + 8 * (v94 + 2))) {
      goto LABEL_27;
    }
    int64_t v142 = v94 + 3;
    if (v94 + 3 >= v158)
    {
      uint64_t v86 = v94 + 2;
      goto LABEL_32;
    }
    if (*(void *)(v157 + 8 * v142))
    {
LABEL_27:
      OUTLINED_FUNCTION_116_0();
      uint64_t v167 = v96 & v95;
      unint64_t v89 = v98 + (v97 << 6);
      uint64_t v86 = v97;
      continue;
    }
    break;
  }
  while (1)
  {
    int64_t v143 = v142 + 1;
    if (__OFADD__(v142, 1)) {
      break;
    }
    if (v143 >= v158)
    {
      uint64_t v86 = (uint64_t)v155;
      goto LABEL_32;
    }
    ++v142;
    if (*(void *)(v157 + 8 * v143)) {
      goto LABEL_27;
    }
  }
LABEL_74:
  __break(1u);
LABEL_75:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t OUTLINED_FUNCTION_110()
{
  return specialized Dictionary.subscript.getter(v1, v3, v0, v2);
}

uint64_t OUTLINED_FUNCTION_110_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 - 504);
  return specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(a1 + 63) >> 6, v3);
}

uint64_t OUTLINED_FUNCTION_110_1()
{
  return v0;
}

uint64_t static StorableValue.fromDatabaseValue(_:dataType:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v73 = a5;
  uint64_t v74 = a4;
  LODWORD(v72) = a3;
  int v7 = a3;
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_4();
  uint64_t v70 = v9;
  uint64_t v71 = v8;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_10();
  uint64_t v69 = v10;
  uint64_t v11 = type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_47();
  uint64_t v17 = v15 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v65 - v19;
  uint64_t v21 = (uint64_t (**)(uint64_t, ValueMetadata *))(v13 + 88);
  if (v7 != 4 || a2 | a1)
  {
    uint64_t v67 = *(void *)(v13 + 16);
    uint64_t v68 = v13 + 16;
    OUTLINED_FUNCTION_15_0();
    v26();
    int v27 = (*v21)(v17, v11);
    if (!v27)
    {
      char v28 = v72;
      if (!(_BYTE)v72)
      {
        uint64_t v29 = v73;
        uint64_t *v73 = a1;
        *((unsigned char *)v29 + 8) = 0;
        goto LABEL_8;
      }
      goto LABEL_39;
    }
    int v30 = v27;
    switch(v27)
    {
      case 1:
        char v28 = v72;
        if (v72 == 1)
        {
          uint64_t v31 = v73;
          uint64_t *v73 = a1;
          *((unsigned char *)v31 + 8) = 0;
          goto LABEL_8;
        }
        goto LABEL_39;
      case 2:
        char v28 = v72;
        if (v72 == 2)
        {
LABEL_16:
          OUTLINED_FUNCTION_19_1();
          OUTLINED_FUNCTION_14_1();
          swift_storeEnumTagMultiPayload();
          return swift_bridgeObjectRetain();
        }
LABEL_39:
        lazy protocol witness table accessor for type SQLError and conformance SQLError();
        OUTLINED_FUNCTION_39();
        uint64_t v40 = v39;
        *(void *)(v39 + 24) = &type metadata for DatabaseValue;
        *(void *)uint64_t v39 = a1;
        *(void *)(v39 + 8) = a2;
        *(unsigned char *)(v39 + 16) = v28;
        *(void *)(v39 + 56) = v11;
        __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v39 + 32));
        OUTLINED_FUNCTION_13_2();
        v41();
        *(unsigned char *)(v40 + 64) = 3;
        outlined copy of DatabaseValue(a1, a2, v28);
        return swift_willThrow();
      case 3:
        char v28 = v72;
        if (v72 == 1)
        {
          uint64_t v34 = v73;
          Date.init(timeIntervalSince1970:)();
          uint64_t v35 = type metadata accessor for Date();
          uint64_t v36 = (uint64_t)v34;
          uint64_t v37 = 0;
LABEL_24:
          __swift_storeEnumTagSinglePayload(v36, v37, 1, v35);
          type metadata accessor for StorableValue(0);
          OUTLINED_FUNCTION_14_1();
          return swift_storeEnumTagMultiPayload();
        }
        goto LABEL_39;
      case 4:
        char v28 = v72;
        if (v72 == 3)
        {
          OUTLINED_FUNCTION_19_1();
          swift_storeEnumTagMultiPayload();
          return outlined copy of Data._Representation(a1, a2);
        }
        goto LABEL_39;
      case 5:
        char v28 = v72;
        if (v72 == 2) {
          goto LABEL_16;
        }
        goto LABEL_39;
    }
    if (v27 != 6)
    {
      unint64_t v66 = a2;
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      OUTLINED_FUNCTION_39();
      uint64_t v43 = v42;
      uint64_t v44 = (_OWORD *)(v42 + 32);
      if (v30 == 7)
      {
        *(void *)(v42 + 24) = &type metadata for DatabaseValue;
        unint64_t v45 = v66;
        *(void *)uint64_t v42 = a1;
        *(void *)(v42 + 8) = v45;
        char v46 = v72;
        *(unsigned char *)(v42 + 16) = v72;
        *(void *)(v42 + 56) = v11;
        __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v42 + 32));
        OUTLINED_FUNCTION_13_2();
        v47();
        *(unsigned char *)(v43 + 64) = 3;
        outlined copy of DatabaseValue(a1, v45, v46);
        return swift_willThrow();
      }
      else
      {
        *(void *)(v42 + 24) = v11;
        __swift_allocate_boxed_opaque_existential_0((uint64_t *)v42);
        OUTLINED_FUNCTION_13_2();
        v48();
        *uint64_t v44 = 0u;
        v44[1] = 0u;
        *(unsigned char *)(v43 + 64) = 3;
        swift_willThrow();
        return (*(uint64_t (**)(uint64_t, ValueMetadata *))(v13 + 8))(v17, v11);
      }
    }
    char v28 = v72;
    if (v72 != 3) {
      goto LABEL_39;
    }
    outlined copy of Data._Representation(a1, a2);
    uint64_t result = Data.count.getter();
    if (result != 16)
    {
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      OUTLINED_FUNCTION_39();
      uint64_t v52 = v51;
      *(void *)(v51 + 24) = &type metadata for DatabaseValue;
      *(void *)uint64_t v51 = a1;
      *(void *)(v51 + 8) = a2;
      *(unsigned char *)(v51 + 16) = 3;
      *(void *)(v51 + 56) = v11;
      __swift_allocate_boxed_opaque_existential_0((uint64_t *)(v51 + 32));
      OUTLINED_FUNCTION_13_2();
      v53();
      *(unsigned char *)(v52 + 64) = 3;
      return swift_willThrow();
    }
    uint64_t v74 = a1;
    unint64_t v66 = a2;
    uint64_t v38 = a1;
    switch(a2 >> 62)
    {
      case 1uLL:
        if ((int)v74 > v74 >> 32)
        {
          __break(1u);
          goto LABEL_66;
        }
        outlined copy of Data._Representation(v74, v66);
        uint64_t v54 = __DataStorage._bytes.getter();
        if (v54)
        {
          uint64_t v55 = v54;
          uint64_t result = __DataStorage._offset.getter();
          if (__OFSUB__((int)a1, result)) {
            goto LABEL_67;
          }
          uint64_t v56 = v55 + (int)a1 - result;
        }
        else
        {
          uint64_t v56 = 0;
        }
        uint64_t result = __DataStorage._length.getter();
        if (v56)
        {
          OUTLINED_FUNCTION_1_11();
          uint64_t v38 = v74;
          outlined consume of DatabaseValue(v74, v66, 3);
          goto LABEL_64;
        }
        goto LABEL_69;
      case 2uLL:
        uint64_t v57 = *(void *)(v74 + 16);
        swift_retain();
        swift_retain();
        uint64_t v58 = __DataStorage._bytes.getter();
        if (v58)
        {
          uint64_t v59 = v58;
          uint64_t result = __DataStorage._offset.getter();
          if (__OFSUB__(v57, result))
          {
LABEL_66:
            __break(1u);
LABEL_67:
            __break(1u);
            goto LABEL_68;
          }
          uint64_t v60 = v59 + v57 - result;
        }
        else
        {
          uint64_t v60 = 0;
        }
        uint64_t result = __DataStorage._length.getter();
        if (v60)
        {
          OUTLINED_FUNCTION_1_11();
          swift_release();
          uint64_t v38 = v74;
          swift_release();
LABEL_64:
          uint64_t v61 = v69;
          UUID.init(uuid:)();
          outlined consume of DatabaseValue(v38, v66, 3);
          int v62 = v73;
          uint64_t v63 = v61;
          uint64_t v64 = v71;
          (*(void (**)(uint64_t *, uint64_t, uint64_t))(v70 + 32))(v73, v63, v71);
          uint64_t v36 = (uint64_t)v62;
          uint64_t v37 = 0;
          uint64_t v35 = v64;
          goto LABEL_24;
        }
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        return result;
      default:
        goto LABEL_64;
    }
  }
  uint64_t v22 = v11;
  uint64_t v23 = *(void (**)(uint64_t *, uint64_t, ValueMetadata *))(v13 + 16);
  OUTLINED_FUNCTION_15_0();
  v24();
  int v25 = (*v21)((uint64_t)v20, v22);
  switch(v25)
  {
    case 0:
    case 1:
      OUTLINED_FUNCTION_30_1();
LABEL_8:
      type metadata accessor for StorableValue(0);
      OUTLINED_FUNCTION_14_1();
      return swift_storeEnumTagMultiPayload();
    case 2:
LABEL_18:
      type metadata accessor for StorableValue(0);
      uint64_t v33 = v73;
      uint64_t *v73 = 0;
      v33[1] = 0;
      return swift_storeEnumTagMultiPayload();
    case 3:
      uint64_t v35 = type metadata accessor for Date();
      uint64_t v36 = (uint64_t)v73;
      uint64_t v37 = 1;
      goto LABEL_24;
    case 4:
      *(_OWORD *)uint64_t v73 = xmmword_18EB37160;
      type metadata accessor for StorableValue(0);
      return swift_storeEnumTagMultiPayload();
    case 5:
      goto LABEL_18;
    case 6:
      uint64_t v36 = (uint64_t)v73;
      uint64_t v37 = 1;
      uint64_t v35 = v71;
      goto LABEL_24;
    case 7:
      type metadata accessor for StorableValue(0);
      return swift_storeEnumTagMultiPayload();
  }
  lazy protocol witness table accessor for type SQLError and conformance SQLError();
  OUTLINED_FUNCTION_39();
  v49[3] = (uint64_t)v22;
  boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v49);
  v23(boxed_opaque_existential_0, v74, v22);
  OUTLINED_FUNCTION_27_1();
  swift_willThrow();
  return (*(uint64_t (**)(char *, ValueMetadata *))(v13 + 8))(v20, v22);
}

uint64_t OUTLINED_FUNCTION_14_1()
{
  return v0;
}

void OUTLINED_FUNCTION_14_3()
{
  *(void *)(v2 - 296) = (v1 - 1) & v1;
  *(void *)(v2 - 304) = v0;
}

uint64_t OUTLINED_FUNCTION_14_5()
{
  return v0;
}

uint64_t SQLExpressionEvaluator.execute(stmt:bindingValues:)(sqlite3_stmt *a1, uint64_t a2)
{
  uint64_t v6 = a1;
  int v7 = *(sqlite3 **)(v2 + 24);
  bind(_:to:db:)(a2, a1, v7);
  if (v3)
  {
    uint64_t v8 = sqlite3_reset(v6);
    if (!v8) {
      return v5;
    }
    id v9 = BMSQLDatabaseError(v8, v7, 0);
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    Swift::Int v5 = v11;

    Swift::Int v109 = v10;
    Swift::Int v110 = v5;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t isUniquelyReferenced_nonNull_native = v13;
    swift_bridgeObjectRelease();
    if (one-time initialization token for SQL != -1) {
LABEL_56:
    }
      swift_once();
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logging.SQL);
    swift_bridgeObjectRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      Swift::Int v5 = swift_slowAlloc();
      uint64_t v17 = v6;
      uint64_t v18 = swift_slowAlloc();
      Swift::Int v109 = v18;
      *(_DWORD *)Swift::Int v5 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, isUniquelyReferenced_nonNull_native, &v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_18E67D000, v15, v16, "SQLExpressionEvaluator: Failed to reset statement with error: %s", (uint8_t *)v5, 0xCu);
      swift_arrayDestroy();
      uint64_t v19 = v18;
      uint64_t v6 = v17;
      MEMORY[0x192FB1900](v19, -1, -1);
      MEMORY[0x192FB1900](v5, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (sqlite3_sql(v6))
    {
LABEL_29:
      uint64_t v60 = String.init(cString:)();
      specialized Dictionary._Variant.removeValue(forKey:)(v60, v61);
      swift_bridgeObjectRelease();
      sqlite3_finalize(v6);
      return v5;
    }
    goto LABEL_60;
  }
  uint64_t v20 = sqlite3_step(v6);
  if (v20 == 101)
  {
    uint64_t v63 = sqlite3_reset(v6);
    if (!v63) {
      return 0;
    }
    id v64 = BMSQLDatabaseError(v63, v7, 0);
    swift_getErrorValue();
    uint64_t v65 = Error.localizedDescription.getter();
    Swift::Int v67 = v66;

    Swift::Int v109 = v65;
    Swift::Int v110 = v67;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t countAndFlagsBits = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    unint64_t isUniquelyReferenced_nonNull_native = v68;
    swift_bridgeObjectRelease();
    if (one-time initialization token for SQL == -1)
    {
LABEL_33:
      uint64_t v69 = type metadata accessor for Logger();
      __swift_project_value_buffer(v69, (uint64_t)static Logging.SQL);
      swift_bridgeObjectRetain();
      uint64_t v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc();
        uint64_t v73 = v6;
        uint64_t v74 = swift_slowAlloc();
        Swift::Int v109 = v74;
        *(_DWORD *)uint64_t v72 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, isUniquelyReferenced_nonNull_native, &v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_18E67D000, v70, v71, "SQLExpressionEvaluator: Failed to reset statement with error: %s", v72, 0xCu);
        swift_arrayDestroy();
        uint64_t v75 = v74;
        uint64_t v6 = v73;
        MEMORY[0x192FB1900](v75, -1, -1);
        MEMORY[0x192FB1900](v72, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      if (!sqlite3_sql(v6)) {
        goto LABEL_62;
      }
      uint64_t v100 = String.init(cString:)();
      specialized Dictionary._Variant.removeValue(forKey:)(v100, v101);
      swift_bridgeObjectRelease();
      sqlite3_finalize(v6);
      return 0;
    }
LABEL_58:
    swift_once();
    goto LABEL_33;
  }
  if (v20 != 100)
  {
    char v76 = v7;
    id v77 = BMSQLDatabaseError(v20, v7, 0);
    swift_getErrorValue();
    uint64_t v78 = Error.localizedDescription.getter();
    Swift::Int v80 = v79;

    Swift::Int v109 = v78;
    Swift::Int v110 = v80;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v81 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v83 = v82;
    swift_bridgeObjectRelease();
    if (sqlite3_sql(v6))
    {
      uint64_t v84 = v6;
      Swift::Int v5 = String.init(cString:)();
      uint64_t v86 = v85;
      lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
      swift_allocError();
      *(void *)uint64_t v87 = v5;
      *(void *)(v87 + 8) = v86;
      *(void *)(v87 + 16) = v81;
      *(void *)(v87 + 24) = v83;
      *(unsigned char *)(v87 + 32) = 1;
      swift_willThrow();
      uint64_t v88 = sqlite3_reset(v84);
      if (!v88) {
        return v5;
      }
      uint64_t v6 = v84;
      id v89 = BMSQLDatabaseError(v88, v76, 0);
      swift_getErrorValue();
      uint64_t v90 = Error.localizedDescription.getter();
      Swift::Int v5 = v91;

      Swift::Int v109 = v90;
      Swift::Int v110 = v5;
      uint64_t v92 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      unint64_t v94 = v93;
      swift_bridgeObjectRelease();
      if (one-time initialization token for SQL != -1) {
        swift_once();
      }
      uint64_t v95 = type metadata accessor for Logger();
      __swift_project_value_buffer(v95, (uint64_t)static Logging.SQL);
      swift_bridgeObjectRetain();
      uint64_t v96 = Logger.logObject.getter();
      os_log_type_t v97 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v96, v97))
      {
        Swift::Int v5 = swift_slowAlloc();
        uint64_t v98 = swift_slowAlloc();
        Swift::Int v109 = v98;
        *(_DWORD *)Swift::Int v5 = 136315138;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v94, &v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_18E67D000, v96, v97, "SQLExpressionEvaluator: Failed to reset statement with error: %s", (uint8_t *)v5, 0xCu);
        swift_arrayDestroy();
        uint64_t v99 = v98;
        uint64_t v6 = v84;
        MEMORY[0x192FB1900](v99, -1, -1);
        MEMORY[0x192FB1900](v5, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      if (sqlite3_sql(v6)) {
        goto LABEL_29;
      }
      goto LABEL_63;
    }
    goto LABEL_61;
  }
  uint64_t v104 = v7;
  uint64_t countAndFlagsBits = sqlite3_column_count(v6);
  uint64_t v21 = Dictionary.init(dictionaryLiteral:)();
  if ((countAndFlagsBits & 0x80000000) != 0)
  {
    __break(1u);
    goto LABEL_58;
  }
  Swift::Int v5 = v21;
  pStmt = v6;
  if (countAndFlagsBits)
  {
    int v22 = 0;
    unsigned int v105 = countAndFlagsBits;
    while (1)
    {
      if (countAndFlagsBits == v22)
      {
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
        goto LABEL_56;
      }
      if (!sqlite3_column_name(v6, v22)) {
        break;
      }
      String.init(cString:)();
      Swift::String v23 = String.lowercased()();
      uint64_t countAndFlagsBits = v23._countAndFlagsBits;
      swift_bridgeObjectRelease();
      uint64_t v24 = DatabaseValue.init(stmt:index:)(v6, v22);
      unint64_t v26 = v25;
      char v108 = (sqlite3_stmt *)v24;
      char v107 = v27;
      outlined copy of DatabaseValue(v24, v25, v27);
      unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      Swift::Int v109 = v5;
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v23._countAndFlagsBits, (uint64_t)v23._object);
      uint64_t v30 = *(void *)(v5 + 16);
      BOOL v31 = (v29 & 1) == 0;
      Swift::Int v5 = v30 + v31;
      if (__OFADD__(v30, v31)) {
        goto LABEL_54;
      }
      unint64_t v32 = v28;
      char v33 = v29;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, DatabaseValue>);
      Swift::Bool v34 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v5);
      unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v23._object;
      if (v34)
      {
        unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v23._countAndFlagsBits, (uint64_t)v23._object);
        if ((v33 & 1) != (v36 & 1)) {
          goto LABEL_65;
        }
        unint64_t v32 = v35;
      }
      Swift::Int v5 = v109;
      if (v33)
      {
        uint64_t v37 = *(void *)(v109 + 56) + 24 * v32;
        uint64_t v38 = *(void *)v37;
        unint64_t v39 = *(void *)(v37 + 8);
        char v40 = *(unsigned char *)(v37 + 16);
        uint64_t v6 = v108;
        *(void *)uint64_t v37 = v108;
        *(void *)(v37 + 8) = v26;
        char v41 = v107;
        *(unsigned char *)(v37 + 16) = v107;
      }
      else
      {
        *(void *)(v109 + 8 * (v32 >> 6) + 64) |= 1 << v32;
        *(Swift::String *)(*(void *)(v5 + 48) + 16 * v32) = v23;
        uint64_t v42 = *(void *)(v5 + 56) + 24 * v32;
        uint64_t v6 = v108;
        *(void *)uint64_t v42 = v108;
        *(void *)(v42 + 8) = v26;
        char v41 = v107;
        *(unsigned char *)(v42 + 16) = v107;
        uint64_t v43 = *(void *)(v5 + 16);
        BOOL v44 = __OFADD__(v43, 1);
        uint64_t v45 = v43 + 1;
        if (v44) {
          goto LABEL_55;
        }
        *(void *)(v5 + 16) = v45;
        swift_bridgeObjectRetain();
        uint64_t v38 = 0;
        unint64_t v39 = 0;
        char v40 = -1;
      }
      ++v22;
      swift_bridgeObjectRelease();
      outlined consume of DatabaseValue((uint64_t)v6, v26, v41);
      outlined consume of DatabaseValue?(v38, v39, v40);
      swift_bridgeObjectRelease();
      uint64_t countAndFlagsBits = v105;
      uint64_t v6 = pStmt;
      if (v105 == v22) {
        goto LABEL_22;
      }
    }
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
LABEL_22:
  uint64_t v46 = sqlite3_reset(v6);
  if (!v46) {
    return v5;
  }
  Swift::Int v47 = v5;
  id v48 = BMSQLDatabaseError(v46, v104, 0);
  swift_getErrorValue();
  uint64_t v49 = Error.localizedDescription.getter();
  Swift::Int v51 = v50;

  Swift::Int v109 = v49;
  Swift::Int v110 = v51;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v52 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  unint64_t v54 = v53;
  swift_bridgeObjectRelease();
  if (one-time initialization token for SQL != -1) {
    swift_once();
  }
  uint64_t v55 = type metadata accessor for Logger();
  __swift_project_value_buffer(v55, (uint64_t)static Logging.SQL);
  swift_bridgeObjectRetain();
  uint64_t v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc();
    uint64_t v59 = swift_slowAlloc();
    Swift::Int v109 = v59;
    *(_DWORD *)uint64_t v58 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, &v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_18E67D000, v56, v57, "SQLExpressionEvaluator: Failed to reset statement with error: %s", v58, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x192FB1900](v59, -1, -1);
    MEMORY[0x192FB1900](v58, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Swift::Int v5 = v47;
  if (sqlite3_sql(pStmt))
  {
    uint64_t v102 = String.init(cString:)();
    specialized Dictionary._Variant.removeValue(forKey:)(v102, v103);
    swift_bridgeObjectRelease();
    sqlite3_finalize(pStmt);
    return v5;
  }
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined consume of DatabaseValue(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3) {
    return outlined consume of Data._Representation(result, a2);
  }
  if (a3 == 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined copy of DatabaseValue(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 3) {
    return outlined copy of Data._Representation(result, a2);
  }
  if (a3 == 2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined consume of DatabaseValue?(uint64_t result, unint64_t a2, char a3)
{
  if (a3 != -1) {
    return outlined consume of DatabaseValue(result, a2, a3);
  }
  return result;
}

uint64_t DatabaseValue.init(stmt:index:)(sqlite3_stmt *a1, int a2)
{
  int v4 = sqlite3_column_type(a1, a2) - 1;
  uint64_t result = 0;
  switch(v4)
  {
    case 0:
      uint64_t result = sqlite3_column_int64(a1, a2);
      break;
    case 1:
      uint64_t result = sqlite3_column_double(a1, a2);
      break;
    case 2:
      if (!sqlite3_column_text(a1, a2))
      {
        __break(1u);
        goto LABEL_10;
      }
      uint64_t result = String.init(cString:)();
      break;
    case 3:
      uint64_t result = (uint64_t)sqlite3_column_blob(a1, a2);
      if (result)
      {
        uint64_t v6 = result;
        int v7 = sqlite3_column_bytes(a1, a2);
        uint64_t result = MEMORY[0x192FAF950](v6, v7);
      }
      break;
    case 4:
      return result;
    default:
LABEL_10:
      _StringGuts.grow(_:)(33);
      swift_bridgeObjectRelease();
      v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_102_0()
{
  return outlined init with copy of StorableValue(v1, v0);
}

void OUTLINED_FUNCTION_102_1(uint64_t a1@<X8>)
{
  *(void *)(a1 + 64) |= v1;
}

uint64_t OUTLINED_FUNCTION_142(uint64_t a1, uint64_t a2)
{
  *(void *)uint64_t v2 = v3;
  *(void *)(v2 + 8) = v4;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  *(unsigned char *)(v2 + 64) = 1;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_109()
{
  return type metadata accessor for Date();
}

uint64_t OUTLINED_FUNCTION_109_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_73()
{
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(unsigned char *)(v0 + 64) = 3;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_73_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_73_3()
{
  return swift_bridgeObjectRelease();
}

void specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t MatchingRecordCache = type metadata accessor for KeyedFirstMatchingRecordCache(0);
  uint64_t v9 = MatchingRecordCache - 8;
  MEMORY[0x1F4188790](MatchingRecordCache);
  Swift::Int v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v3 + *(int *)(v9 + 40);
  specialized OrderedDictionary.updateValue(_:forKey:)(a1, a2, a3);
  uint64_t v13 = *(void *)(*(void *)(v12 + 8) + 16);
  outlined init with copy of StorableValue(v4, (uint64_t)v11, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
  uint64_t v14 = *(void *)&v11[*(int *)(v9 + 44)];
  outlined destroy of StorableValue((uint64_t)v11, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
  if (v14 < v13) {
    specialized OrderedDictionary.removeFirst()();
  }
}

uint64_t specialized OrderedDictionary.updateValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(*(void *)(v3 + 8) + 16) || (specialized __RawDictionaryStorage.find<A>(_:)(), (v7 & 1) == 0))
  {
    Swift::String v8 = *(void **)v3;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for OrderedDictionary<[StorableValue], ChangeRecord?>.KeyWrapper);
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = a3;
    swift_bridgeObjectRetain();
    objc_msgSend(v8, sel_addObject_, v9);
    swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = specialized Dictionary._Variant.updateValue(_:forKey:)(a1, a2, a3);

  return outlined consume of ChangeRecord??(v10, v11);
}

uint64_t specialized Dictionary._Variant.updateValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  uint64_t v9 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(a1, a2, a3, isUniquelyReferenced_nonNull_native);
  *uint64_t v4 = v11;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  specialized __RawDictionaryStorage.find<A>(_:)();
  unint64_t v13 = v12;
  uint64_t v14 = *(void *)(v10 + 16);
  BOOL v15 = (v11 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
    goto LABEL_13;
  }
  char v17 = v11;
  uint64_t v18 = *(void *)(v10 + 24);
  if (v18 >= v16 && (a4 & 1) != 0) {
    goto LABEL_9;
  }
  if (v18 >= v16 && (a4 & 1) == 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], ChangeRecord?>);
    _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v17 & 1) != (v20 & 1))
  {
LABEL_13:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v13 = v19;
LABEL_9:
  uint64_t v21 = *v5;
  if (v17)
  {
    int v22 = (uint64_t *)(*(void *)(v21 + 56) + 16 * v13);
    uint64_t result = *v22;
    *int v22 = a1;
    v22[1] = a2;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v13, a3, a1, a2, v21);
    swift_bridgeObjectRetain();
    return 0;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = a5[7] + 16 * result;
  *(void *)uint64_t v5 = a3;
  *(unsigned char *)(v5 + 8) = a4 & 1;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t result = OUTLINED_FUNCTION_28_0(a1, a2, a3, a4, a5);
  *(void *)(v8 + 8 * result) = v7;
  uint64_t v9 = (void *)(*(void *)(v6 + 56) + 16 * result);
  *uint64_t v9 = v10;
  v9[1] = v11;
  uint64_t v12 = *(void *)(v6 + 16);
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    *(void *)(v6 + 16) = v14;
  }
  return result;
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  OUTLINED_FUNCTION_30_3();
  a21 = v25;
  a22 = v26;
  OUTLINED_FUNCTION_94_1();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v28 = OUTLINED_FUNCTION_35(v27);
  MEMORY[0x1F4188790](v28);
  uint64_t v109 = OUTLINED_FUNCTION_2_9(v29, v101[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v30);
  uint64_t v108 = OUTLINED_FUNCTION_47_1((uint64_t)v101 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v32);
  uint64_t v107 = OUTLINED_FUNCTION_53_1((uint64_t)v101 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_0_4();
  uint64_t v112 = v34;
  MEMORY[0x1F4188790](v35);
  uint64_t v106 = OUTLINED_FUNCTION_7_5(v36, v101[0]);
  OUTLINED_FUNCTION_0_4();
  v111[2] = v37;
  MEMORY[0x1F4188790](v38);
  uint64_t v105 = OUTLINED_FUNCTION_10_2(v39, v101[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v40);
  uint64_t v104 = OUTLINED_FUNCTION_9_4(v41, v101[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_70((uint64_t)v101 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  v111[0] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v44);
  OUTLINED_FUNCTION_5_5(v45, v101[0]);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v47 = OUTLINED_FUNCTION_35(v46);
  MEMORY[0x1F4188790](v47);
  OUTLINED_FUNCTION_4_6(v48, v101[0]);
  uint64_t v50 = MEMORY[0x1F4188790](v49);
  v111[5] = OUTLINED_FUNCTION_16_2(v50, v51, v52, v53, v54, v55, v56, v57, v101[0]);
  OUTLINED_FUNCTION_0_4();
  v101[2] = v58;
  MEMORY[0x1F4188790](v59);
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1F4188790](v60);
  int v62 = (char *)v101 - v61;
  OUTLINED_FUNCTION_24_2((uint64_t)&v110);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<[StorableValue], [[String : StorableValue]]?>);
  OUTLINED_FUNCTION_59_2((uint64_t)&v112 + 4);
  OUTLINED_FUNCTION_58_2();
  if (!v63)
  {
LABEL_65:
    swift_release();
    OUTLINED_FUNCTION_60_2((uint64_t)&v110);
    OUTLINED_FUNCTION_31_2();
    return;
  }
  OUTLINED_FUNCTION_15_2(1 << *((unsigned char *)v22 + 32));
  v101[4] = v64 >> 6;
  OUTLINED_FUNCTION_111_0(*MEMORY[0x1E4F27880]);
  OUTLINED_FUNCTION_85_0(*MEMORY[0x1E4F27878]);
  int v103 = *MEMORY[0x1E4F27888];
  OUTLINED_FUNCTION_117_0();
  OUTLINED_FUNCTION_39_1(*v65);
  OUTLINED_FUNCTION_86_1();
  while (1)
  {
    OUTLINED_FUNCTION_116();
    if (!v67) {
      break;
    }
    OUTLINED_FUNCTION_14_3();
LABEL_23:
    OUTLINED_FUNCTION_115_0();
    if ((v76 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    OUTLINED_FUNCTION_74_1((uint64_t)&a14);
    OUTLINED_FUNCTION_104_0();
    OUTLINED_FUNCTION_67_1();
    if (v23)
    {
      OUTLINED_FUNCTION_8_4((uint64_t)v111);
      while (2)
      {
        OUTLINED_FUNCTION_102_0();
        OUTLINED_FUNCTION_84_1();
        switch(OUTLINED_FUNCTION_88_1())
        {
          case 1u:
            OUTLINED_FUNCTION_98_1();
            if (v79)
            {
              OUTLINED_FUNCTION_57_2(v78);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
              goto LABEL_32;
            }
            double v88 = OUTLINED_FUNCTION_13_0(*(double *)&v78);
            if (v83) {
              goto LABEL_67;
            }
            if (v88 <= -9.22337204e18) {
              goto LABEL_68;
            }
            OUTLINED_FUNCTION_45_2();
            if (!v68) {
              goto LABEL_69;
            }
            Int.hashValue.getter();
            Swift::UInt v77 = Int.hashValue.getter();
            goto LABEL_44;
          case 2u:
            uint64_t v80 = OUTLINED_FUNCTION_56_2();
            outlined init with take of (key: String, value: StorableValue)(v80, v81, (uint64_t *)&demangling cache variable for type metadata for Date?);
            OUTLINED_FUNCTION_89_1();
            uint64_t v82 = type metadata accessor for Date();
            OUTLINED_FUNCTION_20_2(v82);
            if (v83)
            {
              OUTLINED_FUNCTION_92_0();
              OUTLINED_FUNCTION_79_1();
            }
            else
            {
              OUTLINED_FUNCTION_1_0();
              v89();
              OUTLINED_FUNCTION_1_0();
              v90();
              OUTLINED_FUNCTION_1_0();
              v91();
              OUTLINED_FUNCTION_1_0();
              v92();
              OUTLINED_FUNCTION_37_3();
              OUTLINED_FUNCTION_19_2();
              if (v83) {
                goto LABEL_72;
              }
              uint64_t v93 = OUTLINED_FUNCTION_6_8();
              v94(v93);
              OUTLINED_FUNCTION_3_11();
              OUTLINED_FUNCTION_91_0();
              OUTLINED_FUNCTION_2_4();
              v95();
              OUTLINED_FUNCTION_14();
              uint64_t v96 = OUTLINED_FUNCTION_33_3();
              v97(v96);
              OUTLINED_FUNCTION_105_0();
              OUTLINED_FUNCTION_97_1();
              OUTLINED_FUNCTION_81_1();
              Hasher._combine(_:)(v24);
            }
            OUTLINED_FUNCTION_93_1();
LABEL_45:
            outlined destroy of StorableValue((uint64_t)v62);
            OUTLINED_FUNCTION_62_1();
            if (!v83) {
              continue;
            }
            goto LABEL_51;
          case 3u:
          case 4u:
            OUTLINED_FUNCTION_64_1();
            Optional<A>.hashValue.getter();
            OUTLINED_FUNCTION_87_1();
            Swift::UInt v77 = OUTLINED_FUNCTION_103_0();
            goto LABEL_44;
          case 5u:
            OUTLINED_FUNCTION_96_1();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
            lazy protocol witness table accessor for type Data and conformance Data();
            Swift::UInt v84 = OUTLINED_FUNCTION_21_1();
            Hasher._combine(_:)(v84);
            OUTLINED_FUNCTION_66_1();
            goto LABEL_45;
          case 6u:
            uint64_t v85 = OUTLINED_FUNCTION_22_1();
            outlined init with take of (key: String, value: StorableValue)(v85, v86, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            lazy protocol witness table accessor for type UUID and conformance UUID();
            Swift::UInt v87 = OUTLINED_FUNCTION_54_2();
            Hasher._combine(_:)(v87);
            OUTLINED_FUNCTION_38_2();
            goto LABEL_45;
          case 7u:
            Swift::UInt v77 = OUTLINED_FUNCTION_80_1();
            goto LABEL_44;
          default:
            OUTLINED_FUNCTION_36_3();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
LABEL_32:
            Swift::UInt v77 = Optional<A>.hashValue.getter();
LABEL_44:
            Hasher._combine(_:)(v77);
            goto LABEL_45;
        }
      }
    }
LABEL_51:
    int v22 = &v113;
    Hasher._finalize()();
    uint64_t v23 = v101[6];
    OUTLINED_FUNCTION_34_3();
    if (!v83)
    {
      OUTLINED_FUNCTION_83_1();
      goto LABEL_59;
    }
    OUTLINED_FUNCTION_82_1();
    do
    {
      OUTLINED_FUNCTION_75_1();
      if (v83 && (v99 & 1) != 0)
      {
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      OUTLINED_FUNCTION_65_1();
    }
    while (v83);
    OUTLINED_FUNCTION_25();
LABEL_59:
    OUTLINED_FUNCTION_26_3(v98);
  }
  if (__OFADD__(v66, 1))
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  OUTLINED_FUNCTION_51_2();
  if (v68 == v69) {
    goto LABEL_60;
  }
  OUTLINED_FUNCTION_73_1();
  if (v70) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_43_2();
  if (v68 == v69) {
    goto LABEL_60;
  }
  OUTLINED_FUNCTION_68_1();
  if (v71) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_43_2();
  if (v68 == v69) {
    goto LABEL_60;
  }
  OUTLINED_FUNCTION_68_1();
  if (v72) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_51_2();
  if (v68 == v69)
  {
LABEL_60:
    swift_release();
    if (v102)
    {
      OUTLINED_FUNCTION_35_3();
      if (v68 != v69) {
        OUTLINED_FUNCTION_112_0(v100);
      }
      else {
        OUTLINED_FUNCTION_110_0(v100);
      }
      v22[2] = 0;
    }
    goto LABEL_65;
  }
  OUTLINED_FUNCTION_78_1();
  if (v74)
  {
LABEL_22:
    OUTLINED_FUNCTION_17_3();
    goto LABEL_23;
  }
  while (!__OFADD__(v73, 1))
  {
    OUTLINED_FUNCTION_43_2();
    if (v68 == v69) {
      goto LABEL_60;
    }
    OUTLINED_FUNCTION_72_1();
    if (v75) {
      goto LABEL_22;
    }
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  uint64_t *v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  int *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  Swift::UInt v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  Swift::UInt v86;
  uint64_t v87;
  uint64_t v88;
  Swift::UInt v89;
  double v90;
  void (*v91)(void);
  void (*v92)(void);
  void (*v93)(void);
  void (*v94)(void);
  uint64_t v95;
  void (*v96)(uint64_t);
  uint64_t v97;
  void (*v98)(uint64_t);
  uint64_t v99;
  void (*v100)(uint64_t);
  unint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106[12];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void v117[11];
  uint64_t v118;

  OUTLINED_FUNCTION_30_3();
  a21 = v25;
  a22 = v26;
  OUTLINED_FUNCTION_94_1();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v28 = OUTLINED_FUNCTION_35(v27);
  MEMORY[0x1F4188790](v28);
  uint64_t v115 = OUTLINED_FUNCTION_2_9(v29, v106[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v30);
  uint64_t v112 = OUTLINED_FUNCTION_42_1(v31, v106[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v32);
  uint64_t v111 = OUTLINED_FUNCTION_41_2(v33, v106[0]);
  OUTLINED_FUNCTION_0_4();
  v117[7] = v34;
  MEMORY[0x1F4188790](v35);
  uint64_t v110 = OUTLINED_FUNCTION_7_5(v36, v106[0]);
  OUTLINED_FUNCTION_0_4();
  v117[3] = v37;
  MEMORY[0x1F4188790](v38);
  uint64_t v109 = OUTLINED_FUNCTION_10_2(v39, v106[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v40);
  uint64_t v108 = OUTLINED_FUNCTION_9_4(v41, v106[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_70((uint64_t)v106 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  v117[1] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v44);
  OUTLINED_FUNCTION_5_5(v45, v106[0]);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v47 = OUTLINED_FUNCTION_35(v46);
  MEMORY[0x1F4188790](v47);
  OUTLINED_FUNCTION_4_6(v48, v106[0]);
  uint64_t v50 = MEMORY[0x1F4188790](v49);
  v117[6] = OUTLINED_FUNCTION_16_2(v50, v51, v52, v53, v54, v55, v56, v57, v106[0]);
  OUTLINED_FUNCTION_0_4();
  v106[1] = v58;
  MEMORY[0x1F4188790](v59);
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1F4188790](v60);
  int v62 = (char *)v106 - v61;
  OUTLINED_FUNCTION_24_2((uint64_t)&v116);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<[StorableValue], (value: [[String : StorableValue]], event: CacheEvent)>);
  OUTLINED_FUNCTION_48_1();
  OUTLINED_FUNCTION_58_2();
  if (!v63)
  {
LABEL_65:
    swift_release();
    OUTLINED_FUNCTION_60_2((uint64_t)&v116);
    OUTLINED_FUNCTION_31_2();
    return;
  }
  OUTLINED_FUNCTION_15_2(1 << *((unsigned char *)v22 + 32));
  OUTLINED_FUNCTION_113_0(v64);
  OUTLINED_FUNCTION_70_1(*v65);
  OUTLINED_FUNCTION_61_1(*MEMORY[0x1E4F27878]);
  HIDWORD(v107) = *MEMORY[0x1E4F27888];
  OUTLINED_FUNCTION_76_1();
  OUTLINED_FUNCTION_11_3(*v66);
  OUTLINED_FUNCTION_55_2();
  while (1)
  {
    OUTLINED_FUNCTION_116();
    if (!v68) {
      break;
    }
    OUTLINED_FUNCTION_14_3();
LABEL_23:
    uint64_t v113 = *(unsigned __int8 *)(v22[7] + 16 * v69 + 8);
    OUTLINED_FUNCTION_90_1();
    if ((v78 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    OUTLINED_FUNCTION_74_1((uint64_t)&a14);
    OUTLINED_FUNCTION_104_0();
    OUTLINED_FUNCTION_67_1();
    if (v23)
    {
      OUTLINED_FUNCTION_8_4((uint64_t)v117);
      while (2)
      {
        OUTLINED_FUNCTION_102_0();
        OUTLINED_FUNCTION_84_1();
        switch(OUTLINED_FUNCTION_88_1())
        {
          case 1u:
            OUTLINED_FUNCTION_98_1();
            if (v81)
            {
              OUTLINED_FUNCTION_57_2(v80);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
              goto LABEL_32;
            }
            uint64_t v90 = OUTLINED_FUNCTION_13_0(*(double *)&v80);
            if (v85) {
              goto LABEL_67;
            }
            if (v90 <= -9.22337204e18) {
              goto LABEL_68;
            }
            OUTLINED_FUNCTION_45_2();
            if (!v70) {
              goto LABEL_69;
            }
            Int.hashValue.getter();
            char v79 = Int.hashValue.getter();
            goto LABEL_44;
          case 2u:
            uint64_t v82 = OUTLINED_FUNCTION_56_2();
            outlined init with take of (key: String, value: StorableValue)(v82, v83, (uint64_t *)&demangling cache variable for type metadata for Date?);
            OUTLINED_FUNCTION_89_1();
            Swift::UInt v84 = type metadata accessor for Date();
            OUTLINED_FUNCTION_20_2(v84);
            if (v85)
            {
              OUTLINED_FUNCTION_92_0();
              OUTLINED_FUNCTION_79_1();
            }
            else
            {
              OUTLINED_FUNCTION_1_0();
              v91();
              OUTLINED_FUNCTION_1_0();
              v92();
              OUTLINED_FUNCTION_1_0();
              v93();
              OUTLINED_FUNCTION_1_0();
              v94();
              OUTLINED_FUNCTION_37_3();
              OUTLINED_FUNCTION_19_2();
              if (v85) {
                goto LABEL_72;
              }
              uint64_t v95 = OUTLINED_FUNCTION_6_8();
              v96(v95);
              OUTLINED_FUNCTION_3_11();
              OUTLINED_FUNCTION_91_0();
              os_log_type_t v97 = OUTLINED_FUNCTION_23_3();
              v98(v97);
              OUTLINED_FUNCTION_14();
              char v99 = OUTLINED_FUNCTION_33_3();
              v100(v99);
              OUTLINED_FUNCTION_105_0();
              OUTLINED_FUNCTION_97_1();
              OUTLINED_FUNCTION_81_1();
              Hasher._combine(_:)(v24);
            }
            OUTLINED_FUNCTION_93_1();
LABEL_45:
            outlined destroy of StorableValue((uint64_t)v62);
            OUTLINED_FUNCTION_62_1();
            if (!v85) {
              continue;
            }
            goto LABEL_51;
          case 3u:
          case 4u:
            OUTLINED_FUNCTION_64_1();
            Optional<A>.hashValue.getter();
            OUTLINED_FUNCTION_87_1();
            char v79 = OUTLINED_FUNCTION_103_0();
            goto LABEL_44;
          case 5u:
            OUTLINED_FUNCTION_96_1();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
            lazy protocol witness table accessor for type Data and conformance Data();
            uint64_t v86 = OUTLINED_FUNCTION_21_1();
            Hasher._combine(_:)(v86);
            OUTLINED_FUNCTION_66_1();
            goto LABEL_45;
          case 6u:
            Swift::UInt v87 = OUTLINED_FUNCTION_22_1();
            outlined init with take of (key: String, value: StorableValue)(v87, v88, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            lazy protocol witness table accessor for type UUID and conformance UUID();
            id v89 = OUTLINED_FUNCTION_54_2();
            Hasher._combine(_:)(v89);
            OUTLINED_FUNCTION_38_2();
            goto LABEL_45;
          case 7u:
            char v79 = OUTLINED_FUNCTION_80_1();
            goto LABEL_44;
          default:
            OUTLINED_FUNCTION_36_3();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
LABEL_32:
            char v79 = Optional<A>.hashValue.getter();
LABEL_44:
            Hasher._combine(_:)(v79);
            goto LABEL_45;
        }
      }
    }
LABEL_51:
    int v22 = &v118;
    Hasher._finalize()();
    OUTLINED_FUNCTION_18_2();
    if (!v85)
    {
      OUTLINED_FUNCTION_50_2();
      goto LABEL_59;
    }
    OUTLINED_FUNCTION_49_1();
    do
    {
      OUTLINED_FUNCTION_75_1();
      if (v85 && (v102 & 1) != 0)
      {
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      OUTLINED_FUNCTION_65_1();
    }
    while (v85);
    OUTLINED_FUNCTION_25();
LABEL_59:
    OUTLINED_FUNCTION_63_1(v101);
    *(void *)int v103 = v114;
    *(unsigned char *)(v103 + 8) = v113;
    OUTLINED_FUNCTION_29_2();
  }
  if (__OFADD__(v67, 1))
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  OUTLINED_FUNCTION_51_2();
  if (v70 == v71) {
    goto LABEL_60;
  }
  OUTLINED_FUNCTION_73_1();
  if (v72) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_28_3();
  if (v70 == v71) {
    goto LABEL_60;
  }
  OUTLINED_FUNCTION_52_1();
  if (v73) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_28_3();
  if (v70 == v71) {
    goto LABEL_60;
  }
  OUTLINED_FUNCTION_52_1();
  if (v74) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_51_2();
  if (v70 == v71)
  {
LABEL_60:
    swift_release();
    OUTLINED_FUNCTION_90_1();
    if (v104)
    {
      OUTLINED_FUNCTION_35_3();
      if (v70 != v71) {
        OUTLINED_FUNCTION_71_0(v105);
      }
      else {
        OUTLINED_FUNCTION_69_1(v105);
      }
      v22[2] = 0;
    }
    goto LABEL_65;
  }
  OUTLINED_FUNCTION_78_1();
  if (v76)
  {
LABEL_22:
    OUTLINED_FUNCTION_17_3();
    goto LABEL_23;
  }
  while (!__OFADD__(v75, 1))
  {
    OUTLINED_FUNCTION_28_3();
    if (v70 == v71) {
      goto LABEL_60;
    }
    OUTLINED_FUNCTION_72_1();
    if (v77) {
      goto LABEL_22;
    }
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  uint64_t *v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  Swift::UInt v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  Swift::UInt v84;
  uint64_t v85;
  uint64_t v86;
  Swift::UInt v87;
  double v88;
  void (*v89)(void);
  void (*v90)(void);
  void (*v91)(void);
  void (*v92)(void);
  uint64_t v93;
  void (*v94)(uint64_t);
  void (*v95)(void);
  uint64_t v96;
  void (*v97)(uint64_t);
  unint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101[8];
  char v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void v111[6];
  uint64_t v112;
  uint64_t v113;

  OUTLINED_FUNCTION_30_3();
  a21 = v25;
  a22 = v26;
  OUTLINED_FUNCTION_94_1();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v28 = OUTLINED_FUNCTION_35(v27);
  MEMORY[0x1F4188790](v28);
  uint64_t v109 = OUTLINED_FUNCTION_2_9(v29, v101[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v30);
  uint64_t v108 = OUTLINED_FUNCTION_47_1((uint64_t)v101 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v32);
  uint64_t v107 = OUTLINED_FUNCTION_53_1((uint64_t)v101 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_0_4();
  uint64_t v112 = v34;
  MEMORY[0x1F4188790](v35);
  uint64_t v106 = OUTLINED_FUNCTION_7_5(v36, v101[0]);
  OUTLINED_FUNCTION_0_4();
  v111[2] = v37;
  MEMORY[0x1F4188790](v38);
  uint64_t v105 = OUTLINED_FUNCTION_10_2(v39, v101[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v40);
  uint64_t v104 = OUTLINED_FUNCTION_9_4(v41, v101[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_70((uint64_t)v101 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  v111[0] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v44);
  OUTLINED_FUNCTION_5_5(v45, v101[0]);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v47 = OUTLINED_FUNCTION_35(v46);
  MEMORY[0x1F4188790](v47);
  OUTLINED_FUNCTION_4_6(v48, v101[0]);
  uint64_t v50 = MEMORY[0x1F4188790](v49);
  v111[5] = OUTLINED_FUNCTION_16_2(v50, v51, v52, v53, v54, v55, v56, v57, v101[0]);
  OUTLINED_FUNCTION_0_4();
  v101[2] = v58;
  MEMORY[0x1F4188790](v59);
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1F4188790](v60);
  int v62 = (char *)v101 - v61;
  OUTLINED_FUNCTION_24_2((uint64_t)&v110);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<[StorableValue], [[String : StorableValue]]>);
  OUTLINED_FUNCTION_59_2((uint64_t)&v112 + 4);
  OUTLINED_FUNCTION_58_2();
  if (!v63)
  {
LABEL_65:
    swift_release();
    OUTLINED_FUNCTION_60_2((uint64_t)&v110);
    OUTLINED_FUNCTION_31_2();
    return;
  }
  OUTLINED_FUNCTION_15_2(1 << *((unsigned char *)v22 + 32));
  v101[4] = v64 >> 6;
  OUTLINED_FUNCTION_111_0(*MEMORY[0x1E4F27880]);
  OUTLINED_FUNCTION_85_0(*MEMORY[0x1E4F27878]);
  int v103 = *MEMORY[0x1E4F27888];
  OUTLINED_FUNCTION_117_0();
  OUTLINED_FUNCTION_39_1(*v65);
  OUTLINED_FUNCTION_86_1();
  while (1)
  {
    OUTLINED_FUNCTION_116();
    if (!v67) {
      break;
    }
    OUTLINED_FUNCTION_14_3();
LABEL_23:
    OUTLINED_FUNCTION_115_0();
    if ((v76 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    OUTLINED_FUNCTION_74_1((uint64_t)&a14);
    OUTLINED_FUNCTION_104_0();
    OUTLINED_FUNCTION_67_1();
    if (v23)
    {
      OUTLINED_FUNCTION_8_4((uint64_t)v111);
      while (2)
      {
        OUTLINED_FUNCTION_102_0();
        OUTLINED_FUNCTION_84_1();
        switch(OUTLINED_FUNCTION_88_1())
        {
          case 1u:
            OUTLINED_FUNCTION_98_1();
            if (v79)
            {
              OUTLINED_FUNCTION_57_2(v78);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
              goto LABEL_32;
            }
            double v88 = OUTLINED_FUNCTION_13_0(*(double *)&v78);
            if (v83) {
              goto LABEL_67;
            }
            if (v88 <= -9.22337204e18) {
              goto LABEL_68;
            }
            OUTLINED_FUNCTION_45_2();
            if (!v68) {
              goto LABEL_69;
            }
            Int.hashValue.getter();
            Swift::UInt v77 = Int.hashValue.getter();
            goto LABEL_44;
          case 2u:
            uint64_t v80 = OUTLINED_FUNCTION_56_2();
            outlined init with take of (key: String, value: StorableValue)(v80, v81, (uint64_t *)&demangling cache variable for type metadata for Date?);
            OUTLINED_FUNCTION_89_1();
            uint64_t v82 = type metadata accessor for Date();
            OUTLINED_FUNCTION_20_2(v82);
            if (v83)
            {
              OUTLINED_FUNCTION_92_0();
              OUTLINED_FUNCTION_79_1();
            }
            else
            {
              OUTLINED_FUNCTION_1_0();
              v89();
              OUTLINED_FUNCTION_1_0();
              v90();
              OUTLINED_FUNCTION_1_0();
              v91();
              OUTLINED_FUNCTION_1_0();
              v92();
              OUTLINED_FUNCTION_37_3();
              OUTLINED_FUNCTION_19_2();
              if (v83) {
                goto LABEL_72;
              }
              uint64_t v93 = OUTLINED_FUNCTION_6_8();
              v94(v93);
              OUTLINED_FUNCTION_3_11();
              OUTLINED_FUNCTION_91_0();
              OUTLINED_FUNCTION_2_4();
              v95();
              OUTLINED_FUNCTION_14();
              uint64_t v96 = OUTLINED_FUNCTION_33_3();
              v97(v96);
              OUTLINED_FUNCTION_105_0();
              OUTLINED_FUNCTION_97_1();
              OUTLINED_FUNCTION_81_1();
              Hasher._combine(_:)(v24);
            }
            OUTLINED_FUNCTION_93_1();
LABEL_45:
            outlined destroy of StorableValue((uint64_t)v62);
            OUTLINED_FUNCTION_62_1();
            if (!v83) {
              continue;
            }
            goto LABEL_51;
          case 3u:
          case 4u:
            OUTLINED_FUNCTION_64_1();
            Optional<A>.hashValue.getter();
            OUTLINED_FUNCTION_87_1();
            Swift::UInt v77 = OUTLINED_FUNCTION_103_0();
            goto LABEL_44;
          case 5u:
            OUTLINED_FUNCTION_96_1();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
            lazy protocol witness table accessor for type Data and conformance Data();
            Swift::UInt v84 = OUTLINED_FUNCTION_21_1();
            Hasher._combine(_:)(v84);
            OUTLINED_FUNCTION_66_1();
            goto LABEL_45;
          case 6u:
            uint64_t v85 = OUTLINED_FUNCTION_22_1();
            outlined init with take of (key: String, value: StorableValue)(v85, v86, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            lazy protocol witness table accessor for type UUID and conformance UUID();
            Swift::UInt v87 = OUTLINED_FUNCTION_54_2();
            Hasher._combine(_:)(v87);
            OUTLINED_FUNCTION_38_2();
            goto LABEL_45;
          case 7u:
            Swift::UInt v77 = OUTLINED_FUNCTION_80_1();
            goto LABEL_44;
          default:
            OUTLINED_FUNCTION_36_3();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
LABEL_32:
            Swift::UInt v77 = Optional<A>.hashValue.getter();
LABEL_44:
            Hasher._combine(_:)(v77);
            goto LABEL_45;
        }
      }
    }
LABEL_51:
    int v22 = &v113;
    Hasher._finalize()();
    uint64_t v23 = v101[6];
    OUTLINED_FUNCTION_34_3();
    if (!v83)
    {
      OUTLINED_FUNCTION_83_1();
      goto LABEL_59;
    }
    OUTLINED_FUNCTION_82_1();
    do
    {
      OUTLINED_FUNCTION_75_1();
      if (v83 && (v99 & 1) != 0)
      {
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      OUTLINED_FUNCTION_65_1();
    }
    while (v83);
    OUTLINED_FUNCTION_25();
LABEL_59:
    OUTLINED_FUNCTION_26_3(v98);
  }
  if (__OFADD__(v66, 1))
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  OUTLINED_FUNCTION_51_2();
  if (v68 == v69) {
    goto LABEL_60;
  }
  OUTLINED_FUNCTION_73_1();
  if (v70) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_43_2();
  if (v68 == v69) {
    goto LABEL_60;
  }
  OUTLINED_FUNCTION_68_1();
  if (v71) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_43_2();
  if (v68 == v69) {
    goto LABEL_60;
  }
  OUTLINED_FUNCTION_68_1();
  if (v72) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_51_2();
  if (v68 == v69)
  {
LABEL_60:
    swift_release();
    if (v102)
    {
      OUTLINED_FUNCTION_35_3();
      if (v68 != v69) {
        OUTLINED_FUNCTION_112_0(v100);
      }
      else {
        OUTLINED_FUNCTION_110_0(v100);
      }
      v22[2] = 0;
    }
    goto LABEL_65;
  }
  OUTLINED_FUNCTION_78_1();
  if (v74)
  {
LABEL_22:
    OUTLINED_FUNCTION_17_3();
    goto LABEL_23;
  }
  while (!__OFADD__(v73, 1))
  {
    OUTLINED_FUNCTION_43_2();
    if (v68 == v69) {
      goto LABEL_60;
    }
    OUTLINED_FUNCTION_72_1();
    if (v75) {
      goto LABEL_22;
    }
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  uint64_t *v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  int *v65;
  int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  Swift::UInt v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  Swift::UInt v86;
  uint64_t v87;
  uint64_t v88;
  Swift::UInt v89;
  double v90;
  void (*v91)(void);
  void (*v92)(void);
  void (*v93)(void);
  void (*v94)(void);
  uint64_t v95;
  void (*v96)(uint64_t);
  uint64_t v97;
  void (*v98)(uint64_t);
  uint64_t v99;
  void (*v100)(uint64_t);
  unint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106[12];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void v115[11];
  uint64_t v116;

  OUTLINED_FUNCTION_30_3();
  a21 = v25;
  a22 = v26;
  OUTLINED_FUNCTION_94_1();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v28 = OUTLINED_FUNCTION_35(v27);
  MEMORY[0x1F4188790](v28);
  uint64_t v113 = OUTLINED_FUNCTION_2_9(v29, v106[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v30);
  uint64_t v112 = OUTLINED_FUNCTION_42_1(v31, v106[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v32);
  uint64_t v111 = OUTLINED_FUNCTION_41_2(v33, v106[0]);
  OUTLINED_FUNCTION_0_4();
  v115[7] = v34;
  MEMORY[0x1F4188790](v35);
  uint64_t v110 = OUTLINED_FUNCTION_7_5(v36, v106[0]);
  OUTLINED_FUNCTION_0_4();
  v115[3] = v37;
  MEMORY[0x1F4188790](v38);
  uint64_t v109 = OUTLINED_FUNCTION_10_2(v39, v106[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v40);
  uint64_t v108 = OUTLINED_FUNCTION_9_4(v41, v106[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_70((uint64_t)v106 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  v115[1] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v44);
  OUTLINED_FUNCTION_5_5(v45, v106[0]);
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v47 = OUTLINED_FUNCTION_35(v46);
  MEMORY[0x1F4188790](v47);
  OUTLINED_FUNCTION_4_6(v48, v106[0]);
  uint64_t v50 = MEMORY[0x1F4188790](v49);
  v115[6] = OUTLINED_FUNCTION_16_2(v50, v51, v52, v53, v54, v55, v56, v57, v106[0]);
  OUTLINED_FUNCTION_0_4();
  v106[1] = v58;
  MEMORY[0x1F4188790](v59);
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1F4188790](v60);
  int v62 = (char *)v106 - v61;
  OUTLINED_FUNCTION_24_2((uint64_t)&v114);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<[StorableValue], ChangeRecord>);
  OUTLINED_FUNCTION_48_1();
  OUTLINED_FUNCTION_58_2();
  if (!v63)
  {
LABEL_65:
    swift_release();
    OUTLINED_FUNCTION_60_2((uint64_t)&v114);
    OUTLINED_FUNCTION_31_2();
    return;
  }
  OUTLINED_FUNCTION_15_2(1 << *((unsigned char *)v22 + 32));
  OUTLINED_FUNCTION_113_0(v64);
  OUTLINED_FUNCTION_70_1(*v65);
  OUTLINED_FUNCTION_61_1(*MEMORY[0x1E4F27878]);
  HIDWORD(v107) = *MEMORY[0x1E4F27888];
  OUTLINED_FUNCTION_76_1();
  OUTLINED_FUNCTION_11_3(*v66);
  OUTLINED_FUNCTION_55_2();
  while (1)
  {
    OUTLINED_FUNCTION_116();
    if (!v68) {
      break;
    }
    OUTLINED_FUNCTION_14_3();
LABEL_23:
    OUTLINED_FUNCTION_121_0((unsigned __int8 *)(v22[7] + 16 * v69));
    OUTLINED_FUNCTION_90_1();
    if ((v78 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    OUTLINED_FUNCTION_74_1((uint64_t)&a13);
    OUTLINED_FUNCTION_104_0();
    OUTLINED_FUNCTION_67_1();
    if (v23)
    {
      OUTLINED_FUNCTION_8_4((uint64_t)v115);
      while (2)
      {
        OUTLINED_FUNCTION_102_0();
        OUTLINED_FUNCTION_84_1();
        switch(OUTLINED_FUNCTION_88_1())
        {
          case 1u:
            OUTLINED_FUNCTION_98_1();
            if (v81)
            {
              OUTLINED_FUNCTION_57_2(v80);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
              goto LABEL_32;
            }
            uint64_t v90 = OUTLINED_FUNCTION_13_0(*(double *)&v80);
            if (v85) {
              goto LABEL_67;
            }
            if (v90 <= -9.22337204e18) {
              goto LABEL_68;
            }
            OUTLINED_FUNCTION_45_2();
            if (!v70) {
              goto LABEL_69;
            }
            Int.hashValue.getter();
            char v79 = Int.hashValue.getter();
            goto LABEL_44;
          case 2u:
            uint64_t v82 = OUTLINED_FUNCTION_56_2();
            outlined init with take of (key: String, value: StorableValue)(v82, v83, (uint64_t *)&demangling cache variable for type metadata for Date?);
            OUTLINED_FUNCTION_89_1();
            Swift::UInt v84 = type metadata accessor for Date();
            OUTLINED_FUNCTION_20_2(v84);
            if (v85)
            {
              OUTLINED_FUNCTION_92_0();
              OUTLINED_FUNCTION_79_1();
            }
            else
            {
              OUTLINED_FUNCTION_1_0();
              v91();
              OUTLINED_FUNCTION_1_0();
              v92();
              OUTLINED_FUNCTION_1_0();
              v93();
              OUTLINED_FUNCTION_1_0();
              v94();
              OUTLINED_FUNCTION_37_3();
              OUTLINED_FUNCTION_19_2();
              if (v85) {
                goto LABEL_72;
              }
              uint64_t v95 = OUTLINED_FUNCTION_6_8();
              v96(v95);
              OUTLINED_FUNCTION_3_11();
              OUTLINED_FUNCTION_91_0();
              os_log_type_t v97 = OUTLINED_FUNCTION_23_3();
              v98(v97);
              OUTLINED_FUNCTION_14();
              char v99 = OUTLINED_FUNCTION_33_3();
              v100(v99);
              OUTLINED_FUNCTION_105_0();
              OUTLINED_FUNCTION_97_1();
              OUTLINED_FUNCTION_81_1();
              Hasher._combine(_:)(v24);
            }
            OUTLINED_FUNCTION_93_1();
LABEL_45:
            outlined destroy of StorableValue((uint64_t)v62);
            OUTLINED_FUNCTION_62_1();
            if (!v85) {
              continue;
            }
            goto LABEL_51;
          case 3u:
          case 4u:
            OUTLINED_FUNCTION_64_1();
            Optional<A>.hashValue.getter();
            OUTLINED_FUNCTION_87_1();
            char v79 = OUTLINED_FUNCTION_103_0();
            goto LABEL_44;
          case 5u:
            OUTLINED_FUNCTION_96_1();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
            lazy protocol witness table accessor for type Data and conformance Data();
            uint64_t v86 = OUTLINED_FUNCTION_21_1();
            Hasher._combine(_:)(v86);
            OUTLINED_FUNCTION_66_1();
            goto LABEL_45;
          case 6u:
            Swift::UInt v87 = OUTLINED_FUNCTION_22_1();
            outlined init with take of (key: String, value: StorableValue)(v87, v88, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            lazy protocol witness table accessor for type UUID and conformance UUID();
            id v89 = OUTLINED_FUNCTION_54_2();
            Hasher._combine(_:)(v89);
            OUTLINED_FUNCTION_38_2();
            goto LABEL_45;
          case 7u:
            char v79 = OUTLINED_FUNCTION_80_1();
            goto LABEL_44;
          default:
            OUTLINED_FUNCTION_36_3();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
LABEL_32:
            char v79 = Optional<A>.hashValue.getter();
LABEL_44:
            Hasher._combine(_:)(v79);
            goto LABEL_45;
        }
      }
    }
LABEL_51:
    int v22 = &v116;
    Hasher._finalize()();
    OUTLINED_FUNCTION_18_2();
    if (!v85)
    {
      OUTLINED_FUNCTION_50_2();
      goto LABEL_59;
    }
    OUTLINED_FUNCTION_49_1();
    do
    {
      OUTLINED_FUNCTION_75_1();
      if (v85 && (v102 & 1) != 0)
      {
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
        goto LABEL_70;
      }
      OUTLINED_FUNCTION_65_1();
    }
    while (v85);
    OUTLINED_FUNCTION_25();
LABEL_59:
    OUTLINED_FUNCTION_63_1(v101);
    OUTLINED_FUNCTION_95_1(v103);
    OUTLINED_FUNCTION_29_2();
  }
  if (__OFADD__(v67, 1))
  {
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  OUTLINED_FUNCTION_51_2();
  if (v70 == v71) {
    goto LABEL_60;
  }
  OUTLINED_FUNCTION_73_1();
  if (v72) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_28_3();
  if (v70 == v71) {
    goto LABEL_60;
  }
  OUTLINED_FUNCTION_52_1();
  if (v73) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_28_3();
  if (v70 == v71) {
    goto LABEL_60;
  }
  OUTLINED_FUNCTION_52_1();
  if (v74) {
    goto LABEL_22;
  }
  OUTLINED_FUNCTION_51_2();
  if (v70 == v71)
  {
LABEL_60:
    swift_release();
    OUTLINED_FUNCTION_90_1();
    if (v104)
    {
      OUTLINED_FUNCTION_35_3();
      if (v70 != v71) {
        OUTLINED_FUNCTION_71_0(v105);
      }
      else {
        OUTLINED_FUNCTION_69_1(v105);
      }
      v22[2] = 0;
    }
    goto LABEL_65;
  }
  OUTLINED_FUNCTION_78_1();
  if (v76)
  {
LABEL_22:
    OUTLINED_FUNCTION_17_3();
    goto LABEL_23;
  }
  while (!__OFADD__(v75, 1))
  {
    OUTLINED_FUNCTION_28_3();
    if (v70 == v71) {
      goto LABEL_60;
    }
    OUTLINED_FUNCTION_72_1();
    if (v77) {
      goto LABEL_22;
    }
  }
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

{
  void *v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t i;
  char v81;
  char v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::UInt v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  Swift::UInt v96;
  uint64_t v97;
  uint64_t v98;
  Swift::UInt v99;
  double v100;
  void (*v101)(void);
  void (*v102)(void);
  void (*v103)(void);
  void (*v104)(void);
  uint64_t v105;
  void (*v106)(uint64_t);
  void (*v107)(void);
  uint64_t v108;
  void (*v109)(uint64_t);
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116[3];
  void *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void v142[4];
  uint64_t v143;
  unsigned char v144[12];
  uint64_t v145;

  OUTLINED_FUNCTION_30_3();
  a21 = v25;
  a22 = v26;
  OUTLINED_FUNCTION_94_1();
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v28 = OUTLINED_FUNCTION_35(v27);
  MEMORY[0x1F4188790](v28);
  uint64_t v141 = OUTLINED_FUNCTION_2_9(v29, v116[0]);
  OUTLINED_FUNCTION_0_4();
  uint64_t v31 = v30;
  MEMORY[0x1F4188790](v32);
  Swift::String v137 = OUTLINED_FUNCTION_47_1((uint64_t)v116 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_0_4();
  uint64_t v35 = v34;
  MEMORY[0x1F4188790](v36);
  uint64_t v136 = OUTLINED_FUNCTION_53_1((uint64_t)v116 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_0_4();
  uint64_t v145 = v38;
  MEMORY[0x1F4188790](v39);
  uint64_t v135 = OUTLINED_FUNCTION_7_5(v40, v116[0]);
  OUTLINED_FUNCTION_0_4();
  int64_t v143 = v41;
  MEMORY[0x1F4188790](v42);
  char v134 = OUTLINED_FUNCTION_10_2(v43, v116[0]);
  OUTLINED_FUNCTION_0_4();
  uint64_t v45 = v44;
  MEMORY[0x1F4188790](v46);
  unint64_t v133 = OUTLINED_FUNCTION_9_4(v47, v116[0]);
  OUTLINED_FUNCTION_0_4();
  uint64_t v49 = v48;
  MEMORY[0x1F4188790](v50);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_70(v51);
  v142[2] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v52);
  OUTLINED_FUNCTION_5_5(v53, v116[0]);
  uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v55 = OUTLINED_FUNCTION_35(v54);
  MEMORY[0x1F4188790](v55);
  OUTLINED_FUNCTION_4_6(v56, v116[0]);
  uint64_t v58 = MEMORY[0x1F4188790](v57);
  *(void *)&v144[4] = OUTLINED_FUNCTION_16_2(v58, v59, v60, v61, v62, v63, v64, v65, v116[0]);
  OUTLINED_FUNCTION_0_4();
  v116[2] = v66;
  MEMORY[0x1F4188790](v67);
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1F4188790](v68);
  uint64_t v70 = (char *)v116 - v69;
  OUTLINED_FUNCTION_24_2((uint64_t)&v141);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<[StorableValue], (value: ChangeRecord, event: CacheEvent)>);
  OUTLINED_FUNCTION_59_2((uint64_t)v144);
  OUTLINED_FUNCTION_58_2();
  if (!v71) {
    goto LABEL_66;
  }
  uint64_t v117 = v22 + 8;
  OUTLINED_FUNCTION_118_0();
  uint64_t v72 = v35;
  uint64_t v75 = v74 & v73;
  unint64_t v118 = (unint64_t)(v76 + 63) >> 6;
  Swift::Bool v132 = *MEMORY[0x1E4F27880];
  char v131 = v45 + 104;
  unint64_t v130 = *MEMORY[0x1E4F27878];
  Swift::Int v129 = v143 + 104;
  BOOL v128 = *MEMORY[0x1E4F27888];
  uint64_t v127 = v145 + 104;
  HIDWORD(v126) = *MEMORY[0x1E4F27890];
  unint64_t v125 = v72 + 104;
  uint64_t v124 = v31 + 32;
  char v123 = v49 + 8;
  int v119 = v23 + 64;
  swift_retain();
  Swift::UInt v77 = v75;
  uint64_t v78 = 0;
  char v79 = 24;
  uint64_t v121 = v22;
  uint64_t v120 = v23;
  if (!v75) {
    goto LABEL_4;
  }
LABEL_3:
  uint64_t v140 = (v77 - 1) & v77;
  uint64_t v139 = v78;
  for (uint64_t i = __clz(__rbit64(v77)) | (v78 << 6); ; uint64_t i = __clz(__rbit64(v83)) + (v85 << 6))
  {
    OUTLINED_FUNCTION_121_0((unsigned __int8 *)(v22[7] + i * v79));
    uint64_t v138 = *(unsigned __int8 *)(v88 + 16);
    if ((v122 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    OUTLINED_FUNCTION_74_1((uint64_t)&a13);
    OUTLINED_FUNCTION_104_0();
    OUTLINED_FUNCTION_67_1();
    if (v23)
    {
      OUTLINED_FUNCTION_8_4((uint64_t)v142);
      while (2)
      {
        OUTLINED_FUNCTION_102_0();
        OUTLINED_FUNCTION_84_1();
        switch(OUTLINED_FUNCTION_88_1())
        {
          case 1u:
            OUTLINED_FUNCTION_98_1();
            if (v91)
            {
              OUTLINED_FUNCTION_57_2(v90);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
              goto LABEL_32;
            }
            uint64_t v100 = OUTLINED_FUNCTION_13_0(*(double *)&v90);
            if (v95) {
              goto LABEL_68;
            }
            if (v100 <= -9.22337204e18) {
              goto LABEL_69;
            }
            OUTLINED_FUNCTION_45_2();
            if (!v81) {
              goto LABEL_70;
            }
            Int.hashValue.getter();
            id v89 = Int.hashValue.getter();
            goto LABEL_44;
          case 2u:
            uint64_t v92 = OUTLINED_FUNCTION_56_2();
            outlined init with take of (key: String, value: StorableValue)(v92, v93, (uint64_t *)&demangling cache variable for type metadata for Date?);
            OUTLINED_FUNCTION_89_1();
            unint64_t v94 = type metadata accessor for Date();
            OUTLINED_FUNCTION_20_2(v94);
            if (v95)
            {
              OUTLINED_FUNCTION_92_0();
              OUTLINED_FUNCTION_79_1();
            }
            else
            {
              OUTLINED_FUNCTION_1_0();
              v101();
              OUTLINED_FUNCTION_1_0();
              v102();
              OUTLINED_FUNCTION_1_0();
              v103();
              OUTLINED_FUNCTION_106();
              OUTLINED_FUNCTION_1_0();
              v104();
              OUTLINED_FUNCTION_37_3();
              OUTLINED_FUNCTION_19_2();
              if (v95) {
                goto LABEL_73;
              }
              OUTLINED_FUNCTION_106();
              uint64_t v105 = OUTLINED_FUNCTION_6_8();
              v106(v105);
              OUTLINED_FUNCTION_3_11();
              OUTLINED_FUNCTION_91_0();
              OUTLINED_FUNCTION_2_4();
              v107();
              OUTLINED_FUNCTION_14();
              uint64_t v108 = OUTLINED_FUNCTION_33_3();
              v109(v108);
              OUTLINED_FUNCTION_105_0();
              OUTLINED_FUNCTION_97_1();
              OUTLINED_FUNCTION_81_1();
              Hasher._combine(_:)(v24);
            }
            OUTLINED_FUNCTION_93_1();
LABEL_45:
            outlined destroy of StorableValue((uint64_t)v70);
            OUTLINED_FUNCTION_62_1();
            if (!v95) {
              continue;
            }
            goto LABEL_51;
          case 3u:
          case 4u:
            OUTLINED_FUNCTION_64_1();
            Optional<A>.hashValue.getter();
            OUTLINED_FUNCTION_87_1();
            id v89 = OUTLINED_FUNCTION_103_0();
            goto LABEL_44;
          case 5u:
            OUTLINED_FUNCTION_96_1();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
            lazy protocol witness table accessor for type Data and conformance Data();
            uint64_t v96 = OUTLINED_FUNCTION_21_1();
            Hasher._combine(_:)(v96);
            OUTLINED_FUNCTION_66_1();
            goto LABEL_45;
          case 6u:
            os_log_type_t v97 = OUTLINED_FUNCTION_22_1();
            outlined init with take of (key: String, value: StorableValue)(v97, v98, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            lazy protocol witness table accessor for type UUID and conformance UUID();
            char v99 = OUTLINED_FUNCTION_54_2();
            Hasher._combine(_:)(v99);
            OUTLINED_FUNCTION_38_2();
            goto LABEL_45;
          case 7u:
            id v89 = OUTLINED_FUNCTION_80_1();
            goto LABEL_44;
          default:
            OUTLINED_FUNCTION_36_3();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
LABEL_32:
            id v89 = Optional<A>.hashValue.getter();
LABEL_44:
            Hasher._combine(_:)(v89);
            goto LABEL_45;
        }
      }
    }
LABEL_51:
    Hasher._finalize()();
    uint64_t v23 = v120;
    OUTLINED_FUNCTION_123_0();
    OUTLINED_FUNCTION_34_3();
    if (!v95)
    {
      OUTLINED_FUNCTION_122();
      int v22 = v121;
      uint64_t v112 = v143;
      goto LABEL_59;
    }
    OUTLINED_FUNCTION_120_0();
    int v22 = v121;
    do
    {
      OUTLINED_FUNCTION_75_1();
      if (v95 && (v113 & 1) != 0)
      {
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        __break(1u);
        goto LABEL_72;
      }
      OUTLINED_FUNCTION_65_1();
    }
    while (v95);
    OUTLINED_FUNCTION_25();
LABEL_59:
    *(void *)(v111 + ((v110 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v110;
    *(void *)(*(void *)(v23 + 48) + 8 * v110) = v112;
    OUTLINED_FUNCTION_95_1(*(void *)(v23 + 56) + 24 * v110);
    *(unsigned char *)(v114 + 16) = v138;
    OUTLINED_FUNCTION_29_2();
    if (v77) {
      goto LABEL_3;
    }
LABEL_4:
    if (__OFADD__(v78, 1)) {
      goto LABEL_71;
    }
    OUTLINED_FUNCTION_51_2();
    if (v81 == v82) {
      break;
    }
    OUTLINED_FUNCTION_78_1();
    uint64_t v85 = v84;
    if (!v83)
    {
      OUTLINED_FUNCTION_107_0();
      if (v81 == v82) {
        break;
      }
      OUTLINED_FUNCTION_114_0();
      if (!v83)
      {
        OUTLINED_FUNCTION_107_0();
        if (v81 == v82) {
          break;
        }
        OUTLINED_FUNCTION_114_0();
        if (!v83)
        {
          OUTLINED_FUNCTION_51_2();
          if (v81 == v82) {
            break;
          }
          OUTLINED_FUNCTION_78_1();
          if (v83)
          {
            uint64_t v85 = v86;
            goto LABEL_22;
          }
          while (!__OFADD__(v86, 1))
          {
            OUTLINED_FUNCTION_107_0();
            if (v81 == v82) {
              goto LABEL_61;
            }
            OUTLINED_FUNCTION_114_0();
            uint64_t v86 = v87 + 1;
            if (v83) {
              goto LABEL_22;
            }
          }
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
          return;
        }
      }
    }
LABEL_22:
    uint64_t v140 = (v83 - 1) & v83;
    uint64_t v139 = v85;
  }
LABEL_61:
  swift_release();
  if (v122)
  {
    OUTLINED_FUNCTION_35_3();
    if (v81 != v82) {
      *uint64_t v117 = -1 << v115;
    }
    else {
      specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v115 + 63) >> 6, v117);
    }
    v22[2] = 0;
  }
LABEL_66:
  swift_release();
  OUTLINED_FUNCTION_60_2((uint64_t)&v141);
  OUTLINED_FUNCTION_31_2();
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)()
{
  OUTLINED_FUNCTION_30_3();
  OUTLINED_FUNCTION_94_1();
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v4 = OUTLINED_FUNCTION_35(v3);
  MEMORY[0x1F4188790](v4);
  uint64_t v92 = OUTLINED_FUNCTION_2_9(v5, v82[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v6);
  uint64_t v88 = OUTLINED_FUNCTION_42_1(v7, v82[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v8);
  uint64_t v87 = OUTLINED_FUNCTION_41_2(v9, v82[0]);
  OUTLINED_FUNCTION_0_4();
  v94[7] = v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v86 = OUTLINED_FUNCTION_7_5(v12, v82[0]);
  OUTLINED_FUNCTION_0_4();
  v94[3] = v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v85 = OUTLINED_FUNCTION_10_2(v15, v82[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v16);
  uint64_t v84 = OUTLINED_FUNCTION_9_4(v17, v82[0]);
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_70((uint64_t)v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v94[1] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_5_5(v21, v82[0]);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v23 = OUTLINED_FUNCTION_35(v22);
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_4_6(v24, v82[0]);
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  v94[6] = OUTLINED_FUNCTION_16_2(v26, v27, v28, v29, v30, v31, v32, v33, v82[0]);
  OUTLINED_FUNCTION_0_4();
  v82[1] = v34;
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_12_3();
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)v82 - v37;
  OUTLINED_FUNCTION_24_2((uint64_t)&v93);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<[StorableValue], ChangeRecord?>);
  OUTLINED_FUNCTION_48_1();
  OUTLINED_FUNCTION_58_2();
  if (!v39)
  {
LABEL_69:
    swift_release();
    OUTLINED_FUNCTION_60_2((uint64_t)&v93);
    OUTLINED_FUNCTION_31_2();
    return;
  }
  uint64_t v40 = 1 << *((unsigned char *)v0 + 32);
  uint64_t v41 = v0[8];
  v82[2] = (uint64_t)(v0 + 8);
  if (v40 < 64) {
    uint64_t v42 = ~(-1 << v40);
  }
  else {
    uint64_t v42 = -1;
  }
  unint64_t v90 = v42 & v41;
  OUTLINED_FUNCTION_113_0(v40 + 63);
  OUTLINED_FUNCTION_70_1(*v43);
  OUTLINED_FUNCTION_61_1(*MEMORY[0x1E4F27878]);
  HIDWORD(v83) = *MEMORY[0x1E4F27888];
  OUTLINED_FUNCTION_76_1();
  OUTLINED_FUNCTION_11_3(*v44);
  OUTLINED_FUNCTION_55_2();
  while (v90)
  {
    unint64_t v46 = __clz(__rbit64(v90));
    v90 &= v90 - 1;
    uint64_t v89 = v45;
    unint64_t v47 = v46 | (v45 << 6);
LABEL_27:
    long long v91 = *(_OWORD *)(v0[7] + 16 * v47);
    OUTLINED_FUNCTION_90_1();
    if ((v53 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    OUTLINED_FUNCTION_104_0();
    OUTLINED_FUNCTION_67_1();
    if (v1)
    {
      OUTLINED_FUNCTION_8_4((uint64_t)v94);
      while (2)
      {
        OUTLINED_FUNCTION_102_0();
        OUTLINED_FUNCTION_84_1();
        switch(OUTLINED_FUNCTION_88_1())
        {
          case 1u:
            OUTLINED_FUNCTION_98_1();
            if (v56)
            {
              OUTLINED_FUNCTION_57_2(v55);
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
              goto LABEL_36;
            }
            double v65 = OUTLINED_FUNCTION_13_0(*(double *)&v55);
            if (v60) {
              goto LABEL_71;
            }
            if (v65 <= -9.22337204e18) {
              goto LABEL_72;
            }
            OUTLINED_FUNCTION_45_2();
            if (!v48) {
              goto LABEL_73;
            }
            Int.hashValue.getter();
            Swift::UInt v54 = Int.hashValue.getter();
            goto LABEL_48;
          case 2u:
            uint64_t v57 = OUTLINED_FUNCTION_56_2();
            outlined init with take of (key: String, value: StorableValue)(v57, v58, (uint64_t *)&demangling cache variable for type metadata for Date?);
            OUTLINED_FUNCTION_89_1();
            uint64_t v59 = type metadata accessor for Date();
            OUTLINED_FUNCTION_20_2(v59);
            if (v60)
            {
              OUTLINED_FUNCTION_92_0();
              OUTLINED_FUNCTION_79_1();
            }
            else
            {
              OUTLINED_FUNCTION_1_0();
              v66();
              OUTLINED_FUNCTION_1_0();
              v67();
              OUTLINED_FUNCTION_1_0();
              v68();
              OUTLINED_FUNCTION_1_0();
              v69();
              OUTLINED_FUNCTION_37_3();
              OUTLINED_FUNCTION_19_2();
              if (v60) {
                goto LABEL_76;
              }
              uint64_t v70 = OUTLINED_FUNCTION_6_8();
              v71(v70);
              OUTLINED_FUNCTION_3_11();
              OUTLINED_FUNCTION_91_0();
              uint64_t v72 = OUTLINED_FUNCTION_23_3();
              v73(v72);
              OUTLINED_FUNCTION_14();
              uint64_t v74 = OUTLINED_FUNCTION_33_3();
              v75(v74);
              OUTLINED_FUNCTION_105_0();
              OUTLINED_FUNCTION_97_1();
              OUTLINED_FUNCTION_81_1();
              Hasher._combine(_:)(v2);
            }
            OUTLINED_FUNCTION_93_1();
LABEL_49:
            outlined destroy of StorableValue((uint64_t)v38);
            OUTLINED_FUNCTION_62_1();
            if (!v60) {
              continue;
            }
            goto LABEL_55;
          case 3u:
          case 4u:
            OUTLINED_FUNCTION_64_1();
            Optional<A>.hashValue.getter();
            OUTLINED_FUNCTION_87_1();
            Swift::UInt v54 = OUTLINED_FUNCTION_103_0();
            goto LABEL_48;
          case 5u:
            OUTLINED_FUNCTION_96_1();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
            lazy protocol witness table accessor for type Data and conformance Data();
            Swift::UInt v61 = OUTLINED_FUNCTION_21_1();
            Hasher._combine(_:)(v61);
            OUTLINED_FUNCTION_66_1();
            goto LABEL_49;
          case 6u:
            uint64_t v62 = OUTLINED_FUNCTION_22_1();
            outlined init with take of (key: String, value: StorableValue)(v62, v63, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            lazy protocol witness table accessor for type UUID and conformance UUID();
            Swift::UInt v64 = OUTLINED_FUNCTION_54_2();
            Hasher._combine(_:)(v64);
            OUTLINED_FUNCTION_38_2();
            goto LABEL_49;
          case 7u:
            Swift::UInt v54 = OUTLINED_FUNCTION_80_1();
            goto LABEL_48;
          default:
            OUTLINED_FUNCTION_36_3();
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
LABEL_36:
            Swift::UInt v54 = Optional<A>.hashValue.getter();
LABEL_48:
            Hasher._combine(_:)(v54);
            goto LABEL_49;
        }
      }
    }
LABEL_55:
    uint64_t v0 = &v95;
    Hasher._finalize()();
    OUTLINED_FUNCTION_18_2();
    if (!v60)
    {
      OUTLINED_FUNCTION_50_2();
      goto LABEL_63;
    }
    OUTLINED_FUNCTION_49_1();
    do
    {
      OUTLINED_FUNCTION_75_1();
      if (v60 && (v79 & 1) != 0)
      {
        __break(1u);
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      OUTLINED_FUNCTION_65_1();
    }
    while (v60);
    OUTLINED_FUNCTION_25();
LABEL_63:
    *(void *)(v78 + ((v76 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v76;
    *(void *)(v1[6] + 8 * v76) = v77;
    *(_OWORD *)(v1[7] + 16 * v76) = v91;
    ++v1[2];
    uint64_t v45 = v89;
  }
  if (__OFADD__(v45, 1))
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  OUTLINED_FUNCTION_51_2();
  if (v48 == v49) {
    goto LABEL_64;
  }
  OUTLINED_FUNCTION_73_1();
  if (v50) {
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_28_3();
  if (v48 == v49) {
    goto LABEL_64;
  }
  OUTLINED_FUNCTION_52_1();
  if (v50) {
    goto LABEL_26;
  }
  OUTLINED_FUNCTION_28_3();
  if (v48 == v49) {
    goto LABEL_64;
  }
  OUTLINED_FUNCTION_52_1();
  if (v50)
  {
LABEL_26:
    unint64_t v90 = (v50 - 1) & v50;
    uint64_t v89 = v51;
    unint64_t v47 = __clz(__rbit64(v50)) + (v51 << 6);
    goto LABEL_27;
  }
  OUTLINED_FUNCTION_51_2();
  if (v48 == v49)
  {
LABEL_64:
    swift_release();
    OUTLINED_FUNCTION_90_1();
    if (v80)
    {
      OUTLINED_FUNCTION_35_3();
      if (v48 != v49) {
        OUTLINED_FUNCTION_71_0(v81);
      }
      else {
        OUTLINED_FUNCTION_69_1(v81);
      }
      v0[2] = 0;
    }
    goto LABEL_69;
  }
  OUTLINED_FUNCTION_78_1();
  if (v50)
  {
    uint64_t v51 = v52;
    goto LABEL_26;
  }
  while (!__OFADD__(v52, 1))
  {
    OUTLINED_FUNCTION_28_3();
    if (v48 == v49) {
      goto LABEL_64;
    }
    OUTLINED_FUNCTION_72_1();
    if (v50) {
      goto LABEL_26;
    }
  }
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return v0;
}

void OUTLINED_FUNCTION_76_1()
{
  *(void *)(v0 - 432) = *(void *)(v0 - 208) + 104;
}

uint64_t OUTLINED_FUNCTION_76_2(uint64_t a1, int a2, Swift::Int a3, uint64_t a4, void *a5)
{
  return static KeyedAggregationMetadataCache.tableName(materializedViewName:)(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL | 0xD000000000000000, a5);
}

uint64_t OUTLINED_FUNCTION_61()
{
  return v0;
}

void OUTLINED_FUNCTION_61_1(int a1@<W8>)
{
  *(_DWORD *)(v1 - 404) = a1;
  *(void *)(v1 - 416) = *(void *)(v1 - 240) + 104;
}

uint64_t OUTLINED_FUNCTION_61_2()
{
  return v0;
}

void OUTLINED_FUNCTION_61_3()
{
  unint64_t v1 = 0xE900000000000054;
  uint64_t v2 = 0x434952545320290ALL;
  String.append(_:)(*(Swift::String *)&v2);
}

uint64_t OUTLINED_FUNCTION_113()
{
  return v0;
}

void OUTLINED_FUNCTION_113_0(unint64_t a1@<X8>)
{
  *(void *)(v1 - 504) = a1 >> 6;
}

void static KeyedFirstMatchingRecordCache.columnNames(groupBySchema:payloadSchema:)()
{
  OUTLINED_FUNCTION_38_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_16();
  uint64_t v30 = v7;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (void *)((char *)v28 - v9);
  uint64_t v11 = *(void *)(v3 + 16);
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  if (v11)
  {
    v28[1] = v1;
    uint64_t v32 = (char *)MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    OUTLINED_FUNCTION_22();
    uint64_t v14 = v3 + v13;
    uint64_t v29 = *(void *)(v5 + 72);
    do
    {
      outlined init with copy of UUID?(v14, (uint64_t)v10, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      uint64_t v15 = v30;
      uint64_t v12 = (char *)v30 + *(int *)(v31 + 48);
      uint64_t v16 = *v10;
      uint64_t v17 = v10[1];
      *uint64_t v30 = *v10;
      v15[1] = v17;
      type metadata accessor for SQLDataType();
      OUTLINED_FUNCTION_5_0();
      uint64_t v19 = v18;
      OUTLINED_FUNCTION_18();
      v20();
      uint64_t v21 = *(void (**)(void))(v19 + 8);
      swift_bridgeObjectRetain();
      OUTLINED_FUNCTION_13_5();
      v21();
      uint64_t v22 = OUTLINED_FUNCTION_26_1();
      outlined destroy of UUID?(v22, v23);
      if ((OUTLINED_FUNCTION_146_0() & 1) == 0)
      {
        OUTLINED_FUNCTION_43_4();
        uint64_t v12 = v32;
      }
      unint64_t v25 = *((void *)v12 + 2);
      unint64_t v24 = *((void *)v12 + 3);
      if (v25 >= v24 >> 1)
      {
        OUTLINED_FUNCTION_89_2(v24);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v12 = v32;
      }
      *((void *)v12 + 2) = v25 + 1;
      uint64_t v26 = &v12[16 * v25];
      *((void *)v26 + 4) = v16;
      *((void *)v26 + 5) = v17;
      v14 += v29;
      --v11;
    }
    while (v11);
  }
  uint64_t v27 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v27);
  swift_bridgeObjectRelease();
  uint64_t v32 = v12;
  specialized Array.append<A>(contentsOf:)();
  OUTLINED_FUNCTION_34();
}

void static KeyedAggregationMetadataCache.columnNames(groupBySchema:payloadSchema:)()
{
  OUTLINED_FUNCTION_38_0();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v66 = v4;
  MEMORY[0x1F4188790](v5);
  uint64_t v72 = (char **)((char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char **)((char *)&v64 - v8);
  uint64_t v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_16();
  uint64_t v70 = v13;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (uint64_t *)((char *)&v64 - v15);
  uint64_t v17 = *(void *)(v3 + 16);
  uint64_t v65 = v1;
  if (v17)
  {
    uint64_t v75 = (char *)MEMORY[0x1E4FBC860];
    OUTLINED_FUNCTION_60_4();
    OUTLINED_FUNCTION_22();
    uint64_t v19 = v3 + v18;
    uint64_t v69 = *(void *)(v11 + 72);
    do
    {
      outlined init with copy of UUID?(v19, (uint64_t)v16, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      uint64_t v20 = v70;
      uint64_t v21 = (char *)v70 + *(int *)(v71 + 48);
      uint64_t v22 = v16[1];
      uint64_t v74 = *v16;
      *uint64_t v70 = v74;
      v20[1] = v22;
      type metadata accessor for SQLDataType();
      OUTLINED_FUNCTION_5_0();
      uint64_t v24 = v23;
      OUTLINED_FUNCTION_18();
      v25();
      uint64_t v26 = *(void (**)(uint64_t))(v24 + 8);
      swift_bridgeObjectRetain();
      uint64_t v27 = OUTLINED_FUNCTION_134_0();
      v26(v27);
      outlined destroy of UUID?((uint64_t)v16, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      if ((OUTLINED_FUNCTION_146_0() & 1) == 0)
      {
        OUTLINED_FUNCTION_43_4();
        uint64_t v21 = v75;
      }
      unint64_t v29 = *((void *)v21 + 2);
      unint64_t v28 = *((void *)v21 + 3);
      if (v29 >= v28 >> 1)
      {
        OUTLINED_FUNCTION_89_2(v28);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v21 = v75;
      }
      *((void *)v21 + 2) = v29 + 1;
      uint64_t v30 = &v21[16 * v29];
      *((void *)v30 + 4) = v74;
      *((void *)v30 + 5) = v22;
      v19 += v69;
      --v17;
    }
    while (v17);
    Swift::UInt v64 = v21;
    uint64_t v1 = v65;
  }
  else
  {
    Swift::UInt v64 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v31 = MEMORY[0x1E4FBC860];
  char v68 = *(void **)(v1 + 16);
  if (v68)
  {
    uint64_t v67 = v1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v32 = 0;
    uint64_t v33 = v31;
    while (1)
    {
      uint64_t v34 = *(void *)(v67 + 8 * (void)v32);
      uint64_t v35 = *(void *)(v34 + 16);
      if (v35)
      {
        uint64_t v70 = v32;
        uint64_t v71 = v33;
        uint64_t v75 = (char *)v31;
        swift_bridgeObjectRetain();
        OUTLINED_FUNCTION_60_4();
        OUTLINED_FUNCTION_22();
        uint64_t v69 = v34;
        uint64_t v37 = v34 + v36;
        uint64_t v74 = *(void *)(v38 + 72);
        do
        {
          outlined init with copy of UUID?(v37, (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
          uint64_t v39 = v72;
          uint64_t v40 = (char *)v72 + *(int *)(v73 + 64);
          uint64_t v41 = v9[1];
          *uint64_t v72 = *v9;
          v39[1] = v41;
          uint64_t v43 = v9[2];
          uint64_t v42 = v9[3];
          v39[2] = v43;
          v39[3] = v42;
          type metadata accessor for SQLDataType();
          OUTLINED_FUNCTION_5_0();
          uint64_t v45 = v44;
          OUTLINED_FUNCTION_18();
          v46();
          unint64_t v47 = *(void (**)(uint64_t))(v45 + 8);
          swift_bridgeObjectRetain();
          uint64_t v48 = OUTLINED_FUNCTION_134_0();
          v47(v48);
          outlined destroy of UUID?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
          if ((OUTLINED_FUNCTION_146_0() & 1) == 0)
          {
            OUTLINED_FUNCTION_43_4();
            uint64_t v40 = v75;
          }
          unint64_t v50 = *((void *)v40 + 2);
          unint64_t v49 = *((void *)v40 + 3);
          if (v50 >= v49 >> 1)
          {
            OUTLINED_FUNCTION_89_2(v49);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v40 = v75;
          }
          *((void *)v40 + 2) = v50 + 1;
          uint64_t v51 = &v40[16 * v50];
          *((void *)v51 + 4) = v43;
          *((void *)v51 + 5) = v42;
          v37 += v74;
          --v35;
        }
        while (v35);
        swift_bridgeObjectRelease();
        uint64_t v31 = MEMORY[0x1E4FBC860];
        uint64_t v32 = v70;
        uint64_t v33 = v71;
      }
      else
      {
        uint64_t v40 = (char *)v31;
      }
      uint64_t v52 = *((void *)v40 + 2);
      uint64_t v53 = *(void *)(v33 + 16);
      uint64_t v54 = v53 + v52;
      if (__OFADD__(v53, v52)) {
        break;
      }
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (!isUniquelyReferenced_nonNull_native || v54 > *(void *)(v33 + 24) >> 1)
      {
        if (v53 <= v54) {
          uint64_t v56 = v53 + v52;
        }
        else {
          uint64_t v56 = v53;
        }
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v56, 1, v33);
        uint64_t v33 = v57;
      }
      if (*((void *)v40 + 2))
      {
        uint64_t v58 = *(void *)(v33 + 16);
        if ((*(void *)(v33 + 24) >> 1) - v58 < v52) {
          goto LABEL_44;
        }
        unint64_t v59 = v33 + 16 * v58 + 32;
        if ((unint64_t)(v40 + 32) < v59 + 16 * v52 && v59 < (unint64_t)&v40[16 * v52 + 32]) {
          goto LABEL_46;
        }
        swift_arrayInitWithCopy();
        if (v52)
        {
          uint64_t v61 = *(void *)(v33 + 16);
          BOOL v62 = __OFADD__(v61, v52);
          uint64_t v63 = v61 + v52;
          if (v62) {
            goto LABEL_45;
          }
          *(void *)(v33 + 16) = v63;
        }
      }
      else if (v52)
      {
        goto LABEL_43;
      }
      uint64_t v32 = (void *)((char *)v32 + 1);
      swift_bridgeObjectRelease();
      if (v32 == v68)
      {
        swift_bridgeObjectRelease();
        goto LABEL_41;
      }
    }
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
LABEL_41:
    uint64_t v75 = v64;
    specialized Array.append<A>(contentsOf:)();
    OUTLINED_FUNCTION_34();
  }
}

uint64_t OUTLINED_FUNCTION_134()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_134_0()
{
  return v0;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  OUTLINED_FUNCTION_59_3();
  if (v2)
  {
    OUTLINED_FUNCTION_17();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_60();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_26_0();
    }
  }
  OUTLINED_FUNCTION_33_4();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<[String : StorableValue]>);
    uint64_t v5 = (const void *)swift_allocObject();
    OUTLINED_FUNCTION_68_2(v5);
    OUTLINED_FUNCTION_54_3(v6);
  }
  if (v0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_72_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_46_2();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_36_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  const void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  OUTLINED_FUNCTION_59_3();
  if (v3)
  {
    OUTLINED_FUNCTION_17();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_60();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_26_0();
    }
  }
  OUTLINED_FUNCTION_33_4();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Aggregation>);
    uint64_t v6 = (const void *)swift_allocObject();
    OUTLINED_FUNCTION_68_2(v6);
    *(void *)(v2 + 16) = v1;
    *(void *)(v2 + 24) = 2 * (v7 / 40);
  }
  if (v0)
  {
    uint64_t v8 = (char *)OUTLINED_FUNCTION_72_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_46_2();
  }
  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_36_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_59_3();
  if (v2)
  {
    OUTLINED_FUNCTION_17();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_60();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_26_0();
    }
  }
  OUTLINED_FUNCTION_33_4();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Dataflow>);
    uint64_t v5 = (const void *)swift_allocObject();
    OUTLINED_FUNCTION_68_2(v5);
    OUTLINED_FUNCTION_54_3(v6);
  }
  if (v0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_72_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_46_2();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_36_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  uint64_t *v5;
  const void *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_59_3();
  if (v2)
  {
    OUTLINED_FUNCTION_17();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_60();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_26_0();
    }
  }
  OUTLINED_FUNCTION_33_4();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(v5);
    uint64_t v6 = (const void *)swift_allocObject();
    OUTLINED_FUNCTION_68_2(v6);
    OUTLINED_FUNCTION_54_3(v7);
  }
  if (v0)
  {
    uint64_t v8 = (char *)OUTLINED_FUNCTION_72_2();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_46_2();
  }
  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_36_4();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void IncrementalViewManager.update(database:materializedViewPlan:databaseName:)(sqlite3 *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v230 = a4;
  uint64_t v224 = a3;
  uint64_t v223 = type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_0_4();
  uint64_t v233 = v6;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_10();
  uint64_t v222 = v8;
  uint64_t v252 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StorableValue));
  OUTLINED_FUNCTION_0_4();
  uint64_t v241 = v9;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_16();
  uint64_t v240 = v11;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_21();
  uint64_t v253 = v13;
  OUTLINED_FUNCTION_11();
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v23 = OUTLINED_FUNCTION_41_1(v15, v16, v17, v18, v19, v20, v21, v22, v211);
  uint64_t v237 = type metadata accessor for StorableValue(v23);
  OUTLINED_FUNCTION_0_4();
  uint64_t v255 = v24;
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_10();
  uint64_t v27 = OUTLINED_FUNCTION_14_0(v26);
  *(void *)&long long v238 = type metadata accessor for MaterializedViewPhysicalPlan(v27);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_16();
  uint64_t v228 = v29;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_14_0((uint64_t)&v211 - v31);
  uint64_t v239 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_4();
  v232 = v32;
  MEMORY[0x1F4188790](v33);
  OUTLINED_FUNCTION_16();
  uint64_t v225 = v34;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_21();
  uint64_t v236 = v36;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v37);
  OUTLINED_FUNCTION_14_0((uint64_t)&v211 - v38);
  unint64_t v249 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  uint64_t v243 = v39;
  MEMORY[0x1F4188790](v40);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_14_0(v41);
  uint64_t v42 = type metadata accessor for ResultColumn();
  OUTLINED_FUNCTION_0_4();
  uint64_t v245 = v43;
  MEMORY[0x1F4188790](v44);
  OUTLINED_FUNCTION_67();
  uint64_t v47 = v46 - v45;
  uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  OUTLINED_FUNCTION_0_4();
  unint64_t v250 = v49;
  MEMORY[0x1F4188790](v50);
  OUTLINED_FUNCTION_67();
  uint64_t v53 = (uint64_t *)(v52 - v51);
  uint64_t v54 = type metadata accessor for Schema();
  OUTLINED_FUNCTION_0_4();
  uint64_t v231 = v55;
  MEMORY[0x1F4188790](v56);
  OUTLINED_FUNCTION_67();
  unint64_t v59 = (uint64_t *)(v58 - v57);
  type metadata accessor for MaterializedView();
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v60);
  OUTLINED_FUNCTION_67();
  (*(void (**)(uint64_t, uint64_t))(v63 + 16))(v62 - v61, a2);
  type metadata accessor for QueryPlannerMetadata(0);
  OUTLINED_FUNCTION_51_0();
  uint64_t v64 = v251;
  QueryPlannerMetadata.init(materializedView:database:cacheSize:)();
  uint64_t v242 = v64;
  if (v64) {
    return;
  }
  uint64_t v246 = v48;
  uint64_t v247 = v47;
  uint64_t v251 = (uint64_t)v42;
  v219 = v59;
  unint64_t v220 = (unint64_t)v54;
  uint64_t v221 = a1;
  uint64_t v226 = v65;
  uint64_t v218 = (sqlite3 *)MaterializedView.name.getter();
  *(void *)&long long v217 = v66;
  uint64_t v216 = MaterializedView.name.getter();
  *(void *)&long long v215 = v67;
  uint64_t v68 = *(int *)(v238 + 20);
  uint64_t v227 = a2;
  uint64_t v69 = a2 + v68;
  type metadata accessor for SelectCorePhysicalPlan(0);
  uint64_t v214 = v69;
  uint64_t v70 = SelectCore.select.getter();
  uint64_t v71 = *(void *)(v70 + 16);
  if (v71)
  {
    v261[0]._rawValue = (void *)MEMORY[0x1E4FBC860];
    OUTLINED_FUNCTION_44_0();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v245 = (sqlite3 *)*((void *)v245 + 2);
    OUTLINED_FUNCTION_22();
    uint64_t v213 = (uint64_t (**)(uint64_t, uint64_t))v70;
    uint64_t v74 = v70 + v73;
    uint64_t v244 = *(void *)(v72 + 56);
    v243 += 8;
    uint64_t v75 = (void (**)(uint64_t, uint64_t))(v72 - 8);
    uint64_t v76 = v251;
    do
    {
      uint64_t v77 = v247;
      uint64_t v78 = v72;
      ((void (*)(uint64_t, uint64_t, uint64_t))v245)(v247, v74, v76);
      char v79 = (char *)v53 + *(int *)(v246 + 48);
      *uint64_t v53 = ResultColumn.name.getter();
      v53[1] = v80;
      ResultColumn.expression.getter(v248);
      SQLExpression.returnType.getter(v79);
      uint64_t v76 = v251;
      OUTLINED_FUNCTION_2_4();
      v81();
      (*v75)(v77, v76);
      rawValue = v261[0]._rawValue;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_24_0();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v76 = v251;
        rawValue = v261[0]._rawValue;
      }
      unint64_t v83 = rawValue[2];
      if (v83 >= rawValue[3] >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v76 = v251;
        rawValue = v261[0]._rawValue;
      }
      rawValue[2] = v83 + 1;
      OUTLINED_FUNCTION_22();
      outlined init with take of (String, SQLDataType)((uint64_t)v53, (uint64_t)rawValue + v84 + *(void *)(v85 + 72) * v83);
      v74 += v244;
      --v71;
      uint64_t v72 = v78;
    }
    while (v71);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    rawValue = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v86 = v239;
  uint64_t v87 = v242;
  uint64_t v88 = v221;
  uint64_t v89 = v238;
  if (rawValue[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, SQLDataType>);
    unint64_t v90 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    unint64_t v90 = (void *)MEMORY[0x1E4FBC868];
  }
  uint64_t v91 = v227;
  v261[0]._rawValue = v90;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)((uint64_t)rawValue, 1, v261);
  if (v87) {
    goto LABEL_102;
  }
  v92._uint64_t countAndFlagsBits = v216;
  v92._uint64_t object = (void *)v215;
  Schema.init(tableName:columns:)(v92, v261[0]);
  uint64_t v93 = (ValueMetadata *)Schema.columns.getter();
  OUTLINED_FUNCTION_2_4();
  v94();
  uint64_t v95 = (uint64_t *)(v91 + *(int *)(v89 + 28));
  uint64_t v96 = v91;
  uint64_t v97 = *v95;
  uint64_t v98 = v95[1];
  swift_bridgeObjectRetain();
  DBViewWriter.init(database:tableName:schema:createTableSQL:)(v88, v218, (void *)v217, v93, v97, v98, v262);
  char v99 = v232;
  v219 = &v260;
  ++v232;
  uint64_t v213 = (uint64_t (**)(uint64_t, uint64_t))(v233 + 88);
  int v212 = *MEMORY[0x1E4FBD340];
  uint64_t v211 = v233 + 8;
  uint64_t v221 = (sqlite3 *)(v99 + 2);
  unint64_t v220 = (unint64_t)(v99 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  *(void *)&long long v100 = 136446466;
  long long v217 = v100;
  uint64_t v216 = MEMORY[0x1E4FBC840] + 8;
  *(void *)&long long v100 = 134218242;
  long long v215 = v100;
  long long v238 = xmmword_18EB382C0;
  uint64_t v101 = v235;
  uint64_t v102 = v96;
  unint64_t v103 = v230;
  uint64_t v218 = (sqlite3 *)(v234 + OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_signposter);
  while (1)
  {
    uint64_t v242 = 0;
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
    uint64_t v104 = v229;
    outlined init with copy of MaterializedViewPhysicalPlan(v102, v229, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
    swift_bridgeObjectRetain_n();
    uint64_t v105 = OSSignposter.logHandle.getter();
    static os_signpost_type_t.begin.getter();
    if (OUTLINED_FUNCTION_18_0())
    {
      LODWORD(v251) = v102;
      uint64_t v106 = *(void (**)(uint64_t, uint64_t, uint64_t))v221;
      (*(void (**)(uint64_t, uint64_t, uint64_t))v221)(v236, v101, v86);
      unint64_t v107 = v103;
      uint64_t v108 = swift_slowAlloc();
      v261[0]._rawValue = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v108 = v217;
      swift_bridgeObjectRetain();
      uint64_t v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v224, v107, (uint64_t *)v261);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v108 + 12) = 2082;
      uint64_t v109 = MaterializedView.name.getter();
      uint64_t v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, (uint64_t *)v261);
      uint64_t v86 = v239;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of MaterializedViewPhysicalPlan(v104);
      uint64_t v111 = v236;
      os_signpost_id_t v112 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_18E67D000, v105, (os_signpost_type_t)v251, v112, "IncrementalViewUpdateBatch", "database:%{public}s view:%{public}s", (uint8_t *)v108, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_9();

      uint64_t v113 = v111;
      OUTLINED_FUNCTION_33_0();
      OUTLINED_FUNCTION_2_4();
      v115(v114);
    }
    else
    {
      swift_bridgeObjectRelease_n();

      outlined destroy of MaterializedViewPhysicalPlan(v104);
      uint64_t v106 = *(void (**)(uint64_t, uint64_t, uint64_t))v221;
      uint64_t v113 = v236;
    }
    v106(v113, v101, v86);
    type metadata accessor for OSSignpostIntervalState();
    OUTLINED_FUNCTION_51_0();
    uint64_t v116 = OSSignpostIntervalState.init(id:isOpen:)();
    uint64_t v117 = v242;
    uint64_t v118 = SelectCorePhysicalPlan.update(metadata:)(v226);
    if (v117)
    {
      uint64_t v242 = v117;
      goto LABEL_93;
    }
    uint64_t v120 = v118;
    LODWORD(v231) = v119;
    uint64_t v233 = v116;
    if (one-time initialization token for compute != -1) {
      swift_once();
    }
    uint64_t v121 = type metadata accessor for Logger();
    unint64_t v122 = (sqlite3 *)__swift_project_value_buffer(v121, (uint64_t)static Logging.compute);
    uint64_t v123 = v228;
    outlined init with copy of MaterializedViewPhysicalPlan(v227, v228, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
    swift_bridgeObjectRetain();
    uint64_t v124 = Logger.logObject.getter();
    os_log_type_t v125 = static os_log_type_t.debug.getter();
    uint64_t v126 = v125;
    BOOL v127 = os_log_type_enabled(v124, v125);
    uint64_t v248 = v120;
    if (v127)
    {
      uint64_t v128 = swift_slowAlloc();
      v261[0]._rawValue = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v128 = v215;
      uint64_t v259 = *(void *)(v248 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v128 + 12) = 2080;
      uint64_t v129 = MaterializedView.name.getter();
      unint64_t v122 = (sqlite3 *)v130;
      uint64_t v259 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v129, v130, (uint64_t *)v261);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of MaterializedViewPhysicalPlan(v123);
      _os_log_impl(&dword_18E67D000, v124, (os_log_type_t)v126, "persisting %ld changes for materialized view %s", (uint8_t *)v128, 0x16u);
      swift_arrayDestroy();
      uint64_t v120 = v248;
      OUTLINED_FUNCTION_9();
      OUTLINED_FUNCTION_9();
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined destroy of MaterializedViewPhysicalPlan(v123);
    }

    OUTLINED_FUNCTION_54_0();
    OUTLINED_FUNCTION_59_0();
    char v131 = MEMORY[0x1E4FBC860];
    uint64_t v243 = *(void *)(v120 + 16);
    if (v243) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_80:
    uint64_t v102 = v227;
    QueryPlannerMetadata.storeMetadata()();
    uint64_t v86 = v239;
    if (v183)
    {
      uint64_t v242 = v183;
LABEL_93:
      swift_release();
      OUTLINED_FUNCTION_19_0();
      OUTLINED_FUNCTION_33_0();
LABEL_89:
      OUTLINED_FUNCTION_2_4();
      v197(v196);
      outlined release of DBViewWriter((uint64_t)v262);
      return;
    }
    uint64_t v184 = OSSignposter.logHandle.getter();
    OSSignpostIntervalState.signpostID.getter();
    os_signpost_type_t v185 = static os_signpost_type_t.end.getter();
    if (OS_os_log.signpostsEnabled.getter())
    {
      swift_retain();
      uint64_t v186 = v222;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      int v187 = (*v213)(v186, v223);
      uint64_t v188 = "[Error] Interval already ended";
      if (v187 != v212)
      {
        OUTLINED_FUNCTION_2_4();
        v190(v189);
        uint64_t v188 = "";
      }
      Swift::String v191 = (uint8_t *)OUTLINED_FUNCTION_25_1();
      *(_WORD *)Swift::String v191 = 0;
      os_signpost_id_t v192 = OSSignpostID.rawValue.getter();
      _os_signpost_emit_with_name_impl(&dword_18E67D000, v184, v185, v192, "IncrementalViewUpdateBatch", v188, v191, 2u);
      OUTLINED_FUNCTION_9();
      uint64_t v102 = v227;
    }

    uint64_t v193 = *v232;
    uint64_t v194 = OUTLINED_FUNCTION_52_0();
    v193(v194);
    uint64_t v101 = v235;
    uint64_t v195 = OUTLINED_FUNCTION_52_0();
    v193(v195);
    swift_release();
    unint64_t v103 = v230;
    if (v231)
    {
      outlined release of DBViewWriter((uint64_t)v262);
      OUTLINED_FUNCTION_19_0();
      return;
    }
  }
  uint64_t v245 = v262[4];
  uint64_t v244 = v120 + 32;
  swift_bridgeObjectRetain();
  int v132 = 0;
  unint64_t v133 = 0;
  while (2)
  {
    LODWORD(v247) = v132;
    while (1)
    {
      if (v133 >= *(void *)(v120 + 16))
      {
        __break(1u);
LABEL_96:
        id v198 = BMSQLDatabaseError(v126, v122, 0);
        swift_getErrorValue();
        id v199 = (void *)Error.localizedDescription.getter();
        uint64_t v201 = v200;

        v261[0]._rawValue = v199;
        v261[1]._rawValue = v201;
        OUTLINED_FUNCTION_1_2();
        uint64_t v259 = v202;
        uint64_t v260 = v203;
        OUTLINED_FUNCTION_2();
        uint64_t v257 = v204;
        uint64_t v258 = v205;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v206 = OUTLINED_FUNCTION_30_0();
        uint64_t v208 = v207;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
        uint64_t v209 = OUTLINED_FUNCTION_39();
        *(void *)uint64_t v210 = v133;
        *(void *)(v210 + 8) = v124;
        *(void *)(v210 + 16) = v206;
        *(void *)(v210 + 24) = v208;
        *(unsigned char *)(v210 + 32) = 1;
        swift_bridgeObjectRetain();
        uint64_t v242 = v209;
        swift_willThrow();
        swift_release();
        OUTLINED_FUNCTION_19_0();
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_39_0();
        goto LABEL_88;
      }
      char v134 = (unsigned __int8 *)(v244 + 16 * v133);
      uint64_t v135 = *v134;
      uint64_t v136 = *((void *)v134 + 1);
      swift_bridgeObjectRetain();
      uint64_t v137 = recordAsSQL #1 (schema:changeRecord:) in DBViewWriter.sendDatabaseUpdate(changeRecords:)((uint64_t)v245, v135, v136);
      uint64_t v138 = (ValueMetadata *)v137;
      unint64_t v250 = ++v133;
      uint64_t v251 = v136;
      if (v135) {
        break;
      }
      unint64_t v133 = *(void *)(v137 + 16);
      if (v133)
      {
        v261[0]._rawValue = v131;
        OUTLINED_FUNCTION_44_0();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        OUTLINED_FUNCTION_22();
        unint64_t v249 = v138;
        uint64_t v140 = (uint64_t)v138 + v139;
        uint64_t v123 = *(void *)(v123 + 72);
        uint64_t v124 = v261[0]._rawValue;
        do
        {
          uint64_t v141 = v256;
          uint64_t v120 = (uint64_t)&demangling cache variable for type metadata for (key: String, value: StorableValue);
          outlined init with copy of MaterializedViewPhysicalPlan?(v140, v256, &demangling cache variable for type metadata for (key: String, value: StorableValue));
          uint64_t v142 = *(int *)(v252 + 48);
          uint64_t v143 = v253 + v142;
          outlined init with copy of MaterializedViewPhysicalPlan(v141 + v142, v253 + v142, (void (*)(void))type metadata accessor for StorableValue);
          outlined init with take of MaterializedViewPhysicalPlan(v143, v126, (void (*)(void))type metadata accessor for StorableValue);
          outlined destroy of UUID?(v141, &demangling cache variable for type metadata for (key: String, value: StorableValue));
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_24_0();
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v124 = v261[0]._rawValue;
          }
          Class isa = v124[2].isa;
          unint64_t v144 = (unint64_t)v124[3].isa;
          uint64_t v126 = (uint64_t)isa + 1;
          if ((unint64_t)isa >= v144 >> 1)
          {
            OUTLINED_FUNCTION_35_0(v144);
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v124 = v261[0]._rawValue;
          }
          v124[2].Class isa = (Class)v126;
          OUTLINED_FUNCTION_22();
          OUTLINED_FUNCTION_59_0();
          outlined init with take of MaterializedViewPhysicalPlan((uint64_t)isa + 1, v146, v147);
          v140 += v123;
          --v133;
        }
        while (v133);
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_54_0();
        char v131 = MEMORY[0x1E4FBC860];
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v124 = v131;
      }
      SQLExpressionEvaluator.execute(sql:bindingValues:)(v263, (Swift::OpaquePointer)v124);
      OUTLINED_FUNCTION_48_0();
      if (v149) {
        goto LABEL_87;
      }
      unint64_t v122 = v148;
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_39_0();
      swift_bridgeObjectRelease();
      if (!v243) {
        goto LABEL_78;
      }
    }
    if ((v247 & 1) == 0)
    {
      unint64_t v122 = v262[0];
      unint64_t v133 = v265;
      uint64_t v124 = v266;
      uint64_t v150 = String.utf8CString.getter();
      uint64_t v126 = sqlite3_exec(v122, (const char *)(v150 + 32), 0, 0, 0);
      char v131 = MEMORY[0x1E4FBC860];
      OUTLINED_FUNCTION_54_0();
      swift_release();
      if (v126) {
        goto LABEL_96;
      }
    }
    uint64_t Kind = v138[1].Kind;
    if (Kind)
    {
      v261[0]._rawValue = v131;
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      OUTLINED_FUNCTION_22();
      unint64_t v133 = (unint64_t)v138 + v152;
      uint64_t v234 = *(void *)(v123 + 72);
      uint64_t v153 = v261[0]._rawValue;
      uint64_t v120 = v253;
      uint64_t v123 = v256;
      uint64_t v242 = 0;
      unint64_t v249 = v138;
      do
      {
        uint64_t v247 = Kind;
        outlined init with copy of MaterializedViewPhysicalPlan?(v133, v123, &demangling cache variable for type metadata for (key: String, value: StorableValue));
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>);
        uint64_t v154 = *(void *)(v255 + 72);
        unint64_t v155 = (*(unsigned __int8 *)(v255 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v255 + 80);
        uint64_t v156 = swift_allocObject();
        *(_OWORD *)(v156 + 16) = v238;
        uint64_t v157 = v153;
        uint64_t v246 = v156;
        uint64_t v158 = v156 + v155;
        uint64_t v159 = v252;
        uint64_t v160 = *(int *)(v252 + 48);
        uint64_t v161 = v120 + v160;
        uint64_t v162 = v256 + v160;
        outlined init with copy of MaterializedViewPhysicalPlan(v256 + v160, v120 + v160, (void (*)(void))type metadata accessor for StorableValue);
        outlined init with take of MaterializedViewPhysicalPlan(v161, v158, (void (*)(void))type metadata accessor for StorableValue);
        uint64_t v163 = v158 + v154;
        uint64_t v123 = v256;
        uint64_t v164 = v240 + *(int *)(v159 + 48);
        outlined init with copy of MaterializedViewPhysicalPlan(v162, v164, (void (*)(void))type metadata accessor for StorableValue);
        uint64_t v165 = v163;
        uint64_t v153 = v157;
        outlined init with take of MaterializedViewPhysicalPlan(v164, v165, (void (*)(void))type metadata accessor for StorableValue);
        outlined destroy of UUID?(v123, &demangling cache variable for type metadata for (key: String, value: StorableValue));
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_24_0();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v153 = v261[0]._rawValue;
        }
        unint64_t v167 = *((void *)v153 + 2);
        unint64_t v166 = *((void *)v153 + 3);
        uint64_t v126 = v167 + 1;
        uint64_t v120 = v253;
        if (v167 >= v166 >> 1)
        {
          OUTLINED_FUNCTION_35_0(v166);
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v153 = v261[0]._rawValue;
        }
        *((void *)v153 + 2) = v126;
        *((void *)v153 + v167 + 4) = v246;
        v133 += v234;
        uint64_t Kind = v247 - 1;
      }
      while (v247 != 1);
      swift_bridgeObjectRelease();
      char v131 = MEMORY[0x1E4FBC860];
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v153 = v131;
    }
    uint64_t v168 = *((void *)v153 + 2);
    OUTLINED_FUNCTION_59_0();
    if (!v168)
    {
      v169._rawValue = v131;
LABEL_76:
      swift_bridgeObjectRelease();
      unint64_t v122 = v262[1];
      SQLExpressionEvaluator.execute(sql:bindingValues:)(v264, v169);
      OUTLINED_FUNCTION_54_0();
      OUTLINED_FUNCTION_48_0();
      if (!v182)
      {
        uint64_t v124 = v181;
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_39_0();
        swift_bridgeObjectRelease();
        int v132 = 1;
        if (v133 != v243) {
          continue;
        }
LABEL_78:
        swift_bridgeObjectRelease_n();
        goto LABEL_80;
      }
LABEL_87:
      OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_19_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_39_0();
LABEL_88:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_33_0();
      goto LABEL_89;
    }
    break;
  }
  unint64_t v249 = (ValueMetadata *)v153;
  swift_bridgeObjectRetain();
  uint64_t v120 = 0;
  v169._rawValue = v131;
  while (1)
  {
    unint64_t v133 = *(&v249[2].Kind + v120);
    uint64_t v170 = *(void *)(v133 + 16);
    uint64_t v123 = *((void *)v169._rawValue + 2);
    uint64_t v126 = v123 + v170;
    if (__OFADD__(v123, v170)) {
      break;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v126 > *((void *)v169._rawValue + 3) >> 1)
    {
      if (v123 <= v126) {
        uint64_t v172 = v123 + v170;
      }
      else {
        uint64_t v172 = v123;
      }
      v169._rawValue = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v172, 1, (uint64_t)v169._rawValue);
    }
    if (*(void *)(v133 + 16))
    {
      uint64_t v173 = *((void *)v169._rawValue + 2);
      uint64_t v126 = v254;
      if ((*((void *)v169._rawValue + 3) >> 1) - v173 < v170) {
        goto LABEL_99;
      }
      unint64_t v174 = (*(unsigned __int8 *)(v255 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v255 + 80);
      uint64_t v175 = *(void *)(v255 + 72);
      unint64_t v176 = (char *)v169._rawValue + v174 + v175 * v173;
      if (v133 + v174 < (unint64_t)&v176[v175 * v170] && (unint64_t)v176 < v133 + v174 + v175 * v170) {
        goto LABEL_101;
      }
      swift_arrayInitWithCopy();
      if (v170)
      {
        uint64_t v178 = *((void *)v169._rawValue + 2);
        BOOL v179 = __OFADD__(v178, v170);
        uint64_t v180 = v178 + v170;
        if (v179) {
          goto LABEL_100;
        }
        *((void *)v169._rawValue + 2) = v180;
      }
    }
    else
    {
      OUTLINED_FUNCTION_59_0();
      if (v170) {
        goto LABEL_98;
      }
    }
    ++v120;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v168 == v120)
    {
      swift_bridgeObjectRelease();
      char v131 = MEMORY[0x1E4FBC860];
      goto LABEL_76;
    }
  }
  __break(1u);
LABEL_98:
  __break(1u);
LABEL_99:
  __break(1u);
LABEL_100:
  __break(1u);
LABEL_101:
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_102:
  swift_release();
  __break(1u);
}

uint64_t outlined init with copy of MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_10();
  uint64_t v4 = OUTLINED_FUNCTION_88();
  v5(v4);
  return a2;
}

uint64_t type metadata accessor for MaterializedViewPhysicalPlan(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, type metadata singleton initialization cache for MaterializedViewPhysicalPlan);
}

uint64_t outlined init with take of MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_10();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  return v0;
}

void OUTLINED_FUNCTION_22_2(uint64_t a1@<X8>)
{
  *(void *)(v2 - 256) = v1;
  *(void *)(v3 - 552) = (unint64_t)(a1 + 63) >> 6;
}

uint64_t outlined init with copy of MaterializedViewPhysicalPlan?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_1_10();
  uint64_t v4 = OUTLINED_FUNCTION_88();
  v5(v4);
  return a2;
}

uint64_t OUTLINED_FUNCTION_59_2@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 - 256) = v1;
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

void OUTLINED_FUNCTION_59_4(uint64_t a1@<X8>)
{
  *(void *)(v3 + a1) = *(void *)(v2 + a1);
  *(void *)(v3 + v1) = *(void *)(v2 + v1);
}

uint64_t OUTLINED_FUNCTION_51_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_51_1()
{
  return v0;
}

uint64_t outlined init with take of (String, SQLDataType)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, SQLDataType));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void OUTLINED_FUNCTION_54(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 216) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_54_1()
{
  uint64_t v3 = *v0;
  uint64_t v4 = v0[1];
  *(void *)(v1 - 104) = v3;
  *(void *)(v1 - 96) = v4;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_54_2()
{
  return Optional<A>.hashValue.getter();
}

void OUTLINED_FUNCTION_54_3(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t *OUTLINED_FUNCTION_25_0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v2[3] = a1;
  v2[4] = a2;
  return __swift_allocate_boxed_opaque_existential_0Tm(v2);
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_25_2()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_25_3()
{
  return v1 & ~v0;
}

uint64_t OUTLINED_FUNCTION_33()
{
  uint64_t v2 = (void *)(v1 + *(int *)(v0 + 44));
  *uint64_t v2 = 7235949;
  v2[1] = 0xE300000000000000;
  return 0;
}

void OUTLINED_FUNCTION_33_2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 - 104) = a3;
  *(void *)(v4 - 96) = v3 & 0xFFFFFFFFFFFFFFLL;
}

uint64_t OUTLINED_FUNCTION_33_3()
{
  return v0;
}

void OUTLINED_FUNCTION_33_5()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t Schema.columns.getter()
{
  return swift_bridgeObjectRetain();
}

#error "18E6A77D8: call analysis failed (funcsize=56)"

uint64_t specialized _ContiguousArrayStorage.__deallocating_deinit()
{
  type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_17_5();
  OUTLINED_FUNCTION_65_2();
  uint64_t v0 = OUTLINED_FUNCTION_52_2();

  return MEMORY[0x1F4186488](v0, v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
  OUTLINED_FUNCTION_17_5();
  OUTLINED_FUNCTION_65_2();
  uint64_t v0 = OUTLINED_FUNCTION_52_2();

  return MEMORY[0x1F4186488](v0, v1, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t vars8;

  swift_arrayDestroy();
  uint64_t v0 = OUTLINED_FUNCTION_52_2();

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t OUTLINED_FUNCTION_65_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v4 = (a1 + 16 + v2) & ~a1;
  uint64_t v5 = (a1 + 16 + v3) & ~a1;
  __swift_getEnumTagSinglePayload(v4, 1, v1);
  return __swift_getEnumTagSinglePayload(v5, 1, v1);
}

uint64_t OUTLINED_FUNCTION_65_2()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_65_3@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 224) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  *(_DWORD *)(v1 - 468) = v0;
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

void OUTLINED_FUNCTION_48_3()
{
  uint64_t v1 = *(void *)(v0 - 96);
  *(void *)(v0 - 104) = *(void *)(v0 - 104);
  *(void *)(v0 - 96) = v1;
}

uint64_t OUTLINED_FUNCTION_39_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_39_1@<X0>(int a1@<W8>)
{
  *(_DWORD *)(v5 - 428) = a1;
  *(void *)(v5 - 440) = v4 + 104;
  *(void *)(v5 - 448) = v1 + 32;
  *(void *)(v5 - 456) = v3 + 8;
  *(void *)(v5 - 488) = v2 + 64;
  return swift_retain();
}

uint64_t recordAsSQL #1 (schema:changeRecord:) in DBViewWriter.sendDatabaseUpdate(changeRecords:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_16();
  uint64_t v36 = v8;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (void *)((char *)v34 - v11);
  uint64_t v13 = *(void *)(a1 + 16);
  if (*(void *)(a3 + 16) == v13)
  {
    MEMORY[0x1F4188790](v10);
    LOBYTE(v34[-4]) = v14;
    v34[-3] = a3;
    v34[-2] = a1;
    return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS3key_14BiomeSQLParser11SQLDataTypeO5valuetG_SSAF_0E7Streams13StorableValueOAJtsAE_pTg506_sSS14e11SQLParser11gh15OSS0A7Streams13kl3Os5C51_pIggnorzo_SS3key_AC5valuetSSAH_AfItsAG_pIegnrzr_TRSSAISSANsAE_pIggnorzo_Tf1cn_n(a1, (uint64_t (*)(char *, void, void, char *))partial apply for closure #2 in recordAsSQL #1 (schema:changeRecord:) in DBViewWriter.sendDatabaseUpdate(changeRecords:), (uint64_t)&v34[-6]);
  }
  else
  {
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v16 = swift_allocError();
    uint64_t v18 = v17;
    uint64_t v19 = MEMORY[0x1E4FBC860];
    if (v13)
    {
      v34[0] = v17;
      v34[1] = v16;
      v34[2] = a3;
      uint64_t v38 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v20 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      uint64_t v35 = *(void *)(v6 + 72);
      do
      {
        outlined init with copy of (key: String, value: SQLDataType)(v20, (uint64_t)v12, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        uint64_t v21 = v36;
        uint64_t v22 = *(int *)(v37 + 48);
        uint64_t v23 = (char *)v36 + v22;
        uint64_t v24 = (char *)v12 + v22;
        uint64_t v26 = *v12;
        uint64_t v25 = v12[1];
        *uint64_t v36 = *v12;
        v21[1] = v25;
        uint64_t v27 = type metadata accessor for SQLDataType();
        Swift::Int Description = (void (**)(char *, char *, ValueMetadata *))v27[-1].Description;
        Description[2](v23, v24, v27);
        uint64_t v29 = Description[1];
        swift_bridgeObjectRetain();
        ((void (*)(char *, ValueMetadata *))v29)(v23, v27);
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v12, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        uint64_t v19 = v38;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v19 = v38;
        }
        unint64_t v30 = *(void *)(v19 + 16);
        if (v30 >= *(void *)(v19 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v19 = v38;
        }
        *(void *)(v19 + 16) = v30 + 1;
        uint64_t v31 = v19 + 16 * v30;
        *(void *)(v31 + 32) = v26;
        *(void *)(v31 + 40) = v25;
        v20 += v35;
        --v13;
      }
      while (v13);
      uint64_t v18 = v34[0];
    }
    uint64_t v32 = swift_bridgeObjectRetain();
    uint64_t v33 = specialized _copyCollectionToContiguousArray<A>(_:)(v32);
    swift_bridgeObjectRelease();
    *(void *)uint64_t v18 = v19;
    *(void *)(v18 + 8) = v33;
    *(unsigned char *)(v18 + 64) = 7;
    return swift_willThrow();
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS3key_14BiomeSQLParser11SQLDataTypeO5valuetG_SSAF_0E7Streams13StorableValueOAJtsAE_pTg506_sSS14e11SQLParser11gh15OSS0A7Streams13kl3Os5C51_pIggnorzo_SS3key_AC5valuetSSAH_AfItsAG_pIegnrzr_TRSSAISSANsAE_pIggnorzo_Tf1cn_n(uint64_t a1, uint64_t (*a2)(char *, void, void, char *), uint64_t a3)
{
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StorableValue));
  uint64_t v5 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v7 = (uint64_t *)((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v9 = v21;
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
    uint64_t v10 = (char *)(a1
                 + ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80)));
    uint64_t v16 = *(void *)(*(void *)(v17 - 8) + 72);
    while (1)
    {
      uint64_t v11 = v19((char *)v7 + *(int *)(v18 + 48), *(void *)v10, *((void *)v10 + 1), &v10[*(int *)(v17 + 48)]);
      if (v3) {
        break;
      }
      *uint64_t v7 = v11;
      v7[1] = v12;
      uint64_t v21 = v9;
      unint64_t v13 = *(void *)(v9 + 16);
      if (v13 >= *(void *)(v9 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v9 = v21;
      }
      v10 += v16;
      *(void *)(v9 + 16) = v13 + 1;
      outlined init with take of (key: String, value: StorableValue)((uint64_t)v7, v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v13, &demangling cache variable for type metadata for (key: String, value: StorableValue));
      if (!--v8) {
        return v9;
      }
    }
    swift_release();
  }
  return v9;
}

uint64_t type metadata accessor for QueryPlannerMetadata(uint64_t a1)
{
  return type metadata accessor for SelectCorePhysicalPlan(a1, (uint64_t *)&type metadata singleton initialization cache for QueryPlannerMetadata);
}

BiomeSQLParser::Schema __swiftcall Schema.init(tableName:columns:)(Swift::String tableName, Swift::OpaquePointer columns)
{
  *(Swift::String *)uint64_t v2 = tableName;
  *(Swift::OpaquePointer *)(v2 + 16) = columns;
  result.tableName = tableName;
  result.columns = columns;
  return result;
}

uint64_t outlined release of DBViewWriter(uint64_t a1)
{
  return a1;
}

void OUTLINED_FUNCTION_55(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 184) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_55_0()
{
  return v0 + 32;
}

void OUTLINED_FUNCTION_55_2()
{
  *(void *)(v2 - 480) = v0;
  *(void *)(v2 - 488) = v1;
}

void OUTLINED_FUNCTION_55_4()
{
  *(void *)(v0 - 104) = 0;
  *(void *)(v0 - 96) = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
}

void OUTLINED_FUNCTION_56(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 192) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_56_1()
{
  outlined consume of Data?(v1, v0);
  return outlined consume of Data?(v1, v0);
}

uint64_t OUTLINED_FUNCTION_56_2()
{
  return v0;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v2 = (void *)swift_allocObject();
  size_t v3 = _swift_stdlib_malloc_size(v2);
  v2[2] = v1;
  v2[3] = 2 * ((uint64_t)(v3 - 32) / 16);
  specialized Sequence._copySequenceContents(initializing:)();
  OUTLINED_FUNCTION_122_1();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_130_0();
  if (!v4)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v2;
}

void specialized Sequence._copySequenceContents(initializing:)()
{
  OUTLINED_FUNCTION_104_1();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = v2 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(v2 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(v2 + 64);
  if (!v0)
  {
    int64_t v12 = 0;
LABEL_36:
    *uint64_t v5 = v3;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    void v5[4] = v9;
    OUTLINED_FUNCTION_93_2();
    return;
  }
  uint64_t v10 = v1;
  if (!v1)
  {
    int64_t v12 = 0;
    goto LABEL_36;
  }
  if (v1 < 0)
  {
LABEL_38:
    __break(1u);
  }
  else
  {
    uint64_t v11 = v0;
    int64_t v12 = 0;
    uint64_t v13 = 0;
    int64_t v14 = (unint64_t)(63 - v7) >> 6;
    if (!v9) {
      goto LABEL_9;
    }
LABEL_8:
    unint64_t v15 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v16 = v15 | (v12 << 6);
    while (1)
    {
      ++v13;
      uint64_t v22 = (void *)(*(void *)(v3 + 48) + 16 * v16);
      uint64_t v23 = v22[1];
      *uint64_t v11 = *v22;
      v11[1] = v23;
      if (v13 == v10)
      {
        swift_bridgeObjectRetain();
        goto LABEL_36;
      }
      v11 += 2;
      swift_bridgeObjectRetain();
      if (v9) {
        goto LABEL_8;
      }
LABEL_9:
      int64_t v17 = v12 + 1;
      if (__OFADD__(v12, 1))
      {
        __break(1u);
        goto LABEL_38;
      }
      if (v17 >= v14) {
        goto LABEL_32;
      }
      if (!*(void *)(v6 + 8 * v17))
      {
        v12 += 2;
        if (v17 + 1 >= v14)
        {
          unint64_t v9 = 0;
          int64_t v12 = v17;
          goto LABEL_36;
        }
        if (!*(void *)(v6 + 8 * v12))
        {
          if (v17 + 2 >= v14) {
            goto LABEL_32;
          }
          if (!*(void *)(v6 + 8 * (v17 + 2)))
          {
            int64_t v12 = v17 + 3;
            if (v17 + 3 >= v14)
            {
              unint64_t v9 = 0;
              int64_t v12 = v17 + 2;
              goto LABEL_36;
            }
            if (!*(void *)(v6 + 8 * v12))
            {
              int64_t v24 = v17 + 4;
              if (v17 + 4 >= v14)
              {
LABEL_32:
                unint64_t v9 = 0;
                goto LABEL_36;
              }
              if (!*(void *)(v6 + 8 * v24)) {
                break;
              }
            }
          }
        }
      }
LABEL_17:
      OUTLINED_FUNCTION_116_0();
      unint64_t v9 = v19 & v18;
      unint64_t v16 = v21 + (v20 << 6);
      int64_t v12 = v20;
    }
    while (1)
    {
      int64_t v25 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        break;
      }
      if (v25 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v14 - 1;
        goto LABEL_36;
      }
      ++v24;
      if (*(void *)(v6 + 8 * v25)) {
        goto LABEL_17;
      }
    }
  }
  __break(1u);
}

uint64_t *hash_search_with_hash_value(uint64_t a1, uint64_t a2, int a3, int a4, unsigned char *a5)
{
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(*(void *)a1 + 816);
  int v10 = a3 & 0x1F;
  if (!v9) {
    int v10 = 0;
  }
  unsigned int v98 = v10;
  if ((a4 | 2) != 3) {
    goto LABEL_31;
  }
  if (v9) {
    goto LABEL_31;
  }
  if (*(unsigned char *)(a1 + 66)) {
    goto LABEL_31;
  }
  uint64_t v11 = (*(_DWORD *)(v8 + 784) + 1);
  if (*(void *)(v8 + 8) / v11 < *(void *)(v8 + 824)) {
    goto LABEL_31;
  }
  seq_scan_tables();
  unint64_t v13 = *(unsigned int *)num_seq_scans();
  if ((int)v13 >= 1)
  {
    if (*v12 == a1) {
      goto LABEL_31;
    }
    uint64_t v14 = 1;
    do
    {
      unint64_t v15 = v14;
      if (v13 == v14) {
        break;
      }
      uint64_t v16 = v12[v14++];
    }
    while (v16 != a1);
    if (v15 < v13) {
      goto LABEL_31;
    }
  }
  int64_t v17 = (unint64_t)v11 >> *(_DWORD *)(a1 + 88);
  int v18 = *(_DWORD *)(a1 + 80);
  if (v17 < *(void *)(v8 + 776))
  {
    int v19 = v11;
LABEL_26:
    *(_DWORD *)(v8 + 784) = v19;
    unint64_t v26 = *(_DWORD *)(v8 + 792) & v11;
    unsigned int v27 = *(_DWORD *)(v8 + 788);
    if (v11 > v27)
    {
      *(_DWORD *)(v8 + 792) = v27;
      *(_DWORD *)(v8 + 788) = v27 | v11;
    }
    uint64_t v28 = *(void *)(a1 + 8);
    uint64_t v29 = (void *)(*(void *)(v28 + 8 * (v26 >> *(_DWORD *)(a1 + 88)))
                   + 8 * ((*(_DWORD *)(a1 + 80) - 1) & v26));
    unint64_t v30 = (void *)(*(void *)(v28 + 8 * v17) + 8 * ((v18 - 1) & v11));
    uint64_t v31 = (uint64_t *)*v29;
    if (*v29)
    {
      do
      {
        unsigned int v61 = *(_DWORD *)(v8 + 788) & v31[1];
        if (v61 > *(_DWORD *)(v8 + 784)) {
          v61 &= *(_DWORD *)(v8 + 792);
        }
        uint64_t v58 = (uint64_t *)*v31;
        BOOL v59 = v61 == v26;
        if (v61 == v26) {
          uint64_t v60 = v29;
        }
        else {
          uint64_t v60 = v30;
        }
        if (v59) {
          uint64_t v29 = v31;
        }
        else {
          unint64_t v30 = v31;
        }
        *uint64_t v60 = v31;
        uint64_t v31 = v58;
      }
      while (v58);
    }
    *uint64_t v29 = 0;
    goto LABEL_30;
  }
  int64_t v20 = *(void *)(v8 + 768);
  if (v17 < v20)
  {
    uint64_t v21 = (void *)CurrentDynaHashCxt();
    goto LABEL_17;
  }
  if (*(void *)(v8 + 832) != -1) {
    goto LABEL_31;
  }
  uint64_t v72 = *(const void **)(a1 + 8);
  uint64_t v21 = (void *)CurrentDynaHashCxt();
  *uint64_t v21 = v73;
  uint64_t v91 = v74;
  uint64_t v75 = (void *)(*(uint64_t (**)(uint64_t))(a1 + 40))(v74);
  if (!v75) {
    goto LABEL_31;
  }
  uint64_t v95 = 2 * v20;
  unint64_t v97 = (unint64_t)v75;
  size_t v76 = 8 * v20;
  memcpy(v75, v72, v76);
  unint64_t v77 = v97;
  uint64_t v78 = (void *)(v97 + v76);
  if (v76 > 0x400 || (v78 & 7) != 0)
  {
    size_t v80 = v76;
LABEL_112:
    bzero(v78, v80);
    unint64_t v77 = v97;
    goto LABEL_113;
  }
  if (v97 < (unint64_t)v78)
  {
    unint64_t v79 = v76 + v97 + 8;
    if (v79 <= v91 + v97) {
      unint64_t v79 = v91 + v97;
    }
    size_t v80 = ((~v97 - v76 + v79) & 0xFFFFFFFFFFFFFFF8) + 8;
    goto LABEL_112;
  }
LABEL_113:
  *(void *)(a1 + 8) = v77;
  *(void *)(*(void *)a1 + 768) = v95;
  pfree((uint64_t)v72);
LABEL_17:
  *uint64_t v21 = *(void *)(a1 + 48);
  unint64_t v22 = (*(uint64_t (**)(uint64_t))(a1 + 40))(8 * *(void *)(a1 + 80));
  if (v22)
  {
    unint64_t v23 = v22;
    size_t v24 = 8 * *(void *)(a1 + 80);
    if ((v22 & 7) == 0 && v24 <= 0x400)
    {
      if (v22 >= v22 + v24)
      {
LABEL_25:
        *(void *)(*(void *)(a1 + 8) + 8 * v17) = v23;
        ++*(void *)(v8 + 776);
        int v19 = *(_DWORD *)(v8 + 784) + 1;
        goto LABEL_26;
      }
      unint64_t v25 = v24 + v22;
      if (v24 + v22 <= v22 + 8) {
        unint64_t v25 = v22 + 8;
      }
      size_t v24 = ((v25 + ~v22) & 0xFFFFFFFFFFFFFFF8) + 8;
    }
    bzero((void *)v22, v24);
    goto LABEL_25;
  }
  unint64_t v30 = (void *)(*(void *)(a1 + 8) + 8 * v17);
LABEL_30:
  *unint64_t v30 = 0;
LABEL_31:
  unsigned int v32 = *(_DWORD *)(v8 + 788) & a3;
  if (v32 > *(_DWORD *)(v8 + 784)) {
    v32 &= *(_DWORD *)(v8 + 792);
  }
  uint64_t v33 = *(void *)(*(void *)(a1 + 8) + 8 * (v32 >> *(_DWORD *)(a1 + 88)));
  if (!v33)
  {
    if (!*(unsigned char *)(a1 + 64)) {
      hash_search_with_hash_value_cold_1((const char **)(a1 + 56));
    }
    hash_search_with_hash_value_cold_2((const char **)(a1 + 56));
  }
  uint64_t v34 = (uint64_t *)(v33 + 8 * ((*(_DWORD *)(a1 + 80) - 1) & v32));
  uint64_t v35 = *(void *)(a1 + 72);
  uint64_t v36 = *v34;
  if (*v34)
  {
    uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(a1 + 24);
    while (1)
    {
      uint64_t v38 = (uint64_t *)v36;
      if (*(_DWORD *)(v36 + 8) == a3 && !v37(v36 + 16, a2, v35)) {
        break;
      }
      uint64_t v36 = *v38;
      uint64_t v34 = v38;
      if (!*v38)
      {
        uint64_t v34 = v38;
        goto LABEL_42;
      }
    }
    LODWORD(v36) = 1;
    int v39 = a4;
    if (a5) {
      goto LABEL_43;
    }
  }
  else
  {
LABEL_42:
    uint64_t v38 = 0;
    int v39 = a4;
    if (a5) {
LABEL_43:
    }
      *a5 = v36;
  }
  unsigned int v40 = v98;
  switch(v39)
  {
    case 0:
      if (v36) {
        return v38 + 2;
      }
      else {
        return 0;
      }
    case 1:
    case 3:
      if (v36) {
        return v38 + 2;
      }
      int v90 = a3;
      if (*(unsigned char *)(a1 + 66)) {
        hash_search_with_hash_value_cold_6(a1);
      }
      uint64_t v41 = *(void *)a1;
      uint64_t v42 = (atomic_uint *)(*(void *)a1 + 24 * v98);
      uint64_t v96 = (uint64_t *)(v42 + 4);
      unint64_t v94 = (void *)CurrentDynaHashCxt();
      break;
    case 2:
      if (!v36) {
        return 0;
      }
      if (*(void *)(v8 + 816) && atomic_exchange((atomic_uint *volatile)(v8 + 24 * v98), 1u)) {
        s_lock((atomic_uint *)(v8 + 24 * v98), (uint64_t)"src/postgres/src_backend_utils_hash_dynahash.c", 0x227u, (uint64_t)"hash_search_with_hash_value");
      }
      uint64_t v63 = v8 + 24 * v98;
      --*(void *)(v63 + 8);
      *uint64_t v34 = *v38;
      *uint64_t v38 = *(void *)(v63 + 16);
      *(void *)(v63 + 16) = v38;
      if (*(void *)(v8 + 816)) {
        atomic_store(0, (unsigned int *)(v8 + 24 * v98));
      }
      return v38 + 2;
    default:
      hash_search_with_hash_value_cold_3(v39);
  }
  while (1)
  {
    if (*(void *)(v41 + 816) && atomic_exchange(v42, 1u)) {
      s_lock(v42, (uint64_t)"src/postgres/src_backend_utils_hash_dynahash.c", 0x29Eu, (uint64_t)"get_hash_entry");
    }
    uint64_t v43 = *v96;
    if (*v96)
    {
      *uint64_t v96 = *(void *)v43;
      ++*(void *)(v41 + 24 * v40 + 8);
      if (*(void *)(v41 + 816)) {
        goto LABEL_99;
      }
      goto LABEL_100;
    }
    uint64_t v44 = v35;
    uint64_t v45 = *(void *)(v41 + 816);
    if (v45) {
      atomic_store(0, (unsigned int *)v42);
    }
    uint64_t v46 = v42;
    if (*(unsigned char *)(a1 + 65)) {
      goto LABEL_88;
    }
    int v47 = *(_DWORD *)(v41 + 852);
    uint64_t v48 = *(void *)a1;
    unint64_t v49 = (*(void *)(*(void *)a1 + 808) + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v50 = v49 + 16;
    *unint64_t v94 = *(void *)(a1 + 48);
    uint64_t v51 = (*(uint64_t (**)(unint64_t))(a1 + 40))((v49 + 16) * v47);
    if (!v51) {
      break;
    }
    uint64_t v52 = (void *)v51;
    if (v47 < 1)
    {
      uint64_t v56 = 0;
      unsigned int v40 = v98;
      if (!*(void *)(v48 + 816)) {
        goto LABEL_64;
      }
    }
    else
    {
      uint64_t v53 = 0;
      uint64_t v54 = (void *)v51;
      do
      {
        *uint64_t v54 = v53;
        uint64_t v55 = (char *)v54 + v50;
        uint64_t v53 = v54;
        uint64_t v54 = (void *)((char *)v54 + v50);
        --v47;
      }
      while (v47);
      uint64_t v56 = (uint64_t)&v55[-v49 - 16];
      unsigned int v40 = v98;
      if (!*(void *)(v48 + 816)) {
        goto LABEL_64;
      }
    }
    if (atomic_exchange((atomic_uint *volatile)(v48 + 24 * v40), 1u)) {
      s_lock((atomic_uint *)(v48 + 24 * v40), (uint64_t)"src/postgres/src_backend_utils_hash_dynahash.c", 0x3DBu, (uint64_t)"element_alloc");
    }
LABEL_64:
    uint64_t v57 = v48 + 24 * v40;
    *uint64_t v52 = *(void *)(v57 + 16);
    *(void *)(v57 + 16) = v56;
    uint64_t v42 = v46;
    uint64_t v35 = v44;
    if (*(void *)(v48 + 816)) {
      atomic_store(0, (unsigned int *)(v48 + 24 * v40));
    }
  }
  uint64_t v45 = *(void *)(v41 + 816);
LABEL_88:
  if (v45)
  {
    unsigned int v64 = (v98 + 1) & 0x1F;
    if (v64 != v98)
    {
      while (1)
      {
        uint64_t v65 = (atomic_uint *)(v41 + 24 * v64);
        if (atomic_exchange(v65, 1u)) {
          s_lock((atomic_uint *)(v41 + 24 * v64), (uint64_t)"src/postgres/src_backend_utils_hash_dynahash.c", 0x2C4u, (uint64_t)"get_hash_entry");
        }
        char v66 = v64;
        uint64_t v67 = v41 + 24 * v64;
        uint64_t v69 = *(void *)(v67 + 16);
        uint64_t v68 = (void *)(v67 + 16);
        uint64_t v43 = v69;
        if (v69) {
          break;
        }
        atomic_store(0, (unsigned int *)v65);
        unsigned int v64 = (v66 + 1) & 0x1F;
        if (v64 == v98) {
          goto LABEL_94;
        }
      }
      *uint64_t v68 = *(void *)v43;
      atomic_store(0, (unsigned int *)v65);
      uint64_t v42 = v46;
      if (atomic_exchange(v46, 1u)) {
        s_lock(v46, (uint64_t)"src/postgres/src_backend_utils_hash_dynahash.c", 0x2CDu, (uint64_t)"get_hash_entry");
      }
      ++*(void *)(v41 + 24 * v98 + 8);
      uint64_t v35 = v44;
LABEL_99:
      atomic_store(0, (unsigned int *)v42);
LABEL_100:
      *uint64_t v34 = v43;
      *(void *)uint64_t v43 = 0;
      *(_DWORD *)(v43 + 8) = v90;
      uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
      uint64_t v62 = v43 + 16;
      v70(v43 + 16, a2, v35);
      return (uint64_t *)v62;
    }
  }
LABEL_94:
  if (a4 != 3)
  {
    int v81 = *(unsigned __int8 *)(a1 + 64);
    errstart(20, 0);
    uint64_t v82 = errcode();
    if (!v81) {
      hash_search_with_hash_value_cold_4(v82, v83, v84, v85, v86, v87, v88, v89);
    }
    hash_search_with_hash_value_cold_5(v82, v83, v84, v85, v86, v87, v88, v89);
  }
  return 0;
}

void StorableValue.hash(into:)()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_36_0();
  uint64_t v7 = type metadata accessor for Date.ISO8601FormatStyle();
  OUTLINED_FUNCTION_0_4();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_24();
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v12 = OUTLINED_FUNCTION_35(v11);
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_64();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_84();
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_69();
  outlined init with copy of StorableValue(v0, v5, (void (*)(void))type metadata accessor for StorableValue);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      if (*(unsigned char *)(v5 + 8))
      {
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
        goto LABEL_8;
      }
      static StorableValue.hashForDouble(double:)(*(double *)v5);
      Swift::UInt v16 = Int.hashValue.getter();
      goto LABEL_16;
    case 2u:
      outlined init with take of UUID?(v5, v1, (uint64_t *)&demangling cache variable for type metadata for Date?);
      outlined init with copy of Date?(v1, v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
      uint64_t v17 = type metadata accessor for Date();
      if (__swift_getEnumTagSinglePayload(v4, 1, v17) == 1)
      {
        outlined destroy of UUID?(v4, (uint64_t *)&demangling cache variable for type metadata for Date?);
        Hasher._combine(_:)(0);
      }
      else
      {
        default argument 0 of Date.ISO8601Format(_:)(v3);
        Date.ISO8601Format(_:)();
        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v3, v7);
        OUTLINED_FUNCTION_14();
        OUTLINED_FUNCTION_2_4();
        v24();
        Swift::UInt v25 = String.hashValue.getter();
        swift_bridgeObjectRelease();
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v25);
      }
      unint64_t v23 = (uint64_t *)&demangling cache variable for type metadata for Date?;
      uint64_t v22 = v1;
      goto LABEL_14;
    case 3u:
    case 4u:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
      uint64_t v15 = Optional<A>.hashValue.getter();
      swift_bridgeObjectRelease();
      Swift::UInt v16 = v15;
      goto LABEL_16;
    case 5u:
      double v18 = *(double *)v5;
      unint64_t v19 = *(void *)(v5 + 8);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
      lazy protocol witness table accessor for type Data and conformance Data();
      Swift::UInt v20 = Optional<A>.hashValue.getter();
      Hasher._combine(_:)(v20);
      outlined consume of Data?(*(uint64_t *)&v18, v19);
      return;
    case 6u:
      outlined init with take of UUID?(v5, v2, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
      Swift::UInt v21 = Optional<A>.hashValue.getter();
      Hasher._combine(_:)(v21);
      uint64_t v22 = v2;
      unint64_t v23 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
LABEL_14:
      outlined destroy of UUID?(v22, v23);
      return;
    case 7u:
      Swift::UInt v16 = 0;
      goto LABEL_16;
    default:
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
LABEL_8:
      Swift::UInt v16 = Optional<A>.hashValue.getter();
LABEL_16:
      Hasher._combine(_:)(v16);
      return;
  }
}

uint64_t OUTLINED_FUNCTION_84()
{
  return type metadata accessor for StorableValue(0);
}

uint64_t OUTLINED_FUNCTION_84_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_84_1()
{
  return outlined init with copy of StorableValue(v0, v1);
}

uint64_t static StorableValue.hashForDouble(double:)(double a1)
{
  double v1 = floor(a1);
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v1 < 9.22337204e18) {
    return Int.hashValue.getter();
  }
LABEL_7:
  __break(1u);
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(Swift::String viewName, Swift::String databaseName, Swift::String streamIdentifier)
{
}

uint64_t partial apply for closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)()
{
  return partial apply for closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:));
}

uint64_t partial apply for closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, const char *a7, uint64_t a8)
{
  uint64_t v107 = a8;
  uint64_t v109 = a7;
  uint64_t v102 = a5;
  type metadata accessor for OSSignpostError();
  OUTLINED_FUNCTION_0_4();
  uint64_t v99 = v15;
  uint64_t v100 = v14;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_16();
  uint64_t v97 = v16;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_21();
  uint64_t v96 = v18;
  OUTLINED_FUNCTION_11();
  uint64_t v20 = MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_41_1(v20, v21, v22, v23, v24, v25, v26, v27, v91);
  uint64_t v114 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_0_4();
  uint64_t v29 = v28;
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_16();
  uint64_t v105 = v31;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_21();
  uint64_t v104 = v33;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v34);
  unsigned int v98 = (char *)&v91 - v35;
  OUTLINED_FUNCTION_11();
  uint64_t v37 = MEMORY[0x1F4188790](v36);
  int v39 = (char *)&v91 - v38;
  MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v91 - v40;
  uint64_t v106 = v8;
  uint64_t v42 = v8 + OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_signposter;
  OSSignposter.logHandle.getter();
  OSSignpostID.init(log:)();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v110 = v42;
  uint64_t v43 = OSSignposter.logHandle.getter();
  int v101 = static os_signpost_type_t.begin.getter();
  uint64_t v111 = v43;
  char v44 = OS_os_log.signpostsEnabled.getter();
  uint64_t v112 = a3;
  uint64_t v113 = v41;
  if (v44)
  {
    uint64_t v93 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
    uint64_t v103 = a1;
    OUTLINED_FUNCTION_47_0();
    v45();
    uint64_t v46 = swift_slowAlloc();
    uint64_t v94 = v29;
    uint64_t v47 = v46;
    uint64_t v92 = swift_slowAlloc();
    uint64_t v115 = v92;
    *(_DWORD *)uint64_t v47 = 136446722;
    swift_bridgeObjectRetain();
    uint64_t v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, a6, &v115);
    OUTLINED_FUNCTION_36_1(v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v47 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v115);
    OUTLINED_FUNCTION_50_0(v49);
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v47 + 22) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v103, a2, &v115);
    OUTLINED_FUNCTION_50_0(v50);
    uint64_t v51 = a2;
    a1 = v103;
    swift_bridgeObjectRelease_n();
    os_signpost_id_t v52 = OSSignpostID.rawValue.getter();
    uint64_t v53 = v111;
    _os_signpost_emit_with_name_impl(&dword_18E67D000, v111, (os_signpost_type_t)v101, v52, v109, "stream:%{public}s database:%{public}s view:%{public}s", (uint8_t *)v47, 0x20u);
    swift_arrayDestroy();
    uint64_t v54 = v113;
    OUTLINED_FUNCTION_9();
    uint64_t v29 = v94;
    OUTLINED_FUNCTION_9();

    (*(void (**)(char *, uint64_t))(v29 + 8))(v39, v114);
    v93(v39, v54, v114);
  }
  else
  {
    uint64_t v51 = a2;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v39, v41, v114);
  }
  type metadata accessor for OSSignpostIntervalState();
  OUTLINED_FUNCTION_51_0();
  uint64_t v55 = OSSignpostIntervalState.init(id:isOpen:)();
  if (one-time initialization token for initializedLibrary != -1) {
    swift_once();
  }
  uint64_t v56 = v112;
  uint64_t v57 = static UnifiedLibrary.Library.lookupDatabaseResource(identifier:)(v112, a4);
  if (!v57)
  {
    lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
    OUTLINED_FUNCTION_39();
    *(void *)uint64_t v67 = v56;
    *(void *)(v67 + 8) = a4;
    *(unsigned char *)(v67 + 16) = 0;
    swift_bridgeObjectRetain();
    swift_willThrow();
    uint64_t v62 = (void *)OSSignposter.logHandle.getter();
    uint64_t v63 = v104;
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if (OUTLINED_FUNCTION_18_0())
    {
      swift_retain();
      uint64_t v64 = v96;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v68 = OUTLINED_FUNCTION_6_4();
      if (v69(v68) == *MEMORY[0x1E4FBD340])
      {
        uint64_t v64 = v29;
      }
      else
      {
        uint64_t v78 = OUTLINED_FUNCTION_10_0();
        v79(v78);
      }
      *(_WORD *)OUTLINED_FUNCTION_25_1() = 0;
      uint64_t v77 = v104;
      goto LABEL_21;
    }
LABEL_22:

    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v83(v63, v114);
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v83)(v113, v114);
  }
  uint64_t v58 = MEMORY[0x1F4188790](v57);
  *(&v91 - 8) = a1;
  *(&v91 - 7) = v51;
  *(&v91 - 6) = v56;
  *(&v91 - 5) = a4;
  uint64_t v59 = v107;
  *(&v91 - 4) = v106;
  *(&v91 - 3) = v58;
  *(&v91 - 2) = v60;
  uint64_t v61 = v108;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 24))(a1, v51, v59);
  if (v61)
  {
    uint64_t v62 = (void *)OSSignposter.logHandle.getter();
    uint64_t v63 = v105;
    OSSignpostIntervalState.signpostID.getter();
    static os_signpost_type_t.end.getter();
    if (OUTLINED_FUNCTION_18_0())
    {
      swift_retain();
      uint64_t v64 = v97;
      checkForErrorAndConsumeState(state:)();
      swift_release();
      uint64_t v65 = OUTLINED_FUNCTION_6_4();
      if (v66(v65) == *MEMORY[0x1E4FBD340])
      {
        uint64_t v64 = v29;
      }
      else
      {
        uint64_t v75 = OUTLINED_FUNCTION_10_0();
        v76(v75);
      }
      *(_WORD *)OUTLINED_FUNCTION_25_1() = 0;
      uint64_t v77 = v105;
LABEL_21:
      OSSignpostID.rawValue.getter();
      OUTLINED_FUNCTION_45_0();
      OUTLINED_FUNCTION_32_0(&dword_18E67D000, v80, v81, v82);
      OUTLINED_FUNCTION_9();
      uint64_t v29 = v64;
      uint64_t v63 = v77;
      goto LABEL_22;
    }
    goto LABEL_22;
  }
  uint64_t v70 = (void *)OSSignposter.logHandle.getter();
  uint64_t v71 = (char *)v55;
  OSSignpostIntervalState.signpostID.getter();
  static os_signpost_type_t.end.getter();
  if (OUTLINED_FUNCTION_18_0())
  {
    swift_retain();
    uint64_t v72 = v95;
    checkForErrorAndConsumeState(state:)();
    swift_release();
    uint64_t v73 = OUTLINED_FUNCTION_6_4();
    if (v74(v73) == *MEMORY[0x1E4FBD340])
    {
      uint64_t v72 = v29;
    }
    else
    {
      uint64_t v85 = OUTLINED_FUNCTION_10_0();
      v86(v85);
    }
    *(_WORD *)OUTLINED_FUNCTION_25_1() = 0;
    uint64_t v71 = v98;
    OSSignpostID.rawValue.getter();
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_32_0(&dword_18E67D000, v87, v88, v89);
    OUTLINED_FUNCTION_9();
    uint64_t v29 = v72;
  }

  int v90 = *(void (**)(void))(v29 + 8);
  OUTLINED_FUNCTION_57_0();
  v90();
  swift_release();
  return ((uint64_t (*)(char *, char *))v90)(v113, v71);
}

uint64_t OUTLINED_FUNCTION_41_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 256) = (char *)&a9 - v9;
  return 0;
}

uint64_t OUTLINED_FUNCTION_41_2@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 336) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
}

uint64_t OUTLINED_FUNCTION_41_3(uint64_t a1)
{
  *(void *)(v1 - 112) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_36_1(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

void OUTLINED_FUNCTION_36_3()
{
  char v2 = *(unsigned char *)(v0 + 8);
  *(void *)(v1 - 192) = *(void *)v0;
  *(unsigned char *)(v1 - 184) = v2;
}

uint64_t OUTLINED_FUNCTION_36_4()
{
  return 0;
}

void OUTLINED_FUNCTION_36_5()
{
  uint64_t v1 = 0x2A205443454C4553;
  unint64_t v2 = 0xEE00204D4F524620;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_50@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(a1 - 256);
  *(void *)uint64_t v3 = v1;
  *(unsigned char *)(v3 + 8) = v2 & 1;
  return v3;
}

uint64_t OUTLINED_FUNCTION_50_0(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_50_3()
{
  return Optional<A>.hashValue.getter();
}

uint64_t OUTLINED_FUNCTION_50_4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 + a1) = *(void *)(v2 + a1);
  return swift_bridgeObjectRelease();
}

uint64_t static UnifiedLibrary.Library.lookupDatabaseResource(identifier:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static UnifiedLibrary.Library.libraries.getter();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = v4 + 40;
    while (1)
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(a1, a2);
      if (v7) {
        break;
      }
      v6 += 16;
      if (!--v5) {
        goto LABEL_5;
      }
    }
    uint64_t v8 = v7;
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v8;
}

uint64_t static UnifiedLibrary.Library.libraries.getter()
{
  if (one-time initialization token for lockedLibraries != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)(static UnifiedLibrary.Library.lockedLibraries + 16);
  uint64_t v1 = (os_unfair_lock_s *)(static UnifiedLibrary.Library.lockedLibraries + 24);
  swift_retain();
  os_unfair_lock_lock(v1);
  closure #1 in static UnifiedLibrary.Library.libraries.getter(v0, &v3);
  os_unfair_lock_unlock(v1);
  swift_release();
  return v3;
}

uint64_t closure #1 in static UnifiedLibrary.Library.libraries.getter@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in IncrementalViewManager.update(viewName:databaseName:streamIdentifier:)(NSObject *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  uint64_t v94 = a7;
  unint64_t v93 = a6;
  os_log_t v104 = a1;
  uint64_t v99 = type metadata accessor for MaterializedViewPhysicalPlan(0);
  uint64_t v97 = *(void *)(v99 - 8);
  uint64_t v11 = MEMORY[0x1F4188790](v99);
  uint64_t v13 = (char *)&v91 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v91 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  uint64_t v17 = MEMORY[0x1F4188790](v16 - 8);
  unsigned int v98 = (char *)&v91 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v91 - v19;
  if (one-time initialization token for compute != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = __swift_project_value_buffer(v21, (uint64_t)static Logging.compute);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v91 = v22;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.info.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v102 = v20;
  unint64_t v103 = a2;
  uint64_t v96 = v15;
  unint64_t v100 = a4;
  uint64_t v92 = a3;
  uint64_t v101 = a5;
  if (v25)
  {
    uint64_t v26 = a3;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v108 = v28;
    *(_DWORD *)uint64_t v27 = 136315394;
    swift_bridgeObjectRetain();
    v107[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v104, a2, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v29 = v26;
    uint64_t v20 = v102;
    v107[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, a4, &v108);
    a2 = v103;
    a5 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_18E67D000, v23, v24, "IncrementalViewManager: updating materialized view for %s in %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x192FB1900](v28, -1, -1);
    MEMORY[0x192FB1900](v27, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v30 = *(void *)(a5 + 16);
  uint64_t v31 = *(void *)(v30 + 16);
  if (v31)
  {
    uint64_t v32 = v30 + ((*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80));
    uint64_t v33 = *(void *)(v97 + 72);
    swift_bridgeObjectRetain_n();
    while (1)
    {
      outlined init with copy of MaterializedViewPhysicalPlan(v32, (uint64_t)v13, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
      MaterializedView.name.getter();
      Swift::String v34 = String.lowercased()();
      a2 = v103;
      swift_bridgeObjectRelease();
      Swift::String v35 = String.lowercased()();
      if (v34._countAndFlagsBits == v35._countAndFlagsBits && v34._object == v35._object) {
        break;
      }
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v37) {
        goto LABEL_18;
      }
      outlined destroy of MaterializedViewPhysicalPlan((uint64_t)v13);
      v32 += v33;
      if (!--v31)
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = 1;
        uint64_t v20 = v102;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    unint64_t v39 = v100;
    uint64_t v40 = v99;
    uint64_t v41 = (uint64_t)v98;
    swift_bridgeObjectRelease();
    uint64_t v20 = v102;
    outlined init with take of MaterializedViewPhysicalPlan((uint64_t)v13, (uint64_t)v102, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
    uint64_t v38 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = 1;
LABEL_16:
    unint64_t v39 = v100;
    uint64_t v40 = v99;
    uint64_t v41 = (uint64_t)v98;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v20, v38, 1, v40);
  swift_bridgeObjectRelease();
  outlined init with copy of MaterializedViewPhysicalPlan?((uint64_t)v20, v41, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  if (__swift_getEnumTagSinglePayload(v41, 1, v40) != 1)
  {
    uint64_t v43 = (uint64_t)v96;
    outlined init with take of MaterializedViewPhysicalPlan(v41, (uint64_t)v96, (void (*)(void))type metadata accessor for MaterializedViewPhysicalPlan);
    uint64_t v44 = v95;
    uint64_t v45 = IncrementalViewManager.cachedDatabaseWithAccess(for:)(v93, v94);
    if (!v44)
    {
      uint64_t v46 = v45;
      uint64_t v47 = (sqlite3 *)*((void *)v45 + 2);
      uint64_t v48 = sqlite3_exec(v47, "begin", 0, 0, 0);
      if (v48)
      {
        id v49 = BMSQLDatabaseError(v48, v47, 0);
        swift_getErrorValue();
        uint64_t v50 = Error.localizedDescription.getter();
        uint64_t v52 = v51;

        uint64_t v108 = v50;
        uint64_t v109 = v52;
        strcpy((char *)v107, "BMSQLDatabase");
        HIWORD(v107[1]) = -4864;
        uint64_t v105 = 0x62617461444C5153;
        unint64_t v106 = 0xEB00000000657361;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v53 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v55 = v54;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
        swift_allocError();
        *(_OWORD *)uint64_t v56 = xmmword_18EB382E0;
        *(void *)(v56 + 16) = v53;
        *(void *)(v56 + 24) = v55;
        *(unsigned char *)(v56 + 32) = 1;
      }
      else
      {
        uint64_t v59 = v92;
        IncrementalViewManager.update(database:materializedViewPlan:databaseName:)(v47, v43, v92, v39);
        uint64_t v60 = sqlite3_exec(v47, "commit", 0, 0, 0);
        if (!v60)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_retain_n();
          uint64_t v80 = Logger.logObject.getter();
          os_log_type_t v81 = static os_log_type_t.info.getter();
          int v82 = v81;
          if (os_log_type_enabled(v80, v81))
          {
            uint64_t v83 = swift_slowAlloc();
            LODWORD(v103) = v82;
            uint64_t v84 = v83;
            uint64_t v101 = swift_slowAlloc();
            uint64_t v108 = v101;
            *(_DWORD *)uint64_t v84 = 136315650;
            uint64_t v99 = (uint64_t)v46;
            swift_bridgeObjectRetain();
            v107[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v104, a2, &v108);
            os_log_t v104 = v80;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v84 + 12) = 2080;
            swift_bridgeObjectRetain();
            v107[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v39, &v108);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v84 + 22) = 2080;
            id v85 = objc_msgSend(*(id *)(v99 + 24), sel_description);
            uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v88 = v87;

            v107[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v88, &v108);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            os_log_t v89 = v104;
            _os_log_impl(&dword_18E67D000, v104, (os_log_type_t)v103, "IncrementalViewManager: updated materialized view for %s in %s. Access assertion: %s", (uint8_t *)v84, 0x20u);
            uint64_t v90 = v101;
            swift_arrayDestroy();
            MEMORY[0x192FB1900](v90, -1, -1);
            MEMORY[0x192FB1900](v84, -1, -1);
            swift_release();

            outlined destroy of MaterializedViewPhysicalPlan((uint64_t)v96);
            uint64_t v57 = (uint64_t)v102;
            return outlined destroy of UUID?(v57, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
          }
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_release_n();

          goto LABEL_25;
        }
        id v61 = BMSQLDatabaseError(v60, v47, 0);
        swift_getErrorValue();
        uint64_t v62 = Error.localizedDescription.getter();
        uint64_t v64 = v63;

        uint64_t v108 = v62;
        uint64_t v109 = v64;
        strcpy((char *)v107, "BMSQLDatabase");
        HIWORD(v107[1]) = -4864;
        uint64_t v105 = 0x62617461444C5153;
        unint64_t v106 = 0xEB00000000657361;
        lazy protocol witness table accessor for type String and conformance String();
        uint64_t v65 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
        uint64_t v67 = v66;
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
        uint64_t v68 = (void *)swift_allocError();
        *(_OWORD *)uint64_t v69 = xmmword_18EB382F0;
        *(void *)(v69 + 16) = v65;
        *(void *)(v69 + 24) = v67;
        *(unsigned char *)(v69 + 32) = 1;
        swift_willThrow();
        uint64_t v70 = (sqlite3 *)*((void *)v46 + 2);
        uint64_t v71 = sqlite3_exec(v70, "rollback", 0, 0, 0);
        if (v71)
        {
          id v72 = BMSQLDatabaseError(v71, v70, 0);
          swift_getErrorValue();
          uint64_t v73 = Error.localizedDescription.getter();
          uint64_t v75 = v74;

          uint64_t v108 = v73;
          uint64_t v109 = v75;
          strcpy((char *)v107, "BMSQLDatabase");
          HIWORD(v107[1]) = -4864;
          uint64_t v105 = 0x62617461444C5153;
          unint64_t v106 = 0xEB00000000657361;
          lazy protocol witness table accessor for type String and conformance String();
          uint64_t v76 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
          uint64_t v78 = v77;
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
          swift_allocError();
          *(_OWORD *)uint64_t v79 = xmmword_18EB38300;
          *(void *)(v79 + 16) = v76;
          *(void *)(v79 + 24) = v78;
          *(unsigned char *)(v79 + 32) = 1;
          swift_willThrow();

          swift_release();
          outlined destroy of MaterializedViewPhysicalPlan(v43);
          goto LABEL_26;
        }
      }
      swift_willThrow();
      swift_release();
    }
LABEL_25:
    outlined destroy of MaterializedViewPhysicalPlan(v43);
    goto LABEL_26;
  }
  outlined destroy of UUID?(v41, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
  lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
  swift_allocError();
  *(void *)uint64_t v42 = v104;
  *(void *)(v42 + 8) = a2;
  *(unsigned char *)(v42 + 16) = 3;
  swift_bridgeObjectRetain();
  swift_willThrow();
LABEL_26:
  uint64_t v57 = (uint64_t)v20;
  return outlined destroy of UUID?(v57, &demangling cache variable for type metadata for MaterializedViewPhysicalPlan?);
}

uint64_t MaterializedView.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)v12);
  return v7;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t outlined destroy of MaterializedViewPhysicalPlan(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MaterializedViewPhysicalPlan(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterializedView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 328)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_18E7C207C);
}

uint64_t storeEnumTagSinglePayload for MaterializedViewPhysicalPlan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_18E7C2124);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x1E4FBC860];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_6:
  unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint8_t *IncrementalViewManager.cachedDatabaseWithAccess(for:)(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v119 = *MEMORY[0x1E4F143B8];
  uint64_t v106 = type metadata accessor for URL.DirectoryHint();
  uint64_t v105 = *(void *)(v106 - 8);
  MEMORY[0x1F4188790](v106);
  os_log_t v104 = (char *)v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v103 = (uint64_t)v93 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v108 = type metadata accessor for URL();
  uint64_t v107 = *(uint8_t **)(v108 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v108);
  uint64_t v11 = (char *)v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)v93 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v93 - v15;
  uint64_t v17 = *(uint64_t (**)(unint64_t, uint8_t *))(*(void *)(a2 + 8) + 8);
  uint64_t v110 = *(uint8_t **)(a2 + 8);
  unint64_t v111 = a1;
  uint64_t v109 = v17;
  uint64_t v18 = ((uint64_t (*)(unint64_t))v17)(a1);
  uint64_t v20 = v19;
  uint64_t v21 = v3;
  uint64_t v22 = (uint64_t *)(v3 + OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_cachedDatabaseWithAccesses);
  uint64_t v23 = specialized Dictionary.subscript.getter(v18, v19, *v22);
  if (v23)
  {
    os_log_type_t v24 = (uint8_t *)v23;
LABEL_3:
    swift_bridgeObjectRelease();
    return v24;
  }
  uint64_t v99 = v11;
  unint64_t v100 = v14;
  v93[3] = v22;
  uint64_t v94 = v18;
  uint64_t v95 = v21;
  uint64_t v101 = v16;
  uint64_t v102 = v20;
  type metadata accessor for BMSQLColumn(0, (unint64_t *)&lazy cache variable for type metadata for BMResourceSpecifier);
  os_log_type_t v24 = v110;
  unint64_t v25 = v111;
  uint64_t v26 = v109;
  uint64_t v27 = v109(v111, v110);
  id v29 = BMResourceSpecifier.__allocating_init(type:name:)(3, v27, v28);
  id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F4FB28]), sel_initWithUseCase_, *MEMORY[0x1E4F4FAF0]);
  uint64_t v117 = 0;
  id v31 = objc_msgSend(v30, sel_requestAccessToResource_mode_error_, v29, 3, &v117);
  if (!v31)
  {
    id v62 = (id)v117;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_bridgeObjectRelease();

    return v24;
  }
  uint64_t v32 = v31;
  id v97 = v29;
  id v33 = (id)v117;
  id v34 = objc_msgSend(v32, sel_path);
  id v98 = v30;
  if (v34)
  {
    Swift::String v35 = v34;
    id v96 = v32;
    v93[2] = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v93[1] = v36;

    uint64_t v37 = v26(v25, v24);
    uint64_t v117 = 0x336574696C71732ELL;
    unint64_t v118 = 0xE800000000000000;
    v115[0] = v37;
    v115[1] = v38;
    swift_bridgeObjectRetain();
    v115[0] = String.init<A>(_:)();
    v115[1] = v39;
    String.append<A>(contentsOf:)();
    swift_bridgeObjectRelease();
    uint64_t v110 = (uint8_t *)v115[1];
    unint64_t v111 = v115[0];
    uint64_t v40 = v108;
    __swift_storeEnumTagSinglePayload(v103, 1, 1, v108);
    uint64_t v41 = *MEMORY[0x1E4F276C0];
    uint64_t v42 = v105;
    uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v105 + 104);
    uint64_t v44 = v104;
    uint64_t v45 = v106;
    v43(v104, v41, v106);
    uint64_t v46 = v99;
    URL.init(filePath:directoryHint:relativeTo:)();
    uint64_t v117 = v111;
    unint64_t v118 = (unint64_t)v110;
    v43(v44, v41, v45);
    unint64_t v47 = lazy protocol witness table accessor for type String and conformance String();
    uint64_t v48 = v100;
    unint64_t v111 = v47;
    URL.appending<A>(component:directoryHint:)();
    (*(void (**)(char *, uint64_t))(v42 + 8))(v44, v45);
    os_log_type_t v24 = v107 + 8;
    id v49 = (void (*)(char *, uint64_t))*((void *)v107 + 1);
    v49(v46, v40);
    swift_bridgeObjectRelease();
    uint64_t v50 = v101;
    URL.standardizedFileURL.getter();
    v49(v48, v40);
    ppDb = 0;
    URL.path(percentEncoded:)(0);
    uint64_t v51 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    uint64_t v52 = sqlite3_open_v2((const char *)(v51 + 32), &ppDb, 2, 0);
    swift_release();
    uint64_t v53 = ppDb;
    if (v52 || !ppDb)
    {
      id v77 = BMSQLDatabaseError(v52, ppDb, 0);
      swift_getErrorValue();
      uint64_t v78 = Error.localizedDescription.getter();
      unint64_t v80 = v79;

      uint64_t v117 = v78;
      unint64_t v118 = v80;
      strcpy((char *)v115, "BMSQLDatabase");
      HIWORD(v115[1]) = -4864;
      uint64_t v113 = 0x62617461444C5153;
      unint64_t v114 = 0xEB00000000657361;
      uint64_t v81 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v83 = v82;
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
      swift_allocError();
      *(void *)uint64_t v84 = v81;
      *(void *)(v84 + 8) = v83;
      *(void *)(v84 + 16) = 0;
      *(void *)(v84 + 24) = 0;
      *(unsigned char *)(v84 + 32) = 0;
      swift_willThrow();
      swift_unknownObjectRelease();

      v49(v50, v108);
      swift_bridgeObjectRelease();
      return v24;
    }
    uint64_t v54 = sqlite3_exec(ppDb, "PRAGMA journal_mode=WAL", 0, 0, 0);
    if (v54)
    {
      id v55 = BMSQLDatabaseError(v54, v53, 0);
      swift_getErrorValue();
      uint64_t v56 = Error.localizedDescription.getter();
      os_log_type_t v24 = v57;

      uint64_t v117 = v56;
      unint64_t v118 = (unint64_t)v24;
      strcpy((char *)v115, "BMSQLDatabase");
      HIWORD(v115[1]) = -4864;
      uint64_t v113 = 0x62617461444C5153;
      unint64_t v114 = 0xEB00000000657361;
      uint64_t v58 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      uint64_t v60 = v59;
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type SQLDatabaseError and conformance SQLDatabaseError();
      swift_allocError();
      *(void *)uint64_t v61 = 0xD000000000000017;
      *(void *)(v61 + 8) = 0x800000018EBE9430;
      *(void *)(v61 + 16) = v58;
      *(void *)(v61 + 24) = v60;
      *(unsigned char *)(v61 + 32) = 1;
      swift_willThrow();
      v49(v50, v108);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();

      return v24;
    }

    v49(v50, v108);
    type metadata accessor for DatabaseWithAccess();
    os_log_type_t v24 = (uint8_t *)swift_allocObject();
    id v91 = v96;
    *((void *)v24 + 2) = v53;
    *((void *)v24 + 3) = v91;
    if (*(unsigned char *)(v95 + OBJC_IVAR____TtC12BiomeStreams22IncrementalViewManager_useCache))
    {
      uint64_t v92 = swift_retain();
      specialized Dictionary._Variant.setValue(_:forKey:)(v92, v94, v102, (void (*)(uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
    }
    goto LABEL_3;
  }
  if (one-time initialization token for compute != -1) {
    swift_once();
  }
  uint64_t v63 = type metadata accessor for Logger();
  __swift_project_value_buffer(v63, (uint64_t)static Logging.compute);
  swift_unknownObjectRetain_n();
  uint64_t v64 = Logger.logObject.getter();
  os_log_type_t v65 = static os_log_type_t.info.getter();
  int v66 = v65;
  if (os_log_type_enabled(v64, v65))
  {
    uint64_t v67 = swift_slowAlloc();
    LODWORD(v108) = v66;
    uint64_t v68 = (uint8_t *)v67;
    uint64_t v112 = swift_slowAlloc();
    uint64_t v117 = v112;
    id v96 = v32;
    uint64_t v107 = v68;
    *(_DWORD *)uint64_t v68 = 136315138;
    uint64_t v106 = (uint64_t)(v68 + 4);
    id v69 = objc_msgSend(v96, sel_description);
    uint64_t v70 = v26;
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v73 = v72;

    uint64_t v74 = v71;
    uint64_t v26 = v70;
    v115[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v73, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    uint64_t v75 = v107;
    _os_log_impl(&dword_18E67D000, v64, (os_log_type_t)v108, "IncrementalViewManager: Access assertion: %s has a nil path", v107, 0xCu);
    uint64_t v76 = v112;
    swift_arrayDestroy();
    MEMORY[0x192FB1900](v76, -1, -1);
    MEMORY[0x192FB1900](v75, -1, -1);
  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  id v85 = v97;
  uint64_t v86 = v26(v25, v24);
  uint64_t v88 = v87;
  lazy protocol witness table accessor for type IncrementalViewManager.UpdateError and conformance IncrementalViewManager.UpdateError();
  swift_allocError();
  *(void *)uint64_t v89 = v86;
  *(void *)(v89 + 8) = v88;
  *(unsigned char *)(v89 + 16) = 0;
  swift_willThrow();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  return v24;
}

void OUTLINED_FUNCTION_6_0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t OUTLINED_FUNCTION_6_2(uint64_t result, uint64_t a2)
{
  *(void *)(v2 - 280) = result;
  *(void *)(v2 - 272) = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_6_3(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_6_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_7(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_6_8()
{
  return *(void *)(v0 - 256);
}

uint64_t OUTLINED_FUNCTION_6_10()
{
  uint64_t v3 = *(unsigned int *)(v1 + 36);
  return scanner_errposition(v3, v0);
}

uint64_t destroy for COUNT_STAR(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  size_t v5 = type metadata accessor for SQLDataType();
  uint64_t v6 = (uint64_t (*)(uint64_t, ValueMetadata *))*((void *)v5[-1].Description + 1);

  return v6(v4, v5);
}

uint64_t outlined init with copy of FromClause(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for FromClause(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  size_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v7;
    (**(void (***)(uint64_t, _OWORD *, uint64_t))(v6 - 8))(a1 + 8, v5, v6);
    uint64_t v8 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = v8;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    uint64_t v9 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(void *)(a1 + 80) = v9;
    uint64_t v10 = *(void *)(a2 + 88);
    uint64_t v11 = *(void *)(a2 + 96);
    *(void *)(a1 + 88) = v10;
    *(void *)(a1 + 96) = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v12 = v5[3];
    *(_OWORD *)(a1 + 40) = v5[2];
    *(_OWORD *)(a1 + 56) = v12;
    long long v13 = v5[5];
    *(_OWORD *)(a1 + 72) = v5[4];
    *(_OWORD *)(a1 + 88) = v13;
    long long v14 = v5[1];
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 24) = v14;
  }
  return a1;
}

void thunk for @escaping @callee_guaranteed (@guaranteed BPSCompletion, @guaranteed BMBookmark) -> ()(uint64_t a1, void *a2, uint64_t a3)
{
  size_t v5 = *(void (**)(id, uint64_t))(a1 + 32);
  swift_retain();
  id v6 = a2;
  swift_unknownObjectRetain();
  v5(v6, a3);
  swift_release();
  swift_unknownObjectRelease();
}

void partial apply for closure #1 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:)(void *a1, uint64_t a2)
{
  closure #1 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:)(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

void closure #1 in scan(stream:metadata:maxBatchSize:selectCore:expressionEvaluator:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = objc_msgSend(a1, sel_error);
  if (v9)
  {
    id v10 = v9;
    id v11 = objc_msgSend(a3, sel_identifier);
    uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v14 = v13;

    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    uint64_t v15 = swift_allocError();
    *(void *)uint64_t v16 = v12;
    *(void *)(v16 + 8) = v14;
    *(void *)(v16 + 16) = v10;
    *(unsigned char *)(v16 + 64) = 10;
    uint64_t v17 = *(void **)(a4 + 16);
    *(void *)(a4 + 16) = v15;
  }
  else
  {
    uint64_t v18 = a5 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_bookmark;
    uint64_t v19 = type metadata accessor for BookmarkCache(0);
    uint64_t v20 = *(int *)(v19 + 20);
    swift_unknownObjectRetain();
    swift_unknownObjectRelease();
    *(void *)(v18 + v20) = a2;
    *(unsigned char *)(v18 + *(int *)(v19 + 24)) = 1;
  }
}

double pg_query__field_select__init(uint64_t a1)
{
  *(_OWORD *)a1 = pg_query__field_select__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DA540;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA550;
  *(void *)(a1 + 48) = 0;
  return result;
}

void sub_18E6AD9F8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18E6AE1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18E6AE7C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18E6AF268(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18E6B0634(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t typeWithBMPBIntentType(uint64_t result)
{
  if (result < 4) {
    return result;
  }
  uint64_t v1 = __biome_log_for_category();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    typeWithBMPBIntentType_cold_1();
  }

  return 0;
}

uint64_t interactionDirectionWithPB(uint64_t result)
{
  if (result < 4) {
    return result;
  }
  uint64_t v1 = __biome_log_for_category();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    interactionDirectionWithPB_cold_1();
  }

  return 0;
}

uint64_t OrderedDictionary.KeyWrapper.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 80) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 104));
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t pg_query__alternative_sub_plan__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__alternative_sub_plan__descriptor) {
    pg_query__alternative_sub_plan__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

void pg_query__alternative_sub_plan__pack_cold_1()
{
  __assert_rtn("pg_query__alternative_sub_plan__pack", "pg_query.pb-c.c", 1376, "message->base.descriptor == &pg_query__alternative_sub_plan__descriptor");
}

uint64_t pg_query__create_cast_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_cast_stmt__descriptor) {
    pg_query__create_cast_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

void pg_query__create_cast_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_cast_stmt__pack_to_buffer", "pg_query.pb-c.c", 5478, "message->base.descriptor == &pg_query__create_cast_stmt__descriptor");
}

uint64_t pg_query__field_store__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__field_store__descriptor) {
    pg_query__field_store__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

void pg_query__field_store__pack_cold_1()
{
  __assert_rtn("pg_query__field_store__pack", "pg_query.pb-c.c", 1466, "message->base.descriptor == &pg_query__field_store__descriptor");
}

uint64_t initializeBufferWithCopyOfBuffer for ChangeRecord(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

void sub_18E6B1F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id upperCaseInitialCharacter(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 length];
  uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F28E78]) initWithCapacity:v2];
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      unsigned __int16 v5 = [v1 characterAtIndex:i];
      if ((unsigned __int16)(v5 - 97) < 0x1Au && i == 0) {
        unsigned __int16 v7 = v5 - 32;
      }
      else {
        unsigned __int16 v7 = v5;
      }
      objc_msgSend(v3, "appendFormat:", @"%C", v7);
    }
  }

  return v3;
}

uint64_t getEnumTagSinglePayload for ChangeRecord(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t pg_query__BOOL_expr__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__BOOL_expr__descriptor) {
    pg_query__BOOL_expr__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay14BiomeSQLParser19AggregationFunctionVGSaySDySS0F7Streams13StorableValueOGGG_AL0H0_psAE_pTg504_s14f11SQLParser19hi18VSDySS0A7Streams13kl11OGAD0C0_ps5C389_pIgngrzo_AC_AGtAdH_psAI_pIegnrzr_TR04_s12a223Streams5group33_69E06497FCCD36C7847396967BD3AC6FLL7changes2by8metadata20aggregationFunctions13resultColumns6having19expressionEvaluatorSayAA12ChangeRecordVGAM_Say0A9SQLParser13SQLExpressionVGAA20QueryPlannerMetadataCSayAN19cd92VGSayAN12ResultColumnVGAPSgAA0vR0CtKFyAA14GroupedChangesACLLVz_ALtKXEfU0_AA0Z0_pAU_SDySSAA13fG10OGtKXEfU0_Tf3nnnpf_nTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = type metadata accessor for AggregationFunction();
  Swift::Int Description = (char *)v64[-1].Description;
  uint64_t v5 = MEMORY[0x1F4188790](v64);
  unsigned __int16 v7 = (void (**)(char *, char *, ValueMetadata *))((char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v54 = (char *)&v51 - v8;
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AggregationFunction, [String : StorableValue]));
  uint64_t v9 = MEMORY[0x1F4188790](v61);
  os_log_type_t v65 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v52 = (char *)&v51 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v53 = (uint64_t)&v51 - v13;
  unint64_t v14 = *(void *)(a1 + 16);
  unint64_t v15 = *(void *)(a2 + 16);
  unint64_t v63 = v15;
  if (v15 >= v14) {
    int64_t v16 = v14;
  }
  else {
    int64_t v16 = v15;
  }
  uint64_t v70 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v16, 0);
  unint64_t v59 = v14;
  uint64_t v60 = a1;
  uint64_t v62 = a2;
  int64_t v58 = v16;
  if (v16)
  {
    uint64_t v57 = v7;
    id v55 = (void (**)(uint64_t, void, ValueMetadata *))(Description + 32);
    uint64_t v56 = Description + 16;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v18 = 0;
    while (v14 != v18)
    {
      unint64_t v19 = a1
          + ((Description[80] + 32) & ~(unint64_t)Description[80])
          + *((void *)Description + 9) * v18;
      uint64_t v20 = Description;
      uint64_t v21 = (uint64_t (*)(void, unint64_t, ValueMetadata *))*((void *)Description + 2);
      uint64_t v22 = v57;
      uint64_t v23 = v64;
      uint64_t result = v21(v57, v19, v64);
      if (v63 == v18) {
        goto LABEL_33;
      }
      uint64_t v24 = *(void *)(a2 + 8 * v18 + 32);
      uint64_t v25 = *(int *)(v61 + 48);
      uint64_t v26 = (uint64_t)v65;
      (*v55)((uint64_t)v65, v22, v23);
      *(void *)(v26 + v25) = v24;
      swift_bridgeObjectRetain();
      uint64_t v27 = v66;
      AggregationFunction.newAggregation()();
      if (v27)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        return outlined destroy of UUID?((uint64_t)v65, &demangling cache variable for type metadata for (AggregationFunction, [String : StorableValue]));
      }
      uint64_t v28 = v20;
      uint64_t v30 = v68;
      uint64_t v29 = v69;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v67, v68);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v24, v30, v29);
      outlined destroy of UUID?((uint64_t)v65, &demangling cache variable for type metadata for (AggregationFunction, [String : StorableValue]));
      uint64_t v31 = v70;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v66 = 0;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v31 + 16) + 1, 1);
        uint64_t v31 = v70;
      }
      unint64_t v34 = *(void *)(v31 + 16);
      unint64_t v33 = *(void *)(v31 + 24);
      Swift::Int Description = v28;
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        uint64_t v31 = v70;
      }
      ++v18;
      *(void *)(v31 + 16) = v34 + 1;
      uint64_t result = outlined init with take of Aggregation(&v67, v31 + 40 * v34 + 32);
      unint64_t v14 = v59;
      a1 = v60;
      a2 = v62;
      if (v58 == v18) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_16:
    unint64_t v35 = v63;
    if (v14 <= v63)
    {
LABEL_30:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v70;
    }
    os_log_type_t v65 = Description + 16;
    uint64_t v57 = (void (**)(char *, char *, ValueMetadata *))(Description + 32);
    unint64_t v36 = v58;
    while (v36 < v14)
    {
      uint64_t result = (*((uint64_t (**)(char *, unint64_t, ValueMetadata *))Description + 2))(v54, a1+ ((Description[80] + 32) & ~(unint64_t)Description[80])+ *((void *)Description + 9) * v36, v64);
      if (v35 == v36)
      {
        (*((void (**)(char *, ValueMetadata *))Description + 1))(v54, v64);
        goto LABEL_30;
      }
      if (v36 >= v35) {
        goto LABEL_35;
      }
      uint64_t v37 = v61;
      unint64_t v38 = v36;
      uint64_t v39 = *(void *)(v62 + 8 * v36 + 32);
      uint64_t v40 = *(int *)(v61 + 48);
      uint64_t v41 = v52;
      (*v57)(v52, v54, v64);
      *(void *)&v41[v40] = v39;
      uint64_t v42 = (uint64_t)v41;
      uint64_t v43 = v53;
      outlined init with take of UUID?(v42, v53, &demangling cache variable for type metadata for (AggregationFunction, [String : StorableValue]));
      uint64_t v44 = *(void *)(v43 + *(int *)(v37 + 48));
      swift_bridgeObjectRetain();
      uint64_t v45 = v66;
      AggregationFunction.newAggregation()();
      if (v45)
      {
        uint64_t v66 = v45;
        outlined destroy of UUID?(v53, &demangling cache variable for type metadata for (AggregationFunction, [String : StorableValue]));
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      uint64_t v46 = v68;
      uint64_t v47 = v69;
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v67, v68);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v44, v46, v47);
      uint64_t v66 = 0;
      outlined destroy of UUID?(v53, &demangling cache variable for type metadata for (AggregationFunction, [String : StorableValue]));
      uint64_t v48 = v70;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v48 + 16) + 1, 1);
        uint64_t v48 = v70;
      }
      unint64_t v14 = v59;
      unint64_t v50 = *(void *)(v48 + 16);
      unint64_t v49 = *(void *)(v48 + 24);
      if (v50 >= v49 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1);
        uint64_t v48 = v70;
      }
      unint64_t v36 = v38 + 1;
      *(void *)(v48 + 16) = v50 + 1;
      uint64_t result = outlined init with take of Aggregation(&v67, v48 + 40 * v50 + 32);
      a1 = v60;
      unint64_t v35 = v63;
      if (v14 == v38 + 1) {
        goto LABEL_30;
      }
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

void static KeyedAggregationMetadataCache.payloadSchema(aggregationFunctions:)()
{
  OUTLINED_FUNCTION_37();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v140 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16();
  uint64_t v139 = (uint64_t *)v5;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v6);
  uint64_t v138 = (uint64_t *)((char *)v121 - v7);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_70(v9);
  uint64_t v136 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
  OUTLINED_FUNCTION_0_4();
  uint64_t v135 = v10;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_10();
  uint64_t v13 = OUTLINED_FUNCTION_14_0(v12);
  uint64_t v153 = type metadata accessor for StorableValue(v13);
  OUTLINED_FUNCTION_0_4();
  uint64_t v152 = v14;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_65_3(v16, v121[0]);
  uint64_t v17 = type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_16();
  uint64_t v160 = v21;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_70((uint64_t)v121 - v23);
  uint64_t v151 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StorableValue));
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v24);
  uint64_t v150 = (uint64_t *)((char *)v121 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_21();
  uint64_t v149 = v27;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v28);
  uint64_t v159 = (uint64_t *)((char *)v121 - v29);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_14_0(v31);
  uint64_t v124 = type metadata accessor for AggregationFunction();
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_70(v33);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_64;
  }
  uint64_t v168 = MEMORY[0x1E4FBC860];
  v121[0] = *(void *)(v3 + 16);
  uint64_t v35 = v34;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  unint64_t v122 = *(void (**)(uint64_t))(v35 + 16);
  OUTLINED_FUNCTION_22();
  v121[4] = v3 + v37;
  v121[3] = *(void *)(v38 + 56);
  int v133 = 7;
  uint64_t v147 = v19 + 104;
  int v132 = 6;
  int v131 = 4;
  int v130 = 5;
  int v129 = 2;
  int v128 = 3;
  uint64_t v156 = (void (**)(void))(v19 + 32);
  uint64_t v142 = v19 + 40;
  char v134 = (uint64_t *)(v19 + 16);
  v121[2] = v38 - 8;
  int v127 = 1;
  int v126 = 0;
  uint64_t v162 = v17;
  uint64_t v146 = v19;
  v121[1] = v38;
  do
  {
    uint64_t v125 = v36;
    uint64_t v39 = OUTLINED_FUNCTION_98((uint64_t)v167);
    v122(v39);
    AggregationFunction.newAggregation()();
    if (v1)
    {
      OUTLINED_FUNCTION_2_4();
      v120();
      swift_release();
      break;
    }
    __swift_project_boxed_opaque_existential_1(&v164, v165);
    uint64_t v40 = OUTLINED_FUNCTION_144_0();
    uint64_t v42 = v41(v40);
    uint64_t v123 = 0;
    ++v125;
    uint64_t v43 = v42;
    uint64_t v44 = Dictionary.init(dictionaryLiteral:)();
    specialized _NativeDictionary.makeIterator()(v166, v43);
    uint64_t v154 = v166[0];
    uint64_t v143 = v166[1];
    unint64_t v155 = (char *)v167[0];
    unint64_t v45 = v167[1];
    int64_t v144 = (unint64_t)(v166[2] + 64) >> 6;
    uint64_t v141 = v43;
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v161 = v44;
      if (v45)
      {
        unint64_t v46 = __clz(__rbit64(v45));
        v45 &= v45 - 1;
        unint64_t v47 = v46 | ((void)v155 << 6);
        goto LABEL_29;
      }
      int64_t v48 = (int64_t)(v155 + 1);
      if (__OFADD__(v155, 1)) {
        goto LABEL_67;
      }
      if (v48 >= v144) {
        goto LABEL_43;
      }
      unint64_t v49 = *(void *)(v143 + 8 * v48);
      unint64_t v50 = v155 + 1;
      if (!v49)
      {
        OUTLINED_FUNCTION_70_3();
        if (v51 == v52) {
          goto LABEL_43;
        }
        OUTLINED_FUNCTION_69_3();
        if (!v49)
        {
          OUTLINED_FUNCTION_70_3();
          if (v51 == v52) {
            goto LABEL_43;
          }
          OUTLINED_FUNCTION_69_3();
          if (!v49)
          {
            OUTLINED_FUNCTION_70_3();
            if (v51 == v52) {
              goto LABEL_43;
            }
            OUTLINED_FUNCTION_69_3();
            if (!v49)
            {
              OUTLINED_FUNCTION_70_3();
              if (v51 == v52) {
                goto LABEL_43;
              }
              OUTLINED_FUNCTION_69_3();
              if (!v49)
              {
                unint64_t v50 = (char *)(v53 + 5);
                if (v53 + 5 >= v144) {
                  goto LABEL_43;
                }
                unint64_t v49 = *(void *)(v143 + 8 * (void)v50);
                if (!v49) {
                  break;
                }
              }
            }
          }
        }
      }
LABEL_28:
      unint64_t v45 = (v49 - 1) & v49;
      unint64_t v47 = __clz(__rbit64(v49)) + ((void)v50 << 6);
      unint64_t v155 = v50;
LABEL_29:
      id v55 = (uint64_t *)(*(void *)(v154 + 48) + 16 * v47);
      uint64_t v56 = *v55;
      uint64_t v57 = v55[1];
      uint64_t v58 = v151;
      unint64_t v59 = v148;
      _s12BiomeStreams13StorableValueOWOcTm_1(*(void *)(v154 + 56) + *(void *)(v152 + 72) * v47, (uint64_t)v148 + *(int *)(v151 + 48), (void (*)(void))type metadata accessor for StorableValue);
      *unint64_t v59 = v56;
      v59[1] = v57;
      uint64_t v60 = v159;
      _s10Foundation4UUIDVSgWObTm_0((uint64_t)v59, (uint64_t)v159, &demangling cache variable for type metadata for (key: String, value: StorableValue));
      uint64_t v61 = *(int *)(v58 + 48);
      uint64_t v62 = v149;
      uint64_t v63 = (uint64_t)v149 + v61;
      uint64_t v64 = (uint64_t)v60 + v61;
      uint64_t v65 = *v60;
      uint64_t v66 = v60[1];
      *uint64_t v149 = *v60;
      v62[1] = v66;
      _s12BiomeStreams13StorableValueOWOcTm_1((uint64_t)v60 + v61, (uint64_t)v62 + v61, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v67 = *(int *)(v58 + 48);
      uint64_t v68 = v150;
      uint64_t v69 = (uint64_t)v150 + v67;
      *uint64_t v150 = v65;
      v68[1] = v66;
      _s12BiomeStreams13StorableValueOWOcTm_1(v64, (uint64_t)v68 + v67, (void (*)(void))type metadata accessor for StorableValue);
      _s12BiomeStreams13StorableValueOWOcTm_1(v69, v157, (void (*)(void))type metadata accessor for StorableValue);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      Swift::Int v71 = (Swift::Int)v162;
      uint64_t v158 = v63;
      switch(EnumCaseMultiPayload)
      {
        case 2:
        case 6:
          OUTLINED_FUNCTION_8_6();
          OUTLINED_FUNCTION_67_2();
          v74();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s12BiomeStreams13StorableValueOWOhTm_2(v157, (void (*)(void))type metadata accessor for StorableValue);
          break;
        case 3:
        case 4:
        case 5:
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          _s12BiomeStreams13StorableValueOWOhTm_2(v157, (void (*)(void))type metadata accessor for StorableValue);
          OUTLINED_FUNCTION_8_6();
          OUTLINED_FUNCTION_67_2();
          v73();
          break;
        default:
          OUTLINED_FUNCTION_8_6();
          OUTLINED_FUNCTION_67_2();
          v72();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          break;
      }
      _s12BiomeStreams13StorableValueOWOhTm_2(v69, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v75 = *v156;
      OUTLINED_FUNCTION_28();
      v75();
      uint64_t v76 = v161;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v163 = v76;
      specialized __RawDictionaryStorage.find<A>(_:)(v65, v66);
      OUTLINED_FUNCTION_41_4();
      if (v52)
      {
        __break(1u);
LABEL_66:
        __break(1u);
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
LABEL_69:
        __break(1u);
LABEL_70:
        __break(1u);
LABEL_71:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return;
      }
      unint64_t v80 = v78;
      char v81 = v79;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _NativeDictionary<String, SQLDataType>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v71))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v65, v66);
        OUTLINED_FUNCTION_21_3();
        if (!v83) {
          goto LABEL_71;
        }
        unint64_t v80 = v82;
      }
      uint64_t v84 = v163;
      if (v81)
      {
        OUTLINED_FUNCTION_66_2();
        v85();
      }
      else
      {
        *(void *)(v163 + 8 * (v80 >> 6) + 64) |= 1 << v80;
        uint64_t v86 = (uint64_t *)(*(void *)(v84 + 48) + 16 * v80);
        uint64_t *v86 = v65;
        v86[1] = v66;
        OUTLINED_FUNCTION_28();
        v75();
        OUTLINED_FUNCTION_118_1();
        if (v52) {
          goto LABEL_66;
        }
        *(void *)(v84 + 16) = v87;
        swift_bridgeObjectRetain();
      }
      uint64_t v44 = v163;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s12BiomeStreams13StorableValueOWOhTm_2(v158, (void (*)(void))type metadata accessor for StorableValue);
      outlined destroy of UUID?((uint64_t)v159, &demangling cache variable for type metadata for (key: String, value: StorableValue));
    }
    int64_t v54 = (int64_t)(v155 + 7);
    while (v54 < v144)
    {
      unint64_t v49 = *(void *)(v143 + 8 * v54++);
      if (v49)
      {
        unint64_t v50 = (char *)(v54 - 1);
        goto LABEL_28;
      }
    }
LABEL_43:
    swift_release();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v164);
    uint64_t v88 = *(void *)(v44 + 16);
    if (v88)
    {
      uint64_t v163 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v89 = specialized Dictionary.startIndex.getter(v44);
      int64_t v91 = v90;
      uint64_t v141 = v44 + 64;
      for (uint64_t i = v88 - 1; ; uint64_t i = v116 - 1)
      {
        uint64_t v143 = i;
        uint64_t v93 = v140;
        uint64_t v94 = v137;
        uint64_t v95 = (uint64_t)v137 + *(int *)(v140 + 48);
        int64_t v144 = v91;
        specialized Dictionary.subscript.getter(v95, v89);
        *uint64_t v94 = v96;
        v94[1] = v97;
        uint64_t v98 = (uint64_t)v138;
        *uint64_t v138 = v96;
        *(void *)(v98 + _Block_object_dispose(&a9, 8) = v97;
        uint64_t v158 = *v134;
        OUTLINED_FUNCTION_32_4();
        v99();
        unint64_t v100 = v139;
        _s10Foundation4UUIDVSgWObTm_0(v98, (uint64_t)v139, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        swift_bridgeObjectRetain();
        outlined destroy of UUID?((uint64_t)v94, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        uint64_t v101 = *v100;
        uint64_t v102 = (void *)v100[1];
        unint64_t v155 = (char *)v100 + *(int *)(v93 + 48);
        Swift::String v103 = AggregationFunction.name()();
        uint64_t v104 = v145;
        uint64_t v154 = v145 + *(int *)(v136 + 64);
        Swift::String v164 = v103;
        swift_bridgeObjectRetain();
        v105._uint64_t countAndFlagsBits = 95;
        v105._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v105);
        swift_bridgeObjectRetain();
        v106._uint64_t countAndFlagsBits = v101;
        v106._uint64_t object = v102;
        String.append(_:)(v106);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t object = v164._object;
        uint64_t countAndFlagsBits = v164._countAndFlagsBits;
        OUTLINED_FUNCTION_32_4();
        v109();
        *(void *)uint64_t v104 = v101;
        *(void *)(v104 + _Block_object_dispose(&a9, 8) = v102;
        *(_OWORD *)(v104 + 16) = __PAIR128__((unint64_t)object, countAndFlagsBits);
        swift_bridgeObjectRetain();
        outlined destroy of UUID?((uint64_t)v100, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        uint64_t v110 = v163;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_28_5();
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v110 = v163;
        }
        unint64_t v111 = *(void *)(v110 + 16);
        uint64_t v112 = v161;
        if (v111 >= *(void *)(v110 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v110 = v163;
        }
        *(void *)(v110 + 16) = v111 + 1;
        OUTLINED_FUNCTION_117_1();
        _s10Foundation4UUIDVSgWObTm_0(v145, v113 + v114 * v111, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
        if (v89 < 0 || v89 >= -(-1 << *(unsigned char *)(v112 + 32))) {
          break;
        }
        if (((*(void *)(v141 + (((unint64_t)v89 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v89) & 1) == 0) {
          goto LABEL_69;
        }
        if (*(_DWORD *)(v112 + 36) != v144) {
          goto LABEL_70;
        }
        _HashTable.occupiedBucket(after:)();
        OUTLINED_FUNCTION_152_0();
        if (!v116)
        {
          swift_bridgeObjectRelease();
          goto LABEL_57;
        }
        uint64_t v89 = v115;
        int64_t v91 = *(unsigned int *)(v112 + 36);
      }
      goto LABEL_68;
    }
    swift_bridgeObjectRelease();
    uint64_t v110 = MEMORY[0x1E4FBC860];
LABEL_57:
    OUTLINED_FUNCTION_2_4();
    v117();
    uint64_t v118 = v168;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      OUTLINED_FUNCTION_28_5();
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v118 = v168;
    }
    uint64_t v36 = v125;
    unint64_t v119 = *(void *)(v118 + 16);
    if (v119 >= *(void *)(v118 + 24) >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v36 = v125;
      uint64_t v118 = v168;
    }
    *(void *)(v118 + 16) = v119 + 1;
    *(void *)(v118 + 8 * v119 + 32) = v110;
    uint64_t v1 = v123;
  }
  while (v36 != v121[0]);
LABEL_64:
  OUTLINED_FUNCTION_31();
}

uint64_t initializeWithCopy for AggregationFunction(uint64_t a1, uint64_t a2)
{
  switch(*(unsigned char *)(a2 + 192))
  {
    case 0:
      long long v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      uint64_t v5 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v5;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v6 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v6;
      uint64_t v7 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v7;
      *(unsigned char *)(a1 + 192) = 0;
      goto LABEL_12;
    case 1:
      long long v14 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v14;
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1, a2);
      uint64_t v15 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v15;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v16 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v16;
      uint64_t v17 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v17;
      char v18 = 1;
      goto LABEL_11;
    case 2:
      long long v19 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v19;
      (**(void (***)(uint64_t, uint64_t))(v19 - 8))(a1, a2);
      uint64_t v20 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v20;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v21 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v21;
      uint64_t v22 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v22;
      uint64_t v23 = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v23)
      {
        uint64_t v24 = *(void *)(a2 + 128);
        *(void *)(a1 + 120) = v23;
        *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = v24;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v23 - 8))(a1 + 96, a2 + 96, v23);
        uint64_t v25 = *(void *)(a2 + 144);
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        *(void *)(a1 + 144) = v25;
        *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
        uint64_t v26 = *(void *)(a2 + 168);
        *(void *)(a1 + 160) = *(void *)(a2 + 160);
        *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = v26;
        uint64_t v27 = *(void *)(a2 + 184);
        *(void *)(a1 + 176) = *(void *)(a2 + 176);
        *(void *)(a1 + 184) = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v45 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 12_Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v45;
        long long v46 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v46;
        long long v47 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v47;
      }
      *(unsigned char *)(a1 + 192) = 2;
      break;
    case 3:
      long long v28 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v28;
      (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1, a2);
      uint64_t v29 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v29;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v30 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v30;
      uint64_t v31 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v31;
      char v18 = 3;
      goto LABEL_11;
    case 4:
      long long v32 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v32;
      (**(void (***)(uint64_t, uint64_t))(v32 - 8))(a1, a2);
      uint64_t v33 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v33;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v34 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v34;
      uint64_t v35 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v35;
      char v18 = 4;
      goto LABEL_11;
    case 5:
      long long v36 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v36;
      (**(void (***)(uint64_t, uint64_t))(v36 - 8))(a1, a2);
      uint64_t v37 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v37;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v38 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v38;
      uint64_t v39 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v39;
      char v18 = 5;
      goto LABEL_11;
    case 6:
      long long v40 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v40;
      (**(void (***)(uint64_t, uint64_t))(v40 - 8))(a1, a2);
      uint64_t v41 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v41;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v42 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v42;
      uint64_t v43 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v43;
      char v18 = 6;
LABEL_11:
      *(unsigned char *)(a1 + 192) = v18;
LABEL_12:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      long long v8 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v8;
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      long long v9 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v9;
      long long v10 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 12_Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v10;
      long long v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = v11;
      long long v12 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v12;
      long long v13 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v13;
      break;
  }
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  return a1;
}

uint64_t destroy for AggregationFunction(uint64_t result)
{
  uint64_t v1 = result;
  switch(*(unsigned char *)(result + 192))
  {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      __swift_destroy_boxed_opaque_existential_1Tm(result);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_3;
    case 2:
      __swift_destroy_boxed_opaque_existential_1Tm(result);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (*(void *)(v1 + 120))
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v1 + 96);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_3:
        uint64_t result = swift_bridgeObjectRelease();
      }
      break;
    default:
      return result;
  }
  return result;
}

void AggregationFunction.newAggregation()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v210 = v1;
  uint64_t v211 = v2;
  uint64_t v213 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  uint64_t v214 = v3;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16();
  uint64_t v206 = v5;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  uint64_t v208 = v7;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_45();
  uint64_t v204 = v9;
  OUTLINED_FUNCTION_52();
  long long v10 = type metadata accessor for AggregationFunction.AggregationType();
  OUTLINED_FUNCTION_0_4();
  int v212 = v11;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_53();
  long long v13 = type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_16();
  uint64_t v205 = v17;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_21();
  uint64_t v207 = v19;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v20);
  uint64_t v203 = (char *)&v201 - v21;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v201 - v23;
  AggregationFunction.name()();
  Swift::String v25 = String.lowercased()();
  swift_bridgeObjectRelease();
  AggregationFunction.returnType.getter(v24);
  AggregationFunction.aggregationType.getter(v0);
  uint64_t v26 = (Swift::String *)v0;
  uint64_t v27 = v10;
  long long v28 = (void (**)(Swift::String *, ValueMetadata *))v212;
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_92();
  int v30 = v29();
  if (!v30)
  {
    uint64_t v31 = OUTLINED_FUNCTION_13_1();
    v32(v31);
    uint64_t v33 = (int *)type metadata accessor for AVG(0);
    uint64_t v34 = OUTLINED_FUNCTION_42((uint64_t)&protocol witness table for AVG);
    uint64_t v35 = OUTLINED_FUNCTION_43((uint64_t)v34);
    v36(v35);
    (*(void (**)(char *, unsigned char *, ValueMetadata *))(v15 + 32))((char *)v26 + v33[6], v24, v13);
    *(uint64_t *)((char *)&v26->_countAndFlagsBits + v33[7]) = 0;
    *(uint64_t *)((char *)&v26->_countAndFlagsBits + v33[8]) = 0;
    *uint64_t v26 = v25;
    goto LABEL_39;
  }
  Swift::String v202 = v25;
  uint64_t v209 = v24;
  uint64_t v37 = v15;
  switch(v30)
  {
    case 1:
      uint64_t v38 = OUTLINED_FUNCTION_13_1();
      v39(v38);
      uint64_t v40 = type metadata accessor for COUNT(0);
      uint64_t v41 = OUTLINED_FUNCTION_42((uint64_t)&protocol witness table for COUNT);
      uint64_t v42 = OUTLINED_FUNCTION_43((uint64_t)v41);
      v43(v42);
LABEL_5:
      OUTLINED_FUNCTION_34_0();
      v44();
      *(uint64_t *)((char *)&v26->_countAndFlagsBits + *(int *)(v40 + 28)) = 0;
LABEL_6:
      uint64_t object = v202._object;
      v26->_uint64_t countAndFlagsBits = v202._countAndFlagsBits;
      v26->_uint64_t object = object;
      goto LABEL_39;
    case 2:
      uint64_t v46 = OUTLINED_FUNCTION_13_1();
      v47(v46);
      uint64_t v48 = (uint64_t)v26
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (expression: SQLExpression, separator: SQLExpression?))
                   + 48);
      uint64_t v49 = type metadata accessor for GROUP_CONCAT(0);
      unint64_t v50 = v211;
      v211[3] = v49;
      v50[4] = (uint64_t)&protocol witness table for GROUP_CONCAT;
      boxed_opaque_existential_0Tm = __swift_allocate_boxed_opaque_existential_0Tm(v50);
      OUTLINED_FUNCTION_85();
      v52();
      outlined init with take of UUID?(v48, (uint64_t)boxed_opaque_existential_0Tm + *(int *)(v49 + 24), &demangling cache variable for type metadata for SQLExpression?);
      OUTLINED_FUNCTION_34_0();
      v53();
      int64_t v54 = (uint64_t *)((char *)boxed_opaque_existential_0Tm + *(int *)(v49 + 32));
      *int64_t v54 = 0;
      v54[1] = 0;
      id v55 = v202._object;
      uint64_t *boxed_opaque_existential_0Tm = v202._countAndFlagsBits;
      boxed_opaque_existential_0Tm[1] = (uint64_t)v55;
      goto LABEL_39;
    case 3:
      uint64_t v56 = OUTLINED_FUNCTION_13_1();
      v57(v56);
      uint64_t v58 = v208;
      OUTLINED_FUNCTION_28();
      v59();
      uint64_t v60 = v15;
      uint64_t v62 = (uint64_t *)(v15 + 16);
      uint64_t v61 = *(void **)(v37 + 16);
      ((void (*)(uint64_t, unsigned char *, ValueMetadata *))v61)(v207, v209, v13);
      OUTLINED_FUNCTION_92();
      int v64 = v63();
      if (!v64)
      {
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MAX<Int64>);
        uint64_t v65 = (uint64_t)v209;
        int v212 = (void (*)(void))v60;
        OUTLINED_FUNCTION_41_0();
        uint64_t v66 = v61;
        uint64_t v67 = OUTLINED_FUNCTION_42((uint64_t)&protocol witness table for MAX<A>);
        OUTLINED_FUNCTION_18();
        v68();
        ((void (*)(char *, uint64_t, ValueMetadata *))v66)((char *)v67 + *(int *)(v58 + 40), v65, v13);
        *uint64_t v66 = OUTLINED_FUNCTION_9_0();
        v66[1] = v69;
        OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_51();
        v70();
        OUTLINED_FUNCTION_2_4();
        v71();
        goto LABEL_39;
      }
      int v212 = (void (*)(void))v61;
      switch(v64)
      {
        case 1:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MAX<Double>);
          OUTLINED_FUNCTION_41_0();
          uint64_t v86 = OUTLINED_FUNCTION_42((uint64_t)&protocol witness table for MAX<A>);
          uint64_t v87 = (uint64_t)v209;
          uint64_t v88 = v13;
          OUTLINED_FUNCTION_8();
          v89();
          OUTLINED_FUNCTION_19();
          v90();
          uint64_t *v62 = OUTLINED_FUNCTION_9_0();
          v62[1] = v91;
          OUTLINED_FUNCTION_32();
LABEL_17:
          uint64_t v92 = v202._object;
          uint64_t *v86 = v202._countAndFlagsBits;
          v86[1] = (uint64_t)v92;
          (*(void (**)(uint64_t, ValueMetadata *))(v214 + 8))(v25._countAndFlagsBits, v13);
LABEL_18:
          (*(void (**)(uint64_t, ValueMetadata *))(v60 + 8))(v87, v88);
          goto LABEL_39;
        case 2:
          goto LABEL_25;
        case 3:
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MAX<Date>);
          OUTLINED_FUNCTION_41_0();
          uint64_t v86 = OUTLINED_FUNCTION_25_0(v134, (uint64_t)&protocol witness table for MAX<A>);
          uint64_t v87 = (uint64_t)v209;
          uint64_t v88 = v13;
          OUTLINED_FUNCTION_8();
          v135();
          OUTLINED_FUNCTION_19();
          v136();
          uint64_t v137 = OUTLINED_FUNCTION_9_0();
          OUTLINED_FUNCTION_82(v137, v138);
          uint64_t v139 = type metadata accessor for Date();
          OUTLINED_FUNCTION_30(v139);
          goto LABEL_17;
        case 4:
          uint64_t v150 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MAX<Data>);
          uint64_t v109 = OUTLINED_FUNCTION_25_0(v150, (uint64_t)&protocol witness table for MAX<A>);
          OUTLINED_FUNCTION_6_1();
          v151();
          uint64_t v152 = OUTLINED_FUNCTION_12();
          v153(v152);
          uint64_t *v62 = OUTLINED_FUNCTION_9_0();
          v62[1] = v154;
          *(_OWORD *)((char *)v109 + *(int *)(v150 + 48)) = xmmword_18EB37160;
          goto LABEL_26;
        case 5:
LABEL_25:
          uint64_t v108 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MAX<String>);
          uint64_t v109 = OUTLINED_FUNCTION_25_0(v108, (uint64_t)&protocol witness table for MAX<A>);
          OUTLINED_FUNCTION_6_1();
          v110();
          uint64_t v111 = OUTLINED_FUNCTION_12();
          v112(v111);
          uint64_t *v62 = OUTLINED_FUNCTION_9_0();
          v62[1] = v113;
          uint64_t v114 = (uint64_t *)((char *)v109 + *(int *)(v108 + 48));
          *uint64_t v114 = 0;
          v114[1] = 0;
LABEL_26:
          uint64_t v115 = v202._object;
          *uint64_t v109 = v202._countAndFlagsBits;
          v109[1] = (uint64_t)v115;
          OUTLINED_FUNCTION_51();
          v116();
          OUTLINED_FUNCTION_59();
          v117();
          goto LABEL_39;
        case 6:
          uint64_t v166 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MAX<UUID>);
          uint64_t v109 = OUTLINED_FUNCTION_25_0(v166, (uint64_t)&protocol witness table for MAX<A>);
          OUTLINED_FUNCTION_6_1();
          v167();
          uint64_t v168 = OUTLINED_FUNCTION_12();
          v169(v168);
          uint64_t v170 = OUTLINED_FUNCTION_9_0();
          OUTLINED_FUNCTION_82(v170, v171);
          uint64_t v172 = type metadata accessor for UUID();
          OUTLINED_FUNCTION_30(v172);
          goto LABEL_26;
        case 7:
          uint64_t v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MAX<Int64>);
          uint64_t v109 = OUTLINED_FUNCTION_25_0(v180, (uint64_t)&protocol witness table for MAX<A>);
          OUTLINED_FUNCTION_6_1();
          v181();
          uint64_t v182 = OUTLINED_FUNCTION_12();
          v183(v182);
          uint64_t *v62 = OUTLINED_FUNCTION_9_0();
          v62[1] = v184;
          OUTLINED_FUNCTION_32();
          goto LABEL_26;
      }
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      uint64_t v192 = OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_97(v192, v193);
      OUTLINED_FUNCTION_19();
      v194();
      OUTLINED_FUNCTION_73();
      OUTLINED_FUNCTION_51();
      v195();
      uint64_t v196 = *(void (**)(void))(v60 + 8);
      OUTLINED_FUNCTION_63();
      v196();
LABEL_59:
      OUTLINED_FUNCTION_63();
      v196();
      goto LABEL_39;
    case 4:
      uint64_t v72 = OUTLINED_FUNCTION_13_1();
      v73(v72);
      uint64_t v74 = v206;
      OUTLINED_FUNCTION_28();
      v75();
      uint64_t v60 = v15;
      uint64_t v76 = *(void (**)(void))(v15 + 16);
      ((void (*)(uint64_t, unsigned char *, ValueMetadata *))v76)(v205, v209, v13);
      OUTLINED_FUNCTION_92();
      int v78 = v77();
      if (!v78)
      {
        uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MIN<Int64>);
        uint64_t v80 = (uint64_t)v209;
        int v212 = (void (*)(void))(v15 + 16);
        uint64_t v81 = v79;
        unint64_t v82 = OUTLINED_FUNCTION_42((uint64_t)&protocol witness table for MIN<A>);
        OUTLINED_FUNCTION_18();
        v83();
        OUTLINED_FUNCTION_18();
        v76();
        uint64_t v84 = (uint64_t *)((char *)v82 + *(int *)(v81 + 44));
        *uint64_t v84 = 7235949;
        v84[1] = 0xE300000000000000;
        OUTLINED_FUNCTION_20();
        OUTLINED_FUNCTION_95();
        v85();
        (*(void (**)(uint64_t, ValueMetadata *))(v15 + 8))(v80, v13);
        goto LABEL_39;
      }
      int v212 = v76;
      unint64_t v100 = v211;
      switch(v78)
      {
        case 1:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MIN<Double>);
          OUTLINED_FUNCTION_41_0();
          uint64_t v102 = OUTLINED_FUNCTION_25_0(v101, (uint64_t)&protocol witness table for MIN<A>);
          uint64_t v103 = OUTLINED_FUNCTION_3_4((uint64_t)v102);
          v104(v103);
          uint64_t v105 = OUTLINED_FUNCTION_17_0();
          v106(v105);
          uint64_t v107 = (uint64_t *)((char *)v100 + v74[11]);
          *uint64_t v107 = 7235949;
          v107[1] = 0xE300000000000000;
          OUTLINED_FUNCTION_32();
          break;
        case 2:
          goto LABEL_32;
        case 3:
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MIN<Date>);
          OUTLINED_FUNCTION_41_0();
          uint64_t v145 = OUTLINED_FUNCTION_25_0(v144, (uint64_t)&protocol witness table for MIN<A>);
          uint64_t v87 = (uint64_t)v209;
          uint64_t v88 = v13;
          OUTLINED_FUNCTION_8();
          v146();
          ((void (*)(char *, uint64_t, ValueMetadata *))v212)((char *)v145 + v74[10], v87, v13);
          OUTLINED_FUNCTION_33();
          uint64_t v147 = type metadata accessor for Date();
          OUTLINED_FUNCTION_30(v147);
          uint64_t v148 = v202._object;
          *uint64_t v145 = v202._countAndFlagsBits;
          v145[1] = (uint64_t)v148;
          OUTLINED_FUNCTION_95();
          v149();
          goto LABEL_18;
        case 4:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MIN<Data>);
          OUTLINED_FUNCTION_41_0();
          uint64_t v160 = OUTLINED_FUNCTION_25_0(v159, (uint64_t)&protocol witness table for MIN<A>);
          uint64_t v161 = OUTLINED_FUNCTION_3_4((uint64_t)v160);
          v162(v161);
          uint64_t v163 = OUTLINED_FUNCTION_17_0();
          v164(v163);
          uint64_t v165 = (uint64_t *)((char *)v100 + v74[11]);
          *uint64_t v165 = 7235949;
          v165[1] = 0xE300000000000000;
          *(_OWORD *)((char *)v100 + v74[12]) = xmmword_18EB37160;
          break;
        case 5:
LABEL_32:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MIN<String>);
          OUTLINED_FUNCTION_41_0();
          uint64_t v125 = OUTLINED_FUNCTION_25_0(v124, (uint64_t)&protocol witness table for MIN<A>);
          uint64_t v126 = OUTLINED_FUNCTION_3_4((uint64_t)v125);
          v127(v126);
          uint64_t v128 = OUTLINED_FUNCTION_17_0();
          v129(v128);
          int v130 = (uint64_t *)((char *)v100 + v74[11]);
          *int v130 = 7235949;
          v130[1] = 0xE300000000000000;
          int v131 = (uint64_t *)((char *)v100 + v74[12]);
          *int v131 = 0;
          v131[1] = 0;
          break;
        case 6:
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MIN<UUID>);
          OUTLINED_FUNCTION_41_0();
          unint64_t v174 = OUTLINED_FUNCTION_25_0(v173, (uint64_t)&protocol witness table for MIN<A>);
          uint64_t v175 = OUTLINED_FUNCTION_3_4((uint64_t)v174);
          v176(v175);
          uint64_t v177 = OUTLINED_FUNCTION_17_0();
          v178(v177);
          OUTLINED_FUNCTION_33();
          uint64_t v179 = type metadata accessor for UUID();
          OUTLINED_FUNCTION_30(v179);
          break;
        case 7:
          uint64_t v185 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MAX<Int64>);
          OUTLINED_FUNCTION_25_0(v185, (uint64_t)&protocol witness table for MAX<A>);
          uint64_t v186 = v206;
          int v187 = v213;
          OUTLINED_FUNCTION_18();
          v188();
          uint64_t v189 = OUTLINED_FUNCTION_12();
          v190(v189);
          *(void *)(v15 + 16) = OUTLINED_FUNCTION_9_0();
          *(void *)(v15 + 24) = v191;
          OUTLINED_FUNCTION_20();
          (*(void (**)(int *, ValueMetadata *))(v214 + 8))(v186, v187);
LABEL_34:
          OUTLINED_FUNCTION_51();
          v133();
          goto LABEL_39;
        default:
          swift_bridgeObjectRelease();
          lazy protocol witness table accessor for type SQLError and conformance SQLError();
          uint64_t v197 = OUTLINED_FUNCTION_39();
          id v199 = OUTLINED_FUNCTION_97(v197, v198);
          ((void (*)(uint64_t *, unsigned char *, ValueMetadata *))v212)(v199, v209, v13);
          OUTLINED_FUNCTION_73();
          OUTLINED_FUNCTION_2_4();
          v200();
          uint64_t v196 = *(void (**)(void))(v15 + 8);
          OUTLINED_FUNCTION_63();
          v196();
          goto LABEL_59;
      }
      int v132 = v202._object;
      *unint64_t v100 = v202._countAndFlagsBits;
      v100[1] = (uint64_t)v132;
      (*(void (**)(uint64_t, ValueMetadata *))(v214 + 8))(v25._countAndFlagsBits, v13);
      goto LABEL_34;
    case 5:
      uint64_t v93 = OUTLINED_FUNCTION_13_1();
      v94(v93);
      uint64_t v95 = *(void (**)(void))(v214 + 32);
      OUTLINED_FUNCTION_85();
      v95();
      uint64_t v96 = (uint64_t)v203;
      (*(void (**)(char *, void, ValueMetadata *))(v37 + 104))(v203, 0, v13);
      uint64_t v26 = (Swift::String *)specialized == infix<A>(_:_:)((uint64_t)v209, v96);
      OUTLINED_FUNCTION_51();
      v97();
      if (v26)
      {
        uint64_t v98 = type metadata accessor for SUM_INT(0);
        uint64_t v99 = &protocol witness table for SUM_INT;
      }
      else
      {
        uint64_t v98 = type metadata accessor for SUM_NON_INT(0);
        uint64_t v99 = &protocol witness table for SUM_NON_INT;
      }
      unint64_t v122 = OUTLINED_FUNCTION_42((uint64_t)v99);
      OUTLINED_FUNCTION_75((uint64_t)v122);
      OUTLINED_FUNCTION_28();
      v95();
      OUTLINED_FUNCTION_85();
      v123();
      *(uint64_t *)((char *)&v26->_countAndFlagsBits + *(int *)(v98 + 28)) = 0;
      *((unsigned char *)&v26->_countAndFlagsBits + *(int *)(v98 + 32)) = 0;
      goto LABEL_6;
    case 6:
      uint64_t v118 = OUTLINED_FUNCTION_13_1();
      v119(v118);
      uint64_t v40 = type metadata accessor for TOTAL(0);
      uint64_t v120 = OUTLINED_FUNCTION_42((uint64_t)&protocol witness table for TOTAL);
      OUTLINED_FUNCTION_75((uint64_t)v120);
      OUTLINED_FUNCTION_85();
      v121();
      goto LABEL_5;
  }
  uint64_t v140 = v202._object;
  if (v30 == 7)
  {
    uint64_t v141 = type metadata accessor for COUNT_STAR(0);
    uint64_t v142 = OUTLINED_FUNCTION_42((uint64_t)&protocol witness table for COUNT_STAR);
    OUTLINED_FUNCTION_75((uint64_t)v142);
    OUTLINED_FUNCTION_34_0();
    v143();
    *(uint64_t *)((char *)&v26->_countAndFlagsBits + *(int *)(v141 + 24)) = 0;
    v26->_uint64_t countAndFlagsBits = v202._countAndFlagsBits;
    v26->_uint64_t object = v140;
  }
  else
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    OUTLINED_FUNCTION_39();
    uint64_t v156 = v155;
    v155[3] = (uint64_t)v13;
    __swift_allocate_boxed_opaque_existential_0Tm(v155);
    uint64_t v157 = (uint64_t)v209;
    OUTLINED_FUNCTION_18();
    v158();
    *((_OWORD *)v156 + 2) = 0u;
    *((_OWORD *)v156 + 3) = 0u;
    *((unsigned char *)v156 + 64) = 3;
    swift_willThrow();
    (*(void (**)(uint64_t, ValueMetadata *))(v37 + 8))(v157, v13);
    v28[1](v26, v27);
  }
LABEL_39:
  OUTLINED_FUNCTION_31();
}

Swift::String __swiftcall AggregationFunction.name()()
{
  outlined init with copy of AggregationFunction.AggregationType(v0, (uint64_t)&v37);
  unint64_t v1 = 0xE800000000000000;
  uint64_t v2 = 0x292A28746E756F63;
  switch(v43[96])
  {
    case 1:
      long long v33 = v39;
      long long v34 = v40;
      long long v35 = v41;
      Swift::String v36 = v42;
      long long v31 = v37;
      long long v32 = v38;
      uint64_t v3 = 0x28746E756F63;
      goto LABEL_11;
    case 2:
      long long v33 = v39;
      long long v34 = v40;
      long long v35 = v41;
      Swift::String v36 = v42;
      long long v31 = v37;
      long long v32 = v38;
      outlined init with take of SQLExpression?((uint64_t)v43, (uint64_t)&v29, &demangling cache variable for type metadata for SQLExpression?);
      outlined init with copy of PgQuery_Alias?((uint64_t)&v29, (uint64_t)&v21, &demangling cache variable for type metadata for SQLExpression?);
      if (*((void *)&v22 + 1))
      {
        uint64_t v27[2] = v23;
        v27[3] = v24;
        v27[4] = v25;
        long long v28 = v26;
        v27[0] = v21;
        v27[1] = v22;
        *(void *)&long long v21 = 0;
        *((void *)&v21 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(20);
        swift_bridgeObjectRelease();
        strcpy((char *)&v21, "group_concat(");
        HIWORD(v21) = -4864;
        uint64_t object = v36._object;
        uint64_t countAndFlagsBits = v36._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v7._uint64_t countAndFlagsBits = countAndFlagsBits;
        v7._uint64_t object = object;
        String.append(_:)(v7);
        swift_bridgeObjectRelease();
        v8._uint64_t countAndFlagsBits = 8236;
        v8._uint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v8);
        long long v10 = (void *)*((void *)&v28 + 1);
        uint64_t v9 = v28;
        swift_bridgeObjectRetain();
        v11._uint64_t countAndFlagsBits = v9;
        v11._uint64_t object = v10;
        String.append(_:)(v11);
        swift_bridgeObjectRelease();
        v12._uint64_t countAndFlagsBits = 41;
        v12._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v12);
        unint64_t v1 = *((void *)&v21 + 1);
        uint64_t v2 = v21;
        outlined destroy of SQLExpression((uint64_t)v27);
      }
      else
      {
        outlined destroy of AnyValue?((uint64_t)&v21, &demangling cache variable for type metadata for SQLExpression?);
        *(void *)&v27[0] = 0;
        *((void *)&v27[0] + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(16);
        swift_bridgeObjectRelease();
        strcpy((char *)v27, "group_concat(");
        HIWORD(v27[0]) = -4864;
        uint64_t v17 = v36._object;
        uint64_t v16 = v36._countAndFlagsBits;
        swift_bridgeObjectRetain();
        v18._uint64_t countAndFlagsBits = v16;
        v18._uint64_t object = v17;
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._uint64_t countAndFlagsBits = 41;
        v19._uint64_t object = (void *)0xE100000000000000;
        String.append(_:)(v19);
        unint64_t v1 = *((void *)&v27[0] + 1);
        uint64_t v2 = *(void *)&v27[0];
      }
      outlined destroy of AnyValue?((uint64_t)&v29, &demangling cache variable for type metadata for SQLExpression?);
      goto LABEL_13;
    case 3:
      long long v33 = v39;
      long long v34 = v40;
      long long v35 = v41;
      Swift::String v36 = v42;
      long long v31 = v37;
      long long v32 = v38;
      uint64_t v3 = 678977901;
      unint64_t v4 = 0xE400000000000000;
      goto LABEL_12;
    case 4:
      long long v33 = v39;
      long long v34 = v40;
      long long v35 = v41;
      Swift::String v36 = v42;
      long long v31 = v37;
      long long v32 = v38;
      uint64_t v3 = 678324589;
      unint64_t v4 = 0xE400000000000000;
      goto LABEL_12;
    case 5:
      long long v33 = v39;
      long long v34 = v40;
      long long v35 = v41;
      Swift::String v36 = v42;
      long long v31 = v37;
      long long v32 = v38;
      uint64_t v3 = 678262131;
      unint64_t v4 = 0xE400000000000000;
      goto LABEL_12;
    case 6:
      long long v33 = v39;
      long long v34 = v40;
      long long v35 = v41;
      Swift::String v36 = v42;
      long long v31 = v37;
      long long v32 = v38;
      uint64_t v3 = 0x286C61746F74;
LABEL_11:
      unint64_t v4 = 0xE600000000000000;
      goto LABEL_12;
    case 7:
      goto LABEL_14;
    default:
      long long v33 = v39;
      long long v34 = v40;
      long long v35 = v41;
      Swift::String v36 = v42;
      long long v31 = v37;
      long long v32 = v38;
      uint64_t v3 = 677869153;
      unint64_t v4 = 0xE400000000000000;
LABEL_12:
      uint64_t v29 = v3;
      unint64_t v30 = v4;
      swift_bridgeObjectRetain();
      String.append(_:)(v36);
      swift_bridgeObjectRelease();
      v13._uint64_t countAndFlagsBits = 41;
      v13._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      uint64_t v2 = v29;
      unint64_t v1 = v30;
LABEL_13:
      outlined destroy of SQLExpression((uint64_t)&v31);
LABEL_14:
      uint64_t v14 = v2;
      uint64_t v15 = (void *)v1;
      result._uint64_t object = v15;
      result._uint64_t countAndFlagsBits = v14;
      return result;
  }
}

uint64_t outlined init with copy of AggregationFunction.AggregationType(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for AggregationFunction.AggregationType(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 192);
  if (v4 >= 7) {
    unsigned int v4 = *(_DWORD *)a2 + 7;
  }
  switch(v4)
  {
    case 0u:
      long long v5 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v5;
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      uint64_t v6 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v6;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v7 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v7;
      uint64_t v8 = *(void *)(a2 + 80);
      uint64_t v9 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v8;
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v9;
      *(unsigned char *)(a1 + 192) = 0;
      goto LABEL_14;
    case 1u:
      long long v16 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v16;
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1, a2);
      uint64_t v17 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v17;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v18 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v18;
      uint64_t v19 = *(void *)(a2 + 80);
      uint64_t v20 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v19;
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v20;
      char v21 = 1;
      goto LABEL_13;
    case 2u:
      long long v22 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v22;
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1, a2);
      uint64_t v23 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v23;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v24 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v24;
      uint64_t v25 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v25;
      uint64_t v26 = *(void *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v26)
      {
        uint64_t v27 = *(void *)(a2 + 128);
        *(void *)(a1 + 120) = v26;
        *(void *)(a1 + 12_Block_object_dispose(&a9, 8) = v27;
        (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))(a1 + 96, a2 + 96, v26);
        uint64_t v28 = *(void *)(a2 + 144);
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        *(void *)(a1 + 144) = v28;
        *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
        uint64_t v29 = *(void *)(a2 + 168);
        *(void *)(a1 + 160) = *(void *)(a2 + 160);
        *(void *)(a1 + 16_Block_object_dispose(&a9, 8) = v29;
        uint64_t v30 = *(void *)(a2 + 176);
        uint64_t v31 = *(void *)(a2 + 184);
        *(void *)(a1 + 176) = v30;
        *(void *)(a1 + 184) = v31;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v53 = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 12_Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 128);
        *(_OWORD *)(a1 + 144) = v53;
        long long v54 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v54;
        long long v55 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 112) = v55;
      }
      *(unsigned char *)(a1 + 192) = 2;
      return a1;
    case 3u:
      long long v32 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v32;
      (**(void (***)(uint64_t, uint64_t))(v32 - 8))(a1, a2);
      uint64_t v33 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v33;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v34 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v34;
      uint64_t v35 = *(void *)(a2 + 80);
      uint64_t v36 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v35;
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v36;
      char v21 = 3;
      goto LABEL_13;
    case 4u:
      long long v37 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v37;
      (**(void (***)(uint64_t, uint64_t))(v37 - 8))(a1, a2);
      uint64_t v38 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v38;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v39 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v39;
      uint64_t v40 = *(void *)(a2 + 80);
      uint64_t v41 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v40;
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v41;
      char v21 = 4;
      goto LABEL_13;
    case 5u:
      long long v42 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v42;
      (**(void (***)(uint64_t, uint64_t))(v42 - 8))(a1, a2);
      uint64_t v43 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v43;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v44 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v44;
      uint64_t v45 = *(void *)(a2 + 80);
      uint64_t v46 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v45;
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v46;
      char v21 = 5;
      goto LABEL_13;
    case 6u:
      long long v47 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v47;
      (**(void (***)(uint64_t, uint64_t))(v47 - 8))(a1, a2);
      uint64_t v48 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 4_Block_object_dispose(&a9, 8) = v48;
      *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      uint64_t v49 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v49;
      uint64_t v50 = *(void *)(a2 + 80);
      uint64_t v51 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v50;
      *(void *)(a1 + 8_Block_object_dispose(&a9, 8) = v51;
      char v21 = 6;
LABEL_13:
      *(unsigned char *)(a1 + 192) = v21;
LABEL_14:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      long long v10 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v10;
      *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
      long long v11 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v11;
      long long v12 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 12_Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v12;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = v13;
      long long v14 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v14;
      long long v15 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v15;
      break;
  }
  return a1;
}

ValueMetadata *type metadata accessor for AggregationFunction.AggregationType()
{
  return &type metadata for AggregationFunction.AggregationType;
}

uint64_t AggregationFunction.aggregationType.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AggregationFunction.AggregationType(v1, a1);
}

uint64_t getEnumTag for AggregationFunction.AggregationType(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 192);
  if (result >= 7) {
    return (*(_DWORD *)a1 + 7);
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0Tm(uint64_t *a1)
{
  OUTLINED_FUNCTION_5_0();
  if ((*(unsigned char *)(v2 + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v3;
  }
  return a1;
}

void AggregationFunction.returnType.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 193);
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

void specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (a2 < 0 || (OUTLINED_FUNCTION_8_0(), v6 ^ v7 | v5))
  {
    __break(1u);
    goto LABEL_7;
  }
  OUTLINED_FUNCTION_7_1();
  if ((v10 & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(v9 + 36) == v8)
  {
    OUTLINED_FUNCTION_4_4();
    type metadata accessor for SQLDataType();
    OUTLINED_FUNCTION_4_3();
    (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v2, v3 + *(void *)(v11 + 72) * a2);
    swift_bridgeObjectRetain();
    return;
  }
LABEL_8:
  __break(1u);
}

uint64_t outlined destroy of SQLExpression(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with take of Aggregation(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *long long v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Aggregation>);
    uint64_t v10 = swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
  }
  long long v12 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v12, v8, (char *)(v10 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v12, v8);
  }
  swift_release();
  return v10;
}

__n128 __swift_memcpy194_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 12_Block_object_dispose(&a9, 8) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(_WORD *)(a1 + 192) = *(_WORD *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

void protocol witness for Aggregation.applyMetadata(metadata:) in conformance COUNT_STAR(Swift::OpaquePointer a1)
{
}

uint64_t OUTLINED_FUNCTION_82(uint64_t a1, uint64_t a2)
{
  *long long v2 = a1;
  v2[1] = a2;
  return 0;
}

uint64_t OUTLINED_FUNCTION_82_0()
{
  return *(void *)(v0 - 288);
}

uint64_t OUTLINED_FUNCTION_82_2()
{
  return type metadata accessor for MetadataSQLError(0);
}

void **pg_query__partition_elem__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__partition_elem__descriptor) {
      pg_query__partition_elem__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

void pg_query__partition_elem__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__partition_elem__free_unpacked", "pg_query.pb-c.c", 10087, "message->base.descriptor == &pg_query__partition_elem__descriptor");
}

void **pg_query__alter_owner_stmt__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__alter_owner_stmt__descriptor) {
      pg_query__alter_owner_stmt__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

void **pg_query__field_select__free_unpacked(void **result, uint64_t (**a2)(int, size_t size))
{
  if (result)
  {
    if (*result != &pg_query__field_select__descriptor) {
      pg_query__field_select__free_unpacked_cold_1();
    }
    return (void **)protobuf_c_message_free_unpacked(result, a2);
  }
  return result;
}

void pg_query__field_select__free_unpacked_cold_1()
{
  __assert_rtn("pg_query__field_select__free_unpacked", "pg_query.pb-c.c", 1447, "message->base.descriptor == &pg_query__field_select__descriptor");
}

uint64_t closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:)partial apply(uint64_t a1)
{
  return partial apply for closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:)(a1);
}

uint64_t partial apply for closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:)(uint64_t a1)
{
  return closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:)(a1, *(void *)(v1 + 16));
}

uint64_t closure #2 in static KeyedQueryPlannerMetadataCache.readMetadataSQL(materializedViewName:groupBySchema:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v37 = type metadata accessor for StorableValue(0);
  MEMORY[0x1F4188790](v37);
  uint64_t v38 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a2 + 16);
  if (v8 == v9)
  {
    if (v8)
    {
      uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v11 = (v10 + 32) & ~v10;
      uint64_t v12 = a1 + v11;
      uint64_t v13 = *(void *)(v6 + 72);
      v32[2] = v3;
      uint64_t v33 = 2 * v13;
      uint64_t v35 = v10 | 7;
      uint64_t v36 = v11 + 2 * v13;
      v32[1] = a1;
      swift_bridgeObjectRetain();
      a1 = MEMORY[0x1E4FBC860];
      long long v34 = xmmword_18EB382C0;
      uint64_t v14 = (uint64_t)v38;
      do
      {
        uint64_t v39 = v12;
        uint64_t v40 = v8;
        _s12BiomeStreams13StorableValueOWOcTm_1(v12, v14, (void (*)(void))type metadata accessor for StorableValue);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>);
        uint64_t v15 = swift_allocObject();
        *(_OWORD *)(v15 + 16) = v34;
        uint64_t v16 = v11;
        unint64_t v17 = v15 + v11;
        _s12BiomeStreams13StorableValueOWOcTm_1(v14, v15 + v11, (void (*)(void))type metadata accessor for StorableValue);
        _s12BiomeStreams13StorableValueOWObTm_1(v14, v17 + v13, (void (*)(void))type metadata accessor for StorableValue);
        uint64_t v18 = *(void *)(a1 + 16);
        uint64_t v19 = v18 + 2;
        if (__OFADD__(v18, 2))
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
        }
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (!isUniquelyReferenced_nonNull_native || (uint64_t v21 = *(void *)(a1 + 24) >> 1, v21 < v19))
        {
          if (v18 <= v19) {
            uint64_t v22 = v18 + 2;
          }
          else {
            uint64_t v22 = v18;
          }
          a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v22, 1, a1);
          uint64_t v21 = *(void *)(a1 + 24) >> 1;
        }
        uint64_t v11 = v16;
        uint64_t v23 = v40;
        uint64_t v24 = *(void *)(a1 + 16);
        if (v21 - v24 < 2) {
          goto LABEL_24;
        }
        unint64_t v25 = a1 + v11 + v24 * v13;
        if (v17 < v25 + v33 && v25 < v17 + v33)
        {
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        swift_arrayInitWithCopy();
        uint64_t v27 = *(void *)(a1 + 16);
        BOOL v28 = __OFADD__(v27, 2);
        uint64_t v29 = v27 + 2;
        if (v28) {
          goto LABEL_25;
        }
        *(void *)(a1 + 16) = v29;
        swift_bridgeObjectRelease();
        uint64_t v12 = v39 + v13;
        uint64_t v8 = v23 - 1;
      }
      while (v8);
      swift_bridgeObjectRelease();
    }
    else
    {
      return MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    type metadata accessor for MetadataSQLError(0);
    lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
    swift_allocError();
    *uint64_t v30 = v8;
    v30[1] = v9;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
  }
  return a1;
}

uint64_t pg_query__create_enum_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__create_enum_stmt__descriptor) {
    pg_query__create_enum_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

void pg_query__create_enum_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__create_enum_stmt__pack_to_buffer", "pg_query.pb-c.c", 6288, "message->base.descriptor == &pg_query__create_enum_stmt__descriptor");
}

void *initializeWithCopy for COUNT_STAR(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for SQLDataType();
  uint64_t v11 = (void (*)(char *, char *, ValueMetadata *))*((void *)v10[-1].Description + 2);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t pg_query__sub_link__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__sub_link__descriptor) {
    pg_query__sub_link__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

void pg_query__sub_link__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__sub_link__get_packed_size", "pg_query.pb-c.c", 1279, "message->base.descriptor == &pg_query__sub_link__descriptor");
}

double pg_query__sub_plan__init(uint64_t a1)
{
  *(_OWORD *)(a1 + 12_Block_object_dispose(&a9, 8) = xmmword_1E55DA4D8;
  *(_OWORD *)(a1 + 144) = unk_1E55DA4E8;
  *(void *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_1E55DA498;
  *(_OWORD *)(a1 + 80) = unk_1E55DA4A8;
  *(_OWORD *)(a1 + 96) = xmmword_1E55DA4B8;
  *(_OWORD *)(a1 + 112) = unk_1E55DA4C8;
  *(_OWORD *)a1 = pg_query__sub_plan__init_init_value;
  *(_OWORD *)(a1 + 16) = unk_1E55DA468;
  double result = dbl_1E55DA488[0];
  *(_OWORD *)(a1 + 32) = xmmword_1E55DA478;
  *(_OWORD *)(a1 + 4_Block_object_dispose(&a9, 8) = *(_OWORD *)dbl_1E55DA488;
  return result;
}

uint64_t static StorableValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v112 = a2;
  uint64_t v113 = a1;
  uint64_t v109 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_4();
  uint64_t v98 = v5;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_27(v7, v97);
  uint64_t v105 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_10();
  uint64_t v108 = v9;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = OUTLINED_FUNCTION_35(v10);
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_16();
  uint64_t v99 = v12;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v13);
  uint64_t v106 = (uint64_t)&v97 - v14;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_45();
  uint64_t v110 = v16;
  OUTLINED_FUNCTION_52();
  type metadata accessor for Date.ISO8601FormatStyle();
  OUTLINED_FUNCTION_0_4();
  uint64_t v102 = v18;
  uint64_t v103 = v17;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_26(v19, v97);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v21 = OUTLINED_FUNCTION_35(v20);
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_16();
  uint64_t v100 = v22;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_21();
  uint64_t v104 = v24;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_21();
  uint64_t v107 = v26;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v27);
  OUTLINED_FUNCTION_45();
  uint64_t v111 = v28;
  uint64_t v29 = OUTLINED_FUNCTION_52();
  type metadata accessor for StorableValue(v29);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_47();
  OUTLINED_FUNCTION_65();
  MEMORY[0x1F4188790](v31);
  OUTLINED_FUNCTION_48();
  uint64_t v33 = MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v97 - v34;
  MEMORY[0x1F4188790](v33);
  OUTLINED_FUNCTION_64();
  uint64_t v37 = MEMORY[0x1F4188790](v36);
  uint64_t v39 = (uint64_t *)((char *)&v97 - v38);
  uint64_t v40 = MEMORY[0x1F4188790](v37);
  long long v42 = (char *)&v97 - v41;
  uint64_t v43 = MEMORY[0x1F4188790](v40);
  uint64_t v45 = (double *)((char *)&v97 - v44);
  uint64_t v46 = MEMORY[0x1F4188790](v43);
  uint64_t v48 = (char *)&v97 - v47;
  MEMORY[0x1F4188790](v46);
  uint64_t v50 = (char *)&v97 - v49;
  outlined init with copy of StorableValue(v113, (uint64_t)&v97 - v49, (void (*)(void))type metadata accessor for StorableValue);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      double v54 = *(double *)v50;
      char v55 = v50[8];
      outlined init with copy of StorableValue(v112, (uint64_t)v45, (void (*)(void))type metadata accessor for StorableValue);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v53 = (uint64_t)v45;
        goto LABEL_44;
      }
      if (v55)
      {
        if (((_BYTE)v45[1] & 1) == 0) {
          goto LABEL_45;
        }
        goto LABEL_74;
      }
      if ((_BYTE)v45[1]) {
        goto LABEL_45;
      }
      char v66 = vabdd_f64(v54, *v45) < 0.00001;
      return v66 & 1;
    case 2u:
      uint64_t v56 = v111;
      outlined init with take of UUID?((uint64_t)v50, v111, (uint64_t *)&demangling cache variable for type metadata for Date?);
      outlined init with copy of StorableValue(v112, (uint64_t)v42, (void (*)(void))type metadata accessor for StorableValue);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        outlined destroy of UUID?(v56, (uint64_t *)&demangling cache variable for type metadata for Date?);
        uint64_t v53 = (uint64_t)v42;
        goto LABEL_44;
      }
      uint64_t v57 = v107;
      outlined init with take of UUID?((uint64_t)v42, v107, (uint64_t *)&demangling cache variable for type metadata for Date?);
      uint64_t v58 = v104;
      outlined init with copy of Date?(v56, v104, (uint64_t *)&demangling cache variable for type metadata for Date?);
      type metadata accessor for Date();
      OUTLINED_FUNCTION_49(v58);
      if (v62)
      {
        outlined destroy of UUID?(v58, (uint64_t *)&demangling cache variable for type metadata for Date?);
        uint64_t v78 = 0;
        uint64_t v80 = 0;
      }
      else
      {
        uint64_t v77 = v101;
        default argument 0 of Date.ISO8601Format(_:)(v101);
        uint64_t v78 = Date.ISO8601Format(_:)();
        uint64_t v80 = v79;
        (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v77, v103);
        OUTLINED_FUNCTION_14();
        uint64_t v81 = OUTLINED_FUNCTION_71();
        v82(v81);
      }
      uint64_t v83 = v100;
      outlined init with copy of Date?(v57, v100, (uint64_t *)&demangling cache variable for type metadata for Date?);
      OUTLINED_FUNCTION_49(v83);
      if (v62)
      {
        outlined destroy of UUID?(v83, (uint64_t *)&demangling cache variable for type metadata for Date?);
        if (v80) {
          goto LABEL_70;
        }
        uint64_t v87 = 0;
      }
      else
      {
        default argument 0 of Date.ISO8601Format(_:)(v101);
        uint64_t v85 = Date.ISO8601Format(_:)();
        uint64_t v87 = v86;
        OUTLINED_FUNCTION_2_4();
        v88();
        OUTLINED_FUNCTION_14();
        OUTLINED_FUNCTION_2_4();
        v89();
        if (v80)
        {
          if (v87)
          {
            if (v78 == v85 && v80 == v87) {
              char v66 = 1;
            }
            else {
              char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
            }
            swift_bridgeObjectRelease();
            outlined destroy of UUID?(v57, (uint64_t *)&demangling cache variable for type metadata for Date?);
            outlined destroy of UUID?(v56, (uint64_t *)&demangling cache variable for type metadata for Date?);
LABEL_78:
            swift_bridgeObjectRelease();
            return v66 & 1;
          }
LABEL_70:
          swift_bridgeObjectRetain();
          outlined destroy of UUID?(v57, (uint64_t *)&demangling cache variable for type metadata for Date?);
          outlined destroy of UUID?(v56, (uint64_t *)&demangling cache variable for type metadata for Date?);
          swift_bridgeObjectRelease_n();
          goto LABEL_45;
        }
      }
      outlined destroy of UUID?(v57, (uint64_t *)&demangling cache variable for type metadata for Date?);
      outlined destroy of UUID?(v56, (uint64_t *)&demangling cache variable for type metadata for Date?);
      if (v87)
      {
LABEL_73:
        swift_bridgeObjectRelease();
LABEL_45:
        char v66 = 0;
      }
      else
      {
LABEL_74:
        char v66 = 1;
      }
      return v66 & 1;
    case 3u:
      uint64_t v60 = *(void *)v50;
      uint64_t v59 = *((void *)v50 + 1);
      outlined init with copy of StorableValue(v112, (uint64_t)v39, (void (*)(void))type metadata accessor for StorableValue);
      if (swift_getEnumCaseMultiPayload() != 3)
      {
        swift_bridgeObjectRelease();
        uint64_t v53 = (uint64_t)v39;
        goto LABEL_44;
      }
      uint64_t v61 = v39[1];
      if (!v59) {
        goto LABEL_49;
      }
      if (!v61) {
        goto LABEL_73;
      }
      BOOL v62 = v60 == *v39 && v59 == v61;
      if (!v62) {
        goto LABEL_27;
      }
      goto LABEL_71;
    case 4u:
      uint64_t v63 = *(void *)v50;
      uint64_t v64 = *((void *)v50 + 1);
      outlined init with copy of StorableValue(v112, (uint64_t)v3, (void (*)(void))type metadata accessor for StorableValue);
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        swift_bridgeObjectRelease();
        uint64_t v53 = (uint64_t)v3;
        goto LABEL_44;
      }
      uint64_t v61 = v3[1];
      if (v64)
      {
        if (!v61) {
          goto LABEL_73;
        }
        if (v63 != *v3 || v64 != v61)
        {
LABEL_27:
          char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          goto LABEL_78;
        }
LABEL_71:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_74;
      }
LABEL_49:
      if (!v61) {
        goto LABEL_74;
      }
      goto LABEL_73;
    case 5u:
      unint64_t v67 = *((void *)v50 + 1);
      outlined init with copy of StorableValue(v112, (uint64_t)v35, (void (*)(void))type metadata accessor for StorableValue);
      OUTLINED_FUNCTION_80();
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        OUTLINED_FUNCTION_91();
        uint64_t v53 = (uint64_t)v35;
        goto LABEL_44;
      }
      uint64_t v68 = *(void *)v35;
      unint64_t v69 = *((void *)v35 + 1);
      if (v67 >> 60 == 15)
      {
        if (v69 >> 60 == 15) {
          goto LABEL_74;
        }
      }
      else if (v69 >> 60 != 15)
      {
        outlined copy of Data?(*(void *)v35, *((void *)v35 + 1));
        uint64_t v91 = OUTLINED_FUNCTION_90();
        outlined copy of Data?(v91, v92);
        uint64_t v93 = OUTLINED_FUNCTION_90();
        char v66 = MEMORY[0x192FAF930](v93);
        outlined consume of Data?(v68, v69);
        outlined consume of Data?(v68, v69);
        OUTLINED_FUNCTION_91();
        OUTLINED_FUNCTION_91();
        return v66 & 1;
      }
      OUTLINED_FUNCTION_91();
      outlined consume of Data?(v68, v69);
      goto LABEL_45;
    case 6u:
      uint64_t v70 = v110;
      outlined init with take of UUID?((uint64_t)v50, v110, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined init with copy of StorableValue(v112, v4, (void (*)(void))type metadata accessor for StorableValue);
      if (swift_getEnumCaseMultiPayload() != 6)
      {
        outlined destroy of UUID?(v70, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        uint64_t v53 = v4;
        goto LABEL_44;
      }
      uint64_t v71 = v4;
      uint64_t v72 = v106;
      outlined init with take of UUID?(v71, v106, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v73 = v108;
      uint64_t v74 = v108 + *(int *)(v105 + 48);
      outlined init with copy of Date?(v70, v108, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      outlined init with copy of Date?(v72, v74, (uint64_t *)&demangling cache variable for type metadata for UUID?);
      uint64_t v75 = v109;
      if (__swift_getEnumTagSinglePayload(v73, 1, v109) == 1)
      {
        outlined destroy of UUID?(v72, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of UUID?(v70, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        OUTLINED_FUNCTION_49(v74);
        if (v62)
        {
          outlined destroy of UUID?(v73, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          goto LABEL_74;
        }
      }
      else
      {
        uint64_t v84 = v99;
        outlined init with copy of Date?(v73, v99, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        OUTLINED_FUNCTION_49(v74);
        if (!v62)
        {
          uint64_t v94 = v98;
          OUTLINED_FUNCTION_28();
          v95();
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
          char v66 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v96 = *(void (**)(void))(v94 + 8);
          OUTLINED_FUNCTION_46();
          v96();
          outlined destroy of UUID?(v72, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          outlined destroy of UUID?(v70, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          OUTLINED_FUNCTION_46();
          v96();
          outlined destroy of UUID?(v73, (uint64_t *)&demangling cache variable for type metadata for UUID?);
          return v66 & 1;
        }
        outlined destroy of UUID?(v72, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        outlined destroy of UUID?(v70, (uint64_t *)&demangling cache variable for type metadata for UUID?);
        (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v84, v75);
      }
      outlined destroy of UUID?(v73, &demangling cache variable for type metadata for (UUID?, UUID?));
      goto LABEL_45;
    case 7u:
      outlined init with copy of StorableValue(v112, v2, (void (*)(void))type metadata accessor for StorableValue);
      char v66 = swift_getEnumCaseMultiPayload() == 7;
      outlined destroy of StorableValue(v2, (void (*)(void))type metadata accessor for StorableValue);
      return v66 & 1;
    default:
      uint64_t v51 = *(void *)v50;
      char v52 = v50[8];
      outlined init with copy of StorableValue(v112, (uint64_t)v48, (void (*)(void))type metadata accessor for StorableValue);
      if (!swift_getEnumCaseMultiPayload())
      {
        char v66 = v48[8];
        if ((v52 & 1) == 0) {
          char v66 = (v51 == *(void *)v48) & ~v66;
        }
        return v66 & 1;
      }
      uint64_t v53 = (uint64_t)v48;
LABEL_44:
      outlined destroy of StorableValue(v53, (void (*)(void))type metadata accessor for StorableValue);
      goto LABEL_45;
  }
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    uint64_t result = OUTLINED_FUNCTION_23_4();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)() + 16) = a1;
    }
    uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, StorableValue));
    OUTLINED_FUNCTION_13(v2);
    return OUTLINED_FUNCTION_64_2();
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;

  if (a1 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    uint64_t result = OUTLINED_FUNCTION_23_4();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      type metadata accessor for StorableValue(0);
      *(void *)(static Array._allocateBufferUninitialized(minimumCapacity:)() + 16) = a1;
    }
    uint64_t v2 = type metadata accessor for StorableValue(0);
    OUTLINED_FUNCTION_13(v2);
    return OUTLINED_FUNCTION_64_2();
  }
  return result;
}

{
  uint64_t result;

  if (a1 < 0)
  {
    OUTLINED_FUNCTION_0_16();
    uint64_t result = OUTLINED_FUNCTION_23_4();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void COUNT_STAR.processEvent(changeRecord:expressionEvaluator:)()
{
  uint64_t v2 = type metadata accessor for AggregationEvent(0);
  uint64_t v3 = OUTLINED_FUNCTION_35(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_139();
  COUNT_STAR.getCurrentAggregationEvent()();
  if (!v1)
  {
    uint64_t v4 = *(int *)(type metadata accessor for COUNT_STAR(0) + 24);
    uint64_t v5 = *(void *)(v0 + v4);
    BOOL v6 = __OFADD__(v5, 1);
    uint64_t v7 = v5 + 1;
    if (v6)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + v4) = v7;
      COUNT_STAR.getCurrentAggregationEvent()();
      OUTLINED_FUNCTION_182(v8, v9, (void (*)(void))type metadata accessor for AggregationEvent);
    }
  }
}

void COUNT_STAR.getCurrentAggregationEvent()()
{
  OUTLINED_FUNCTION_68_0();
  OUTLINED_FUNCTION_0_4();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790](v3);
  uint64_t v4 = OUTLINED_FUNCTION_64_0();
  uint64_t v5 = OUTLINED_FUNCTION_35(v4);
  MEMORY[0x1F4188790](v5);
  uint64_t v6 = OUTLINED_FUNCTION_63_0();
  type metadata accessor for COUNT_STAR(v6);
  uint64_t v7 = *(void (**)(void))(v2 + 16);
  OUTLINED_FUNCTION_16_1();
  v7();
  OUTLINED_FUNCTION_105();
  if (!v0)
  {
    type metadata accessor for AggregationEvent(0);
    OUTLINED_FUNCTION_16_1();
    uint64_t v8 = ((uint64_t (*)(void))v7)();
    OUTLINED_FUNCTION_182(v8, v9, (void (*)(void))type metadata accessor for StorableValue);
  }
  OUTLINED_FUNCTION_132();
}

uint64_t OUTLINED_FUNCTION_64_0()
{
  return type metadata accessor for StorableValue(0);
}

uint64_t OUTLINED_FUNCTION_64_1()
{
  uint64_t v4 = v1[1];
  *(void *)(v2 - 192) = *v1;
  *(void *)(v2 - 184) = v4;
  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_64_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_182(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return _s12BiomeStreams13StorableValueOWObTm_0(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_132_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_105()
{
  return StorableValue.init(_:dataType:)(v2 - 96, v1, v0);
}

uint64_t OUTLINED_FUNCTION_105_0()
{
  return String.hashValue.getter();
}

void OUTLINED_FUNCTION_105_1()
{
  uint64_t v1 = 0x202020200A2820;
  unint64_t v2 = 0xE700000000000000;
  String.append(_:)(*(Swift::String *)&v1);
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2)
{
  unint64_t v332 = a2;
  uint64_t v345 = a1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v4 = OUTLINED_FUNCTION_35(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_16();
  uint64_t v342 = v5;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v300 - v8;
  uint64_t v10 = type metadata accessor for TimeZone();
  OUTLINED_FUNCTION_0_4();
  v300[11] = v11;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_14_0(v15);
  uint64_t v331 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  OUTLINED_FUNCTION_0_4();
  v300[10] = v16;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_14_0(v20);
  uint64_t v330 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  OUTLINED_FUNCTION_0_4();
  v300[9] = v21;
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)v300 - v25;
  uint64_t v329 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  OUTLINED_FUNCTION_0_4();
  v300[8] = v27;
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v29);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_14_0(v31);
  uint64_t v328 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  OUTLINED_FUNCTION_0_4();
  v300[7] = v32;
  MEMORY[0x1F4188790](v33);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_21();
  uint64_t v343 = v35;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v36);
  OUTLINED_FUNCTION_45();
  OUTLINED_FUNCTION_14_0(v37);
  uint64_t v327 = type metadata accessor for Date.ISO8601FormatStyle();
  OUTLINED_FUNCTION_0_4();
  v300[6] = v38;
  MEMORY[0x1F4188790](v39);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v40);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v41);
  OUTLINED_FUNCTION_45();
  uint64_t v319 = v42;
  uint64_t v339 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v43);
  OUTLINED_FUNCTION_67();
  uint64_t v338 = v45 - v44;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v47 = OUTLINED_FUNCTION_35(v46);
  MEMORY[0x1F4188790](v47);
  OUTLINED_FUNCTION_16();
  uint64_t v340 = v48;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v49);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v50);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v51);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v52);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v53);
  OUTLINED_FUNCTION_45();
  uint64_t v341 = v54;
  uint64_t v346 = type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_0_4();
  uint64_t v321 = v55;
  uint64_t v57 = MEMORY[0x1F4188790](v56);
  uint64_t v59 = (char *)v300 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = MEMORY[0x1F4188790](v57);
  BOOL v62 = (char *)v300 - v61;
  MEMORY[0x1F4188790](v60);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v63);
  OUTLINED_FUNCTION_21();
  uint64_t v344 = v64;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v65);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  uint64_t v67 = MEMORY[0x1F4188790](v66);
  uint64_t v68 = MEMORY[0x1F4188790](v67);
  uint64_t v70 = (char *)v300 - v69;
  Swift::Int result = MEMORY[0x1F4188790](v68);
  uint64_t v75 = (char *)v300 - v74;
  uint64_t v302 = v2;
  unint64_t v76 = *(void *)(*v2 + 16);
  unint64_t v77 = *(void *)(*v2 + 24);
  v323 = (void *)*v2;
  if (v77 > v76 && (v73 & 1) != 0)
  {
    unint64_t v78 = v332;
    goto LABEL_198;
  }
  uint64_t v306 = v72;
  uint64_t v326 = v10;
  if (v73)
  {
    uint64_t v79 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<[StorableValue]>);
    uint64_t v80 = v323;
    uint64_t v81 = v79;
    uint64_t v82 = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v83 = v80[2];
    unint64_t v332 = v82;
    if (v83)
    {
      uint64_t v317 = v26;
      OUTLINED_FUNCTION_22_2(1 << *((unsigned char *)v80 + 32));
      int v316 = *MEMORY[0x1E4F27880];
      OUTLINED_FUNCTION_15_3();
      uint64_t v315 = v84;
      LODWORD(v314) = *MEMORY[0x1E4F27878];
      OUTLINED_FUNCTION_15_3();
      uint64_t v313 = v85;
      LODWORD(v312) = *MEMORY[0x1E4F27888];
      OUTLINED_FUNCTION_15_3();
      uint64_t v311 = v86;
      LODWORD(v310) = *MEMORY[0x1E4F27890];
      OUTLINED_FUNCTION_15_3();
      uint64_t v309 = v87;
      OUTLINED_FUNCTION_55_3();
      OUTLINED_FUNCTION_38_3(v88);
      uint64_t v307 = v89;
      uint64_t v305 = v90 + 56;
      swift_retain();
      OUTLINED_FUNCTION_48_2();
      uint64_t v318 = v9;
      if (!v81) {
        goto LABEL_8;
      }
LABEL_7:
      OUTLINED_FUNCTION_29_3();
      uint64_t v325 = v81;
      uint64_t v324 = v92;
      for (uint64_t i = v93 | (v92 << 6); ; uint64_t i = v106 + (v105 << 6))
      {
        uint64_t v107 = *(void *)(v323[6] + 8 * i);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*(void *)(v107 + 16));
        uint64_t v340 = v107;
        uint64_t v108 = *(void *)(v107 + 16);
        if (v108)
        {
          OUTLINED_FUNCTION_53_2();
          uint64_t v110 = v340 + v109;
          uint64_t v112 = *(void *)(v111 + 72);
          uint64_t v342 = v112;
          while (1)
          {
            outlined init with copy of StorableValue(v110, (uint64_t)v75);
            outlined init with copy of StorableValue((uint64_t)v75, (uint64_t)v70);
            switch(swift_getEnumCaseMultiPayload())
            {
              case 1u:
                if (v70[8])
                {
                  double v347 = *(double *)v70;
                  LOBYTE(v34_Block_object_dispose(&a9, 8) = 1;
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
LABEL_40:
                  Swift::UInt v115 = Optional<A>.hashValue.getter();
                }
                else
                {
                  double v135 = OUTLINED_FUNCTION_13_0(*(double *)v70);
                  if (v130) {
                    goto LABEL_203;
                  }
                  if (v135 <= -9.22337204e18) {
                    goto LABEL_204;
                  }
                  OUTLINED_FUNCTION_45_2();
                  if (!v96) {
                    goto LABEL_205;
                  }
                  Int.hashValue.getter();
                  Swift::UInt v115 = Int.hashValue.getter();
                }
LABEL_51:
                Hasher._combine(_:)(v115);
LABEL_52:
                outlined destroy of StorableValue((uint64_t)v75);
                v110 += v112;
                if (!--v108) {
                  goto LABEL_53;
                }
                break;
              case 2u:
                uint64_t v107 = v341;
                outlined init with take of (key: String, value: StorableValue)((uint64_t)v70, v341, (uint64_t *)&demangling cache variable for type metadata for Date?);
                OUTLINED_FUNCTION_45_3();
                outlined init with copy of Date?(v116, v117);
                uint64_t v118 = type metadata accessor for Date();
                if (__swift_getEnumTagSinglePayload(v107, 1, v118) == 1)
                {
                  outlined destroy of UUID?(v107, (uint64_t *)&demangling cache variable for type metadata for Date?);
                  Hasher._combine(_:)(0);
                }
                else
                {
                  uint64_t v335 = v118;
                  OUTLINED_FUNCTION_106();
                  OUTLINED_FUNCTION_1_0();
                  v125();
                  OUTLINED_FUNCTION_106();
                  OUTLINED_FUNCTION_1_0();
                  v126();
                  OUTLINED_FUNCTION_106();
                  OUTLINED_FUNCTION_1_0();
                  v127();
                  OUTLINED_FUNCTION_1_0();
                  v128();
                  uint64_t v129 = (uint64_t)v318;
                  TimeZone.init(secondsFromGMT:)();
                  OUTLINED_FUNCTION_43_3(v129, 1);
                  if (v130) {
                    goto LABEL_219;
                  }
                  OUTLINED_FUNCTION_106();
                  OUTLINED_FUNCTION_58_3();
                  v131();
                  Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
                  Date.ISO8601Format(_:)();
                  uint64_t v132 = OUTLINED_FUNCTION_14_5();
                  v133(v132);
                  OUTLINED_FUNCTION_56_3();
                  OUTLINED_FUNCTION_2_4();
                  v134();
                  uint64_t v107 = String.hashValue.getter();
                  swift_bridgeObjectRelease();
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v107);
                  uint64_t v112 = v342;
                }
                outlined destroy of UUID?(v341, (uint64_t *)&demangling cache variable for type metadata for Date?);
                goto LABEL_52;
              case 3u:
                unint64_t v119 = (char *)*((void *)v70 + 1);
                double v347 = *(double *)v70;
                uint64_t v348 = v119;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
                uint64_t v107 = Optional<A>.hashValue.getter();
                swift_bridgeObjectRelease();
                Swift::UInt v115 = v107;
                goto LABEL_51;
              case 4u:
                uint64_t v107 = *((void *)v70 + 1);
                double v347 = *(double *)v70;
                uint64_t v348 = (char *)v107;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
                uint64_t v114 = Optional<A>.hashValue.getter();
                swift_bridgeObjectRelease();
                Swift::UInt v115 = v114;
                goto LABEL_51;
              case 5u:
                unint64_t v120 = *((void *)v70 + 1);
                double v347 = *(double *)v70;
                uint64_t v107 = *(void *)&v347;
                uint64_t v348 = (char *)v120;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
                lazy protocol witness table accessor for type Data and conformance Data();
                OUTLINED_FUNCTION_49_2();
                Swift::UInt v121 = Optional<A>.hashValue.getter();
                Hasher._combine(_:)(v121);
                outlined consume of Data?(v107, v120);
                goto LABEL_52;
              case 6u:
                OUTLINED_FUNCTION_45_3();
                outlined init with take of (key: String, value: StorableValue)(v122, v123, (uint64_t *)&demangling cache variable for type metadata for UUID?);
                lazy protocol witness table accessor for type UUID and conformance UUID();
                Swift::UInt v124 = OUTLINED_FUNCTION_50_3();
                Hasher._combine(_:)(v124);
                uint64_t v112 = v342;
                outlined destroy of UUID?(v107, (uint64_t *)&demangling cache variable for type metadata for UUID?);
                goto LABEL_52;
              case 7u:
                Swift::UInt v115 = 0;
                goto LABEL_51;
              default:
                char v113 = v70[8];
                double v347 = *(double *)v70;
                LOBYTE(v34_Block_object_dispose(&a9, 8) = v113;
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
                goto LABEL_40;
            }
          }
        }
LABEL_53:
        Hasher._finalize()();
        OUTLINED_FUNCTION_28_4();
        if (((v138 << v137) & ~*(void *)(v305 + 8 * v136)) != 0)
        {
          OUTLINED_FUNCTION_122();
          uint64_t v59 = v322;
          uint64_t v81 = v325;
        }
        else
        {
          OUTLINED_FUNCTION_120_0();
          uint64_t v59 = v322;
          uint64_t v81 = v325;
          do
          {
            if (++v140 == v141 && (v139 & 1) != 0) {
              goto LABEL_201;
            }
            BOOL v143 = v140 == v141;
            if (v140 == v141) {
              uint64_t v140 = 0;
            }
            v139 |= v143;
          }
          while (*(void *)(v142 + 8 * v140) == -1);
          OUTLINED_FUNCTION_25();
        }
        OUTLINED_FUNCTION_60_3();
        *(void *)(v145 + v144) |= v146;
        *(void *)(*(void *)(v147 + 48) + 8 * v14_Block_object_dispose(&a9, 8) = v340;
        ++*(void *)(v147 + 16);
        uint64_t v91 = v324;
        if (v81) {
          goto LABEL_7;
        }
LABEL_8:
        if (__OFADD__(v91, 1)) {
          goto LABEL_209;
        }
        OUTLINED_FUNCTION_34_4();
        if (v96 == v97)
        {
LABEL_155:
          uint64_t v242 = v323;
          swift_release();
          OUTLINED_FUNCTION_77_0();
          if (v243 > 63) {
            specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v243 + 63) >> 6, v304);
          }
          else {
            void *v304 = -1 << v243;
          }
          v242[2] = 0;
          swift_release();
          goto LABEL_162;
        }
        if (!v304[v95])
        {
          OUTLINED_FUNCTION_11_5();
          if (v96 == v97) {
            goto LABEL_155;
          }
          OUTLINED_FUNCTION_32_3();
          if (!v98)
          {
            OUTLINED_FUNCTION_11_5();
            if (v96 == v97) {
              goto LABEL_155;
            }
            OUTLINED_FUNCTION_32_3();
            if (!v99)
            {
              OUTLINED_FUNCTION_11_5();
              if (v96 == v97) {
                goto LABEL_155;
              }
              OUTLINED_FUNCTION_32_3();
              if (!v100)
              {
                OUTLINED_FUNCTION_34_4();
                if (v96 == v97) {
                  goto LABEL_155;
                }
                if (!v304[v101]) {
                  break;
                }
              }
            }
          }
        }
LABEL_28:
        OUTLINED_FUNCTION_69_2();
        uint64_t v325 = v104;
        uint64_t v324 = v105;
      }
      while (!__OFADD__(v101, 1))
      {
        OUTLINED_FUNCTION_11_5();
        if (v96 == v97) {
          goto LABEL_155;
        }
        OUTLINED_FUNCTION_32_3();
        uint64_t v101 = v102 + 1;
        if (v103) {
          goto LABEL_28;
        }
      }
      goto LABEL_216;
    }
    goto LABEL_154;
  }
  uint64_t v149 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<[StorableValue]>);
  if (v77 <= v76)
  {
    uint64_t v168 = v323;
    uint64_t v169 = v149;
    uint64_t v170 = static _SetStorage.resize(original:capacity:move:)();
    uint64_t v171 = v168[2];
    unint64_t v332 = v170;
    if (v171)
    {
      OUTLINED_FUNCTION_77_0();
      OUTLINED_FUNCTION_22_2(v172);
      LODWORD(v319) = *MEMORY[0x1E4F27880];
      OUTLINED_FUNCTION_15_3();
      uint64_t v314 = v173;
      LODWORD(v313) = *MEMORY[0x1E4F27878];
      OUTLINED_FUNCTION_15_3();
      uint64_t v312 = v174;
      LODWORD(v311) = *MEMORY[0x1E4F27888];
      OUTLINED_FUNCTION_15_3();
      uint64_t v310 = v175;
      LODWORD(v309) = *MEMORY[0x1E4F27890];
      OUTLINED_FUNCTION_15_3();
      uint64_t v308 = v176;
      OUTLINED_FUNCTION_55_3();
      OUTLINED_FUNCTION_38_3(v177);
      uint64_t v305 = v178;
      v304 = (void *)(v179 + 56);
      swift_retain();
      uint64_t v180 = 0;
      uint64_t v181 = v340;
      if (!v169) {
        goto LABEL_97;
      }
LABEL_96:
      OUTLINED_FUNCTION_29_3();
      uint64_t v336 = v169;
      uint64_t v320 = v182;
      for (uint64_t j = v183 | (v182 << 6); ; uint64_t j = v194 + (v193 << 6))
      {
        uint64_t v195 = *(void *)(v168[6] + 8 * j);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(*(void *)(v195 + 16));
        uint64_t v196 = *(void *)(v195 + 16);
        uint64_t v334 = v195;
        if (v196)
        {
          OUTLINED_FUNCTION_73_2();
          uint64_t v199 = v195 + (v198 & ~v197);
          swift_bridgeObjectRetain();
          uint64_t v200 = v168[9];
          uint64_t v201 = v342;
          uint64_t v341 = v200;
          while (1)
          {
            outlined init with copy of StorableValue(v199, (uint64_t)v62);
            outlined init with copy of StorableValue((uint64_t)v62, (uint64_t)v59);
            switch(swift_getEnumCaseMultiPayload())
            {
              case 1u:
                if (v59[8])
                {
                  double v347 = *(double *)v59;
                  LOBYTE(v34_Block_object_dispose(&a9, 8) = 1;
                  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
LABEL_127:
                  Swift::UInt v204 = Optional<A>.hashValue.getter();
                }
                else
                {
                  double v227 = OUTLINED_FUNCTION_13_0(*(double *)v59);
                  if (v130) {
                    goto LABEL_206;
                  }
                  if (v227 <= -9.22337204e18) {
                    goto LABEL_207;
                  }
                  OUTLINED_FUNCTION_45_2();
                  if (!v96) {
                    goto LABEL_208;
                  }
                  Int.hashValue.getter();
                  Swift::UInt v204 = Int.hashValue.getter();
                }
LABEL_139:
                Hasher._combine(_:)(v204);
LABEL_140:
                outlined destroy of StorableValue((uint64_t)v62);
                v199 += v200;
                if (!--v196) {
                  goto LABEL_143;
                }
                break;
              case 2u:
                uint64_t v205 = v335;
                outlined init with take of (key: String, value: StorableValue)((uint64_t)v59, v335, (uint64_t *)&demangling cache variable for type metadata for Date?);
                outlined init with copy of Date?(v205, v181);
                uint64_t v206 = type metadata accessor for Date();
                if (__swift_getEnumTagSinglePayload(v181, 1, v206) == 1)
                {
                  outlined destroy of UUID?(v181, (uint64_t *)&demangling cache variable for type metadata for Date?);
                  Hasher._combine(_:)(0);
                }
                else
                {
                  uint64_t v337 = v206;
                  OUTLINED_FUNCTION_106();
                  OUTLINED_FUNCTION_1_0();
                  v217();
                  OUTLINED_FUNCTION_106();
                  OUTLINED_FUNCTION_1_0();
                  v218();
                  OUTLINED_FUNCTION_1_0();
                  v219();
                  OUTLINED_FUNCTION_106();
                  OUTLINED_FUNCTION_1_0();
                  v220();
                  TimeZone.init(secondsFromGMT:)();
                  uint64_t v221 = v201;
                  OUTLINED_FUNCTION_43_3(v201, 1);
                  if (v130) {
                    goto LABEL_220;
                  }
                  OUTLINED_FUNCTION_106();
                  OUTLINED_FUNCTION_58_3();
                  v222();
                  Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
                  uint64_t v181 = v340;
                  Date.ISO8601Format(_:)();
                  uint64_t v223 = OUTLINED_FUNCTION_14_5();
                  v224(v223);
                  OUTLINED_FUNCTION_56_3();
                  OUTLINED_FUNCTION_2_4();
                  v225();
                  Swift::UInt v226 = String.hashValue.getter();
                  swift_bridgeObjectRelease();
                  Hasher._combine(_:)(1u);
                  Hasher._combine(_:)(v226);
                  uint64_t v201 = v221;
                  uint64_t v200 = v341;
                }
                outlined destroy of UUID?(v335, (uint64_t *)&demangling cache variable for type metadata for Date?);
                goto LABEL_140;
              case 3u:
              case 4u:
                Swift::String v202 = (char *)*((void *)v59 + 1);
                double v347 = *(double *)v59;
                uint64_t v348 = v202;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
                uint64_t v203 = Optional<A>.hashValue.getter();
                uint64_t v201 = v342;
                swift_bridgeObjectRelease();
                Swift::UInt v204 = v203;
                uint64_t v181 = v340;
                goto LABEL_139;
              case 5u:
                unint64_t v209 = *((void *)v59 + 1);
                double v347 = *(double *)v59;
                uint64_t v208 = *(void *)&v347;
                uint64_t v348 = (char *)v209;
                __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
                lazy protocol witness table accessor for type Data and conformance Data();
                OUTLINED_FUNCTION_49_2();
                Swift::UInt v210 = Optional<A>.hashValue.getter();
                Hasher._combine(_:)(v210);
                uint64_t v211 = v208;
                uint64_t v201 = v342;
                unint64_t v212 = v209;
                uint64_t v181 = v340;
                outlined consume of Data?(v211, v212);
                goto LABEL_140;
              case 6u:
                OUTLINED_FUNCTION_45_3();
                outlined init with take of (key: String, value: StorableValue)(v213, v214, (uint64_t *)&demangling cache variable for type metadata for UUID?);
                lazy protocol witness table accessor for type UUID and conformance UUID();
                Swift::UInt v215 = OUTLINED_FUNCTION_50_3();
                Hasher._combine(_:)(v215);
                uint64_t v216 = v201;
                uint64_t v200 = v341;
                uint64_t v201 = v342;
                outlined destroy of UUID?(v216, (uint64_t *)&demangling cache variable for type metadata for UUID?);
                goto LABEL_140;
              case 7u:
                Swift::UInt v204 = 0;
                goto LABEL_139;
              default:
                char v207 = v59[8];
                double v347 = *(double *)v59;
                LOBYTE(v34_Block_object_dispose(&a9, 8) = v207;
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
                goto LABEL_127;
            }
          }
        }
        swift_bridgeObjectRetain();
LABEL_143:
        Hasher._finalize()();
        OUTLINED_FUNCTION_28_4();
        if (((v230 << v229) & ~v304[v228]) != 0)
        {
          OUTLINED_FUNCTION_122();
          uint64_t v168 = v323;
          uint64_t v169 = v336;
        }
        else
        {
          OUTLINED_FUNCTION_120_0();
          uint64_t v168 = v323;
          uint64_t v169 = v336;
          do
          {
            if (++v232 == v233 && (v231 & 1) != 0) {
              goto LABEL_202;
            }
            BOOL v235 = v232 == v233;
            if (v232 == v233) {
              uint64_t v232 = 0;
            }
            v231 |= v235;
          }
          while (*(void *)(v234 + 8 * v232) == -1);
          OUTLINED_FUNCTION_25();
        }
        OUTLINED_FUNCTION_60_3();
        *(void *)(v237 + v236) |= v238;
        *(void *)(*(void *)(v239 + 48) + 8 * v240) = v241;
        ++*(void *)(v239 + 16);
        uint64_t v180 = v320;
        if (v169) {
          goto LABEL_96;
        }
LABEL_97:
        if (__OFADD__(v180, 1)) {
          goto LABEL_211;
        }
        OUTLINED_FUNCTION_34_4();
        if (v96 == v97) {
          goto LABEL_158;
        }
        if (!*(void *)(v301 + 8 * v185))
        {
          OUTLINED_FUNCTION_11_5();
          if (v96 == v97) {
            goto LABEL_158;
          }
          OUTLINED_FUNCTION_31_3();
          if (!v186)
          {
            OUTLINED_FUNCTION_11_5();
            if (v96 == v97) {
              goto LABEL_158;
            }
            OUTLINED_FUNCTION_31_3();
            if (!v187)
            {
              OUTLINED_FUNCTION_11_5();
              if (v96 == v97) {
                goto LABEL_158;
              }
              OUTLINED_FUNCTION_31_3();
              if (!v188)
              {
                OUTLINED_FUNCTION_34_4();
                if (v96 == v97) {
                  goto LABEL_158;
                }
                if (!*(void *)(v301 + 8 * v189)) {
                  break;
                }
              }
            }
          }
        }
LABEL_117:
        OUTLINED_FUNCTION_69_2();
        uint64_t v336 = v192;
        uint64_t v320 = v193;
      }
      while (1)
      {
        if (__OFADD__(v189, 1)) {
          goto LABEL_218;
        }
        OUTLINED_FUNCTION_11_5();
        if (v96 == v97) {
          break;
        }
        OUTLINED_FUNCTION_31_3();
        uint64_t v189 = v190 + 1;
        if (v191) {
          goto LABEL_117;
        }
      }
LABEL_158:
      swift_release_n();
LABEL_159:
      OUTLINED_FUNCTION_48_2();
LABEL_162:
      *uint64_t v302 = v332;
      Hasher.init(_seed:)();
      uint64_t v244 = v345;
      Swift::UInt v245 = *(void *)(v345 + 16);
      Hasher._combine(_:)(v245);
      uint64_t v246 = *(void *)(v244 + 16);
      uint64_t v247 = v306;
      if (v246)
      {
        OUTLINED_FUNCTION_53_2();
        uint64_t v249 = v345 + v248;
        LODWORD(v342) = *MEMORY[0x1E4F27880];
        OUTLINED_FUNCTION_15_3();
        uint64_t v341 = v250;
        OUTLINED_FUNCTION_15_3();
        uint64_t v340 = v251;
        OUTLINED_FUNCTION_15_3();
        uint64_t v337 = v252;
        LODWORD(v336) = *MEMORY[0x1E4F27878];
        OUTLINED_FUNCTION_15_3();
        uint64_t v335 = v253;
        LODWORD(v334) = *MEMORY[0x1E4F27888];
        LODWORD(v325) = *MEMORY[0x1E4F27890];
        OUTLINED_FUNCTION_55_3();
        OUTLINED_FUNCTION_38_3(v254);
        v323 = v255;
        uint64_t v257 = *(void *)(v256 + 72);
        uint64_t v320 = v257;
        while (2)
        {
          outlined init with copy of StorableValue(v249, v247);
          OUTLINED_FUNCTION_45_3();
          outlined init with copy of StorableValue(v258, v259);
          switch(swift_getEnumCaseMultiPayload())
          {
            case 1u:
              OUTLINED_FUNCTION_63_2();
              if (v265)
              {
                double v347 = v264;
                LOBYTE(v34_Block_object_dispose(&a9, 8) = 1;
                __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
                goto LABEL_169;
              }
              double v275 = OUTLINED_FUNCTION_13_0(v264);
              if (v130) {
                goto LABEL_213;
              }
              if (v275 <= -9.22337204e18) {
                goto LABEL_214;
              }
              OUTLINED_FUNCTION_45_2();
              if (!v96) {
                goto LABEL_215;
              }
              Int.hashValue.getter();
              Swift::UInt v261 = Int.hashValue.getter();
              goto LABEL_180;
            case 2u:
              OUTLINED_FUNCTION_45_3();
              outlined init with take of (key: String, value: StorableValue)(v266, v267, (uint64_t *)&demangling cache variable for type metadata for Date?);
              outlined init with copy of Date?(v247, (uint64_t)v59);
              uint64_t v268 = type metadata accessor for Date();
              if (__swift_getEnumTagSinglePayload((uint64_t)v59, 1, v268) == 1)
              {
                outlined destroy of UUID?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for Date?);
                Hasher._combine(_:)(0);
              }
              else
              {
                uint64_t v343 = v268;
                OUTLINED_FUNCTION_1_0();
                v276();
                OUTLINED_FUNCTION_1_0();
                v277();
                OUTLINED_FUNCTION_106();
                OUTLINED_FUNCTION_1_0();
                v278();
                OUTLINED_FUNCTION_106();
                OUTLINED_FUNCTION_1_0();
                v279();
                uint64_t v59 = (char *)v300[5];
                TimeZone.init(secondsFromGMT:)();
                OUTLINED_FUNCTION_43_3((uint64_t)v59, 1);
                if (v130) {
                  goto LABEL_221;
                }
                OUTLINED_FUNCTION_106();
                OUTLINED_FUNCTION_58_3();
                v280();
                Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
                OUTLINED_FUNCTION_48_2();
                Date.ISO8601Format(_:)();
                uint64_t v281 = OUTLINED_FUNCTION_14_5();
                v282(v281);
                OUTLINED_FUNCTION_56_3();
                OUTLINED_FUNCTION_2_4();
                v283();
                Swift::UInt v284 = String.hashValue.getter();
                swift_bridgeObjectRelease();
                Hasher._combine(_:)(1u);
                Hasher._combine(_:)(v284);
                uint64_t v257 = v320;
              }
              outlined destroy of UUID?(v303, (uint64_t *)&demangling cache variable for type metadata for Date?);
LABEL_181:
              uint64_t v247 = v306;
              outlined destroy of StorableValue(v306);
              v249 += v257;
              if (!--v246) {
                break;
              }
              continue;
            case 3u:
            case 4u:
              uint64_t v260 = (char *)*((void *)v333 + 1);
              double v347 = *v333;
              uint64_t v348 = v260;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
              uint64_t v59 = (char *)Optional<A>.hashValue.getter();
              swift_bridgeObjectRelease();
              OUTLINED_FUNCTION_48_2();
              goto LABEL_180;
            case 5u:
              uint64_t v59 = (char *)*((void *)v333 + 1);
              double v347 = *v333;
              uint64_t v348 = v59;
              __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
              lazy protocol witness table accessor for type Data and conformance Data();
              OUTLINED_FUNCTION_49_2();
              Swift::UInt v269 = Optional<A>.hashValue.getter();
              Hasher._combine(_:)(v269);
              OUTLINED_FUNCTION_48_2();
              outlined consume of Data?(v270, v271);
              goto LABEL_181;
            case 6u:
              OUTLINED_FUNCTION_45_3();
              outlined init with take of (key: String, value: StorableValue)(v272, v273, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              lazy protocol witness table accessor for type UUID and conformance UUID();
              Swift::UInt v274 = OUTLINED_FUNCTION_50_3();
              Hasher._combine(_:)(v274);
              outlined destroy of UUID?(v247, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              goto LABEL_181;
            case 7u:
              Swift::UInt v261 = 0;
              goto LABEL_180;
            default:
              OUTLINED_FUNCTION_63_2();
              double v347 = v262;
              LOBYTE(v34_Block_object_dispose(&a9, 8) = v263;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
LABEL_169:
              Swift::UInt v261 = Optional<A>.hashValue.getter();
LABEL_180:
              Hasher._combine(_:)(v261);
              goto LABEL_181;
          }
          break;
        }
      }
      Swift::Int result = Hasher._finalize()();
      unint64_t v285 = v332;
      uint64_t v286 = -1 << *(unsigned char *)(v332 + 32);
      unint64_t v78 = result & ~v286;
      unint64_t v287 = v332 + 56;
      if ((*(void *)(v332 + 56 + ((v78 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v78))
      {
        uint64_t v288 = ~v286;
        uint64_t v289 = v300[0];
        uint64_t v346 = ~v286;
        while (1)
        {
          uint64_t v290 = *(void *)(*(void *)(v285 + 48) + 8 * v78);
          if (*(void *)(v290 + 16) == v245) {
            break;
          }
LABEL_197:
          unint64_t v78 = (v78 + 1) & v288;
          if (((*(void *)(v287 + ((v78 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v78) & 1) == 0) {
            goto LABEL_198;
          }
        }
        if (!v245 || v290 == v345) {
          goto LABEL_223;
        }
        OUTLINED_FUNCTION_73_2();
        uint64_t v293 = v292 & ~v291;
        swift_bridgeObjectRetain();
        unint64_t v294 = 0;
        uint64_t v295 = *(void *)(v247 + 72);
        while (1)
        {
          uint64_t v247 = v344;
          outlined init with copy of StorableValue(v290 + v293, v344);
          if (v294 >= *(void *)(v345 + 16)) {
            break;
          }
          outlined init with copy of StorableValue(v345 + v293, v289);
          char v296 = static StorableValue.== infix(_:_:)(v247, v289);
          outlined destroy of StorableValue(v289);
          outlined destroy of StorableValue(v247);
          if ((v296 & 1) == 0)
          {
            Swift::Int result = swift_bridgeObjectRelease();
            unint64_t v285 = v332;
            uint64_t v288 = v346;
            goto LABEL_197;
          }
          ++v294;
          v293 += v295;
          if (v245 == v294) {
            goto LABEL_222;
          }
        }
        __break(1u);
LABEL_201:
        __break(1u);
LABEL_202:
        __break(1u);
LABEL_203:
        __break(1u);
LABEL_204:
        __break(1u);
LABEL_205:
        __break(1u);
LABEL_206:
        __break(1u);
LABEL_207:
        __break(1u);
LABEL_208:
        __break(1u);
LABEL_209:
        __break(1u);
LABEL_210:
        __break(1u);
LABEL_211:
        __break(1u);
        goto LABEL_212;
      }
LABEL_198:
      uint64_t v297 = *v302;
      *(void *)(v297 + 8 * (v78 >> 6) + 56) |= 1 << v78;
      *(void *)(*(void *)(v297 + 48) + 8 * v7_Block_object_dispose(&a9, 8) = v345;
      uint64_t v298 = *(void *)(v297 + 16);
      BOOL v97 = __OFADD__(v298, 1);
      uint64_t v299 = v298 + 1;
      if (!v97)
      {
        *(void *)(v297 + 16) = v299;
        return result;
      }
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
      goto LABEL_217;
    }
LABEL_154:
    swift_release();
    goto LABEL_159;
  }
  uint64_t v150 = v323;
  uint64_t v151 = static _SetStorage.copy(original:)();
  unint64_t v78 = v332;
  if (!v150[2])
  {
LABEL_157:
    Swift::Int result = swift_release();
    *uint64_t v302 = v151;
    goto LABEL_198;
  }
  OUTLINED_FUNCTION_77_0();
  uint64_t v153 = v150 + 7;
  unint64_t v155 = (unint64_t)(v154 + 63) >> 6;
  if ((void *)v151 != v150 || v152 >= &v150[v155 + 7]) {
    memmove(v152, v150 + 7, 8 * v155);
  }
  int64_t v157 = 0;
  *(void *)(v151 + 16) = v150[2];
  OUTLINED_FUNCTION_77_0();
  uint64_t v159 = v150[7];
  uint64_t v160 = -1;
  if (v158 < 64) {
    uint64_t v160 = ~(-1 << v158);
  }
  unint64_t v161 = v160 & v159;
  int64_t v162 = (unint64_t)(v158 + 63) >> 6;
  if ((v160 & v159) == 0) {
    goto LABEL_76;
  }
LABEL_75:
  unint64_t v163 = __clz(__rbit64(v161));
  v161 &= v161 - 1;
  for (unint64_t k = v163 | (v157 << 6); ; unint64_t k = __clz(__rbit64(v166)) + (v157 << 6))
  {
    *(void *)(*(void *)(v151 + 48) + 8 * k) = *(void *)(v150[6] + 8 * k);
    swift_bridgeObjectRetain();
    if (v161) {
      goto LABEL_75;
    }
LABEL_76:
    int64_t v165 = v157 + 1;
    if (__OFADD__(v157, 1)) {
      goto LABEL_210;
    }
    if (v165 >= v162) {
      goto LABEL_157;
    }
    unint64_t v166 = v153[v165];
    ++v157;
    if (!v166)
    {
      int64_t v157 = v165 + 1;
      if (v165 + 1 >= v162) {
        goto LABEL_157;
      }
      unint64_t v166 = v153[v157];
      if (!v166)
      {
        int64_t v157 = v165 + 2;
        if (v165 + 2 >= v162) {
          goto LABEL_157;
        }
        unint64_t v166 = v153[v157];
        if (!v166)
        {
          int64_t v157 = v165 + 3;
          if (v165 + 3 >= v162) {
            goto LABEL_157;
          }
          unint64_t v166 = v153[v157];
          if (!v166) {
            break;
          }
        }
      }
    }
LABEL_91:
    unint64_t v161 = (v166 - 1) & v166;
  }
  int64_t v167 = v165 + 4;
  if (v167 >= v162) {
    goto LABEL_157;
  }
  unint64_t v166 = v153[v167];
  if (v166)
  {
    int64_t v157 = v167;
    goto LABEL_91;
  }
  while (1)
  {
    int64_t v157 = v167 + 1;
    if (__OFADD__(v167, 1)) {
      break;
    }
    if (v157 >= v162) {
      goto LABEL_157;
    }
    unint64_t v166 = v153[v157];
    ++v167;
    if (v166) {
      goto LABEL_91;
    }
  }
LABEL_217:
  __break(1u);
LABEL_218:
  __break(1u);
LABEL_219:
  __break(1u);
LABEL_220:
  __break(1u);
LABEL_221:
  __break(1u);
LABEL_222:
  swift_bridgeObjectRelease();
LABEL_223:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
  Swift::Int result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_63_0()
{
  return 0;
}

void OUTLINED_FUNCTION_63_1(unint64_t a1@<X8>)
{
  *(void *)(v2 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a1;
  *(void *)(*(void *)(v3 + 48) + 8 * a1) = v1;
}

uint64_t OUTLINED_FUNCTION_63_3()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

Swift::Int specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType))
                 - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v3 = v4;
  }
  uint64_t v5 = *(void *)(v3 + 16);
  v7[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v7[1] = v5;
  Swift::Int result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v7);
  *a1 = v3;
  return result;
}

Swift::Int specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v145 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  uint64_t v143 = *(void *)(v145 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v145);
  uint64_t v138 = (uint64_t)&v131 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v150 = (uint64_t)&v131 - v7;
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v131 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v13 = (char *)&v131 - v12;
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v141 = (uint64_t *)((char *)&v131 - v15);
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v140 = (uint64_t *)((char *)&v131 - v17);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v136 = (uint64_t *)((char *)&v131 - v19);
  MEMORY[0x1F4188790](v18);
  double v135 = (uint64_t *)((char *)&v131 - v20);
  uint64_t v152 = a1;
  Swift::Int v21 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v21);
  if (result >= v21)
  {
    if (v21 < 0) {
      goto LABEL_159;
    }
    if (v21) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v21, 1, v152);
    }
    return result;
  }
  if (v21 < -1) {
    goto LABEL_167;
  }
  Swift::Int v23 = result;
  uint64_t v24 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v25 = MEMORY[0x1E4FBC860];
  if (v21 > 1)
  {
    uint64_t v25 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v25 + 16) = v21 / 2;
  }
  unint64_t v142 = v25 + ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80));
  if (v21 < 1)
  {
    unint64_t v70 = *((void *)v24 + 2);
LABEL_125:
    if (v70 >= 2)
    {
      uint64_t v123 = *v152;
      do
      {
        unint64_t v124 = v70 - 2;
        if (v70 < 2) {
          goto LABEL_153;
        }
        if (!v123) {
          goto LABEL_166;
        }
        uint64_t v125 = v24;
        uint64_t v126 = v24 + 32;
        uint64_t v127 = *(void *)&v24[16 * v124 + 32];
        uint64_t v128 = *(void *)&v24[16 * v70 + 24];
        specialized _merge<A>(low:mid:high:buffer:by:)(v123 + *(void *)(v143 + 72) * v127, v123 + *(void *)(v143 + 72) * *(void *)&v126[16 * v70 - 16], v123 + *(void *)(v143 + 72) * v128, v142);
        if (v2) {
          break;
        }
        if (v128 < v127) {
          goto LABEL_154;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v125 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v125);
        }
        if (v124 >= *((void *)v125 + 2)) {
          goto LABEL_155;
        }
        uint64_t v129 = &v125[16 * v124 + 32];
        *(void *)uint64_t v129 = v127;
        *((void *)v129 + 1) = v128;
        unint64_t v130 = *((void *)v125 + 2);
        if (v70 > v130) {
          goto LABEL_156;
        }
        uint64_t v24 = v125;
        memmove(&v125[16 * v70 + 16], &v125[16 * v70 + 32], 16 * (v130 - v70));
        *((void *)v125 + 2) = v130 - 1;
        unint64_t v70 = v130 - 1;
      }
      while (v130 > 2);
    }
LABEL_136:
    swift_bridgeObjectRelease();
    *(void *)(v25 + 16) = 0;
    return swift_bridgeObjectRelease();
  }
  Swift::Int v132 = v23;
  uint64_t v146 = v13;
  uint64_t v147 = v10;
  Swift::Int v26 = 0;
  uint64_t v134 = v25;
  while (1)
  {
    Swift::Int v27 = v26;
    Swift::Int v28 = v26 + 1;
    Swift::Int v139 = v26;
    if (v26 + 1 >= v21)
    {
      ++v26;
LABEL_45:
      uint64_t v50 = v147;
      goto LABEL_46;
    }
    uint64_t v29 = *v152;
    uint64_t v30 = *(void *)(v143 + 72);
    uint64_t v31 = v135;
    outlined init with copy of (key: String, value: SQLDataType)(*v152 + v30 * v28, (uint64_t)v135, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
    uint64_t v148 = v29;
    uint64_t v151 = v30;
    uint64_t v32 = v29 + v30 * v27;
    uint64_t v33 = v136;
    outlined init with copy of (key: String, value: SQLDataType)(v32, (uint64_t)v136, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
    if (*v31 == *v33 && v31[1] == v33[1]) {
      unsigned __int8 v35 = 0;
    }
    else {
      unsigned __int8 v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v136, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
    outlined destroy of (key: String, value: StorableValue)((uint64_t)v135, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
    Swift::Int v26 = v27 + 2;
    Swift::Int v149 = v21;
    if (v27 + 2 < v21)
    {
      int v133 = v24;
      uint64_t v36 = v151 * v28;
      uint64_t v37 = v148;
      uint64_t v38 = v151 * v26;
      while (1)
      {
        Swift::Int v39 = v26;
        uint64_t v40 = v140;
        outlined init with copy of (key: String, value: SQLDataType)(v37 + v38, (uint64_t)v140, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        uint64_t v41 = v141;
        outlined init with copy of (key: String, value: SQLDataType)(v37 + v36, (uint64_t)v141, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        BOOL v42 = *v40 == *v41 && v40[1] == v41[1];
        unsigned __int8 v43 = v42 ? 0 : _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v141, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v140, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        Swift::Int v21 = v149;
        if ((v35 ^ v43)) {
          break;
        }
        Swift::Int v26 = v39 + 1;
        v37 += v151;
        if (v39 + 1 >= v149)
        {
          Swift::Int v26 = v149;
          uint64_t v24 = v133;
          goto LABEL_27;
        }
      }
      uint64_t v24 = v133;
      Swift::Int v26 = v39;
LABEL_27:
      Swift::Int v27 = v139;
    }
    if ((v35 & 1) == 0) {
      goto LABEL_45;
    }
    if (v26 < v27) {
      goto LABEL_160;
    }
    if (v27 >= v26) {
      goto LABEL_45;
    }
    uint64_t v144 = v2;
    int v133 = v24;
    uint64_t v44 = 0;
    uint64_t v45 = v151 * (v26 - 1);
    Swift::Int v46 = v27;
    uint64_t v47 = v26 * v151;
    Swift::Int v48 = v46;
    uint64_t v49 = v46 * v151;
    uint64_t v50 = v147;
    do
    {
      if (v48 != v26 + v44 - 1)
      {
        uint64_t v51 = v148;
        if (!v148) {
          goto LABEL_165;
        }
        Swift::Int v52 = v26;
        unint64_t v53 = v148 + v49;
        outlined init with take of (key: String, value: StorableValue)(v148 + v49, v138, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        if (v49 < v45 || v53 >= v51 + v47)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v49 != v45)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        outlined init with take of (key: String, value: StorableValue)(v138, v51 + v45, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        uint64_t v50 = v147;
        Swift::Int v26 = v52;
        Swift::Int v21 = v149;
      }
      ++v48;
      --v44;
      v45 -= v151;
      v47 -= v151;
      v49 += v151;
    }
    while (v48 < v26 + v44);
    uint64_t v24 = v133;
    uint64_t v2 = v144;
    Swift::Int v27 = v139;
LABEL_46:
    if (v26 >= v21) {
      goto LABEL_69;
    }
    if (__OFSUB__(v26, v27)) {
      goto LABEL_158;
    }
    if (v26 - v27 >= v132) {
      goto LABEL_69;
    }
    if (__OFADD__(v27, v132)) {
      goto LABEL_161;
    }
    Swift::Int v55 = v27 + v132 >= v21 ? v21 : v27 + v132;
    if (v55 < v27) {
      break;
    }
    if (v26 != v55)
    {
      int v133 = v24;
      uint64_t v144 = v2;
      uint64_t v56 = *(void *)(v143 + 72);
      uint64_t v151 = v56 * (v26 - 1);
      uint64_t v148 = v56;
      Swift::Int v57 = v26 * v56;
      Swift::Int v137 = v55;
      do
      {
        uint64_t v58 = 0;
        Swift::Int v149 = v26;
        while (1)
        {
          uint64_t v59 = *v152;
          Swift::Int v60 = v57;
          uint64_t v61 = v57 + v58 + *v152;
          BOOL v62 = v146;
          outlined init with copy of (key: String, value: SQLDataType)(v61, (uint64_t)v146, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          outlined init with copy of (key: String, value: SQLDataType)(v151 + v58 + v59, (uint64_t)v50, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          if (*v62 == *v50 && v62[1] == v50[1]) {
            break;
          }
          char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v50, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          outlined destroy of (key: String, value: StorableValue)((uint64_t)v62, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          if ((v64 & 1) == 0) {
            goto LABEL_66;
          }
          uint64_t v65 = *v152;
          if (!*v152) {
            goto LABEL_163;
          }
          Swift::Int v57 = v60;
          uint64_t v66 = v65 + v151 + v58;
          outlined init with take of (key: String, value: StorableValue)(v65 + v60 + v58, v150, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of (key: String, value: StorableValue)(v150, v66, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
          Swift::Int v67 = v149;
          v58 -= v148;
          ++v27;
          uint64_t v50 = v147;
          if (v149 == v27) {
            goto LABEL_67;
          }
        }
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v50, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v62, &demangling cache variable for type metadata for (key: String, value: SQLDataType));
LABEL_66:
        Swift::Int v67 = v149;
        Swift::Int v57 = v60;
LABEL_67:
        Swift::Int v26 = v67 + 1;
        v151 += v148;
        v57 += v148;
        Swift::Int v27 = v139;
      }
      while (v26 != v137);
      Swift::Int v26 = v137;
      uint64_t v2 = v144;
      uint64_t v24 = v133;
    }
LABEL_69:
    if (v26 < v27) {
      goto LABEL_157;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
    }
    unint64_t v69 = *((void *)v24 + 2);
    unint64_t v68 = *((void *)v24 + 3);
    unint64_t v70 = v69 + 1;
    if (v69 >= v68 >> 1) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v68 > 1), v69 + 1, 1, v24);
    }
    uint64_t v144 = v2;
    *((void *)v24 + 2) = v70;
    uint64_t v71 = v24 + 32;
    uint64_t v72 = &v24[16 * v69 + 32];
    *(void *)uint64_t v72 = v27;
    *((void *)v72 + 1) = v26;
    if (v69)
    {
      while (1)
      {
        unint64_t v73 = v70 - 1;
        if (v70 >= 4)
        {
          unint64_t v78 = &v71[16 * v70];
          uint64_t v79 = *((void *)v78 - 8);
          uint64_t v80 = *((void *)v78 - 7);
          BOOL v84 = __OFSUB__(v80, v79);
          uint64_t v81 = v80 - v79;
          if (v84) {
            goto LABEL_142;
          }
          uint64_t v83 = *((void *)v78 - 6);
          uint64_t v82 = *((void *)v78 - 5);
          BOOL v84 = __OFSUB__(v82, v83);
          uint64_t v76 = v82 - v83;
          char v77 = v84;
          if (v84) {
            goto LABEL_143;
          }
          unint64_t v85 = v70 - 2;
          uint64_t v86 = &v71[16 * v70 - 32];
          uint64_t v88 = *(void *)v86;
          uint64_t v87 = *((void *)v86 + 1);
          BOOL v84 = __OFSUB__(v87, v88);
          uint64_t v89 = v87 - v88;
          if (v84) {
            goto LABEL_145;
          }
          BOOL v84 = __OFADD__(v76, v89);
          uint64_t v90 = v76 + v89;
          if (v84) {
            goto LABEL_148;
          }
          if (v90 >= v81)
          {
            uint64_t v108 = &v71[16 * v73];
            uint64_t v110 = *(void *)v108;
            uint64_t v109 = *((void *)v108 + 1);
            BOOL v84 = __OFSUB__(v109, v110);
            uint64_t v111 = v109 - v110;
            if (v84) {
              goto LABEL_152;
            }
            BOOL v101 = v76 < v111;
            goto LABEL_106;
          }
        }
        else
        {
          if (v70 != 3)
          {
            uint64_t v102 = *((void *)v24 + 4);
            uint64_t v103 = *((void *)v24 + 5);
            BOOL v84 = __OFSUB__(v103, v102);
            uint64_t v95 = v103 - v102;
            char v96 = v84;
            goto LABEL_100;
          }
          uint64_t v75 = *((void *)v24 + 4);
          uint64_t v74 = *((void *)v24 + 5);
          BOOL v84 = __OFSUB__(v74, v75);
          uint64_t v76 = v74 - v75;
          char v77 = v84;
        }
        if (v77) {
          goto LABEL_144;
        }
        unint64_t v85 = v70 - 2;
        uint64_t v91 = &v71[16 * v70 - 32];
        uint64_t v93 = *(void *)v91;
        uint64_t v92 = *((void *)v91 + 1);
        BOOL v94 = __OFSUB__(v92, v93);
        uint64_t v95 = v92 - v93;
        char v96 = v94;
        if (v94) {
          goto LABEL_147;
        }
        BOOL v97 = &v71[16 * v73];
        uint64_t v99 = *(void *)v97;
        uint64_t v98 = *((void *)v97 + 1);
        BOOL v84 = __OFSUB__(v98, v99);
        uint64_t v100 = v98 - v99;
        if (v84) {
          goto LABEL_150;
        }
        if (__OFADD__(v95, v100)) {
          goto LABEL_151;
        }
        if (v95 + v100 >= v76)
        {
          BOOL v101 = v76 < v100;
LABEL_106:
          if (v101) {
            unint64_t v73 = v85;
          }
          goto LABEL_108;
        }
LABEL_100:
        if (v96) {
          goto LABEL_146;
        }
        uint64_t v104 = &v71[16 * v73];
        uint64_t v106 = *(void *)v104;
        uint64_t v105 = *((void *)v104 + 1);
        BOOL v84 = __OFSUB__(v105, v106);
        uint64_t v107 = v105 - v106;
        if (v84) {
          goto LABEL_149;
        }
        if (v107 < v95) {
          goto LABEL_117;
        }
LABEL_108:
        unint64_t v112 = v73 - 1;
        if (v73 - 1 >= v70)
        {
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
LABEL_160:
          __break(1u);
LABEL_161:
          __break(1u);
          goto LABEL_162;
        }
        if (!*v152) {
          goto LABEL_164;
        }
        Swift::Int v113 = v26;
        uint64_t v114 = v24;
        Swift::UInt v115 = v71;
        uint64_t v116 = &v71[16 * v112];
        uint64_t v117 = *(void *)v116;
        uint64_t v118 = v115;
        unint64_t v119 = &v115[16 * v73];
        uint64_t v120 = *((void *)v119 + 1);
        uint64_t v121 = v144;
        specialized _merge<A>(low:mid:high:buffer:by:)(*v152 + *(void *)(v143 + 72) * *(void *)v116, *v152 + *(void *)(v143 + 72) * *(void *)v119, *v152 + *(void *)(v143 + 72) * v120, v142);
        uint64_t v144 = v121;
        if (v121)
        {
          uint64_t v25 = v134;
          goto LABEL_136;
        }
        if (v120 < v117) {
          goto LABEL_139;
        }
        if (v73 > *((void *)v114 + 2)) {
          goto LABEL_140;
        }
        *(void *)uint64_t v116 = v117;
        *(void *)&v118[16 * v112 + 8] = v120;
        unint64_t v122 = *((void *)v114 + 2);
        if (v73 >= v122) {
          goto LABEL_141;
        }
        uint64_t v71 = v118;
        uint64_t v24 = v114;
        unint64_t v70 = v122 - 1;
        memmove(v119, v119 + 16, 16 * (v122 - 1 - v73));
        *((void *)v114 + 2) = v122 - 1;
        Swift::Int v26 = v113;
        if (v122 <= 2) {
          goto LABEL_117;
        }
      }
    }
    unint64_t v70 = 1;
LABEL_117:
    Swift::Int v21 = v152[1];
    uint64_t v25 = v134;
    uint64_t v2 = v144;
    if (v26 >= v21) {
      goto LABEL_125;
    }
  }
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  __break(1u);
LABEL_167:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v31 = a1;
  uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
  uint64_t v7 = MEMORY[0x1F4188790](v32);
  uint64_t v36 = (uint64_t)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (uint64_t *)((char *)&v29 - v10);
  uint64_t result = MEMORY[0x1F4188790](v9);
  uint64_t v15 = (uint64_t *)((char *)&v29 - v14);
  uint64_t v35 = a3;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v38 = v16 * (v35 - 1);
    uint64_t v33 = (char *)&v29 - v14;
    uint64_t v34 = v16;
    uint64_t v37 = v16 * v35;
    uint64_t v17 = &demangling cache variable for type metadata for (key: String, value: SQLDataType);
    while (2)
    {
      uint64_t v18 = 0;
      uint64_t v19 = v31;
      while (1)
      {
        uint64_t v20 = *a4;
        outlined init with copy of (key: String, value: SQLDataType)(v37 + v18 + *a4, (uint64_t)v15, v17);
        outlined init with copy of (key: String, value: SQLDataType)(v38 + v18 + v20, (uint64_t)v11, v17);
        if (*v15 == *v11 && v15[1] == v11[1]) {
          break;
        }
        char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, v17);
        uint64_t result = outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v17);
        if (v22)
        {
          uint64_t v23 = *a4;
          if (!*a4)
          {
            __break(1u);
            return result;
          }
          uint64_t v24 = v11;
          uint64_t v25 = v17;
          Swift::Int v26 = a4;
          uint64_t v27 = v23 + v38 + v18;
          Swift::Int v28 = v25;
          outlined init with take of (key: String, value: StorableValue)(v23 + v37 + v18, v36, v25);
          swift_arrayInitWithTakeFrontToBack();
          uint64_t result = outlined init with take of (key: String, value: StorableValue)(v36, v27, v28);
          v18 -= v34;
          ++v19;
          a4 = v26;
          uint64_t v17 = v28;
          uint64_t v11 = v24;
          uint64_t v15 = v33;
          if (v35 != v19) {
            continue;
          }
        }
        goto LABEL_13;
      }
      outlined destroy of (key: String, value: StorableValue)((uint64_t)v11, v17);
      uint64_t result = outlined destroy of (key: String, value: StorableValue)((uint64_t)v15, v17);
LABEL_13:
      v38 += v34;
      v37 += v34;
      if (++v35 != v30) {
        continue;
      }
      break;
    }
  }
  return result;
}

uint64_t pg_query__inline_code_block__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__inline_code_block__descriptor) {
    pg_query__inline_code_block__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

void pg_query__inline_code_block__pack_cold_1()
{
  __assert_rtn("pg_query__inline_code_block__pack", "pg_query.pb-c.c", 10331, "message->base.descriptor == &pg_query__inline_code_block__descriptor");
}

uint64_t CopyErrorData()
{
  uint64_t v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0) {
    CopyErrorData_cold_1(v0);
  }
  uint64_t v1 = errordata();
  uint64_t v3 = (long long *)(v1 + 192 * v2);
  uint64_t v4 = palloc(0xC0uLL);
  long long v5 = v3[3];
  long long v7 = *v3;
  long long v6 = v3[1];
  *(_OWORD *)(v4 + 32) = v3[2];
  *(_OWORD *)(v4 + 4_Block_object_dispose(&a9, 8) = v5;
  *(_OWORD *)uint64_t v4 = v7;
  *(_OWORD *)(v4 + 16) = v6;
  long long v8 = v3[7];
  long long v10 = v3[4];
  long long v9 = v3[5];
  *(_OWORD *)(v4 + 96) = v3[6];
  *(_OWORD *)(v4 + 112) = v8;
  *(_OWORD *)(v4 + 64) = v10;
  *(_OWORD *)(v4 + 80) = v9;
  long long v11 = v3[11];
  long long v13 = v3[8];
  long long v12 = v3[9];
  *(_OWORD *)(v4 + 160) = v3[10];
  *(_OWORD *)(v4 + 176) = v11;
  *(_OWORD *)(v4 + 12_Block_object_dispose(&a9, 8) = v13;
  *(_OWORD *)(v4 + 144) = v12;
  uint64_t v14 = *(const char **)(v4 + 64);
  if (v14) {
    *(void *)(v4 + 64) = pstrdup(v14);
  }
  uint64_t v15 = *(const char **)(v4 + 72);
  if (v15) {
    *(void *)(v4 + 72) = pstrdup(v15);
  }
  uint64_t v16 = *(const char **)(v4 + 80);
  if (v16) {
    *(void *)(v4 + 80) = pstrdup(v16);
  }
  uint64_t v17 = *(const char **)(v4 + 88);
  if (v17) {
    *(void *)(v4 + 8_Block_object_dispose(&a9, 8) = pstrdup(v17);
  }
  uint64_t v18 = *(const char **)(v4 + 96);
  if (v18) {
    *(void *)(v4 + 96) = pstrdup(v18);
  }
  uint64_t v19 = *(const char **)(v4 + 104);
  if (v19) {
    *(void *)(v4 + 104) = pstrdup(v19);
  }
  uint64_t v20 = *(const char **)(v4 + 120);
  if (v20) {
    *(void *)(v4 + 120) = pstrdup(v20);
  }
  Swift::Int v21 = *(const char **)(v4 + 128);
  if (v21) {
    *(void *)(v4 + 12_Block_object_dispose(&a9, 8) = pstrdup(v21);
  }
  char v22 = *(const char **)(v4 + 136);
  if (v22) {
    *(void *)(v4 + 136) = pstrdup(v22);
  }
  uint64_t v23 = *(const char **)(v4 + 144);
  if (v23) {
    *(void *)(v4 + 144) = pstrdup(v23);
  }
  uint64_t v24 = *(const char **)(v4 + 152);
  if (v24) {
    *(void *)(v4 + 152) = pstrdup(v24);
  }
  uint64_t v25 = *(const char **)(v4 + 168);
  if (v25) {
    *(void *)(v4 + 16_Block_object_dispose(&a9, 8) = pstrdup(v25);
  }
  *(void *)(v4 + 184) = *(void *)CurrentMemoryContext();
  return v4;
}

void *pstrdup(const char *a1)
{
  uint64_t v2 = *(void *)CurrentMemoryContext();
  size_t v3 = strlen(a1) + 1;
  uint64_t v4 = (void *)MemoryContextAlloc(v2, v3);

  return memcpy(v4, a1, v3);
}

uint64_t destroy for MIN(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_4_3();
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_4_3();
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  OUTLINED_FUNCTION_95();
  v11();
  unint64_t v12 = (*(void *)(v9 + 56) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a2 + 16);
  OUTLINED_FUNCTION_3_9();
  uint64_t v18 = v14;
  unint64_t v15 = (v12 + *(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t result = __swift_getEnumTagSinglePayload(v15, 1, v13);
  if (!result)
  {
    uint64_t v17 = *(uint64_t (**)(unint64_t, uint64_t))(v18 + 8);
    return v17(v15, v13);
  }
  return result;
}

uint64_t internalerrquery(char *a1)
{
  uint64_t v2 = errordata();
  size_t v3 = (int *)errordata_stack_depth();
  int v4 = *v3;
  if (*v3 < 0) {
    internalerrquery_cold_1(v3);
  }
  uint64_t v5 = v2 + 192 * v4;
  uint64_t v8 = *(void *)(v5 + 168);
  uint64_t v7 = (void **)(v5 + 168);
  uint64_t v6 = v8;
  if (v8)
  {
    pfree(v6);
    *uint64_t v7 = 0;
  }
  if (a1) {
    *uint64_t v7 = MemoryContextStrdup(*(void *)(v2 + 192 * v4 + 184), a1);
  }
  return 0;
}

void *MemoryContextStrdup(uint64_t a1, char *__s)
{
  size_t v4 = strlen(__s) + 1;
  uint64_t v5 = (void *)MemoryContextAlloc(a1, v4);

  return memcpy(v5, __s, v4);
}

ValueMetadata *type metadata accessor for ChangeRecord()
{
  return &type metadata for ChangeRecord;
}

ValueMetadata *type metadata accessor for CacheEvent()
{
  return &type metadata for CacheEvent;
}

uint64_t geterrposition()
{
  uint64_t v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0) {
    geterrposition_cold_1(v0);
  }
  uint64_t v1 = errordata();
  return *(unsigned int *)(v1 + 192 * v2 + 160);
}

uint64_t pg_query__field_select__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__field_select__descriptor) {
    pg_query__field_select__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

void pg_query__field_select__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__field_select__get_packed_size", "pg_query.pb-c.c", 1414, "message->base.descriptor == &pg_query__field_select__descriptor");
}

void base_yyparse_cold_15()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("WHERE clause not allowed with COPY TO", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 3069, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_23()
{
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("CREATE ASSERTION is not yet implemented", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("gram.y", 5792, (uint64_t)"base_yyparse");
  __break(1u);
}

void processCASbits_cold_2(size_t a1)
{
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("%s constraints cannot be marked NOT VALID", v2, v3, v4, v5, v6, v7, v8, a1);
  OUTLINED_FUNCTION_8_7();
  errfinish("gram.y", 16776, (uint64_t)"processCASbits");
  __break(1u);
}

void pvsnprintf_cold_2()
{
}

uint64_t pg_verify_mbstr_len(unsigned int a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
  if ((int)pg_encoding_max_length(a1) > 1)
  {
    if ((int)a3 < 1) {
      return 0;
    }
    LODWORD(v9) = 0;
    long long v11 = pg_wchar_table[6 * (int)a1 + 4];
    while (1)
    {
      if ((char)*a2 < 0)
      {
        unsigned int v12 = ((uint64_t (*)(unsigned __int8 *, uint64_t))v11)(a2, a3);
        if ((v12 & 0x80000000) != 0)
        {
LABEL_17:
          if ((a4 & 1) == 0) {
            report_invalid_encoding(a1, a2, a3);
          }
          return 0xFFFFFFFFLL;
        }
        a2 += v12;
        a3 = a3 - v12;
      }
      else
      {
        if (!*a2) {
          goto LABEL_17;
        }
        ++a2;
        a3 = (a3 - 1);
      }
      uint64_t v9 = (v9 + 1);
      if ((int)a3 <= 0) {
        return v9;
      }
    }
  }
  uint64_t v8 = (unsigned __int8 *)memchr(a2, 0, (int)a3);
  if (v8) {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v9 = a3;
  }
  if (v8)
  {
    if ((a4 & 1) == 0) {
      report_invalid_encoding(a1, v8, 1);
    }
  }
  return v9;
}

void report_invalid_encoding(unsigned int a1, unsigned __int8 *a2, int a3)
{
  int v6 = pg_encoding_mblen(a1, (uint64_t)a2);
  if (v6 >= a3) {
    int v13 = a3;
  }
  else {
    int v13 = v6;
  }
  if (v13 >= 1)
  {
    int v14 = v13 >= 8 ? 8 : v13;
    unsigned int v15 = v14 - 1;
    char v22 = &v94[(int)pg_sprintf(v94, "0x%02x", v7, v8, v9, v10, v11, v12, *a2)];
    if (v14 != 1)
    {
      uint64_t v23 = &v22[(int)pg_sprintf(v22, " ", v16, v17, v18, v19, v20, v21, v86)];
      uint64_t v36 = &v23[(int)pg_sprintf(v23, "0x%02x", v24, v25, v26, v27, v28, v29, a2[1])];
      if (v15 >= 2) {
        v36 += (int)pg_sprintf(v36, " ", v30, v31, v32, v33, v34, v35, v87);
      }
      if (v14 != 2)
      {
        unsigned __int8 v43 = &v36[(int)pg_sprintf(v36, "0x%02x", v30, v31, v32, v33, v34, v35, a2[2])];
        if (v15 >= 3) {
          v43 += (int)pg_sprintf(v43, " ", v37, v38, v39, v40, v41, v42, v88);
        }
        if (v14 != 3)
        {
          uint64_t v50 = &v43[(int)pg_sprintf(v43, "0x%02x", v37, v38, v39, v40, v41, v42, a2[3])];
          if (v15 >= 4) {
            v50 += (int)pg_sprintf(v50, " ", v44, v45, v46, v47, v48, v49, v89);
          }
          if (v14 != 4)
          {
            Swift::Int v57 = &v50[(int)pg_sprintf(v50, "0x%02x", v44, v45, v46, v47, v48, v49, a2[4])];
            if (v15 >= 5) {
              v57 += (int)pg_sprintf(v57, " ", v51, v52, v53, v54, v55, v56, v90);
            }
            if (v14 != 5)
            {
              char v64 = &v57[(int)pg_sprintf(v57, "0x%02x", v51, v52, v53, v54, v55, v56, a2[5])];
              if (v15 >= 6) {
                v64 += (int)pg_sprintf(v64, " ", v58, v59, v60, v61, v62, v63, v91);
              }
              if (v14 != 6)
              {
                uint64_t v71 = &v64[(int)pg_sprintf(v64, "0x%02x", v58, v59, v60, v61, v62, v63, a2[6])];
                if (v15 >= 7) {
                  v71 += (int)pg_sprintf(v71, " ", v65, v66, v67, v68, v69, v70, v92);
                }
                if (v14 != 7)
                {
                  int v72 = pg_sprintf(v71, "0x%02x", v65, v66, v67, v68, v69, v70, a2[7]);
                  if (v15 >= 8) {
                    pg_sprintf(&v71[v72], " ", v73, v74, v75, v76, v77, v78, v93);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  errstart(20, 0);
  errcode();
  errmsg("invalid byte sequence for encoding \"%s\": %s", v79, v80, v81, v82, v83, v84, v85, (size_t)(&pg_enc2name_tbl)[2 * (int)a1]);
  errfinish("src/postgres/src_backend_utils_mb_mbutils.c", 756, (uint64_t)"report_invalid_encoding");
  __break(1u);
}

uint64_t pg_encoding_mblen(unsigned int a1, uint64_t a2)
{
  if (a1 > 0x29) {
    return 1;
  }
  else {
    return ((uint64_t (*)(uint64_t))pg_wchar_table[6 * a1 + 2])(a2);
  }
}

uint64_t pg_sprintf(unsigned char *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  uint64_t v12 = a1;
  int v13 = a1;
  uint64_t v14 = 0;
  *(void *)&long long v15 = 0;
  HIDWORD(v15) = 0;
  *(void *)((char *)&v15 + 5) = 0;
  dopr((uint64_t)&v12, a2, &a9);
  int v9 = (int)v12;
  *uint64_t v12 = 0;
  unsigned int v10 = DWORD2(v15) + v9 - v13;
  if (BYTE12(v15)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v10;
  }
}

uint64_t pg_encoding_max_length(int a1)
{
  return LODWORD(pg_wchar_table[6 * a1 + 5]);
}

void base_yyparse_cold_40()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("unrecognized column option \"%s\"", v1, v2, v3, v4, v5, v6, v7, *(void *)(v0 + 16));
  OUTLINED_FUNCTION_6_10();
  errfinish("gram.y", 12716, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_29()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_9_8();
  errmsg("role name \"%s\" is reserved", v0, v1, v2, v3, v4, v5, v6, (size_t)"public");
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 15341, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_13()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("unrecognized hash partition bound specification \"%s\"", v1, v2, v3, v4, v5, v6, v7, *(void *)(v0 + 16));
  OUTLINED_FUNCTION_6_10();
  errfinish("gram.y", 2851, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_20(size_t *a1)
{
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_2_12();
  errmsg("unrecognized row security option \"%s\"", v2, v3, v4, v5, v6, v7, v8, *a1);
  errhint("Only PERMISSIVE or RESTRICTIVE policies are supported currently.", v9, v10, v11, v12, v13, v14, v15, v16);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 5436, (uint64_t)"base_yyparse");
  __break(1u);
}

uint64_t errmsg(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  uint64_t v10 = errordata();
  int v11 = *(_DWORD *)errordata_stack_depth();
  uint64_t v12 = (_DWORD *)recursion_depth();
  ++*v12;
  if (v11 < 0) {
    errmsg_cold_1(v13);
  }
  uint64_t v14 = v12;
  uint64_t v15 = v10 + 192 * v11;
  size_t v16 = (uint64_t *)CurrentMemoryContext();
  uint64_t v17 = *v16;
  *size_t v16 = v18;
  *(void *)(v15 + 112) = a1;
  memset(v29, 0, sizeof(v29));
  initStringInfo(v29);
  int v20 = *(_DWORD *)(v15 + 176);
  uint64_t v19 = (int *)(v15 + 176);
  *__error() = v20;
  unsigned int appended = appendStringInfoVA((uint64_t)v29, a1, &a9);
  if (appended)
  {
    unsigned int v22 = appended;
    do
    {
      enlargeStringInfo((uint64_t)v29, v22);
      int v23 = *v19;
      *__error() = v23;
      unsigned int v22 = appendStringInfoVA((uint64_t)v29, a1, &a9);
    }
    while (v22);
  }
  uint64_t v24 = v10 + 192 * v11;
  uint64_t v27 = *(void *)(v24 + 64);
  uint64_t v26 = (void **)(v24 + 64);
  uint64_t v25 = v27;
  if (v27) {
    pfree(v25);
  }
  *uint64_t v26 = pstrdup(v29[0]);
  pfree((uint64_t)v29[0]);
  *size_t v16 = v17;
  --*v14;
  return 0;
}

void base_yyparse_cold_21()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 5690, (uint64_t)"base_yyparse");
  __break(1u);
}

uint64_t errstart(int a1, const char *a2)
{
  int v3 = a1;
  if (a1 < 20) {
    goto LABEL_28;
  }
  if (*(_DWORD *)CritSectionCount()) {
    int v3 = 22;
  }
  if (v3 != 20) {
    goto LABEL_9;
  }
  if (!*(void *)PG_exception_stack() || *(unsigned char *)ExitOnAnyError() || *(unsigned char *)proc_exit_inprogress())
  {
    int v3 = 21;
LABEL_9:
    if ((*(_DWORD *)errordata_stack_depth() & 0x80000000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_10;
  }
  int v3 = 20;
  if ((*(_DWORD *)errordata_stack_depth() & 0x80000000) != 0) {
    goto LABEL_28;
  }
LABEL_10:
  uint64_t v4 = errordata();
  if (v5 + 1 > 1) {
    uint64_t v6 = (v5 + 1);
  }
  else {
    uint64_t v6 = 1;
  }
  if (v6 < 2)
  {
    uint64_t v7 = 0;
LABEL_24:
    int v11 = (int *)(v4 + 192 * v7);
    uint64_t v12 = v6 - v7;
    do
    {
      int v14 = *v11;
      v11 += 48;
      int v13 = v14;
      if (v3 <= v14) {
        int v3 = v13;
      }
      --v12;
    }
    while (v12);
    goto LABEL_28;
  }
  uint64_t v7 = v6 & 0x7FFFFFFE;
  uint64_t v8 = v7;
  uint64_t v9 = (int *)v4;
  int v10 = v3;
  do
  {
    if (v3 <= *v9) {
      int v3 = *v9;
    }
    if (v10 <= v9[48]) {
      int v10 = v9[48];
    }
    v9 += 96;
    v8 -= 2;
  }
  while (v8);
  if (v3 <= v10) {
    int v3 = v10;
  }
  if (v7 != v6) {
    goto LABEL_24;
  }
LABEL_28:
  int v15 = *(_DWORD *)log_min_messages();
  if ((v3 - 15) > 1)
  {
    if (v15 == 15)
    {
      if (v3 > 20) {
        goto LABEL_30;
      }
    }
    else if (v3 >= v15)
    {
      goto LABEL_30;
    }
LABEL_35:
    int v16 = 0;
    goto LABEL_36;
  }
  if (v15 >= 21) {
    goto LABEL_35;
  }
LABEL_30:
  int v16 = 1;
LABEL_36:
  uint64_t v17 = (_DWORD *)whereToSendOutput();
  BOOL v18 = 0;
  if (v3 != 16 && *v17 == 2)
  {
    if (!*(unsigned char *)ClientAuthInProgress())
    {
      int v46 = *(_DWORD *)client_min_messages();
      BOOL v18 = v3 == 17 || v3 >= v46;
      if (v3 > 19) {
        int v48 = 1;
      }
      else {
        int v48 = v16;
      }
      uint64_t v20 = v48 | v18;
      if (v20 != 1) {
        return v20;
      }
      goto LABEL_44;
    }
    BOOL v18 = v3 > 19;
  }
  if (v3 > 19) {
    int v19 = 1;
  }
  else {
    int v19 = v16;
  }
  uint64_t v20 = v19 | v18;
  if (v20 != 1) {
    return v20;
  }
LABEL_44:
  uint64_t v21 = (uint64_t *)ErrorContext();
  if (!*v21)
  {
    write_stderr("error occurred before error message processing is available\n", v22, v23, v24, v25, v26, v27, v28, v52);
    exit(2);
  }
  uint64_t v29 = v21;
  uint64_t v30 = (int *)recursion_depth();
  int v31 = (*v30)++;
  if (v3 >= 20 && v31 >= 1)
  {
    MemoryContextReset(*v29);
    if (*v30 >= 3)
    {
      *(void *)error_context_stack() = 0;
      *(void *)debug_query_string() = 0;
    }
  }
  uint64_t v32 = (int *)errordata_stack_depth();
  int v33 = *v32 + 1;
  *uint64_t v32 = v33;
  if (v33 >= 5) {
    errstart_cold_1(v32);
  }
  uint64_t v34 = errordata();
  uint64_t v36 = v34;
  int v37 = v35;
  uint64_t v38 = (int *)(v34 + 192 * v35);
  if (v38 < v38 + 48)
  {
    uint64_t v39 = 192 * v35 + v34;
    unint64_t v40 = v39 + 192;
    unint64_t v41 = v39 + 8;
    if (v40 > v41) {
      unint64_t v41 = v40;
    }
    bzero(v38, ((v41 + ~v34 - 192 * v35) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  *uint64_t v38 = v3;
  uint64_t v42 = v36 + 192 * v37;
  *(unsigned char *)(v42 + 4) = v16;
  *(unsigned char *)(v42 + 5) = v18;
  unsigned __int8 v43 = "postgres-13";
  if (a2) {
    unsigned __int8 v43 = a2;
  }
  *(int64x2_t *)(v42 + 4errstart(20, 0) = vdupq_n_s64((unint64_t)v43);
  uint64_t v44 = v36 + 192 * v37;
  if (v3 < 20)
  {
    uint64_t v45 = (_DWORD *)(v44 + 56);
    if (v3 == 19) {
      *uint64_t v45 = 64;
    }
    else {
      *uint64_t v45 = 0;
    }
  }
  else
  {
    *(_DWORD *)(v44 + 56) = 2600;
  }
  uint64_t v49 = __error();
  uint64_t v50 = v36 + 192 * v37;
  *(_DWORD *)(v50 + 176) = *v49;
  *(void *)(v50 + 184) = *v29;
  --*v30;
  return v20;
}

uint64_t pg_vsnprintf(char *a1, unint64_t a2, unsigned char *a3, size_t *a4)
{
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (a2 <= 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = a2;
  }
  int v5 = &v9;
  if (a2) {
    int v5 = a1;
  }
  int v10 = v5;
  int v11 = v5;
  uint64_t v12 = (uint64_t)&v5[v4 - 1];
  LODWORD(v14) = 0;
  BYTE4(v14) = 0;
  dopr((uint64_t)&v10, a3, a4);
  int v6 = (int)v10;
  *int v10 = 0;
  unsigned int v7 = v14 + v6 - v11;
  if (BYTE4(v14)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v7;
  }
}

int64x2_t MemoryContextStatsInternal(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int64x2_t *a5)
{
  int v28 = a2;
  if (a3) {
    char v9 = MemoryContextStatsPrint;
  }
  else {
    char v9 = 0;
  }
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), int *, int64x2_t *))(*(void *)(a1 + 16) + 56))(a1, v9, &v28, a5);
  int64x2_t result = 0uLL;
  int64x2_t v26 = 0u;
  int64x2_t v27 = 0u;
  uint64_t v17 = *(void *)(a1 + 32);
  if (!v17)
  {
    BOOL v20 = __OFSUB__(0, a4);
    size_t v21 = -(int)a4;
    if (((v21 & 0x80000000) != 0) ^ v20 | (v21 == 0)) {
      return result;
    }
    goto LABEL_13;
  }
  int v18 = 0;
  do
  {
    while (1)
    {
      uint64_t v19 = (v28 + 1);
      if (v18 < (int)a4) {
        break;
      }
      MemoryContextStatsInternal(v17, v19, 0, a4, &v26);
      ++v18;
      uint64_t v17 = *(void *)(v17 + 48);
      if (!v17) {
        goto LABEL_9;
      }
    }
    MemoryContextStatsInternal(v17, v19, a3, a4, a5);
    ++v18;
    uint64_t v17 = *(void *)(v17 + 48);
  }
  while (v17);
LABEL_9:
  BOOL v20 = __OFSUB__(v18, a4);
  size_t v21 = (v18 - a4);
  if (!(((v21 & 0x80000000) != 0) ^ v20 | (v21 == 0)))
  {
LABEL_13:
    if (a3)
    {
      uint64_t v22 = (FILE **)MEMORY[0x1E4F143C8];
      if ((v28 & 0x80000000) == 0)
      {
        int v23 = 0;
        do
        {
          pg_fprintf(*v22, "  ", v10, v11, v12, v13, v14, v15, v25);
          ++v23;
        }
        while (v23 <= v28);
      }
      pg_fprintf(*v22, "%d more child contexts containing %zu total in %zd blocks; %zu free (%zd chunks); %zu used\n",
        v10,
        v11,
        v12,
        v13,
        v14,
        v15,
        v21);
    }
    if (a5)
    {
      int64x2_t result = vaddq_s64(*a5, v26);
      int64x2_t v24 = vaddq_s64(a5[1], v27);
      *a5 = result;
      a5[1] = v24;
    }
  }
  return result;
}

uint64_t pg_mule_verifier(unsigned char *a1, int a2)
{
  int v3 = *a1 & 0xFE;
  if (v3 == 156) {
    int v4 = 4;
  }
  else {
    int v4 = 1;
  }
  if (v3 != 154 && (*a1 + 112) >= 0xAu) {
    unsigned int v6 = v4;
  }
  else {
    unsigned int v6 = 3;
  }
  if ((*a1 + 127) >= 0xDu) {
    uint64_t result = v6;
  }
  else {
    uint64_t result = 2;
  }
  if ((int)result > a2) {
    return 0xFFFFFFFFLL;
  }
  if (result >= 2)
  {
    if ((char)a1[1] < 0)
    {
      if (result >= 3)
      {
        if ((char)a1[2] < 0)
        {
          if (result >= 4)
          {
            if ((char)a1[3] >= 0) {
              return 0xFFFFFFFFLL;
            }
            else {
              return result;
            }
          }
        }
        else
        {
          return 0xFFFFFFFFLL;
        }
      }
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t pg_snprintf(char *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (a2 <= 1) {
    uint64_t v9 = 1;
  }
  else {
    uint64_t v9 = a2;
  }
  uint64_t v10 = &v14;
  if (a2) {
    uint64_t v10 = a1;
  }
  uint64_t v15 = v10;
  int v16 = v10;
  uint64_t v17 = (uint64_t)&v10[v9 - 1];
  dopr(&v15, a3, &a9);
  int v11 = (int)v15;
  char *v15 = 0;
  unsigned int v12 = v19 + v11 - v16;
  if (BYTE4(v19)) {
    return 0xFFFFFFFFLL;
  }
  else {
    return v12;
  }
}

size_t dopr(uint64_t a1, unsigned char *a2, size_t *a3)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  size_t result = (size_t)__error();
  char v6 = 0;
  unsigned int v7 = 0;
  unsigned int v8 = *(_DWORD *)result;
  do
  {
    if (*a2 != 37)
    {
      if (!*a2) {
        break;
      }
      uint64_t v9 = 0;
      do
        int v10 = a2[++v9];
      while (v10 != 37 && v10 != 0);
      size_t result = dostr((size_t)a2, v9, a1);
      if (*(unsigned char *)(a1 + 36)) {
        break;
      }
      a2 += v9;
      if (!*a2) {
        break;
      }
    }
    if (!v7) {
      unsigned int v7 = a2;
    }
    int v12 = a2[1];
    if (v12 == 115)
    {
      a2 += 2;
      uint64_t v13 = (const char **)a3++;
      char v14 = (char *)*v13;
      uint64_t v15 = *v13;
LABEL_16:
      int v16 = strlen(v15);
      uint64_t v17 = v14;
LABEL_17:
      size_t result = dostr((size_t)v17, v16, a1);
    }
    else
    {
      unsigned int v125 = v8;
      int v18 = 0;
      size_t v19 = 0;
      int v20 = 0;
      int v123 = 0;
      int v21 = 0;
      uint64_t v22 = 0;
      int v23 = 0;
      int v24 = 0;
      int v25 = 0;
      int v26 = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      ++a2;
      while (2)
      {
        int v30 = (char)v12;
        uint64_t v29 = 1;
        ++a2;
        switch((char)v12)
        {
          case '$':
            if (v6)
            {
              if ((v27 & 1) == 0) {
                goto LABEL_134;
              }
            }
            else
            {
              *(void *)uint64_t v136 = a3;
              int v121 = v20;
              int v122 = v23;
              int v119 = v18;
              int v120 = v24;
              char v117 = v27;
              int v118 = v25;
              unsigned int v116 = v28;
              long long v134 = 0u;
              long long v135 = 0u;
              long long v132 = 0u;
              long long v133 = 0u;
              long long v130 = 0u;
              long long v131 = 0u;
              *(_OWORD *)__s = 0u;
              long long v129 = 0u;
              int v37 = 0;
              size_t result = (size_t)v7;
LABEL_55:
              if (*(unsigned char *)result == 37
                || *(unsigned char *)result && (v38 = v19, result = (size_t)strchr((char *)(result + 1), 37), size_t v19 = v38, result))
              {
                int v39 = 0;
                int v40 = 0;
                uint64_t v41 = 0;
                uint64_t v42 = 0;
                char v43 = 0;
                size_t v44 = result + 2;
                while (1)
                {
                  int v45 = *(char *)(v44 - 1);
                  char v46 = v43;
                  uint64_t v47 = v42;
                  uint64_t v48 = v41;
                  size_t result = v44;
                  uint64_t v42 = 0;
                  ++v44;
                  switch(v45)
                  {
                    case '$':
                      if ((v47 - 32) < 0xFFFFFFE1) {
                        goto LABEL_285;
                      }
                      uint64_t v42 = 0;
                      char v43 = 0;
                      uint64_t v41 = v47;
                      if ((v46 & 1) == 0) {
                        continue;
                      }
                      if (*(_DWORD *)&__s[4 * v47] > 1u) {
                        goto LABEL_285;
                      }
                      uint64_t v42 = 0;
                      char v43 = 0;
                      *(_DWORD *)&__s[4 * v47] = 1;
                      if (v37 <= (int)v47) {
                        int v37 = v47;
                      }
                      uint64_t v41 = v48;
                      break;
                    case '%':
                    case 'm':
                      if (v43) {
                        goto LABEL_285;
                      }
                      goto LABEL_55;
                    case '\'':
                    case '+':
                    case '-':
                    case 'h':
                      goto LABEL_62;
                    case '*':
                      uint64_t v42 = 0;
                      char v43 = 1;
                      if (v46) {
                        goto LABEL_285;
                      }
                      continue;
                    case '.':
                      continue;
                    case '0':
                    case '1':
                    case '2':
                    case '3':
                    case '4':
                    case '5':
                    case '6':
                    case '7':
                    case '8':
                    case '9':
                      uint64_t v42 = (v45 + 10 * v47 - 48);
                      continue;
                    case 'E':
                    case 'G':
                    case 'e':
                    case 'f':
                    case 'g':
                      if (!v41 || (*(_DWORD *)&__s[4 * (int)v41] | 4) != 4) {
                        goto LABEL_285;
                      }
                      *(_DWORD *)&__s[4 * (int)v41] = 4;
                      if (v37 <= (int)v41) {
                        int v37 = v41;
                      }
                      if (v43) {
                        goto LABEL_285;
                      }
                      goto LABEL_55;
                    case 'X':
                    case 'd':
                    case 'i':
                    case 'o':
                    case 'u':
                    case 'x':
                      if (!v41) {
                        goto LABEL_285;
                      }
                      int v49 = v40 ? 2 : 1;
                      int v50 = v39 ? 3 : v49;
                      int v51 = *(_DWORD *)&__s[4 * (int)v41];
                      if (v51)
                      {
                        if (v51 != v50) {
                          goto LABEL_285;
                        }
                      }
                      *(_DWORD *)&__s[4 * (int)v41] = v50;
                      if (v37 <= (int)v41) {
                        int v37 = v41;
                      }
                      if (v43) {
                        goto LABEL_285;
                      }
                      goto LABEL_55;
                    case 'c':
                      if (!v41 || *(_DWORD *)&__s[4 * (int)v41] > 1u) {
                        goto LABEL_285;
                      }
                      *(_DWORD *)&__s[4 * (int)v41] = 1;
                      if (v37 <= (int)v41) {
                        int v37 = v41;
                      }
                      if (v43) {
                        goto LABEL_285;
                      }
                      goto LABEL_55;
                    case 'l':
                      if (v40) {
                        int v39 = 1;
                      }
                      goto LABEL_61;
                    case 'p':
                    case 's':
                      if (!v41) {
                        goto LABEL_285;
                      }
                      int v52 = *(_DWORD *)&__s[4 * (int)v41];
                      if (v52 != 5 && v52 != 0) {
                        goto LABEL_285;
                      }
                      *(_DWORD *)&__s[4 * (int)v41] = 5;
                      if (v37 <= (int)v41) {
                        int v37 = v41;
                      }
                      if (v43) {
                        goto LABEL_285;
                      }
                      goto LABEL_55;
                    case 'z':
LABEL_61:
                      int v40 = 1;
LABEL_62:
                      uint64_t v42 = v47;
                      continue;
                    default:
                      goto LABEL_285;
                  }
                }
              }
              int v20 = v121;
              int v23 = v122;
              int v18 = v119;
              int v24 = v120;
              int v25 = v118;
              if (v37 >= 1)
              {
                int v61 = 1;
                do
                {
                  uint64_t v63 = v61;
                  switch(*(_DWORD *)&__s[4 * v61])
                  {
                    case 0:
                      goto LABEL_285;
                    case 1:
                      char v64 = *(int **)v136;
                      *(void *)v136 += 8;
                      v127[2 * v63 + 1] = *v64;
                      goto LABEL_128;
                    case 2:
                    case 3:
                    case 5:
                      uint64_t v62 = *(int **)v136;
                      *(void *)v136 += 8;
                      *(void *)&v127[2 * v63 + 1] = *(void *)v62;
                      goto LABEL_128;
                    case 4:
                      uint64_t v65 = *(int **)v136;
                      *(void *)v136 += 8;
                      *(void *)&v127[2 * v63 + 1] = *(void *)v65;
LABEL_128:
                      int v20 = v121;
                      int v23 = v122;
                      int v18 = v119;
                      int v24 = v120;
                      int v25 = v118;
                      break;
                    default:
                      break;
                  }
                  int v61 = v63 + 1;
                }
                while ((int)v63 + 1 <= v37);
              }
              uint64_t v28 = v116;
              if ((v117 & 1) == 0)
              {
LABEL_134:
                uint64_t v27 = 0;
                char v6 = 1;
                int v123 = v26;
                uint64_t v29 = v22;
                int v26 = 0;
                goto LABEL_26;
              }
            }
            uint64_t v31 = v28;
            int v32 = v127[2 * v26 + 1];
            if (v32 >= 0) {
              int v33 = v127[2 * v26 + 1];
            }
            else {
              int v33 = -v32;
            }
            if (v32 < 0) {
              unsigned int v34 = 1;
            }
            else {
              unsigned int v34 = v22;
            }
            int v35 = v32 & ~(v32 >> 31);
            BOOL v36 = v32 >= 0;
            if (v23) {
              int v18 = v35;
            }
            else {
              int v21 = v33;
            }
            if (v23) {
              uint64_t v29 = v22;
            }
            else {
              uint64_t v29 = v34;
            }
            if (!v23) {
              BOOL v36 = 0;
            }
            int v26 = 0;
            uint64_t v27 = 0;
            char v6 = 1;
            uint64_t v28 = v31;
            int v23 = v36;
LABEL_26:
            LOBYTE(v12) = *a2;
            uint64_t v22 = v29;
            continue;
          case '%':
            unint64_t v87 = *(void *)(a1 + 16);
            size_t v88 = *(unsigned char **)a1;
            if (v87) {
              BOOL v89 = (unint64_t)v88 >= v87;
            }
            else {
              BOOL v89 = 0;
            }
            if (!v89) {
              goto LABEL_204;
            }
            size_t v90 = *(FILE **)(a1 + 24);
            if (v90)
            {
              if (!*(unsigned char *)(a1 + 36))
              {
                size_t result = *(void *)(a1 + 8);
                size_t v91 = &v88[-result];
                if (v88 != (unsigned char *)result)
                {
                  size_t result = fwrite((const void *)result, 1uLL, (size_t)&v88[-result], v90);
                  *(_DWORD *)(a1 + 32) += result;
                  if ((unsigned char *)result != v91) {
                    *(unsigned char *)(a1 + 36) = 1;
                  }
                }
              }
              size_t v88 = *(unsigned char **)(a1 + 8);
LABEL_204:
              *(void *)a1 = v88 + 1;
              *size_t v88 = 37;
            }
            else
            {
              ++*(_DWORD *)(a1 + 32);
            }
            goto LABEL_231;
          case '\'':
          case 'h':
            goto LABEL_25;
          case '*':
            if (v6)
            {
              int v26 = 0;
              uint64_t v27 = 1;
              uint64_t v29 = v22;
              uint64_t v28 = 1;
              char v6 = 1;
            }
            else
            {
              uint64_t v54 = (int *)a3++;
              int v55 = *v54;
              if (v55 >= 0) {
                int v56 = v55;
              }
              else {
                int v56 = -v55;
              }
              uint64_t v57 = v27;
              if (v55 < 0) {
                unsigned int v58 = 1;
              }
              else {
                unsigned int v58 = v22;
              }
              int v59 = v55 & ~(v55 >> 31);
              BOOL v60 = v55 >= 0;
              if (v23) {
                int v18 = v59;
              }
              else {
                int v21 = v56;
              }
              if (v23) {
                uint64_t v29 = v22;
              }
              else {
                uint64_t v29 = v58;
              }
              uint64_t v27 = v57;
              if (!v23) {
                BOOL v60 = 0;
              }
              int v26 = 0;
              uint64_t v28 = 1;
              char v6 = 0;
              int v23 = v60;
            }
            goto LABEL_26;
          case '+':
            int v20 = 1;
            goto LABEL_25;
          case '-':
            goto LABEL_26;
          case '.':
            if ((v28 & 1) == 0) {
              int v21 = v26;
            }
            int v23 = 1;
            uint64_t v29 = v22;
            int v26 = 0;
            uint64_t v28 = 0;
            goto LABEL_26;
          case '0':
            if (v26 | v23) {
              size_t v19 = v19;
            }
            else {
              size_t v19 = 48;
            }
            goto LABEL_24;
          case '1':
          case '2':
          case '3':
          case '4':
          case '5':
          case '6':
          case '7':
          case '8':
          case '9':
LABEL_24:
            int v26 = (char)v12 + 10 * v26 - 48;
            goto LABEL_25;
          case 'E':
          case 'G':
          case 'e':
          case 'f':
          case 'g':
            char v66 = v28;
            if (v23) {
              int v67 = v21;
            }
            else {
              int v67 = v26;
            }
            if (v28 & 1 | (v23 == 0)) {
              int v68 = v18;
            }
            else {
              int v68 = v26;
            }
            if (v66) {
              int v69 = v21;
            }
            else {
              int v69 = v67;
            }
            if (v6)
            {
              double v70 = *(double *)&v127[2 * v123 + 1];
            }
            else
            {
              uint64_t v76 = (double *)a3++;
              double v70 = *v76;
            }
            unsigned int v77 = v68 & ~(v68 >> 31);
            if (v77 >= 0x15E) {
              uint64_t v78 = 350;
            }
            else {
              uint64_t v78 = v77;
            }
            if (v70 >= 0.0 && (v70 == 0.0 ? (BOOL v79 = *(void *)&v70 == 0) : (BOOL v79 = 1), v79))
            {
              if (v20) {
                int v80 = 43;
              }
              else {
                int v80 = 0;
              }
            }
            else
            {
              double v70 = -v70;
              int v80 = 45;
            }
            if (fabs(v70) == INFINITY)
            {
              int v81 = 0;
              strcpy(__s, "Infinity");
              int v82 = 8;
            }
            else
            {
              int v124 = v69;
              size_t v83 = v19;
              if (v23)
              {
                int v81 = v77 - v78;
                qmemcpy(v136, "%.*", 3);
                v136[3] = v12;
                v136[4] = 0;
                size_t result = sprintf(__s, v136, v78, *(void *)&v70);
                int v82 = result;
              }
              else
              {
                v136[0] = 37;
                v136[1] = v12;
                v136[2] = 0;
                size_t result = sprintf(__s, v136, *(void *)&v70);
                int v82 = result;
                int v81 = 0;
              }
              size_t v19 = v83;
              int v69 = v124;
              if (v82 < 0)
              {
                *(unsigned char *)(a1 + 36) = 1;
LABEL_231:
                unsigned int v8 = v125;
                goto LABEL_18;
              }
            }
            int v100 = (v69 - (v82 + v81)) & ~((v69 - (v82 + v81)) >> 31);
            if (v22) {
              int v100 = -v100;
            }
            v127[0] = v100;
            leading_pad(v19, v80, v127, a1);
            if (v81 < 1)
            {
              size_t result = dostr((size_t)__s, v82, a1);
              unsigned int v8 = v125;
              int v102 = v127[0];
              if ((v127[0] & 0x80000000) == 0) {
                goto LABEL_18;
              }
              goto LABEL_242;
            }
            BOOL v101 = strrchr(__s, 101);
            if (v101 || (BOOL v101 = strrchr(__s, 69)) != 0)
            {
              dostr((size_t)__s, v101 - __s, a1);
              dopr_outchmulti(0x30uLL, v81, a1);
              size_t result = dostr((size_t)v101, v82 - (v101 - __s), a1);
              unsigned int v8 = v125;
              int v102 = v127[0];
              if ((v127[0] & 0x80000000) == 0) {
                goto LABEL_18;
              }
LABEL_242:
              int v103 = -v102;
              goto LABEL_243;
            }
            dostr((size_t)__s, v82, a1);
            size_t result = dopr_outchmulti(0x30uLL, v81, a1);
            unsigned int v8 = v125;
            int v102 = v127[0];
            if (v127[0] < 0) {
              goto LABEL_242;
            }
            break;
          case 'X':
          case 'o':
          case 'u':
          case 'x':
            char v71 = v28;
            if (v23) {
              int v72 = v21;
            }
            else {
              int v72 = v26;
            }
            if (v71 & 1 | (v23 == 0)) {
              int v73 = v18;
            }
            else {
              int v73 = v26;
            }
            if (v71) {
              int v74 = v21;
            }
            else {
              int v74 = v72;
            }
            if (v6)
            {
              if (v25) {
                goto LABEL_188;
              }
              uint64_t v75 = (size_t *)&v127[2 * v123 + 1];
              if (!v24) {
                goto LABEL_192;
              }
              goto LABEL_229;
            }
            if (!v25 && !v24)
            {
              uint64_t v75 = a3++;
LABEL_192:
              size_t v86 = *(unsigned int *)v75;
              goto LABEL_230;
            }
            goto LABEL_228;
          case 'c':
            if (v23) {
              int v92 = v21;
            }
            else {
              int v92 = v26;
            }
            if (v28) {
              int v92 = v21;
            }
            if (v6)
            {
              int v93 = v127[2 * v123 + 1];
            }
            else
            {
              uint64_t v104 = (int *)a3++;
              int v93 = *v104;
            }
            int v105 = (v92 - 1) & ~((v92 - 1) >> 31);
            if (v22) {
              int v106 = -v105;
            }
            else {
              int v106 = v105;
            }
            if (v106 >= 1)
            {
              size_t result = dopr_outchmulti(0x20uLL, v106, a1);
              int v106 = 0;
            }
            unsigned int v8 = v125;
            unint64_t v107 = *(void *)(a1 + 16);
            uint64_t v108 = *(unsigned char **)a1;
            if (!v107 || (unint64_t)v108 < v107) {
              goto LABEL_259;
            }
            uint64_t v109 = *(FILE **)(a1 + 24);
            if (v109)
            {
              if (!*(unsigned char *)(a1 + 36))
              {
                size_t result = *(void *)(a1 + 8);
                uint64_t v110 = &v108[-result];
                if (v108 != (unsigned char *)result)
                {
                  size_t result = fwrite((const void *)result, 1uLL, (size_t)&v108[-result], v109);
                  *(_DWORD *)(a1 + 32) += result;
                  if ((unsigned char *)result != v110) {
                    *(unsigned char *)(a1 + 36) = 1;
                  }
                }
              }
              uint64_t v108 = *(unsigned char **)(a1 + 8);
LABEL_259:
              *(void *)a1 = v108 + 1;
              *uint64_t v108 = v93;
              if (v106 < 0)
              {
LABEL_260:
                int v103 = -v106;
                goto LABEL_243;
              }
            }
            else
            {
              ++*(_DWORD *)(a1 + 32);
              if (v106 < 0) {
                goto LABEL_260;
              }
            }
            goto LABEL_18;
          case 'd':
          case 'i':
            char v84 = v28;
            if (v23) {
              int v85 = v21;
            }
            else {
              int v85 = v26;
            }
            if (v84 & 1 | (v23 == 0)) {
              int v73 = v18;
            }
            else {
              int v73 = v26;
            }
            if (v84) {
              int v74 = v21;
            }
            else {
              int v74 = v85;
            }
            if (v6)
            {
              if (v25)
              {
LABEL_188:
                size_t v86 = *(void *)&v127[2 * v123 + 1];
                goto LABEL_230;
              }
              uint64_t v75 = (size_t *)&v127[2 * v123 + 1];
              if (!v24) {
                goto LABEL_284;
              }
            }
            else
            {
              if (!v25 && !v24)
              {
                uint64_t v75 = a3++;
LABEL_284:
                size_t v86 = *(int *)v75;
                goto LABEL_230;
              }
LABEL_228:
              uint64_t v75 = a3++;
            }
LABEL_229:
            size_t v86 = *v75;
LABEL_230:
            size_t result = fmtint(v86, v30, v20, v22, v74, v19, v73, v23, a1);
            goto LABEL_231;
          case 'l':
            if (v24) {
              int v25 = 1;
            }
            goto LABEL_53;
          case 'm':
            unsigned int v8 = v125;
            uint64_t v15 = pg_strerror_r(v125, __s, 0x100uLL);
            char v14 = (char *)v15;
            goto LABEL_16;
          case 'p':
            if (v6)
            {
              BOOL v94 = *(const void **)&v127[2 * v123 + 1];
            }
            else
            {
              uint64_t v111 = (const void **)a3++;
              BOOL v94 = *v111;
            }
            size_t result = sprintf(__s, "%p", v94);
            unsigned int v8 = v125;
            if ((result & 0x80000000) == 0)
            {
              int v16 = result;
              uint64_t v17 = __s;
              goto LABEL_17;
            }
            *(unsigned char *)(a1 + 36) = 1;
            goto LABEL_18;
          case 's':
            char v95 = v28;
            if (v23) {
              int v96 = v21;
            }
            else {
              int v96 = v26;
            }
            if (v95 & 1 | (v23 == 0)) {
              int v97 = v18;
            }
            else {
              int v97 = v26;
            }
            if (v95) {
              int v98 = v21;
            }
            else {
              int v98 = v96;
            }
            if (v6)
            {
              uint64_t v99 = *(const char **)&v127[2 * v123 + 1];
            }
            else
            {
              unint64_t v112 = (const char **)a3++;
              uint64_t v99 = *v112;
            }
            if (v23) {
              int v113 = strnlen(v99, v97);
            }
            else {
              int v113 = strlen(v99);
            }
            int v114 = v113;
            if (v22) {
              int v115 = -((v98 - v113) & ~((v98 - v113) >> 31));
            }
            else {
              int v115 = (v98 - v113) & ~((v98 - v113) >> 31);
            }
            if (v115 >= 1)
            {
              dopr_outchmulti(0x20uLL, v115, a1);
              size_t result = dostr((size_t)v99, v114, a1);
              goto LABEL_231;
            }
            size_t result = dostr((size_t)v99, v113, a1);
            unsigned int v8 = v125;
            if (v115 < 0)
            {
              int v103 = -v115;
LABEL_243:
              size_t result = dopr_outchmulti(0x20uLL, v103, a1);
            }
            goto LABEL_18;
          case 'z':
LABEL_53:
            int v24 = 1;
LABEL_25:
            uint64_t v29 = v22;
            goto LABEL_26;
          default:
LABEL_285:
            size_t result = (size_t)__error();
            *(_DWORD *)size_t result = 22;
            *(unsigned char *)(a1 + 36) = 1;
            return result;
        }
        break;
      }
    }
LABEL_18:
    ;
  }
  while (!*(unsigned char *)(a1 + 36));
  return result;
}

size_t strnlen(const char *__s1, size_t __n)
{
  uint64_t v2 = __s1;
  if (__n)
  {
    int v3 = &__s1[__n];
    uint64_t v2 = __s1;
    while (*v2)
    {
      ++v2;
      if (!--__n)
      {
        uint64_t v2 = v3;
        return v2 - __s1;
      }
    }
  }
  return v2 - __s1;
}

size_t dopr_outchmulti(size_t __c, int a2, uint64_t a3)
{
  int v4 = __c;
  if (a2 == 1)
  {
    unint64_t v5 = *(void *)(a3 + 16);
    char v6 = *(unsigned char **)a3;
    if (v5) {
      BOOL v7 = (unint64_t)v6 >= v5;
    }
    else {
      BOOL v7 = 0;
    }
    if (v7)
    {
      unsigned int v8 = *(FILE **)(a3 + 24);
      if (!v8)
      {
        ++*(_DWORD *)(a3 + 32);
        return __c;
      }
      if (!*(unsigned char *)(a3 + 36))
      {
        __c = *(void *)(a3 + 8);
        uint64_t v9 = &v6[-__c];
        if (v6 != (unsigned char *)__c)
        {
          __c = fwrite((const void *)__c, 1uLL, (size_t)&v6[-__c], v8);
          *(_DWORD *)(a3 + 32) += __c;
          if ((unsigned char *)__c != v9) {
            *(unsigned char *)(a3 + 36) = 1;
          }
        }
      }
      char v6 = *(unsigned char **)(a3 + 8);
    }
    *(void *)a3 = v6 + 1;
    *char v6 = v4;
  }
  else if (a2 >= 1)
  {
    int v10 = a2;
    for (__c = *(void *)a3; ; *(void *)a3 = __c)
    {
      while (1)
      {
        uint64_t v12 = *(void *)(a3 + 16);
        int v13 = v10;
        if (v12)
        {
          int v13 = v12 - __c;
          if ((int)v12 - (int)__c <= 0) {
            break;
          }
        }
        if (v13 >= v10) {
          size_t v11 = v10;
        }
        else {
          size_t v11 = v13;
        }
        memset((void *)__c, v4, v11);
        __c = *(void *)a3 + v11;
        *(void *)a3 = __c;
        v10 -= v11;
        if (v10 <= 0) {
          return __c;
        }
      }
      char v14 = *(FILE **)(a3 + 24);
      if (!v14) {
        break;
      }
      if (!*(unsigned char *)(a3 + 36))
      {
        uint64_t v15 = *(void *)(a3 + 8);
        size_t v16 = __c - v15;
        if (__c != v15)
        {
          size_t v17 = fwrite(*(const void **)(a3 + 8), 1uLL, v16, v14);
          *(_DWORD *)(a3 + 32) += v17;
          if (v17 != v16) {
            *(unsigned char *)(a3 + 36) = 1;
          }
        }
      }
      __c = *(void *)(a3 + 8);
    }
    *(_DWORD *)(a3 + 32) += v10;
  }
  return __c;
}

size_t fmtint(size_t result, int a2, int a3, int a4, int a5, size_t __c, int a7, int a8, uint64_t a9)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v9 = a2 - 88;
  int v10 = 0;
  size_t v11 = "0123456789abcdef";
  unint64_t v12 = 8;
  switch(v9)
  {
    case 0:
      int v10 = 0;
      size_t v11 = "0123456789ABCDEF";
      unint64_t v12 = 16;
      if (!a7) {
        goto LABEL_12;
      }
      goto LABEL_18;
    case 12:
    case 17:
      if ((result & 0x8000000000000000) != 0)
      {
        size_t result = -(uint64_t)result;
        int v10 = 45;
        unint64_t v12 = 10;
      }
      else
      {
        if (a3) {
          int v10 = 43;
        }
        else {
          int v10 = 0;
        }
        size_t v11 = "0123456789abcdef";
LABEL_10:
        unint64_t v12 = 10;
LABEL_11:
        if (!a7)
        {
LABEL_12:
          if (!result && a8)
          {
            int v13 = 0;
            goto LABEL_21;
          }
        }
      }
LABEL_18:
      int v13 = 0;
      do
      {
        v18[-++v13 + 64] = v11[result % v12];
        BOOL v14 = v12 > result;
        result /= v12;
      }
      while (!v14);
LABEL_21:
      int v15 = a7 - v13;
      int v16 = (a5 - v13 - (v15 & ~(v15 >> 31))) & ~((a5 - v13 - (v15 & ~(v15 >> 31))) >> 31);
      if (a4) {
        int v16 = -v16;
      }
      int v17 = v16;
      leading_pad(__c, v10, &v17, a9);
      if (v15 >= 1) {
        dopr_outchmulti(0x30uLL, v15 & ~(v15 >> 31), a9);
      }
      size_t result = dostr((size_t)&v18[-v13 + 64], v13, a9);
      if (v17 < 0) {
        return dopr_outchmulti(0x20uLL, -v17, a9);
      }
      return result;
    case 23:
      goto LABEL_11;
    case 29:
      int v10 = 0;
      goto LABEL_10;
    case 32:
      int v10 = 0;
      unint64_t v12 = 16;
      if (a7) {
        goto LABEL_18;
      }
      goto LABEL_12;
    default:
      return result;
  }
}

size_t dostr(size_t __src, int a2, uint64_t a3)
{
  int v4 = (char *)__src;
  if (a2 == 1)
  {
    char v5 = *(unsigned char *)__src;
    unint64_t v6 = *(void *)(a3 + 16);
    BOOL v7 = *(unsigned char **)a3;
    if (v6) {
      BOOL v8 = (unint64_t)v7 >= v6;
    }
    else {
      BOOL v8 = 0;
    }
    if (v8)
    {
      int v9 = *(FILE **)(a3 + 24);
      if (!v9)
      {
        ++*(_DWORD *)(a3 + 32);
        return __src;
      }
      if (!*(unsigned char *)(a3 + 36))
      {
        __src = *(void *)(a3 + 8);
        int v10 = &v7[-__src];
        if (v7 != (unsigned char *)__src)
        {
          __src = fwrite((const void *)__src, 1uLL, (size_t)&v7[-__src], v9);
          *(_DWORD *)(a3 + 32) += __src;
          if ((unsigned char *)__src != v10) {
            *(unsigned char *)(a3 + 36) = 1;
          }
        }
      }
      BOOL v7 = *(unsigned char **)(a3 + 8);
    }
    *(void *)a3 = v7 + 1;
    *BOOL v7 = v5;
  }
  else if (a2 >= 1)
  {
    int v11 = a2;
    for (__src = *(void *)a3; ; *(void *)a3 = __src)
    {
      while (1)
      {
        uint64_t v13 = *(void *)(a3 + 16);
        int v14 = v11;
        if (v13)
        {
          int v14 = v13 - __src;
          if ((int)v13 - (int)__src <= 0) {
            break;
          }
        }
        if (v14 >= v11) {
          size_t v12 = v11;
        }
        else {
          size_t v12 = v14;
        }
        memmove((void *)__src, v4, v12);
        __src = *(void *)a3 + v12;
        *(void *)a3 = __src;
        v4 += v12;
        v11 -= v12;
        if (v11 <= 0) {
          return __src;
        }
      }
      int v15 = *(FILE **)(a3 + 24);
      if (!v15) {
        break;
      }
      if (!*(unsigned char *)(a3 + 36))
      {
        uint64_t v16 = *(void *)(a3 + 8);
        size_t v17 = __src - v16;
        if (__src != v16)
        {
          size_t v18 = fwrite(*(const void **)(a3 + 8), 1uLL, v17, v15);
          *(_DWORD *)(a3 + 32) += v18;
          if (v18 != v17) {
            *(unsigned char *)(a3 + 36) = 1;
          }
        }
      }
      __src = *(void *)(a3 + 8);
    }
    *(_DWORD *)(a3 + 32) += v11;
  }
  return __src;
}

void base_yyparse_cold_10()
{
  OUTLINED_FUNCTION_1_16();
  OUTLINED_FUNCTION_2_12();
  errmsg("remainder for hash partition must be specified", v0, v1, v2, v3, v4, v5, v6, vars0);
  errfinish("gram.y", 2861, (uint64_t)"base_yyparse");
  __break(1u);
}

void geterrcode_cold_1(_DWORD *a1)
{
}

void base_yyparse_cold_6()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("time zone interval must be HOUR or HOUR TO MINUTE", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_3_15();
  errfinish("gram.y", 1738, (uint64_t)"base_yyparse");
  __break(1u);
}

void getinternalerrposition_cold_1(_DWORD *a1)
{
}

void base_yyparse_cold_34()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("VALUES in FROM must have an alias", v0, v1, v2, v3, v4, v5, v6, v14);
  errhint("For example, FROM (VALUES ...) [AS] foo.", v7, v8, v9, v10, v11, v12, v13, v15);
  OUTLINED_FUNCTION_4_8();
  errfinish("gram.y", 12204, (uint64_t)"base_yyparse");
  __break(1u);
}

void insertSelectOptions_cold_1()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("multiple WITH clauses not allowed", v2, v3, v4, v5, v6, v7, v8, v10);
  uint64_t v9 = exprLocation(v1);
  scanner_errposition(v9, v0);
  errfinish("gram.y", 16411, (uint64_t)"insertSelectOptions");
  __break(1u);
}

_DWORD *errfinish(char *a1, int a2, uint64_t a3)
{
  uint64_t v6 = errordata();
  uint64_t v7 = (int *)errordata_stack_depth();
  int v8 = *v7;
  uint64_t v9 = (_DWORD *)recursion_depth();
  ++*v9;
  if (v8 < 0) {
    errfinish_cold_1(v7);
  }
  size_t v10 = v9;
  if (a1)
  {
    uint64_t v11 = strrchr(a1, 47);
    if (v11) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = a1;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v13 = v6 + 192 * v8;
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 32) = a3;
  *(_DWORD *)(v13 + 24) = a2;
  int v14 = *(_DWORD *)v13;
  ErrorContext();
  uint64_t v16 = (uint64_t *)CurrentMemoryContext();
  uint64_t v45 = *v16;
  *uint64_t v16 = v17;
  uint64_t v19 = *(void *)(v13 + 104);
  size_t v18 = (uint64_t *)(v13 + 104);
  if (!v19)
  {
    int v33 = *v15;
    if (*v15)
    {
      if (*(void *)backtrace_functions())
      {
        unsigned int v34 = *(const char **)backtrace_symbol_list();
        if (v34)
        {
          if (*v33 && *v34)
          {
            while (strcmp(v33, v34))
            {
              int v35 = &v34[strlen(v34)];
              int v36 = *((unsigned __int8 *)v35 + 1);
              unsigned int v34 = v35 + 1;
              if (!v36) {
                goto LABEL_8;
              }
            }
            set_backtrace(v6 + 192 * v8);
          }
        }
      }
    }
  }
LABEL_8:
  for (uint64_t i = *(uint64_t ***)error_context_stack(); i; uint64_t i = (uint64_t **)*i)
    ((void (*)(uint64_t *))i[1])(i[2]);
  if (v14 == 20)
  {
    *(_DWORD *)InterruptHoldoffCount() = 0;
    *(_DWORD *)QueryCancelHoldoffCount() = 0;
    *(_DWORD *)CritSectionCount() = 0;
    --*v10;
    pg_re_throw();
  }
  if (v14 >= 21 && *(_DWORD *)whereToSendOutput() == 2) {
    (*(void (**)(uint64_t))(PqCommMethods + 56))(1);
  }
  EmitErrorReport();
  uint64_t v21 = *(void *)(v6 + 192 * v8 + 64);
  if (v21) {
    pfree(v21);
  }
  uint64_t v22 = *(void *)(v6 + 192 * v8 + 72);
  if (v22) {
    pfree(v22);
  }
  uint64_t v23 = *(void *)(v6 + 192 * v8 + 80);
  if (v23) {
    pfree(v23);
  }
  uint64_t v24 = *(void *)(v6 + 192 * v8 + 88);
  if (v24) {
    pfree(v24);
  }
  uint64_t v25 = *(void *)(v6 + 192 * v8 + 96);
  if (v25) {
    pfree(v25);
  }
  if (*v18) {
    pfree(*v18);
  }
  uint64_t v26 = *(void *)(v6 + 192 * v8 + 120);
  if (v26) {
    pfree(v26);
  }
  uint64_t v27 = *(void *)(v6 + 192 * v8 + 128);
  if (v27) {
    pfree(v27);
  }
  uint64_t v28 = *(void *)(v6 + 192 * v8 + 136);
  if (v28) {
    pfree(v28);
  }
  uint64_t v29 = *(void *)(v6 + 192 * v8 + 144);
  if (v29) {
    pfree(v29);
  }
  uint64_t v30 = *(void *)(v6 + 192 * v8 + 152);
  if (v30) {
    pfree(v30);
  }
  uint64_t v31 = *(void *)(v6 + 192 * v8 + 168);
  if (v31) {
    pfree(v31);
  }
  --*v7;
  *uint64_t v16 = v45;
  --*v10;
  if (v14 == 21)
  {
    if (!*(void *)PG_exception_stack())
    {
      int v37 = (_DWORD *)whereToSendOutput();
      if (*v37 == 2) {
        *int v37 = 0;
      }
    }
    fflush((FILE *)*MEMORY[0x1E4F143D8]);
    fflush((FILE *)*MEMORY[0x1E4F143C8]);
    proc_exit(1, v38, v39, v40, v41, v42, v43, v44);
  }
  if (v14 >= 22) {
    errfinish_cold_2();
  }
  size_t result = (_DWORD *)InterruptPending();
  if (*result)
  {
    return (_DWORD *)ProcessInterrupts();
  }
  return result;
}

uint64_t closure #2 in group(changes:by:metadata:aggregationFunctions:resultColumns:having:expressionEvaluator:)(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v409 = a7;
  uint64_t v432 = a6;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  uint64_t v16 = MEMORY[0x1F4188790](v15 - 8);
  v388 = (char *)&v353 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  v400 = (char *)&v353 - v18;
  uint64_t v406 = type metadata accessor for TimeZone();
  uint64_t v394 = *(void *)(v406 - 8);
  uint64_t v19 = MEMORY[0x1F4188790](v406);
  v387 = (char *)&v353 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  v399 = (char *)&v353 - v21;
  uint64_t v405 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator();
  uint64_t v393 = *(void *)(v405 - 8);
  uint64_t v22 = MEMORY[0x1F4188790](v405);
  v386 = (char *)&v353 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  v411 = (char *)&v353 - v24;
  uint64_t v404 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator();
  uint64_t v392 = *(void *)(v404 - 8);
  uint64_t v25 = MEMORY[0x1F4188790](v404);
  v385 = (char *)&v353 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  v410 = (char *)&v353 - v27;
  uint64_t v403 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator();
  uint64_t v391 = *(void *)(v403 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v403);
  v384 = (char *)&v353 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  Swift::UInt v438 = (Swift::UInt)&v353 - v30;
  uint64_t v402 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator();
  uint64_t v390 = *(void *)(v402 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v402);
  v383 = (char *)&v353 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v31);
  v398 = (char *)&v353 - v33;
  uint64_t v401 = type metadata accessor for Date.ISO8601FormatStyle();
  uint64_t v389 = *(void *)(v401 - 8);
  uint64_t v34 = MEMORY[0x1F4188790](v401);
  v382 = (char *)&v353 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v34);
  v397 = (char *)&v353 - v36;
  uint64_t v413 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v413);
  uint64_t v412 = (uint64_t)&v353 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  uint64_t v39 = MEMORY[0x1F4188790](v38 - 8);
  uint64_t v408 = (uint64_t)&v353 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v407 = (uint64_t)&v353 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  uint64_t v414 = (uint64_t)&v353 - v44;
  MEMORY[0x1F4188790](v43);
  uint64_t v415 = (uint64_t)&v353 - v45;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StorableValue)?);
  uint64_t v47 = MEMORY[0x1F4188790](v46 - 8);
  Swift::UInt v435 = (Swift::UInt)&v353 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v47);
  uint64_t v434 = (uint64_t)&v353 - v49;
  v421 = type metadata accessor for AggregationFunction.AggregationType();
  Swift::Int Description = v421[-1].Description;
  MEMORY[0x1F4188790](v421);
  v423 = (void (**)(char *, uint64_t, uint64_t))((char *)&v353 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v436 = type metadata accessor for StorableValue(0);
  uint64_t v425 = *(void *)(v436 - 8);
  uint64_t v51 = MEMORY[0x1F4188790](v436);
  v396 = (char *)&v353 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = MEMORY[0x1F4188790](v51);
  v395 = (char *)&v353 - v54;
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  uint64_t v420 = (uint64_t)&v353 - v56;
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  v419 = (char *)&v353 - v58;
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  v418 = (char *)&v353 - v60;
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  v417 = (char *)&v353 - v62;
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  uint64_t v437 = (uint64_t)&v353 - v64;
  uint64_t v65 = MEMORY[0x1F4188790](v63);
  v428 = (void (**)(char *, void, uint64_t))((char *)&v353 - v66);
  MEMORY[0x1F4188790](v65);
  v429 = (void (**)(char *, void, uint64_t))((char *)&v353 - v67);
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v69 = MEMORY[0x1F4188790](v68 - 8);
  uint64_t v433 = (uint64_t)&v353 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  v422 = (void (**)(char *, uint64_t))((char *)&v353 - v72);
  MEMORY[0x1F4188790](v71);
  v424 = (void (**)(char *, void, uint64_t))((char *)&v353 - v73);
  uint64_t v74 = type metadata accessor for AggregationEvent(0);
  uint64_t v75 = MEMORY[0x1F4188790](v74 - 8);
  v427 = (char *)&v353 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = MEMORY[0x1F4188790](v75);
  v426 = (char *)&v353 - v78;
  uint64_t v79 = MEMORY[0x1F4188790](v77);
  v430 = (void (**)(Swift::UInt, void, uint64_t))((char *)&v353 - v80);
  MEMORY[0x1F4188790](v79);
  v431 = (void (**)(char *, void, uint64_t))((char *)&v353 - v81);
  int v82 = type metadata accessor for AggregationFunction();
  MEMORY[0x1F4188790](v82);
  int v85 = (char *)&v353 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = *a2;
  if (v86 == 1)
  {
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError();
    unsigned char *v87 = 1;
    v87[64] = 6;
    return swift_willThrow();
  }
  uint64_t v381 = a5;
  uint64_t v89 = a8;
  uint64_t v379 = v86;
  uint64_t v380 = v83;
  uint64_t v90 = *((void *)a2 + 1);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t result = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14BiomeSQLParser13SQLExpressionVG_0D7Streams13StorableValueOsAE_pTg504_s12d176Streams5group33_69E06497FCCD36C7847396967BD3AC6FLL7changes2by8metadata20aggregationFunctions13resultColumns6having19expressionEvaluatorSayAA12ChangeRecordVGAM_Say0A9SQLParser13f130VGAA20QueryPlannerMetadataCSayAN19AggregationFunctionVGSayAN12ResultColumnVGAPSgAA0vR0CtKFyAA14GroupedChangesACLLVz_ALtKXEfU0_AA13hI9OAPKXEfU_AJ0fT0CAJ0wX0VTf1cn_n(a3, a4, 0, v90);
  if (v8) {
    return result;
  }
  uint64_t v91 = result;
  uint64_t v377 = v90;
  v372 = a1;
  uint64_t v92 = v381 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedAggregationMetadata;
  uint64_t v93 = specialized KeyedQueryPlannerMetadataCache.getValue(forKey:)(result);
  uint64_t v94 = 0;
  uint64_t v95 = v93;
  uint64_t v369 = v92;
  uint64_t v96 = v89;
  uint64_t v376 = v89;
  uint64_t v378 = a4;
  v371 = (void *)v91;
  if (v93)
  {
    Swift::UInt v97 = v438;
    if (*(void *)(v432 + 16) != *(void *)(v93 + 16))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      swift_allocError();
      *(void *)uint64_t v106 = v381;
      *(unsigned char *)(v106 + 64) = 9;
      swift_retain();
      return swift_willThrow();
    }
    uint64_t v98 = swift_bridgeObjectRetain();
    uint64_t v370 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay14BiomeSQLParser19AggregationFunctionVGSaySDySS0F7Streams13StorableValueOGGG_AL0H0_psAE_pTg504_s14f11SQLParser19hi18VSDySS0A7Streams13kl11OGAD0C0_ps5C389_pIgngrzo_AC_AGtAdH_psAI_pIegnrzr_TR04_s12a223Streams5group33_69E06497FCCD36C7847396967BD3AC6FLL7changes2by8metadata20aggregationFunctions13resultColumns6having19expressionEvaluatorSayAA12ChangeRecordVGAM_Say0A9SQLParser13SQLExpressionVGAA20QueryPlannerMetadataCSayAN19cd92VGSayAN12ResultColumnVGAPSgAA0vR0CtKFyAA14GroupedChangesACLLVz_ALtKXEfU0_AA0Z0_pAU_SDySSAA13fG10OGtKXEfU0_Tf3nnnpf_nTf1cn_n(v98, v95);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v99 = v432;
    int64_t v100 = *(void *)(v432 + 16);
    uint64_t v101 = MEMORY[0x1E4FBC860];
    Swift::UInt v97 = v438;
    if (v100)
    {
      *(void *)&long long v443 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v100, 0);
      v374 = *(void (**)(char *, uint64_t, ValueMetadata *))(v380 + 16);
      uint64_t v102 = v99 + ((*(unsigned __int8 *)(v380 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v380 + 80));
      uint64_t v373 = *(void *)(v380 + 72);
      uint64_t v375 = v380 + 16;
      int v103 = (void (**)(char *, ValueMetadata *))(v380 + 8);
      do
      {
        v374(v85, v102, v82);
        AggregationFunction.newAggregation()();
        (*v103)(v85, v82);
        uint64_t v101 = v443;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v101 + 16) + 1, 1);
          uint64_t v101 = v443;
        }
        unint64_t v105 = *(void *)(v101 + 16);
        unint64_t v104 = *(void *)(v101 + 24);
        if (v105 >= v104 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v104 > 1, v105 + 1, 1);
          uint64_t v101 = v443;
        }
        *(void *)(v101 + 16) = v105 + 1;
        outlined init with take of Aggregation(&v439, v101 + 40 * v105 + 32);
        v102 += v373;
        --v100;
        a4 = v378;
        Swift::UInt v97 = v438;
      }
      while (v100);
      uint64_t v96 = v376;
    }
    uint64_t v370 = v101;
    uint64_t v236 = *(void *)(v101 + 16);
    uint64_t v237 = MEMORY[0x1E4FBC860];
    if (v236)
    {
      *(void *)&long long v443 = MEMORY[0x1E4FBC860];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v238 = v370 + 32;
      do
      {
        outlined init with copy of Aggregation(v238, (uint64_t)&v439);
        uint64_t v239 = v440;
        uint64_t v240 = v441;
        __swift_project_boxed_opaque_existential_1(&v439, v440);
        uint64_t v241 = (*(uint64_t (**)(uint64_t, uint64_t))(v240 + 40))(v239, v240);
        __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v439);
        uint64_t v237 = v443;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v237 = v443;
        }
        unint64_t v242 = *(void *)(v237 + 16);
        if (v242 >= *(void *)(v237 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v237 = v443;
        }
        *(void *)(v237 + 16) = v242 + 1;
        *(void *)(v237 + 8 * v242 + 32) = v241;
        v238 += 40;
        --v236;
        uint64_t v96 = v376;
      }
      while (v236);
      Swift::UInt v97 = v438;
    }
    uint64_t v243 = (uint64_t)v371;
    specialized KeyedQueryPlannerMetadataCache.setValue(_:forKey:)(v237, (uint64_t)v371);
    swift_bridgeObjectRelease();
    uint64_t v244 = v381 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedFirstMatchingRecord;
    specialized KeyedQueryPlannerMetadataCache.getValue(forKey:)(v243);
    uint64_t v91 = v243;
    if (v245)
    {
      swift_bridgeObjectRelease();
      uint64_t v246 = *(void *)(v244 + *(int *)(type metadata accessor for KeyedFirstMatchingRecordCache(0) + 28));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Dictionary.subscript.getter(v243, v246);
      uint64_t v248 = v247;
      char v250 = v249;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v251 = 1;
      if (v248)
      {
        swift_bridgeObjectRelease();
        if ((v250 & 1) == 0) {
          char v251 = 0;
        }
      }
      Swift::UInt v97 = v438;
    }
    else
    {
      char v251 = 0;
    }
    uint64_t v253 = v377;
    swift_bridgeObjectRetain();
    specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(v379, v253, v91);
    swift_bridgeObjectRelease();
    type metadata accessor for KeyedFirstMatchingRecordCache(0);
    swift_bridgeObjectRetain();
    specialized Dictionary._Variant.updateValue(_:forKey:)(0, v253, v251, v91);
  }
  swift_bridgeObjectRelease();
  uint64_t v107 = v381 + OBJC_IVAR____TtC12BiomeStreams20QueryPlannerMetadata_keyedFirstMatchingRecord;
  specialized KeyedQueryPlannerMetadataCache.getValue(forKey:)(v91);
  uint64_t v109 = v372;
  uint64_t v353 = v107;
  if (!v108)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type SQLError and conformance SQLError();
    swift_allocError();
    *(void *)uint64_t v252 = v381;
    *(unsigned char *)(v252 + 64) = 9;
    swift_retain();
    swift_willThrow();
    return swift_bridgeObjectRelease();
  }
  uint64_t v110 = v108;
  uint64_t v111 = swift_allocObject();
  *(void *)(v111 + 16) = v110;
  uint64_t v358 = v370 + 32;
  uint64_t v357 = (long long *)&v442;
  uint64_t v356 = (uint64_t)&v443 + 8;
  uint64_t v362 = (uint64_t)&v439 + 8;
  v361 = (uint64_t (**)(uint64_t, ValueMetadata *))((char *)Description + 88);
  int v360 = 3;
  int v359 = 4;
  uint64_t v355 = (void (**)(uint64_t, ValueMetadata *))((char *)Description + 8);
  uint64_t v354 = (void (**)(uint64_t, ValueMetadata *))((char *)Description + 96);
  uint64_t v363 = v377 + 64;
  v368 = v110;
  uint64_t v112 = v370;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v367 = 0;
  uint64_t v365 = MEMORY[0x1E4FBC860];
  uint64_t v366 = v112;
  uint64_t v381 = v111;
  while (1)
  {
    unint64_t v113 = *(void *)(v112 + 16);
    if (v367 == v113)
    {
      long long v444 = 0u;
      long long v445 = 0u;
      long long v443 = 0u;
    }
    else
    {
      if (v367 >= v113) {
        goto LABEL_218;
      }
      unint64_t v114 = v367;
      int v115 = v357;
      outlined init with copy of Aggregation(v358 + 40 * v367, (uint64_t)v357);
      *(void *)&long long v443 = v114;
      outlined init with take of Aggregation(v115, v356);
      unint64_t v367 = v114 + 1;
      uint64_t v109 = v372;
    }
    outlined init with take of UUID?((uint64_t)&v443, (uint64_t)&v439, &demangling cache variable for type metadata for (offset: Int, element: Aggregation)?);
    if (!v441)
    {
      swift_bridgeObjectRelease();
      specialized KeyedQueryPlannerMetadataCache.setValue(_:forKey:)(v365, v91);
      swift_bridgeObjectRelease();
      if (!*(void *)(*v109 + 16)) {
        goto LABEL_159;
      }
      uint64_t v434 = *v109;
      Hasher.init(_seed:)();
      uint64_t v254 = (uint64_t)v371;
      Swift::UInt v435 = v371[2];
      Hasher._combine(_:)(v435);
      uint64_t v255 = *(void *)(v254 + 16);
      uint64_t v256 = (uint64_t)v419;
      if (!v255)
      {
LABEL_147:
        Swift::Int v284 = Hasher._finalize()();
        uint64_t v285 = v434;
        uint64_t v286 = -1 << *(unsigned char *)(v434 + 32);
        unint64_t v287 = v284 & ~v286;
        Swift::UInt v288 = v434 + 56;
        if (((*(void *)(v434 + 56 + ((v287 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v287) & 1) == 0) {
          goto LABEL_159;
        }
        uint64_t v289 = ~v286;
        uint64_t v433 = 0;
        Swift::UInt v438 = v434 + 56;
        uint64_t v437 = ~v286;
        uint64_t v290 = (uint64_t)v418;
        while (1)
        {
          uint64_t v291 = *(void **)(*(void *)(v285 + 48) + 8 * v287);
          if (v291[2] != v435) {
            goto LABEL_158;
          }
          uint64_t v292 = (uint64_t)v417;
          if (!v435 || v291 == v371) {
            goto LABEL_161;
          }
          uint64_t v293 = v425;
          unint64_t v294 = (*(unsigned __int8 *)(v425 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v425 + 80);
          swift_bridgeObjectRetain();
          unint64_t v295 = 0;
          uint64_t v296 = *(void *)(v293 + 72);
          while (1)
          {
            outlined init with copy of StorableValue((uint64_t)v291 + v294, v292, (void (*)(void))type metadata accessor for StorableValue);
            if (v295 >= v371[2])
            {
              __break(1u);
LABEL_223:
              __break(1u);
LABEL_224:
              __break(1u);
LABEL_225:
              __break(1u);
              goto LABEL_226;
            }
            outlined init with copy of StorableValue((uint64_t)v371 + v294, v290, (void (*)(void))type metadata accessor for StorableValue);
            char v297 = static StorableValue.== infix(_:_:)(v292, v290);
            outlined destroy of StorableValue(v290, (void (*)(void))type metadata accessor for StorableValue);
            outlined destroy of StorableValue(v292, (void (*)(void))type metadata accessor for StorableValue);
            if ((v297 & 1) == 0) {
              break;
            }
            ++v295;
            v294 += v296;
            uint64_t v96 = v376;
            uint64_t v292 = (uint64_t)v417;
            if (v435 == v295)
            {
              swift_bridgeObjectRelease();
LABEL_161:
              swift_bridgeObjectRelease();
              goto LABEL_206;
            }
          }
          swift_bridgeObjectRelease();
          uint64_t v96 = v376;
          a4 = v378;
          uint64_t v94 = v433;
          uint64_t v285 = v434;
          Swift::UInt v288 = v438;
          uint64_t v289 = v437;
LABEL_158:
          unint64_t v287 = (v287 + 1) & v289;
          if (((*(void *)(v288 + ((v287 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v287) & 1) == 0)
          {
LABEL_159:
            uint64_t v298 = swift_bridgeObjectRetain();
            LOBYTE(v204) = passesHaving #1 (payload:) in closure #2 in group(changes:by:metadata:aggregationFunctions:resultColumns:having:expressionEvaluator:)(v298, v409, v96, v381, a4);
            if (v94)
            {
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease_n();
            }
LABEL_163:
            char v299 = v204;
            uint64_t v433 = v94;
            swift_bridgeObjectRelease();
            if (v299)
            {
              Swift::String v300 = v371;
              swift_bridgeObjectRetain();
              specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v368, (uint64_t)v300);
              v368 = v300;
            }
            swift_bridgeObjectRelease();
            uint64_t v437 = *v372;
            Hasher.init(_seed:)();
            uint64_t v301 = (uint64_t)v371;
            Swift::UInt v438 = v371[2];
            Hasher._combine(_:)(v438);
            uint64_t v302 = *(void *)(v301 + 16);
            if (v302)
            {
              uint64_t v303 = (uint64_t)v371
                   + ((*(unsigned __int8 *)(v425 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v425 + 80));
              LODWORD(v432) = *MEMORY[0x1E4F27880];
              v431 = (void (**)(char *, void, uint64_t))(v390 + 104);
              LODWORD(v43errstart(20, 0) = *MEMORY[0x1E4F27878];
              v429 = (void (**)(char *, void, uint64_t))(v391 + 104);
              LODWORD(v42_Block_object_dispose(&a9, 8) = *MEMORY[0x1E4F27888];
              v427 = (char *)(v392 + 104);
              LODWORD(v426) = *MEMORY[0x1E4F27890];
              v424 = (void (**)(char *, void, uint64_t))(v393 + 104);
              v423 = (void (**)(char *, uint64_t, uint64_t))(v394 + 32);
              v422 = (void (**)(char *, uint64_t))(v389 + 8);
              Swift::UInt v304 = *(void *)(v425 + 72);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v305 = (uint64_t)v396;
              uint64_t v306 = (uint64_t)v395;
              Swift::UInt v435 = v304;
              while (2)
              {
                outlined init with copy of StorableValue(v303, v306, (void (*)(void))type metadata accessor for StorableValue);
                outlined init with copy of StorableValue(v306, v305, (void (*)(void))type metadata accessor for StorableValue);
                switch(swift_getEnumCaseMultiPayload())
                {
                  case 1u:
                    if (*(unsigned char *)(v305 + 8))
                    {
                      *(void *)&long long v443 = *(void *)v305;
                      BYTE8(v443) = 1;
                      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
                      goto LABEL_172;
                    }
                    double v322 = floor(*(double *)v305);
                    if ((~*(void *)&v322 & 0x7FF0000000000000) == 0) {
                      goto LABEL_228;
                    }
                    if (v322 <= -9.22337204e18) {
                      goto LABEL_229;
                    }
                    if (v322 >= 9.22337204e18) {
                      goto LABEL_230;
                    }
                    Int.hashValue.getter();
                    Swift::UInt v323 = Int.hashValue.getter();
                    Hasher._combine(_:)(v323);
                    uint64_t v305 = (uint64_t)v396;
                    uint64_t v306 = (uint64_t)v395;
                    Swift::UInt v304 = v435;
                    goto LABEL_187;
                  case 2u:
                    uint64_t v311 = v407;
                    outlined init with take of UUID?(v305, v407, (uint64_t *)&demangling cache variable for type metadata for Date?);
                    uint64_t v312 = v311;
                    uint64_t v313 = v408;
                    outlined init with copy of Date?(v312, v408, (uint64_t *)&demangling cache variable for type metadata for Date?);
                    uint64_t v314 = type metadata accessor for Date();
                    if (__swift_getEnumTagSinglePayload(v313, 1, v314) == 1)
                    {
                      outlined destroy of UUID?(v408, (uint64_t *)&demangling cache variable for type metadata for Date?);
                      Hasher._combine(_:)(0);
                    }
                    else
                    {
                      uint64_t v434 = v314;
                      (*v431)(v383, v432, v402);
                      (*v429)(v384, v430, v403);
                      (*(void (**)(char *, void, uint64_t))v427)(v385, v428, v404);
                      (*v424)(v386, v426, v405);
                      uint64_t v324 = (uint64_t)v388;
                      TimeZone.init(secondsFromGMT:)();
                      uint64_t v325 = v406;
                      if (__swift_getEnumTagSinglePayload(v324, 1, v406) == 1) {
                        goto LABEL_232;
                      }
                      (*v423)(v387, v324, v325);
                      uint64_t v326 = v382;
                      Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
                      uint64_t v327 = v408;
                      Date.ISO8601Format(_:)();
                      (*v422)(v326, v401);
                      (*(void (**)(uint64_t))(*(void *)(v434 - 8) + 8))(v327);
                      Swift::UInt v328 = String.hashValue.getter();
                      swift_bridgeObjectRelease();
                      Hasher._combine(_:)(1u);
                      Hasher._combine(_:)(v328);
                      uint64_t v305 = (uint64_t)v396;
                      uint64_t v306 = (uint64_t)v395;
                      Swift::UInt v304 = v435;
                    }
                    uint64_t v320 = v407;
                    uint64_t v321 = (uint64_t *)&demangling cache variable for type metadata for Date?;
LABEL_186:
                    outlined destroy of UUID?(v320, v321);
LABEL_187:
                    outlined destroy of StorableValue(v306, (void (*)(void))type metadata accessor for StorableValue);
                    v303 += v304;
                    if (!--v302) {
                      goto LABEL_192;
                    }
                    continue;
                  case 3u:
                  case 4u:
                    uint64_t v307 = *(void *)(v305 + 8);
                    *(void *)&long long v443 = *(void *)v305;
                    *((void *)&v443 + 1) = v307;
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
                    uint64_t v308 = Optional<A>.hashValue.getter();
                    swift_bridgeObjectRelease();
                    Swift::UInt v309 = v308;
                    goto LABEL_178;
                  case 5u:
                    unint64_t v316 = *(void *)(v305 + 8);
                    *(void *)&long long v443 = *(void *)v305;
                    uint64_t v315 = v443;
                    *((void *)&v443 + 1) = v316;
                    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
                    lazy protocol witness table accessor for type Data and conformance Data();
                    Swift::UInt v304 = v435;
                    Swift::UInt v317 = Optional<A>.hashValue.getter();
                    Hasher._combine(_:)(v317);
                    outlined consume of Data?(v315, v316);
                    goto LABEL_187;
                  case 6u:
                    uint64_t v318 = v412;
                    outlined init with take of UUID?(v305, v412, (uint64_t *)&demangling cache variable for type metadata for UUID?);
                    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
                    Swift::UInt v319 = Optional<A>.hashValue.getter();
                    Hasher._combine(_:)(v319);
                    uint64_t v320 = v318;
                    uint64_t v321 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
                    goto LABEL_186;
                  case 7u:
                    Swift::UInt v309 = 0;
                    goto LABEL_178;
                  default:
                    char v310 = *(unsigned char *)(v305 + 8);
                    *(void *)&long long v443 = *(void *)v305;
                    BYTE8(v443) = v310;
                    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
LABEL_172:
                    Swift::UInt v309 = Optional<A>.hashValue.getter();
LABEL_178:
                    Hasher._combine(_:)(v309);
                    goto LABEL_187;
                }
              }
            }
            goto LABEL_191;
          }
        }
      }
      uint64_t v257 = (uint64_t)v371
           + ((*(unsigned __int8 *)(v425 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v425 + 80));
      uint64_t v432 = v390 + 104;
      LODWORD(v431) = *MEMORY[0x1E4F27880];
      v430 = (void (**)(Swift::UInt, void, uint64_t))(v391 + 104);
      LODWORD(v429) = *MEMORY[0x1E4F27878];
      v428 = (void (**)(char *, void, uint64_t))(v392 + 104);
      v427 = (char *)(v393 + 104);
      v423 = (void (**)(char *, uint64_t, uint64_t))(v394 + 32);
      LODWORD(v426) = *MEMORY[0x1E4F27888];
      v422 = (void (**)(char *, uint64_t))(v389 + 8);
      LODWORD(v424) = *MEMORY[0x1E4F27890];
      uint64_t v437 = *(void *)(v425 + 72);
      while (1)
      {
        outlined init with copy of StorableValue(v257, v256, (void (*)(void))type metadata accessor for StorableValue);
        outlined init with copy of StorableValue(v256, v420, (void (*)(void))type metadata accessor for StorableValue);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v256 = (uint64_t)v419;
        switch(EnumCaseMultiPayload)
        {
          case 1:
            if (*(unsigned char *)(v420 + 8))
            {
              *(void *)&long long v443 = *(void *)v420;
              BYTE8(v443) = 1;
              __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
LABEL_129:
              Swift::UInt v260 = Optional<A>.hashValue.getter();
            }
            else
            {
              double v277 = floor(*(double *)v420);
              if ((~*(void *)&v277 & 0x7FF0000000000000) == 0) {
                goto LABEL_225;
              }
              if (v277 <= -9.22337204e18)
              {
LABEL_226:
                __break(1u);
LABEL_227:
                __break(1u);
LABEL_228:
                __break(1u);
LABEL_229:
                __break(1u);
LABEL_230:
                __break(1u);
LABEL_231:
                __break(1u);
LABEL_232:
                __break(1u);
LABEL_233:
                uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                return result;
              }
              if (v277 >= 9.22337204e18) {
                goto LABEL_227;
              }
              Int.hashValue.getter();
              Swift::UInt v260 = Int.hashValue.getter();
            }
LABEL_141:
            Hasher._combine(_:)(v260);
LABEL_146:
            outlined destroy of StorableValue(v256, (void (*)(void))type metadata accessor for StorableValue);
            v257 += v437;
            if (!--v255) {
              goto LABEL_147;
            }
            break;
          case 2:
            uint64_t v261 = v415;
            outlined init with take of UUID?(v420, v415, (uint64_t *)&demangling cache variable for type metadata for Date?);
            uint64_t v262 = v414;
            outlined init with copy of Date?(v261, v414, (uint64_t *)&demangling cache variable for type metadata for Date?);
            uint64_t v263 = type metadata accessor for Date();
            if (__swift_getEnumTagSinglePayload(v262, 1, v263) == 1)
            {
              outlined destroy of UUID?(v262, (uint64_t *)&demangling cache variable for type metadata for Date?);
              double v264 = (uint64_t *)&demangling cache variable for type metadata for Date?;
              Hasher._combine(_:)(0);
              a4 = v378;
            }
            else
            {
              (*(void (**)(char *, void, uint64_t))v432)(v398, v431, v402);
              (*v430)(v97, v429, v403);
              (*v428)(v410, v426, v404);
              (*(void (**)(char *, void, uint64_t))v427)(v411, v424, v405);
              uint64_t v278 = (uint64_t)v400;
              TimeZone.init(secondsFromGMT:)();
              uint64_t v279 = v406;
              if (__swift_getEnumTagSinglePayload(v278, 1, v406) == 1) {
                goto LABEL_231;
              }
              (*v423)(v399, v278, v279);
              uint64_t v280 = v397;
              Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)();
              uint64_t v281 = v414;
              Date.ISO8601Format(_:)();
              (*v422)(v280, v401);
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v263 - 8) + 8))(v281, v263);
              uint64_t v282 = String.hashValue.getter();
              swift_bridgeObjectRelease();
              Hasher._combine(_:)(1u);
              Swift::UInt v283 = v282;
              Swift::UInt v97 = v438;
              Hasher._combine(_:)(v283);
              uint64_t v96 = v376;
              a4 = v378;
              uint64_t v256 = (uint64_t)v419;
              double v264 = (uint64_t *)&demangling cache variable for type metadata for Date?;
            }
            uint64_t v276 = v415;
LABEL_145:
            outlined destroy of UUID?(v276, v264);
            goto LABEL_146;
          case 3:
            uint64_t v265 = *(void *)(v420 + 8);
            *(void *)&long long v443 = *(void *)v420;
            *((void *)&v443 + 1) = v265;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            uint64_t v266 = Optional<A>.hashValue.getter();
            a4 = v378;
            swift_bridgeObjectRelease();
            Swift::UInt v260 = v266;
            uint64_t v96 = v376;
            goto LABEL_141;
          case 4:
            uint64_t v267 = *(void *)(v420 + 8);
            *(void *)&long long v443 = *(void *)v420;
            *((void *)&v443 + 1) = v267;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            uint64_t v268 = Optional<A>.hashValue.getter();
            uint64_t v96 = v376;
            swift_bridgeObjectRelease();
            Swift::UInt v260 = v268;
            a4 = v378;
            goto LABEL_141;
          case 5:
            unint64_t v270 = *(void *)(v420 + 8);
            *(void *)&long long v443 = *(void *)v420;
            uint64_t v269 = v443;
            *((void *)&v443 + 1) = v270;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
            lazy protocol witness table accessor for type Data and conformance Data();
            Swift::UInt v97 = v438;
            Swift::UInt v271 = Optional<A>.hashValue.getter();
            Hasher._combine(_:)(v271);
            uint64_t v272 = v269;
            uint64_t v96 = v376;
            unint64_t v273 = v270;
            a4 = v378;
            outlined consume of Data?(v272, v273);
            goto LABEL_146;
          case 6:
            uint64_t v274 = v412;
            double v264 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
            outlined init with take of UUID?(v420, v412, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
            Swift::UInt v275 = Optional<A>.hashValue.getter();
            Hasher._combine(_:)(v275);
            uint64_t v276 = v274;
            uint64_t v256 = (uint64_t)v419;
            goto LABEL_145;
          case 7:
            Swift::UInt v260 = 0;
            goto LABEL_141;
          default:
            char v259 = *(unsigned char *)(v420 + 8);
            *(void *)&long long v443 = *(void *)v420;
            BYTE8(v443) = v259;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
            goto LABEL_129;
        }
      }
    }
    unint64_t v116 = v439;
    if ((v439 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_212:
      __break(1u);
LABEL_213:
      __break(1u);
LABEL_214:
      __break(1u);
LABEL_215:
      __break(1u);
LABEL_216:
      __break(1u);
LABEL_217:
      __break(1u);
LABEL_218:
      __break(1u);
LABEL_219:
      __break(1u);
LABEL_220:
      __break(1u);
      goto LABEL_221;
    }
    uint64_t v117 = v366;
    if ((unint64_t)v439 >= *(void *)(v366 + 16)) {
      goto LABEL_212;
    }
    outlined init with copy of Aggregation(v366 + 40 * v439 + 32, (uint64_t)&v443);
    uint64_t v118 = *((void *)&v444 + 1);
    uint64_t v119 = v445;
    __swift_project_boxed_opaque_existential_1(&v443, *((uint64_t *)&v444 + 1));
    uint64_t v373 = (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 8))(v118, v119);
    uint64_t v121 = v120;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v443);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew()();
      uint64_t v117 = v233;
    }
    uint64_t v375 = v121;
    if (v116 >= *(void *)(v117 + 16)) {
      goto LABEL_213;
    }
    unint64_t v122 = v117 + 40 * v116;
    uint64_t v123 = v122 + 32;
    uint64_t v124 = *(void *)(v122 + 56);
    uint64_t v125 = *(void *)(v122 + 64);
    __swift_mutable_project_boxed_opaque_existential_1(v122 + 32, v124);
    unint64_t v126 = v116;
    uint64_t v127 = (uint64_t)v426;
    uint64_t v128 = (uint64_t)v427;
    (*(void (**)(char *, char *, void, uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 32))(v426, v427, 0, v377, v378, v124, v125);
    outlined init with take of StorableValue(v127, (uint64_t)v431, (void (*)(void))type metadata accessor for AggregationEvent);
    outlined init with take of StorableValue(v128, (uint64_t)v430, (void (*)(void))type metadata accessor for AggregationEvent);
    uint64_t v366 = v117;
    if (v126 >= *(void *)(v117 + 16)) {
      goto LABEL_214;
    }
    outlined init with copy of Aggregation(v123, (uint64_t)&v443);
    uint64_t v129 = *((void *)&v444 + 1);
    uint64_t v130 = v445;
    __swift_project_boxed_opaque_existential_1(&v443, *((uint64_t *)&v444 + 1));
    uint64_t v131 = (*(uint64_t (**)(uint64_t, uint64_t))(v130 + 40))(v129, v130);
    Swift::UInt v97 = v438;
    uint64_t v96 = v376;
    uint64_t v132 = v131;
    uint64_t v133 = v365;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v133 = v234;
    }
    unint64_t v135 = *(void *)(v133 + 16);
    unint64_t v134 = *(void *)(v133 + 24);
    unint64_t v364 = v126;
    if (v135 >= v134 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v133 = v235;
    }
    *(void *)(v133 + 16) = v135 + 1;
    uint64_t v365 = v133;
    *(void *)(v133 + 8 * v135 + 32) = v132;
    __swift_destroy_boxed_opaque_existential_1Tm((uint64_t)&v443);
    outlined init with copy of StorableValue((uint64_t)v431, (uint64_t)v429, (void (*)(void))type metadata accessor for StorableValue);
    uint64_t v136 = v368;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v443 = v136;
    unint64_t v138 = specialized __RawDictionaryStorage.find<A>(_:)(v373, v375);
    uint64_t v140 = v136[2];
    BOOL v141 = (v139 & 1) == 0;
    Swift::Int v142 = v140 + v141;
    if (__OFADD__(v140, v141)) {
      goto LABEL_215;
    }
    unint64_t v143 = v138;
    char v144 = v139;
    v374 = (void (*)(char *, uint64_t, ValueMetadata *))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
    Swift::Bool v145 = _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v142);
    uint64_t v91 = (uint64_t)v371;
    if (v145)
    {
      unint64_t v146 = specialized __RawDictionaryStorage.find<A>(_:)(v373, v375);
      if ((v144 & 1) != (v147 & 1)) {
        goto LABEL_233;
      }
      unint64_t v143 = v146;
    }
    v368 = (void *)v443;
    if (v144)
    {
      uint64_t v148 = *(void *)(v443 + 56);
      uint64_t v149 = v443;
      Swift::Int Description = *(void **)(v425 + 72);
      unint64_t v150 = (void)Description * v143;
      uint64_t v151 = (void (**)(void, void, void))v424;
      outlined init with take of StorableValue(v148 + (void)Description * v143, (uint64_t)v424, (void (*)(void))type metadata accessor for StorableValue);
      outlined init with take of StorableValue((uint64_t)v429, *(void *)(v149 + 56) + v150, (void (*)(void))type metadata accessor for StorableValue);
      __swift_storeEnumTagSinglePayload((uint64_t)v151, 0, 1, v436);
      uint64_t v152 = v381;
      uint64_t v153 = v375;
    }
    else
    {
      *(void *)(v443 + 8 * (v143 >> 6) + 64) |= 1 << v143;
      uint64_t v154 = (void *)(v368[6] + 16 * v143);
      uint64_t v153 = v375;
      *uint64_t v154 = v373;
      v154[1] = v153;
      uint64_t v155 = v368[7];
      Swift::Int Description = *(void **)(v425 + 72);
      outlined init with take of StorableValue((uint64_t)v429, v155 + (void)Description * v143, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v156 = v368[2];
      BOOL v157 = __OFADD__(v156, 1);
      uint64_t v158 = v156 + 1;
      if (v157) {
        goto LABEL_219;
      }
      v368[2] = v158;
      uint64_t v151 = (void (**)(void, void, void))v424;
      __swift_storeEnumTagSinglePayload((uint64_t)v424, 1, 1, v436);
      swift_bridgeObjectRetain();
      uint64_t v152 = v381;
    }
    swift_bridgeObjectRelease();
    outlined destroy of UUID?((uint64_t)v151, &demangling cache variable for type metadata for StorableValue?);
    outlined init with copy of StorableValue((uint64_t)v430, (uint64_t)v428, (void (*)(void))type metadata accessor for StorableValue);
    char v159 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v443 = *(void *)(v152 + 16);
    uint64_t v160 = v443;
    *(void *)(v152 + 16) = 0x8000000000000000;
    unint64_t v161 = specialized __RawDictionaryStorage.find<A>(_:)(v373, v153);
    char v163 = v162;
    uint64_t v164 = *(void *)(v160 + 16);
    BOOL v165 = (v162 & 1) == 0;
    if (__OFADD__(v164, v165)) {
      goto LABEL_216;
    }
    unint64_t v166 = v161;
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v159, v164 + v165))
    {
      unint64_t v167 = specialized __RawDictionaryStorage.find<A>(_:)(v373, v375);
      if ((v163 & 1) != (v168 & 1)) {
        goto LABEL_233;
      }
      unint64_t v166 = v167;
    }
    uint64_t v169 = (void *)v443;
    if (v163)
    {
      unint64_t v170 = (void)Description * v166;
      uint64_t v171 = v422;
      outlined init with take of StorableValue(*(void *)(v443 + 56) + (void)Description * v166, (uint64_t)v422, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v172 = v169[7] + v170;
      uint64_t v173 = v171;
      outlined init with take of StorableValue((uint64_t)v428, v172, (void (*)(void))type metadata accessor for StorableValue);
      __swift_storeEnumTagSinglePayload((uint64_t)v171, 0, 1, v436);
      uint64_t v174 = v381;
      uint64_t v175 = (uint64_t)v423;
    }
    else
    {
      *(void *)(v443 + 8 * (v166 >> 6) + 64) |= 1 << v166;
      uint64_t v176 = (void *)(v169[6] + 16 * v166);
      uint64_t v177 = v375;
      *uint64_t v176 = v373;
      v176[1] = v177;
      outlined init with take of StorableValue((uint64_t)v428, v169[7] + (void)Description * v166, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v178 = v169[2];
      BOOL v157 = __OFADD__(v178, 1);
      uint64_t v179 = v178 + 1;
      if (v157) {
        goto LABEL_220;
      }
      v169[2] = v179;
      uint64_t v173 = v422;
      __swift_storeEnumTagSinglePayload((uint64_t)v422, 1, 1, v436);
      swift_bridgeObjectRetain();
      uint64_t v174 = v381;
      uint64_t v175 = (uint64_t)v423;
    }
    *(void *)(v174 + 16) = v169;
    swift_bridgeObjectRelease();
    outlined destroy of UUID?((uint64_t)v173, &demangling cache variable for type metadata for StorableValue?);
    swift_bridgeObjectRelease();
    if (v364 >= *(void *)(v432 + 16)) {
      goto LABEL_217;
    }
    AggregationFunction.aggregationType.getter(v175);
    uint64_t v180 = v421;
    int v181 = (*v361)(v175, v421);
    BOOL v182 = v181 == v360 || v181 == v359;
    a4 = v378;
    if (!v182)
    {
      outlined destroy of StorableValue((uint64_t)v430, (void (*)(void))type metadata accessor for AggregationEvent);
      outlined destroy of StorableValue((uint64_t)v431, (void (*)(void))type metadata accessor for AggregationEvent);
      (*v355)(v175, v180);
      goto LABEL_103;
    }
    (*v354)(v175, v180);
    uint64_t v183 = type metadata accessor for SQLExpression();
    (*((void (**)(uint64_t, ValueMetadata *))v183[-1].Description + 1))(v175, v183);
    uint64_t v184 = (void (**)(void, void, void))v431;
    uint64_t v185 = v430;
    if ((static StorableValue.== infix(_:_:)((uint64_t)v431, (uint64_t)v430) & 1) == 0) {
      break;
    }
    outlined destroy of StorableValue((uint64_t)v185, (void (*)(void))type metadata accessor for AggregationEvent);
    outlined destroy of StorableValue((uint64_t)v184, (void (*)(void))type metadata accessor for AggregationEvent);
LABEL_103:
    __swift_destroy_boxed_opaque_existential_1Tm(v362);
    uint64_t v109 = v372;
    uint64_t v112 = v370;
  }
  uint64_t v186 = v353;
  specialized KeyedQueryPlannerMetadataCache.getValue(forKey:)(v91);
  if (v187)
  {
    swift_bridgeObjectRelease();
    uint64_t v188 = *(void *)(v186 + *(int *)(type metadata accessor for KeyedFirstMatchingRecordCache(0) + 28));
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.getter(v91, v188);
    uint64_t v190 = v189;
    char v192 = v191;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v193 = v377;
    char v194 = 1;
    if (v190)
    {
      swift_bridgeObjectRelease();
      if ((v192 & 1) == 0) {
        char v194 = 0;
      }
    }
  }
  else
  {
    char v194 = 0;
    uint64_t v193 = v377;
  }
  swift_bridgeObjectRetain();
  specialized KeyedQueryPlannerMetadataCache.updateCache(_:forKey:)(v379, v193, v91);
  swift_bridgeObjectRelease();
  type metadata accessor for KeyedFirstMatchingRecordCache(0);
  swift_bridgeObjectRetain();
  specialized Dictionary._Variant.updateValue(_:forKey:)(0, v193, v194, v91);
  swift_bridgeObjectRelease();
  uint64_t v195 = 1 << *(unsigned char *)(v193 + 32);
  if (v195 < 64) {
    uint64_t v196 = ~(-1 << v195);
  }
  else {
    uint64_t v196 = -1;
  }
  unint64_t v197 = v196 & *(void *)(v193 + 64);
  uint64_t v373 = (unint64_t)(v195 + 63) >> 6;
  unint64_t v364 = v373 - 1;
  swift_bridgeObjectRetain();
  uint64_t v375 = 0;
  uint64_t v198 = (void *)v435;
  if (!v197)
  {
LABEL_83:
    uint64_t v227 = v375 + 1;
    if (__OFADD__(v375, 1)) {
      goto LABEL_190;
    }
    if (v227 < v373)
    {
      unint64_t v228 = *(void *)(v363 + 8 * v227);
      if (v228)
      {
LABEL_86:
        unint64_t v197 = (v228 - 1) & v228;
        uint64_t v221 = __clz(__rbit64(v228)) + (v227 << 6);
        uint64_t v375 = v227;
        goto LABEL_82;
      }
      uint64_t v229 = v375 + 2;
      ++v375;
      if (v227 + 1 < v373)
      {
        unint64_t v228 = *(void *)(v363 + 8 * v229);
        if (v228)
        {
LABEL_89:
          uint64_t v227 = v229;
          goto LABEL_86;
        }
        uint64_t v375 = v227 + 1;
        if (v227 + 2 < v373)
        {
          unint64_t v228 = *(void *)(v363 + 8 * (v227 + 2));
          if (v228)
          {
            v227 += 2;
            goto LABEL_86;
          }
          uint64_t v229 = v227 + 3;
          uint64_t v375 = v227 + 2;
          if (v227 + 3 < v373)
          {
            unint64_t v228 = *(void *)(v363 + 8 * v229);
            if (v228) {
              goto LABEL_89;
            }
            while (1)
            {
              uint64_t v227 = v229 + 1;
              if (__OFADD__(v229, 1)) {
                goto LABEL_223;
              }
              if (v227 >= v373) {
                break;
              }
              unint64_t v228 = *(void *)(v363 + 8 * v227);
              ++v229;
              if (v228) {
                goto LABEL_86;
              }
            }
            uint64_t v375 = v364;
          }
        }
      }
    }
    uint64_t v230 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StorableValue));
    __swift_storeEnumTagSinglePayload((uint64_t)v198, 1, 1, v230);
    unint64_t v197 = 0;
    goto LABEL_101;
  }
  while (2)
  {
    unint64_t v220 = __clz(__rbit64(v197));
    v197 &= v197 - 1;
    uint64_t v221 = v220 | (v375 << 6);
LABEL_82:
    uint64_t v222 = *(void *)(v377 + 56);
    uint64_t v223 = (void *)(*(void *)(v377 + 48) + 16 * v221);
    uint64_t v224 = v223[1];
    *uint64_t v198 = *v223;
    v198[1] = v224;
    uint64_t v225 = v222 + (void)Description * v221;
    uint64_t v226 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StorableValue));
    outlined init with copy of StorableValue(v225, (uint64_t)v198 + *(int *)(v226 + 48), (void (*)(void))type metadata accessor for StorableValue);
    __swift_storeEnumTagSinglePayload((uint64_t)v198, 0, 1, v226);
    swift_bridgeObjectRetain();
LABEL_101:
    char v231 = (uint64_t *)v434;
    outlined init with take of UUID?((uint64_t)v198, v434, &demangling cache variable for type metadata for (key: String, value: StorableValue)?);
    uint64_t v232 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: StorableValue));
    if (__swift_getEnumTagSinglePayload((uint64_t)v231, 1, v232) == 1)
    {
      swift_release();
      outlined destroy of StorableValue((uint64_t)v430, (void (*)(void))type metadata accessor for AggregationEvent);
      outlined destroy of StorableValue((uint64_t)v431, (void (*)(void))type metadata accessor for AggregationEvent);
      uint64_t v96 = v376;
      uint64_t v91 = (uint64_t)v371;
      goto LABEL_103;
    }
    uint64_t v199 = *v231;
    uint64_t v200 = v231[1];
    outlined init with take of StorableValue((uint64_t)v231 + *(int *)(v232 + 48), v437, (void (*)(void))type metadata accessor for StorableValue);
    uint64_t v201 = v381;
    char v202 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v443 = *(void *)(v201 + 16);
    uint64_t v203 = v443;
    *(void *)(v201 + 16) = 0x8000000000000000;
    unint64_t v204 = specialized __RawDictionaryStorage.find<A>(_:)(v199, v200);
    char v206 = v205;
    uint64_t v207 = *(void *)(v203 + 16);
    BOOL v208 = (v205 & 1) == 0;
    if (__OFADD__(v207, v208))
    {
      __break(1u);
      goto LABEL_163;
    }
    unint64_t v209 = v204;
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v202, v207 + v208))
    {
      unint64_t v210 = specialized __RawDictionaryStorage.find<A>(_:)(v199, v200);
      if ((v206 & 1) != (v211 & 1)) {
        goto LABEL_233;
      }
      unint64_t v209 = v210;
    }
    unint64_t v212 = (void *)v443;
    if (v206)
    {
      unint64_t v213 = (void)Description * v209;
      uint64_t v214 = *(void *)(v443 + 56) + (void)Description * v209;
      uint64_t v215 = v433;
      outlined init with take of StorableValue(v214, v433, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v216 = v215;
      outlined init with take of StorableValue(v437, v212[7] + v213, (void (*)(void))type metadata accessor for StorableValue);
      __swift_storeEnumTagSinglePayload(v215, 0, 1, v436);
      goto LABEL_80;
    }
    *(void *)(v443 + 8 * (v209 >> 6) + 64) |= 1 << v209;
    long long v217 = (uint64_t *)(v212[6] + 16 * v209);
    *long long v217 = v199;
    v217[1] = v200;
    outlined init with take of StorableValue(v437, v212[7] + (void)Description * v209, (void (*)(void))type metadata accessor for StorableValue);
    uint64_t v218 = v212[2];
    BOOL v157 = __OFADD__(v218, 1);
    uint64_t v219 = v218 + 1;
    if (!v157)
    {
      v212[2] = v219;
      uint64_t v216 = v433;
      __swift_storeEnumTagSinglePayload(v433, 1, 1, v436);
      swift_bridgeObjectRetain();
LABEL_80:
      uint64_t v198 = (void *)v435;
      *(void *)(v381 + 16) = v212;
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v216, &demangling cache variable for type metadata for StorableValue?);
      swift_bridgeObjectRelease();
      Swift::UInt v97 = v438;
      if (!v197) {
        goto LABEL_83;
      }
      continue;
    }
    break;
  }
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
LABEL_192:
  Swift::Int v329 = Hasher._finalize()();
  uint64_t v330 = -1 << *(unsigned char *)(v437 + 32);
  unint64_t v331 = v329 & ~v330;
  uint64_t v436 = v437 + 56;
  if ((*(void *)(v437 + 56 + ((v331 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v331))
  {
    Swift::UInt v332 = ~v330;
    Swift::UInt v435 = ~v330;
    uint64_t v333 = (uint64_t)v417;
    uint64_t v334 = (uint64_t)v418;
    while (1)
    {
      uint64_t v335 = *(void **)(*(void *)(v437 + 48) + 8 * v331);
      if (v335[2] == v438) {
        break;
      }
LABEL_203:
      unint64_t v331 = (v331 + 1) & v332;
      if (((*(void *)(v436 + ((v331 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v331) & 1) == 0) {
        goto LABEL_204;
      }
    }
    if (v438)
    {
      uint64_t v336 = (uint64_t)v371;
      if (v335 != v371)
      {
        uint64_t v337 = v425;
        unint64_t v338 = (*(unsigned __int8 *)(v425 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v425 + 80);
        swift_bridgeObjectRetain();
        unint64_t v339 = 0;
        uint64_t v340 = *(void *)(v337 + 72);
        while (1)
        {
          outlined init with copy of StorableValue((uint64_t)v335 + v338, v333, (void (*)(void))type metadata accessor for StorableValue);
          if (v339 >= *(void *)(v336 + 16)) {
            goto LABEL_224;
          }
          outlined init with copy of StorableValue(v336 + v338, v334, (void (*)(void))type metadata accessor for StorableValue);
          char v341 = static StorableValue.== infix(_:_:)(v333, v334);
          outlined destroy of StorableValue(v334, (void (*)(void))type metadata accessor for StorableValue);
          outlined destroy of StorableValue(v333, (void (*)(void))type metadata accessor for StorableValue);
          if ((v341 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            Swift::UInt v332 = v435;
            goto LABEL_203;
          }
          ++v339;
          v338 += v340;
          uint64_t v336 = (uint64_t)v371;
          if (v438 == v339)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_205;
          }
        }
      }
    }
LABEL_221:
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_204:
    swift_bridgeObjectRelease();
    uint64_t v342 = v372;
    swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v439 = *v342;
    *uint64_t v342 = 0x8000000000000000;
    uint64_t v343 = swift_bridgeObjectRetain();
    specialized _NativeSet.insertNew(_:at:isUnique:)(v343, v331);
    *uint64_t v342 = v439;
    swift_bridgeObjectRelease();
  }
LABEL_205:
  swift_bridgeObjectRelease();
  uint64_t v96 = v376;
LABEL_206:
  uint64_t v344 = v378;
  uint64_t v345 = v409;
  uint64_t v346 = v433;
  uint64_t v347 = v381;
  uint64_t v348 = swift_bridgeObjectRetain();
  char v349 = passesHaving #1 (payload:) in closure #2 in group(changes:by:metadata:aggregationFunctions:resultColumns:having:expressionEvaluator:)(v348, v345, v96, v347, v344);
  if (v346)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v350 = v349;
    swift_bridgeObjectRelease();
    if (v350)
    {
      uint64_t v351 = swift_bridgeObjectRetain();
      specialized Dictionary._Variant.setValue(_:forKey:)(v351, (uint64_t)v371);
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      uint64_t v352 = specialized Dictionary._Variant.removeValue(forKey:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      v371 = (void *)v352;
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of Aggregation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for COUNT_STAR(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    size_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SQLDataType();
    uint64_t v12 = (void (*)(char *, char *, ValueMetadata *))*((void *)v11[-1].Description + 2);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2)
{
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_31_0();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, v5);
  *uint64_t v2 = v7;

  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  specialized __RawDictionaryStorage.find<A>(_:)();
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  Swift::Int v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], [String : StorableValue]>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a3 & 1, v13)) {
    goto LABEL_5;
  }
  specialized __RawDictionaryStorage.find<A>(_:)();
  if ((v15 & 1) != (v17 & 1))
  {
LABEL_11:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v16;
LABEL_5:
  uint64_t v18 = *v4;
  if (v15)
  {
    uint64_t v19 = v18[7];
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v19 + 8 * v14) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a1, v18);
    return swift_bridgeObjectRetain();
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(void *)(a4[6] + 8 * result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  BOOL v5 = __OFADD__(v4, 1);
  uint64_t v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t passesHaving #1 (payload:) in closure #2 in group(changes:by:metadata:aggregationFunctions:resultColumns:having:expressionEvaluator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v100 = a5;
  uint64_t v101 = a3;
  uint64_t v116 = a1;
  uint64_t v9 = type metadata accessor for StorableValue(0);
  uint64_t v113 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v109 = (uint64_t)&v95 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v103 = (uint64_t)&v95 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v111 = (uint64_t)&v95 - v14;
  char v15 = type metadata accessor for ResultColumn();
  Swift::Int Description = (unsigned __int8 *)v15[-1].Description;
  int v115 = v15;
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v112 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v117 = (char *)&v95 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v95 - v20;
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SQLExpression?);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)&v95 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for SQLExpression();
  uint64_t v26 = v25[-1].Description;
  uint64_t v27 = MEMORY[0x1F4188790](v25);
  uint64_t v110 = (uint64_t)&v95 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v95 - v29;
  uint64_t v31 = a2;
  uint64_t v33 = v32;
  outlined init with copy of Date?(v31, (uint64_t)v24, &demangling cache variable for type metadata for SQLExpression?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v33) == 1)
  {
    outlined destroy of UUID?((uint64_t)v24, &demangling cache variable for type metadata for SQLExpression?);
    LOBYTE(v34) = 1;
    return v34 & 1;
  }
  uint64_t v99 = v26;
  uint64_t v35 = (void (*)(char *, char *, uint64_t))v26[4];
  Swift::UInt v97 = v30;
  uint64_t v108 = v33;
  v35(v30, v24, v33);
  uint64_t v36 = MEMORY[0x1E4FBC860];
  uint64_t v118 = MEMORY[0x1E4FBC860];
  uint64_t v37 = v101;
  uint64_t v38 = *(void *)(v101 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v102 = a4;
  uint64_t v98 = v6;
  if (v38)
  {
    uint64_t v96 = v9;
    uint64_t v39 = v115;
    uint64_t v40 = (void (**)(uint64_t, uint64_t))*((void *)Description + 2);
    uint64_t v41 = *((void *)Description + 9);
    unint64_t v105 = (void (**)(char *, ValueMetadata *))((Description[80] + 32) & ~(unint64_t)Description[80]);
    uint64_t v106 = v40;
    uint64_t v42 = (char *)v105 + v37;
    uint64_t v43 = (void (**)(uint64_t, char *, ValueMetadata *))(Description + 32);
    uint64_t v107 = (void (*)(char *, unint64_t, ValueMetadata *))(Description + 16);
    unint64_t v104 = (void (**)(char *, ValueMetadata *))(Description + 8);
    do
    {
      ((void (*)(char *, char *, ValueMetadata *))v106)(v21, v42, v39);
      ResultColumn.alias.getter();
      uint64_t v45 = v44;
      swift_bridgeObjectRelease();
      if (v45)
      {
        uint64_t v46 = *v43;
        (*v43)((uint64_t)v117, v21, v39);
        uint64_t v47 = v118;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v47 = v118;
        }
        unint64_t v48 = *(void *)(v47 + 16);
        if (v48 >= *(void *)(v47 + 24) >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v47 = v118;
        }
        *(void *)(v47 + 16) = v48 + 1;
        uint64_t v39 = v115;
        v46((uint64_t)v105 + v47 + v48 * v41, v117, v115);
        uint64_t v118 = v47;
      }
      else
      {
        (*v104)(v21, v39);
      }
      v42 += v41;
      --v38;
    }
    while (v38);
    uint64_t v36 = v118;
    uint64_t v6 = v98;
    a4 = v102;
    uint64_t v9 = v96;
  }
  else
  {
    uint64_t v39 = v115;
  }
  swift_bridgeObjectRelease();
  uint64_t v34 = *(void *)(v36 + 16);
  uint64_t v49 = v112;
  if (!v34)
  {
    swift_release();
LABEL_38:
    uint64_t v92 = (uint64_t)v97;
    char v93 = SQLExpressionEvaluator.evaluatesToTrue(expression:payload:)((uint64_t)v97, v116);
    if (!v6) {
      LOBYTE(v34) = v93;
    }
    ((void (*)(uint64_t, uint64_t))v99[1])(v92, v108);
    swift_bridgeObjectRelease();
    return v34 & 1;
  }
  uint64_t v50 = (void (*)(char *, unint64_t, ValueMetadata *))*((void *)Description + 2);
  unint64_t v51 = (Description[80] + 32) & ~(unint64_t)Description[80];
  uint64_t v101 = v36;
  unint64_t v52 = v36 + v51;
  uint64_t v106 = (void (**)(uint64_t, uint64_t))(v99 + 1);
  uint64_t v107 = v50;
  Description += 16;
  unint64_t v104 = (void (**)(char *, ValueMetadata *))*((void *)Description + 7);
  unint64_t v105 = (void (**)(char *, ValueMetadata *))(Description - 8);
  while (1)
  {
    v107(v49, v52, v39);
    uint64_t v53 = ResultColumn.name.getter();
    uint64_t v117 = (char *)v54;
    uint64_t v55 = v110;
    ResultColumn.expression.getter(v110);
    uint64_t v56 = SQLExpression.sql.getter();
    uint64_t v58 = v57;
    (*v106)(v55, v108);
    uint64_t v59 = *(void *)(a4 + 16);
    if (*(void *)(v59 + 16) && (unint64_t v60 = specialized __RawDictionaryStorage.find<A>(_:)(v56, v58), (v61 & 1) != 0))
    {
      uint64_t v62 = *(void *)(v59 + 56) + *(void *)(v113 + 72) * v60;
      uint64_t v63 = v111;
      outlined init with copy of StorableValue(v62, v111, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v64 = 0;
    }
    else
    {
      uint64_t v64 = 1;
      uint64_t v63 = v111;
    }
    __swift_storeEnumTagSinglePayload(v63, v64, 1, v9);
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v63, 1, v9) == 1)
    {
      outlined destroy of UUID?(v63, &demangling cache variable for type metadata for StorableValue?);
      uint64_t v65 = v116;
      swift_bridgeObjectRetain();
      unint64_t v66 = specialized __RawDictionaryStorage.find<A>(_:)(v53, (uint64_t)v117);
      char v68 = v67;
      swift_bridgeObjectRelease();
      if (v68)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v118 = v65;
        Swift::Int v70 = *(void *)(v65 + 24);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v70);
        uint64_t v71 = v118;
        swift_bridgeObjectRelease();
        uint64_t v72 = v103;
        outlined init with take of StorableValue(*(void *)(v71 + 56) + *(void *)(v113 + 72) * v66, v103, (void (*)(void))type metadata accessor for StorableValue);
        uint64_t v116 = v71;
        _NativeDictionary._delete(at:)();
        swift_bridgeObjectRelease();
        uint64_t v73 = 0;
      }
      else
      {
        uint64_t v73 = 1;
        uint64_t v72 = v103;
      }
      uint64_t v39 = v115;
      uint64_t v49 = v112;
      __swift_storeEnumTagSinglePayload(v72, v73, 1, v9);
      outlined destroy of UUID?(v72, &demangling cache variable for type metadata for StorableValue?);
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    uint64_t v74 = v9;
    outlined init with take of StorableValue(v63, v109, (void (*)(void))type metadata accessor for StorableValue);
    uint64_t v75 = v116;
    char v76 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v118 = v75;
    unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)(v53, (uint64_t)v117);
    uint64_t v79 = *(void *)(v75 + 16);
    BOOL v80 = (v78 & 1) == 0;
    Swift::Int v81 = v79 + v80;
    if (__OFADD__(v79, v80)) {
      break;
    }
    unint64_t v82 = v77;
    char v83 = v78;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v76, v81))
    {
      unint64_t v84 = specialized __RawDictionaryStorage.find<A>(_:)(v53, (uint64_t)v117);
      if ((v83 & 1) != (v85 & 1)) {
        goto LABEL_44;
      }
      unint64_t v82 = v84;
    }
    uint64_t v86 = (void *)v118;
    uint64_t v116 = v118;
    if (v83)
    {
      outlined assign with take of StorableValue(v109, *(void *)(v118 + 56) + *(void *)(v113 + 72) * v82);
    }
    else
    {
      *(void *)(v118 + 8 * (v82 >> 6) + 64) |= 1 << v82;
      unint64_t v87 = (uint64_t *)(v86[6] + 16 * v82);
      uint64_t v88 = (uint64_t)v117;
      uint64_t *v87 = v53;
      v87[1] = v88;
      outlined init with take of StorableValue(v109, v86[7] + *(void *)(v113 + 72) * v82, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t v89 = v86[2];
      BOOL v90 = __OFADD__(v89, 1);
      uint64_t v91 = v89 + 1;
      if (v90) {
        goto LABEL_43;
      }
      v86[2] = v91;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a4 = v102;
    uint64_t v9 = v74;
    uint64_t v39 = v115;
    uint64_t v49 = v112;
LABEL_35:
    (*v105)(v49, v39);
    v52 += (unint64_t)v104;
    if (!--v34)
    {
      swift_release();
      uint64_t v6 = v98;
      goto LABEL_38;
    }
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay14BiomeSQLParser13SQLExpressionVG_0D7Streams13StorableValueOsAE_pTg504_s12d176Streams5group33_69E06497FCCD36C7847396967BD3AC6FLL7changes2by8metadata20aggregationFunctions13resultColumns6having19expressionEvaluatorSayAA12ChangeRecordVGAM_Say0A9SQLParser13f130VGAA20QueryPlannerMetadataCSayAN19AggregationFunctionVGSayAN12ResultColumnVGAPSgAA0vR0CtKFyAA14GroupedChangesACLLVz_ALtKXEfU0_AA13hI9OAPKXEfU_AJ0fT0CAJ0wX0VTf1cn_n(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v6 = type metadata accessor for StorableValue(0);
  uint64_t v17 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v10 = v19;
    Swift::Int Description = type metadata accessor for SQLExpression()[-1].Description;
    uint64_t v12 = a1
        + ((*((unsigned __int8 *)Description + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)Description + 80));
    uint64_t v16 = Description[9];
    while (1)
    {
      SQLExpressionEvaluator.execute(expression:payload:)(v12, v18, v8);
      if (v4) {
        break;
      }
      uint64_t v19 = v10;
      unint64_t v13 = *(void *)(v10 + 16);
      if (v13 >= *(void *)(v10 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v10 = v19;
      }
      *(void *)(v10 + 16) = v13 + 1;
      outlined init with take of StorableValue((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(void *)(v17 + 72) * v13, (void (*)(void))type metadata accessor for StorableValue);
      v12 += v16;
      if (!--v9)
      {
        swift_release();
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v10 = MEMORY[0x1E4FBC860];
LABEL_10:
    swift_bridgeObjectRelease();
  }
  return v10;
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
}

uint64_t protocol witness for Aggregation.name.getter in conformance COUNT_STAR()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t destroy for AggregationFunction.AggregationType(uint64_t result)
{
  uint64_t v1 = result;
  unsigned int v2 = *(unsigned __int8 *)(result + 192);
  if (v2 >= 7) {
    unsigned int v2 = *(_DWORD *)result + 7;
  }
  switch(v2)
  {
    case 0u:
    case 1u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      __swift_destroy_boxed_opaque_existential_1Tm(result);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      __swift_destroy_boxed_opaque_existential_1Tm(result);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      if (*(void *)(v1 + 120))
      {
        __swift_destroy_boxed_opaque_existential_1Tm(v1 + 96);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_5:
        uint64_t result = swift_bridgeObjectRelease();
      }
      break;
    default:
      return result;
  }
  return result;
}

void protocol witness for Aggregation.processEvent(changeRecord:expressionEvaluator:) in conformance COUNT_STAR()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for MIN(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v50 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_0_4();
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = v8;
  uint64_t v11 = *(void *)(v10 + 64);
  type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v14 = v13;
  int v15 = *(_DWORD *)(v13 + 80);
  uint64_t v16 = v15;
  uint64_t v49 = v11;
  uint64_t v18 = *(void *)(v17 + 64) + 7;
  unint64_t v19 = (v18 + ((v11 + v15 + ((v9 + 16) & ~v9)) & ~(unint64_t)v15)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v51 = *(void *)(a3 + 16);
  uint64_t v20 = *(void *)(v51 - 8);
  int v21 = *(_DWORD *)(v20 + 80);
  uint64_t v22 = v21;
  unint64_t v23 = (v19 + v21 + 16) & ~(unint64_t)v21;
  if (*(_DWORD *)(v20 + 84)) {
    uint64_t v24 = *(void *)(*(void *)(v51 - 8) + 64);
  }
  else {
    uint64_t v24 = *(void *)(*(void *)(v51 - 8) + 64) + 1;
  }
  unint64_t v25 = v24 + v23;
  unint64_t v26 = v15 | (unint64_t)v8 | v21;
  int v27 = (v15 | v8 | v21) & 0x100000;
  if (v26 > 7 || v27 != 0 || v25 > 0x18)
  {
    uint64_t v30 = *a2;
    *a1 = *a2;
    uint64_t v31 = v30 + ((v26 & 0xF8 ^ 0x1F8) & (v26 + 16));
    swift_retain();
  }
  else
  {
    size_t __n = v24;
    uint64_t v48 = v12;
    uint64_t v32 = ~v16;
    uint64_t v33 = a2[1];
    *a1 = *a2;
    a1[1] = v33;
    uint64_t v34 = (char *)a2 + v9;
    uint64_t v35 = ((unint64_t)a1 + v9 + 16) & ~v9;
    uint64_t v36 = (unint64_t)(v34 + 16) & ~v9;
    uint64_t v37 = *(void (**)(uint64_t, uint64_t, ValueMetadata *))(v7 + 16);
    swift_bridgeObjectRetain();
    v37(v35, v36, v50);
    uint64_t v38 = v49 + v16;
    uint64_t v39 = (v35 + v49 + v16) & ~v16;
    uint64_t v40 = (v36 + v38) & v32;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v39, v40, v48);
    uint64_t v41 = (void *)((v18 + v39) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v42 = (void *)((v18 + v40) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v41 = *v42;
    v41[1] = v42[1];
    uint64_t v43 = (void *)(((unint64_t)v41 + v22 + 16) & ~v22);
    uint64_t v44 = (const void *)(((unint64_t)v42 + v22 + 16) & ~v22);
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v44, 1, v51))
    {
      memcpy(v43, v44, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v20 + 16))(v43, v44, v51);
      __swift_storeEnumTagSinglePayload((uint64_t)v43, 0, 1, v51);
    }
    return a1;
  }
  return (uint64_t *)v31;
}

void core_yy_switch_to_buffer(uint64_t a1, uint64_t a2)
{
  core_yyensure_buffer_stack(a2);
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8 * *(void *)(a2 + 24));
    if (v5 != a1)
    {
      if (v5)
      {
        **(unsigned char **)(a2 + 72) = *(unsigned char *)(a2 + 48);
        *(void *)(*(void *)(*(void *)(a2 + 40) + 8 * *(void *)(a2 + 24)) + 16) = *(void *)(a2 + 72);
        *(void *)(*(void *)(*(void *)(a2 + 40) + 8 * *(void *)(a2 + 24)) + 32) = *(void *)(a2 + 56);
        uint64_t v4 = *(void *)(a2 + 40);
      }
      *(void *)(v4 + 8 * *(void *)(a2 + 24)) = a1;
      uint64_t v6 = *(void *)(a2 + 40);
      uint64_t v7 = 8 * *(void *)(a2 + 24);
      *(void *)(a2 + 56) = *(void *)(*(void *)(v6 + v7) + 32);
      int v8 = *(unsigned char **)(*(void *)(v6 + v7) + 16);
      *(void *)(a2 + 72) = v8;
      *(void *)(a2 + 136) = v8;
      *(void *)(a2 + _Block_object_dispose(&a9, 8) = **(void **)(v6 + v7);
      *(unsigned char *)(a2 + 4_Block_object_dispose(&a9, 8) = *v8;
      *(_DWORD *)(a2 + 8_Block_object_dispose(&a9, 8) = 1;
    }
  }
}

double core_yyensure_buffer_stack(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2)
  {
    int v8 = (void *)palloc(8uLL);
    *(void *)(a1 + 4errstart(20, 0) = v8;
    if (v8)
    {
      *int v8 = 0;
      double result = 0.0;
      *(_OWORD *)(a1 + 24) = xmmword_18EBCAE30;
      return result;
    }
    goto LABEL_8;
  }
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 24) < (unint64_t)(v3 - 1)) {
    return result;
  }
  uint64_t v4 = v3 + 8;
  uint64_t v5 = repalloc(v2, 8 * (v3 + 8));
  *(void *)(a1 + 4errstart(20, 0) = v5;
  if (!v5) {
LABEL_8:
  }
    fprintf_to_ereport("out of dynamic memory in core_yyensure_buffer_stack()");
  uint64_t v6 = (_OWORD *)(v5 + 8 * *(void *)(a1 + 32));
  double result = 0.0;
  v6[2] = 0u;
  v6[3] = 0u;
  *uint64_t v6 = 0u;
  v6[1] = 0u;
  *(void *)(a1 + 32) = v4;
  return result;
}

void *MemoryContextInit()
{
  AllocSetContextCreateInternal(0, (size_t)"TopMemoryContext", 0, 0x2000uLL, 0x800000);
  uint64_t v0 = (void *)TopMemoryContext();
  *uint64_t v0 = v1;
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  *uint64_t v2 = v3;
  AllocSetContextCreateInternal(v3, (size_t)"ErrorContext", 0x2000uLL, 0x2000uLL, 0x2000);
  double result = (void *)ErrorContext();
  *double result = v5;
  *(unsigned char *)(v5 + 5) = 1;
  return result;
}

uint64_t AllocSetContextCreateInternal(uint64_t a1, size_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if (a3 || a4 != 0x2000)
  {
    unsigned int v9 = -1;
    if (a3 || a4 != 1024) {
      goto LABEL_9;
    }
    unsigned int v9 = 1;
  }
  else
  {
    unsigned int v9 = 0;
  }
  uint64_t v10 = context_freelists();
  uint64_t v11 = v10 + 16 * v9;
  uint64_t v14 = *(void *)(v11 + 8);
  uint64_t v12 = (void *)(v11 + 8);
  uint64_t v13 = v14;
  if (v14)
  {
    *uint64_t v12 = *(void *)(v13 + 48);
    --*(_DWORD *)(v10 + 16 * v9);
    *(void *)(v13 + 184) = a5;
    MemoryContextCreate(v13, 217, (uint64_t)&AllocSetMethods, a1, a2);
    size_t v15 = *(void *)(*(void *)(v13 + 208) + 32) - v13;
    goto LABEL_21;
  }
LABEL_9:
  if (a3) {
    unint64_t v16 = a3;
  }
  else {
    unint64_t v16 = a4;
  }
  if (v16 <= 0x118) {
    size_t v15 = 280;
  }
  else {
    size_t v15 = v16;
  }
  uint64_t v17 = malloc_type_malloc(v15, 0x5D9EFAF5uLL);
  if (!v17) {
    AllocSetContextCreateInternal_cold_1(a2);
  }
  uint64_t v13 = (uint64_t)v17;
  v17[31] = v17 + 33;
  v17[32] = (char *)v17 + v15;
  v17[29] = 0;
  v17[30] = 0;
  v17[28] = v17;
  v17[10] = v17 + 28;
  v17[26] = v17 + 28;
  unint64_t v18 = (unint64_t)(v17 + 22);
  unint64_t v19 = v17 + 11;
  if (v18 <= v13 + 96) {
    unint64_t v18 = v13 + 96;
  }
  bzero(v19, ((v18 - v13 - 89) & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)(v13 + 176) = a4;
  *(void *)(v13 + 184) = a5;
  *(void *)(v13 + 192) = a4;
  *(_DWORD *)(v13 + 216) = v9;
  unint64_t v20 = 0x2000;
  do
  {
    unint64_t v21 = v20;
    unint64_t v22 = v20 + 16;
    v20 >>= 1;
  }
  while (v22 > (unint64_t)(a5 - 40) >> 2);
  *(void *)(v13 + 20errstart(20, 0) = v21;
  MemoryContextCreate(v13, 217, (uint64_t)&AllocSetMethods, a1, a2);
LABEL_21:
  *(void *)(v13 + _Block_object_dispose(&a9, 8) = v15;
  return v13;
}

uint64_t MemoryContextCreate(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)double result = a2;
  *(unsigned char *)(result + 4) = 1;
  *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(result + 16) = a3;
  *(void *)(result + 32) = 0;
  *(void *)(result + 4errstart(20, 0) = 0;
  *(void *)(result + 24) = a4;
  *(void *)(result + 64) = 0;
  *(void *)(result + 72) = 0;
  *(void *)(result + 56) = a5;
  if (a4)
  {
    *(void *)(result + 4_Block_object_dispose(&a9, 8) = *(void *)(a4 + 32);
    uint64_t v5 = *(void *)(a4 + 32);
    if (v5) {
      *(void *)(v5 + 4errstart(20, 0) = result;
    }
    *(void *)(a4 + 32) = result;
    *(unsigned char *)(result + 5) = *(unsigned char *)(a4 + 5);
  }
  else
  {
    *(void *)(result + 4_Block_object_dispose(&a9, 8) = 0;
    *(unsigned char *)(result + 5) = 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_112()
{
  return StorableValue.init(_:dataType:)(v2 - 112, v1, v0);
}

void OUTLINED_FUNCTION_112_0(char a1@<W8>)
{
  **(void **)(v1 - 504) = -1 << a1;
}

void OUTLINED_FUNCTION_85_0(int a1@<W8>)
{
  *(_DWORD *)(v1 - 396) = a1;
  *(void *)(v1 - 40_Block_object_dispose(&a9, 8) = *(void *)(v1 - 240) + 104;
}

uint64_t OUTLINED_FUNCTION_83()
{
  return v0;
}

void OUTLINED_FUNCTION_83_0()
{
  *(void *)(v0 - 8_Block_object_dispose(&a9, 8) = 0;
}

uint64_t pg_query__alter_owner_stmt__get_packed_size(void **a1)
{
  if (*a1 != &pg_query__alter_owner_stmt__descriptor) {
    pg_query__alter_owner_stmt__get_packed_size_cold_1();
  }

  return protobuf_c_message_get_packed_size((uint64_t)a1);
}

void pg_query__alter_owner_stmt__get_packed_size_cold_1()
{
  __assert_rtn("pg_query__alter_owner_stmt__get_packed_size", "pg_query.pb-c.c", 6004, "message->base.descriptor == &pg_query__alter_owner_stmt__descriptor");
}

uint64_t pg_query__alter_object_depends_stmt__pack_to_buffer(void **a1, void (**a2)(void, uint64_t, char *))
{
  if (*a1 != &pg_query__alter_object_depends_stmt__descriptor) {
    pg_query__alter_object_depends_stmt__pack_to_buffer_cold_1();
  }

  return protobuf_c_message_pack_to_buffer((uint64_t)a1, a2);
}

void pg_query__alter_object_depends_stmt__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__alter_object_depends_stmt__pack_to_buffer", "pg_query.pb-c.c", 5928, "message->base.descriptor == &pg_query__alter_object_depends_stmt__descriptor");
}

void *SetDatabaseEncoding(unsigned int a1)
{
  if (a1 >= 0x23) {
    SetDatabaseEncoding_cold_1(a1);
  }
  double result = (void *)DatabaseEncoding();
  *double result = v2;
  return result;
}

void SetDatabaseEncoding_cold_1(int a1)
{
}

uint64_t specialized KeyedQueryPlannerMetadataCache.flush()()
{
  uint64_t v1 = v0;
  uint64_t v721 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
  uint64_t v676 = *(void *)(v721 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v721);
  v689 = (uint64_t *)((char *)&v646 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  v709 = (uint64_t *)((char *)&v646 - v5);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  v690 = (uint64_t *)((char *)&v646 - v7);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v646 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  v701 = (uint64_t *)((char *)&v646 - v12);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  v726 = (uint64_t *)((char *)&v646 - v14);
  MEMORY[0x1F4188790](v13);
  v702 = (uint64_t *)((char *)&v646 - v15);
  uint64_t v738 = type metadata accessor for StorableValue(0);
  uint64_t v736 = *(void *)(v738 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v738);
  uint64_t v708 = (uint64_t)&v646 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v707 = (uint64_t)&v646 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v728 = (uint64_t)&v646 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v679 = (uint64_t)&v646 - v23;
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v681 = (uint64_t)&v646 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v680 = (uint64_t)&v646 - v27;
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  uint64_t v725 = (uint64_t)&v646 - v29;
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  v724 = (char *)&v646 - v31;
  MEMORY[0x1F4188790](v30);
  uint64_t v733 = (uint64_t)&v646 - v32;
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v34 = MEMORY[0x1F4188790](v33 - 8);
  uint64_t v688 = (uint64_t)&v646 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  uint64_t v38 = (char *)&v646 - v37;
  uint64_t v39 = MEMORY[0x1F4188790](v36);
  uint64_t v703 = (uint64_t)&v646 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v700 = (uint64_t)&v646 - v42;
  uint64_t v43 = MEMORY[0x1F4188790](v41);
  v731 = (char *)&v646 - v44;
  MEMORY[0x1F4188790](v43);
  v719 = (char *)&v646 - v45;
  uint64_t v735 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType)));
  MEMORY[0x1F4188790](v735);
  v710 = (char *)&v646 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v730 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  uint64_t v711 = *(void *)(v730 - 8);
  uint64_t v47 = MEMORY[0x1F4188790](v730);
  uint64_t v49 = (Swift::String *)((char *)&v646 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v50 = MEMORY[0x1F4188790](v47);
  unint64_t v52 = (char *)&v646 - v51;
  uint64_t v53 = MEMORY[0x1F4188790](v50);
  v704 = (uint64_t *)((char *)&v646 - v54);
  uint64_t v55 = MEMORY[0x1F4188790](v53);
  v727 = (uint64_t *)((char *)&v646 - v56);
  uint64_t v57 = MEMORY[0x1F4188790](v55);
  v706 = (char *)&v646 - v58;
  uint64_t v59 = MEMORY[0x1F4188790](v57);
  uint64_t v687 = (uint64_t)&v646 - v60;
  uint64_t v61 = MEMORY[0x1F4188790](v59);
  v720 = (uint64_t *)((char *)&v646 - v62);
  uint64_t v63 = MEMORY[0x1F4188790](v61);
  v732 = (uint64_t *)((char *)&v646 - v64);
  uint64_t v65 = MEMORY[0x1F4188790](v63);
  v723 = (char *)&v646 - v66;
  MEMORY[0x1F4188790](v65);
  unint64_t v699 = (unint64_t)&v646 - v67;
  uint64_t v68 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType))?);
  uint64_t v69 = MEMORY[0x1F4188790](v68 - 8);
  v705 = (char *)&v646 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  v718 = (uint64_t *)((char *)&v646 - v72);
  uint64_t v73 = MEMORY[0x1F4188790](v71);
  v729 = (uint64_t *)((char *)&v646 - v74);
  MEMORY[0x1F4188790](v73);
  v722 = (uint64_t *)((char *)&v646 - v75);
  v678 = type metadata accessor for MaterializedView();
  Swift::Int Description = (void (**)(char *, uint64_t, ValueMetadata *))v678[-1].Description;
  uint64_t v76 = MEMORY[0x1F4188790](v678);
  v668 = (char *)&v646 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = MEMORY[0x1F4188790](v76);
  v672 = (char *)&v646 - v79;
  MEMORY[0x1F4188790](v78);
  unint64_t k = (char *)&v646 - v80;
  Swift::Int v81 = (int *)type metadata accessor for KeyedAggregationMetadataCache(0);
  uint64_t v82 = MEMORY[0x1F4188790](v81);
  uint64_t v667 = (uint64_t)&v646 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = MEMORY[0x1F4188790](v82);
  uint64_t v666 = (uint64_t)&v646 - v85;
  uint64_t v86 = MEMORY[0x1F4188790](v84);
  uint64_t v673 = (uint64_t)&v646 - v87;
  uint64_t v88 = MEMORY[0x1F4188790](v86);
  uint64_t v671 = (uint64_t)&v646 - v89;
  uint64_t v90 = MEMORY[0x1F4188790](v88);
  uint64_t v675 = (uint64_t)&v646 - v91;
  uint64_t v92 = MEMORY[0x1F4188790](v90);
  uint64_t v716 = (uint64_t)&v646 - v93;
  uint64_t v94 = MEMORY[0x1F4188790](v92);
  uint64_t v96 = (char *)&v646 - v95;
  MEMORY[0x1F4188790](v94);
  uint64_t v98 = (char *)&v646 - v97;
  _s12BiomeStreams13StorableValueOWOcTm_1(v0, (uint64_t)&v646 - v97, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
  uint64_t v99 = *(void *)&v98[v81[12]];
  swift_bridgeObjectRetain();
  uint64_t result = _s12BiomeStreams13StorableValueOWOhTm_2((uint64_t)v98, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
  if (!v99) {
    return result;
  }
  uint64_t v101 = (void *)(v1 + v81[7]);
  if (!*(void *)(*v101 + 16)) {
    return swift_bridgeObjectRelease();
  }
  v662 = (int64_t *)v10;
  v658 = v52;
  v659 = v49;
  uint64_t v102 = v1;
  uint64_t v103 = v101;
  specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)();
  unint64_t v674 = v104;
  swift_bridgeObjectRelease();
  uint64_t v669 = v102;
  _s12BiomeStreams13StorableValueOWOcTm_1(v102, (uint64_t)v96, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
  v664 = v81;
  uint64_t v682 = *(void *)&v96[v81[13]];
  swift_bridgeObjectRetain();
  _s12BiomeStreams13StorableValueOWOhTm_2((uint64_t)v96, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
  v661 = v103;
  uint64_t v105 = *v103;
  uint64_t v106 = *(void *)(v105 + 64);
  v734 = (void *)(v105 + 64);
  uint64_t v107 = 1 << *(unsigned char *)(v105 + 32);
  uint64_t v108 = -1;
  if (v107 < 64) {
    uint64_t v108 = ~(-1 << v107);
  }
  unint64_t v109 = v108 & v106;
  uint64_t v737 = (unint64_t)(v107 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v110 = 0;
  rawValue = (void *)MEMORY[0x1E4FBC868];
  v684 = (void *)MEMORY[0x1E4FBC868];
  v683 = v38;
  if (!v109) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v112 = __clz(__rbit64(v109));
  v109 &= v109 - 1;
  for (unint64_t i = v112 | (v110 << 6); ; unint64_t i = __clz(__rbit64(v115)) + (v110 << 6))
  {
    uint64_t v117 = *(void *)(*(void *)(v105 + 48) + 8 * i);
    uint64_t v118 = *(void *)(v105 + 56) + 16 * i;
    uint64_t v119 = *(void *)v118;
    char v120 = *(unsigned char *)(v118 + 8);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    if (v120)
    {
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v741._rawValue = rawValue;
      specialized __RawDictionaryStorage.find<A>(_:)();
      unint64_t v130 = v129;
      uint64_t v131 = rawValue[2];
      BOOL v132 = (v122 & 1) == 0;
      uint64_t v133 = v131 + v132;
      if (__OFADD__(v131, v132))
      {
        __break(1u);
LABEL_287:
        uint64_t v591 = v133;
        swift_bridgeObjectRelease();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
        swift_allocError();
        void *v592 = v657;
        v592[1] = v591;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        goto LABEL_282;
      }
      char v134 = v122;
      if (rawValue[3] >= v133)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], [[String : StorableValue]]>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v133, isUniquelyReferenced_nonNull_native, v123, v124, v125, v126, v127, v128, v646, (uint64_t)v647, v648, (uint64_t)v649, v650, v651, v652, (uint64_t)v653, v654, v655, v656,
          v657,
          (uint64_t)v658,
          (uint64_t)v659);
        specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v134 & 1) != (v136 & 1)) {
          goto LABEL_353;
        }
        unint64_t v130 = v135;
      }
      rawValue = v741._rawValue;
      if (v134)
      {
        uint64_t v137 = *((void *)v741._rawValue + 7);
LABEL_32:
        swift_bridgeObjectRelease();
        *(void *)(v137 + 8 * v13errstart(20, 0) = v119;
        goto LABEL_36;
      }
      *((void *)v741._rawValue + (v130 >> 6) + 8) |= 1 << v130;
      *(void *)(rawValue[6] + 8 * v13errstart(20, 0) = v117;
      *(void *)(rawValue[7] + 8 * v13errstart(20, 0) = v119;
      uint64_t v138 = rawValue[2];
      BOOL v139 = __OFADD__(v138, 1);
      uint64_t v140 = v138 + 1;
      if (v139)
      {
        __break(1u);
LABEL_290:
        __break(1u);
        goto LABEL_291;
      }
      rawValue[2] = v140;
      goto LABEL_35;
    }
    v685 = rawValue;
    BOOL v141 = v684;
    uint64_t v142 = swift_isUniquelyReferenced_nonNull_native();
    v741._rawValue = v141;
    specialized __RawDictionaryStorage.find<A>(_:)();
    unint64_t v130 = v150;
    uint64_t v151 = v141[2];
    BOOL v152 = (v143 & 1) == 0;
    uint64_t v153 = v151 + v152;
    if (__OFADD__(v151, v152)) {
      goto LABEL_329;
    }
    char v154 = v143;
    if (v141[3] >= v153)
    {
      rawValue = v685;
      if (v142) {
        goto LABEL_44;
      }
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], [[String : StorableValue]]>);
      _NativeDictionary.copy()();
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v153, v142, v144, v145, v146, v147, v148, v149, v646, (uint64_t)v647, v648, (uint64_t)v649, v650, v651, v652, (uint64_t)v653, v654, v655, v656,
        v657,
        (uint64_t)v658,
        (uint64_t)v659);
      specialized __RawDictionaryStorage.find<A>(_:)();
      if ((v154 & 1) != (v156 & 1)) {
        goto LABEL_353;
      }
      unint64_t v130 = v155;
    }
    rawValue = v685;
LABEL_44:
    BOOL v157 = v741._rawValue;
    v684 = v741._rawValue;
    if (v154)
    {
      uint64_t v137 = *((void *)v741._rawValue + 7);
      goto LABEL_32;
    }
    *((void *)v741._rawValue + (v130 >> 6) + 8) |= 1 << v130;
    *(void *)(v157[6] + 8 * v13errstart(20, 0) = v117;
    *(void *)(v157[7] + 8 * v13errstart(20, 0) = v119;
    uint64_t v158 = v157[2];
    BOOL v139 = __OFADD__(v158, 1);
    uint64_t v159 = v158 + 1;
    if (v139) {
      goto LABEL_335;
    }
    v157[2] = v159;
LABEL_35:
    swift_bridgeObjectRetain();
LABEL_36:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v109) {
      goto LABEL_6;
    }
LABEL_7:
    uint64_t v114 = v110 + 1;
    if (__OFADD__(v110, 1)) {
      goto LABEL_290;
    }
    if (v114 >= v737) {
      break;
    }
    unint64_t v115 = v734[v114];
    ++v110;
    if (!v115)
    {
      uint64_t v110 = v114 + 1;
      if (v114 + 1 >= v737) {
        break;
      }
      unint64_t v115 = v734[v110];
      if (!v115)
      {
        uint64_t v110 = v114 + 2;
        if (v114 + 2 >= v737) {
          break;
        }
        unint64_t v115 = v734[v110];
        if (!v115)
        {
          uint64_t v110 = v114 + 3;
          if (v114 + 3 >= v737) {
            break;
          }
          unint64_t v115 = v734[v110];
          if (!v115)
          {
            uint64_t v116 = v114 + 4;
            if (v116 >= v737) {
              break;
            }
            unint64_t v115 = v734[v116];
            if (!v115)
            {
              while (1)
              {
                uint64_t v110 = v116 + 1;
                if (__OFADD__(v116, 1)) {
                  break;
                }
                if (v110 >= v737) {
                  goto LABEL_49;
                }
                unint64_t v115 = v734[v110];
                ++v116;
                if (v115) {
                  goto LABEL_22;
                }
              }
LABEL_326:
              __break(1u);
LABEL_327:
              __break(1u);
LABEL_328:
              __break(1u);
LABEL_329:
              __break(1u);
LABEL_330:
              __break(1u);
LABEL_331:
              __break(1u);
LABEL_332:
              __break(1u);
LABEL_333:
              __break(1u);
LABEL_334:
              __break(1u);
LABEL_335:
              __break(1u);
LABEL_336:
              __break(1u);
LABEL_337:
              __break(1u);
LABEL_338:
              __break(1u);
LABEL_339:
              __break(1u);
LABEL_340:
              __break(1u);
LABEL_341:
              __break(1u);
              goto LABEL_342;
            }
            uint64_t v110 = v116;
          }
        }
      }
    }
LABEL_22:
    unint64_t v109 = (v115 - 1) & v115;
  }
LABEL_49:
  swift_release();
  if (!rawValue[2]) {
    goto LABEL_58;
  }
  v685 = rawValue;
  uint64_t v160 = v716;
  _s12BiomeStreams13StorableValueOWOcTm_1(v669, v716, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
  unint64_t v161 = Description;
  char v162 = k;
  char v163 = v678;
  Description[2](k, v160, v678);
  _s12BiomeStreams13StorableValueOWOhTm_2(v160, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
  uint64_t v164 = MaterializedView.name.getter();
  int v166 = v165;
  ((void (*)(char *, ValueMetadata *))v161[1])(v162, v163);
  specialized _arrayForceCast<A, B>(_:)();
  uint64_t v168 = v167;
  uint64_t v698 = v167;
  static KeyedAggregationMetadataCache.columnNames(groupBySchema:payloadSchema:)();
  uint64_t v170 = v169;
  uint64_t v171 = *(void *)(v168 + 16);
  uint64_t v670 = v169;
  uint64_t v657 = v171;
  if (v171)
  {
    v741._rawValue = (void *)static String._createEmpty(withInitialCapacity:)(37);
    unint64_t v742 = v172;
    v173._uint64_t countAndFlagsBits = 0x20455441445055;
    v173._uint64_t object = (void *)0xE700000000000000;
    String.append(_:)(v173);
    v174._uint64_t countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v164, v166, 36, 0xD000000000000022, (void *)0x800000018EBEA6C0);
    String.append(_:)(v174);
    swift_bridgeObjectRelease();
    v175._uint64_t countAndFlagsBits = 0x2020200A5445530ALL;
    v175._uint64_t object = (void *)0xE900000000000020;
    String.append(_:)(v175);
    uint64_t v176 = specialized Array.count.getter(v170);
    if (v176)
    {
      uint64_t v177 = v176;
      uint64_t v743 = specialized ContiguousArray.init()();
      specialized ContiguousArray.reserveCapacity(_:)(v177);
      if (v177 < 0) {
        goto LABEL_343;
      }
      uint64_t v178 = (void **)(v170 + 40);
      do
      {
        uint64_t v179 = (uint64_t)*(v178 - 1);
        uint64_t v180 = *v178;
        swift_bridgeObjectRetain();
        static String._createEmpty(withInitialCapacity:)(8);
        swift_bridgeObjectRelease();
        uint64_t v739 = 34;
        unint64_t v740 = 0xE100000000000000;
        v181._uint64_t countAndFlagsBits = v179;
        v181._uint64_t object = v180;
        String.append(_:)(v181);
        v182._uint64_t countAndFlagsBits = 0x3F203D2022;
        v182._uint64_t object = (void *)0xE500000000000000;
        String.append(_:)(v182);
        uint64_t v183 = String.init(stringInterpolation:)();
        uint64_t v185 = v184;
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v186 = *(void *)(v743 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v186);
        uint64_t v187 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v186, v183, v185);
        destructiveProjectEnumData for StorableValue(v187, v188);
        v178 += 2;
        --v177;
      }
      while (v177);
      uint64_t v189 = v743;
    }
    else
    {
      uint64_t v189 = specialized static Array._allocateUninitialized(_:)(0);
    }
    uint64_t v739 = v189;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v233 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v235 = v234;
    swift_bridgeObjectRelease();
    v236._uint64_t countAndFlagsBits = v233;
    v236._uint64_t object = v235;
    String.append(_:)(v236);
    swift_bridgeObjectRelease();
    v237._uint64_t countAndFlagsBits = 0x282045524548570ALL;
    v237._uint64_t object = (void *)0xED0000202020200ALL;
    String.append(_:)(v237);
    uint64_t v238 = v686;
    uint64_t PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_14BiomeSQLParser11SQLDataTypeOtG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5c186_pIggnozo_SS_ACtSSsAD_pIegnrzr_TR04_s12a146Streams30KeyedQueryPlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm(v698, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
    uint64_t v686 = v238;
    if (v238)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v739 = PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm;
    uint64_t v240 = BidirectionalCollection<>.joined(separator:)();
    unint64_t v242 = v241;
    swift_bridgeObjectRelease();
    v243._uint64_t countAndFlagsBits = v240;
    v243._uint64_t object = v242;
    String.append(_:)(v243);
    swift_bridgeObjectRelease();
    v244._uint64_t countAndFlagsBits = 10506;
    v244._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v244);
    uint64_t v648 = String.init(stringInterpolation:)();
    v653 = v245;
    uint64_t v219 = v729;
  }
  else
  {
    static String._createEmpty(withInitialCapacity:)(20);
    swift_bridgeObjectRelease();
    v741._rawValue = (void *)0x20455441445055;
    unint64_t v742 = 0xE700000000000000;
    v216._uint64_t countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v164, v166, 36, 0xD000000000000022, (void *)0x800000018EBEA6C0);
    String.append(_:)(v216);
    swift_bridgeObjectRelease();
    v217._uint64_t countAndFlagsBits = 0x2020200A5445530ALL;
    v217._uint64_t object = (void *)0xE900000000000020;
    String.append(_:)(v217);
    uint64_t v218 = specialized Array.count.getter(v170);
    uint64_t v219 = v729;
    if (v218)
    {
      uint64_t v220 = v218;
      uint64_t v743 = specialized ContiguousArray.init()();
      specialized ContiguousArray.reserveCapacity(_:)(v220);
      if (v220 < 0) {
        goto LABEL_347;
      }
      uint64_t v221 = (void **)(v170 + 40);
      do
      {
        uint64_t v222 = (uint64_t)*(v221 - 1);
        uint64_t v223 = *v221;
        swift_bridgeObjectRetain();
        static String._createEmpty(withInitialCapacity:)(8);
        swift_bridgeObjectRelease();
        uint64_t v739 = 34;
        unint64_t v740 = 0xE100000000000000;
        v224._uint64_t countAndFlagsBits = v222;
        v224._uint64_t object = v223;
        String.append(_:)(v224);
        v225._uint64_t countAndFlagsBits = 0x3F203D2022;
        v225._uint64_t object = (void *)0xE500000000000000;
        String.append(_:)(v225);
        uint64_t v226 = String.init(stringInterpolation:)();
        uint64_t v228 = v227;
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v229 = *(void *)(v743 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v229);
        uint64_t v230 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v229, v226, v228);
        destructiveProjectEnumData for StorableValue(v230, v231);
        v221 += 2;
        --v220;
      }
      while (v220);
      uint64_t v232 = v743;
      uint64_t v219 = v729;
    }
    else
    {
      uint64_t v232 = specialized static Array._allocateUninitialized(_:)(0);
    }
    uint64_t v739 = v232;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v410 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v412 = v411;
    swift_bridgeObjectRelease();
    v413._uint64_t countAndFlagsBits = v410;
    v413._uint64_t object = v412;
    String.append(_:)(v413);
    swift_bridgeObjectRelease();
    uint64_t v648 = String.init(stringInterpolation:)();
    v653 = v414;
  }
  uint64_t v415 = v682;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v416 = 0;
  v417 = v685;
  uint64_t v418 = (uint64_t)(v685 + 8);
  uint64_t v419 = 1 << *((unsigned char *)v685 + 32);
  uint64_t v420 = -1;
  if (v419 < 64) {
    uint64_t v420 = ~(-1 << v419);
  }
  unint64_t v421 = v420 & v685[8];
  int64_t v422 = (unint64_t)(v419 + 63) >> 6;
  uint64_t v660 = v415 + 32;
  v649 = (uint64_t *)(v670 + 56);
  uint64_t v423 = v735;
  v424 = v731;
  v647 = v685 + 8;
  uint64_t v646 = v422;
  if (v421) {
    goto LABEL_172;
  }
LABEL_173:
  BOOL v139 = __OFADD__(v416, 1);
  uint64_t v426 = v416 + 1;
  if (v139) {
    goto LABEL_344;
  }
  if (v426 >= v422) {
    goto LABEL_291;
  }
  unint64_t v427 = *(void *)(v418 + 8 * v426);
  if (v427)
  {
LABEL_185:
    unint64_t v650 = (v427 - 1) & v427;
    uint64_t v651 = v426;
    for (unint64_t j = __clz(__rbit64(v427)) + (v426 << 6); ; unint64_t j = __clz(__rbit64(v421)) | (v416 << 6))
    {
      uint64_t v429 = *(void *)(v417[6] + 8 * j);
      uint64_t v430 = *(void *)(v417[7] + 8 * j);
      uint64_t v431 = v675;
      _s12BiomeStreams13StorableValueOWOcTm_1(v669, v675, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
      uint64_t v663 = *(void *)(v431 + v664[11]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      _s12BiomeStreams13StorableValueOWOhTm_2(v431, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
      uint64_t v665 = v430;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      specialized static Array._allocateUninitialized(_:)(0);
      uint64_t v737 = Dictionary.init(dictionaryLiteral:)();
      uint64_t v712 = v429;
      uint64_t v133 = specialized Array.count.getter(v429);
      if (v133 != v657) {
        goto LABEL_287;
      }
      uint64_t v432 = specialized Array.count.getter(v698);
      swift_bridgeObjectRetain();
      uint64_t v433 = 0;
      uint64_t v434 = (uint64_t)v723;
      for (unint64_t k = (char *)v432; ; v432 = (uint64_t)k)
      {
        if (v433 == v432)
        {
          uint64_t v435 = 1;
          uint64_t v436 = v432;
        }
        else
        {
          uint64_t v437 = v698;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v433, 1, v698);
          outlined init with copy of UUID?(v437+ ((*(unsigned __int8 *)(v711 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v711 + 80))+ *(void *)(v711 + 72) * v433, v434, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          uint64_t v436 = v433 + 1;
          if (__OFADD__(v433, 1)) {
            goto LABEL_315;
          }
          uint64_t v438 = v699;
          _s10Foundation4UUIDVSgWObTm_0(v434, v699, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          uint64_t v439 = (uint64_t)&v710[*(int *)(v423 + 48)];
          _s10Foundation4UUIDVSgWObTm_0(v438, v439, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          uint64_t v440 = (uint64_t)v219 + *(int *)(v423 + 48);
          uint64_t *v219 = v433;
          _s10Foundation4UUIDVSgWObTm_0(v439, v440, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          uint64_t v435 = 0;
        }
        __swift_storeEnumTagSinglePayload((uint64_t)v219, v435, 1, v423);
        uint64_t v441 = v722;
        _s10Foundation4UUIDVSgWObTm_0((uint64_t)v219, (uint64_t)v722, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType))?);
        if (__swift_getEnumTagSinglePayload((uint64_t)v441, 1, v423) == 1) {
          break;
        }
        v734 = (void *)v436;
        char v442 = v441;
        uint64_t v443 = *v441;
        long long v444 = (void *)((char *)v442 + *(int *)(v423 + 48));
        uint64_t v446 = *v444;
        uint64_t v445 = v444[1];
        uint64_t v447 = v730;
        uint64_t v448 = *(int *)(v730 + 48);
        v449 = (char *)v444 + v448;
        v450 = v720;
        v451 = (char *)v720 + v448;
        void *v720 = v446;
        v450[1] = v445;
        v452 = type metadata accessor for SQLDataType();
        v453 = (void (*)(char *, char *, ValueMetadata *))*((void *)v452[-1].Description + 4);
        v453(v451, v449, v452);
        v454 = v732;
        v455 = (char *)v732 + *(int *)(v447 + 48);
        uint64_t *v732 = v446;
        v454[1] = v445;
        v453(v455, v451, v452);
        uint64_t v456 = v712;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v443, 1, v712);
        uint64_t v457 = *(void *)(v736 + 72);
        _s12BiomeStreams13StorableValueOWOcTm_1(v456+ ((*(unsigned __int8 *)(v736 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v736 + 80))+ v457 * v443, v733, (void (*)(void))type metadata accessor for StorableValue);
        swift_bridgeObjectRetain();
        v458 = (void *)v737;
        char v459 = swift_isUniquelyReferenced_nonNull_native();
        v741._rawValue = v458;
        unint64_t v460 = specialized __RawDictionaryStorage.find<A>(_:)(v446, v445);
        uint64_t v462 = v458[2];
        BOOL v463 = (v461 & 1) == 0;
        Swift::Int v464 = v462 + v463;
        if (__OFADD__(v462, v463))
        {
          __break(1u);
LABEL_295:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_296:
          swift_bridgeObjectRelease();
          if (specialized Array.count.getter(v674) >= 1)
          {
            uint64_t v597 = v669;
            uint64_t v598 = v666;
            _s12BiomeStreams13StorableValueOWOcTm_1(v669, v666, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
            uint64_t v599 = *(void *)(v598 + v664[11]);
            swift_retain();
            _s12BiomeStreams13StorableValueOWOhTm_2(v598, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
            uint64_t v600 = v667;
            _s12BiomeStreams13StorableValueOWOcTm_1(v597, v667, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
            v601 = Description;
            v602 = v668;
            v603 = v678;
            Description[2](v668, v600, v678);
            _s12BiomeStreams13StorableValueOWOhTm_2(v600, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
            uint64_t v604 = MaterializedView.name.getter();
            uint64_t v606 = v605;
            ((void (*)(char *, ValueMetadata *))v601[1])(v602, v603);
            specialized _arrayForceCast<A, B>(_:)();
            uint64_t v608 = v607;
            swift_bridgeObjectRelease();
            uint64_t v609 = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v604, v606, 36, 0xD000000000000022, (void *)0x800000018EBEA6C0);
            v611 = v610;
            uint64_t v612 = MEMORY[0x192FB0010]();
            v614 = v613;
            static String._createEmpty(withInitialCapacity:)(49);
            swift_bridgeObjectRelease();
            v741._rawValue = (void *)0xD000000000000022;
            unint64_t v742 = 0x800000018EBEA6F0;
            v615._uint64_t countAndFlagsBits = v612;
            v615._uint64_t object = v614;
            String.append(_:)(v615);
            swift_bridgeObjectRelease();
            v616._uint64_t countAndFlagsBits = 542002976;
            v616._uint64_t object = (void *)0xE400000000000000;
            String.append(_:)(v616);
            v617._uint64_t countAndFlagsBits = v609;
            v617._uint64_t object = v611;
            String.append(_:)(v617);
            swift_bridgeObjectRelease();
            v618._uint64_t countAndFlagsBits = 2107424;
            v618._uint64_t object = (void *)0xE300000000000000;
            String.append(_:)(v618);
            uint64_t v619 = specialized Array.count.getter(v608);
            if (v619)
            {
              uint64_t v620 = v619;
              uint64_t v736 = v606;
              uint64_t v737 = v599;
              uint64_t v743 = specialized ContiguousArray.init()();
              specialized ContiguousArray.reserveCapacity(_:)(v620);
              if (v620 < 0) {
                goto LABEL_350;
              }
              uint64_t v621 = *(unsigned __int8 *)(v711 + 80);
              uint64_t v735 = v608;
              uint64_t v622 = v608 + ((v621 + 32) & ~v621);
              uint64_t v738 = *(void *)(v711 + 72);
              v623 = v659;
              uint64_t v624 = (uint64_t)v658;
              do
              {
                outlined init with copy of UUID?(v622, v624, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
                _s10Foundation4UUIDVSgWObTm_0(v624, (uint64_t)v623, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
                static String._createEmpty(withInitialCapacity:)(4);
                swift_bridgeObjectRelease();
                uint64_t v739 = 34;
                unint64_t v740 = 0xE100000000000000;
                String.append(_:)(*v623);
                v625._uint64_t countAndFlagsBits = 34;
                v625._uint64_t object = (void *)0xE100000000000000;
                String.append(_:)(v625);
                uint64_t v626 = String.init(stringInterpolation:)();
                uint64_t v628 = v627;
                outlined destroy of UUID?((uint64_t)v623, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
                specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
                uint64_t v629 = *(void *)(v743 + 16);
                specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v629);
                uint64_t v630 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v629, v626, v628);
                destructiveProjectEnumData for StorableValue(v630, v631);
                v622 += v738;
                --v620;
              }
              while (v620);
              uint64_t v632 = v743;
            }
            else
            {
              uint64_t v632 = specialized static Array._allocateUninitialized(_:)(0);
            }
            uint64_t v739 = v632;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
            lazy protocol witness table accessor for type [String] and conformance [A]();
            uint64_t v633 = BidirectionalCollection<>.joined(separator:)();
            v635 = v634;
            swift_bridgeObjectRelease();
            v636._uint64_t countAndFlagsBits = v633;
            v636._uint64_t object = v635;
            String.append(_:)(v636);
            swift_bridgeObjectRelease();
            v637._uint64_t countAndFlagsBits = 10528;
            v637._uint64_t object = (void *)0xE200000000000000;
            String.append(_:)(v637);
            uint64_t v638 = String.init(stringInterpolation:)();
            v640 = v639;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v641 = specialized static Array._allocateUninitialized(_:)(0);
            v642._uint64_t countAndFlagsBits = v638;
            v642._uint64_t object = v640;
            unint64_t v643 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v642, (Swift::OpaquePointer)v641);
            if (v644)
            {
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }
            unint64_t v674 = v643;
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          uint64_t v645 = v664[14];
          if (*(unsigned char *)(v669 + v645) == 1)
          {
            if (*(void *)(*v661 + 16)) {
              *(unsigned char *)(v669 + v645) = 0;
            }
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[StorableValue] : (value: [[String : StorableValue]], event: CacheEvent)]._Variant);
          Dictionary._Variant.removeAll(keepingCapacity:)(1);
          return swift_bridgeObjectRelease();
        }
        unint64_t v465 = v460;
        char v466 = v461;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
        Swift::Bool v467 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v459, v464);
        v424 = v731;
        uint64_t v468 = (uint64_t)v719;
        if (v467)
        {
          unint64_t v469 = specialized __RawDictionaryStorage.find<A>(_:)(v446, v445);
          if ((v466 & 1) != (v470 & 1)) {
            goto LABEL_354;
          }
          unint64_t v465 = v469;
        }
        v471 = v741._rawValue;
        uint64_t v737 = (uint64_t)v741._rawValue;
        if (v466)
        {
          v472 = v741._rawValue;
          _s12BiomeStreams13StorableValueOWObTm_1(*((void *)v741._rawValue + 7) + v457 * v465, v468, (void (*)(void))type metadata accessor for StorableValue);
          _s12BiomeStreams13StorableValueOWObTm_1(v733, v472[7] + v457 * v465, (void (*)(void))type metadata accessor for StorableValue);
          __swift_storeEnumTagSinglePayload(v468, 0, 1, v738);
        }
        else
        {
          *((void *)v741._rawValue + (v465 >> 6) + 8) |= 1 << v465;
          v473 = (uint64_t *)(v471[6] + 16 * v465);
          uint64_t *v473 = v446;
          v473[1] = v445;
          _s12BiomeStreams13StorableValueOWObTm_1(v733, v471[7] + v457 * v465, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v474 = v471[2];
          BOOL v139 = __OFADD__(v474, 1);
          uint64_t v475 = v474 + 1;
          if (v139) {
            goto LABEL_316;
          }
          v471[2] = v475;
          __swift_storeEnumTagSinglePayload(v468, 1, 1, v738);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        outlined destroy of UUID?(v468, &demangling cache variable for type metadata for StorableValue?);
        swift_bridgeObjectRelease();
        outlined destroy of UUID?((uint64_t)v732, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        uint64_t v433 = (uint64_t)v734;
        uint64_t v423 = v735;
        uint64_t v434 = (uint64_t)v723;
        uint64_t v219 = v729;
      }
      swift_bridgeObjectRelease();
      uint64_t v476 = specialized Array.count.getter(v665);
      uint64_t v477 = v682;
      uint64_t v478 = specialized Array.count.getter(v682);
      if (v476 != v478) {
        break;
      }
      uint64_t v654 = specialized Array.count.getter(v477);
      if (!v654) {
        goto LABEL_232;
      }
      uint64_t v656 = v665 + 32;
      swift_bridgeObjectRetain();
      uint64_t v479 = 0;
      uint64_t v480 = v477;
      v481 = v702;
      do
      {
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v479, 1, v480);
        uint64_t v482 = *(void *)(v660 + 8 * v479);
        uint64_t v483 = v479 + 1;
        BOOL v484 = __OFADD__(v479, 1);
        swift_bridgeObjectRetain();
        if (v484) {
          goto LABEL_336;
        }
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v479, 1, v665);
        v485 = *(uint64_t **)(v656 + 8 * v479);
        swift_bridgeObjectRetain();
        uint64_t v696 = specialized Array.count.getter(v482);
        if (v696)
        {
          v697 = v485;
          uint64_t v652 = v483;
          uint64_t v486 = 0;
          v695 = (char *)v481 + *(int *)(v721 + 64);
          unint64_t v487 = (*(unsigned __int8 *)(v676 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v676 + 80);
          uint64_t v655 = v482;
          uint64_t v488 = v482 + v487;
          uint64_t v691 = *(void *)(v676 + 72);
          while (1)
          {
            outlined init with copy of UUID?(v488, (uint64_t)v481, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
            if (__OFADD__(v486, 1)) {
              break;
            }
            uint64_t v713 = v488;
            uint64_t v489 = (uint64_t)v424;
            uint64_t v714 = v486 + 1;
            uint64_t v715 = v486;
            uint64_t v490 = v721;
            v491 = v726;
            v492 = (char *)v726 + *(int *)(v721 + 64);
            uint64_t v493 = *v481;
            uint64_t v494 = v481[1];
            uint64_t v495 = v481[2];
            uint64_t v496 = v481[3];
            uint64_t *v726 = *v481;
            v491[1] = v494;
            v491[2] = v495;
            v491[3] = v496;
            v497 = type metadata accessor for SQLDataType();
            v498 = v497[-1].Description;
            (*((void (**)(char *, char *, ValueMetadata *))v498 + 4))(v492, v695, v497);
            v499 = v701;
            uint64_t v500 = (uint64_t)v701 + *(int *)(v490 + 64);
            uint64_t *v701 = v493;
            v499[1] = v494;
            v734 = (void *)v495;
            v499[2] = v495;
            v499[3] = v496;
            v501 = (void (*)(void))*((void *)v498 + 2);
            uint64_t v716 = v500;
            v693 = v492;
            unint64_t k = (char *)v497;
            v692 = v501;
            v501();
            v502 = v697;
            uint64_t v503 = v697[2];
            int64_t v694 = v493;
            if (v503)
            {
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain();
              unint64_t v504 = specialized __RawDictionaryStorage.find<A>(_:)(v493, v494);
              uint64_t v505 = v489;
              uint64_t v506 = v496;
              if (v507)
              {
                _s12BiomeStreams13StorableValueOWOcTm_1(v502[7] + *(void *)(v736 + 72) * v504, v489, (void (*)(void))type metadata accessor for StorableValue);
                uint64_t v508 = v489;
                uint64_t v509 = 0;
              }
              else
              {
                uint64_t v508 = v489;
                uint64_t v509 = 1;
              }
              uint64_t v510 = v738;
              __swift_storeEnumTagSinglePayload(v508, v509, 1, v738);
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v505 = v489;
              uint64_t v510 = v738;
              __swift_storeEnumTagSinglePayload(v489, 1, 1, v738);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v506 = v496;
            }
            if (__swift_getEnumTagSinglePayload(v505, 1, v510) == 1)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              outlined destroy of UUID?(v505, &demangling cache variable for type metadata for StorableValue?);
              uint64_t v738 = *((void *)v498 + 1);
              v583 = k;
              ((void (*)(uint64_t, char *))v738)(v716, k);
              uint64_t v737 = type metadata accessor for MetadataSQLError(0);
              lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
              uint64_t v686 = swift_allocError();
              v585 = v584;
              v586 = v662;
              v587 = (char *)v662 + *(int *)(v721 + 64);
              int64_t v588 = v694;
              int64_t *v662 = v694;
              v586[1] = v494;
              v586[2] = (int64_t)v734;
              v586[3] = v506;
              ((void (*)(char *, char *, char *))v692)(v587, v693, v583);
              swift_bridgeObjectRelease();
              int64_t *v585 = v588;
              v585[1] = v494;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              ((void (*)(char *, char *))v738)(v587, v583);
              outlined destroy of UUID?((uint64_t)v726, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
              goto LABEL_282;
            }
            swift_bridgeObjectRelease();
            uint64_t v511 = (uint64_t)v724;
            _s12BiomeStreams13StorableValueOWObTm_1(v505, (uint64_t)v724, (void (*)(void))type metadata accessor for StorableValue);
            (*((void (**)(uint64_t, char *))v498 + 1))(v716, k);
            _s12BiomeStreams13StorableValueOWOcTm_1(v511, v725, (void (*)(void))type metadata accessor for StorableValue);
            v512 = (void *)v737;
            char v513 = swift_isUniquelyReferenced_nonNull_native();
            v741._rawValue = v512;
            uint64_t v514 = (uint64_t)v734;
            unint64_t v515 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v734, v506);
            uint64_t v517 = v512[2];
            BOOL v518 = (v516 & 1) == 0;
            Swift::Int v519 = v517 + v518;
            if (__OFADD__(v517, v518)) {
              goto LABEL_314;
            }
            unint64_t v520 = v515;
            char v521 = v516;
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
            Swift::Bool v522 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v513, v519);
            uint64_t v423 = v735;
            v424 = v731;
            if (v522)
            {
              unint64_t v523 = specialized __RawDictionaryStorage.find<A>(_:)(v514, v506);
              if ((v521 & 1) != (v524 & 1)) {
                goto LABEL_354;
              }
              unint64_t v520 = v523;
            }
            v525 = v741._rawValue;
            uint64_t v737 = (uint64_t)v741._rawValue;
            if (v521)
            {
              unint64_t v526 = *(void *)(v736 + 72) * v520;
              uint64_t v527 = v700;
              _s12BiomeStreams13StorableValueOWObTm_1(*((void *)v741._rawValue + 7) + v526, v700, (void (*)(void))type metadata accessor for StorableValue);
              _s12BiomeStreams13StorableValueOWObTm_1(v725, v525[7] + v526, (void (*)(void))type metadata accessor for StorableValue);
              __swift_storeEnumTagSinglePayload(v527, 0, 1, v738);
            }
            else
            {
              *((void *)v741._rawValue + (v520 >> 6) + 8) |= 1 << v520;
              v528 = (uint64_t *)(v525[6] + 16 * v520);
              uint64_t *v528 = v514;
              v528[1] = v506;
              _s12BiomeStreams13StorableValueOWObTm_1(v725, v525[7] + *(void *)(v736 + 72) * v520, (void (*)(void))type metadata accessor for StorableValue);
              uint64_t v529 = v525[2];
              BOOL v139 = __OFADD__(v529, 1);
              uint64_t v530 = v529 + 1;
              if (v139)
              {
                __break(1u);
LABEL_325:
                __break(1u);
                goto LABEL_326;
              }
              v525[2] = v530;
              uint64_t v527 = v700;
              __swift_storeEnumTagSinglePayload(v700, 1, 1, v738);
              swift_bridgeObjectRetain();
            }
            swift_bridgeObjectRelease();
            outlined destroy of UUID?(v527, &demangling cache variable for type metadata for StorableValue?);
            _s12BiomeStreams13StorableValueOWOhTm_2((uint64_t)v724, (void (*)(void))type metadata accessor for StorableValue);
            swift_bridgeObjectRelease();
            outlined destroy of UUID?((uint64_t)v726, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
            uint64_t v488 = v713 + v691;
            uint64_t v486 = v715 + 1;
            v481 = v702;
            uint64_t v219 = v729;
            if (v714 == v696)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              uint64_t v483 = v652;
              goto LABEL_230;
            }
          }
LABEL_313:
          __break(1u);
LABEL_314:
          __break(1u);
LABEL_315:
          __break(1u);
LABEL_316:
          __break(1u);
LABEL_317:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
LABEL_323:
          swift_release();
          return swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_230:
        uint64_t v479 = v483;
        uint64_t v480 = v682;
      }
      while (v483 != v654);
      swift_bridgeObjectRelease();
LABEL_232:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v741._rawValue = (void *)specialized static Array._allocateUninitialized(_:)(0);
      uint64_t v531 = v670;
      uint64_t v532 = specialized Array.count.getter(v670);
      if (!v532)
      {
        swift_bridgeObjectRelease();
        goto LABEL_247;
      }
      uint64_t v533 = v532;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v531);
      uint64_t v535 = *(void *)(v531 + 32);
      uint64_t v534 = *(void *)(v531 + 40);
      uint64_t v536 = v737;
      uint64_t v537 = *(void *)(v737 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v537 || (unint64_t v538 = specialized __RawDictionaryStorage.find<A>(_:)(v535, v534), (v539 & 1) == 0))
      {
LABEL_284:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
        swift_allocError();
        uint64_t *v590 = v535;
        v590[1] = v534;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_285:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      unint64_t v540 = v538;
      uint64_t v541 = v536 + 64;
      v542 = v649;
      uint64_t v543 = 1;
      while (1)
      {
        int v544 = *(_DWORD *)(v536 + 36);
        swift_bridgeObjectRelease();
        if ((v540 & 0x8000000000000000) != 0 || (uint64_t)v540 >= 1 << *(unsigned char *)(v536 + 32)) {
          goto LABEL_331;
        }
        if (((*(void *)(v541 + ((v540 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v540) & 1) == 0) {
          goto LABEL_332;
        }
        if (v544 != *(_DWORD *)(v737 + 36)) {
          goto LABEL_333;
        }
        uint64_t v545 = v679;
        _s12BiomeStreams13StorableValueOWOcTm_1(*(void *)(v737 + 56) + *(void *)(v736 + 72) * v540, v679, (void (*)(void))type metadata accessor for StorableValue);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v546 = *((void *)v741._rawValue + 2);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v546);
        uint64_t v547 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v546, v545);
        destructiveProjectEnumData for StorableValue(v547, v548);
        if (v533 == v543) {
          break;
        }
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v543, 1, v670);
        if (__OFADD__(v543, 1)) {
          goto LABEL_334;
        }
        uint64_t v535 = *(v542 - 1);
        uint64_t v534 = *v542;
        uint64_t v536 = v737;
        uint64_t v549 = *(void *)(v737 + 16);
        swift_bridgeObjectRetain();
        if (v549)
        {
          unint64_t v540 = specialized __RawDictionaryStorage.find<A>(_:)(v535, v534);
          ++v543;
          v542 += 2;
          if (v550) {
            continue;
          }
        }
        goto LABEL_284;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v423 = v735;
      uint64_t v219 = v729;
LABEL_247:
      uint64_t v739 = specialized static Array._allocateUninitialized(_:)(0);
      uint64_t v551 = specialized Array.count.getter(v712);
      if (v551)
      {
        uint64_t v552 = v551;
        if (v551 < 1) {
          goto LABEL_349;
        }
        uint64_t v553 = *(unsigned __int8 *)(v736 + 80);
        uint64_t v554 = (v553 + 32) & ~v553;
        uint64_t v555 = v712 + v554;
        uint64_t v556 = *(void *)(v736 + 72);
        uint64_t v737 = v554 + 2 * v556;
        v734 = (void *)(v553 | 7);
        swift_bridgeObjectRetain();
        do
        {
          uint64_t v557 = v680;
          _s12BiomeStreams13StorableValueOWOcTm_1(v555, v680, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v558 = v557;
          uint64_t v559 = v681;
          _s12BiomeStreams13StorableValueOWObTm_1(v558, v681, (void (*)(void))type metadata accessor for StorableValue);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>);
          uint64_t v560 = swift_allocObject();
          uint64_t v561 = specialized static Array._adoptStorage(_:count:)(v560, 2);
          uint64_t v563 = v562;
          _s12BiomeStreams13StorableValueOWOcTm_1(v559, v562, (void (*)(void))type metadata accessor for StorableValue);
          _s12BiomeStreams13StorableValueOWObTm_1(v559, v563 + v556, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v565 = destructiveProjectEnumData for StorableValue(v561, v564);
          uint64_t v566 = specialized Array.count.getter(v565);
          uint64_t v567 = v739;
          uint64_t v568 = specialized Array.count.getter(v739);
          uint64_t v569 = v568 + v566;
          if (__OFADD__(v568, v566)) {
            goto LABEL_327;
          }
          int v570 = swift_isUniquelyReferenced_nonNull_native();
          if (!v570 || (uint64_t v571 = *(void *)(v567 + 24) >> 1, v571 < v569))
          {
            if (*(void *)(v567 + 16) <= v569) {
              uint64_t v572 = v569;
            }
            else {
              uint64_t v572 = *(void *)(v567 + 16);
            }
            uint64_t v567 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v570, v572, 1, v567);
            uint64_t v739 = v567;
            uint64_t v571 = *(void *)(v567 + 24) >> 1;
          }
          uint64_t v573 = *(void *)(v567 + 16);
          uint64_t v574 = v571 - v573;
          if (specialized Array.count.getter(v565))
          {
            if (v574 < v566) {
              goto LABEL_330;
            }
            if (v566 < 0) {
              goto LABEL_355;
            }
            unint64_t v575 = v567 + v554 + v573 * v556;
            if (v565 + v554 < v575 + v566 * v556 && v575 < v565 + v554 + v566 * v556) {
              goto LABEL_355;
            }
            swift_arrayInitWithCopy();
            v424 = v731;
            if (v566)
            {
              uint64_t v577 = *(void *)(v567 + 16);
              BOOL v139 = __OFADD__(v577, v566);
              uint64_t v578 = v577 + v566;
              if (v139) {
                goto LABEL_337;
              }
              *(void *)(v567 + 16) = v578;
            }
          }
          else
          {
            if (v566 > 0) {
              goto LABEL_328;
            }
            uint64_t v566 = 0;
            v424 = v731;
          }
          uint64_t v579 = swift_bridgeObjectRelease();
          if (v566 != v574) {
            destructiveProjectEnumData for StorableValue(v579, v580);
          }
          v555 += v556;
          --v552;
        }
        while (v552);
        swift_bridgeObjectRelease();
        uint64_t v423 = v735;
        uint64_t v219 = v729;
      }
      specialized Array.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v581._uint64_t countAndFlagsBits = v648;
      v581._uint64_t object = v653;
      SQLExpressionEvaluator.execute(sql:bindingValues:)(v581, v741);
      uint64_t v686 = v582;
      if (v582) {
        goto LABEL_317;
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v417 = v685;
      uint64_t v418 = (uint64_t)v647;
      int64_t v422 = v646;
      uint64_t v416 = v651;
      unint64_t v421 = v650;
      if (!v650) {
        goto LABEL_173;
      }
LABEL_172:
      unint64_t v650 = (v421 - 1) & v421;
      uint64_t v651 = v416;
    }
    uint64_t v593 = v478;
    swift_bridgeObjectRelease();
    type metadata accessor for MetadataSQLError(0);
    lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
    swift_allocError();
    uint64_t *v594 = v593;
    v594[1] = v476;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
LABEL_282:
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_285;
  }
  uint64_t v428 = v426 + 1;
  if (v426 + 1 < v422)
  {
    unint64_t v427 = *(void *)(v418 + 8 * v428);
    if (v427) {
      goto LABEL_184;
    }
    uint64_t v428 = v426 + 2;
    if (v426 + 2 < v422)
    {
      unint64_t v427 = *(void *)(v418 + 8 * v428);
      if (v427) {
        goto LABEL_184;
      }
      uint64_t v428 = v426 + 3;
      if (v426 + 3 < v422)
      {
        unint64_t v427 = *(void *)(v418 + 8 * v428);
        if (v427) {
          goto LABEL_184;
        }
        uint64_t v428 = v426 + 4;
        if (v426 + 4 < v422)
        {
          unint64_t v427 = *(void *)(v418 + 8 * v428);
          if (v427)
          {
LABEL_184:
            uint64_t v426 = v428;
            goto LABEL_185;
          }
          while (1)
          {
            uint64_t v426 = v428 + 1;
            if (__OFADD__(v428, 1)) {
              goto LABEL_351;
            }
            if (v426 >= v422) {
              break;
            }
            unint64_t v427 = *(void *)(v418 + 8 * v426);
            ++v428;
            if (v427) {
              goto LABEL_185;
            }
          }
        }
      }
    }
  }
LABEL_291:
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_58:
  swift_bridgeObjectRelease();
  if (!v684[2]) {
    goto LABEL_296;
  }
  uint64_t v190 = v671;
  _s12BiomeStreams13StorableValueOWOcTm_1(v669, v671, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
  char v191 = Description;
  char v192 = v672;
  uint64_t v193 = v678;
  Description[2](v672, v190, v678);
  _s12BiomeStreams13StorableValueOWOhTm_2(v190, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
  uint64_t v194 = MaterializedView.name.getter();
  uint64_t v196 = v195;
  ((void (*)(char *, ValueMetadata *))v191[1])(v192, v193);
  specialized _arrayForceCast<A, B>(_:)();
  uint64_t v725 = v197;
  static KeyedAggregationMetadataCache.columnNames(groupBySchema:payloadSchema:)();
  uint64_t v199 = v198;
  static String._createEmpty(withInitialCapacity:)(41);
  swift_bridgeObjectRelease();
  v741._rawValue = (void *)0xD000000000000010;
  unint64_t v742 = 0x800000018EBEA720;
  v200._uint64_t countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v194, v196, 36, 0xD000000000000022, (void *)0x800000018EBEA6C0);
  String.append(_:)(v200);
  swift_bridgeObjectRelease();
  v201._uint64_t countAndFlagsBits = 10272;
  v201._uint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v201);
  uint64_t v202 = specialized Array.count.getter(v199);
  uint64_t v715 = v199;
  if (v202)
  {
    uint64_t v737 = v196;
    uint64_t v743 = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v202);
    if (v202 < 0) {
      goto LABEL_345;
    }
    uint64_t v203 = (void **)(v199 + 40);
    uint64_t v204 = v202;
    do
    {
      uint64_t v205 = (uint64_t)*(v203 - 1);
      char v206 = *v203;
      swift_bridgeObjectRetain();
      static String._createEmpty(withInitialCapacity:)(4);
      swift_bridgeObjectRelease();
      uint64_t v739 = 34;
      unint64_t v740 = 0xE100000000000000;
      v207._uint64_t countAndFlagsBits = v205;
      v207._uint64_t object = v206;
      String.append(_:)(v207);
      v208._uint64_t countAndFlagsBits = 34;
      v208._uint64_t object = (void *)0xE100000000000000;
      String.append(_:)(v208);
      uint64_t v209 = String.init(stringInterpolation:)();
      uint64_t v211 = v210;
      swift_bridgeObjectRelease();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v212 = *(void *)(v743 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v212);
      uint64_t v213 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v212, v209, v211);
      destructiveProjectEnumData for StorableValue(v213, v214);
      v203 += 2;
      --v204;
    }
    while (v204);
    uint64_t v215 = v743;
  }
  else
  {
    uint64_t v215 = specialized static Array._allocateUninitialized(_:)(0);
  }
  uint64_t v739 = v215;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v246 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v248 = v247;
  swift_bridgeObjectRelease();
  v249._uint64_t countAndFlagsBits = v246;
  v249._uint64_t object = v248;
  String.append(_:)(v249);
  swift_bridgeObjectRelease();
  v250._uint64_t countAndFlagsBits = 0x4156202020200A29;
  v250._uint64_t object = (void *)0xEF2028205345554CLL;
  String.append(_:)(v250);
  if (v202)
  {
    uint64_t v739 = specialized ContiguousArray.init()();
    specialized ContiguousArray.reserveCapacity(_:)(v202);
    if (v202 < 0) {
      goto LABEL_346;
    }
    do
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v251 = *(void *)(v739 + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v251);
      uint64_t v252 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v251, 63, 0xE100000000000000);
      destructiveProjectEnumData for StorableValue(v252, v253);
      --v202;
    }
    while (v202);
    uint64_t v254 = v739;
  }
  else
  {
    uint64_t v254 = specialized static Array._allocateUninitialized(_:)(0);
  }
  uint64_t v739 = v254;
  uint64_t v255 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v257 = v256;
  swift_bridgeObjectRelease();
  v258._uint64_t countAndFlagsBits = v255;
  v258._uint64_t object = v257;
  String.append(_:)(v258);
  swift_bridgeObjectRelease();
  v259._uint64_t countAndFlagsBits = 10528;
  v259._uint64_t object = (void *)0xE200000000000000;
  String.append(_:)(v259);
  uint64_t v696 = String.init(stringInterpolation:)();
  v701 = v260;
  uint64_t v261 = v682;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v262 = 0;
  uint64_t v263 = (char *)(v684 + 8);
  uint64_t v264 = 1 << *((unsigned char *)v684 + 32);
  uint64_t v265 = -1;
  if (v264 < 64) {
    uint64_t v265 = ~(-1 << v264);
  }
  unint64_t v266 = v265 & v684[8];
  int64_t v267 = (unint64_t)(v264 + 63) >> 6;
  uint64_t v713 = v261 + 32;
  v697 = (uint64_t *)(v715 + 56);
  uint64_t v268 = v735;
  uint64_t v269 = (uint64_t)v706;
  unint64_t v270 = (uint64_t *)v705;
  v695 = (char *)(v684 + 8);
  int64_t v694 = v267;
  if (!v266) {
    goto LABEL_83;
  }
LABEL_82:
  unint64_t v699 = (v266 - 1) & v266;
  uint64_t v700 = v262;
  for (unint64_t m = __clz(__rbit64(v266)) | (v262 << 6); ; unint64_t m = __clz(__rbit64(v273)) + (v272 << 6))
  {
    uint64_t v275 = *(void *)(v684[6] + 8 * m);
    uint64_t v276 = *(void *)(v684[7] + 8 * m);
    uint64_t v277 = v673;
    _s12BiomeStreams13StorableValueOWOcTm_1(v669, v673, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
    uint64_t v278 = *(uint64_t **)(v277 + v664[11]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v726 = v278;
    swift_retain();
    _s12BiomeStreams13StorableValueOWOhTm_2(v277, (void (*)(void))type metadata accessor for KeyedAggregationMetadataCache);
    uint64_t v716 = v276;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized static Array._allocateUninitialized(_:)(0);
    uint64_t v279 = Dictionary.init(dictionaryLiteral:)();
    v729 = (uint64_t *)v275;
    uint64_t v280 = specialized Array.count.getter(v275);
    uint64_t v281 = v725;
    uint64_t v282 = specialized Array.count.getter(v725);
    if (v280 != v282)
    {
LABEL_292:
      uint64_t v595 = v282;
      swift_bridgeObjectRelease();
      type metadata accessor for MetadataSQLError(0);
      lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
      swift_allocError();
      uint64_t *v596 = v595;
      v596[1] = v280;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
LABEL_166:
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_release();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v733 = specialized Array.count.getter(v281);
    swift_bridgeObjectRetain();
    uint64_t v283 = 0;
    Swift::Int v284 = v718;
    uint64_t v285 = v270;
    while (1)
    {
      if (v283 == v733)
      {
        uint64_t v286 = 1;
        uint64_t v287 = v733;
      }
      else
      {
        uint64_t v288 = v725;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v283, 1, v725);
        outlined init with copy of UUID?(v288+ ((*(unsigned __int8 *)(v711 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v711 + 80))+ *(void *)(v711 + 72) * v283, v269, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        uint64_t v289 = v283 + 1;
        if (__OFADD__(v283, 1))
        {
LABEL_320:
          __break(1u);
LABEL_321:
          __break(1u);
LABEL_322:
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          goto LABEL_323;
        }
        uint64_t v290 = v279;
        uint64_t v291 = v285;
        uint64_t v292 = v687;
        _s10Foundation4UUIDVSgWObTm_0(v269, v687, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        uint64_t v293 = v269;
        uint64_t v294 = v283;
        uint64_t v295 = (uint64_t)&v710[*(int *)(v268 + 48)];
        uint64_t v296 = v292;
        uint64_t v285 = v291;
        uint64_t v279 = v290;
        _s10Foundation4UUIDVSgWObTm_0(v296, v295, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        uint64_t v297 = (uint64_t)v285 + *(int *)(v268 + 48);
        *uint64_t v285 = v294;
        uint64_t v269 = v293;
        _s10Foundation4UUIDVSgWObTm_0(v295, v297, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        uint64_t v286 = 0;
        uint64_t v287 = v289;
        Swift::Int v284 = v718;
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v285, v286, 1, v268);
      _s10Foundation4UUIDVSgWObTm_0((uint64_t)v285, (uint64_t)v284, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType))?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v284, 1, v268) == 1) {
        break;
      }
      v734 = (void *)v287;
      uint64_t v737 = *v284;
      uint64_t v298 = (uint64_t *)((char *)v284 + *(int *)(v268 + 48));
      uint64_t v300 = *v298;
      uint64_t v299 = v298[1];
      uint64_t v301 = v730;
      uint64_t v302 = *(int *)(v730 + 48);
      uint64_t v303 = (char *)v298 + v302;
      Swift::UInt v304 = v704;
      uint64_t v305 = (char *)v704 + v302;
      uint64_t *v704 = v300;
      v304[1] = v299;
      uint64_t v306 = (void *)v279;
      uint64_t v307 = type metadata accessor for SQLDataType();
      uint64_t v308 = (void (*)(char *, char *, ValueMetadata *))*((void *)v307[-1].Description + 4);
      v308(v305, v303, v307);
      Swift::UInt v309 = v727;
      char v310 = (char *)v727 + *(int *)(v301 + 48);
      uint64_t *v727 = v300;
      v309[1] = v299;
      v308(v310, v305, v307);
      uint64_t v311 = v737;
      uint64_t v312 = (char *)v729;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v737, 1, v729);
      uint64_t v313 = &v312[(*(unsigned __int8 *)(v736 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v736 + 80)];
      uint64_t v314 = *(void *)(v736 + 72);
      _s12BiomeStreams13StorableValueOWOcTm_1((uint64_t)&v313[v314 * v311], v728, (void (*)(void))type metadata accessor for StorableValue);
      swift_bridgeObjectRetain();
      char v315 = swift_isUniquelyReferenced_nonNull_native();
      v741._rawValue = v306;
      unint64_t v316 = specialized __RawDictionaryStorage.find<A>(_:)(v300, v299);
      uint64_t v318 = v306[2];
      BOOL v319 = (v317 & 1) == 0;
      Swift::Int v320 = v318 + v319;
      if (__OFADD__(v318, v319))
      {
        __break(1u);
        goto LABEL_313;
      }
      unint64_t v321 = v316;
      char v322 = v317;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v315, v320))
      {
        unint64_t v323 = specialized __RawDictionaryStorage.find<A>(_:)(v300, v299);
        if ((v322 & 1) != (v324 & 1)) {
          goto LABEL_354;
        }
        unint64_t v321 = v323;
      }
      uint64_t v279 = (uint64_t)v741._rawValue;
      if (v322)
      {
        unint64_t v325 = v314 * v321;
        uint64_t v326 = v703;
        _s12BiomeStreams13StorableValueOWObTm_1(*((void *)v741._rawValue + 7) + v325, v703, (void (*)(void))type metadata accessor for StorableValue);
        _s12BiomeStreams13StorableValueOWObTm_1(v728, *(void *)(v279 + 56) + v325, (void (*)(void))type metadata accessor for StorableValue);
        __swift_storeEnumTagSinglePayload(v326, 0, 1, v738);
      }
      else
      {
        *((void *)v741._rawValue + (v321 >> 6) + 8) |= 1 << v321;
        uint64_t v327 = (uint64_t *)(*(void *)(v279 + 48) + 16 * v321);
        *uint64_t v327 = v300;
        v327[1] = v299;
        _s12BiomeStreams13StorableValueOWObTm_1(v728, *(void *)(v279 + 56) + v314 * v321, (void (*)(void))type metadata accessor for StorableValue);
        uint64_t v328 = *(void *)(v279 + 16);
        BOOL v139 = __OFADD__(v328, 1);
        uint64_t v329 = v328 + 1;
        if (v139) {
          goto LABEL_321;
        }
        *(void *)(v279 + 16) = v329;
        uint64_t v326 = v703;
        __swift_storeEnumTagSinglePayload(v703, 1, 1, v738);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v326, &demangling cache variable for type metadata for StorableValue?);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?((uint64_t)v727, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      uint64_t v283 = (uint64_t)v734;
      uint64_t v268 = v735;
      uint64_t v269 = (uint64_t)v706;
      uint64_t v285 = (uint64_t *)v705;
      Swift::Int v284 = v718;
    }
    swift_bridgeObjectRelease();
    uint64_t v280 = specialized Array.count.getter(v716);
    uint64_t v330 = v682;
    uint64_t v282 = specialized Array.count.getter(v682);
    if (v280 != v282) {
      goto LABEL_292;
    }
    uint64_t v331 = specialized Array.count.getter(v330);
    if (v331) {
      break;
    }
    unint64_t v270 = v285;
LABEL_143:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v741._rawValue = (void *)specialized static Array._allocateUninitialized(_:)(0);
    uint64_t v385 = v715;
    uint64_t v386 = specialized Array.count.getter(v715);
    if (v386)
    {
      uint64_t v387 = v386;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v385);
      uint64_t v389 = *(void *)(v385 + 32);
      uint64_t v388 = *(void *)(v385 + 40);
      uint64_t v390 = *(void *)(v279 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v390 || (unint64_t v391 = specialized __RawDictionaryStorage.find<A>(_:)(v389, v388), (v392 & 1) == 0))
      {
LABEL_283:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
        swift_allocError();
        uint64_t *v589 = v389;
        v589[1] = v388;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        return swift_bridgeObjectRelease();
      }
      unint64_t v393 = v391;
      uint64_t v394 = v697;
      uint64_t v395 = 1;
      while (1)
      {
        int v396 = *(_DWORD *)(v279 + 36);
        swift_bridgeObjectRelease();
        if ((v393 & 0x8000000000000000) != 0 || (uint64_t)v393 >= 1 << *(unsigned char *)(v279 + 32)) {
          goto LABEL_338;
        }
        if (((*(void *)(v279 + 64 + ((v393 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v393) & 1) == 0) {
          goto LABEL_339;
        }
        if (v396 != *(_DWORD *)(v279 + 36)) {
          goto LABEL_340;
        }
        uint64_t v397 = v679;
        _s12BiomeStreams13StorableValueOWOcTm_1(*(void *)(v279 + 56) + *(void *)(v736 + 72) * v393, v679, (void (*)(void))type metadata accessor for StorableValue);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v398 = *((void *)v741._rawValue + 2);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v398);
        uint64_t v399 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v398, v397);
        destructiveProjectEnumData for StorableValue(v399, v400);
        if (v387 == v395)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v268 = v735;
          uint64_t v269 = (uint64_t)v706;
          unint64_t v270 = (uint64_t *)v705;
          goto LABEL_158;
        }
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v395, 1, v715);
        if (__OFADD__(v395, 1)) {
          goto LABEL_341;
        }
        uint64_t v389 = *(v394 - 1);
        uint64_t v388 = *v394;
        uint64_t v401 = *(void *)(v279 + 16);
        swift_bridgeObjectRetain();
        if (v401)
        {
          unint64_t v393 = specialized __RawDictionaryStorage.find<A>(_:)(v389, v388);
          ++v395;
          v394 += 2;
          if (v402) {
            continue;
          }
        }
        goto LABEL_283;
      }
    }
    swift_bridgeObjectRelease();
LABEL_158:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v403._uint64_t countAndFlagsBits = v696;
    v403._uint64_t object = v701;
    SQLExpressionEvaluator.execute(sql:bindingValues:)(v403, v741);
    uint64_t v686 = v404;
    if (v404) {
      goto LABEL_322;
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v263 = v695;
    int64_t v267 = v694;
    uint64_t v262 = v700;
    unint64_t v266 = v699;
    if (v699) {
      goto LABEL_82;
    }
LABEL_83:
    BOOL v139 = __OFADD__(v262, 1);
    uint64_t v272 = v262 + 1;
    if (v139) {
      goto LABEL_348;
    }
    if (v272 >= v267) {
      goto LABEL_295;
    }
    unint64_t v273 = *(void *)&v263[8 * v272];
    if (!v273)
    {
      uint64_t v274 = v272 + 1;
      if (v272 + 1 >= v267) {
        goto LABEL_295;
      }
      unint64_t v273 = *(void *)&v263[8 * v274];
      if (!v273)
      {
        uint64_t v274 = v272 + 2;
        if (v272 + 2 >= v267) {
          goto LABEL_295;
        }
        unint64_t v273 = *(void *)&v263[8 * v274];
        if (!v273)
        {
          uint64_t v274 = v272 + 3;
          if (v272 + 3 >= v267) {
            goto LABEL_295;
          }
          unint64_t v273 = *(void *)&v263[8 * v274];
          if (!v273)
          {
            uint64_t v274 = v272 + 4;
            if (v272 + 4 >= v267) {
              goto LABEL_295;
            }
            unint64_t v273 = *(void *)&v263[8 * v274];
            if (!v273)
            {
              while (1)
              {
                uint64_t v272 = v274 + 1;
                if (__OFADD__(v274, 1)) {
                  goto LABEL_352;
                }
                if (v272 >= v267) {
                  goto LABEL_295;
                }
                unint64_t v273 = *(void *)&v263[8 * v272];
                ++v274;
                if (v273) {
                  goto LABEL_95;
                }
              }
            }
          }
        }
      }
      uint64_t v272 = v274;
    }
LABEL_95:
    unint64_t v699 = (v273 - 1) & v273;
    uint64_t v700 = v272;
  }
  uint64_t v332 = v331;
  uint64_t v712 = v716 + 32;
  swift_bridgeObjectRetain();
  uint64_t v333 = 0;
  uint64_t v334 = v330;
  uint64_t v698 = v332;
  while (1)
  {
    uint64_t v335 = v285;
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v333, 1, v334);
    uint64_t v336 = *(uint64_t **)(v713 + 8 * v333);
    uint64_t v714 = v333 + 1;
    BOOL v337 = __OFADD__(v333, 1);
    swift_bridgeObjectRetain();
    if (v337) {
      break;
    }
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v333, 1, v716);
    uint64_t v338 = *(void *)(v712 + 8 * v333);
    swift_bridgeObjectRetain();
    uint64_t v339 = specialized Array.count.getter(v336);
    uint64_t v340 = v336;
    v724 = (char *)v339;
    if (v339)
    {
      char v341 = 0;
      uint64_t v342 = v690;
      v723 = (char *)v690 + *(int *)(v721 + 64);
      unint64_t v343 = (*(unsigned __int8 *)(v676 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v676 + 80);
      v702 = v340;
      uint64_t v344 = (uint64_t)v340 + v343;
      unint64_t k = *(char **)(v676 + 72);
      uint64_t v345 = v338;
      v722 = (void *)v338;
      while (1)
      {
        uint64_t v733 = v344;
        outlined init with copy of UUID?(v344, (uint64_t)v342, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
        if (__OFADD__(v341, 1)) {
          break;
        }
        v731 = (char *)v341 + 1;
        v732 = v341;
        v734 = (void *)v279;
        uint64_t v346 = v721;
        uint64_t v347 = v709;
        uint64_t v348 = (char *)v709 + *(int *)(v721 + 64);
        uint64_t v349 = *v342;
        uint64_t v350 = v342[1];
        uint64_t v352 = v342[2];
        uint64_t v351 = v342[3];
        uint64_t *v709 = v349;
        v347[1] = v350;
        v347[2] = v352;
        v347[3] = v351;
        uint64_t v353 = type metadata accessor for SQLDataType();
        uint64_t v354 = v353[-1].Description;
        (*((void (**)(char *, char *, ValueMetadata *))v354 + 4))(v348, v723, v353);
        uint64_t v355 = v689;
        uint64_t v356 = (char *)v689 + *(int *)(v346 + 64);
        uint64_t *v689 = v349;
        v355[1] = v350;
        uint64_t v737 = v352;
        v355[2] = v352;
        v355[3] = v351;
        uint64_t v357 = (void (*)(void))*((void *)v354 + 2);
        uint64_t v358 = v356;
        v719 = v348;
        int v359 = v357;
        v357();
        uint64_t v360 = *(void *)(v345 + 16);
        v720 = (void *)v349;
        if (v360)
        {
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain();
          unint64_t v361 = specialized __RawDictionaryStorage.find<A>(_:)(v349, v350);
          uint64_t v363 = (uint64_t)v683;
          if (v362)
          {
            _s12BiomeStreams13StorableValueOWOcTm_1(*(void *)(v345 + 56) + *(void *)(v736 + 72) * v361, (uint64_t)v683, (void (*)(void))type metadata accessor for StorableValue);
            uint64_t v364 = v363;
            uint64_t v365 = 0;
          }
          else
          {
            uint64_t v364 = (uint64_t)v683;
            uint64_t v365 = 1;
          }
          uint64_t v366 = v738;
          __swift_storeEnumTagSinglePayload(v364, v365, 1, v738);
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v363 = (uint64_t)v683;
          uint64_t v366 = v738;
          __swift_storeEnumTagSinglePayload((uint64_t)v683, 1, 1, v738);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        if (__swift_getEnumTagSinglePayload(v363, 1, v366) == 1)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined destroy of UUID?(v363, &demangling cache variable for type metadata for StorableValue?);
          uint64_t v738 = *((void *)v354 + 1);
          ((void (*)(char *, ValueMetadata *))v738)(v358, v353);
          uint64_t v736 = type metadata accessor for MetadataSQLError(0);
          lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
          uint64_t v686 = swift_allocError();
          uint64_t v406 = v405;
          uint64_t v407 = v662;
          uint64_t v408 = (char *)v662 + *(int *)(v721 + 64);
          uint64_t v409 = v720;
          int64_t *v662 = (int64_t)v720;
          v407[1] = v350;
          v407[2] = v737;
          v407[3] = v351;
          ((void (*)(char *, char *, ValueMetadata *))v359)(v408, v719, v353);
          swift_bridgeObjectRelease();
          *uint64_t v406 = v409;
          v406[1] = v350;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          ((void (*)(char *, ValueMetadata *))v738)(v408, v353);
          outlined destroy of UUID?((uint64_t)v709, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
          goto LABEL_166;
        }
        swift_bridgeObjectRelease();
        uint64_t v367 = v707;
        _s12BiomeStreams13StorableValueOWObTm_1(v363, v707, (void (*)(void))type metadata accessor for StorableValue);
        (*((void (**)(char *, ValueMetadata *))v354 + 1))(v358, v353);
        _s12BiomeStreams13StorableValueOWOcTm_1(v367, v708, (void (*)(void))type metadata accessor for StorableValue);
        v368 = v734;
        char v369 = swift_isUniquelyReferenced_nonNull_native();
        v741._rawValue = v368;
        uint64_t v370 = v737;
        unint64_t v371 = specialized __RawDictionaryStorage.find<A>(_:)(v737, v351);
        uint64_t v373 = v368[2];
        BOOL v374 = (v372 & 1) == 0;
        Swift::Int v375 = v373 + v374;
        if (__OFADD__(v373, v374)) {
          goto LABEL_319;
        }
        unint64_t v376 = v371;
        char v377 = v372;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
        if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v369, v375))
        {
          unint64_t v378 = specialized __RawDictionaryStorage.find<A>(_:)(v370, v351);
          if ((v377 & 1) != (v379 & 1)) {
            goto LABEL_354;
          }
          unint64_t v376 = v378;
        }
        uint64_t v279 = (uint64_t)v741._rawValue;
        if (v377)
        {
          unint64_t v380 = *(void *)(v736 + 72) * v376;
          uint64_t v381 = v688;
          _s12BiomeStreams13StorableValueOWObTm_1(*((void *)v741._rawValue + 7) + v380, v688, (void (*)(void))type metadata accessor for StorableValue);
          _s12BiomeStreams13StorableValueOWObTm_1(v708, *(void *)(v279 + 56) + v380, (void (*)(void))type metadata accessor for StorableValue);
          __swift_storeEnumTagSinglePayload(v381, 0, 1, v738);
        }
        else
        {
          *((void *)v741._rawValue + (v376 >> 6) + 8) |= 1 << v376;
          v382 = (uint64_t *)(*(void *)(v279 + 48) + 16 * v376);
          uint64_t *v382 = v370;
          v382[1] = v351;
          _s12BiomeStreams13StorableValueOWObTm_1(v708, *(void *)(v279 + 56) + *(void *)(v736 + 72) * v376, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v383 = *(void *)(v279 + 16);
          BOOL v139 = __OFADD__(v383, 1);
          uint64_t v384 = v383 + 1;
          if (v139) {
            goto LABEL_325;
          }
          *(void *)(v279 + 16) = v384;
          uint64_t v381 = v688;
          __swift_storeEnumTagSinglePayload(v688, 1, 1, v738);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
        outlined destroy of UUID?(v381, &demangling cache variable for type metadata for StorableValue?);
        _s12BiomeStreams13StorableValueOWOhTm_2(v707, (void (*)(void))type metadata accessor for StorableValue);
        swift_bridgeObjectRelease();
        outlined destroy of UUID?((uint64_t)v709, (uint64_t *)&demangling cache variable for type metadata for (metadataKey: String, columnName: String, dataType: SQLDataType));
        uint64_t v344 = (uint64_t)&k[v733];
        char v341 = (uint64_t *)((char *)v732 + 1);
        uint64_t v342 = v690;
        uint64_t v268 = v735;
        uint64_t v345 = (uint64_t)v722;
        if (v731 == v724)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v269 = (uint64_t)v706;
          uint64_t v285 = (uint64_t *)v705;
          uint64_t v332 = v698;
          goto LABEL_140;
        }
      }
      __break(1u);
LABEL_319:
      __break(1u);
      goto LABEL_320;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v285 = v335;
LABEL_140:
    uint64_t v333 = v714;
    uint64_t v334 = v682;
    if (v714 == v332)
    {
      unint64_t v270 = v285;
      swift_bridgeObjectRelease();
      goto LABEL_143;
    }
  }
LABEL_342:
  __break(1u);
LABEL_343:
  __break(1u);
LABEL_344:
  __break(1u);
LABEL_345:
  __break(1u);
LABEL_346:
  __break(1u);
LABEL_347:
  __break(1u);
LABEL_348:
  __break(1u);
LABEL_349:
  __break(1u);
LABEL_350:
  __break(1u);
LABEL_351:
  __break(1u);
LABEL_352:
  __break(1u);
LABEL_353:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
LABEL_354:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
LABEL_355:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *MatchingRecordCache;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t result;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  int64_t v103;
  void *rawValue;
  unint64_t v105;
  unint64_t i;
  int64_t v107;
  unint64_t v108;
  int64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  void *v115;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t v126;
  BOOL v127;
  uint64_t v128;
  char v129;
  unint64_t v130;
  char v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  BOOL v149;
  uint64_t v150;
  char v151;
  unint64_t v152;
  char v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (**v159)(char *, uint64_t, ValueMetadata *);
  char *v160;
  ValueMetadata *v161;
  uint64_t v162;
  int v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  Swift::String v170;
  Swift::String v171;
  Swift::String v172;
  uint64_t v173;
  uint64_t v174;
  void **v175;
  uint64_t v176;
  void *v177;
  Swift::String v178;
  Swift::String v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (**v188)(char *, uint64_t, ValueMetadata *);
  char *v189;
  ValueMetadata *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  char *v195;
  char *v196;
  Swift::String v197;
  Swift::String v198;
  uint64_t v199;
  void **v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  Swift::String v204;
  Swift::String v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  Swift::String v213;
  Swift::String v214;
  uint64_t v215;
  int64_t *v216;
  uint64_t v217;
  void **v218;
  uint64_t v219;
  void *v220;
  Swift::String v221;
  Swift::String v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  void *v231;
  void *v232;
  Swift::String v233;
  Swift::String v234;
  uint64_t v235;
  uint64_t PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm;
  uint64_t v237;
  void *v238;
  void *v239;
  Swift::String v240;
  Swift::String v241;
  void *v242;
  uint64_t v243;
  void *v244;
  void *v245;
  Swift::String v246;
  Swift::String v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  void *v253;
  void *v254;
  Swift::String v255;
  Swift::String v256;
  char *v257;
  uint64_t v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  int64_t v264;
  uint64_t v265;
  uint64_t v266;
  unint64_t v267;
  int64_t v268;
  unint64_t v269;
  int64_t v270;
  uint64_t v271;
  char *v272;
  uint64_t v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t v278;
  uint64_t v279;
  int64_t v280;
  uint64_t v281;
  int64_t v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t *v288;
  uint64_t *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  uint64_t *v295;
  char *v296;
  ValueMetadata *v297;
  void (*v298)(char *, char *, ValueMetadata *);
  uint64_t *v299;
  char *v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  char v305;
  unint64_t v306;
  char v307;
  uint64_t v308;
  BOOL v309;
  Swift::Int v310;
  unint64_t v311;
  char v312;
  Swift::Bool v313;
  uint64_t v314;
  unint64_t v315;
  char v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  uint64_t j;
  uint64_t v323;
  unint64_t v324;
  unint64_t v325;
  uint64_t v326;
  void *v327;
  uint64_t v328;
  ValueMetadata *v329;
  void *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  unint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  char *v340;
  char *v341;
  unint64_t v342;
  uint64_t v343;
  char v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  unint64_t v349;
  char v350;
  uint64_t v351;
  BOOL v352;
  Swift::Int v353;
  unint64_t v354;
  char v355;
  unint64_t v356;
  char v357;
  unint64_t v358;
  uint64_t v359;
  ValueMetadata *v360;
  char *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  unint64_t v365;
  char v366;
  unint64_t v367;
  uint64_t *v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  char v376;
  Swift::String v377;
  uint64_t v378;
  uint64_t v379;
  void *v380;
  void *v381;
  Swift::String v382;
  void *v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unint64_t v389;
  int64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  void *v401;
  uint64_t v402;
  int64_t v403;
  uint64_t *v404;
  uint64_t v405;
  int64_t v406;
  uint64_t v407;
  uint64_t v408;
  int64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  uint64_t *v420;
  char *v421;
  ValueMetadata *v422;
  void (*v423)(char *, char *, ValueMetadata *);
  uint64_t *v424;
  char *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  char v429;
  unint64_t v430;
  char v431;
  uint64_t v432;
  BOOL v433;
  Swift::Int v434;
  unint64_t v435;
  char v436;
  Swift::Bool v437;
  unint64_t v438;
  char v439;
  unint64_t v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  uint64_t v448;
  void *v449;
  void *v450;
  unint64_t v451;
  uint64_t v452;
  void *v453;
  uint64_t v454;
  ValueMetadata *v455;
  void *v456;
  uint64_t v457;
  uint64_t v458;
  ValueMetadata *v459;
  uint64_t v460;
  unint64_t v461;
  uint64_t v462;
  uint64_t *v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  char *v467;
  uint64_t v468;
  void *v469;
  unint64_t v470;
  uint64_t v471;
  char v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  char v476;
  unint64_t v477;
  char v478;
  uint64_t v479;
  BOOL v480;
  Swift::Int v481;
  unint64_t v482;
  char v483;
  unint64_t v484;
  char v485;
  unint64_t v486;
  uint64_t v487;
  ValueMetadata *v488;
  uint64_t v489;
  uint64_t v490;
  void *v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  unint64_t v496;
  char v497;
  unint64_t v498;
  uint64_t *v499;
  uint64_t v500;
  int v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  char v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  int v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unint64_t v531;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  Swift::String v537;
  uint64_t v538;
  uint64_t *v539;
  ValueMetadata *v540;
  uint64_t *v541;
  ValueMetadata *v542;
  uint64_t *v543;
  uint64_t *v544;
  uint64_t v545;
  void *v546;
  uint64_t v547;
  void *v548;
  uint64_t v549;
  uint64_t *v550;
  uint64_t v551;
  void *v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  void (**v557)(char *, uint64_t, ValueMetadata *);
  char *v558;
  ValueMetadata *v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  int64_t v563;
  int64_t v564;
  uint64_t v565;
  void *v566;
  void *v567;
  uint64_t v568;
  void *v569;
  void *v570;
  Swift::String v571;
  Swift::String v572;
  Swift::String v573;
  Swift::String v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  Swift::String *v579;
  uint64_t v580;
  Swift::String v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  void *v590;
  void *v591;
  Swift::String v592;
  Swift::String v593;
  uint64_t v594;
  void *v595;
  void *v596;
  uint64_t v597;
  Swift::String v598;
  unint64_t v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  char *v603;
  uint64_t v604;
  void *v605;
  uint64_t v606;
  uint64_t *v607;
  unint64_t v608;
  uint64_t v609;
  void *v610;
  uint64_t v611;
  char *v612;
  Swift::String *v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  int *v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  char *v621;
  uint64_t v622;
  uint64_t v623;
  char *v624;
  uint64_t v625;
  unint64_t v626;
  uint64_t v627;
  void (**Description)(char *, uint64_t, ValueMetadata *);
  ValueMetadata *v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t v632;
  void *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t *v637;
  void *v638;
  uint64_t v639;
  void *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t *v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  void *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t *v651;
  char *v652;
  uint64_t *v653;
  uint64_t *v654;
  int64_t *v655;
  char *v656;
  char *v657;
  char *v658;
  uint64_t v659;
  char *v660;
  char *v661;
  uint64_t *v662;
  uint64_t v663;
  uint64_t *v664;
  char *v665;
  char *v666;
  uint64_t v667;
  char *v668;
  uint64_t *v669;
  uint64_t v670;
  uint64_t v671;
  uint64_t v672;
  int64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  unint64_t v678;
  Swift::OpaquePointer v679;
  unint64_t v680;
  uint64_t v681;

  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
  uint64_t v3 = MEMORY[0x1F4188790](v2 - 8);
  uint64_t v638 = (uint64_t *)((char *)&v602 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  Swift::String v637 = (uint64_t *)((char *)&v602 - v6);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v660 = (char *)&v602 - v8;
  MEMORY[0x1F4188790](v7);
  uint64_t v644 = (uint64_t *)((char *)&v602 - v9);
  uint64_t v675 = type metadata accessor for StorableValue(0);
  v672 = *(void *)(v675 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](v675);
  uint64_t v646 = (uint64_t)&v602 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v645 = (uint64_t)&v602 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v663 = (uint64_t)&v602 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  uint64_t v630 = (uint64_t)&v602 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v632 = (uint64_t)&v602 - v19;
  uint64_t v20 = MEMORY[0x1F4188790](v18);
  uint64_t v631 = (uint64_t)&v602 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  uint64_t v651 = (uint64_t *)((char *)&v602 - v23);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  unint64_t v650 = (uint64_t)&v602 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v670 = (uint64_t)&v602 - v26;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v28 = MEMORY[0x1F4188790](v27 - 8);
  v634 = (uint64_t)&v602 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  v635 = (uint64_t)&v602 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v652 = (char *)&v602 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v641 = (uint64_t)&v602 - v35;
  uint64_t v36 = MEMORY[0x1F4188790](v34);
  unint64_t v643 = (uint64_t)&v602 - v37;
  MEMORY[0x1F4188790](v36);
  v661 = (char *)&v602 - v38;
  unint64_t v674 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType)));
  MEMORY[0x1F4188790](v674);
  v658 = (char *)&v602 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v667 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
  v659 = *(void *)(v667 - 8);
  uint64_t v40 = MEMORY[0x1F4188790](v667);
  uint64_t v42 = (Swift::String *)((char *)&v602 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v43 = MEMORY[0x1F4188790](v40);
  uint64_t v45 = (char *)&v602 - v44;
  uint64_t v46 = MEMORY[0x1F4188790](v43);
  v653 = (uint64_t *)((char *)&v602 - v47);
  uint64_t v48 = MEMORY[0x1F4188790](v46);
  v664 = (uint64_t *)((char *)&v602 - v49);
  uint64_t v50 = MEMORY[0x1F4188790](v48);
  uint64_t v656 = (char *)&v602 - v51;
  unint64_t v52 = MEMORY[0x1F4188790](v50);
  Swift::String v642 = (uint64_t)&v602 - v53;
  uint64_t v54 = MEMORY[0x1F4188790](v52);
  v662 = (uint64_t *)((char *)&v602 - v55);
  uint64_t v56 = MEMORY[0x1F4188790](v54);
  uint64_t v669 = (uint64_t *)((char *)&v602 - v57);
  uint64_t v58 = MEMORY[0x1F4188790](v56);
  v668 = (char *)&v602 - v59;
  MEMORY[0x1F4188790](v58);
  v647 = (uint64_t)&v602 - v60;
  uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType))?);
  uint64_t v62 = MEMORY[0x1F4188790](v61 - 8);
  uint64_t v655 = (uint64_t *)((char *)&v602 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v64 = MEMORY[0x1F4188790](v62);
  uint64_t v654 = (uint64_t *)((char *)&v602 - v65);
  uint64_t v66 = MEMORY[0x1F4188790](v64);
  uint64_t v665 = (char *)&v602 - v67;
  MEMORY[0x1F4188790](v66);
  uint64_t v666 = (char *)&v602 - v68;
  uint64_t v629 = type metadata accessor for MaterializedView();
  Swift::Int Description = (void (**)(char *, uint64_t, ValueMetadata *))v629[-1].Description;
  uint64_t v69 = MEMORY[0x1F4188790](v629);
  uint64_t v621 = (char *)&v602 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = MEMORY[0x1F4188790](v69);
  uint64_t v624 = (char *)&v602 - v72;
  MEMORY[0x1F4188790](v71);
  uint64_t v657 = (char *)&v602 - v73;
  uint64_t MatchingRecordCache = (int *)type metadata accessor for KeyedFirstMatchingRecordCache(0);
  uint64_t v75 = MEMORY[0x1F4188790](MatchingRecordCache);
  uint64_t v620 = (uint64_t)&v602 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = MEMORY[0x1F4188790](v75);
  uint64_t v619 = (uint64_t)&v602 - v78;
  uint64_t v79 = MEMORY[0x1F4188790](v77);
  Swift::String v625 = (uint64_t)&v602 - v80;
  Swift::Int v81 = MEMORY[0x1F4188790](v79);
  v623 = (uint64_t)&v602 - v82;
  uint64_t v83 = MEMORY[0x1F4188790](v81);
  uint64_t v627 = (uint64_t)&v602 - v84;
  uint64_t v85 = MEMORY[0x1F4188790](v83);
  uint64_t v648 = (uint64_t *)((char *)&v602 - v86);
  uint64_t v87 = MEMORY[0x1F4188790](v85);
  uint64_t v89 = (char *)&v602 - v88;
  MEMORY[0x1F4188790](v87);
  uint64_t v91 = (char *)&v602 - v90;
  _s12BiomeStreams13StorableValueOWOcTm_1(v0, (uint64_t)&v602 - v90, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
  uint64_t v92 = *(void *)&v91[MatchingRecordCache[12]];
  swift_bridgeObjectRetain();
  uint64_t result = _s12BiomeStreams13StorableValueOWOhTm_2((uint64_t)v91, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
  if (!v92) {
    return result;
  }
  uint64_t v94 = v1 + MatchingRecordCache[7];
  if (!*(void *)(*(void *)v94 + 16)) {
    return swift_bridgeObjectRelease();
  }
  v613 = v42;
  uint64_t v95 = v1;
  uint64_t v96 = v94;
  specialized static KeyedQueryPlannerMetadataCache.groupBySchema(groupByFields:)();
  uint64_t v626 = v97;
  swift_bridgeObjectRelease();
  uint64_t v622 = v95;
  _s12BiomeStreams13StorableValueOWOcTm_1(v95, (uint64_t)v89, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
  Swift::String v617 = MatchingRecordCache;
  v649 = *(void *)&v89[MatchingRecordCache[13]];
  swift_bridgeObjectRetain();
  _s12BiomeStreams13StorableValueOWOhTm_2((uint64_t)v89, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
  v614 = v96;
  uint64_t v98 = *(void *)v96;
  uint64_t v99 = *(void *)(*(void *)v96 + 64);
  uint64_t v671 = *(void *)v96 + 64;
  uint64_t v100 = 1 << *(unsigned char *)(v98 + 32);
  uint64_t v101 = -1;
  if (v100 < 64) {
    uint64_t v101 = ~(-1 << v100);
  }
  uint64_t v102 = v101 & v99;
  uint64_t v673 = (unint64_t)(v100 + 63) >> 6;
  uint64_t v676 = v98;
  swift_bridgeObjectRetain();
  uint64_t v103 = 0;
  rawValue = (void *)MEMORY[0x1E4FBC868];
  v640 = (void *)MEMORY[0x1E4FBC868];
  uint64_t v612 = v45;
  if (!v102) {
    goto LABEL_7;
  }
LABEL_6:
  uint64_t v105 = __clz(__rbit64(v102));
  v102 &= v102 - 1;
  for (unint64_t i = v105 | (v103 << 6); ; unint64_t i = __clz(__rbit64(v108)) + (v103 << 6))
  {
    uint64_t v110 = *(void *)(*(void *)(v676 + 48) + 8 * i);
    uint64_t v111 = *(void *)(v676 + 56) + 24 * i;
    unint64_t v112 = *(unsigned char *)v111;
    uint64_t v113 = *(void *)(v111 + 8);
    uint64_t v114 = *(unsigned char *)(v111 + 16);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    if (v114)
    {
      unint64_t v115 = rawValue;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v679._rawValue = v115;
      specialized __RawDictionaryStorage.find<A>(_:)();
      uint64_t v125 = v124;
      uint64_t v126 = v115[2];
      uint64_t v127 = (v117 & 1) == 0;
      uint64_t v128 = v126 + v127;
      if (__OFADD__(v126, v127))
      {
        __break(1u);
LABEL_314:
        uint64_t v545 = v128;
        swift_bridgeObjectRelease();
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
        swift_allocError();
        *uint64_t v546 = v611;
        v546[1] = v545;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        goto LABEL_306;
      }
      unint64_t v129 = v117;
      if (v115[3] >= v128)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], ChangeRecord>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v128, isUniquelyReferenced_nonNull_native, v118, v119, v120, v121, v122, v123, v602, (uint64_t)v603, v604, (uint64_t)v605, v606, (uint64_t)v607, v608, v609, (uint64_t)v610, v611, (uint64_t)v612,
          (uint64_t)v613,
          v614,
          v615);
        specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v129 & 1) != (v131 & 1)) {
          goto LABEL_377;
        }
        uint64_t v125 = v130;
      }
      rawValue = v679._rawValue;
      if (v129)
      {
        BOOL v132 = *((void *)v679._rawValue + 7);
LABEL_32:
        uint64_t v133 = v132 + 16 * v125;
        swift_bridgeObjectRelease();
        *(unsigned char *)uint64_t v133 = v112;
        *(void *)(v133 + _Block_object_dispose(&a9, 8) = v113;
        goto LABEL_36;
      }
      *((void *)v679._rawValue + (v125 >> 6) + 8) |= 1 << v125;
      *(void *)(rawValue[6] + 8 * v125) = v110;
      char v134 = rawValue[7] + 16 * v125;
      *(unsigned char *)char v134 = v112;
      *(void *)(v134 + _Block_object_dispose(&a9, 8) = v113;
      unint64_t v135 = rawValue[2];
      char v136 = __OFADD__(v135, 1);
      uint64_t v137 = v135 + 1;
      if (v136)
      {
        __break(1u);
LABEL_317:
        __break(1u);
LABEL_318:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_57:
        swift_bridgeObjectRelease();
        if (!v640[2]) {
          goto LABEL_323;
        }
        uint64_t v187 = v623;
        _s12BiomeStreams13StorableValueOWOcTm_1(v622, v623, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
        uint64_t v188 = Description;
        uint64_t v189 = v624;
        uint64_t v190 = v629;
        Description[2](v624, v187, v629);
        _s12BiomeStreams13StorableValueOWOhTm_2(v187, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
        char v191 = MaterializedView.name.getter();
        uint64_t v193 = v192;
        ((void (*)(char *, ValueMetadata *))v188[1])(v189, v190);
        specialized _arrayForceCast<A, B>(_:)();
        uint64_t v669 = v194;
        static KeyedFirstMatchingRecordCache.columnNames(groupBySchema:payloadSchema:)();
        uint64_t v196 = v195;
        static String._createEmpty(withInitialCapacity:)(41);
        swift_bridgeObjectRelease();
        v679._rawValue = (void *)0xD000000000000010;
        uint64_t v680 = 0x800000018EBEA720;
        v197._uint64_t countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v191, v193, 27, 0xD000000000000019, (void *)0x800000018EBEA6A0);
        String.append(_:)(v197);
        swift_bridgeObjectRelease();
        v198._uint64_t countAndFlagsBits = 10272;
        v198._uint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v198);
        uint64_t v199 = specialized Array.count.getter(v196);
        uint64_t v666 = v196;
        if (v199)
        {
          uint64_t v676 = v193;
          uint64_t v681 = specialized ContiguousArray.init()();
          specialized ContiguousArray.reserveCapacity(_:)(v199);
          if (v199 < 0) {
            goto LABEL_367;
          }
          Swift::String v200 = (void **)(v196 + 40);
          Swift::String v201 = v199;
          do
          {
            uint64_t v202 = (uint64_t)*(v200 - 1);
            uint64_t v203 = *v200;
            swift_bridgeObjectRetain();
            static String._createEmpty(withInitialCapacity:)(4);
            swift_bridgeObjectRelease();
            v677 = 34;
            v678 = 0xE100000000000000;
            v204._uint64_t countAndFlagsBits = v202;
            v204._uint64_t object = v203;
            String.append(_:)(v204);
            v205._uint64_t countAndFlagsBits = 34;
            v205._uint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v205);
            char v206 = String.init(stringInterpolation:)();
            Swift::String v208 = v207;
            swift_bridgeObjectRelease();
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v209 = *(void *)(v681 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v209);
            uint64_t v210 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v209, v206, v208);
            destructiveProjectEnumData for StorableValue(v210, v211);
            v200 += 2;
            --v201;
          }
          while (v201);
          uint64_t v212 = v681;
        }
        else
        {
          uint64_t v212 = specialized static Array._allocateUninitialized(_:)(0);
        }
        v677 = v212;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
        lazy protocol witness table accessor for type [String] and conformance [A]();
        Swift::String v243 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v245 = v244;
        swift_bridgeObjectRelease();
        v246._uint64_t countAndFlagsBits = v243;
        v246._uint64_t object = v245;
        String.append(_:)(v246);
        swift_bridgeObjectRelease();
        v247._uint64_t countAndFlagsBits = 0x4156202020200A29;
        v247._uint64_t object = (void *)0xEF2028205345554CLL;
        String.append(_:)(v247);
        if (v199)
        {
          v677 = specialized ContiguousArray.init()();
          specialized ContiguousArray.reserveCapacity(_:)(v199);
          if (v199 < 0) {
            goto LABEL_368;
          }
          do
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            uint64_t v248 = *(void *)(v677 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v248);
            Swift::String v249 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v248, 63, 0xE100000000000000);
            destructiveProjectEnumData for StorableValue(v249, v250);
            --v199;
          }
          while (v199);
          uint64_t v251 = v677;
        }
        else
        {
          uint64_t v251 = specialized static Array._allocateUninitialized(_:)(0);
        }
        v677 = v251;
        uint64_t v252 = BidirectionalCollection<>.joined(separator:)();
        uint64_t v254 = v253;
        swift_bridgeObjectRelease();
        v255._uint64_t countAndFlagsBits = v252;
        v255._uint64_t object = v254;
        String.append(_:)(v255);
        swift_bridgeObjectRelease();
        v256._uint64_t countAndFlagsBits = 10528;
        v256._uint64_t object = (void *)0xE200000000000000;
        String.append(_:)(v256);
        unint64_t v650 = String.init(stringInterpolation:)();
        v661 = v257;
        Swift::String v258 = v649;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        Swift::String v259 = 0;
        Swift::UInt v260 = (uint64_t)(v640 + 8);
        uint64_t v261 = 1 << *((unsigned char *)v640 + 32);
        if (v261 < 64) {
          uint64_t v262 = ~(-1 << v261);
        }
        else {
          uint64_t v262 = -1;
        }
        uint64_t v263 = v262 & v640[8];
        uint64_t v264 = (unint64_t)(v261 + 63) >> 6;
        uint64_t v665 = (char *)(v258 + 64);
        uint64_t v651 = (uint64_t *)(v666 + 56);
        uint64_t v265 = v674;
        unint64_t v266 = (uint64_t)v656;
        uint64_t v648 = v640 + 8;
        v647 = v264;
        if (v263) {
          goto LABEL_82;
        }
LABEL_83:
        char v136 = __OFADD__(v259, 1);
        uint64_t v268 = (int64_t)(v259 + 1);
        if (v136) {
          goto LABEL_370;
        }
        if (v268 >= v264) {
          goto LABEL_322;
        }
        uint64_t v269 = *(void *)(v260 + 8 * v268);
        if (!v269)
        {
          unint64_t v270 = v268 + 1;
          if (v268 + 1 >= v264) {
            goto LABEL_322;
          }
          uint64_t v269 = *(void *)(v260 + 8 * v270);
          if (v269) {
            goto LABEL_94;
          }
          unint64_t v270 = v268 + 2;
          if (v268 + 2 >= v264) {
            goto LABEL_322;
          }
          uint64_t v269 = *(void *)(v260 + 8 * v270);
          if (v269) {
            goto LABEL_94;
          }
          unint64_t v270 = v268 + 3;
          if (v268 + 3 >= v264) {
            goto LABEL_322;
          }
          uint64_t v269 = *(void *)(v260 + 8 * v270);
          if (v269) {
            goto LABEL_94;
          }
          unint64_t v270 = v268 + 4;
          if (v268 + 4 >= v264) {
            goto LABEL_322;
          }
          uint64_t v269 = *(void *)(v260 + 8 * v270);
          if (v269)
          {
LABEL_94:
            uint64_t v268 = v270;
          }
          else
          {
            do
            {
              uint64_t v268 = v270 + 1;
              if (__OFADD__(v270, 1)) {
                goto LABEL_376;
              }
              if (v268 >= v264) {
                goto LABEL_322;
              }
              uint64_t v269 = *(void *)(v260 + 8 * v268);
              ++v270;
            }
            while (!v269);
          }
        }
        uint64_t v657 = (char *)((v269 - 1) & v269);
        uint64_t v660 = (char *)v268;
        int64_t v267 = __clz(__rbit64(v269)) + (v268 << 6);
LABEL_96:
        Swift::UInt v271 = *(void *)(v640[6] + 8 * v267);
        uint64_t v272 = *(char **)(v640[7] + 16 * v267 + 8);
        unint64_t v273 = v625;
        _s12BiomeStreams13StorableValueOWOcTm_1(v622, v625, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
        uint64_t v274 = *(uint64_t **)(v273 + v617[11]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v662 = v274;
        swift_retain();
        _s12BiomeStreams13StorableValueOWOhTm_2(v273, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
        v668 = v272;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        specialized static Array._allocateUninitialized(_:)(0);
        uint64_t v275 = Dictionary.init(dictionaryLiteral:)();
        uint64_t v671 = v271;
        uint64_t v276 = specialized Array.count.getter(v271);
        uint64_t v277 = v669;
        uint64_t v278 = specialized Array.count.getter(v669);
        if (v276 != v278)
        {
          uint64_t v549 = v278;
          swift_bridgeObjectRelease();
          type metadata accessor for MetadataSQLError(0);
          lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
          swift_allocError();
          *char v550 = v549;
          v550[1] = v276;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          goto LABEL_310;
        }
        uint64_t v279 = specialized Array.count.getter(v277);
        swift_bridgeObjectRetain();
        uint64_t v280 = 0;
        uint64_t v670 = v279;
        while (1)
        {
          if (v280 == v279)
          {
            uint64_t v281 = 1;
            uint64_t v282 = v279;
            uint64_t v283 = (uint64_t)v655;
          }
          else
          {
            Swift::Int v284 = v669;
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v280, 1, v669);
            outlined init with copy of UUID?((uint64_t)v284+ ((*(unsigned __int8 *)(v659 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v659 + 80))+ *(void *)(v659 + 72) * v280, v266, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
            if (__OFADD__(v280, 1))
            {
              __break(1u);
LABEL_344:
              __break(1u);
LABEL_345:
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
LABEL_346:
              swift_bridgeObjectRelease();
              swift_release();
              return swift_bridgeObjectRelease();
            }
            uint64_t v285 = v642;
            _s10Foundation4UUIDVSgWObTm_0(v266, v642, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
            uint64_t v286 = (uint64_t)&v658[*(int *)(v265 + 48)];
            _s10Foundation4UUIDVSgWObTm_0(v285, v286, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
            uint64_t v283 = (uint64_t)v655;
            uint64_t v287 = (uint64_t)v655 + *(int *)(v265 + 48);
            *uint64_t v655 = v280;
            _s10Foundation4UUIDVSgWObTm_0(v286, v287, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
            uint64_t v281 = 0;
            uint64_t v282 = v280 + 1;
          }
          __swift_storeEnumTagSinglePayload(v283, v281, 1, v265);
          uint64_t v288 = v654;
          _s10Foundation4UUIDVSgWObTm_0(v283, (uint64_t)v654, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType))?);
          if (__swift_getEnumTagSinglePayload((uint64_t)v288, 1, v265) == 1) {
            break;
          }
          uint64_t v673 = v282;
          uint64_t v676 = *v288;
          uint64_t v289 = (uint64_t *)((char *)v288 + *(int *)(v265 + 48));
          uint64_t v291 = *v289;
          uint64_t v290 = v289[1];
          uint64_t v292 = v667;
          uint64_t v293 = *(int *)(v667 + 48);
          uint64_t v294 = (char *)v289 + v293;
          uint64_t v295 = v653;
          uint64_t v296 = (char *)v653 + v293;
          void *v653 = v291;
          v295[1] = v290;
          uint64_t v297 = type metadata accessor for SQLDataType();
          uint64_t v298 = (void (*)(char *, char *, ValueMetadata *))*((void *)v297[-1].Description + 4);
          v298(v296, v294, v297);
          uint64_t v299 = v664;
          uint64_t v300 = (char *)v664 + *(int *)(v292 + 48);
          int *v664 = v291;
          v299[1] = v290;
          v298(v300, v296, v297);
          uint64_t v301 = v676;
          uint64_t v302 = v671;
          specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v676, 1, v671);
          uint64_t v303 = v302 + ((*(unsigned __int8 *)(v672 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v672 + 80));
          Swift::UInt v304 = *(void *)(v672 + 72);
          _s12BiomeStreams13StorableValueOWOcTm_1(v303 + v304 * v301, v663, (void (*)(void))type metadata accessor for StorableValue);
          swift_bridgeObjectRetain();
          uint64_t v305 = swift_isUniquelyReferenced_nonNull_native();
          v679._rawValue = (void *)v275;
          uint64_t v306 = specialized __RawDictionaryStorage.find<A>(_:)(v291, v290);
          uint64_t v308 = *(void *)(v275 + 16);
          Swift::UInt v309 = (v307 & 1) == 0;
          char v310 = v308 + v309;
          if (__OFADD__(v308, v309))
          {
            __break(1u);
            goto LABEL_311;
          }
          uint64_t v311 = v306;
          uint64_t v312 = v307;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
          uint64_t v313 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v305, v310);
          uint64_t v314 = (uint64_t)v652;
          unint64_t v266 = (uint64_t)v656;
          if (v313)
          {
            char v315 = specialized __RawDictionaryStorage.find<A>(_:)(v291, v290);
            if ((v312 & 1) != (v316 & 1)) {
              goto LABEL_378;
            }
            uint64_t v311 = v315;
          }
          uint64_t v275 = (uint64_t)v679._rawValue;
          if (v312)
          {
            char v317 = v304 * v311;
            _s12BiomeStreams13StorableValueOWObTm_1(*((void *)v679._rawValue + 7) + v317, v314, (void (*)(void))type metadata accessor for StorableValue);
            _s12BiomeStreams13StorableValueOWObTm_1(v663, *(void *)(v275 + 56) + v317, (void (*)(void))type metadata accessor for StorableValue);
            __swift_storeEnumTagSinglePayload(v314, 0, 1, v675);
          }
          else
          {
            specialized _NativeDictionary._insert(at:key:value:)(v311, v291, v290, v663, (uint64_t)v679._rawValue);
            __swift_storeEnumTagSinglePayload(v314, 1, 1, v675);
            swift_bridgeObjectRetain();
          }
          uint64_t v279 = v670;
          uint64_t v280 = v673;
          swift_bridgeObjectRelease();
          outlined destroy of UUID?(v314, &demangling cache variable for type metadata for StorableValue?);
          swift_bridgeObjectRelease();
          outlined destroy of UUID?((uint64_t)v664, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
          uint64_t v265 = v674;
        }
        swift_bridgeObjectRelease();
        uint64_t v318 = v649;
        if (*((void *)v668 + 2) != *(void *)(v649 + 16))
        {
          swift_bridgeObjectRelease();
          type metadata accessor for MetadataSQLError(0);
          lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
          swift_allocError();
          uint64_t v551 = *((void *)v668 + 2);
          *uint64_t v552 = *(void *)(v318 + 16);
          v552[1] = v551;
          swift_storeEnumTagMultiPayload();
          swift_willThrow();
          goto LABEL_310;
        }
        BOOL v319 = 1 << *(unsigned char *)(v649 + 32);
        if (v319 < 64) {
          Swift::Int v320 = ~(-1 << v319);
        }
        else {
          Swift::Int v320 = -1;
        }
        unint64_t v321 = v320 & *(void *)(v649 + 64);
        uint64_t v673 = (unint64_t)(v319 + 63) >> 6;
        uint64_t v670 = v673 - 1;
        swift_bridgeObjectRetain();
        for (unint64_t j = 0; ; unint64_t j = v676)
        {
          unint64_t v323 = (uint64_t)v638;
          if (v321)
          {
            char v324 = __clz(__rbit64(v321));
            v321 &= v321 - 1;
            uint64_t v676 = j;
            unint64_t v325 = v324 | (j << 6);
            goto LABEL_118;
          }
          uint64_t v333 = j + 1;
          if (__OFADD__(j, 1)) {
            goto LABEL_353;
          }
          if (v333 >= v673) {
            goto LABEL_129;
          }
          uint64_t v334 = *(void *)&v665[8 * v333];
          if (v334) {
            goto LABEL_122;
          }
          j += 2;
          if (v333 + 1 >= v673) {
            goto LABEL_153;
          }
          uint64_t v334 = *(void *)&v665[8 * j];
          if (v334) {
            goto LABEL_125;
          }
          if (v333 + 2 >= v673)
          {
LABEL_129:
            uint64_t v676 = j;
          }
          else
          {
            uint64_t v334 = *(void *)&v665[8 * v333 + 16];
            if (v334)
            {
              v333 += 2;
LABEL_122:
              unint64_t v321 = (v334 - 1) & v334;
              unint64_t v325 = __clz(__rbit64(v334)) + (v333 << 6);
              uint64_t v676 = v333;
LABEL_118:
              uint64_t v326 = *(void *)(v649 + 56);
              uint64_t v327 = (void *)(*(void *)(v649 + 48) + 16 * v325);
              uint64_t v328 = v327[1];
              *uint64_t v638 = *v327;
              *(void *)(v323 + _Block_object_dispose(&a9, 8) = v328;
              uint64_t v329 = type metadata accessor for SQLDataType();
              uint64_t v330 = v329[-1].Description;
              uint64_t v331 = v326 + v330[9] * v325;
              uint64_t v332 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
              ((void (*)(uint64_t, uint64_t, ValueMetadata *))v330[2])(v323 + *(int *)(v332 + 48), v331, v329);
              __swift_storeEnumTagSinglePayload(v323, 0, 1, v332);
              swift_bridgeObjectRetain();
              uint64_t v265 = v674;
              goto LABEL_131;
            }
            unint64_t j = v333 + 3;
            if (v333 + 3 < v673)
            {
              uint64_t v334 = *(void *)&v665[8 * j];
              if (v334)
              {
LABEL_125:
                uint64_t v333 = j;
                goto LABEL_122;
              }
              while (1)
              {
                uint64_t v333 = j + 1;
                if (__OFADD__(j, 1)) {
                  goto LABEL_374;
                }
                if (v333 >= v673) {
                  break;
                }
                uint64_t v334 = *(void *)&v665[8 * v333];
                ++j;
                if (v334) {
                  goto LABEL_122;
                }
              }
              uint64_t v333 = v670;
LABEL_153:
              uint64_t v676 = v333;
              goto LABEL_130;
            }
            uint64_t v676 = v333 + 2;
          }
LABEL_130:
          uint64_t v335 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
          __swift_storeEnumTagSinglePayload(v323, 1, 1, v335);
          unint64_t v321 = 0;
LABEL_131:
          uint64_t v336 = v637;
          _s10Foundation4UUIDVSgWObTm_0(v323, (uint64_t)v637, &demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
          BOOL v337 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
          if (__swift_getEnumTagSinglePayload((uint64_t)v336, 1, v337) == 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_release();
            v679._rawValue = (void *)specialized static Array._allocateUninitialized(_:)(0);
            unint64_t v361 = v666;
            char v362 = specialized Array.count.getter(v666);
            if (!v362)
            {
              swift_bridgeObjectRelease();
              unint64_t v266 = (uint64_t)v656;
              goto LABEL_169;
            }
            uint64_t v363 = v362;
            specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v361);
            uint64_t v292 = *((void *)v361 + 4);
            uint64_t v290 = *((void *)v361 + 5);
            uint64_t v364 = *(void *)(v275 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (!v364 || (uint64_t v365 = specialized __RawDictionaryStorage.find<A>(_:)(v292, v290), (v366 & 1) == 0))
            {
LABEL_311:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              type metadata accessor for MetadataSQLError(0);
              lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
              swift_allocError();
              *uint64_t v543 = v292;
              v543[1] = v290;
              swift_storeEnumTagMultiPayload();
              swift_willThrow();
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              return swift_bridgeObjectRelease();
            }
            uint64_t v367 = v365;
            v368 = v651;
            char v369 = 1;
            while (2)
            {
              uint64_t v370 = *(_DWORD *)(v275 + 36);
              swift_bridgeObjectRelease();
              if ((v367 & 0x8000000000000000) != 0 || (uint64_t)v367 >= 1 << *(unsigned char *)(v275 + 32)) {
                goto LABEL_361;
              }
              if (((*(void *)(v275 + 64 + ((v367 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v367) & 1) == 0)
              {
LABEL_362:
                __break(1u);
LABEL_363:
                __break(1u);
LABEL_364:
                __break(1u);
LABEL_365:
                __break(1u);
LABEL_366:
                __break(1u);
LABEL_367:
                __break(1u);
LABEL_368:
                __break(1u);
LABEL_369:
                __break(1u);
LABEL_370:
                __break(1u);
                goto LABEL_371;
              }
              if (v370 != *(_DWORD *)(v275 + 36)) {
                goto LABEL_363;
              }
              unint64_t v371 = v630;
              _s12BiomeStreams13StorableValueOWOcTm_1(*(void *)(v275 + 56) + *(void *)(v672 + 72) * v367, v630, (void (*)(void))type metadata accessor for StorableValue);
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
              char v372 = *((void *)v679._rawValue + 2);
              specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v372);
              uint64_t v373 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v372, v371);
              destructiveProjectEnumData for StorableValue(v373, v374);
              if (v363 != v369)
              {
                specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v369, 1, v666);
                if (__OFADD__(v369, 1)) {
                  goto LABEL_364;
                }
                uint64_t v292 = *(v368 - 1);
                uint64_t v290 = *v368;
                Swift::Int v375 = *(void *)(v275 + 16);
                swift_bridgeObjectRetain();
                if (!v375) {
                  goto LABEL_311;
                }
                uint64_t v367 = specialized __RawDictionaryStorage.find<A>(_:)(v292, v290);
                ++v369;
                v368 += 2;
                if ((v376 & 1) == 0) {
                  goto LABEL_311;
                }
                continue;
              }
              break;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v265 = v674;
            unint64_t v266 = (uint64_t)v656;
LABEL_169:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            v377._uint64_t countAndFlagsBits = v650;
            v377._uint64_t object = v661;
            SQLExpressionEvaluator.execute(sql:bindingValues:)(v377, v679);
            v639 = v378;
            if (v378) {
              goto LABEL_345;
            }
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            Swift::UInt v260 = (uint64_t)v648;
            uint64_t v264 = v647;
            Swift::String v259 = v660;
            uint64_t v263 = (unint64_t)v657;
            if (!v657) {
              goto LABEL_83;
            }
LABEL_82:
            uint64_t v657 = (char *)((v263 - 1) & v263);
            uint64_t v660 = v259;
            int64_t v267 = __clz(__rbit64(v263)) | ((void)v259 << 6);
            goto LABEL_96;
          }
          uint64_t v339 = *v336;
          uint64_t v338 = v336[1];
          uint64_t v340 = (char *)v336 + *(int *)(v337 + 48);
          char v341 = v668;
          if (!*((void *)v668 + 2))
          {
            unint64_t v343 = v635;
            __swift_storeEnumTagSinglePayload(v635, 1, 1, v675);
LABEL_309:
            swift_bridgeObjectRelease();
            outlined destroy of UUID?(v343, &demangling cache variable for type metadata for StorableValue?);
            type metadata accessor for MetadataSQLError(0);
            lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
            swift_allocError();
            *uint64_t v541 = v339;
            v541[1] = v338;
            swift_storeEnumTagMultiPayload();
            swift_willThrow();
            swift_release();
            v542 = type metadata accessor for SQLDataType();
            (*((void (**)(char *, ValueMetadata *))v542[-1].Description + 1))(v340, v542);
LABEL_310:
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRetain();
          uint64_t v342 = specialized __RawDictionaryStorage.find<A>(_:)(v339, v338);
          unint64_t v343 = v635;
          if (v344)
          {
            _s12BiomeStreams13StorableValueOWOcTm_1(*((void *)v341 + 7) + *(void *)(v672 + 72) * v342, v635, (void (*)(void))type metadata accessor for StorableValue);
            uint64_t v345 = 0;
          }
          else
          {
            uint64_t v345 = 1;
          }
          uint64_t v346 = v675;
          __swift_storeEnumTagSinglePayload(v343, v345, 1, v675);
          swift_bridgeObjectRelease();
          if (__swift_getEnumTagSinglePayload(v343, 1, v346) == 1) {
            goto LABEL_309;
          }
          uint64_t v347 = v645;
          _s12BiomeStreams13StorableValueOWObTm_1(v343, v645, (void (*)(void))type metadata accessor for StorableValue);
          _s12BiomeStreams13StorableValueOWOcTm_1(v347, v646, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v348 = swift_isUniquelyReferenced_nonNull_native();
          v679._rawValue = (void *)v275;
          uint64_t v349 = specialized __RawDictionaryStorage.find<A>(_:)(v339, v338);
          uint64_t v351 = *(void *)(v275 + 16);
          uint64_t v352 = (v350 & 1) == 0;
          uint64_t v353 = v351 + v352;
          if (__OFADD__(v351, v352))
          {
            __break(1u);
            goto LABEL_348;
          }
          uint64_t v354 = v349;
          uint64_t v355 = v350;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v348, v353))
          {
            uint64_t v356 = specialized __RawDictionaryStorage.find<A>(_:)(v339, v338);
            if ((v355 & 1) != (v357 & 1)) {
              goto LABEL_378;
            }
            uint64_t v354 = v356;
          }
          uint64_t v275 = (uint64_t)v679._rawValue;
          if (v355)
          {
            uint64_t v358 = *(void *)(v672 + 72) * v354;
            int v359 = v634;
            _s12BiomeStreams13StorableValueOWObTm_1(*((void *)v679._rawValue + 7) + v358, v634, (void (*)(void))type metadata accessor for StorableValue);
            _s12BiomeStreams13StorableValueOWObTm_1(v646, *(void *)(v275 + 56) + v358, (void (*)(void))type metadata accessor for StorableValue);
            __swift_storeEnumTagSinglePayload(v359, 0, 1, v675);
          }
          else
          {
            specialized _NativeDictionary._insert(at:key:value:)(v354, v339, v338, v646, (uint64_t)v679._rawValue);
            int v359 = v634;
            __swift_storeEnumTagSinglePayload(v634, 1, 1, v675);
            swift_bridgeObjectRetain();
          }
          swift_bridgeObjectRelease();
          outlined destroy of UUID?(v359, &demangling cache variable for type metadata for StorableValue?);
          _s12BiomeStreams13StorableValueOWOhTm_2(v645, (void (*)(void))type metadata accessor for StorableValue);
          swift_bridgeObjectRelease();
          uint64_t v360 = type metadata accessor for SQLDataType();
          (*((void (**)(char *, ValueMetadata *))v360[-1].Description + 1))(v340, v360);
          uint64_t v265 = v674;
        }
      }
      rawValue[2] = v137;
    }
    else
    {
      uint64_t v633 = rawValue;
      uint64_t v138 = v640;
      BOOL v139 = swift_isUniquelyReferenced_nonNull_native();
      v679._rawValue = v138;
      specialized __RawDictionaryStorage.find<A>(_:)();
      uint64_t v125 = v147;
      uint64_t v148 = v138[2];
      uint64_t v149 = (v140 & 1) == 0;
      unint64_t v150 = v148 + v149;
      if (__OFADD__(v148, v149)) {
        goto LABEL_350;
      }
      uint64_t v151 = v140;
      if (v138[3] >= v150)
      {
        if ((v139 & 1) == 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<[StorableValue], ChangeRecord>);
          _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v150, v139, v141, v142, v143, v144, v145, v146, v602, (uint64_t)v603, v604, (uint64_t)v605, v606, (uint64_t)v607, v608, v609, (uint64_t)v610, v611, (uint64_t)v612,
          (uint64_t)v613,
          v614,
          v615);
        specialized __RawDictionaryStorage.find<A>(_:)();
        if ((v151 & 1) != (v153 & 1)) {
          goto LABEL_377;
        }
        uint64_t v125 = v152;
      }
      rawValue = v633;
      char v154 = v679._rawValue;
      v640 = v679._rawValue;
      if (v151)
      {
        BOOL v132 = *((void *)v679._rawValue + 7);
        goto LABEL_32;
      }
      *((void *)v679._rawValue + (v125 >> 6) + 8) |= 1 << v125;
      *(void *)(v154[6] + 8 * v125) = v110;
      unint64_t v155 = v154[7] + 16 * v125;
      *(unsigned char *)unint64_t v155 = v112;
      *(void *)(v155 + _Block_object_dispose(&a9, 8) = v113;
      char v156 = v154[2];
      char v136 = __OFADD__(v156, 1);
      BOOL v157 = v156 + 1;
      if (v136) {
        goto LABEL_359;
      }
      v154[2] = v157;
    }
    swift_bridgeObjectRetain();
LABEL_36:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v102) {
      goto LABEL_6;
    }
LABEL_7:
    uint64_t v107 = v103 + 1;
    if (__OFADD__(v103, 1)) {
      goto LABEL_317;
    }
    if (v107 >= v673) {
      break;
    }
    uint64_t v108 = *(void *)(v671 + 8 * v107);
    ++v103;
    if (!v108)
    {
      uint64_t v103 = v107 + 1;
      if (v107 + 1 >= v673) {
        break;
      }
      uint64_t v108 = *(void *)(v671 + 8 * v103);
      if (!v108)
      {
        uint64_t v103 = v107 + 2;
        if (v107 + 2 >= v673) {
          break;
        }
        uint64_t v108 = *(void *)(v671 + 8 * v103);
        if (!v108)
        {
          uint64_t v103 = v107 + 3;
          if (v107 + 3 >= v673) {
            break;
          }
          uint64_t v108 = *(void *)(v671 + 8 * v103);
          if (!v108)
          {
            unint64_t v109 = v107 + 4;
            if (v109 >= v673) {
              break;
            }
            uint64_t v108 = *(void *)(v671 + 8 * v109);
            if (v108)
            {
              uint64_t v103 = v109;
              goto LABEL_22;
            }
            while (1)
            {
              uint64_t v103 = v109 + 1;
              if (__OFADD__(v109, 1)) {
                break;
              }
              if (v103 >= v673) {
                goto LABEL_48;
              }
              uint64_t v108 = *(void *)(v671 + 8 * v103);
              ++v109;
              if (v108) {
                goto LABEL_22;
              }
            }
LABEL_348:
            __break(1u);
LABEL_349:
            __break(1u);
LABEL_350:
            __break(1u);
LABEL_351:
            __break(1u);
LABEL_352:
            __break(1u);
LABEL_353:
            __break(1u);
LABEL_354:
            __break(1u);
            goto LABEL_355;
          }
        }
      }
    }
LABEL_22:
    uint64_t v102 = (v108 - 1) & v108;
  }
LABEL_48:
  swift_release();
  if (!rawValue[2]) {
    goto LABEL_57;
  }
  uint64_t v633 = rawValue;
  uint64_t v158 = (uint64_t)v648;
  _s12BiomeStreams13StorableValueOWOcTm_1(v622, (uint64_t)v648, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
  uint64_t v159 = Description;
  uint64_t v160 = v657;
  unint64_t v161 = v629;
  Description[2](v657, v158, v629);
  _s12BiomeStreams13StorableValueOWOhTm_2(v158, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
  char v162 = MaterializedView.name.getter();
  uint64_t v164 = v163;
  ((void (*)(char *, ValueMetadata *))v159[1])(v160, v161);
  specialized _arrayForceCast<A, B>(_:)();
  int v166 = v165;
  static KeyedFirstMatchingRecordCache.columnNames(groupBySchema:payloadSchema:)();
  uint64_t v168 = v167;
  uint64_t v648 = (void *)v166;
  v611 = specialized Array.count.getter(v166);
  Swift::String v618 = v168;
  if (v611 <= 0)
  {
    static String._createEmpty(withInitialCapacity:)(20);
    swift_bridgeObjectRelease();
    v679._rawValue = (void *)0x20455441445055;
    uint64_t v680 = 0xE700000000000000;
    v213._uint64_t countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v162, v164, 27, 0xD000000000000019, (void *)0x800000018EBEA6A0);
    String.append(_:)(v213);
    swift_bridgeObjectRelease();
    v214._uint64_t countAndFlagsBits = 0x2020200A5445530ALL;
    v214._uint64_t object = (void *)0xE900000000000020;
    String.append(_:)(v214);
    uint64_t v215 = specialized Array.count.getter(v168);
    Swift::String v216 = (int64_t *)v665;
    if (v215)
    {
      Swift::String v217 = v215;
      uint64_t v681 = specialized ContiguousArray.init()();
      specialized ContiguousArray.reserveCapacity(_:)(v217);
      if (v217 < 0) {
        goto LABEL_369;
      }
      uint64_t v218 = (void **)(v168 + 40);
      do
      {
        uint64_t v219 = (uint64_t)*(v218 - 1);
        uint64_t v220 = *v218;
        swift_bridgeObjectRetain();
        static String._createEmpty(withInitialCapacity:)(8);
        swift_bridgeObjectRelease();
        v677 = 34;
        v678 = 0xE100000000000000;
        v221._uint64_t countAndFlagsBits = v219;
        v221._uint64_t object = v220;
        String.append(_:)(v221);
        v222._uint64_t countAndFlagsBits = 0x3F203D2022;
        v222._uint64_t object = (void *)0xE500000000000000;
        String.append(_:)(v222);
        uint64_t v223 = String.init(stringInterpolation:)();
        Swift::String v225 = v224;
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v226 = *(void *)(v681 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v226);
        uint64_t v227 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v226, v223, v225);
        destructiveProjectEnumData for StorableValue(v227, v228);
        v218 += 2;
        --v217;
      }
      while (v217);
      uint64_t v229 = v681;
      Swift::String v216 = (int64_t *)v665;
    }
    else
    {
      uint64_t v229 = specialized static Array._allocateUninitialized(_:)(0);
    }
    v677 = v229;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    char v379 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v381 = v380;
    swift_bridgeObjectRelease();
    v382._uint64_t countAndFlagsBits = v379;
    v382._uint64_t object = v381;
    String.append(_:)(v382);
    swift_bridgeObjectRelease();
    uint64_t v606 = String.init(stringInterpolation:)();
    v610 = v383;
  }
  else
  {
    v679._rawValue = (void *)static String._createEmpty(withInitialCapacity:)(37);
    uint64_t v680 = v169;
    v170._uint64_t countAndFlagsBits = 0x20455441445055;
    v170._uint64_t object = (void *)0xE700000000000000;
    String.append(_:)(v170);
    v171._uint64_t countAndFlagsBits = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v162, v164, 27, 0xD000000000000019, (void *)0x800000018EBEA6A0);
    String.append(_:)(v171);
    swift_bridgeObjectRelease();
    v172._uint64_t countAndFlagsBits = 0x2020200A5445530ALL;
    v172._uint64_t object = (void *)0xE900000000000020;
    String.append(_:)(v172);
    Swift::String v173 = specialized Array.count.getter(v168);
    if (v173)
    {
      Swift::String v174 = v173;
      uint64_t v681 = specialized ContiguousArray.init()();
      specialized ContiguousArray.reserveCapacity(_:)(v174);
      if (v174 < 0) {
        goto LABEL_365;
      }
      Swift::String v175 = (void **)(v168 + 40);
      do
      {
        uint64_t v176 = (uint64_t)*(v175 - 1);
        uint64_t v177 = *v175;
        swift_bridgeObjectRetain();
        static String._createEmpty(withInitialCapacity:)(8);
        swift_bridgeObjectRelease();
        v677 = 34;
        v678 = 0xE100000000000000;
        v178._uint64_t countAndFlagsBits = v176;
        v178._uint64_t object = v177;
        String.append(_:)(v178);
        v179._uint64_t countAndFlagsBits = 0x3F203D2022;
        v179._uint64_t object = (void *)0xE500000000000000;
        String.append(_:)(v179);
        uint64_t v180 = String.init(stringInterpolation:)();
        Swift::String v182 = v181;
        swift_bridgeObjectRelease();
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v183 = *(void *)(v681 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v183);
        uint64_t v184 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v183, v180, v182);
        destructiveProjectEnumData for StorableValue(v184, v185);
        v175 += 2;
        --v174;
      }
      while (v174);
      uint64_t v186 = v681;
    }
    else
    {
      uint64_t v186 = specialized static Array._allocateUninitialized(_:)(0);
    }
    v677 = v186;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v230 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v232 = v231;
    swift_bridgeObjectRelease();
    v233._uint64_t countAndFlagsBits = v230;
    v233._uint64_t object = v232;
    String.append(_:)(v233);
    swift_bridgeObjectRelease();
    v234._uint64_t countAndFlagsBits = 0x282045524548570ALL;
    v234._uint64_t object = (void *)0xED0000202020200ALL;
    String.append(_:)(v234);
    uint64_t v235 = v639;
    uint64_t PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySS_14BiomeSQLParser11SQLDataTypeOtG_SSsAE_pTg506_sSS14d11SQLParser11fg5OSSs5c186_pIggnozo_SS_ACtSSsAD_pIegnrzr_TR04_s12a146Streams30KeyedQueryPlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm((uint64_t)v648, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
    v639 = v235;
    if (v235)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    v677 = PlannerMetadataCachePAAE04readF3SQL20materializedViewName13groupBySchemaSS3sql_SayAA13StorableValueOGAJKc16argumentsFromKeytm4_u17M49_0A9SQLParser11cD20OtGtKFZS2S_ANtKXEfU_Tf3nnnpf_nTf1cn_nTm;
    Swift::String v237 = BidirectionalCollection<>.joined(separator:)();
    uint64_t v239 = v238;
    swift_bridgeObjectRelease();
    v240._uint64_t countAndFlagsBits = v237;
    v240._uint64_t object = v239;
    String.append(_:)(v240);
    swift_bridgeObjectRelease();
    v241._uint64_t countAndFlagsBits = 10506;
    v241._uint64_t object = (void *)0xE200000000000000;
    String.append(_:)(v241);
    uint64_t v606 = String.init(stringInterpolation:)();
    v610 = v242;
    Swift::String v216 = (int64_t *)v665;
  }
  uint64_t v384 = v649;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v385 = 0;
  uint64_t v386 = (uint64_t)(v633 + 8);
  uint64_t v387 = 1 << *((unsigned char *)v633 + 32);
  if (v387 < 64) {
    uint64_t v388 = ~(-1 << v387);
  }
  else {
    uint64_t v388 = -1;
  }
  uint64_t v389 = v388 & v633[8];
  uint64_t v390 = (unint64_t)(v387 + 63) >> 6;
  Swift::String v615 = v384 + 64;
  uint64_t v607 = (uint64_t *)(v618 + 56);
  unint64_t v391 = v674;
  char v392 = (uint64_t)v668;
  uint64_t v605 = v633 + 8;
  uint64_t v604 = v390;
  while (2)
  {
    if (!v389)
    {
      char v136 = __OFADD__(v385, 1);
      uint64_t v394 = v385 + 1;
      if (v136) {
        goto LABEL_366;
      }
      if (v394 >= v390) {
        goto LABEL_318;
      }
      uint64_t v395 = *(void *)(v386 + 8 * v394);
      if (v395) {
        goto LABEL_196;
      }
      int v396 = v394 + 1;
      if (v394 + 1 >= v390) {
        goto LABEL_318;
      }
      uint64_t v395 = *(void *)(v386 + 8 * v396);
      if (v395) {
        goto LABEL_195;
      }
      int v396 = v394 + 2;
      if (v394 + 2 >= v390) {
        goto LABEL_318;
      }
      uint64_t v395 = *(void *)(v386 + 8 * v396);
      if (v395) {
        goto LABEL_195;
      }
      int v396 = v394 + 3;
      if (v394 + 3 >= v390) {
        goto LABEL_318;
      }
      uint64_t v395 = *(void *)(v386 + 8 * v396);
      if (v395) {
        goto LABEL_195;
      }
      int v396 = v394 + 4;
      if (v394 + 4 >= v390) {
        goto LABEL_318;
      }
      uint64_t v395 = *(void *)(v386 + 8 * v396);
      if (v395)
      {
LABEL_195:
        uint64_t v394 = v396;
LABEL_196:
        uint64_t v608 = (v395 - 1) & v395;
        uint64_t v609 = v394;
        unint64_t v393 = __clz(__rbit64(v395)) + (v394 << 6);
        goto LABEL_197;
      }
      while (1)
      {
        uint64_t v394 = v396 + 1;
        if (__OFADD__(v396, 1)) {
          goto LABEL_375;
        }
        if (v394 >= v390) {
          goto LABEL_318;
        }
        uint64_t v395 = *(void *)(v386 + 8 * v394);
        ++v396;
        if (v395) {
          goto LABEL_196;
        }
      }
    }
    uint64_t v608 = (v389 - 1) & v389;
    uint64_t v609 = v385;
    unint64_t v393 = __clz(__rbit64(v389)) | (v385 << 6);
LABEL_197:
    uint64_t v397 = *(void *)(v633[6] + 8 * v393);
    uint64_t v398 = *(void *)(v633[7] + 16 * v393 + 8);
    uint64_t v399 = v627;
    _s12BiomeStreams13StorableValueOWOcTm_1(v622, v627, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
    uint64_t v400 = *(void *)(v399 + v617[11]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    Swift::String v616 = v400;
    swift_retain();
    _s12BiomeStreams13StorableValueOWOhTm_2(v399, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
    Swift::String v636 = v398;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    specialized static Array._allocateUninitialized(_:)(0);
    uint64_t v401 = (void *)Dictionary.init(dictionaryLiteral:)();
    uint64_t v671 = v397;
    uint64_t v128 = specialized Array.count.getter(v397);
    if (v128 != v611) {
      goto LABEL_314;
    }
    char v402 = specialized Array.count.getter(v648);
    swift_bridgeObjectRetain();
    Swift::String v403 = 0;
    uint64_t v657 = (char *)v402;
    while (1)
    {
      uint64_t v404 = (uint64_t *)v666;
      if (v403 == v402)
      {
        uint64_t v405 = 1;
        uint64_t v406 = v402;
      }
      else
      {
        uint64_t v407 = (uint64_t)v648;
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v403, 1, v648);
        outlined init with copy of UUID?(v407+ ((*(unsigned __int8 *)(v659 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v659 + 80))+ *(void *)(v659 + 72) * v403, v392, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        uint64_t v406 = v403 + 1;
        if (__OFADD__(v403, 1))
        {
          __break(1u);
LABEL_342:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          goto LABEL_346;
        }
        uint64_t v408 = v392;
        uint64_t v409 = v403;
        uint64_t v410 = v647;
        _s10Foundation4UUIDVSgWObTm_0(v408, v647, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        v411 = (uint64_t)&v658[*(int *)(v391 + 48)];
        _s10Foundation4UUIDVSgWObTm_0(v410, v411, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        uint64_t v412 = (uint64_t)v216 + *(int *)(v391 + 48);
        *Swift::String v216 = v409;
        char v392 = (uint64_t)v668;
        Swift::String v413 = v411;
        uint64_t v404 = (uint64_t *)v666;
        _s10Foundation4UUIDVSgWObTm_0(v413, v412, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
        uint64_t v405 = 0;
      }
      __swift_storeEnumTagSinglePayload((uint64_t)v216, v405, 1, v391);
      _s10Foundation4UUIDVSgWObTm_0((uint64_t)v216, (uint64_t)v404, (uint64_t *)&demangling cache variable for type metadata for (offset: Int, element: (columnName: String, dataType: SQLDataType))?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v404, 1, v391) == 1) {
        break;
      }
      uint64_t v673 = v406;
      uint64_t v676 = *v404;
      uint64_t v414 = (uint64_t *)((char *)v404 + *(int *)(v391 + 48));
      uint64_t v416 = *v414;
      uint64_t v415 = v414[1];
      v417 = v667;
      uint64_t v418 = *(int *)(v667 + 48);
      uint64_t v419 = (char *)v414 + v418;
      uint64_t v420 = v662;
      unint64_t v421 = (char *)v662 + v418;
      int64_t *v662 = v416;
      v420[1] = v415;
      int64_t v422 = type metadata accessor for SQLDataType();
      uint64_t v423 = (void (*)(char *, char *, ValueMetadata *))*((void *)v422[-1].Description + 4);
      v423(v421, v419, v422);
      v424 = v669;
      uint64_t v425 = (char *)v669 + *(int *)(v417 + 48);
      *uint64_t v669 = v416;
      v424[1] = v415;
      v423(v425, v421, v422);
      uint64_t v426 = v676;
      unint64_t v427 = v671;
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v676, 1, v671);
      uint64_t v428 = *(void *)(v672 + 72);
      _s12BiomeStreams13StorableValueOWOcTm_1(v427+ ((*(unsigned __int8 *)(v672 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v672 + 80))+ v428 * v426, v670, (void (*)(void))type metadata accessor for StorableValue);
      swift_bridgeObjectRetain();
      uint64_t v429 = swift_isUniquelyReferenced_nonNull_native();
      v679._rawValue = v401;
      uint64_t v430 = specialized __RawDictionaryStorage.find<A>(_:)(v416, v415);
      uint64_t v432 = v401[2];
      uint64_t v433 = (v431 & 1) == 0;
      uint64_t v434 = v432 + v433;
      if (__OFADD__(v432, v433))
      {
        __break(1u);
LABEL_322:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_323:
        swift_bridgeObjectRelease();
        if (specialized Array.count.getter(v626) < 1) {
          goto LABEL_334;
        }
        uint64_t v553 = v622;
        uint64_t v554 = v619;
        _s12BiomeStreams13StorableValueOWOcTm_1(v622, v619, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
        uint64_t v555 = *(void *)(v554 + v617[11]);
        swift_retain();
        _s12BiomeStreams13StorableValueOWOhTm_2(v554, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
        uint64_t v556 = v620;
        _s12BiomeStreams13StorableValueOWOcTm_1(v553, v620, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
        uint64_t v557 = Description;
        uint64_t v558 = v621;
        uint64_t v559 = v629;
        Description[2](v621, v556, v629);
        _s12BiomeStreams13StorableValueOWOhTm_2(v556, (void (*)(void))type metadata accessor for KeyedFirstMatchingRecordCache);
        uint64_t v560 = MaterializedView.name.getter();
        uint64_t v562 = v561;
        ((void (*)(char *, ValueMetadata *))v557[1])(v558, v559);
        specialized _arrayForceCast<A, B>(_:)();
        uint64_t v564 = v563;
        swift_bridgeObjectRelease();
        uint64_t v565 = static KeyedAggregationMetadataCache.tableName(materializedViewName:)(v560, v562, 27, 0xD000000000000019, (void *)0x800000018EBEA6A0);
        uint64_t v567 = v566;
        uint64_t v568 = MEMORY[0x192FB0010]();
        int v570 = v569;
        static String._createEmpty(withInitialCapacity:)(49);
        swift_bridgeObjectRelease();
        v679._rawValue = (void *)0xD000000000000022;
        uint64_t v680 = 0x800000018EBEA6F0;
        v571._uint64_t countAndFlagsBits = v568;
        v571._uint64_t object = v570;
        String.append(_:)(v571);
        swift_bridgeObjectRelease();
        v572._uint64_t countAndFlagsBits = 542002976;
        v572._uint64_t object = (void *)0xE400000000000000;
        String.append(_:)(v572);
        v573._uint64_t countAndFlagsBits = v565;
        v573._uint64_t object = v567;
        String.append(_:)(v573);
        swift_bridgeObjectRelease();
        v574._uint64_t countAndFlagsBits = 2107424;
        v574._uint64_t object = (void *)0xE300000000000000;
        String.append(_:)(v574);
        unint64_t v575 = specialized Array.count.getter(v564);
        if (!v575)
        {
          int64_t v588 = specialized static Array._allocateUninitialized(_:)(0);
          goto LABEL_331;
        }
        v576 = v575;
        unint64_t v674 = v562;
        uint64_t v675 = v555;
        uint64_t v681 = specialized ContiguousArray.init()();
        specialized ContiguousArray.reserveCapacity(_:)(v576);
        if ((v576 & 0x8000000000000000) == 0)
        {
          uint64_t v577 = *(unsigned __int8 *)(v659 + 80);
          uint64_t v673 = v564;
          uint64_t v578 = v564 + ((v577 + 32) & ~v577);
          uint64_t v676 = *(void *)(v659 + 72);
          uint64_t v579 = v613;
          uint64_t v580 = (uint64_t)v612;
          do
          {
            outlined init with copy of UUID?(v578, v580, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
            _s10Foundation4UUIDVSgWObTm_0(v580, (uint64_t)v579, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
            static String._createEmpty(withInitialCapacity:)(4);
            swift_bridgeObjectRelease();
            v677 = 34;
            v678 = 0xE100000000000000;
            String.append(_:)(*v579);
            v581._uint64_t countAndFlagsBits = 34;
            v581._uint64_t object = (void *)0xE100000000000000;
            String.append(_:)(v581);
            uint64_t v582 = String.init(stringInterpolation:)();
            v584 = v583;
            outlined destroy of UUID?((uint64_t)v579, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            v585 = *(void *)(v681 + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v585);
            v586 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v585, v582, v584);
            destructiveProjectEnumData for StorableValue(v586, v587);
            v578 += v676;
            --v576;
          }
          while (v576);
          int64_t v588 = v681;
LABEL_331:
          v677 = v588;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
          lazy protocol witness table accessor for type [String] and conformance [A]();
          v589 = BidirectionalCollection<>.joined(separator:)();
          uint64_t v591 = v590;
          swift_bridgeObjectRelease();
          v592._uint64_t countAndFlagsBits = v589;
          v592._uint64_t object = v591;
          String.append(_:)(v592);
          swift_bridgeObjectRelease();
          v593._uint64_t countAndFlagsBits = 10528;
          v593._uint64_t object = (void *)0xE200000000000000;
          String.append(_:)(v593);
          v594 = String.init(stringInterpolation:)();
          v596 = v595;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v597 = specialized static Array._allocateUninitialized(_:)(0);
          v598._uint64_t countAndFlagsBits = v594;
          v598._uint64_t object = v596;
          uint64_t v599 = (unint64_t)SQLExpressionEvaluator.execute(sql:bindingValues:)(v598, (Swift::OpaquePointer)v597);
          if (v600)
          {
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return swift_bridgeObjectRelease();
          }
          uint64_t v626 = v599;
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_334:
          swift_bridgeObjectRelease();
          v601 = v617[14];
          if (*(unsigned char *)(v622 + v601) == 1 && *(void *)(*(void *)v614 + 16)) {
            *(unsigned char *)(v622 + v601) = 0;
          }
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[StorableValue] : (value: ChangeRecord, event: CacheEvent)]._Variant);
          Dictionary._Variant.removeAll(keepingCapacity:)(1);
          return swift_bridgeObjectRelease();
        }
LABEL_371:
        __break(1u);
LABEL_372:
        __break(1u);
LABEL_373:
        __break(1u);
LABEL_374:
        __break(1u);
LABEL_375:
        __break(1u);
LABEL_376:
        __break(1u);
LABEL_377:
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [StorableValue]);
LABEL_378:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
LABEL_379:
        uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      uint64_t v435 = v430;
      uint64_t v436 = v431;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
      uint64_t v437 = _NativeDictionary.ensureUnique(isUnique:capacity:)(v429, v434);
      char v392 = (uint64_t)v668;
      if (v437)
      {
        uint64_t v438 = specialized __RawDictionaryStorage.find<A>(_:)(v416, v415);
        if ((v436 & 1) != (v439 & 1)) {
          goto LABEL_378;
        }
        uint64_t v435 = v438;
      }
      uint64_t v401 = v679._rawValue;
      if (v436)
      {
        uint64_t v440 = v428 * v435;
        uint64_t v441 = (uint64_t)v661;
        _s12BiomeStreams13StorableValueOWObTm_1(*((void *)v679._rawValue + 7) + v440, (uint64_t)v661, (void (*)(void))type metadata accessor for StorableValue);
        char v442 = v401[7] + v440;
        uint64_t v443 = v441;
        _s12BiomeStreams13StorableValueOWObTm_1(v670, v442, (void (*)(void))type metadata accessor for StorableValue);
        __swift_storeEnumTagSinglePayload(v441, 0, 1, v675);
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v435, v416, v415, v670, (uint64_t)v679._rawValue);
        uint64_t v443 = (uint64_t)v661;
        __swift_storeEnumTagSinglePayload((uint64_t)v661, 1, 1, v675);
        swift_bridgeObjectRetain();
      }
      char v402 = (uint64_t)v657;
      Swift::String v403 = v673;
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v443, &demangling cache variable for type metadata for StorableValue?);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?((uint64_t)v669, &demangling cache variable for type metadata for (columnName: String, dataType: SQLDataType));
      unint64_t v391 = v674;
      Swift::String v216 = (int64_t *)v665;
    }
    swift_bridgeObjectRelease();
    long long v444 = v649;
    if (*(void *)(v636 + 16) != *(void *)(v649 + 16))
    {
      swift_bridgeObjectRelease();
      type metadata accessor for MetadataSQLError(0);
      lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
      swift_allocError();
      uint64_t v547 = *(void *)(v636 + 16);
      *uint64_t v548 = *(void *)(v444 + 16);
      v548[1] = v547;
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      goto LABEL_306;
    }
    uint64_t v445 = 1 << *(unsigned char *)(v649 + 32);
    if (v445 < 64) {
      uint64_t v446 = ~(-1 << v445);
    }
    else {
      uint64_t v446 = -1;
    }
    uint64_t v447 = v446 & *(void *)(v649 + 64);
    uint64_t v657 = (char *)((unint64_t)(v445 + 63) >> 6);
    v603 = v657 - 1;
    swift_bridgeObjectRetain();
    uint64_t v448 = 0;
    v449 = v660;
    if (v447)
    {
LABEL_217:
      v450 = v401;
      uint64_t v673 = (v447 - 1) & v447;
      uint64_t v676 = v448;
      v451 = __clz(__rbit64(v447)) | (v448 << 6);
LABEL_218:
      v452 = *(void *)(v649 + 56);
      v453 = (void *)(*(void *)(v649 + 48) + 16 * v451);
      v454 = v453[1];
      char *v449 = *v453;
      v449[1] = v454;
      v455 = type metadata accessor for SQLDataType();
      uint64_t v456 = v455[-1].Description;
      uint64_t v457 = v452 + v456[9] * v451;
      v458 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
      char v459 = v455;
      v449 = v660;
      ((void (*)(char *, uint64_t, ValueMetadata *))v456[2])(&v660[*(int *)(v458 + 48)], v457, v459);
      __swift_storeEnumTagSinglePayload((uint64_t)v449, 0, 1, v458);
      swift_bridgeObjectRetain();
      unint64_t v391 = v674;
      goto LABEL_233;
    }
    while (2)
    {
      unint64_t v460 = v448 + 1;
      if (__OFADD__(v448, 1)) {
        goto LABEL_349;
      }
      if (v460 >= (uint64_t)v657) {
        goto LABEL_231;
      }
      char v461 = *(void *)(v615 + 8 * v460);
      if (v461) {
        goto LABEL_222;
      }
      v448 += 2;
      if (v460 + 1 >= (uint64_t)v657)
      {
        v450 = v401;
LABEL_227:
        uint64_t v676 = v460;
        goto LABEL_232;
      }
      char v461 = *(void *)(v615 + 8 * v448);
      if (v461) {
        goto LABEL_225;
      }
      if (v460 + 2 >= (uint64_t)v657)
      {
LABEL_231:
        uint64_t v676 = v448;
        v450 = v401;
      }
      else
      {
        char v461 = *(void *)(v615 + 8 * (v460 + 2));
        if (v461)
        {
          v460 += 2;
LABEL_222:
          v450 = v401;
          uint64_t v673 = (v461 - 1) & v461;
          v451 = __clz(__rbit64(v461)) + (v460 << 6);
          uint64_t v676 = v460;
          goto LABEL_218;
        }
        uint64_t v448 = v460 + 3;
        if (v460 + 3 < (uint64_t)v657)
        {
          char v461 = *(void *)(v615 + 8 * v448);
          if (!v461)
          {
            while (1)
            {
              unint64_t v460 = v448 + 1;
              if (__OFADD__(v448, 1)) {
                goto LABEL_373;
              }
              if (v460 >= (uint64_t)v657)
              {
                v450 = v401;
                unint64_t v460 = (uint64_t)v603;
                goto LABEL_227;
              }
              char v461 = *(void *)(v615 + 8 * v460);
              ++v448;
              if (v461) {
                goto LABEL_222;
              }
            }
          }
LABEL_225:
          unint64_t v460 = v448;
          goto LABEL_222;
        }
        v450 = v401;
        uint64_t v676 = v460 + 2;
      }
LABEL_232:
      uint64_t v462 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
      __swift_storeEnumTagSinglePayload((uint64_t)v449, 1, 1, v462);
      uint64_t v673 = 0;
LABEL_233:
      BOOL v463 = v644;
      _s10Foundation4UUIDVSgWObTm_0((uint64_t)v449, (uint64_t)v644, &demangling cache variable for type metadata for (key: String, value: SQLDataType)?);
      Swift::Int v464 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SQLDataType));
      if (__swift_getEnumTagSinglePayload((uint64_t)v463, 1, v464) != 1)
      {
        unint64_t v465 = *v463;
        char v466 = v463[1];
        Swift::Bool v467 = (char *)v463 + *(int *)(v464 + 48);
        uint64_t v468 = v636;
        unint64_t v469 = v450;
        if (*(void *)(v636 + 16))
        {
          swift_bridgeObjectRetain();
          char v470 = specialized __RawDictionaryStorage.find<A>(_:)(v465, v466);
          v471 = v643;
          if (v472)
          {
            _s12BiomeStreams13StorableValueOWOcTm_1(*(void *)(v468 + 56) + *(void *)(v672 + 72) * v470, v643, (void (*)(void))type metadata accessor for StorableValue);
            v473 = 0;
          }
          else
          {
            v473 = 1;
          }
          uint64_t v474 = v675;
          __swift_storeEnumTagSinglePayload(v471, v473, 1, v675);
          swift_bridgeObjectRelease();
          if (__swift_getEnumTagSinglePayload(v471, 1, v474) == 1) {
            goto LABEL_305;
          }
          uint64_t v475 = v650;
          _s12BiomeStreams13StorableValueOWObTm_1(v471, v650, (void (*)(void))type metadata accessor for StorableValue);
          _s12BiomeStreams13StorableValueOWOcTm_1(v475, (uint64_t)v651, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v476 = swift_isUniquelyReferenced_nonNull_native();
          v679._rawValue = v469;
          uint64_t v477 = specialized __RawDictionaryStorage.find<A>(_:)(v465, v466);
          uint64_t v479 = v469[2];
          uint64_t v480 = (v478 & 1) == 0;
          v481 = v479 + v480;
          if (__OFADD__(v479, v480)) {
            goto LABEL_344;
          }
          uint64_t v482 = v477;
          uint64_t v483 = v478;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, StorableValue>);
          if (_NativeDictionary.ensureUnique(isUnique:capacity:)(v476, v481))
          {
            BOOL v484 = specialized __RawDictionaryStorage.find<A>(_:)(v465, v466);
            if ((v483 & 1) != (v485 & 1)) {
              goto LABEL_378;
            }
            uint64_t v482 = v484;
          }
          uint64_t v401 = v679._rawValue;
          if (v483)
          {
            uint64_t v486 = *(void *)(v672 + 72) * v482;
            unint64_t v487 = v641;
            _s12BiomeStreams13StorableValueOWObTm_1(*((void *)v679._rawValue + 7) + v486, v641, (void (*)(void))type metadata accessor for StorableValue);
            _s12BiomeStreams13StorableValueOWObTm_1((uint64_t)v651, v401[7] + v486, (void (*)(void))type metadata accessor for StorableValue);
            __swift_storeEnumTagSinglePayload(v487, 0, 1, v675);
          }
          else
          {
            specialized _NativeDictionary._insert(at:key:value:)(v482, v465, v466, (uint64_t)v651, (uint64_t)v679._rawValue);
            unint64_t v487 = v641;
            __swift_storeEnumTagSinglePayload(v641, 1, 1, v675);
            swift_bridgeObjectRetain();
          }
          v449 = v660;
          swift_bridgeObjectRelease();
          outlined destroy of UUID?(v487, &demangling cache variable for type metadata for StorableValue?);
          _s12BiomeStreams13StorableValueOWOhTm_2(v650, (void (*)(void))type metadata accessor for StorableValue);
          swift_bridgeObjectRelease();
          uint64_t v488 = type metadata accessor for SQLDataType();
          (*((void (**)(char *, ValueMetadata *))v488[-1].Description + 1))(v467, v488);
          uint64_t v447 = v673;
          unint64_t v391 = v674;
          char v392 = (uint64_t)v668;
          Swift::String v216 = (int64_t *)v665;
          uint64_t v448 = v676;
          if (v673) {
            goto LABEL_217;
          }
          continue;
        }
        v471 = v643;
        __swift_storeEnumTagSinglePayload(v643, 1, 1, v675);
LABEL_305:
        swift_bridgeObjectRelease();
        outlined destroy of UUID?(v471, &demangling cache variable for type metadata for StorableValue?);
        type metadata accessor for MetadataSQLError(0);
        lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
        swift_allocError();
        *char v539 = v465;
        v539[1] = v466;
        swift_storeEnumTagMultiPayload();
        swift_willThrow();
        swift_release();
        unint64_t v540 = type metadata accessor for SQLDataType();
        (*((void (**)(char *, ValueMetadata *))v540[-1].Description + 1))(v467, v540);
LABEL_306:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_307;
      }
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v679._rawValue = (void *)specialized static Array._allocateUninitialized(_:)(0);
    uint64_t v489 = v618;
    uint64_t v490 = specialized Array.count.getter(v618);
    v491 = v450;
    if (!v490)
    {
      swift_bridgeObjectRelease();
LABEL_271:
      v677 = specialized static Array._allocateUninitialized(_:)(0);
      uint64_t v508 = specialized Array.count.getter(v671);
      if (v508)
      {
        uint64_t v509 = v508;
        if (v508 < 1) {
          goto LABEL_372;
        }
        uint64_t v510 = *(unsigned __int8 *)(v672 + 80);
        uint64_t v511 = (v510 + 32) & ~v510;
        v512 = v671 + v511;
        char v513 = *(void *)(v672 + 72);
        uint64_t v676 = v511 + 2 * v513;
        uint64_t v673 = v510 | 7;
        swift_bridgeObjectRetain();
        while (1)
        {
          uint64_t v514 = v631;
          _s12BiomeStreams13StorableValueOWOcTm_1(v512, v631, (void (*)(void))type metadata accessor for StorableValue);
          unint64_t v515 = v632;
          _s12BiomeStreams13StorableValueOWObTm_1(v514, v632, (void (*)(void))type metadata accessor for StorableValue);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<StorableValue>);
          char v516 = swift_allocObject();
          uint64_t v517 = specialized static Array._adoptStorage(_:count:)(v516, 2);
          Swift::Int v519 = v518;
          _s12BiomeStreams13StorableValueOWOcTm_1(v515, v518, (void (*)(void))type metadata accessor for StorableValue);
          _s12BiomeStreams13StorableValueOWObTm_1(v515, v519 + v513, (void (*)(void))type metadata accessor for StorableValue);
          char v521 = destructiveProjectEnumData for StorableValue(v517, v520);
          Swift::Bool v522 = specialized Array.count.getter(v521);
          unint64_t v523 = v677;
          char v524 = specialized Array.count.getter(v677);
          v525 = v524 + v522;
          if (__OFADD__(v524, v522)) {
            goto LABEL_351;
          }
          unint64_t v526 = swift_isUniquelyReferenced_nonNull_native();
          if (!v526 || (uint64_t v527 = *(void *)(v523 + 24) >> 1, v527 < v525))
          {
            if (*(void *)(v523 + 16) <= v525) {
              v528 = v525;
            }
            else {
              v528 = *(void *)(v523 + 16);
            }
            unint64_t v523 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v526, v528, 1, v523);
            v677 = v523;
            uint64_t v527 = *(void *)(v523 + 24) >> 1;
          }
          uint64_t v529 = *(void *)(v523 + 16);
          uint64_t v530 = v527 - v529;
          if (specialized Array.count.getter(v521))
          {
            if (v530 < v522) {
              goto LABEL_354;
            }
            if (v522 < 0) {
              goto LABEL_379;
            }
            uint64_t v531 = v523 + v511 + v529 * v513;
            if (v521 + v511 < v531 + v522 * v513 && v531 < v521 + v511 + v522 * v513) {
              goto LABEL_379;
            }
            swift_arrayInitWithCopy();
            Swift::String v216 = (int64_t *)v665;
            if (v522)
            {
              uint64_t v533 = *(void *)(v523 + 16);
              char v136 = __OFADD__(v533, v522);
              uint64_t v534 = v533 + v522;
              if (v136) {
                goto LABEL_360;
              }
              *(void *)(v523 + 16) = v534;
            }
          }
          else
          {
            if (v522 > 0) {
              goto LABEL_352;
            }
            Swift::Bool v522 = 0;
            Swift::String v216 = (int64_t *)v665;
          }
          uint64_t v535 = swift_bridgeObjectRelease();
          if (v522 != v530) {
            destructiveProjectEnumData for StorableValue(v535, v536);
          }
          v512 += v513;
          if (!--v509)
          {
            swift_bridgeObjectRelease();
            unint64_t v391 = v674;
            char v392 = (uint64_t)v668;
            break;
          }
        }
      }
      specialized Array.append<A>(contentsOf:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v537._uint64_t countAndFlagsBits = v606;
      v537._uint64_t object = v610;
      SQLExpressionEvaluator.execute(sql:bindingValues:)(v537, v679);
      v639 = v538;
      if (v538) {
        goto LABEL_342;
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v386 = (uint64_t)v605;
      uint64_t v390 = v604;
      uint64_t v385 = v609;
      uint64_t v389 = v608;
      continue;
    }
    break;
  }
  v492 = v490;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v489);
  uint64_t v494 = *(void *)(v489 + 32);
  uint64_t v493 = *(void *)(v489 + 40);
  uint64_t v495 = v450[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v495)
  {
    uint64_t v496 = specialized __RawDictionaryStorage.find<A>(_:)(v494, v493);
    if (v497)
    {
      v498 = v496;
      v499 = v607;
      uint64_t v500 = 1;
      while (1)
      {
        v501 = *((_DWORD *)v491 + 9);
        swift_bridgeObjectRelease();
        if ((v498 & 0x8000000000000000) != 0 || (uint64_t)v498 >= 1 << *((unsigned char *)v491 + 32)) {
          break;
        }
        if (((*(void *)((char *)v491 + ((v498 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) >> v498) & 1) == 0) {
          goto LABEL_356;
        }
        if (v501 != *((_DWORD *)v491 + 9)) {
          goto LABEL_357;
        }
        v502 = v630;
        _s12BiomeStreams13StorableValueOWOcTm_1(v491[7] + *(void *)(v672 + 72) * v498, v630, (void (*)(void))type metadata accessor for StorableValue);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        uint64_t v503 = *((void *)v679._rawValue + 2);
        specialized Array._reserveCapacityAssumingUniqueBuffer(oldCount:)(v503);
        unint64_t v504 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v503, v502);
        destructiveProjectEnumData for StorableValue(v504, v505);
        if (v492 == v500)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v391 = v674;
          char v392 = (uint64_t)v668;
          Swift::String v216 = (int64_t *)v665;
          goto LABEL_271;
        }
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v500, 1, v618);
        if (__OFADD__(v500, 1)) {
          goto LABEL_358;
        }
        uint64_t v494 = *(v499 - 1);
        uint64_t v493 = *v499;
        uint64_t v506 = v491[2];
        swift_bridgeObjectRetain();
        if (v506)
        {
          v498 = specialized __RawDictionaryStorage.find<A>(_:)(v494, v493);
          ++v500;
          v499 += 2;
          if (v507) {
            continue;
          }
        }
        goto LABEL_312;
      }
LABEL_355:
      __break(1u);
LABEL_356:
      __break(1u);
LABEL_357:
      __break(1u);
LABEL_358:
      __break(1u);
LABEL_359:
      __break(1u);
LABEL_360:
      __break(1u);
LABEL_361:
      __break(1u);
      goto LABEL_362;
    }
  }
LABEL_312:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for MetadataSQLError(0);
  lazy protocol witness table accessor for type MetadataSQLError and conformance MetadataSQLError((unint64_t *)&lazy protocol witness table cache variable for type MetadataSQLError and conformance MetadataSQLError, (void (*)(uint64_t))type metadata accessor for MetadataSQLError);
  swift_allocError();
  *int v544 = v494;
  v544[1] = v493;
  swift_storeEnumTagMultiPayload();
  swift_willThrow();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
LABEL_307:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized static Array._adoptStorage(_:count:)(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 2 * a2;
  uint64_t v3 = type metadata accessor for StorableValue(0);
  OUTLINED_FUNCTION_13(v3);
  OUTLINED_FUNCTION_22();
  return a1;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> QueryPlannerMetadata.storeMetadata()()
{
  BookmarkCache.flush()();
  if (!v0)
  {
    specialized KeyedQueryPlannerMetadataCache.flush()();
    specialized KeyedQueryPlannerMetadataCache.flush()();
  }
}

uint64_t protobuf_c_message_get_packed_size(uint64_t a1)
{
  uint64_t v1 = *(_DWORD **)a1;
  if (**(_DWORD **)a1 != 682290937) {
    protobuf_c_message_get_packed_size_cold_1();
  }
  if (v1[12])
  {
    unint64_t v3 = 0;
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v6 = *((void *)v1 + 7);
      uint64_t v7 = (_DWORD *)(v6 + 72 * v3);
      uint64_t v8 = v7[5];
      uint64_t v9 = (unsigned int *)(a1 + v7[6]);
      int v10 = v7[3];
      if (v10 != 3 && v10 != 1)
      {
        if (v10) {
          goto LABEL_22;
        }
        goto LABEL_5;
      }
      if ((*(unsigned char *)(v6 + 72 * v3 + 48) & 4) != 0)
      {
        if (*(_DWORD *)(v6 + 72 * v3 + 8) != *(_DWORD *)(a1 + v8)) {
          goto LABEL_49;
        }
        int v25 = *(_DWORD *)(v6 + 72 * v3 + 16);
        if (v25 != 16 && v25 != 14) {
          goto LABEL_5;
        }
      }
      else
      {
        if (v10 == 3)
        {
          switch(v7[4])
          {
            case 0:
            case 1:
            case 2:
            case 6:
            case 7:
            case 0xC:
            case 0xD:
              if (!*v9) {
                goto LABEL_49;
              }
              goto LABEL_5;
            case 3:
            case 4:
            case 5:
            case 8:
            case 9:
            case 0xF:
            case 0x10:
              if (*(void *)v9) {
                goto LABEL_5;
              }
              goto LABEL_49;
            case 0xA:
              if (*(float *)v9 != 0.0) {
                goto LABEL_5;
              }
              goto LABEL_49;
            case 0xB:
              if (*(double *)v9 != 0.0) {
                goto LABEL_5;
              }
              goto LABEL_49;
            case 0xE:
              if (!*(void *)v9 || !**(unsigned char **)v9) {
                goto LABEL_49;
              }
              goto LABEL_5;
            default:
              goto LABEL_49;
          }
        }
        if (v10 != 1)
        {
LABEL_22:
          unint64_t v14 = *(void *)(a1 + v8);
          if (v14)
          {
            unsigned int v15 = *(_DWORD *)(v6 + 72 * v3 + 8);
            if (v15 >> 25) {
              uint64_t v16 = 5;
            }
            else {
              uint64_t v16 = 4;
            }
            if (v15 < 0x40000) {
              uint64_t v16 = 3;
            }
            if (v15 < 0x800) {
              uint64_t v16 = 2;
            }
            if (v15 >= 0x10) {
              uint64_t v17 = v16;
            }
            else {
              uint64_t v17 = 1;
            }
            uint64_t v18 = v6 + 72 * v3;
            int v20 = *(_DWORD *)(v18 + 48);
            uint64_t v19 = (_DWORD *)(v18 + 48);
            int v21 = v20 & 1;
            if (v20) {
              uint64_t v22 = 1;
            }
            else {
              uint64_t v22 = v14;
            }
            uint64_t v23 = *(void **)v9;
            switch(*(v19 - 8))
            {
              case 0:
              case 0xD:
                uint64_t v27 = 0;
                uint64_t v24 = 0;
                do
                {
                  unsigned int v29 = *((_DWORD *)v23 + v27);
                  if ((v29 & 0x80000000) != 0)
                  {
                    uint64_t v28 = 10;
                  }
                  else if (v29 >= 0x80)
                  {
                    if (v29 >= 0x4000)
                    {
                      if (v29 >> 28) {
                        uint64_t v30 = 5;
                      }
                      else {
                        uint64_t v30 = 4;
                      }
                      if (v29 >= 0x200000) {
                        uint64_t v28 = v30;
                      }
                      else {
                        uint64_t v28 = 3;
                      }
                    }
                    else
                    {
                      uint64_t v28 = 2;
                    }
                  }
                  else
                  {
                    uint64_t v28 = 1;
                  }
                  v24 += v28;
                  ++v27;
                }
                while (v14 > v27);
                break;
              case 1:
                uint64_t v37 = 0;
                uint64_t v24 = 0;
                do
                {
                  unsigned int v39 = (2 * *((_DWORD *)v23 + v37)) ^ (*((int *)v23 + v37) >> 31);
                  if (v39 < 0x80)
                  {
                    uint64_t v38 = 1;
                  }
                  else if (v39 >= 0x4000)
                  {
                    if (v39 >= 0x200000)
                    {
                      if (v39 >> 28) {
                        uint64_t v38 = 5;
                      }
                      else {
                        uint64_t v38 = 4;
                      }
                    }
                    else
                    {
                      uint64_t v38 = 3;
                    }
                  }
                  else
                  {
                    uint64_t v38 = 2;
                  }
                  v24 += v38;
                  ++v37;
                }
                while (v14 > v37);
                break;
              case 2:
              case 7:
              case 0xA:
                uint64_t v24 = 4 * v14;
                break;
              case 3:
              case 8:
                uint64_t v31 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v33 = v23[v31];
                  if (HIDWORD(v33))
                  {
                    if (v33 >> 35)
                    {
                      if (v33 >> 42)
                      {
                        unint64_t v35 = v33 >> 49;
                        unint64_t v36 = HIBYTE(v33);
                        if ((v33 & 0x8000000000000000) == 0) {
                          uint64_t v32 = 9;
                        }
                        else {
                          uint64_t v32 = 10;
                        }
                        if (!v36) {
                          uint64_t v32 = 8;
                        }
                        if (!v35) {
                          uint64_t v32 = 7;
                        }
                      }
                      else
                      {
                        uint64_t v32 = 6;
                      }
                    }
                    else
                    {
                      uint64_t v32 = 5;
                    }
                  }
                  else if (v33 < 0x80)
                  {
                    uint64_t v32 = 1;
                  }
                  else if (v33 >= 0x4000)
                  {
                    if (v33 >> 28) {
                      uint64_t v34 = 5;
                    }
                    else {
                      uint64_t v34 = 4;
                    }
                    if (v33 >= 0x200000) {
                      uint64_t v32 = v34;
                    }
                    else {
                      uint64_t v32 = 3;
                    }
                  }
                  else
                  {
                    uint64_t v32 = 2;
                  }
                  v24 += v32;
                  ++v31;
                }
                while (v14 > v31);
                break;
              case 4:
                uint64_t v40 = 0;
                uint64_t v24 = 0;
                do
                {
                  unint64_t v42 = (2 * v23[v40]) ^ ((uint64_t)v23[v40] >> 63);
                  if (HIDWORD(v42))
                  {
                    if (v42 >> 35)
                    {
                      if (v42 >> 42)
                      {
                        if (v42 >> 49)
                        {
                          if (HIBYTE(v42))
                          {
                            if ((v42 & 0x8000000000000000) == 0) {
                              uint64_t v41 = 9;
                            }
                            else {
                              uint64_t v41 = 10;
                            }
                          }
                          else
                          {
                            uint64_t v41 = 8;
                          }
                        }
                        else
                        {
                          uint64_t v41 = 7;
                        }
                      }
                      else
                      {
                        uint64_t v41 = 6;
                      }
                    }
                    else
                    {
                      uint64_t v41 = 5;
                    }
                  }
                  else if (v42 < 0x80)
                  {
                    uint64_t v41 = 1;
                  }
                  else if (v42 >= 0x4000)
                  {
                    if (v42 >= 0x200000)
                    {
                      if (v42 >> 28) {
                        uint64_t v41 = 5;
                      }
                      else {
                        uint64_t v41 = 4;
                      }
                    }
                    else
                    {
                      uint64_t v41 = 3;
                    }
                  }
                  else
                  {
                    uint64_t v41 = 2;
                  }
                  v24 += v41;
                  ++v40;
                }
                while (v14 > v40);
                break;
              case 5:
              case 9:
              case 0xB:
                uint64_t v24 = 8 * v14;
                break;
              case 6:
                uint64_t v43 = 0;
                uint64_t v24 = 0;
                do
                {
                  unsigned int v45 = *((_DWORD *)v23 + v43);
                  if (v45 < 0x80)
                  {
                    uint64_t v44 = 1;
                  }
                  else if (v45 >= 0x4000)
                  {
                    if (v45 >> 28) {
                      uint64_t v46 = 5;
                    }
                    else {
                      uint64_t v46 = 4;
                    }
                    if (v45 >= 0x200000) {
                      uint64_t v44 = v46;
                    }
                    else {
                      uint64_t v44 = 3;
                    }
                  }
                  else
                  {
                    uint64_t v44 = 2;
                  }
                  v24 += v44;
                  ++v43;
                }
                while (v14 > v43);
                break;
              case 0xC:
                uint64_t v24 = v14;
                break;
              case 0xE:
                int v70 = v21;
                uint64_t v71 = v22;
                uint64_t v73 = v17;
                uint64_t v47 = 0;
                uint64_t v24 = 0;
                do
                {
                  size_t v48 = strlen((const char *)v23[v47]);
                  uint64_t v49 = 4;
                  if (v48 >> 28) {
                    uint64_t v49 = 5;
                  }
                  if (v48 < 0x200000) {
                    uint64_t v49 = 3;
                  }
                  if (v48 < 0x4000) {
                    uint64_t v49 = 2;
                  }
                  if (v48 < 0x80) {
                    uint64_t v49 = 1;
                  }
                  v24 += v48 + v49;
                  ++v47;
                }
                while (v14 > v47);
                uint64_t v22 = v71;
                uint64_t v17 = v73;
                int v21 = v70;
                break;
              case 0xF:
                uint64_t v24 = 0;
                unsigned int v50 = 1;
                do
                {
                  uint64_t v52 = *v23;
                  v23 += 2;
                  uint64_t v51 = v52;
                  if (v52 >> 28) {
                    uint64_t v53 = 5;
                  }
                  else {
                    uint64_t v53 = 4;
                  }
                  if (v51 < 0x200000) {
                    uint64_t v53 = 3;
                  }
                  if (v51 < 0x4000) {
                    uint64_t v53 = 2;
                  }
                  if (v51 < 0x80) {
                    uint64_t v53 = 1;
                  }
                  v24 += v51 + v53;
                }
                while (v14 > v50++);
                break;
              case 0x10:
                uint64_t v72 = v22;
                uint64_t v74 = v17;
                unint64_t v55 = 0;
                uint64_t v24 = 0;
                unsigned int v56 = 1;
                do
                {
                  uint64_t packed_size = protobuf_c_message_get_packed_size(v23[v55]);
                  if (packed_size >> 28) {
                    uint64_t v58 = 5;
                  }
                  else {
                    uint64_t v58 = 4;
                  }
                  if (packed_size < 0x200000) {
                    uint64_t v58 = 3;
                  }
                  if (packed_size < 0x4000) {
                    uint64_t v58 = 2;
                  }
                  if (packed_size < 0x80) {
                    uint64_t v58 = 1;
                  }
                  v24 += packed_size + v58;
                  unint64_t v55 = v56++;
                }
                while (v14 > v55);
                int v21 = *v19 & 1;
                uint64_t v22 = v72;
                uint64_t v17 = v74;
                break;
              default:
                uint64_t v24 = 0;
                break;
            }
            uint64_t v59 = v22 * v17;
            if (v24 >> 28) {
              uint64_t v60 = 5;
            }
            else {
              uint64_t v60 = 4;
            }
            if (v24 < 0x200000) {
              uint64_t v60 = 3;
            }
            if (v24 < 0x4000) {
              uint64_t v60 = 2;
            }
            if (v24 < 0x80) {
              uint64_t v60 = 1;
            }
            uint64_t v61 = v60 + v59;
            if (v21) {
              uint64_t v59 = v61;
            }
            uint64_t v5 = v59 + v24;
            goto LABEL_6;
          }
LABEL_49:
          uint64_t v5 = 0;
          goto LABEL_6;
        }
        int v12 = *(_DWORD *)(v6 + 72 * v3 + 16);
        if (v12 != 16 && v12 != 14)
        {
          if (!*(_DWORD *)(a1 + v8)) {
            goto LABEL_49;
          }
          goto LABEL_5;
        }
      }
      if (!*(void *)v9 || *(void *)v9 == *(void *)(v6 + 72 * v3 + 40)) {
        goto LABEL_49;
      }
LABEL_5:
      uint64_t v5 = required_field_get_packed_size((uint64_t)v7, v9);
LABEL_6:
      v4 += v5;
      ++v3;
      uint64_t v1 = *(_DWORD **)a1;
      if (v3 >= *(unsigned int *)(*(void *)a1 + 48)) {
        goto LABEL_193;
      }
    }
  }
  uint64_t v4 = 0;
LABEL_193:
  uint64_t v62 = *(unsigned int *)(a1 + 8);
  if (v62)
  {
    uint64_t v63 = (void *)(*(void *)(a1 + 16) + 8);
    do
    {
      unsigned int v64 = *((_DWORD *)v63 - 2);
      uint64_t v66 = *v63;
      v63 += 3;
      uint64_t v65 = v66;
      if (v64 >> 25) {
        uint64_t v67 = 5;
      }
      else {
        uint64_t v67 = 4;
      }
      if (v64 < 0x40000) {
        uint64_t v67 = 3;
      }
      if (v64 < 0x800) {
        uint64_t v67 = 2;
      }
      if (v64 >= 0x10) {
        uint64_t v68 = v67;
      }
      else {
        uint64_t v68 = 1;
      }
      v4 += v68 + v65;
      --v62;
    }
    while (v62);
  }
  return v4;
}

void protobuf_c_message_get_packed_size_cold_1()
{
  __assert_rtn("protobuf_c_message_get_packed_size", "protobuf-c.c", 715, "((message)->descriptor)->magic == PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC");
}

double pg_query__xml_expr__init(_OWORD *a1)
{
  a1[4] = xmmword_1E55DA9A0;
  a1[5] = unk_1E55DA9B0;
  a1[6] = xmmword_1E55DA9C0;
  *a1 = pg_query__xml_expr__init_init_value;
  a1[1] = *(_OWORD *)algn_1E55DA970;
  double result = dbl_1E55DA990[0];
  a1[2] = xmmword_1E55DA980;
  a1[3] = *(_OWORD *)dbl_1E55DA990;
  return result;
}

uint64_t core_yylex(unsigned char **a1, unsigned char **a2, unsigned char ***a3)
{
  a3[19] = a1;
  a3[20] = a2;
  if (!*((_DWORD *)a3 + 20))
  {
    *((_DWORD *)a3 + 2errstart(20, 0) = 1;
    if (*((_DWORD *)a3 + 21))
    {
      if (a3[1]) {
        goto LABEL_4;
      }
    }
    else
    {
      *((_DWORD *)a3 + 21) = 1;
      if (a3[1])
      {
LABEL_4:
        if (a3[2]) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
    }
    a3[1] = (unsigned char **)*MEMORY[0x1E4F143D0];
    if (a3[2])
    {
LABEL_5:
      uint64_t v4 = a3[5];
      if (!v4) {
        goto LABEL_11;
      }
LABEL_10:
      uint64_t v5 = a3[3];
      uint64_t v6 = v4[(void)v5];
      if (v6)
      {
LABEL_12:
        uint64_t v7 = (uint64_t)v5;
        a3[7] = (unsigned char **)*((void *)v6 + 4);
        uint64_t v8 = (unsigned char *)*((void *)v4[v7] + 2);
        a3[9] = (unsigned char **)v8;
        a3[17] = (unsigned char **)v8;
        a3[1] = *(unsigned char ***)v4[v7];
        *((unsigned char *)a3 + 4_Block_object_dispose(&a9, 8) = *v8;
        goto LABEL_13;
      }
LABEL_11:
      core_yyensure_buffer_stack((uint64_t)a3);
      a3[5][(void)a3[3]] = (unsigned char *)core_yy_create_buffer((uint64_t)a3[1], 0x4000, (uint64_t)a3);
      uint64_t v4 = a3[5];
      uint64_t v5 = a3[3];
      uint64_t v6 = v4[(void)v5];
      goto LABEL_12;
    }
LABEL_9:
    a3[2] = (unsigned char **)*MEMORY[0x1E4F143D8];
    uint64_t v4 = a3[5];
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
LABEL_13:
  uint64_t started = yy_start_state_list();
  while (2)
  {
    int v10 = a3[9];
    LODWORD(v11) = *((unsigned __int8 *)a3 + 48);
    *int v10 = v11;
    uint64_t v12 = *(void *)(started + 8 * *((int *)a3 + 21));
    uint64_t v13 = v10;
    if (*(__int16 *)(v12 + 4 * v11) == v11)
    {
LABEL_15:
      uint64_t v11 = v11;
      do
      {
        v12 += 4 * *(__int16 *)(v12 + 4 * v11 + 2);
        unsigned int v14 = *++v13;
        uint64_t v11 = v14;
      }
      while (*(__int16 *)(v12 + 4 * v14) == v14);
    }
LABEL_17:
    int v15 = *(__int16 *)(v12 - 2);
    a3[17] = (unsigned char **)v10;
    a3[8] = (unsigned char **)(v13 - v10);
    *((unsigned char *)a3 + 4_Block_object_dispose(&a9, 8) = *v13;
    *uint64_t v13 = 0;
    a3[9] = (unsigned char **)v13;
    unsigned int v16 = v15 - 1;
LABEL_18:
    switch(v16)
    {
      case 0u:
      case 5u:
      case 6u:
      case 7u:
        continue;
      case 1u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 275;
      case 2u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *((_DWORD *)*a3 + 15) = 0;
        *((_DWORD *)a3 + 21) = 5;
        goto LABEL_130;
      case 3u:
        ++*((_DWORD *)*a3 + 15);
LABEL_130:
        *uint64_t v13 = *((unsigned char *)a3 + 48);
        a3[17] = (unsigned char **)v10;
        a3[8] = (unsigned char **)2;
        a3[9] = (unsigned char **)(v10 + 2);
        *((unsigned char *)a3 + 4_Block_object_dispose(&a9, 8) = v10[2];
        v10[2] = 0;
        a3[9] = (unsigned char **)(v10 + 2);
        continue;
      case 4u:
        uint64_t v88 = *a3;
        int v89 = *((_DWORD *)*a3 + 15);
        if (v89 <= 0)
        {
          *((_DWORD *)a3 + 21) = 1;
          v88[21] = *((_DWORD *)a3 + 34) - *v88 + *((_DWORD *)a3 + 16);
          return 276;
        }
        v88[15] = v89 - 1;
        continue;
      case 8u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *((_DWORD *)a3 + 21) = 3;
        *((_DWORD *)*a3 + 12) = 0;
        uint64_t v90 = (uint64_t)*a3;
        int v91 = *((_DWORD *)*a3 + 12);
        int v92 = *((_DWORD *)*a3 + 13);
        if (v91 + 1 >= v92)
        {
          *(_DWORD *)(v90 + 52) = 2 * v92;
          (*a3)[5] = (unsigned char *)repalloc((uint64_t)(*a3)[5], *((int *)*a3 + 13));
          uint64_t v90 = (uint64_t)*a3;
          int v91 = *((_DWORD *)*a3 + 12);
        }
        uint64_t v93 = *(unsigned char **)(v90 + 40);
        char v94 = 98;
        goto LABEL_195;
      case 9u:
      case 0xAu:
        uint64_t v83 = a3[17];
        uint64_t v84 = a3[8];
        uint64_t v85 = *a3;
        int v87 = *((_DWORD *)*a3 + 12);
        int v86 = *((_DWORD *)*a3 + 13);
        if (v87 + (int)v84 < v86) {
          goto LABEL_200;
        }
        do
        {
          *((_DWORD *)v85 + 13) = 2 * v86;
          uint64_t v85 = *a3;
          int v86 = *((_DWORD *)*a3 + 13);
        }
        while (*((_DWORD *)*a3 + 12) + (int)v84 >= v86);
        goto LABEL_199;
      case 0xBu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *((_DWORD *)a3 + 21) = 9;
        *((_DWORD *)*a3 + 12) = 0;
        uint64_t v95 = (uint64_t)*a3;
        int v91 = *((_DWORD *)*a3 + 12);
        int v96 = *((_DWORD *)*a3 + 13);
        if (v91 + 1 >= v96)
        {
          *(_DWORD *)(v95 + 52) = 2 * v96;
          (*a3)[5] = (unsigned char *)repalloc((uint64_t)(*a3)[5], *((int *)*a3 + 13));
          uint64_t v95 = (uint64_t)*a3;
          int v91 = *((_DWORD *)*a3 + 12);
        }
        uint64_t v93 = *(unsigned char **)(v95 + 40);
        char v94 = 120;
        goto LABEL_195;
      case 0xCu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *uint64_t v13 = *((unsigned char *)a3 + 48);
        a3[17] = (unsigned char **)v10;
        a3[8] = (unsigned char **)1;
        a3[9] = (unsigned char **)(v10 + 1);
        *((unsigned char *)a3 + 4_Block_object_dispose(&a9, 8) = v10[1];
        v10[1] = 0;
        a3[9] = (unsigned char **)(v10 + 1);
        unsigned int v174 = ScanKeywordLookup("nchar", (uint64_t)(*a3)[2]);
        if ((v174 & 0x80000000) == 0) {
          goto LABEL_249;
        }
        uint64_t v183 = pstrdup("n");
        goto LABEL_316;
      case 0xDu:
        *((unsigned char *)*a3 + 8errstart(20, 0) = 1;
        *((unsigned char *)*a3 + 81) = 0;
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        uint64_t v97 = (uint64_t)*a3;
        if (*((unsigned char *)*a3 + 37)) {
          int v98 = 11;
        }
        else {
          int v98 = 15;
        }
        goto LABEL_145;
      case 0xEu:
        *((unsigned char *)*a3 + 8errstart(20, 0) = 0;
        *((unsigned char *)*a3 + 81) = 0;
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        int v99 = 15;
        goto LABEL_191;
      case 0xFu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        uint64_t v97 = (uint64_t)*a3;
        if (!*((unsigned char *)*a3 + 37)) {
          core_yylex_cold_1((unsigned int **)a3 + 20, a3);
        }
        int v98 = 21;
LABEL_145:
        *((_DWORD *)a3 + 21) = v98;
        *(_DWORD *)(v97 + 4_Block_object_dispose(&a9, 8) = 0;
        continue;
      case 0x10u:
        int v100 = *((_DWORD *)a3 + 21);
        if (v100 - 1 >= 0) {
          --v100;
        }
        *((_DWORD *)*a3 + 14) = v100 >> 1;
        *((_DWORD *)a3 + 21) = 13;
        continue;
      case 0x11u:
        *((_DWORD *)a3 + 21) = (2 * *((_DWORD *)*a3 + 14)) | 1;
        continue;
      case 0x12u:
      case 0x13u:
      case 0x49u:
        *uint64_t v13 = *((unsigned char *)a3 + 48);
        a3[17] = (unsigned char **)v10;
        a3[8] = 0;
        a3[9] = (unsigned char **)v10;
        *((unsigned char *)a3 + 4_Block_object_dispose(&a9, 8) = *v10;
        *int v10 = 0;
        a3[9] = (unsigned char **)v10;
        *((_DWORD *)a3 + 21) = 1;
        uint64_t v159 = *a3;
        switch(*((_DWORD *)*a3 + 14))
        {
          case 1:
            *a3[19] = litbufdup((uint64_t)a3);
            *((_DWORD *)*a3 + 21) = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3 + *((_DWORD *)a3 + 16);
            return 263;
          case 4:
            *a3[19] = litbufdup((uint64_t)a3);
            *((_DWORD *)*a3 + 21) = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3 + *((_DWORD *)a3 + 16);
            return 264;
          case 5:
          case 7:
            if (*((unsigned char *)v159 + 81))
            {
              pg_verifymbstr();
              uint64_t v159 = *a3;
            }
            size_t v160 = *((int *)v159 + 12);
            unint64_t v161 = (void *)palloc((int)v160 + 1);
            memcpy(v161, (*a3)[5], v160);
            *((unsigned char *)v161 + v16errstart(20, 0) = 0;
            *a3[19] = v161;
            goto LABEL_231;
          case 0xA:
            *a3[19] = litbufdup((uint64_t)a3);
            *((_DWORD *)*a3 + 21) = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3 + *((_DWORD *)a3 + 16);
            return 262;
          default:
            scanner_yyerror((size_t)"unhandled previous state in xqs", (uint64_t)a3);
        }
      case 0x14u:
        uint64_t v101 = *a3;
        int v91 = *((_DWORD *)*a3 + 12);
        int v102 = *((_DWORD *)*a3 + 13);
        if (v91 + 1 >= v102)
        {
          *((_DWORD *)v101 + 13) = 2 * v102;
          (*a3)[5] = (unsigned char *)repalloc((uint64_t)(*a3)[5], *((int *)*a3 + 13));
          uint64_t v101 = *a3;
          int v91 = *((_DWORD *)*a3 + 12);
        }
        uint64_t v93 = v101[5];
        char v94 = 39;
        goto LABEL_195;
      case 0x15u:
        uint64_t v83 = a3[17];
        uint64_t v84 = a3[8];
        uint64_t v85 = *a3;
        int v87 = *((_DWORD *)*a3 + 12);
        int v86 = *((_DWORD *)*a3 + 13);
        if (v87 + (int)v84 < v86) {
          goto LABEL_200;
        }
        do
        {
          *((_DWORD *)v85 + 13) = 2 * v86;
          uint64_t v85 = *a3;
          int v86 = *((_DWORD *)*a3 + 13);
        }
        while (*((_DWORD *)*a3 + 12) + (int)v84 >= v86);
        goto LABEL_199;
      case 0x16u:
        uint64_t v83 = a3[17];
        uint64_t v84 = a3[8];
        uint64_t v85 = *a3;
        int v87 = *((_DWORD *)*a3 + 12);
        int v86 = *((_DWORD *)*a3 + 13);
        if (v87 + (int)v84 < v86) {
          goto LABEL_200;
        }
        do
        {
          *((_DWORD *)v85 + 13) = 2 * v86;
          uint64_t v85 = *a3;
          int v86 = *((_DWORD *)*a3 + 13);
        }
        while (*((_DWORD *)*a3 + 12) + (int)v84 >= v86);
        goto LABEL_199;
      case 0x17u:
        int v103 = strtoul((const char *)a3[17] + 2, 0, 16);
        check_escape_warning((uint64_t)a3);
        *((_DWORD *)*a3 + 1_Block_object_dispose(&a9, 8) = *(_DWORD *)a3[20];
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        if ((v103 & 0xFFFFFC00) == 0xD800)
        {
          *((_DWORD *)*a3 + 19) = v103;
          *((_DWORD *)a3 + 21) = 23;
        }
        else
        {
          if ((v103 & 0xFFFFFC00) == 0xDC00) {
LABEL_342:
          }
            scanner_yyerror((size_t)"invalid Unicode surrogate pair", (uint64_t)a3);
          addunicode(v103, (_DWORD **)a3);
        }
        *(_DWORD *)a3[20] = *((_DWORD *)*a3 + 18);
        continue;
      case 0x18u:
        unsigned int v104 = strtoul((const char *)a3[17] + 2, 0, 16);
        *((_DWORD *)*a3 + 1_Block_object_dispose(&a9, 8) = *(_DWORD *)a3[20];
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        if (v104 >> 10 != 55) {
          goto LABEL_342;
        }
        addunicode((v104 & 0x3FF | ((*((_DWORD *)*a3 + 19) & 0x3FF) << 10)) + 0x10000, (_DWORD **)a3);
        *(_DWORD *)a3[20] = *((_DWORD *)*a3 + 18);
        *((_DWORD *)a3 + 21) = 15;
        continue;
      case 0x19u:
      case 0x1Au:
      case 0x4Eu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        goto LABEL_342;
      case 0x1Bu:
        core_yylex_cold_2((_DWORD *)a3 + 34, a3, (_DWORD **)a3 + 20);
      case 0x1Cu:
        if (*((unsigned char *)a3[17] + 1) != 39) {
          goto LABEL_205;
        }
        int v105 = *((_DWORD *)*a3 + 8);
        if (v105 == 2)
        {
          if ((int)pg_get_client_encoding() >= 35 && (int)pg_get_client_encoding() <= 41) {
LABEL_359:
          }
            core_yylex_cold_3((unsigned int **)a3 + 20, a3);
        }
        else if (!v105)
        {
          goto LABEL_359;
        }
LABEL_205:
        int v123 = *((unsigned __int8 *)a3[17] + 1);
        if (v123 == 92)
        {
          if (*((unsigned char *)*a3 + 80) && *((unsigned char *)*a3 + 36) && errstart(19, 0))
          {
            errcode();
            errmsg("nonstandard use of \\\\ in a string literal", v140, v141, v142, v143, v144, v145, v146, v201);
            errhint("Use the escape string syntax for backslashes, e.g., E'\\\\'.", v147, v148, v149, v150, v151, v152, v153, v203);
            uint64_t v154 = *(unsigned int *)a3[20];
            if ((v154 & 0x80000000) == 0)
            {
              pg_mbstrlen_with_len(**a3, v154);
              errposition();
            }
            int v139 = 1439;
LABEL_219:
            errfinish("scan.l", v139, (uint64_t)"check_string_escape_warning");
          }
LABEL_220:
          *((unsigned char *)*a3 + 8errstart(20, 0) = 0;
          int v155 = *((unsigned __int8 *)a3[17] + 1);
          HIDWORD(v157) = v155;
          LODWORD(v157) = v155 - 98;
          unsigned int v156 = v157 >> 1;
          if (v156 >= 0xA) {
            goto LABEL_224;
          }
          goto LABEL_223;
        }
        if (v123 == 39)
        {
          if (*((unsigned char *)*a3 + 80) && *((unsigned char *)*a3 + 36) && errstart(19, 0))
          {
            errcode();
            errmsg("nonstandard use of \\' in a string literal", v124, v125, v126, v127, v128, v129, v130, v201);
            errhint("Use '' to write quotes in strings, or use the escape string syntax (E'...').", v131, v132, v133, v134, v135, v136, v137, v202);
            uint64_t v138 = *(unsigned int *)a3[20];
            if ((v138 & 0x80000000) == 0)
            {
              pg_mbstrlen_with_len(**a3, v138);
              errposition();
            }
            int v139 = 1429;
            goto LABEL_219;
          }
          goto LABEL_220;
        }
        check_escape_warning((uint64_t)a3);
        int v155 = *((unsigned __int8 *)a3[17] + 1);
        HIDWORD(v15_Block_object_dispose(&a9, 8) = v155;
        LODWORD(v15_Block_object_dispose(&a9, 8) = v155 - 98;
        unsigned int v156 = v158 >> 1;
        if (v156 >= 0xA) {
          goto LABEL_224;
        }
LABEL_223:
        if ((0x345u >> v156))
        {
          char v79 = byte_18EBDC604[v156];
          goto LABEL_122;
        }
LABEL_224:
        char v79 = v155;
        if ((char)v155 <= 0) {
          *((unsigned char *)*a3 + 81) = 1;
        }
LABEL_122:
        uint64_t v80 = *a3;
        int v81 = *((_DWORD *)*a3 + 12);
        int v82 = *((_DWORD *)*a3 + 13);
        if (v81 + 1 >= v82)
        {
          *((_DWORD *)v80 + 13) = 2 * v82;
          (*a3)[5] = (unsigned char *)repalloc((uint64_t)(*a3)[5], *((int *)*a3 + 13));
          uint64_t v80 = *a3;
          int v81 = *((_DWORD *)*a3 + 12);
        }
        v80[5][v81] = v79;
LABEL_196:
        ++*((_DWORD *)*a3 + 12);
        continue;
      case 0x1Du:
        uint64_t v106 = (char *)a3[17] + 1;
        int v107 = 8;
        goto LABEL_170;
      case 0x1Eu:
        uint64_t v106 = (char *)a3[17] + 2;
        int v107 = 16;
LABEL_170:
        char v108 = strtoul(v106, 0, v107);
        check_escape_warning((uint64_t)a3);
        unint64_t v109 = *a3;
        int v110 = *((_DWORD *)*a3 + 12);
        int v111 = *((_DWORD *)*a3 + 13);
        if (v110 + 1 >= v111)
        {
          *((_DWORD *)v109 + 13) = 2 * v111;
          (*a3)[5] = (unsigned char *)repalloc((uint64_t)(*a3)[5], *((int *)*a3 + 13));
          unint64_t v109 = *a3;
          int v110 = *((_DWORD *)*a3 + 12);
        }
        v109[5][v110] = v108;
        ++*((_DWORD *)*a3 + 12);
        if (v108) {
          BOOL v112 = (v108 & 0x80) == 0;
        }
        else {
          BOOL v112 = 0;
        }
        if (!v112) {
          *((unsigned char *)*a3 + 81) = 1;
        }
        continue;
      case 0x1Fu:
      case 0x25u:
        char v79 = *(unsigned char *)a3[17];
        goto LABEL_122;
      case 0x20u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        (*a3)[8] = pstrdup((const char *)a3[17]);
        int v99 = 17;
        goto LABEL_191;
      case 0x21u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *uint64_t v13 = *((unsigned char *)a3 + 48);
        a3[17] = (unsigned char **)v10;
        a3[8] = (unsigned char **)1;
        a3[9] = (unsigned char **)(v10 + 1);
        *((unsigned char *)a3 + 4_Block_object_dispose(&a9, 8) = v10[1];
        v10[1] = 0;
        a3[9] = (unsigned char **)(v10 + 1);
        return *(char *)a3[17];
      case 0x22u:
        uint64_t v113 = a3[17];
        uint64_t v114 = *a3;
        unint64_t v115 = (*a3)[8];
        if (strcmp((const char *)v113, v115))
        {
          int v116 = *((_DWORD *)a3 + 16) - 1;
          int v118 = *((_DWORD *)v114 + 12);
          int v117 = *((_DWORD *)v114 + 13);
          if (v116 + v118 >= v117)
          {
            do
            {
              *((_DWORD *)v114 + 13) = 2 * v117;
              uint64_t v114 = *a3;
              int v117 = *((_DWORD *)*a3 + 13);
            }
            while (*((_DWORD *)*a3 + 12) + v116 >= v117);
            (*a3)[5] = (unsigned char *)repalloc((uint64_t)v114[5], v117);
            uint64_t v114 = *a3;
            int v118 = *((_DWORD *)*a3 + 12);
          }
          memcpy(&v114[5][v118], v113, v116);
          *((_DWORD *)*a3 + 12) += v116;
          int v119 = *((_DWORD *)a3 + 16);
          *uint64_t v13 = *((unsigned char *)a3 + 48);
          char v120 = (unsigned char **)(v119 - 1);
          a3[17] = (unsigned char **)v10;
          a3[8] = v120;
          a3[9] = (unsigned char **)((char *)v120 + (void)v10);
          *((unsigned char *)a3 + 4_Block_object_dispose(&a9, 8) = *((unsigned char *)v120 + (void)v10);
          *((unsigned char *)v120 + (void)v1errstart(20, 0) = 0;
          a3[9] = (unsigned char **)((char *)v120 + (void)v10);
          continue;
        }
        pfree((uint64_t)v115);
        (*a3)[8] = 0;
        *((_DWORD *)a3 + 21) = 1;
        *a3[19] = litbufdup((uint64_t)a3);
LABEL_231:
        *((_DWORD *)*a3 + 21) = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3 + *((_DWORD *)a3 + 16);
        return 261;
      case 0x23u:
        uint64_t v83 = a3[17];
        uint64_t v84 = a3[8];
        uint64_t v85 = *a3;
        int v87 = *((_DWORD *)*a3 + 12);
        int v86 = *((_DWORD *)*a3 + 13);
        if (v87 + (int)v84 < v86) {
          goto LABEL_200;
        }
        do
        {
          *((_DWORD *)v85 + 13) = 2 * v86;
          uint64_t v85 = *a3;
          int v86 = *((_DWORD *)*a3 + 13);
        }
        while (*((_DWORD *)*a3 + 12) + (int)v84 >= v86);
        goto LABEL_199;
      case 0x24u:
        uint64_t v83 = a3[17];
        uint64_t v84 = a3[8];
        uint64_t v85 = *a3;
        int v87 = *((_DWORD *)*a3 + 12);
        int v86 = *((_DWORD *)*a3 + 13);
        if (v87 + (int)v84 < v86) {
          goto LABEL_200;
        }
        do
        {
          *((_DWORD *)v85 + 13) = 2 * v86;
          uint64_t v85 = *a3;
          int v86 = *((_DWORD *)*a3 + 13);
        }
        while (*((_DWORD *)*a3 + 12) + (int)v84 >= v86);
        goto LABEL_199;
      case 0x26u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        int v99 = 7;
        goto LABEL_191;
      case 0x27u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        int v99 = 19;
LABEL_191:
        *((_DWORD *)a3 + 21) = v99;
        *((_DWORD *)*a3 + 12) = 0;
        continue;
      case 0x28u:
        *((_DWORD *)a3 + 21) = 1;
        size_t v178 = *((int *)*a3 + 12);
        if (!v178) {
          goto LABEL_355;
        }
        uint64_t v179 = (unsigned char *)palloc((int)v178 + 1);
        memcpy(v179, (*a3)[5], v178);
        v179[v178] = 0;
        int v180 = *((_DWORD *)*a3 + 12);
        if (v180 >= 64) {
          truncate_identifier(v179, v180, 1);
        }
        *a3[19] = v179;
        goto LABEL_317;
      case 0x29u:
        *((_DWORD *)a3 + 21) = 1;
        size_t v181 = *((int *)*a3 + 12);
        if (!v181) {
LABEL_355:
        }
          scanner_yyerror((size_t)"zero-length delimited identifier", (uint64_t)a3);
        Swift::String v182 = (void *)palloc((int)v181 + 1);
        memcpy(v182, (*a3)[5], v181);
        *((unsigned char *)v182 + v181) = 0;
        *a3[19] = v182;
        *((_DWORD *)*a3 + 21) = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3 + *((_DWORD *)a3 + 16);
        return 259;
      case 0x2Au:
        uint64_t v121 = *a3;
        int v91 = *((_DWORD *)*a3 + 12);
        int v122 = *((_DWORD *)*a3 + 13);
        if (v91 + 1 >= v122)
        {
          *((_DWORD *)v121 + 13) = 2 * v122;
          (*a3)[5] = (unsigned char *)repalloc((uint64_t)(*a3)[5], *((int *)*a3 + 13));
          uint64_t v121 = *a3;
          int v91 = *((_DWORD *)*a3 + 12);
        }
        uint64_t v93 = v121[5];
        char v94 = 34;
LABEL_195:
        v93[v91] = v94;
        goto LABEL_196;
      case 0x2Bu:
        uint64_t v83 = a3[17];
        uint64_t v84 = a3[8];
        uint64_t v85 = *a3;
        int v87 = *((_DWORD *)*a3 + 12);
        int v86 = *((_DWORD *)*a3 + 13);
        if (v87 + (int)v84 >= v86)
        {
          do
          {
            *((_DWORD *)v85 + 13) = 2 * v86;
            uint64_t v85 = *a3;
            int v86 = *((_DWORD *)*a3 + 13);
          }
          while (*((_DWORD *)*a3 + 12) + (int)v84 >= v86);
LABEL_199:
          (*a3)[5] = (unsigned char *)repalloc((uint64_t)v85[5], v86);
          uint64_t v85 = *a3;
          int v87 = *((_DWORD *)*a3 + 12);
        }
LABEL_200:
        memcpy(&v85[5][v87], v83, (int)v84);
        *((_DWORD *)*a3 + 12) += v84;
        continue;
      case 0x2Cu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *uint64_t v13 = *((unsigned char *)a3 + 48);
        a3[17] = (unsigned char **)v10;
        a3[8] = (unsigned char **)1;
        a3[9] = (unsigned char **)(v10 + 1);
        *((unsigned char *)a3 + 4_Block_object_dispose(&a9, 8) = v10[1];
        v10[1] = 0;
        a3[9] = (unsigned char **)(v10 + 1);
        goto LABEL_259;
      case 0x2Du:
        return *((char *)a3[17] + 1);
      case 0x2Eu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 268;
      case 0x2Fu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 269;
      case 0x30u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 270;
      case 0x31u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 271;
      case 0x32u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 272;
      case 0x33u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 273;
      case 0x34u:
      case 0x35u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return 274;
      case 0x36u:
      case 0x40u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return *(char *)a3[17];
      case 0x37u:
        uint64_t v184 = a3[8];
        uint64_t v185 = (char *)a3[17];
        uint64_t v186 = strstr(v185, "/*");
        uint64_t v187 = strstr(v185, "--");
        if (v186 > v187 && v187 != 0 || v186 == 0) {
          uint64_t v190 = v187;
        }
        else {
          uint64_t v190 = v186;
        }
        if (v190) {
          LODWORD(v184) = v190 - v185;
        }
        if ((int)v184 < 2) {
          goto LABEL_286;
        }
        int v191 = v185[v184 - 1];
        if (v191 != 45 && v191 != 43) {
          goto LABEL_286;
        }
        uint64_t v192 = (v184 - 2);
        while (2)
        {
          switch(v185[v192])
          {
            case '!':
            case '#':
            case '%':
            case '&':
            case '?':
            case '@':
            case '^':
            case '|':
            case '~':
              break;
            default:
              if (--v192 != -1) {
                continue;
              }
              if ((int)v184 < 3)
              {
                LODWORD(v184) = 1;
              }
              else
              {
                uint64_t v198 = v184;
                int v199 = v184 - 1;
                while (1)
                {
                  int v200 = v185[(v198 - 2)];
                  if (v200 != 45 && v200 != 43) {
                    break;
                  }
                  --v198;
                  --v199;
                  LODWORD(v184) = 1;
                  if ((unint64_t)(v198 + 1) <= 3) {
                    goto LABEL_286;
                  }
                }
                LODWORD(v184) = v199;
              }
              break;
          }
          break;
        }
LABEL_286:
        if (*v185 == 63)
        {
          if (strcmp(v185, "?<@")
            && strcmp(v185, "?@>")
            && strcmp(v185, "?~")
            && strcmp(v185, "?@")
            && strcmp(v185, "?|")
            && strcmp(v185, "?&")
            && strcmp(v185, "?#")
            && strcmp(v185, "?-")
            && strcmp(v185, "?-|")
            && strcmp(v185, "?||"))
          {
            LODWORD(v184) = 1;
          }
        }
        else
        {
          uint64_t v193 = strchr(v185, 63);
          if (v193)
          {
            int v194 = (int)v193;
            if (strcmp(v185, "^?"))
            {
              if (strcmp(v185, "#?") && strcmp(v185, "@?")) {
                LODWORD(v184) = v194 - v185;
              }
            }
          }
        }
        *(_DWORD *)a3[20] = v185 - *(_DWORD *)*a3;
        if ((unint64_t)a3[8] <= (int)v184) {
          goto LABEL_312;
        }
        *uint64_t v13 = *((unsigned char *)a3 + 48);
        a3[17] = (unsigned char **)v10;
        a3[8] = (unsigned char **)(int)v184;
        a3[9] = (unsigned char **)&v10[(int)v184];
        *((unsigned char *)a3 + 4_Block_object_dispose(&a9, 8) = v10[(int)v184];
        v10[(int)v184] = 0;
        a3[9] = (unsigned char **)&v10[(int)v184];
        if (v184 == 2)
        {
          uint64_t v195 = (const char *)a3[17];
          switch(*v195)
          {
            case '!':
              if (v195[1] != 61) {
                break;
              }
              return 274;
            case '<':
              int v197 = *((unsigned __int8 *)v195 + 1);
              if (v197 == 61) {
                return 272;
              }
              if (v197 == 62) {
                return 274;
              }
              break;
            case '=':
              if (v195[1] != 62) {
                break;
              }
              return 271;
            case '>':
              if (v195[1] != 61) {
                break;
              }
              return 273;
            default:
              break;
          }
        }
        else if (v184 == 1)
        {
          uint64_t v195 = (const char *)a3[17];
          uint64_t v162 = *v195;
          if (memchr(",()[].;:+-*/%^<>=?", *v195, 0x13uLL)) {
            return v162;
          }
        }
        else
        {
LABEL_312:
          if ((int)v184 > 63) {
            scanner_yyerror((size_t)"operator too long", (uint64_t)a3);
          }
          uint64_t v195 = (const char *)a3[17];
        }
        *a3[19] = pstrdup(v195);
        return 265;
      case 0x38u:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *(_DWORD *)a3[19] = atol((const char *)a3[17] + 1);
        return 267;
      case 0x39u:
        goto LABEL_239;
      case 0x3Au:
      case 0x3Cu:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        *a3[19] = pstrdup((const char *)a3[17]);
        return 260;
      case 0x3Bu:
      case 0x3Eu:
        int v163 = *((_DWORD *)a3 + 16);
        *uint64_t v13 = *((unsigned char *)a3 + 48);
        int v164 = v163 - 2;
        goto LABEL_238;
      case 0x3Du:
        int v165 = *((_DWORD *)a3 + 16);
        *uint64_t v13 = *((unsigned char *)a3 + 48);
        int v164 = v165 - 1;
LABEL_238:
        int v166 = &v10[v164];
        a3[17] = (unsigned char **)v10;
        a3[8] = (unsigned char **)v164;
        a3[9] = (unsigned char **)v166;
        *((unsigned char *)a3 + 4_Block_object_dispose(&a9, 8) = *v166;
        *int v166 = 0;
        a3[9] = (unsigned char **)v166;
LABEL_239:
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        uint64_t v167 = (const char *)a3[17];
        uint64_t v168 = (void **)a3[19];
        uint64_t v204 = 0;
        *__error() = 0;
        int v169 = strtoint(v167, &v204, 10);
        if (*v204 || (int v170 = v169, *__error() == 34))
        {
          void *v168 = pstrdup(v167);
          return 260;
        }
        else
        {
          *(_DWORD *)uint64_t v168 = v170;
          return 266;
        }
      case 0x3Fu:
        uint64_t v171 = (const char *)pstrdup((const char *)a3[17]);
        unint64_t v172 = v171;
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        uint64_t v173 = (uint64_t)a3[8] - 1;
        if (*((unsigned char *)a3[17] + v173) == 63) {
          v171[v173] = 0;
        }
        unsigned int v174 = ScanKeywordLookup(v171, (uint64_t)(*a3)[2]);
        if ((v174 & 0x80000000) != 0)
        {
LABEL_259:
          uint64_t v183 = downcase_truncate_identifier((int8x16_t *)a3[17], *((_DWORD *)a3 + 16), 1);
LABEL_316:
          *a3[19] = v183;
LABEL_317:
          *((_DWORD *)*a3 + 21) = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3 + *((_DWORD *)a3 + 16);
          return 258;
        }
        else
        {
          uint64_t v175 = (uint64_t)a3[8] - 1;
          if (!v172[v175])
          {
            *uint64_t v13 = *((unsigned char *)a3 + 48);
            uint64_t v176 = &v10[(int)v175];
            a3[17] = (unsigned char **)v10;
            a3[8] = (unsigned char **)(int)v175;
            a3[9] = (unsigned char **)v176;
            *((unsigned char *)a3 + 4_Block_object_dispose(&a9, 8) = *v176;
            *uint64_t v176 = 0;
            a3[9] = (unsigned char **)v176;
          }
LABEL_249:
          uint64_t v177 = 2 * v174;
          *a3[19] = (unsigned char *)(*(void *)(*a3)[2] + *(unsigned __int16 *)(*((void *)(*a3)[2] + 1) + v177));
          return *(unsigned __int16 *)&(*a3)[3][v177];
        }
      case 0x41u:
        fprintf_to_ereport("flex scanner jammed");
      case 0x42u:
        uint64_t v17 = a3[17];
        *uint64_t v13 = *((unsigned char *)a3 + 48);
        uint64_t v18 = a3[5];
        uint64_t v19 = a3[3];
        int v20 = v18[(void)v19];
        if (!*((_DWORD *)v20 + 16))
        {
          a3[7] = (unsigned char **)*((void *)v20 + 4);
          *(void *)v18[(void)v19] = a3[1];
          *((_DWORD *)a3[5][(void)a3[3]] + 16) = 1;
          uint64_t v18 = a3[5];
          uint64_t v19 = a3[3];
          int v20 = v18[(void)v19];
        }
        unint64_t v21 = (unint64_t)a3[9];
        uint64_t v22 = (unsigned char *)*((void *)v20 + 1);
        uint64_t v23 = a3[7];
        if ((unsigned char **)v21 <= (unsigned char **)((char *)v23 + (void)v22))
        {
          int v10 = a3[17];
          uint64_t v70 = ~v17 + (int)v13;
          uint64_t v13 = &v10[v70];
          a3[9] = (unsigned char **)&v10[v70];
          uint64_t v12 = *(void *)(started + 8 * *((int *)a3 + 21));
          if (v10 < &v10[v70])
          {
            uint64_t v71 = v10;
            do
            {
              unsigned int v73 = *v71++;
              uint64_t v72 = v73;
              if (!v73) {
                uint64_t v72 = 256;
              }
              v12 += 4 * *(__int16 *)(v12 + 4 * v72 + 2);
              --v70;
            }
            while (v70);
          }
          uint64_t v74 = v12 + 4 * *(__int16 *)(v12 + 1026);
          if (*(_WORD *)(v12 + 1024) != 256 || v74 == 0) {
            goto LABEL_17;
          }
          a3[9] = (unsigned char **)++v13;
          uint64_t v12 = v74;
          goto LABEL_119;
        }
        if ((unsigned char *)v21 > &v22[(void)v23 + 1]) {
          fprintf_to_ereport("fatal flex scanner internal error--end of buffer missed");
        }
        unint64_t v24 = (unint64_t)a3[17];
        unint64_t v25 = v21 - v24;
        if (!*((_DWORD *)v20 + 15))
        {
          if (v25 != 1) {
            goto LABEL_97;
          }
LABEL_90:
          *((_DWORD *)a3 + 22) = 0;
          a3[9] = (unsigned char **)v24;
          int v67 = *((_DWORD *)a3 + 21);
          if (v67 - 1 >= 0) {
            --v67;
          }
          unsigned int v16 = (v67 >> 1) + 67;
          if (v16 > 0x4E) {
LABEL_352:
          }
            fprintf_to_ereport("fatal flex scanner internal error--no action found");
          goto LABEL_18;
        }
        int v26 = v25 - 1;
        if ((int)v25 - 1 < 1) {
          goto LABEL_45;
        }
        LODWORD(v27) = 0;
        unint64_t v28 = (v21 - v24 - 2);
        if (v28 < 7)
        {
          unsigned int v29 = (char *)a3[17];
          goto LABEL_41;
        }
        unsigned int v29 = (char *)a3[17];
        if ((unint64_t)&v22[-v24] < 0x20) {
          goto LABEL_41;
        }
        unint64_t v30 = v28 + 1;
        if (v28 >= 0x1F)
        {
          uint64_t v31 = v30 & 0x1FFFFFFE0;
          uint64_t v32 = v22 + 16;
          unint64_t v33 = (long long *)(v24 + 16);
          uint64_t v34 = v30 & 0x1FFFFFFE0;
          do
          {
            long long v35 = *v33;
            *(v32 - 1) = *(v33 - 1);
            *uint64_t v32 = v35;
            v32 += 2;
            v33 += 2;
            v34 -= 32;
          }
          while (v34);
          if (v30 == v31) {
            goto LABEL_44;
          }
          if ((v30 & 0x18) == 0)
          {
            v22 += v31;
            unsigned int v29 = (char *)(v24 + v31);
            LODWORD(v27) = v30 & 0xFFFFFFE0;
LABEL_41:
            int v41 = v27 + v24 - v21 + 1;
            do
            {
              char v42 = *v29++;
              *v22++ = v42;
            }
            while (!__CFADD__(v41++, 1));
            goto LABEL_44;
          }
        }
        else
        {
          uint64_t v31 = 0;
        }
        uint64_t v27 = v30 & 0x1FFFFFFF8;
        unsigned int v29 = (char *)(v24 + (v30 & 0x1FFFFFFF8));
        unint64_t v36 = &v22[v30 & 0x1FFFFFFF8];
        uint64_t v37 = &v22[v31];
        uint64_t v38 = (uint64_t *)(v24 + v31);
        uint64_t v39 = v31 - (v30 & 0x1FFFFFFF8);
        do
        {
          uint64_t v40 = *v38++;
          *v37++ = v40;
          v39 += 8;
        }
        while (v39);
        uint64_t v22 = v36;
        if (v30 != v27) {
          goto LABEL_41;
        }
LABEL_44:
        uint64_t v18 = a3[5];
        uint64_t v19 = a3[3];
        int v20 = v18[(void)v19];
LABEL_45:
        if (*((_DWORD *)v20 + 16) == 2)
        {
          a3[7] = 0;
          *((void *)v18[(void)v19] + 4) = 0;
          if (a3[7]) {
            goto LABEL_47;
          }
        }
        else
        {
          size_t v201 = (size_t)v17;
          uint64_t v45 = ~(uint64_t)v26;
          unint64_t v46 = *((void *)v20 + 3);
          unint64_t v47 = v46 + v45;
          if (!(v46 + v45))
          {
            uint64_t v52 = a3[9];
            while (*((_DWORD *)v20 + 10))
            {
              uint64_t v54 = *((void *)v20 + 1);
              uint64_t v55 = 2 * v46;
              uint64_t v56 = v46 + (v46 >> 3);
              if (v55) {
                uint64_t v56 = v55;
              }
              *((void *)v20 + 3) = v56;
              if (v54)
              {
                uint64_t v53 = repalloc(v54, v56 + 2);
                *((void *)v20 + 1) = v53;
                if (!v53) {
                  goto LABEL_340;
                }
              }
              else
              {
                uint64_t v53 = palloc(v56 + 2);
                *((void *)v20 + 1) = v53;
                if (!v53) {
                  goto LABEL_340;
                }
              }
              uint64_t v52 = (unsigned char **)(v53 + (int)v52 - (int)v54);
              a3[9] = v52;
              int v20 = a3[5][(void)a3[3]];
              unint64_t v46 = *((void *)v20 + 3);
              unint64_t v47 = v46 + v45;
              if (v46 + v45) {
                goto LABEL_49;
              }
            }
            *((void *)v20 + 1) = 0;
LABEL_340:
            fprintf_to_ereport("fatal error - scanner input buffer overflow");
          }
LABEL_49:
          if (v47 >= 0x2000) {
            size_t v48 = 0x2000;
          }
          else {
            size_t v48 = v47;
          }
          if (*((_DWORD *)v20 + 11))
          {
            size_t v49 = 0;
            while (1)
            {
              int v50 = getc((FILE *)a3[1]);
              if (v50 == -1 || v50 == 10) {
                break;
              }
              *(unsigned char *)(*((void *)a3[5][(void)a3[3]] + 1) + v26 + v49++) = v50;
              if (v48 == v49)
              {
                size_t v49 = v48;
                break;
              }
            }
            if (v50 == -1)
            {
              if (ferror((FILE *)a3[1])) {
LABEL_353:
              }
                fprintf_to_ereport("input in flex scanner failed");
            }
            else if (v50 == 10)
            {
              *(unsigned char *)(*((void *)a3[5][(void)a3[3]] + 1) + v26 + v49++) = 10;
            }
            a3[7] = (unsigned char **)v49;
          }
          else
          {
            *__error() = 0;
            size_t v49 = fread((void *)(*((void *)a3[5][(void)a3[3]] + 1) + v26), 1uLL, v48, (FILE *)a3[1]);
            a3[7] = (unsigned char **)v49;
            if (!v49)
            {
              while (ferror((FILE *)a3[1]))
              {
                if (*__error() != 4) {
                  goto LABEL_353;
                }
                *__error() = 0;
                clearerr((FILE *)a3[1]);
                size_t v57 = fread((void *)(*((void *)a3[5][(void)a3[3]] + 1) + v26), 1uLL, v48, (FILE *)a3[1]);
                a3[7] = (unsigned char **)v57;
                if (v57)
                {
                  size_t v49 = v57;
                  goto LABEL_79;
                }
              }
              size_t v49 = 0;
            }
          }
LABEL_79:
          *((void *)a3[5][(void)a3[3]] + 4) = v49;
          if (a3[7])
          {
LABEL_47:
            int v44 = 0;
            goto LABEL_83;
          }
        }
        if (v26)
        {
          int v44 = 2;
          *((_DWORD *)a3[5][(void)a3[3]] + 16) = 2;
        }
        else
        {
          core_yyrestart((uint64_t)a3[1], (uint64_t)a3);
          int v44 = 1;
        }
LABEL_83:
        unint64_t v58 = (unint64_t)a3[7];
        uint64_t v59 = (unsigned char **)(v58 + v26);
        uint64_t v60 = a3[5];
        uint64_t v61 = a3[3];
        uint64_t v62 = v60[(void)v61];
        if ((unint64_t)v59 > *((void *)v62 + 3))
        {
          uint64_t v63 = *((void *)v62 + 1);
          if (v63) {
            uint64_t v64 = repalloc(v63, (size_t)v59 + (v58 >> 1));
          }
          else {
            uint64_t v64 = palloc((size_t)v59 + (v58 >> 1));
          }
          *((void *)a3[5][(void)a3[3]] + 1) = v64;
          uint64_t v60 = a3[5];
          uint64_t v61 = a3[3];
          if (!*((void *)v60[(void)v61] + 1)) {
            fprintf_to_ereport("out of dynamic memory in yy_get_next_buffer()");
          }
          uint64_t v59 = (unsigned char **)((char *)a3[7] + v26);
        }
        a3[7] = v59;
        *((unsigned char *)v59 + *((void *)v60[(void)v61] + 1)) = 0;
        *((unsigned char *)a3[7] + *((void *)a3[5][(void)a3[3]] + 1) + 1) = 0;
        uint64_t v65 = a3[5];
        uint64_t v66 = a3[3];
        unint64_t v24 = *((void *)v65[(void)v66] + 1);
        a3[17] = (unsigned char **)v24;
        if (v44 == 1) {
          goto LABEL_90;
        }
        if (v44)
        {
          uint64_t v22 = (unsigned char *)*((void *)v65[(void)v66] + 1);
          uint64_t v23 = a3[7];
LABEL_97:
          int v10 = (unsigned char *)v24;
          uint64_t v13 = (char *)v23 + (void)v22;
          a3[9] = (unsigned char **)((char *)v23 + (void)v22);
          uint64_t v12 = *(void *)(started + 8 * *((int *)a3 + 21));
          if (v24 < (unint64_t)v13)
          {
            uint64_t v68 = 0;
            do
            {
              uint64_t v69 = v10[v68];
              if (!v10[v68]) {
                uint64_t v69 = 256;
              }
              v12 += 4 * *(__int16 *)(v12 + 4 * v69 + 2);
              ++v68;
            }
            while (v13 - v10 != v68);
          }
          goto LABEL_17;
        }
        uint64_t v76 = ~v17 + (int)v13;
        uint64_t v13 = (unsigned char *)(v24 + v76);
        a3[9] = (unsigned char **)(v24 + v76);
        uint64_t v12 = *(void *)(started + 8 * *((int *)a3 + 21));
        if (v24 < v24 + v76)
        {
          uint64_t v77 = 0;
          do
          {
            uint64_t v78 = *(unsigned __int8 *)(v24 + v77);
            if (!*(unsigned char *)(v24 + v77)) {
              uint64_t v78 = 256;
            }
            v12 += 4 * *(__int16 *)(v12 + 4 * v78 + 2);
            ++v77;
          }
          while (v76 != v77);
        }
        int v10 = (unsigned char *)v24;
LABEL_119:
        LODWORD(v11) = *v13;
        if (*(__int16 *)(v12 + 4 * *v13) != v11) {
          goto LABEL_17;
        }
        goto LABEL_15;
      case 0x43u:
        uint64_t v162 = 0;
        *(_DWORD *)a3[20] = *((_DWORD *)a3 + 34) - *(_DWORD *)*a3;
        return v162;
      case 0x44u:
        scanner_yyerror((size_t)"unterminated bit string literal", (uint64_t)a3);
      case 0x45u:
        scanner_yyerror((size_t)"unterminated /* comment", (uint64_t)a3);
      case 0x46u:
      case 0x4Cu:
        scanner_yyerror((size_t)"unterminated quoted identifier", (uint64_t)a3);
      case 0x47u:
        scanner_yyerror((size_t)"unterminated hexadecimal string literal", (uint64_t)a3);
      case 0x48u:
      case 0x4Au:
      case 0x4Du:
        scanner_yyerror((size_t)"unterminated quoted string", (uint64_t)a3);
      case 0x4Bu:
        scanner_yyerror((size_t)"unterminated dollar-quoted string", (uint64_t)a3);
      default:
        goto LABEL_352;
    }
  }
}

int8x16_t *downcase_truncate_identifier(int8x16_t *a1, unsigned int a2, char a3)
{
  return downcase_identifier(a1, a2, a3, 1);
}

void core_yylex_cold_3(unsigned int **a1, unsigned char ***a2)
{
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("unsafe use of \\' in a string literal", v4, v5, v6, v7, v8, v9, v10, v18);
  errhint("Use '' to write quotes in strings. \\' is insecure in client-only encodings.", v11, v12, v13, v14, v15, v16, v17, v19);
  scanner_errposition(**a1, a2);
  errfinish("scan.l", 709, (uint64_t)"core_yylex");
  __break(1u);
}

uint64_t repalloc(uint64_t a1, size_t a2)
{
  if (a2 >> 30) {
    repalloc_cold_2(a2);
  }
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, size_t))(*(void *)(v3 + 16) + 16))(v3, a1, a2);
  if (!result) {
    repalloc_cold_1(v3, a2);
  }
  return result;
}

uint64_t pg_query__param__pack(void **a1, uint64_t a2)
{
  if (*a1 != &pg_query__param__descriptor) {
    pg_query__param__pack_cold_1();
  }

  return protobuf_c_message_pack((uint64_t)a1, a2);
}

void pg_query__param__pack_cold_1()
{
  __assert_rtn("pg_query__param__pack", "pg_query.pb-c.c", 746, "message->base.descriptor == &pg_query__param__descriptor");
}

void MIN.processEvent(changeRecord:expressionEvaluator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_37();
  a19 = v25;
  a20 = v26;
  a10 = (void (*)(uint64_t))v20;
  uint64_t v28 = v27;
  uint64_t v214 = v29;
  uint64_t v215 = v30;
  uint64_t v199 = v31;
  OUTLINED_FUNCTION_1_12();
  uint64_t v200 = v33;
  uint64_t v201 = v32;
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_2_7();
  uint64_t v36 = MEMORY[0x1F4188790](v35);
  uint64_t v194 = OUTLINED_FUNCTION_137(v36, v37, v38, v39, v40, v41, v42, v43, v188[0]);
  OUTLINED_FUNCTION_0_4();
  uint64_t v192 = v44;
  MEMORY[0x1F4188790](v45);
  OUTLINED_FUNCTION_70((uint64_t)v188 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v196 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v47);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v48);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v49);
  int v197 = (char *)v188 - v50;
  uint64_t v193 = OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_0_4();
  uint64_t v191 = v51;
  MEMORY[0x1F4188790](v52);
  OUTLINED_FUNCTION_70((uint64_t)v188 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v54);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v55);
  OUTLINED_FUNCTION_2_7();
  uint64_t v57 = MEMORY[0x1F4188790](v56);
  uint64_t v206 = OUTLINED_FUNCTION_117(v57, v58, v59, v60, v61, v62, v63, v64, v188[0]);
  OUTLINED_FUNCTION_0_4();
  uint64_t v208 = v65;
  MEMORY[0x1F4188790](v66);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v67);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v68);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v69);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v70);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v71);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v72);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v73);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v74);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v75);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v76);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v77);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v78);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v79);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v80);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v81);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v82);
  OUTLINED_FUNCTION_2_7();
  uint64_t v84 = MEMORY[0x1F4188790](v83);
  OUTLINED_FUNCTION_163(v84, v85, v86, v87, v88, v89, v90, v91, v188[0]);
  OUTLINED_FUNCTION_0_4();
  uint64_t v211 = v93;
  uint64_t v212 = v92;
  MEMORY[0x1F4188790](v92);
  uint64_t v210 = (char *)v188 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  uint64_t v96 = MEMORY[0x1F4188790](v95);
  uint64_t v213 = OUTLINED_FUNCTION_164(v96, v97, v98, v99, v100, v101, v102, v103, v188[0]);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v104);
  v205[0] = (uint64_t)v188 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v106);
  uint64_t v204 = (char *)v188 - v107;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v108);
  uint64_t v203 = (uint64_t)v188 - v109;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v110);
  uint64_t v202 = (uint64_t)v188 - v111;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v112);
  OUTLINED_FUNCTION_61_0();
  MEMORY[0x1F4188790](v113);
  OUTLINED_FUNCTION_107();
  MEMORY[0x1F4188790](v114);
  OUTLINED_FUNCTION_208();
  MEMORY[0x1F4188790](v115);
  OUTLINED_FUNCTION_64();
  MEMORY[0x1F4188790](v116);
  int v118 = (char *)v188 - v117;
  uint64_t v119 = type metadata accessor for AggregationEvent(0);
  uint64_t v120 = OUTLINED_FUNCTION_35(v119);
  MEMORY[0x1F4188790](v120);
  OUTLINED_FUNCTION_80_0();
  if (!v20)
  {
    OUTLINED_FUNCTION_38_1();
    uint64_t v215 = 0;
    uint64_t v121 = v209;
    SQLExpression.returnType.getter(v209);
    uint64_t v122 = OUTLINED_FUNCTION_37_2();
    v123(v122);
    lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator((unint64_t *)&lazy protocol witness table cache variable for type SQLDataType and conformance SQLDataType, (void (*)(uint64_t))type metadata accessor for SQLDataType);
    LODWORD(v214) = OUTLINED_FUNCTION_146();
    uint64_t v125 = *(void (**)(void))(v22 + 8);
    uint64_t v124 = v22 + 8;
    OUTLINED_FUNCTION_14_2();
    v125();
    OUTLINED_FUNCTION_14_2();
    v125();
    if (v214)
    {
      uint64_t v126 = OUTLINED_FUNCTION_126();
      OUTLINED_FUNCTION_185(v126, v127, (void (*)(void))type metadata accessor for StorableValue);
      uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v214 = (uint64_t)v118;
      uint64_t v131 = v205[1];
      unint64_t v130 = v206;
      uint64_t v132 = v203;
      switch((int)EnumCaseMultiPayload)
      {
        case 1:
          OUTLINED_FUNCTION_193(EnumCaseMultiPayload, v129, (void (*)(void))type metadata accessor for StorableValue);
          OUTLINED_FUNCTION_72_0();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
          if ((OUTLINED_FUNCTION_15_1() & 1) == 0) {
            goto LABEL_36;
          }
          uint64_t v138 = OUTLINED_FUNCTION_6_6();
          v23(v138);
          uint64_t v139 = OUTLINED_FUNCTION_7_3();
          v23(v139);
          if (v130)
          {
            uint64_t v135 = (uint64_t *)&v204;
            goto LABEL_43;
          }
          unint64_t v216 = v132;
          goto LABEL_39;
        case 2:
          uint64_t v140 = (uint64_t)v23;
          uint64_t v23 = v189;
          _s12BiomeStreams13StorableValueOWOcTm_0(v140, (uint64_t)v189, (void (*)(void))type metadata accessor for StorableValue);
          _s10Foundation4UUIDVSgWObTm_0((uint64_t)v23, v131, (uint64_t *)&demangling cache variable for type metadata for Date?);
          OUTLINED_FUNCTION_103(v131, (uint64_t)&a9);
          if (!OUTLINED_FUNCTION_96_0())
          {
            OUTLINED_FUNCTION_211();
            uint64_t v154 = (uint64_t *)&demangling cache variable for type metadata for Date?;
            goto LABEL_35;
          }
          uint64_t v141 = OUTLINED_FUNCTION_28_2();
          v23(v141);
          uint64_t v142 = OUTLINED_FUNCTION_46_1();
          v23(v142);
          OUTLINED_FUNCTION_177(v131, (uint64_t *)&demangling cache variable for type metadata for Date?, (uint64_t)&v208);
          uint64_t v132 = v193;
          OUTLINED_FUNCTION_10_1((uint64_t)v23, 1, v193);
          if (!v143) {
            goto LABEL_13;
          }
          outlined destroy of UUID?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for Date?);
          OUTLINED_FUNCTION_148();
          goto LABEL_40;
        case 3:
          uint64_t v132 = v202;
          _s12BiomeStreams13StorableValueOWOcTm_0((uint64_t)v23, v202, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v28 = v130;
          OUTLINED_FUNCTION_54_1();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          if (!OUTLINED_FUNCTION_15_1()) {
            goto LABEL_31;
          }
          uint64_t v144 = OUTLINED_FUNCTION_6_6();
          v23(v144);
          uint64_t v145 = OUTLINED_FUNCTION_7_3();
          v23(v145);
          if (v132)
          {
            unint64_t v216 = v130;
            unint64_t v217 = v132;
            goto LABEL_39;
          }
          uint64_t v135 = v205;
          goto LABEL_43;
        case 4:
          _s12BiomeStreams13StorableValueOWOcTm_0((uint64_t)v23, v203, (void (*)(void))type metadata accessor for StorableValue);
          uint64_t v28 = v130;
          OUTLINED_FUNCTION_54_1();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          if (!OUTLINED_FUNCTION_15_1())
          {
LABEL_31:
            swift_bridgeObjectRelease();
            goto LABEL_36;
          }
          uint64_t v146 = OUTLINED_FUNCTION_6_6();
          v23(v146);
          uint64_t v147 = OUTLINED_FUNCTION_7_3();
          v23(v147);
          if (v132)
          {
            unint64_t v216 = v130;
            unint64_t v217 = v132;
            goto LABEL_39;
          }
          uint64_t v135 = &v206;
          goto LABEL_43;
        case 5:
          OUTLINED_FUNCTION_195(EnumCaseMultiPayload, v129, (void (*)(void))type metadata accessor for StorableValue);
          OUTLINED_FUNCTION_124();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
          if (!OUTLINED_FUNCTION_15_1())
          {
            outlined consume of Data?(v132, v130);
            goto LABEL_36;
          }
          uint64_t v148 = OUTLINED_FUNCTION_6_6();
          v23(v148);
          uint64_t v149 = OUTLINED_FUNCTION_7_3();
          v23(v149);
          OUTLINED_FUNCTION_101();
          if (!(!v143 & v150))
          {
            unint64_t v216 = v132;
            unint64_t v217 = v130;
            goto LABEL_39;
          }
          uint64_t v135 = &v207;
          goto LABEL_43;
        case 6:
          uint64_t v131 = v205[0];
          _s12BiomeStreams13StorableValueOWOcTm_0((uint64_t)v23, v205[0], (void (*)(void))type metadata accessor for StorableValue);
          OUTLINED_FUNCTION_150();
          OUTLINED_FUNCTION_103(v131, (uint64_t)&a11);
          if (OUTLINED_FUNCTION_97_0())
          {
            uint64_t v151 = OUTLINED_FUNCTION_28_2();
            v23(v151);
            uint64_t v152 = OUTLINED_FUNCTION_46_1();
            v23(v152);
            OUTLINED_FUNCTION_177(v131, (uint64_t *)&demangling cache variable for type metadata for UUID?, (uint64_t)&v210);
            uint64_t v132 = v194;
            OUTLINED_FUNCTION_10_1((uint64_t)v23, 1, v194);
            if (v143)
            {
              outlined destroy of UUID?((uint64_t)v23, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              OUTLINED_FUNCTION_149();
            }
            else
            {
LABEL_13:
              uint64_t v162 = OUTLINED_FUNCTION_32_2();
              v163(v162);
              OUTLINED_FUNCTION_129();
              OUTLINED_FUNCTION_100();
            }
LABEL_40:
            uint64_t v169 = OUTLINED_FUNCTION_131(v167, v168);
LABEL_45:
            v170(v169);
LABEL_46:
            _s12BiomeStreams13StorableValueOWOhTm_1(v190, (void (*)(void))type metadata accessor for StorableValue);
            uint64_t v171 = OUTLINED_FUNCTION_88_0();
            v24(v171);
            OUTLINED_FUNCTION_10_1(v21, 1, v28);
            if (v143)
            {
              unint64_t v172 = (void (*)(void))v213;
              OUTLINED_FUNCTION_20_1();
              v172();
              OUTLINED_FUNCTION_43_1();
              goto LABEL_55;
            }
            uint64_t v173 = v198;
            uint64_t v211 = *(void *)(v131 + 32);
            uint64_t v212 = v131 + 32;
            OUTLINED_FUNCTION_28();
            v174();
            uint64_t v175 = OUTLINED_FUNCTION_51_1();
            v24(v175);
            uint64_t v176 = OUTLINED_FUNCTION_53_0();
            v177(v176);
            uint64_t v178 = OUTLINED_FUNCTION_82_0();
            v179(v178);
            uint64_t v210 = (char *)v130;
            if (v21 == 1)
            {
              OUTLINED_FUNCTION_95();
              v180();
              OUTLINED_FUNCTION_43_1();
            }
            else
            {
              uint64_t v181 = OUTLINED_FUNCTION_114();
              v24(v181);
              OUTLINED_FUNCTION_10_1(v173, 1, v132);
              if (v143)
              {
                __break(1u);
                return;
              }
              OUTLINED_FUNCTION_178();
              uint64_t v182 = OUTLINED_FUNCTION_113();
              char v184 = v183(v182);
              unint64_t v172 = (void (*)(void))(v200 + 8);
              uint64_t v185 = *(void (**)(void))(v200 + 8);
              OUTLINED_FUNCTION_41();
              v185();
              OUTLINED_FUNCTION_41();
              v185();
              uint64_t v23 = a10;
              if ((v184 & 1) == 0)
              {
                OUTLINED_FUNCTION_41();
                v185();
                OUTLINED_FUNCTION_204();
LABEL_55:
                uint64_t v187 = v215;
                MAX.getCurrentAggregationEvent()();
                OUTLINED_FUNCTION_162();
                OUTLINED_FUNCTION_20_1();
                v172();
                _s12BiomeStreams13StorableValueOWOhTm_1(v214, (void (*)(void))type metadata accessor for StorableValue);
                if (v187) {
                  _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)v23, (void (*)(void))type metadata accessor for AggregationEvent);
                }
                else {
                  _s12BiomeStreams13StorableValueOWObTm_0((uint64_t)v23, v132, (void (*)(void))type metadata accessor for AggregationEvent);
                }
                break;
              }
            }
            unint64_t v172 = (void (*)(void))v213;
            OUTLINED_FUNCTION_20_1();
            v172();
            OUTLINED_FUNCTION_28();
            v186();
            OUTLINED_FUNCTION_179();
            goto LABEL_55;
          }
          OUTLINED_FUNCTION_211();
          uint64_t v154 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
LABEL_35:
          outlined destroy of UUID?(v131, v154);
LABEL_36:
          uint64_t v155 = (uint64_t)a10;
          lazy protocol witness table accessor for type SQLError and conformance SQLError();
          uint64_t v156 = OUTLINED_FUNCTION_39();
          unint64_t v158 = OUTLINED_FUNCTION_209(v156, v157);
          uint64_t v159 = v214;
          _s12BiomeStreams13StorableValueOWOcTm_0(v214, (uint64_t)v158, (void (*)(void))type metadata accessor for StorableValue);
          OUTLINED_FUNCTION_158();
          uint64_t v160 = OUTLINED_FUNCTION_171();
          v161(v160);
          _s12BiomeStreams13StorableValueOWOhTm_1(v159, (void (*)(void))type metadata accessor for StorableValue);
          _s12BiomeStreams13StorableValueOWOhTm_1(v155, (void (*)(void))type metadata accessor for AggregationEvent);
          _s12BiomeStreams13StorableValueOWOhTm_1(v190, (void (*)(void))type metadata accessor for StorableValue);
          break;
        case 7:
          uint64_t v213 = *(void *)(v21 + 8);
          OUTLINED_FUNCTION_20_1();
          v153();
          __swift_storeEnumTagSinglePayload((uint64_t)v121, 1, 1, v28);
          OUTLINED_FUNCTION_100();
          goto LABEL_46;
        default:
          OUTLINED_FUNCTION_194(EnumCaseMultiPayload, v129, (void (*)(void))type metadata accessor for StorableValue);
          OUTLINED_FUNCTION_72_0();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
          if ((OUTLINED_FUNCTION_15_1() & 1) == 0) {
            goto LABEL_36;
          }
          uint64_t v133 = OUTLINED_FUNCTION_6_6();
          v23(v133);
          uint64_t v134 = OUTLINED_FUNCTION_7_3();
          v23(v134);
          if (v130)
          {
            uint64_t v135 = &v203;
LABEL_43:
            uint64_t v164 = OUTLINED_FUNCTION_156((uint64_t)v135);
          }
          else
          {
            unint64_t v216 = v132;
LABEL_39:
            OUTLINED_FUNCTION_157();
            uint64_t v164 = v124;
            uint64_t v165 = 0;
            uint64_t v166 = 1;
          }
          __swift_storeEnumTagSinglePayload(v164, v165, v166, v28);
          uint64_t v169 = OUTLINED_FUNCTION_70_0();
          goto LABEL_45;
      }
    }
    else
    {
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_186();
      uint64_t v136 = SQLDataType.rawValue.getter();
      OUTLINED_FUNCTION_142(v136, v137);
      _s12BiomeStreams13StorableValueOWOhTm_1(v124, (void (*)(void))type metadata accessor for StorableValue);
      _s12BiomeStreams13StorableValueOWOhTm_1((uint64_t)a10, (void (*)(void))type metadata accessor for AggregationEvent);
    }
  }
  OUTLINED_FUNCTION_31();
}

void MAX.getCurrentAggregationEvent()()
{
  OUTLINED_FUNCTION_37();
  uint64_t v27 = v2;
  uint64_t v28 = v0;
  uint64_t v4 = v3;
  type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_0_4();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_67();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = *(void *)(v4 + 16);
  type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_4();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v27 - v13;
  uint64_t v15 = type metadata accessor for StorableValue(0);
  uint64_t v16 = OUTLINED_FUNCTION_35(v15);
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_68();
  uint64_t v17 = OUTLINED_FUNCTION_147();
  v18(v17);
  uint64_t v19 = OUTLINED_FUNCTION_90_0();
  OUTLINED_FUNCTION_10_1(v19, v20, v11);
  if (v21)
  {
    OUTLINED_FUNCTION_41();
    v22();
    long long v29 = 0u;
    long long v30 = 0u;
  }
  else
  {
    *((void *)&v30 + 1) = v11;
    boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0((uint64_t *)&v29);
    (*(void (**)(uint64_t *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(boxed_opaque_existential_0, v14, v11);
  }
  uint64_t v24 = v28;
  uint64_t v25 = *(void (**)(void))(v6 + 16);
  OUTLINED_FUNCTION_191();
  v25();
  StorableValue.init(_:dataType:)((uint64_t)&v29, v10, v1);
  if (!v24)
  {
    type metadata accessor for AggregationEvent(0);
    uint64_t v26 = v27;
    OUTLINED_FUNCTION_191();
    v25();
    _s12BiomeStreams13StorableValueOWObTm_0((uint64_t)v1, v26, (void (*)(void))type metadata accessor for StorableValue);
  }
  OUTLINED_FUNCTION_93_0();
  OUTLINED_FUNCTION_31();
}

{
  MAX.getCurrentAggregationEvent()();
}

uint64_t OUTLINED_FUNCTION_147()
{
  return v0;
}

uint64_t *__swift_allocate_boxed_opaque_existential_0(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

size_t datumGetSize(const char *a1, int a2, int a3)
{
  if (a2) {
    return a3;
  }
  if (a3 >= 1) {
    return a3;
  }
  if (a3 == -2)
  {
    if (!a1) {
      datumGetSize_cold_3();
    }
    return strlen(a1) + 1;
  }
  else
  {
    if (a3 != -1) {
      datumGetSize_cold_1(a3);
    }
    if (!a1) {
      datumGetSize_cold_2();
    }
    unsigned int v4 = *(unsigned __int8 *)a1;
    if (v4 == 1)
    {
      int v5 = *((unsigned __int8 *)a1 + 1);
      uint64_t v6 = 3;
      if (v5 == 18) {
        uint64_t v6 = 18;
      }
      if ((v5 & 0xFE) == 2 || v5 == 1) {
        return 10;
      }
      else {
        return v6;
      }
    }
    else if (v4)
    {
      return v4 >> 1;
    }
    else
    {
      return *(_DWORD *)a1 >> 2;
    }
  }
}

void datumGetSize_cold_1(int a1)
{
}

void MemoryContextAllocZeroAligned_cold_1(uint64_t a1, size_t a2)
{
  uint64_t v3 = (uint64_t *)TopMemoryContext();
  MemoryContextStats(*v3);
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("out of memory", v4, v5, v6, v7, v8, v9, v10, v18);
  errdetail("Failed on request of size %zu in memory context \"%s\".", v11, v12, v13, v14, v15, v16, v17, a2);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 830, (uint64_t)"MemoryContextAllocZeroAligned");
  __break(1u);
}

uint64_t errcode()
{
  uint64_t v0 = (_DWORD *)errordata_stack_depth();
  if ((*v0 & 0x80000000) != 0) {
    errcode_cold_1(v0);
  }
  uint64_t v1 = errordata();
  *(_DWORD *)(v1 + 192 * v2 + 56) = v3;
  return 0;
}

void MemoryContextAlloc_cold_1(uint64_t a1, size_t a2)
{
  int v3 = (uint64_t *)TopMemoryContext();
  MemoryContextStats(*v3);
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("out of memory", v4, v5, v6, v7, v8, v9, v10, v18);
  errdetail("Failed on request of size %zu in memory context \"%s\".", v11, v12, v13, v14, v15, v16, v17, a2);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 756, (uint64_t)"MemoryContextAlloc");
  __break(1u);
}

uint64_t MemoryContextStats(uint64_t a1)
{
  int64x2_t v8 = 0u;
  long long v9 = 0u;
  MemoryContextStatsInternal(a1, 0, 1, 100, &v8);
  return pg_fprintf((FILE *)*MEMORY[0x1E4F143C8], "Grand total: %zu bytes in %zd blocks; %zu free (%zd chunks); %zu used\n",
           v1,
           v2,
           v3,
           v4,
           v5,
           v6,
           v9);
}

uint64_t specialized Dictionary._Variant.updateValue(_:forKey:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = a1 & 1;
  uint64_t v9 = a3 & 1;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v4;
  *uint64_t v4 = 0x8000000000000000;
  uint64_t v11 = specialized _NativeDictionary.updateValue(_:forKey:isUnique:)(v8, a2, v9, a4, isUniquelyReferenced_nonNull_native);
  *uint64_t v5 = v13;
  swift_bridgeObjectRelease();
  return v11;
}

#error "18E6D0144: call analysis failed (funcsize=83)"

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, char a3, uint64_t a4, char a5, void *a6)
{
  a6[(result >> 6) + 8] |= 1 << result;
  *(void *)(a6[6] + 8 * result) = a2;
  uint64_t v6 = a6[7] + 24 * result;
  *(unsigned char *)uint64_t v6 = a3 & 1;
  *(void *)(v6 + _Block_object_dispose(&a9, 8) = a4;
  *(unsigned char *)(v6 + 16) = a5 & 1;
  uint64_t v7 = a6[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a6[2] = v9;
  }
  return result;
}

void *AllocSetStats(void *result, uint64_t (*a2)(void *, uint64_t, char *), uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = result;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = (void *)result[10];
  if (!v12)
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    uint64_t v15 = 224;
    uint64_t v17 = (uint64_t *)result[11];
    if (v17) {
      goto LABEL_5;
    }
LABEL_33:
    uint64_t v18 = 0;
    unint64_t i = (uint64_t *)result[12];
    if (!i) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 224;
  do
  {
    ++v14;
    uint64_t v16 = v12[4];
    uint64_t v15 = v15 - (void)v12 + v16;
    uint64_t v13 = v13 + v16 - v12[3];
    uint64_t v12 = (void *)v12[2];
  }
  while (v12);
  uint64_t v17 = (uint64_t *)result[11];
  if (!v17) {
    goto LABEL_33;
  }
LABEL_5:
  uint64_t v18 = 0;
  do
  {
    ++v18;
    uint64_t v19 = *v17;
    uint64_t v17 = (uint64_t *)v17[1];
    v13 += v19 + 16;
  }
  while (v17);
  for (unint64_t i = (uint64_t *)result[12]; i; v13 += v21 + 16)
  {
LABEL_8:
    ++v18;
    uint64_t v21 = *i;
    unint64_t i = (uint64_t *)i[1];
  }
LABEL_9:
  for (unint64_t j = (uint64_t *)result[13]; j; v13 += v23 + 16)
  {
    ++v18;
    uint64_t v23 = *j;
    unint64_t j = (uint64_t *)j[1];
  }
  for (unint64_t k = (uint64_t *)result[14]; k; v13 += v25 + 16)
  {
    ++v18;
    uint64_t v25 = *k;
    unint64_t k = (uint64_t *)k[1];
  }
  for (unint64_t m = (uint64_t *)result[15]; m; v13 += v27 + 16)
  {
    ++v18;
    uint64_t v27 = *m;
    unint64_t m = (uint64_t *)m[1];
  }
  for (n = (uint64_t *)result[16]; n; v13 += v29 + 16)
  {
    ++v18;
    uint64_t v29 = *n;
    n = (uint64_t *)n[1];
  }
  for (iunint64_t i = (uint64_t *)result[17]; ii; v13 += v31 + 16)
  {
    ++v18;
    uint64_t v31 = *ii;
    iunint64_t i = (uint64_t *)ii[1];
  }
  for (junint64_t j = (uint64_t *)result[18]; jj; v13 += v33 + 16)
  {
    ++v18;
    uint64_t v33 = *jj;
    junint64_t j = (uint64_t *)jj[1];
  }
  for (kunint64_t k = (uint64_t *)result[19]; kk; v13 += v35 + 16)
  {
    ++v18;
    uint64_t v35 = *kk;
    kunint64_t k = (uint64_t *)kk[1];
  }
  for (munint64_t m = (uint64_t *)result[20]; mm; v13 += v37 + 16)
  {
    ++v18;
    uint64_t v37 = *mm;
    munint64_t m = (uint64_t *)mm[1];
  }
  for (nn = (uint64_t *)result[21]; nn; v13 += v39 + 16)
  {
    ++v18;
    uint64_t v39 = *nn;
    nn = (uint64_t *)nn[1];
  }
  if (a2)
  {
    pg_snprintf(v42, 0xC8uLL, (uint64_t)"%zu total in %zd blocks; %zu free (%zd chunks); %zu used",
      (uint64_t)a4,
      a5,
      a6,
      a7,
      a8,
      v15);
    uint64_t result = (void *)a2(v11, a3, v42);
  }
  if (a4)
  {
    uint64_t v40 = a4[1] + v18;
    *a4 += v14;
    a4[1] = v40;
    uint64_t v41 = a4[3] + v13;
    a4[2] += v15;
    a4[3] = v41;
  }
  return result;
}

uint64_t base_yyparse(unsigned char ***a1, double a2)
{
  v2064 = a1;
  uint64_t v2073 = *MEMORY[0x1E4F143B8];
  uint64_t v2069 = 0;
  int v2068 = 0;
  v2065 = (uint64_t *)CurrentMemoryContext(a2);
  v1967 = (unsigned char *)operator_precedence_warning();
  int v10 = 0;
  uint64_t v11 = (uint64_t *)v2071;
  uint64_t v12 = (int *)v2070;
  unint64_t v13 = 200;
  v2067 = v2070;
  __src = v2071;
  uint64_t v14 = v2072;
  uint64_t v15 = v2072;
  uint64_t v16 = 4294967294;
  while (1)
  {
    *(_WORD *)uint64_t v14 = v10;
    if (&v15[2 * v13 - 2] <= v14)
    {
      if (v13 >> 4 > 0x270
        || (2 * v13 >= 0x2710 ? (unint64_t v13 = 10000) : (v13 *= 2), (v17 = (unsigned char *)palloc(14 * v13 + 14)) == 0))
      {
        scanner_yyerror((size_t)"memory exhausted", (uint64_t)v2064);
      }
      uint64_t v18 = v17;
      uint64_t v19 = (v14 - v15) >> 1;
      uint64_t v20 = v19 + 1;
      memcpy(v17, v15, 2 * (v19 + 1));
      uint64_t v21 = &v18[(2 * v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      memcpy(v21, __src, 8 * (v19 + 1));
      memcpy(&v21[8 * v13], v2067, 4 * (v19 + 1));
      if (v15 != v2072) {
        pfree((uint64_t)v15);
      }
      if (&v18[2 * v13] <= &v18[2 * v20])
      {
        uint64_t v1943 = 1;
        if (v18 != v2072) {
          goto LABEL_1864;
        }
        return v1943;
      }
      uint64_t v14 = &v18[2 * v19];
      uint64_t v11 = (uint64_t *)&v21[8 * v20 - 8];
      uint64_t v12 = (int *)&v21[8 * v13 - 4 + 4 * v20];
      __src = &v18[(2 * v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      v2067 = &v21[8 * v13];
      uint64_t v15 = v18;
    }
    unsigned int v22 = yypact[v10];
    if (v22 == -4998) {
      goto LABEL_15;
    }
    if (v16 == -2) {
      uint64_t v16 = base_yylex(&v2069, (unsigned char **)&v2068, v2064);
    }
    if ((int)v16 < 1)
    {
      int v29 = 0;
      uint64_t v16 = 0;
      uint64_t v30 = v22;
      if (v22 > 0x19CA5) {
        goto LABEL_15;
      }
    }
    else if (v16 > 0x2DB)
    {
      int v29 = 2;
      uint64_t v30 = v22 + 2;
      if (v30 > 0x19CA5) {
        goto LABEL_15;
      }
    }
    else
    {
      int v29 = yytranslate[v16];
      uint64_t v30 = v29 + v22;
      if (v30 > 0x19CA5) {
        goto LABEL_15;
      }
    }
    if (v29 != (__int16)yycheck[v30])
    {
LABEL_15:
      unsigned int v23 = yydefact[v10];
      if (!yydefact[v10]) {
        goto LABEL_1869;
      }
      uint64_t v24 = yydefact[v10];
      uint64_t v25 = yyr2[v23];
      if (!yyr2[v23])
      {
LABEL_40:
        int v26 = -1;
        uint64_t StringConstCast = v11[1 - v25];
        int v28 = v24 - 2;
LABEL_41:
        switch(v28)
        {
          case 0:
            (*v2064)[16] = (unsigned char *)*v11;
            break;
          case 1:
            uint64_t v1997 = v24;
            uint64_t v653 = *(v11 - 2);
            if (v653)
            {
              uint64_t v654 = *(void *)(*(void *)(v653 + 16) + 8 * (*(_DWORD *)(v653 + 4) - 1));
              if (*(int *)(v654 + 20) <= 0) {
                *(_DWORD *)(v654 + 2errstart(20, 0) = *(v12 - 1) - *(_DWORD *)(v654 + 16);
              }
            }
            uint64_t v655 = (unsigned char *)*v11;
            uint64_t StringConstCast = *(v11 - 2);
            if (!*v11) {
              goto LABEL_1810;
            }
            unsigned int v2038 = *(v12 - 1) + 1;
            int v656 = v26;
            unint64_t v657 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(_DWORD *)unint64_t v657 = 230;
            *(void *)(v657 + _Block_object_dispose(&a9, 8) = v655;
            *(void *)(v657 + 16) = v2038;
            uint64_t v658 = lappend(StringConstCast, v657);
            int v26 = v656;
            uint64_t StringConstCast = v658;
            uint64_t v24 = v1997;
            break;
          case 2:
            uint64_t v294 = v24;
            uint64_t v295 = (unsigned char *)*v11;
            if (*v11)
            {
              int v296 = v26;
              unint64_t v297 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
              *(_DWORD *)unint64_t v297 = 230;
              *(void *)(v297 + _Block_object_dispose(&a9, 8) = v295;
              *(void *)(v297 + 16) = 0;
              *(double *)&uint64_t v9 = list_make1_impl(226, v297);
              int v26 = v296;
              uint64_t StringConstCast = (uint64_t)v298;
            }
            else
            {
              uint64_t StringConstCast = 0;
            }
            uint64_t v24 = v294;
            break;
          case 128:
          case 135:
          case 137:
          case 160:
          case 181:
          case 183:
          case 240:
          case 241:
          case 243:
          case 244:
          case 264:
          case 357:
          case 362:
          case 364:
          case 371:
            goto LABEL_1090;
          case 129:
            int v1660 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1660;
            uint64_t StringConstCast = v52;
            int v92 = 344;
            goto LABEL_1634;
          case 130:
            int v1934 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1934;
            uint64_t StringConstCast = v66;
            uint64_t v9 = 278;
            goto LABEL_1806;
          case 134:
          case 136:
            uint64_t v34 = *(v11 - 1);
            uint64_t v2 = (const void **)*v11;
            goto LABEL_1776;
          case 138:
            int v32 = v26;
            unint64_t String = makeString(*v11);
            int v184 = *(v12 - 1);
            goto LABEL_468;
          case 139:
            uint64_t v533 = v24;
            int v534 = *(_DWORD *)v11;
            int v535 = *v12;
            int v2037 = v26;
            uint64_t v536 = (_DWORD *)MemoryContextAllocZero(*v2065, 0xCuLL);
            *uint64_t v536 = 348;
            v536[1] = v534;
            uint64_t v24 = v533;
            v536[2] = v535;
            int v537 = *(v12 - 1);
            goto LABEL_1739;
          case 140:
            uint64_t v1855 = v24;
            int v1856 = *v12;
            int v203 = v26;
            unint64_t v204 = MemoryContextAllocZero(*v2065, 0xCuLL);
            *(void *)unint64_t v204 = 348;
            *(_DWORD *)(v204 + _Block_object_dispose(&a9, 8) = v1856;
            uint64_t v24 = v1855;
            int v205 = *(v12 - 1);
            goto LABEL_1695;
          case 141:
            int v45 = *(v12 - 1);
            uint64_t v43 = "password";
            goto LABEL_1597;
          case 142:
            int v32 = v26;
            unint64_t String = makeString(*v11);
            int v184 = *(v12 - 2);
LABEL_468:
            DefEleunint64_t m = makeDefElem((uint64_t)"password", String, v184);
            goto LABEL_1777;
          case 143:
            uint64_t v1881 = v24;
            int v1882 = *(_DWORD *)v11;
            int v1883 = *v12;
            int v2037 = v26;
            uint64_t v536 = (_DWORD *)MemoryContextAllocZero(*v2065, 0xCuLL);
            *uint64_t v536 = 348;
            v536[1] = v1882;
            uint64_t v24 = v1881;
            v536[2] = v1883;
            int v537 = *(v12 - 2);
LABEL_1739:
            DefEleunint64_t m = makeDefElem((uint64_t)"password", (uint64_t)v536, v537);
            int v26 = v2037;
            goto LABEL_1778;
          case 144:
            uint64_t v201 = v24;
            int v202 = *v12;
            int v203 = v26;
            unint64_t v204 = MemoryContextAllocZero(*v2065, 0xCuLL);
            *(void *)unint64_t v204 = 348;
            *(_DWORD *)(v204 + _Block_object_dispose(&a9, 8) = v202;
            uint64_t v24 = v201;
            int v205 = *(v12 - 2);
LABEL_1695:
            DefEleunint64_t m = makeDefElem((uint64_t)"password", v204, v205);
            int v26 = v203;
            goto LABEL_1778;
          case 145:
            base_yyparse_cold_1();
          case 146:
            int v32 = v26;
            Integer = makeInteger(1);
            DefEleunint64_t m = makeDefElem((uint64_t)"inherit", (uint64_t)Integer, *v12);
            goto LABEL_1777;
          case 147:
            int v32 = v26;
            v1902 = makeInteger(*(_DWORD *)v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"connectionlimit", (uint64_t)v1902, *(v12 - 2));
            goto LABEL_1777;
          case 148:
            int v32 = v26;
            unint64_t v935 = makeString(*v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"validUntil", v935, *(v12 - 2));
            goto LABEL_1777;
          case 149:
          case 154:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "rolemembers";
            goto LABEL_1598;
          case 150:
            int v1053 = v26;
            v1924 = (const char *)*v11;
            if (!strcmp((const char *)*v11, "superuser"))
            {
              int v1925 = 1;
LABEL_1843:
              v1931 = makeInteger(v1925);
              int v1932 = *v12;
              v1933 = "superuser";
              goto LABEL_1861;
            }
            int v1925 = strcmp(v1924, "nosuperuser");
            if (!v1925) {
              goto LABEL_1843;
            }
            if (!strcmp(v1924, "createrole"))
            {
              int v1926 = 1;
LABEL_1852:
              v1931 = makeInteger(v1926);
              int v1932 = *v12;
              v1933 = "createrole";
              goto LABEL_1861;
            }
            int v1926 = strcmp(v1924, "nocreaterole");
            if (!v1926) {
              goto LABEL_1852;
            }
            if (!strcmp(v1924, "replication"))
            {
              int v1927 = 1;
LABEL_1854:
              v1931 = makeInteger(v1927);
              int v1932 = *v12;
              v1933 = "isreplication";
              goto LABEL_1861;
            }
            int v1927 = strcmp(v1924, "noreplication");
            if (!v1927) {
              goto LABEL_1854;
            }
            if (!strcmp(v1924, "createdb"))
            {
              int v1928 = 1;
LABEL_1856:
              v1931 = makeInteger(v1928);
              int v1932 = *v12;
              v1933 = "createdb";
              goto LABEL_1861;
            }
            int v1928 = strcmp(v1924, "nocreatedb");
            if (!v1928) {
              goto LABEL_1856;
            }
            if (!strcmp(v1924, "login"))
            {
              int v1929 = 1;
LABEL_1858:
              v1931 = makeInteger(v1929);
              int v1932 = *v12;
              v1933 = "canlogin";
              goto LABEL_1861;
            }
            int v1929 = strcmp(v1924, "nologin");
            if (!v1929) {
              goto LABEL_1858;
            }
            if (!strcmp(v1924, "bypassrls"))
            {
              int v1930 = 1;
LABEL_1860:
              v1931 = makeInteger(v1930);
              int v1932 = *v12;
              v1933 = "bypassrls";
              goto LABEL_1861;
            }
            int v1930 = strcmp(v1924, "nobypassrls");
            if (!v1930) {
              goto LABEL_1860;
            }
            if (strcmp(v1924, "noinherit")) {
              base_yyparse_cold_2((size_t *)v11);
            }
            v1931 = makeInteger(0);
            int v1932 = *v12;
            v1933 = "inherit";
LABEL_1861:
            unint64_t NotExpr = makeDefElem((uint64_t)v1933, (uint64_t)v1931, v1932);
LABEL_1862:
            uint64_t StringConstCast = NotExpr;
            int v26 = v1053;
            break;
          case 151:
          case 161:
          case 180:
          case 200:
          case 217:
          case 232:
          case 242:
          case 245:
          case 246:
          case 247:
          case 248:
          case 254:
          case 255:
          case 256:
          case 257:
          case 265:
          case 356:
          case 363:
          case 370:
            uint64_t StringConstCast = *v11;
            break;
          case 152:
            int v32 = v26;
            Swift::Int v284 = makeInteger(*(_DWORD *)v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"sysid", (uint64_t)v284, *(v12 - 1));
            goto LABEL_1777;
          case 153:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "adminmembers";
            goto LABEL_1598;
          case 155:
          case 156:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 2);
            uint64_t v43 = "addroleto";
            goto LABEL_1598;
          case 157:
            int v231 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v231;
            uint64_t StringConstCast = v66;
            uint64_t v9 = 0x100000116;
            goto LABEL_1806;
          case 158:
          case 159:
            int v65 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v65;
            uint64_t StringConstCast = v66;
            *(_DWORD *)unint64_t v66 = 279;
            *(void *)(v66 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(_DWORD *)(v66 + 24) = 1;
            goto LABEL_1809;
          case 162:
          case 164:
            int v69 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v69;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 288;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            goto LABEL_234;
          case 163:
          case 165:
            int v171 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v171;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 288;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = 0;
LABEL_234:
            *(void *)(v70 + 16) = *(v11 - 1);
            goto LABEL_1722;
          case 166:
          case 168:
          case 170:
            int v51 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v51;
            uint64_t StringConstCast = v52;
            *(_DWORD *)unint64_t v52 = 280;
            *(unsigned char *)(v52 + 16) = 0;
            goto LABEL_1755;
          case 167:
          case 171:
            int v95 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v95;
            uint64_t StringConstCast = v52;
            *(_DWORD *)unint64_t v52 = 280;
            *(unsigned char *)(v52 + 16) = 1;
            goto LABEL_1755;
          case 169:
            int v1801 = v26;
            unint64_t v1802 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1801;
            uint64_t StringConstCast = v1802;
            *(_DWORD *)unint64_t v1802 = 280;
            *(void *)(v1802 + _Block_object_dispose(&a9, 8) = *v11;
            *(unsigned char *)(v1802 + 16) = 1;
            break;
          case 172:
            int v443 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v443;
            uint64_t StringConstCast = v66;
            uint64_t v9 = 0x200000116;
            goto LABEL_1806;
          case 173:
            int v562 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 279;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(_DWORD *)(StringConstCast + 24) = *((_DWORD *)v11 - 4);
            unint64_t v563 = makeDefElem((uint64_t)"rolemembers", *v11, *v12);
            *(double *)&uint64_t v9 = list_make1_impl(226, v563);
            int v26 = v562;
            *(void *)(StringConstCast + 16) = v564;
            break;
          case 174:
          case 358:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 175:
            StringConstCast |= 0xFFFFFFFFuLL;
            break;
          case 176:
            int v467 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v467;
            uint64_t StringConstCast = v345;
            *(_DWORD *)unint64_t v345 = 285;
            *(void *)(v345 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            uint64_t v468 = *(v11 - 1);
            goto LABEL_1623;
          case 177:
            int v344 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v344;
            uint64_t StringConstCast = v345;
            *(_DWORD *)unint64_t v345 = 285;
            *(void *)(v345 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v345 + 16) = 0;
            goto LABEL_1624;
          case 178:
            int v1093 = v26;
            unint64_t v1094 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            *(_DWORD *)unint64_t v1094 = 285;
            *(void *)(v1094 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v1094 + 16) = *(v11 - 1);
            if (*v11) {
              base_yyparse_cold_3();
            }
            goto LABEL_1427;
          case 179:
            int v1093 = v26;
            unint64_t v1094 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            *(_DWORD *)unint64_t v1094 = 285;
            *(void *)(v1094 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1094 + 16) = 0;
            if (*v11) {
              base_yyparse_cold_4();
            }
LABEL_1427:
            uint64_t StringConstCast = v1094;
            *(void *)(v1094 + 24) = 0;
            *(unsigned char *)(v1094 + 32) = 1;
            int v26 = v1093;
            break;
          case 182:
            if (v26 < 0) {
              int v26 = *v12;
            }
            goto LABEL_1774;
          case 190:
          case 192:
            uint64_t StringConstCast = *v11;
            *(unsigned char *)(*v11 + 24) = 0;
            break;
          case 191:
            uint64_t StringConstCast = *v11;
            *(unsigned char *)(*v11 + 24) = 1;
            break;
          case 193:
            int v728 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v728;
            uint64_t StringConstCast = v173;
            uint64_t v9 = 0x300000111;
            *(void *)unint64_t v173 = 0x300000111;
            v729 = "TRANSACTION";
            goto LABEL_1691;
          case 194:
            int v1457 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1457;
            uint64_t StringConstCast = v173;
            uint64_t v9 = 0x300000111;
            *(void *)unint64_t v173 = 0x300000111;
            v729 = "SESSION CHARACTERISTICS";
            goto LABEL_1691;
          case 196:
          case 197:
            int v172 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v172;
            uint64_t StringConstCast = v173;
            uint64_t v9 = 273;
            goto LABEL_1689;
          case 198:
          case 199:
            int v67 = v26;
            unint64_t v68 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v67;
            uint64_t StringConstCast = v68;
            uint64_t v9 = 0x100000111;
            goto LABEL_1454;
          case 201:
            int v606 = v26;
            unint64_t v68 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v606;
            uint64_t StringConstCast = v68;
            uint64_t v9 = 0x200000111;
            goto LABEL_1454;
          case 202:
            int v1884 = v26;
            unint64_t v1885 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = v1885;
            uint64_t v9 = 273;
            *(void *)unint64_t v1885 = 273;
            *(void *)(v1885 + _Block_object_dispose(&a9, 8) = "timezone";
            uint64_t v2 = (const void **)*v11;
            if (*v11)
            {
              *(double *)&uint64_t v9 = list_make1_impl(226, (uint64_t)v2);
              *(void *)(StringConstCast + 16) = v1886;
            }
            else
            {
              *(_DWORD *)(v1885 + 4) = 1;
            }
            int v26 = v1884;
            break;
          case 203:
            base_yyparse_cold_5();
          case 204:
            v1970 = v15;
            uint64_t v249 = v16;
            Swift::String v250 = v2065;
            int v2029 = v26;
            uint64_t v251 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v251;
            *(void *)uint64_t v251 = 273;
            uint64_t v252 = "search_path";
            goto LABEL_1730;
          case 205:
            v1968 = v15;
            uint64_t v176 = v16;
            uint64_t v177 = v2065;
            int v2029 = v26;
            uint64_t v178 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v178;
            *(void *)uint64_t v178 = 273;
            uint64_t v179 = "search_path";
            goto LABEL_1767;
          case 206:
            uint64_t v303 = v2065;
            int v2029 = v26;
            Swift::UInt v304 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v304;
            *(void *)Swift::UInt v304 = 273;
            uint64_t v305 = "search_path";
            goto LABEL_1680;
          case 207:
            int v2058 = v26;
            v1985 = v15;
            uint64_t v2020 = v24;
            uint64_t v1635 = v16;
            v1636 = v2065;
            unint64_t v1637 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = v1637;
            uint64_t v9 = 273;
            *(void *)unint64_t v1637 = 273;
            *(void *)(v1637 + _Block_object_dispose(&a9, 8) = "client_encoding";
            uint64_t v1638 = *v11;
            if (*v11)
            {
              int v1639 = *v12;
              unint64_t v1640 = MemoryContextAllocZeroAligned(*v1636, 0x20uLL);
              *(_DWORD *)unint64_t v1640 = 349;
              *(_DWORD *)(v1640 + _Block_object_dispose(&a9, 8) = 223;
              *(void *)(v1640 + 16) = v1638;
              *(_DWORD *)(v1640 + 24) = v1639;
              *(double *)&uint64_t v9 = list_make1_impl(226, v1640);
              *(void *)(StringConstCast + 16) = v1641;
            }
            else
            {
              *(_DWORD *)(v1637 + 4) = 1;
            }
            uint64_t v16 = v1635;
            uint64_t v15 = v1985;
            uint64_t v24 = v2020;
            int v26 = v2058;
            break;
          case 208:
            v1970 = v15;
            uint64_t v249 = v16;
            Swift::String v250 = v2065;
            int v2029 = v26;
            uint64_t v251 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v251;
            *(void *)uint64_t v251 = 273;
            uint64_t v252 = "role";
            goto LABEL_1730;
          case 209:
            v1968 = v15;
            uint64_t v176 = v16;
            uint64_t v177 = v2065;
            int v2029 = v26;
            uint64_t v178 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v178;
            *(void *)uint64_t v178 = 273;
            uint64_t v179 = "role";
            goto LABEL_1767;
          case 210:
            uint64_t v303 = v2065;
            int v2029 = v26;
            Swift::UInt v304 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v304;
            *(void *)Swift::UInt v304 = 273;
            uint64_t v305 = "role";
            goto LABEL_1680;
          case 211:
            v1970 = v15;
            uint64_t v249 = v16;
            Swift::String v250 = v2065;
            int v2029 = v26;
            uint64_t v251 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v251;
            *(void *)uint64_t v251 = 273;
            uint64_t v252 = "session_authorization";
            goto LABEL_1730;
          case 212:
            v1968 = v15;
            uint64_t v176 = v16;
            uint64_t v177 = v2065;
            int v2029 = v26;
            uint64_t v178 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v178;
            *(void *)uint64_t v178 = 273;
            uint64_t v179 = "session_authorization";
LABEL_1767:
            *((void *)v178 + 1) = v179;
            uint64_t v2025 = v24;
            int v1906 = *(_DWORD *)v11;
            int v1907 = *v12;
            uint64_t v1908 = *v177;
            uint64_t v16 = v176;
            uint64_t v15 = v1968;
            unint64_t v1843 = MemoryContextAllocZero(v1908, 0xCuLL);
            *(_DWORD *)unint64_t v1843 = 348;
            *(_DWORD *)(v1843 + 4) = v1906;
            uint64_t v24 = v2025;
            *(_DWORD *)(v1843 + _Block_object_dispose(&a9, 8) = v1907;
            goto LABEL_1768;
          case 213:
            uint64_t v303 = v2065;
            int v2029 = v26;
            Swift::UInt v304 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v304;
            *(void *)Swift::UInt v304 = 273;
            uint64_t v305 = "session_authorization";
LABEL_1680:
            *((void *)v304 + 1) = v305;
            uint64_t v2024 = v24;
            int v1842 = *v12;
            unint64_t v1843 = MemoryContextAllocZero(*v303, 0xCuLL);
            *(void *)unint64_t v1843 = 348;
            *(_DWORD *)(v1843 + _Block_object_dispose(&a9, 8) = v1842;
            uint64_t v24 = v2024;
            goto LABEL_1768;
          case 214:
            int v262 = v26;
            unint64_t v218 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v262;
            uint64_t StringConstCast = v218;
            uint64_t v9 = 0x100000111;
            goto LABEL_1506;
          case 215:
            v1970 = v15;
            uint64_t v249 = v16;
            Swift::String v250 = v2065;
            int v2029 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(void *)uint64_t StringConstCast = 273;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = "xmloption";
            uint64_t v2003 = v24;
            if (*(_DWORD *)v11) {
              v936 = "CONTENT";
            }
            else {
              v936 = "DOCUMENT";
            }
            goto LABEL_1731;
          case 216:
            v1970 = v15;
            uint64_t v249 = v16;
            Swift::String v250 = v2065;
            int v2029 = v26;
            uint64_t v251 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v251;
            *(void *)uint64_t v251 = 0x300000111;
            uint64_t v252 = "TRANSACTION SNAPSHOT";
LABEL_1730:
            *((void *)v251 + 1) = v252;
            uint64_t v2003 = v24;
            v936 = (const char *)*v11;
LABEL_1731:
            int v1876 = *v12;
            uint64_t v1877 = *v250;
            uint64_t v16 = v249;
            uint64_t v15 = v1970;
            unint64_t v1843 = MemoryContextAllocZeroAligned(v1877, 0x20uLL);
            *(_DWORD *)unint64_t v1843 = 349;
            *(_DWORD *)(v1843 + _Block_object_dispose(&a9, 8) = 223;
            *(void *)(v1843 + 16) = v936;
            uint64_t v24 = v2003;
            *(_DWORD *)(v1843 + 24) = v1876;
LABEL_1768:
            *(double *)&uint64_t v9 = list_make1_impl(226, v1843);
            int v26 = v2029;
            *(void *)(StringConstCast + 16) = v1909;
            break;
          case 218:
            int v32 = v26;
            DefEleunint64_t m = (unint64_t)psprintf("%s.%s", (uint64_t)v2, v3, v4, v5, v6, v7, v8, *(v11 - 2));
            goto LABEL_1777;
          case 219:
          case 293:
          case 372:
          case 378:
          case 389:
          case 392:
          case 432:
          case 440:
          case 461:
          case 463:
          case 520:
          case 529:
          case 552:
          case 595:
          case 617:
          case 685:
          case 693:
          case 696:
          case 770:
          case 788:
          case 807:
          case 835:
          case 846:
          case 860:
          case 879:
          case 924:
          case 930:
          case 1040:
          case 1066:
          case 1104:
          case 1113:
          case 1133:
          case 1135:
          case 1143:
          case 1168:
          case 1171:
          case 1173:
          case 1199:
          case 1204:
          case 1209:
          case 1229:
          case 1233:
          case 1361:
          case 1716:
          case 1748:
          case 1765:
          case 1778:
          case 1819:
          case 1830:
          case 1843:
          case 1848:
          case 1853:
          case 1859:
          case 2118:
          case 2139:
          case 2200:
          case 2202:
          case 2207:
          case 2212:
          case 2249:
          case 2264:
          case 2272:
          case 2278:
            int v32 = v26;
            *(double *)&uint64_t v9 = list_make1_impl(226, *v11);
            goto LABEL_1777;
          case 220:
          case 294:
          case 373:
          case 390:
          case 393:
          case 433:
          case 441:
          case 462:
          case 464:
          case 521:
          case 530:
          case 553:
          case 618:
          case 694:
          case 697:
          case 789:
          case 808:
          case 836:
          case 847:
          case 861:
          case 880:
          case 925:
          case 931:
          case 1041:
          case 1067:
          case 1105:
          case 1114:
          case 1134:
          case 1136:
          case 1144:
          case 1169:
          case 1172:
          case 1205:
          case 1230:
          case 1362:
          case 1406:
          case 1465:
          case 1507:
          case 1542:
          case 1563:
          case 1580:
          case 1614:
          case 1650:
          case 1686:
          case 1717:
          case 1749:
          case 1779:
          case 1820:
          case 1831:
          case 1844:
          case 1849:
          case 1860:
          case 2119:
          case 2140:
          case 2201:
          case 2203:
          case 2208:
          case 2213:
          case 2273:
          case 2279:
          case 2321:
            uint64_t v34 = *(v11 - 2);
            goto LABEL_1775;
          case 221:
          case 233:
          case 236:
            uint64_t v1988 = v24;
            uint64_t v46 = *v11;
            int v47 = *v12;
            int v48 = v26;
            unint64_t v49 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v48;
            uint64_t StringConstCast = v49;
            *(_DWORD *)unint64_t v49 = 349;
            *(_DWORD *)(v49 + _Block_object_dispose(&a9, 8) = 223;
            *(void *)(v49 + 16) = v46;
            uint64_t v24 = v1988;
            *(_DWORD *)(v49 + 24) = v47;
            break;
          case 222:
          case 239:
            int v32 = v26;
            DefEleunint64_t m = (unint64_t)makeAConst((_DWORD *)*v11, *v12, *(double *)&v9);
            goto LABEL_1777;
          case 223:
          case 234:
            uint64_t v1991 = v24;
            int v131 = *(_DWORD *)v11;
            int v132 = *v12;
            int v133 = v26;
            uint64_t v134 = (char *)MemoryContextAllocZero(*v2065, 0xCuLL);
            int v26 = v133;
            uint64_t StringConstCast = (uint64_t)v134;
            *(_DWORD *)uint64_t v134 = 348;
            *((_DWORD *)v134 + 1) = v131;
            uint64_t v24 = v1991;
            *((_DWORD *)v134 + 2) = v132;
            break;
          case 224:
          case 235:
            uint64_t v136 = v24;
            int v137 = *v12;
            int v138 = v26;
            unint64_t v139 = MemoryContextAllocZero(*v2065, 0xCuLL);
            int v26 = v138;
            uint64_t StringConstCast = v139;
            uint64_t v9 = 348;
            *(void *)unint64_t v139 = 348;
            *(_DWORD *)(v139 + _Block_object_dispose(&a9, 8) = v137;
            uint64_t v24 = v136;
            break;
          case 225:
            uint64_t StringConstCast = (uint64_t)"read uncommitted";
            break;
          case 226:
            uint64_t StringConstCast = (uint64_t)"read committed";
            break;
          case 227:
            uint64_t StringConstCast = (uint64_t)"repeatable read";
            break;
          case 228:
            uint64_t StringConstCast = (uint64_t)"serializable";
            break;
          case 229:
            uint64_t StringConstCast = (uint64_t)"true";
            break;
          case 230:
            uint64_t StringConstCast = (uint64_t)"false";
            break;
          case 231:
            uint64_t StringConstCast = (uint64_t)"on";
            break;
          case 237:
            int v1769 = v26;
            uint64_t v1770 = *(v11 - 2);
            uint64_t v1771 = *v11;
            if (*v11 && (*(_DWORD *)(**(void **)(v1771 + 16) + 16) & 0xFFFFF3FF) != 0) {
              base_yyparse_cold_6();
            }
            *(void *)(v1770 + 24) = v1771;
            uint64_t StringConstCast = makeStringConstCast(*(v11 - 1), *(v12 - 1), v1770, *(double *)&v9);
            int v26 = v1769;
            break;
          case 238:
            uint64_t v1969 = *(v11 - 4);
            uint64_t v1992 = v24;
            uint64_t v185 = v2065;
            int v2030 = v26;
            uint64_t v186 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *uint64_t v186 = 349;
            v186[2] = 221;
            v186[4] = 0x7FFF;
            v186[6] = -1;
            int v187 = *((_DWORD *)v11 - 4);
            unsigned int v1952 = v16;
            uint64_t v188 = v15;
            int v189 = *(v12 - 2);
            uint64_t v190 = *v185;
            uint64_t v24 = v1992;
            uint64_t v191 = (_DWORD *)MemoryContextAllocZeroAligned(v190, 0x20uLL);
            _DWORD *v191 = 349;
            v191[2] = 221;
            v191[4] = v187;
            v191[6] = v189;
            uint64_t v15 = v188;
            uint64_t v16 = v1952;
            double v192 = list_make2_impl(226, (uint64_t)v186, (uint64_t)v191);
            *(void *)(v1969 + 24) = v193;
            unint64_t v194 = makeStringConstCast(*v11, *v12, v1969, v192);
            int v26 = v2030;
            uint64_t StringConstCast = v194;
            break;
          case 249:
            int v362 = v26;
            Swift::UInt v309 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v362;
            uint64_t StringConstCast = (uint64_t)v309;
            uint64_t v9 = 0x400000111;
            *(void *)Swift::UInt v309 = 0x400000111;
            goto LABEL_345;
          case 250:
            int v306 = v26;
            uint64_t v307 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v306;
            uint64_t StringConstCast = (uint64_t)v307;
            uint64_t v9 = 0x400000111;
            *(void *)uint64_t v307 = 0x400000111;
            goto LABEL_529;
          case 251:
            int v1721 = v26;
            unint64_t v218 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1721;
            uint64_t StringConstCast = v218;
            uint64_t v9 = 0x400000111;
LABEL_1506:
            *(double *)unint64_t v218 = *(double *)&v9;
            goto LABEL_1507;
          case 252:
            int v1708 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1708;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x400000111;
            goto LABEL_1754;
          case 253:
            int v285 = v26;
            uint64_t v286 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v285;
            uint64_t StringConstCast = (uint64_t)v286;
            uint64_t v9 = 0x500000111;
            *(void *)uint64_t v286 = 0x500000111;
            break;
          case 258:
            int v1458 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v1458;
            uint64_t StringConstCast = v52;
            int v92 = 274;
            goto LABEL_1634;
          case 259:
            int v308 = v26;
            Swift::UInt v309 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v308;
            uint64_t StringConstCast = (uint64_t)v309;
            *(_DWORD *)Swift::UInt v309 = 274;
LABEL_345:
            *((void *)v309 + 1) = "timezone";
            break;
          case 260:
            int v607 = v26;
            uint64_t v307 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v607;
            uint64_t StringConstCast = (uint64_t)v307;
            *(_DWORD *)uint64_t v307 = 274;
LABEL_529:
            *((void *)v307 + 1) = "transaction_isolation";
            break;
          case 261:
            int v217 = v26;
            unint64_t v218 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v217;
            uint64_t StringConstCast = v218;
            *(_DWORD *)unint64_t v218 = 274;
LABEL_1507:
            *(void *)(v218 + _Block_object_dispose(&a9, 8) = "session_authorization";
            break;
          case 262:
            int v444 = v26;
            unint64_t v445 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v444;
            uint64_t StringConstCast = v445;
            *(_DWORD *)unint64_t v445 = 274;
            *(void *)(v445 + _Block_object_dispose(&a9, 8) = "all";
            break;
          case 263:
            int v206 = v26;
            unint64_t v207 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v206;
            uint64_t StringConstCast = v207;
            *(_DWORD *)unint64_t v207 = 282;
            *(void *)(v207 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(unsigned char *)(v207 + 16) = *(unsigned char *)v11;
            break;
          case 266:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            break;
          case 267:
            StringConstCast &= 0xFFFFFFFFFFFFFF00;
            break;
          case 268:
            int v1803 = v26;
            v1804 = (char *)MemoryContextAllocZero(*v2065, 4uLL);
            int v26 = v1803;
            uint64_t StringConstCast = (uint64_t)v1804;
            *(_DWORD *)v1804 = 284;
            break;
          case 269:
            int v1694 = v26;
            v1695 = (char *)MemoryContextAllocZeroAligned(*v2065, 8uLL);
            int v26 = v1694;
            uint64_t StringConstCast = (uint64_t)v1695;
            uint64_t v9 = 275;
            *(void *)v1695 = 275;
            break;
          case 270:
          case 271:
            int v167 = v26;
            uint64_t v168 = (char *)MemoryContextAllocZeroAligned(*v2065, 8uLL);
            int v26 = v167;
            uint64_t StringConstCast = (uint64_t)v168;
            uint64_t v9 = 0x300000113;
            *(void *)uint64_t v168 = 0x300000113;
            break;
          case 272:
            int v1669 = v26;
            v1670 = (char *)MemoryContextAllocZeroAligned(*v2065, 8uLL);
            int v26 = v1669;
            uint64_t StringConstCast = (uint64_t)v1670;
            uint64_t v9 = 0x100000113;
            *(void *)v1670 = 0x100000113;
            break;
          case 273:
            int v1779 = v26;
            v1780 = (char *)MemoryContextAllocZeroAligned(*v2065, 8uLL);
            int v26 = v1779;
            uint64_t StringConstCast = (uint64_t)v1780;
            uint64_t v9 = 0x200000113;
            *(void *)v1780 = 0x200000113;
            break;
          case 274:
            int v497 = v26;
            unint64_t v360 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v497;
            uint64_t StringConstCast = v360;
            *(_DWORD *)unint64_t v360 = 237;
            *(void *)(v360 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v360 + 16) = *v11;
            int v361 = 39;
            goto LABEL_1234;
          case 275:
            int v857 = v26;
            unint64_t v858 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v857;
            uint64_t StringConstCast = v858;
            *(_DWORD *)unint64_t v858 = 237;
            *(void *)(v858 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v858 + 16) = *v11;
            int v859 = 39;
            goto LABEL_1467;
          case 276:
            int v253 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 237;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(double *)&uint64_t v9 = list_make1_impl(226, *v11);
            int v26 = v253;
            *(void *)(StringConstCast + 16) = v254;
            int v255 = 39;
            goto LABEL_1103;
          case 277:
            int v575 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 237;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(double *)&uint64_t v9 = list_make1_impl(226, *v11);
            int v26 = v575;
            *(void *)(StringConstCast + 16) = v576;
            *(_DWORD *)(StringConstCast + 24) = 39;
            *(unsigned char *)(StringConstCast + 2_Block_object_dispose(&a9, 8) = 1;
            break;
          case 278:
            int v228 = v26;
            unint64_t v181 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v228;
            uint64_t StringConstCast = v181;
            *(_DWORD *)unint64_t v181 = 321;
            *(void *)(v181 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            int v182 = 39;
            goto LABEL_531;
          case 279:
            int v671 = v26;
            unint64_t v181 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v671;
            uint64_t StringConstCast = v181;
            *(_DWORD *)unint64_t v181 = 321;
            *(void *)(v181 + _Block_object_dispose(&a9, 8) = *(v11 - 7);
            int v196 = 39;
            goto LABEL_1655;
          case 280:
            int v359 = v26;
            unint64_t v360 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v359;
            uint64_t StringConstCast = v360;
            *(_DWORD *)unint64_t v360 = 237;
            *(void *)(v360 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v360 + 16) = *v11;
            int v361 = 20;
            goto LABEL_1234;
          case 281:
            int v1608 = v26;
            unint64_t v858 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1608;
            uint64_t StringConstCast = v858;
            *(_DWORD *)unint64_t v858 = 237;
            *(void *)(v858 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v858 + 16) = *v11;
            int v859 = 20;
            goto LABEL_1467;
          case 282:
            int v1329 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 237;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(double *)&uint64_t v9 = list_make1_impl(226, *v11);
            int v26 = v1329;
            *(void *)(StringConstCast + 16) = v1330;
            int v255 = 20;
LABEL_1103:
            *(_DWORD *)(StringConstCast + 24) = v255;
            *(unsigned char *)(StringConstCast + 2_Block_object_dispose(&a9, 8) = 0;
            break;
          case 283:
            int v180 = v26;
            unint64_t v181 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v180;
            uint64_t StringConstCast = v181;
            *(_DWORD *)unint64_t v181 = 321;
            *(void *)(v181 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            int v182 = 20;
            goto LABEL_531;
          case 284:
            int v195 = v26;
            unint64_t v181 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v195;
            uint64_t StringConstCast = v181;
            *(_DWORD *)unint64_t v181 = 321;
            *(void *)(v181 + _Block_object_dispose(&a9, 8) = *(v11 - 7);
            int v196 = 20;
            goto LABEL_1655;
          case 285:
            int v1459 = v26;
            unint64_t v360 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1459;
            uint64_t StringConstCast = v360;
            *(_DWORD *)unint64_t v360 = 237;
            *(void *)(v360 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v360 + 16) = *v11;
            int v361 = 35;
            goto LABEL_1234;
          case 286:
            int v1683 = v26;
            unint64_t v858 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1683;
            uint64_t StringConstCast = v858;
            *(_DWORD *)unint64_t v858 = 237;
            *(void *)(v858 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v858 + 16) = *v11;
            int v859 = 35;
            goto LABEL_1467;
          case 287:
            int v469 = v26;
            unint64_t v360 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v469;
            uint64_t StringConstCast = v360;
            *(_DWORD *)unint64_t v360 = 237;
            *(void *)(v360 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v360 + 16) = *v11;
            int v361 = 49;
            goto LABEL_1234;
          case 288:
            int v1095 = v26;
            unint64_t v858 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1095;
            uint64_t StringConstCast = v858;
            *(_DWORD *)unint64_t v858 = 237;
            *(void *)(v858 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v858 + 16) = *v11;
            int v859 = 49;
            goto LABEL_1467;
          case 289:
            int v363 = v26;
            unint64_t v360 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v363;
            uint64_t StringConstCast = v360;
            *(_DWORD *)unint64_t v360 = 237;
            *(void *)(v360 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v360 + 16) = *v11;
            int v361 = 23;
LABEL_1234:
            *(_DWORD *)(v360 + 24) = v361;
            *(unsigned char *)(v360 + 2_Block_object_dispose(&a9, 8) = 0;
            break;
          case 290:
            int v1281 = v26;
            unint64_t v858 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1281;
            uint64_t StringConstCast = v858;
            *(_DWORD *)unint64_t v858 = 237;
            *(void *)(v858 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v858 + 16) = *v11;
            int v859 = 23;
LABEL_1467:
            *(_DWORD *)(v858 + 24) = v859;
            *(unsigned char *)(v858 + 2_Block_object_dispose(&a9, 8) = 1;
            break;
          case 291:
            int v608 = v26;
            unint64_t v181 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v608;
            uint64_t StringConstCast = v181;
            *(_DWORD *)unint64_t v181 = 321;
            *(void *)(v181 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            int v182 = 23;
LABEL_531:
            *(_DWORD *)(v181 + 16) = v182;
            *(void *)(v181 + 24) = 0;
            goto LABEL_1656;
          case 292:
            int v1825 = v26;
            unint64_t v181 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1825;
            uint64_t StringConstCast = v181;
            *(_DWORD *)unint64_t v181 = 321;
            *(void *)(v181 + _Block_object_dispose(&a9, 8) = *(v11 - 7);
            int v196 = 23;
LABEL_1655:
            *(_DWORD *)(v181 + 16) = v196;
            *(void *)(v181 + 24) = *(v11 - 4);
            goto LABEL_1656;
          case 295:
            uint64_t v2022 = v24;
            v1759 = v2065;
            int v1760 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(_DWORD *)uint64_t StringConstCast = 238;
            uint64_t v1761 = *v1759;
            uint64_t v24 = v2022;
            unint64_t v1762 = MemoryContextAllocZeroAligned(v1761, 0x18uLL);
            int v26 = v1760;
            *(_DWORD *)unint64_t v1762 = 396;
            *(_DWORD *)(StringConstCast + 4) = 62;
            *(void *)(v1762 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1762 + 16) = *v11;
            *(void *)(StringConstCast + 32) = v1762;
            break;
          case 296:
            uint64_t v1994 = v24;
            char v310 = v2065;
            int v311 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(_DWORD *)uint64_t StringConstCast = 238;
            uint64_t v312 = *v310;
            uint64_t v24 = v1994;
            unint64_t v313 = MemoryContextAllocZeroAligned(v312, 0x18uLL);
            int v26 = v311;
            *(_DWORD *)unint64_t v313 = 396;
            int v314 = 63;
            goto LABEL_355;
          case 297:
            uint64_t v1996 = v24;
            unint64_t v371 = v2065;
            int v372 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(_DWORD *)uint64_t StringConstCast = 238;
            uint64_t v373 = *v371;
            uint64_t v24 = v1996;
            unint64_t v313 = MemoryContextAllocZeroAligned(v373, 0x18uLL);
            int v26 = v372;
            *(_DWORD *)unint64_t v313 = 396;
            int v314 = 62;
LABEL_355:
            *(_DWORD *)(StringConstCast + 4) = v314;
            *(void *)(v313 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v313 + 16) = 0;
            *(void *)(StringConstCast + 32) = v313;
            break;
          case 298:
          case 300:
            int v74 = v26;
            unint64_t v75 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v74;
            uint64_t StringConstCast = v75;
            uint64_t v9 = 238;
            *(void *)unint64_t v75 = 238;
            *(void *)(v75 + 32) = *v11;
            *(unsigned char *)(v75 + 44) = 0;
            break;
          case 299:
          case 301:
            int v174 = v26;
            unint64_t v175 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v174;
            uint64_t StringConstCast = v175;
            uint64_t v9 = 238;
            *(void *)unint64_t v175 = 238;
            *(void *)(v175 + 32) = *v11;
            goto LABEL_1571;
          case 302:
            int v1857 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1857;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x3000000EELL;
            goto LABEL_1785;
          case 303:
            int v319 = v26;
            unint64_t v270 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v319;
            uint64_t StringConstCast = v270;
            uint64_t v9 = 0x5000000EELL;
            goto LABEL_318;
          case 304:
            int v269 = v26;
            unint64_t v270 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v269;
            uint64_t StringConstCast = v270;
            uint64_t v9 = 0x6000000EELL;
LABEL_318:
            *(double *)unint64_t v270 = *(double *)&v9;
            *(void *)(v270 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            break;
          case 305:
            int v1671 = v26;
            unint64_t v68 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1671;
            uint64_t StringConstCast = v68;
            uint64_t v9 = 0x7000000EELL;
LABEL_1454:
            *(double *)unint64_t v68 = *(double *)&v9;
            *(void *)(v68 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            break;
          case 306:
            int v1781 = v26;
            unint64_t v175 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1781;
            uint64_t StringConstCast = v175;
            uint64_t v9 = 0x7000000EELL;
            goto LABEL_1570;
          case 307:
            int v565 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(void *)uint64_t StringConstCast = 0x9000000EELL;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            unint64_t v566 = (unint64_t)makeInteger(*(_DWORD *)v11);
            goto LABEL_834;
          case 308:
            int v1331 = v26;
            unint64_t v1332 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(_DWORD *)unint64_t v1332 = 238;
            if ((*((_DWORD *)v11 - 6) - 0x8000) <= 0xFFFF8000) {
              base_yyparse_cold_7();
            }
            uint64_t StringConstCast = v1332;
            *(_DWORD *)(v1332 + 4) = 9;
            *(_WORD *)(v1332 + 16) = *((_DWORD *)v11 - 6);
            *(void *)(v1332 + 32) = makeInteger(*(_DWORD *)v11);
            int v26 = v1331;
            break;
          case 309:
            int v446 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v446;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0xA000000EELL;
            goto LABEL_1369;
          case 310:
            int v1596 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1596;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0xB000000EELL;
LABEL_1369:
            *(double *)unint64_t v198 = *(double *)&v9;
            uint64_t v480 = *(v11 - 2);
            goto LABEL_1786;
          case 311:
            int v565 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(void *)uint64_t StringConstCast = 0xC000000EELL;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            unint64_t v566 = makeString(*v11);
LABEL_834:
            int v26 = v565;
            *(void *)(StringConstCast + 32) = v566;
            break;
          case 312:
            uint64_t v2026 = v24;
            v1910 = v2065;
            int v1911 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(_DWORD *)uint64_t StringConstCast = 238;
            uint64_t v1912 = *v1910;
            uint64_t v24 = v2026;
            unint64_t v1913 = MemoryContextAllocZeroAligned(v1912, 0xB0uLL);
            int v26 = v1911;
            uint64_t v9 = 0x300000171;
            *(void *)unint64_t v1913 = 0x300000171;
            *(unsigned char *)(v1913 + 4_Block_object_dispose(&a9, 8) = *((_DWORD *)v11 - 6);
            *(void *)(v1913 + 8errstart(20, 0) = *v11;
            *(_DWORD *)(v1913 + 2errstart(20, 0) = *(v12 - 4);
            *(_DWORD *)(StringConstCast + 4) = 64;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(void *)(StringConstCast + 32) = v1913;
            break;
          case 313:
            int v1920 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1920;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x41000000EELL;
            goto LABEL_1785;
          case 314:
            int v1343 = v26;
            unint64_t v1344 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1343;
            uint64_t StringConstCast = v1344;
            uint64_t v9 = 0x42000000EELL;
            *(void *)unint64_t v1344 = 0x42000000EELL;
            *(void *)(v1344 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(unsigned char *)(v1344 + 44) = 0;
            break;
          case 315:
            int v1741 = v26;
            unint64_t v175 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1741;
            uint64_t StringConstCast = v175;
            uint64_t v9 = 0x42000000EELL;
LABEL_1570:
            *(double *)unint64_t v175 = *(double *)&v9;
            *(void *)(v175 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            goto LABEL_1571;
          case 316:
            int v730 = v26;
            unint64_t v175 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v730;
            uint64_t StringConstCast = v175;
            uint64_t v9 = 0xD000000EELL;
            goto LABEL_878;
          case 317:
            int v1763 = v26;
            unint64_t v1764 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1763;
            uint64_t StringConstCast = v1764;
            uint64_t v9 = 0xD000000EELL;
            goto LABEL_1682;
          case 318:
            uint64_t v2018 = v24;
            v1531 = v2065;
            int v1532 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(_DWORD *)uint64_t StringConstCast = 238;
            uint64_t v1533 = *v1531;
            uint64_t v24 = v2018;
            unint64_t v1534 = MemoryContextAllocZeroAligned(v1533, 0x70uLL);
            int v26 = v1532;
            *(_DWORD *)unint64_t v1534 = 367;
            *(_DWORD *)(StringConstCast + 4) = 28;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(void *)(StringConstCast + 32) = v1534;
            *(void *)(v1534 + 16) = *(v11 - 2);
            *(void *)(v1534 + 72) = *(v11 - 1);
            *(void *)(v1534 + 32) = *v11;
            *(_DWORD *)(v1534 + 104) = *(v12 - 5);
            break;
          case 319:
            int v197 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v197;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x1D000000EELL;
LABEL_1785:
            *(double *)unint64_t v198 = *(double *)&v9;
            uint64_t v480 = *(v11 - 1);
            goto LABEL_1786;
          case 320:
            int v200 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v200;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x11000000EELL;
            *(void *)unint64_t v198 = 0x11000000EELL;
            goto LABEL_1787;
          case 321:
            uint64_t v1587 = v24;
            v1588 = v2065;
            int v2056 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(_DWORD *)uint64_t StringConstCast = 238;
            uint64_t v1589 = *v1588;
            uint64_t v24 = v1587;
            unint64_t v1590 = MemoryContextAllocZeroAligned(v1589, 0xB0uLL);
            *(_DWORD *)unint64_t v1590 = 369;
            *(_DWORD *)(StringConstCast + 4) = 21;
            *(void *)(StringConstCast + 32) = v1590;
            *(_DWORD *)(v1590 + 4) = 9;
            *(void *)(v1590 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            processCASbits(*(unsigned int *)v11, *v12, (size_t)"ALTER CONSTRAINT statement", (unsigned char *)(v1590 + 16), (unsigned char *)(v1590 + 17), 0, 0);
            int v26 = v2056;
            break;
          case 322:
            int v1826 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1826;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x16000000EELL;
            goto LABEL_1754;
          case 323:
            int v1096 = v26;
            unint64_t v175 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1096;
            uint64_t StringConstCast = v175;
            uint64_t v9 = 0x19000000EELL;
LABEL_878:
            *(double *)unint64_t v175 = *(double *)&v9;
            *(void *)(v175 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v175 + 4errstart(20, 0) = *(_DWORD *)v11;
LABEL_1571:
            *(unsigned char *)(v175 + 44) = 1;
            break;
          case 324:
            int v1844 = v26;
            unint64_t v1764 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1844;
            uint64_t StringConstCast = v1764;
            uint64_t v9 = 0x19000000EELL;
LABEL_1682:
            *(double *)unint64_t v1764 = *(double *)&v9;
            *(void *)(v1764 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v1764 + 4errstart(20, 0) = *(_DWORD *)v11;
            *(unsigned char *)(v1764 + 44) = 0;
            break;
          case 325:
            int v1731 = v26;
            v1732 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1731;
            uint64_t StringConstCast = (uint64_t)v1732;
            uint64_t v9 = 0x23000000EELL;
            *(void *)v1732 = 0x23000000EELL;
            break;
          case 326:
            int v281 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v281;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x1F000000EELL;
            goto LABEL_1754;
          case 327:
            int v332 = v26;
            uint64_t v333 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v332;
            uint64_t StringConstCast = (uint64_t)v333;
            uint64_t v9 = 0x20000000EELL;
            *(void *)uint64_t v333 = 0x20000000EELL;
            *((void *)v333 + 1) = 0;
            break;
          case 328:
            int v1865 = v26;
            v1866 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1865;
            uint64_t StringConstCast = (uint64_t)v1866;
            uint64_t v9 = 0x21000000EELL;
            *(void *)v1866 = 0x21000000EELL;
            break;
          case 329:
            int v212 = v26;
            uint64_t v213 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v212;
            uint64_t StringConstCast = (uint64_t)v213;
            uint64_t v9 = 0x22000000EELL;
            *(void *)uint64_t v213 = 0x22000000EELL;
            break;
          case 330:
            int v1862 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1862;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x28000000EELL;
            goto LABEL_1754;
          case 331:
            int v322 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v322;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x29000000EELL;
            goto LABEL_1754;
          case 332:
            int v280 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v280;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x2A000000EELL;
            goto LABEL_1754;
          case 333:
            int v1733 = v26;
            v1734 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1733;
            uint64_t StringConstCast = (uint64_t)v1734;
            uint64_t v9 = 0x2C000000EELL;
            *(void *)v1734 = 0x2C000000EELL;
            break;
          case 334:
            int v1852 = v26;
            v1853 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1852;
            uint64_t StringConstCast = (uint64_t)v1853;
            uint64_t v9 = 0x2E000000EELL;
            *(void *)v1853 = 0x2E000000EELL;
            break;
          case 335:
            int v1305 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1305;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x2B000000EELL;
            goto LABEL_1754;
          case 336:
            int v1867 = v26;
            v1868 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1867;
            uint64_t StringConstCast = (uint64_t)v1868;
            uint64_t v9 = 0x2D000000EELL;
            *(void *)v1868 = 0x2D000000EELL;
            break;
          case 337:
            int v1772 = v26;
            v1773 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1772;
            uint64_t StringConstCast = (uint64_t)v1773;
            uint64_t v9 = 0x2F000000EELL;
            *(void *)v1773 = 0x2F000000EELL;
            break;
          case 338:
            int v315 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v315;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x30000000EELL;
            goto LABEL_1754;
          case 339:
            int v398 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v398;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x31000000EELL;
            goto LABEL_1754;
          case 340:
            int v1897 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1897;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x32000000EELL;
            goto LABEL_1754;
          case 341:
            int v287 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v287;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x33000000EELL;
            goto LABEL_1754;
          case 342:
            int v199 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v199;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x34000000EELL;
            *(void *)unint64_t v198 = 0x34000000EELL;
            goto LABEL_1787;
          case 343:
            int v826 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v826;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x35000000EELL;
            *(void *)unint64_t v198 = 0x35000000EELL;
            goto LABEL_1787;
          case 344:
            int v937 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(_DWORD *)uint64_t StringConstCast = 238;
            unint64_t TypeNameFromNameList = makeTypeNameFromNameList(*v11);
            int v26 = v937;
            *(_DWORD *)(TypeNameFromNameList + 4_Block_object_dispose(&a9, 8) = *v12;
            *(_DWORD *)(StringConstCast + 4) = 54;
            *(void *)(StringConstCast + 32) = TypeNameFromNameList;
            break;
          case 345:
            int v232 = v26;
            uint64_t v233 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v232;
            uint64_t StringConstCast = (uint64_t)v233;
            uint64_t v9 = 0x37000000EELL;
            *(void *)uint64_t v233 = 0x37000000EELL;
            break;
          case 346:
            int v524 = v26;
            v525 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v524;
            uint64_t StringConstCast = (uint64_t)v525;
            uint64_t v9 = 0x1E000000EELL;
            *(void *)v525 = 0x1E000000EELL;
            *((void *)v525 + 3) = *v11;
            break;
          case 347:
            int v271 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v271;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x24000000EELL;
            goto LABEL_1754;
          case 348:
            int v1460 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1460;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x25000000EELL;
            *(void *)unint64_t v198 = 0x25000000EELL;
            goto LABEL_1787;
          case 349:
            int v1552 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1552;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x26000000EELL;
            *(void *)unint64_t v198 = 0x26000000EELL;
            goto LABEL_1787;
          case 350:
            int v323 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v323;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x38000000EELL;
            *(void *)unint64_t v198 = 0x38000000EELL;
            goto LABEL_1787;
          case 351:
            int v731 = v26;
            v732 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v731;
            uint64_t StringConstCast = (uint64_t)v732;
            uint64_t v9 = 0x39000000EELL;
            *(void *)v732 = 0x39000000EELL;
            break;
          case 352:
            int v374 = v26;
            Swift::Int v375 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v374;
            uint64_t StringConstCast = (uint64_t)v375;
            uint64_t v9 = 0x3A000000EELL;
            *(void *)Swift::Int v375 = 0x3A000000EELL;
            break;
          case 353:
            int v1684 = v26;
            v1685 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1684;
            uint64_t StringConstCast = (uint64_t)v1685;
            uint64_t v9 = 0x3B000000EELL;
            *(void *)v1685 = 0x3B000000EELL;
            break;
          case 354:
            int v1726 = v26;
            v1727 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1726;
            uint64_t StringConstCast = (uint64_t)v1727;
            uint64_t v9 = 0x3C000000EELL;
            *(void *)v1727 = 0x3C000000EELL;
            break;
          case 355:
            int v526 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v526;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x3D000000EELL;
            *(void *)unint64_t v198 = 0x3D000000EELL;
            goto LABEL_1787;
          case 359:
          case 360:
            StringConstCast &= 0xFFFFFFFF00000000;
            break;
          case 361:
          case 478:
            int v78 = v26;
            unint64_t v79 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v78;
            uint64_t StringConstCast = v79;
            *(_DWORD *)unint64_t v79 = 358;
            *(void *)(v79 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v79 + 16) = *v11;
            *(_DWORD *)(v79 + 24) = *(v12 - 1);
            break;
          case 365:
            int v1008 = v26;
            unint64_t v215 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v1008;
            uint64_t StringConstCast = v215;
            *(_DWORD *)unint64_t v215 = 331;
            char v216 = 110;
            goto LABEL_802;
          case 366:
            int v843 = v26;
            unint64_t v215 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v843;
            uint64_t StringConstCast = v215;
            *(_DWORD *)unint64_t v215 = 331;
            char v216 = 102;
            goto LABEL_802;
          case 367:
            int v214 = v26;
            unint64_t v215 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v214;
            uint64_t StringConstCast = v215;
            *(_DWORD *)unint64_t v215 = 331;
            char v216 = 100;
LABEL_802:
            *(unsigned char *)(v215 + 4) = v216;
            *(void *)(v215 + _Block_object_dispose(&a9, 8) = 0;
            break;
          case 368:
            int v384 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v384;
            uint64_t StringConstCast = v52;
            *(_DWORD *)unint64_t v52 = 331;
            *(unsigned char *)(v52 + 4) = 105;
            goto LABEL_1755;
          case 369:
            uint64_t StringConstCast = *(v11 - 1);
            break;
          case 374:
          case 837:
          case 848:
          case 1364:
            uint64_t v43 = (const char *)*(v11 - 2);
            uint64_t v44 = *v11;
            int v45 = *(v12 - 2);
            goto LABEL_1598;
          case 375:
          case 838:
            uint64_t v43 = (const char *)*v11;
            int v45 = *v12;
            goto LABEL_1597;
          case 376:
            uint64_t v219 = *(v11 - 4);
            uint64_t v220 = *(v11 - 2);
            uint64_t v221 = *v11;
            int v222 = *(v12 - 4);
            goto LABEL_282;
          case 377:
            uint64_t v219 = *(v11 - 2);
            uint64_t v220 = *v11;
            int v222 = *(v12 - 2);
            uint64_t v221 = 0;
LABEL_282:
            int v32 = v26;
            DefEleunint64_t m = makeDefElemExtended(v219, v220, v221, 0, v222, *(double *)&v9);
            goto LABEL_1777;
          case 379:
          case 411:
          case 473:
          case 596:
          case 642:
          case 649:
          case 686:
          case 771:
          case 1080:
          case 1174:
          case 1210:
          case 1234:
          case 1466:
          case 1485:
          case 1766:
          case 1854:
          case 2250:
          case 2265:
          case 2267:
LABEL_1774:
            uint64_t v34 = *(v11 - 1);
            goto LABEL_1775;
          case 380:
          case 609:
            int v45 = *v12;
            uint64_t v43 = "restart";
            goto LABEL_1597;
          case 381:
          case 610:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 2);
            uint64_t v43 = "restart";
            goto LABEL_1598;
          case 382:
            uint64_t StringConstCast = *v11;
            v1904 = *(const char **)(*v11 + 16);
            int v2063 = v26;
            if (!strcmp(v1904, "as")
              || !strcmp(v1904, "restart")
              || (v1905 = strcmp(v1904, "owned_by"), int v26 = v2063, !v1905))
            {
              base_yyparse_cold_8((uint64_t)v11);
            }
            break;
          case 383:
            int v32 = v26;
            v1257 = makeInteger(*(_DWORD *)v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"generated", (uint64_t)v1257, *(v12 - 2));
            goto LABEL_1777;
          case 384:
            int v2062 = v26;
            v1987 = v15;
            uint64_t v2023 = v24;
            unsigned int v1966 = v16;
            unint64_t v1782 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(_DWORD *)unint64_t v1782 = 394;
            *(unsigned char *)(v1782 + 4) = 104;
            *(void *)(v1782 + _Block_object_dispose(&a9, 8) = -1;
            uint64_t v1783 = *(v11 - 1);
            if (!v1783 || *(int *)(v1783 + 4) < 1) {
              goto LABEL_1878;
            }
            uint64_t StringConstCast = v1782;
            uint64_t v1784 = 0;
            do
            {
              while (1)
              {
                uint64_t v1785 = *(void *)(*(void *)(v1783 + 16) + 8 * v1784);
                v1786 = *(const char **)(v1785 + 16);
                if (!strcmp(v1786, "modulus")) {
                  break;
                }
                if (strcmp(v1786, "remainder")) {
                  base_yyparse_cold_13();
                }
                if (*(_DWORD *)(StringConstCast + 12) != -1) {
                  base_yyparse_cold_12();
                }
                *(_DWORD *)(StringConstCast + 12) = defGetInt32(v1785);
                if (++v1784 >= *(int *)(v1783 + 4)) {
                  goto LABEL_1582;
                }
              }
              if (*(_DWORD *)(StringConstCast + 8) != -1) {
                base_yyparse_cold_11();
              }
              *(_DWORD *)(StringConstCast + _Block_object_dispose(&a9, 8) = defGetInt32(v1785);
              ++v1784;
            }
            while (v1784 < *(int *)(v1783 + 4));
LABEL_1582:
            if (*(_DWORD *)(StringConstCast + 8) == -1) {
LABEL_1878:
            }
              base_yyparse_cold_9();
            uint64_t v16 = v1966;
            uint64_t v24 = v2023;
            if (*(_DWORD *)(StringConstCast + 12) == -1) {
              base_yyparse_cold_10();
            }
            *(_DWORD *)(StringConstCast + 4errstart(20, 0) = *(v12 - 3);
            uint64_t v15 = v1987;
            int v26 = v2062;
            break;
          case 385:
            int v1570 = v26;
            unint64_t v1571 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1570;
            uint64_t StringConstCast = v1571;
            *(_DWORD *)unint64_t v1571 = 394;
            *(_WORD *)(v1571 + 4) = 108;
            *(void *)(v1571 + 16) = *(v11 - 1);
            *(_DWORD *)(v1571 + 4errstart(20, 0) = *(v12 - 3);
            break;
          case 386:
            int v256 = v26;
            unint64_t v257 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v256;
            uint64_t StringConstCast = v257;
            *(_DWORD *)unint64_t v257 = 394;
            *(_WORD *)(v257 + 4) = 114;
            *(void *)(v257 + 24) = *(v11 - 5);
            *(void *)(v257 + 32) = *(v11 - 1);
            *(_DWORD *)(v257 + 4errstart(20, 0) = *(v12 - 7);
            break;
          case 387:
            int v435 = v26;
            unint64_t v436 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v435;
            uint64_t StringConstCast = v436;
            *(_DWORD *)unint64_t v436 = 394;
            *(unsigned char *)(v436 + 5) = 1;
            *(_DWORD *)(v436 + 4errstart(20, 0) = *v12;
            break;
          case 388:
            uint64_t v236 = v24;
            uint64_t v237 = *(v11 - 1);
            int v238 = v26;
            uint64_t v239 = makeInteger(*(_DWORD *)v11);
            uint64_t v240 = v237;
            uint64_t v24 = v236;
            unint64_t v241 = makeDefElem(v240, (uint64_t)v239, *(v12 - 1));
            int v26 = v238;
            uint64_t StringConstCast = v241;
            break;
          case 391:
            int v1461 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 237;
            unint64_t RangeVarFromAnyName = makeRangeVarFromAnyName(*(v11 - 1), *(v12 - 1), v1462);
            int v26 = v1461;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = RangeVarFromAnyName;
            *(void *)(StringConstCast + 16) = *v11;
            *(_DWORD *)(StringConstCast + 24) = 47;
            break;
          case 394:
            int v1722 = v26;
            unint64_t v1723 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1722;
            uint64_t StringConstCast = v1723;
            uint64_t v9 = 238;
            *(void *)unint64_t v1723 = 238;
            *(void *)(v1723 + 32) = *(v11 - 1);
            *(_DWORD *)(v1723 + 4errstart(20, 0) = *(_DWORD *)v11;
            break;
          case 395:
            int v939 = v26;
            unint64_t v940 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v939;
            uint64_t StringConstCast = v940;
            uint64_t v9 = 0xD000000EELL;
            *(void *)unint64_t v940 = 0xD000000EELL;
            *(void *)(v940 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v940 + 4errstart(20, 0) = *(_DWORD *)v11;
            *(unsigned char *)(v940 + 44) = 1;
            break;
          case 396:
            int v1892 = v26;
            unint64_t v1893 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1892;
            uint64_t StringConstCast = v1893;
            uint64_t v9 = 0xD000000EELL;
            *(void *)unint64_t v1893 = 0xD000000EELL;
            *(void *)(v1893 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v1893 + 4errstart(20, 0) = *(_DWORD *)v11;
            *(unsigned char *)(v1893 + 44) = 0;
            break;
          case 397:
            uint64_t v1993 = v24;
            uint64_t v208 = v2065;
            int v209 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(_DWORD *)uint64_t StringConstCast = 238;
            uint64_t v210 = *v208;
            uint64_t v24 = v1993;
            unint64_t v211 = MemoryContextAllocZeroAligned(v210, 0x70uLL);
            int v26 = v209;
            *(_DWORD *)unint64_t v211 = 367;
            *(_DWORD *)(StringConstCast + 4) = 28;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(void *)(StringConstCast + 32) = v211;
            *(_DWORD *)(StringConstCast + 4errstart(20, 0) = *(_DWORD *)v11;
            *(void *)(v211 + 16) = *(v11 - 2);
            *(void *)(v211 + 72) = *(v11 - 1);
            *(void *)(v211 + 32) = 0;
            *(_DWORD *)(v211 + 104) = *(v12 - 5);
            break;
          case 398:
            int v1816 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v1816;
            uint64_t StringConstCast = v52;
            int v92 = 244;
            goto LABEL_1634;
          case 399:
            int v320 = v26;
            unint64_t v321 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v320;
            uint64_t StringConstCast = v321;
            *(_DWORD *)unint64_t v321 = 244;
            *(void *)(v321 + _Block_object_dispose(&a9, 8) = 0;
            break;
          case 400:
            int v411 = v26;
            unint64_t v412 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            uint64_t StringConstCast = v412;
            *(_DWORD *)unint64_t v412 = 246;
            *(void *)(v412 + _Block_object_dispose(&a9, 8) = *(v11 - 8);
            *(void *)(v412 + 16) = 0;
            *(void *)(v412 + 24) = *(v11 - 7);
            int v413 = *((unsigned __int8 *)v11 - 48);
            *(unsigned char *)(v412 + 32) = v413;
            int v414 = *((unsigned __int8 *)v11 - 40);
            *(unsigned char *)(v412 + 33) = v414;
            uint64_t v415 = *(v11 - 4);
            *(void *)(v412 + 4errstart(20, 0) = v415;
            uint64_t v416 = *v11;
            *(void *)(v412 + 56) = *v11;
            if (v414 && !v415) {
              base_yyparse_cold_14();
            }
            if (!v413 && v416) {
              base_yyparse_cold_15();
            }
            *(void *)(v412 + 4_Block_object_dispose(&a9, 8) = 0;
            uint64_t v417 = *(v11 - 9);
            if (v417)
            {
              uint64_t v418 = lappend(0, v417);
              *(void *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = v418;
            }
            else
            {
              uint64_t v418 = 0;
            }
            uint64_t v1942 = *(v11 - 3);
            if (v1942)
            {
              uint64_t v418 = lappend(v418, v1942);
              *(void *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = v418;
            }
            uint64_t v2 = (const void **)*(v11 - 1);
            if (!v2) {
              goto LABEL_1849;
            }
            *(void *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = list_concat(v418, v2);
            int v26 = v411;
            break;
          case 401:
            int v1921 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            *(_DWORD *)uint64_t StringConstCast = 246;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(StringConstCast + 16) = *(v11 - 6);
            *(void *)(StringConstCast + 24) = 0;
            *(unsigned char *)(StringConstCast + 32) = 0;
            int v1922 = *((unsigned __int8 *)v11 - 24);
            *(unsigned char *)(StringConstCast + 33) = v1922;
            uint64_t v1923 = *(v11 - 2);
            *(void *)(StringConstCast + 4errstart(20, 0) = v1923;
            *(void *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = *v11;
            int v26 = v1921;
            if (v1922 && !v1923) {
              base_yyparse_cold_16();
            }
            break;
          case 402:
          case 404:
          case 516:
          case 578:
          case 580:
          case 621:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            break;
          case 403:
          case 405:
          case 517:
          case 579:
          case 622:
            StringConstCast &= 0xFFFFFFFFFFFFFF00;
            break;
          case 406:
          case 409:
          case 436:
          case 457:
          case 465:
          case 466:
          case 467:
          case 468:
          case 469:
          case 476:
          case 477:
          case 508:
          case 549:
          case 557:
          case 559:
          case 566:
          case 568:
          case 570:
          case 591:
          case 625:
          case 627:
          case 629:
          case 636:
          case 687:
          case 698:
          case 703:
          case 707:
          case 709:
          case 711:
          case 2328:
          case 2332:
            uint64_t StringConstCast = *v11;
            break;
          case 407:
          case 408:
          case 412:
          case 427:
          case 429:
          case 439:
          case 458:
          case 460:
          case 474:
          case 519:
          case 524:
          case 534:
          case 548:
          case 550:
          case 558:
          case 560:
          case 561:
          case 567:
          case 569:
          case 592:
          case 594:
          case 626:
          case 628:
          case 630:
          case 637:
          case 643:
          case 650:
          case 688:
          case 692:
          case 708:
          case 710:
          case 712:
            uint64_t StringConstCast = 0;
            break;
          case 410:
          case 438:
          case 459:
          case 518:
          case 523:
          case 533:
          case 547:
          case 593:
          case 691:
          case 695:
            uint64_t StringConstCast = *(v11 - 1);
            break;
          case 413:
          case 426:
            uint64_t v169 = "binary";
            goto LABEL_1614;
          case 414:
            int v32 = v26;
            uint64_t v579 = makeInteger(1);
            DefEleunint64_t m = makeDefElem((uint64_t)"freeze", (uint64_t)v579, *v12);
            goto LABEL_1777;
          case 415:
            int v32 = v26;
            unint64_t v292 = makeString(*v11);
            int v293 = *(v12 - 2);
            goto LABEL_741;
          case 416:
            int v32 = v26;
            unint64_t v437 = makeString(*v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"null", v437, *(v12 - 2));
            goto LABEL_1777;
          case 417:
            uint64_t v169 = "csv";
LABEL_1614:
            int v32 = v26;
            unint64_t v1805 = makeString((uint64_t)v169);
            DefEleunint64_t m = makeDefElem((uint64_t)"format", v1805, *v12);
            goto LABEL_1777;
          case 418:
            int v32 = v26;
            v1891 = makeInteger(1);
            DefEleunint64_t m = makeDefElem((uint64_t)"header", (uint64_t)v1891, *v12);
            goto LABEL_1777;
          case 419:
            int v32 = v26;
            unint64_t v1806 = makeString(*v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"quote", v1806, *(v12 - 2));
            goto LABEL_1777;
          case 420:
            int v32 = v26;
            unint64_t v447 = makeString(*v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"escape", v447, *(v12 - 2));
            goto LABEL_1777;
          case 421:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 2);
            uint64_t v43 = "force_quote";
            goto LABEL_1598;
          case 422:
            int v32 = v26;
            v635 = (_DWORD *)MemoryContextAllocZero(*v2065, 4uLL);
            _DWORD *v635 = 351;
            DefEleunint64_t m = makeDefElem((uint64_t)"force_quote", (uint64_t)v635, *(v12 - 2));
            goto LABEL_1777;
          case 423:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 3);
            uint64_t v43 = "force_not_null";
            goto LABEL_1598;
          case 424:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 2);
            uint64_t v43 = "force_null";
            goto LABEL_1598;
          case 425:
            int v32 = v26;
            unint64_t v316 = makeString(*v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"encoding", v316, *(v12 - 1));
            goto LABEL_1777;
          case 428:
            int v32 = v26;
            unint64_t v292 = makeString(*v11);
            int v293 = *(v12 - 1);
LABEL_741:
            DefEleunint64_t m = makeDefElem((uint64_t)"delimiter", v292, v293);
            goto LABEL_1777;
          case 434:
          case 702:
          case 1855:
            uint64_t v43 = (const char *)*(v11 - 1);
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            goto LABEL_1598;
          case 435:
          case 442:
          case 522:
          case 704:
          case 792:
          case 793:
          case 794:
          case 843:
          case 1369:
          case 1407:
          case 1548:
          case 1584:
          case 2258:
            int v32 = v26;
            DefEleunint64_t m = makeString(*v11);
            goto LABEL_1777;
          case 437:
          case 2259:
            int v1130 = v26;
            v1131 = (char *)MemoryContextAllocZero(*v2065, 4uLL);
            int v26 = v1130;
            uint64_t StringConstCast = (uint64_t)v1131;
            *(_DWORD *)v1131 = 351;
            break;
          case 443:
            int v764 = v26;
            unint64_t v765 = MemoryContextAllocZeroAligned(*v2065, 0x68uLL);
            int v26 = v764;
            uint64_t StringConstCast = v765;
            *(_DWORD *)unint64_t v765 = 247;
            *(unsigned char *)(*(v11 - 9) + 33) = *((_DWORD *)v11 - 22);
            *(void *)(v765 + _Block_object_dispose(&a9, 8) = *(v11 - 9);
            *(void *)(v765 + 16) = *(v11 - 7);
            *(void *)(v765 + 24) = *(v11 - 5);
            *(void *)(v765 + 4errstart(20, 0) = *(v11 - 4);
            *(void *)(v765 + 4_Block_object_dispose(&a9, 8) = 0;
            *(void *)(v765 + 56) = 0;
            *(void *)(v765 + 8_Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v765 + 64) = *(v11 - 2);
            *(_DWORD *)(v765 + 72) = *((_DWORD *)v11 - 2);
            *(void *)(v765 + 8errstart(20, 0) = *v11;
            *(unsigned char *)(v765 + 96) = 0;
            break;
          case 444:
            int v1774 = v26;
            unint64_t v1775 = MemoryContextAllocZeroAligned(*v2065, 0x68uLL);
            int v26 = v1774;
            uint64_t StringConstCast = v1775;
            *(_DWORD *)unint64_t v1775 = 247;
            *(unsigned char *)(*(v11 - 9) + 33) = *((_DWORD *)v11 - 28);
            *(void *)(v1775 + _Block_object_dispose(&a9, 8) = *(v11 - 9);
            *(void *)(v1775 + 16) = *(v11 - 7);
            *(void *)(v1775 + 24) = *(v11 - 5);
            *(void *)(v1775 + 4errstart(20, 0) = *(v11 - 4);
            *(void *)(v1775 + 4_Block_object_dispose(&a9, 8) = 0;
            *(void *)(v1775 + 56) = 0;
            *(void *)(v1775 + 8_Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v1775 + 64) = *(v11 - 2);
            *(_DWORD *)(v1775 + 72) = *((_DWORD *)v11 - 2);
            *(void *)(v1775 + 8errstart(20, 0) = *v11;
            *(unsigned char *)(v1775 + 96) = 1;
            break;
          case 445:
            int v1791 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x68uLL);
            *(_DWORD *)uint64_t StringConstCast = 247;
            *(unsigned char *)(*(v11 - 8) + 33) = *((_DWORD *)v11 - 20);
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 8);
            *(void *)(StringConstCast + 16) = *(v11 - 5);
            *(void *)(StringConstCast + 24) = 0;
            *(void *)(StringConstCast + 4errstart(20, 0) = *(v11 - 4);
            unint64_t v1792 = makeTypeNameFromNameList(*(v11 - 6));
            int v26 = v1791;
            *(void *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = v1792;
            *(_DWORD *)(v1792 + 4_Block_object_dispose(&a9, 8) = *(v12 - 6);
            goto LABEL_1733;
          case 446:
            int v844 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x68uLL);
            *(_DWORD *)uint64_t StringConstCast = 247;
            *(unsigned char *)(*(v11 - 8) + 33) = *((_DWORD *)v11 - 26);
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 8);
            *(void *)(StringConstCast + 16) = *(v11 - 5);
            *(void *)(StringConstCast + 24) = 0;
            *(void *)(StringConstCast + 4errstart(20, 0) = *(v11 - 4);
            unint64_t v845 = makeTypeNameFromNameList(*(v11 - 6));
            int v26 = v844;
            *(void *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = v845;
            *(_DWORD *)(v845 + 4_Block_object_dispose(&a9, 8) = *(v12 - 6);
            goto LABEL_1783;
          case 447:
            int v1878 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x68uLL);
            *(_DWORD *)uint64_t StringConstCast = 247;
            *(unsigned char *)(*(v11 - 10) + 33) = *((_DWORD *)v11 - 24);
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 10);
            *(void *)(StringConstCast + 16) = *(v11 - 6);
            *(double *)&uint64_t v9 = list_make1_impl(226, *(v11 - 7));
            int v26 = v1878;
            *(void *)(StringConstCast + 24) = v1879;
            *(void *)(StringConstCast + 32) = *(v11 - 5);
            *(void *)(StringConstCast + 4errstart(20, 0) = *(v11 - 4);
            *(void *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = 0;
LABEL_1733:
            *(void *)(StringConstCast + 56) = 0;
            *(void *)(StringConstCast + 8_Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(StringConstCast + 64) = *(v11 - 2);
            *(_DWORD *)(StringConstCast + 72) = *((_DWORD *)v11 - 2);
            *(void *)(StringConstCast + 8errstart(20, 0) = *v11;
            *(unsigned char *)(StringConstCast + 96) = 0;
            break;
          case 448:
            int v1918 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x68uLL);
            *(_DWORD *)uint64_t StringConstCast = 247;
            *(unsigned char *)(*(v11 - 10) + 33) = *((_DWORD *)v11 - 30);
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 10);
            *(void *)(StringConstCast + 16) = *(v11 - 6);
            *(double *)&uint64_t v9 = list_make1_impl(226, *(v11 - 7));
            int v26 = v1918;
            *(void *)(StringConstCast + 24) = v1919;
            *(void *)(StringConstCast + 32) = *(v11 - 5);
            *(void *)(StringConstCast + 4errstart(20, 0) = *(v11 - 4);
            *(void *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = 0;
LABEL_1783:
            *(void *)(StringConstCast + 56) = 0;
            *(void *)(StringConstCast + 8_Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(StringConstCast + 64) = *(v11 - 2);
            *(_DWORD *)(StringConstCast + 72) = *((_DWORD *)v11 - 2);
            *(void *)(StringConstCast + 8errstart(20, 0) = *v11;
            *(unsigned char *)(StringConstCast + 96) = 1;
            break;
          case 449:
          case 450:
          case 451:
          case 452:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x74;
            break;
          case 453:
            int v392 = v26;
            if (!errstart(19, 0)) {
              goto LABEL_1387;
            }
            errmsg("GLOBAL is deprecated in temporary table creation", (uint64_t)v2, v3, v4, v5, v6, v7, v8, v1947);
            scanner_errposition(*(v12 - 1), v2064);
            int v393 = 3401;
            goto LABEL_1386;
          case 454:
            int v392 = v26;
            if (!errstart(19, 0)) {
              goto LABEL_1387;
            }
            errmsg("GLOBAL is deprecated in temporary table creation", (uint64_t)v2, v3, v4, v5, v6, v7, v8, v1947);
            scanner_errposition(*(v12 - 1), v2064);
            int v393 = 3408;
LABEL_1386:
            errfinish("gram.y", v393, (uint64_t)"base_yyparse");
LABEL_1387:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x74;
            int v26 = v392;
            break;
          case 455:
          case 584:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x75;
            break;
          case 456:
          case 585:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x70;
            break;
          case 470:
            int v609 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x70uLL);
            *(_DWORD *)uint64_t StringConstCast = 367;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(StringConstCast + 16) = *(v11 - 2);
            *(_DWORD *)(StringConstCast + 24) = 0;
            *(unsigned char *)(StringConstCast + 2_Block_object_dispose(&a9, 8) = 1;
            *(_DWORD *)(StringConstCast + 8errstart(20, 0) = 0;
            *(_DWORD *)(StringConstCast + 44) = 0;
            *(void *)(StringConstCast + 29) = 0;
            *(void *)(StringConstCast + 37) = 0;
            *(void *)(StringConstCast + 96) = *(v11 - 1);
            goto LABEL_1405;
          case 471:
            int v282 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x70uLL);
            *(_DWORD *)uint64_t StringConstCast = 367;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(StringConstCast + 16) = 0;
            *(_DWORD *)(StringConstCast + 24) = 0;
            *(unsigned char *)(StringConstCast + 2_Block_object_dispose(&a9, 8) = 1;
            *(_DWORD *)(StringConstCast + 8errstart(20, 0) = 0;
            *(_DWORD *)(StringConstCast + 44) = 0;
            *(void *)(StringConstCast + 29) = 0;
            *(void *)(StringConstCast + 37) = 0;
            SplitColQualList(*v11, (uint64_t *)(StringConstCast + 88), (int **)(StringConstCast + 72));
            int v26 = v282;
            *(_DWORD *)(StringConstCast + 104) = *(v12 - 1);
            break;
          case 472:
            int v609 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x70uLL);
            *(_DWORD *)uint64_t StringConstCast = 367;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(StringConstCast + 16) = 0;
            *(_DWORD *)(StringConstCast + 24) = 0;
            *(unsigned char *)(StringConstCast + 2_Block_object_dispose(&a9, 8) = 1;
            *(_DWORD *)(StringConstCast + 8errstart(20, 0) = 0;
            *(_DWORD *)(StringConstCast + 44) = 0;
            *(void *)(StringConstCast + 29) = 0;
            *(void *)(StringConstCast + 37) = 0;
LABEL_1405:
            SplitColQualList(*v11, (uint64_t *)(StringConstCast + 88), (int **)(StringConstCast + 72));
            int v26 = v609;
            *(_DWORD *)(StringConstCast + 104) = *(v12 - 3);
            break;
          case 475:
          case 507:
            uint64_t StringConstCast = *v11;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(v12 - 2);
            break;
          case 479:
            int v288 = v26;
            unint64_t v289 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v288;
            uint64_t StringConstCast = v289;
            uint64_t v9 = 0x100000171;
            *(void *)unint64_t v289 = 0x100000171;
            *(_DWORD *)(v289 + 2errstart(20, 0) = *(v12 - 1);
            break;
          case 480:
            int v223 = v26;
            unint64_t v224 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v223;
            uint64_t StringConstCast = v224;
            uint64_t v9 = 369;
            *(void *)unint64_t v224 = 369;
            *(_DWORD *)(v224 + 2errstart(20, 0) = *v12;
            break;
          case 481:
            int v1724 = v26;
            unint64_t v243 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v1724;
            uint64_t StringConstCast = v243;
            uint64_t v9 = 0x700000171;
            *(void *)unint64_t v243 = 0x700000171;
            int v244 = *(v12 - 2);
            goto LABEL_1510;
          case 482:
            int v242 = v26;
            unint64_t v243 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v242;
            uint64_t StringConstCast = v243;
            uint64_t v9 = 0x600000171;
            *(void *)unint64_t v243 = 0x600000171;
            int v244 = *(v12 - 3);
LABEL_1510:
            *(_DWORD *)(v243 + 2errstart(20, 0) = v244;
            *(void *)(v243 + 56) = 0;
            *(void *)(v243 + 8errstart(20, 0) = *(v11 - 1);
            *(void *)(v243 + 8_Block_object_dispose(&a9, 8) = 0;
            *(void *)(v243 + 96) = *v11;
            break;
          case 483:
            int v376 = v26;
            unint64_t v325 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v376;
            uint64_t StringConstCast = v325;
            uint64_t v9 = 0x500000171;
            *(void *)unint64_t v325 = 0x500000171;
            *(_DWORD *)(v325 + 2errstart(20, 0) = *(v12 - 4);
            *(unsigned char *)(v325 + 24) = *(unsigned char *)v11;
            *(void *)(v325 + 32) = *(v11 - 2);
            *(void *)(v325 + 4errstart(20, 0) = 0;
            goto LABEL_358;
          case 484:
            int v247 = v26;
            unint64_t v248 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v247;
            uint64_t StringConstCast = v248;
            uint64_t v9 = 0x200000171;
            *(void *)unint64_t v248 = 0x200000171;
            *(_DWORD *)(v248 + 2errstart(20, 0) = *(v12 - 1);
            *(void *)(v248 + 32) = *v11;
            *(void *)(v248 + 4errstart(20, 0) = 0;
            break;
          case 485:
            int v1728 = v26;
            unint64_t v1729 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v1728;
            uint64_t StringConstCast = v1729;
            uint64_t v9 = 0x300000171;
            *(void *)unint64_t v1729 = 0x300000171;
            *(unsigned char *)(v1729 + 4_Block_object_dispose(&a9, 8) = *((_DWORD *)v11 - 6);
            *(void *)(v1729 + 8errstart(20, 0) = *v11;
            *(_DWORD *)(v1729 + 2errstart(20, 0) = *(v12 - 4);
            break;
          case 486:
            int v234 = v26;
            unint64_t v235 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v234;
            uint64_t StringConstCast = v235;
            uint64_t v9 = 0x400000171;
            *(void *)unint64_t v235 = 0x400000171;
            *(unsigned char *)(v235 + 4_Block_object_dispose(&a9, 8) = *((_DWORD *)v11 - 10);
            *(void *)(v235 + 32) = *(v11 - 2);
            *(void *)(v235 + 4errstart(20, 0) = 0;
            *(_DWORD *)(v235 + 2errstart(20, 0) = *(v12 - 6);
            if (*((_DWORD *)v11 - 10) != 97) {
              base_yyparse_cold_17();
            }
            break;
          case 487:
            int v324 = v26;
            unint64_t v325 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v324;
            uint64_t StringConstCast = v325;
            uint64_t v9 = 0x900000171;
            *(void *)unint64_t v325 = 0x900000171;
            *(_DWORD *)(v325 + 2errstart(20, 0) = *(v12 - 4);
            *(void *)(v325 + 12_Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v325 + 136) = 0;
            *(void *)(v325 + 144) = *(v11 - 2);
            *(unsigned char *)(v325 + 152) = *((_DWORD *)v11 - 2);
            *(unsigned char *)(v325 + 153) = BYTE1(*(_DWORD *)v11);
            *(unsigned char *)(v325 + 154) = *(_DWORD *)v11;
LABEL_358:
            *(_WORD *)(v325 + 172) = 256;
            break;
          case 488:
          case 542:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x61;
            break;
          case 489:
          case 546:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x64;
            break;
          case 490:
            int v1898 = v26;
            unint64_t v1899 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v1898;
            uint64_t StringConstCast = v1899;
            uint64_t v9 = 0xA00000171;
            *(void *)unint64_t v1899 = 0xA00000171;
            *(_DWORD *)(v1899 + 2errstart(20, 0) = *v12;
            break;
          case 491:
            int v1464 = v26;
            unint64_t v230 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v1464;
            uint64_t StringConstCast = v230;
            uint64_t v9 = 0xB00000171;
            goto LABEL_1750;
          case 492:
            int v1894 = v26;
            unint64_t v230 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v1894;
            uint64_t StringConstCast = v230;
            uint64_t v9 = 0xC00000171;
            goto LABEL_1750;
          case 493:
            int v229 = v26;
            unint64_t v230 = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            int v26 = v229;
            uint64_t StringConstCast = v230;
            uint64_t v9 = 0xD00000171;
LABEL_1750:
            *(double *)unint64_t v230 = *(double *)&v9;
            *(_DWORD *)(v230 + 2errstart(20, 0) = *(v12 - 1);
            break;
          case 494:
            int v1895 = v26;
            unint64_t v1896 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1895;
            uint64_t StringConstCast = v1896;
            *(_DWORD *)unint64_t v1896 = 381;
            *(void *)(v1896 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1896 + 16) = *(unsigned int *)v11;
            break;
          case 495:
          case 1262:
            uint64_t v36 = (*(_DWORD *)v11 | *((_DWORD *)v11 - 4));
            goto LABEL_1771;
          case 496:
            uint64_t v36 = *(_DWORD *)(v11 - 2) & ~*(_DWORD *)v11;
            goto LABEL_1771;
          case 497:
          case 565:
            StringConstCast &= 0xFFFFFFFF00000000;
            break;
          case 498:
          case 564:
          case 723:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 499:
          case 563:
          case 724:
          case 758:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 2;
            break;
          case 500:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 4;
            break;
          case 501:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x10;
            break;
          case 502:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 8;
            break;
          case 503:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x20;
            break;
          case 504:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x40;
            break;
          case 505:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x80;
            break;
          case 506:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x7FFFFFFF;
            break;
          case 509:
            int v272 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            *(void *)uint64_t StringConstCast = 0x500000171;
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(v12 - 4);
            *(void *)(StringConstCast + 32) = *(v11 - 2);
            *(void *)(StringConstCast + 4errstart(20, 0) = 0;
            uint64_t v273 = *(unsigned int *)v11;
            uint64_t v274 = *v12;
            uint64_t v275 = (unsigned char *)(StringConstCast + 172);
            uint64_t v276 = (unsigned char *)(StringConstCast + 24);
            uint64_t v277 = "CHECK";
            uint64_t v278 = 0;
            uint64_t v279 = 0;
            goto LABEL_499;
          case 510:
            int v643 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            *(void *)uint64_t StringConstCast = 0x700000171;
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(v12 - 7);
            *(void *)(StringConstCast + 56) = *(v11 - 5);
            *(void *)(StringConstCast + 64) = *(v11 - 3);
            *(void *)(StringConstCast + 8errstart(20, 0) = *(v11 - 2);
            *(void *)(StringConstCast + 8_Block_object_dispose(&a9, 8) = 0;
            *(void *)(StringConstCast + 96) = *(v11 - 1);
            goto LABEL_1698;
          case 511:
            int v643 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            *(void *)uint64_t StringConstCast = 0x700000171;
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(v12 - 2);
            *(void *)(StringConstCast + 8errstart(20, 0) = 0;
            *(void *)(StringConstCast + 56) = 0;
            *(void *)(StringConstCast + 64) = 0;
            *(void *)(StringConstCast + 8_Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(StringConstCast + 96) = 0;
LABEL_1698:
            uint64_t v1653 = *(unsigned int *)v11;
            uint64_t v1654 = *v12;
            v1655 = (unsigned char *)(StringConstCast + 16);
            v1656 = (unsigned char *)(StringConstCast + 17);
            v1657 = "UNIQUE";
            goto LABEL_1699;
          case 512:
            int v643 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            *(void *)uint64_t StringConstCast = 0x600000171;
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(v12 - 8);
            *(void *)(StringConstCast + 56) = *(v11 - 5);
            *(void *)(StringConstCast + 64) = *(v11 - 3);
            *(void *)(StringConstCast + 8errstart(20, 0) = *(v11 - 2);
            *(void *)(StringConstCast + 8_Block_object_dispose(&a9, 8) = 0;
            *(void *)(StringConstCast + 96) = *(v11 - 1);
            goto LABEL_1636;
          case 513:
            int v643 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            *(void *)uint64_t StringConstCast = 0x600000171;
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(v12 - 3);
            *(void *)(StringConstCast + 8errstart(20, 0) = 0;
            *(void *)(StringConstCast + 56) = 0;
            *(void *)(StringConstCast + 64) = 0;
            *(void *)(StringConstCast + 8_Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(StringConstCast + 96) = 0;
LABEL_1636:
            uint64_t v1653 = *(unsigned int *)v11;
            uint64_t v1654 = *v12;
            v1655 = (unsigned char *)(StringConstCast + 16);
            v1656 = (unsigned char *)(StringConstCast + 17);
            v1657 = "PRIMARY KEY";
            goto LABEL_1699;
          case 514:
            int v643 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            *(void *)uint64_t StringConstCast = 0x800000171;
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(v12 - 9);
            *(void *)(StringConstCast + 112) = *(v11 - 8);
            *(void *)(StringConstCast + 72) = *(v11 - 6);
            *(void *)(StringConstCast + 64) = *(v11 - 4);
            *(void *)(StringConstCast + 8errstart(20, 0) = *(v11 - 3);
            *(void *)(StringConstCast + 8_Block_object_dispose(&a9, 8) = 0;
            *(void *)(StringConstCast + 96) = *(v11 - 2);
            *(void *)(StringConstCast + 12errstart(20, 0) = *(v11 - 1);
            uint64_t v1653 = *(unsigned int *)v11;
            uint64_t v1654 = *v12;
            v1655 = (unsigned char *)(StringConstCast + 16);
            v1656 = (unsigned char *)(StringConstCast + 17);
            v1657 = "EXCLUDE";
LABEL_1699:
            processCASbits(v1653, v1654, (size_t)v1657, v1655, v1656, 0, 0);
            int v26 = v643;
            break;
          case 515:
            int v272 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0xB0uLL);
            *(void *)uint64_t StringConstCast = 0x900000171;
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(v12 - 10);
            *(void *)(StringConstCast + 12_Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(StringConstCast + 136) = *(v11 - 7);
            *(void *)(StringConstCast + 144) = *(v11 - 3);
            *(unsigned char *)(StringConstCast + 152) = *((_DWORD *)v11 - 4);
            *(unsigned char *)(StringConstCast + 153) = BYTE1(*((_DWORD *)v11 - 2));
            *(unsigned char *)(StringConstCast + 154) = *((_DWORD *)v11 - 2);
            uint64_t v273 = *(unsigned int *)v11;
            uint64_t v274 = *v12;
            uint64_t v278 = (unsigned char *)(StringConstCast + 16);
            uint64_t v279 = (unsigned char *)(StringConstCast + 17);
            uint64_t v275 = (unsigned char *)(StringConstCast + 172);
            uint64_t v277 = "FOREIGN KEY";
            uint64_t v276 = 0;
LABEL_499:
            processCASbits(v273, v274, (size_t)v277, v278, v279, v275, v276);
            int v26 = v272;
            *(unsigned char *)(StringConstCast + 173) = *(unsigned char *)(StringConstCast + 172) ^ 1;
            break;
          case 525:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x66;
            break;
          case 526:
            base_yyparse_cold_18();
          case 527:
          case 528:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x73;
            break;
          case 531:
            uint64_t v397 = *(v11 - 2);
            goto LABEL_1440;
          case 532:
            uint64_t v397 = *(v11 - 5);
            uint64_t v129 = *(v11 - 1);
            goto LABEL_1441;
          case 535:
            int v290 = *(_DWORD *)v11;
            int v291 = 97;
            goto LABEL_1046;
          case 536:
            uint64_t StringConstCast = *(unsigned __int8 *)v11 | 0x6100 | StringConstCast & 0xFFFFFFFF00000000;
            break;
          case 537:
            int v290 = *((_DWORD *)v11 - 2);
            int v291 = *(unsigned __int8 *)v11;
            goto LABEL_1046;
          case 538:
            int v290 = *(_DWORD *)v11;
            int v291 = *((unsigned __int8 *)v11 - 8);
LABEL_1046:
            uint64_t v36 = v291 | (v290 << 8);
            goto LABEL_1771;
          case 539:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x6161;
            break;
          case 540:
          case 541:
          case 1261:
          case 2311:
          case 2313:
          case 2314:
            uint64_t v36 = *(unsigned int *)v11;
            goto LABEL_1771;
          case 543:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x72;
            break;
          case 544:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x63;
            break;
          case 545:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x6E;
            break;
          case 551:
            int v1900 = v26;
            unint64_t v1901 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1900;
            uint64_t StringConstCast = v1901;
            *(_DWORD *)unint64_t v1901 = 393;
            *(void *)(v1901 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v1901 + 16) = *(v11 - 1);
            *(_DWORD *)(v1901 + 24) = *(v12 - 5);
            break;
          case 554:
            int v1903 = v26;
            unint64_t v1837 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1903;
            uint64_t StringConstCast = v1837;
            *(_DWORD *)unint64_t v1837 = 392;
            *(void *)(v1837 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v1837 + 16) = 0;
            goto LABEL_1761;
          case 555:
            int v1836 = v26;
            unint64_t v1837 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1836;
            uint64_t StringConstCast = v1837;
            *(_DWORD *)unint64_t v1837 = 392;
            *(void *)(v1837 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v1837 + 16) = *(v11 - 2);
LABEL_1761:
            *(void *)(v1837 + 24) = *(v11 - 1);
            *(void *)(v1837 + 32) = *v11;
            *(_DWORD *)(v1837 + 4errstart(20, 0) = *(v12 - 2);
            break;
          case 556:
            int v1345 = v26;
            unint64_t v1346 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1345;
            uint64_t StringConstCast = v1346;
            *(_DWORD *)unint64_t v1346 = 392;
            *(void *)(v1346 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v1346 + 16) = *(v11 - 3);
            *(void *)(v1346 + 24) = *(v11 - 1);
            *(void *)(v1346 + 32) = *v11;
            *(_DWORD *)(v1346 + 4errstart(20, 0) = *(v12 - 4);
            break;
          case 562:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 3;
            break;
          case 571:
            int v1807 = v26;
            unint64_t v1808 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1807;
            uint64_t StringConstCast = v1808;
            *(_DWORD *)unint64_t v1808 = 342;
            *(void *)(v1808 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(void *)(v1808 + 16) = *(v11 - 4);
            *(void *)(v1808 + 24) = *(v11 - 2);
            *(void *)(v1808 + 32) = *v11;
            *(void *)(v1808 + 4errstart(20, 0) = 0;
            *(unsigned char *)(v1808 + 4_Block_object_dispose(&a9, 8) = 0;
            break;
          case 572:
            int v1282 = v26;
            unint64_t v1283 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1282;
            uint64_t StringConstCast = v1283;
            *(_DWORD *)unint64_t v1283 = 342;
            *(void *)(v1283 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(void *)(v1283 + 16) = *(v11 - 4);
            *(void *)(v1283 + 24) = *(v11 - 2);
            *(void *)(v1283 + 32) = *v11;
            *(void *)(v1283 + 4errstart(20, 0) = 0;
            *(unsigned char *)(v1283 + 4_Block_object_dispose(&a9, 8) = 1;
            break;
          case 573:
            int v337 = v26;
            unint64_t v338 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v337;
            uint64_t StringConstCast = v338;
            *(_DWORD *)unint64_t v338 = 345;
            *(void *)(v338 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(unsigned char *)(v338 + 2errstart(20, 0) = 0;
            goto LABEL_1470;
          case 574:
            int v1686 = v26;
            unint64_t v338 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1686;
            uint64_t StringConstCast = v338;
            *(_DWORD *)unint64_t v338 = 345;
            *(void *)(v338 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(unsigned char *)(v338 + 2errstart(20, 0) = 1;
LABEL_1470:
            *(_DWORD *)(v338 + 16) = *(_DWORD *)v11;
            break;
          case 575:
            int v258 = v26;
            unint64_t v259 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v258;
            uint64_t StringConstCast = v259;
            *(_DWORD *)unint64_t v259 = 270;
            *(void *)(v259 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v259 + 16) = *(v11 - 3);
            *(_DWORD *)(v259 + 24) = 39;
            *(_WORD *)(v259 + 2_Block_object_dispose(&a9, 8) = 0;
            int v260 = *((_DWORD *)v11 - 10);
            goto LABEL_622;
          case 576:
            int v580 = v26;
            unint64_t v581 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v580;
            uint64_t StringConstCast = v581;
            *(_DWORD *)unint64_t v581 = 270;
            *(void *)(v581 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v581 + 16) = *(v11 - 3);
            *(_DWORD *)(v581 + 24) = 39;
            *(_WORD *)(v581 + 2_Block_object_dispose(&a9, 8) = 256;
            int v260 = *((_DWORD *)v11 - 16);
            goto LABEL_622;
          case 577:
            int v985 = v26;
            unint64_t v986 = MemoryContextAllocZeroAligned(*v2065, 0x48uLL);
            int v26 = v985;
            uint64_t StringConstCast = v986;
            *(_DWORD *)unint64_t v986 = 153;
            *(void *)(v986 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(void *)(v986 + 16) = *(v11 - 4);
            *(void *)(v986 + 24) = *(v11 - 3);
            *(void *)(v986 + 32) = *(v11 - 2);
            *(_DWORD *)(v986 + 4errstart(20, 0) = *((_DWORD *)v11 - 2);
            goto LABEL_1701;
          case 581:
            int v733 = v26;
            unint64_t v734 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v733;
            uint64_t StringConstCast = v734;
            *(_DWORD *)unint64_t v734 = 270;
            *(void *)(v734 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v734 + 16) = *(v11 - 3);
            *(_DWORD *)(v734 + 24) = 23;
            *(_WORD *)(v734 + 2_Block_object_dispose(&a9, 8) = 0;
            int v260 = *((_DWORD *)v11 - 12);
            goto LABEL_622;
          case 582:
            int v364 = v26;
            unint64_t v365 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v364;
            uint64_t StringConstCast = v365;
            *(_DWORD *)unint64_t v365 = 270;
            *(void *)(v365 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v365 + 16) = *(v11 - 3);
            *(_DWORD *)(v365 + 24) = 23;
            *(_WORD *)(v365 + 2_Block_object_dispose(&a9, 8) = 256;
            int v260 = *((_DWORD *)v11 - 18);
LABEL_622:
            *(unsigned char *)(*(void *)(*(v11 - 3) + 8) + 33) = v260;
            *(unsigned char *)(*(v11 - 3) + 64) = *(unsigned char *)v11 ^ 1;
            break;
          case 583:
            int v1858 = v26;
            unint64_t v986 = MemoryContextAllocZeroAligned(*v2065, 0x48uLL);
            int v26 = v1858;
            uint64_t StringConstCast = v986;
            *(_DWORD *)unint64_t v986 = 153;
            *(void *)(v986 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v986 + 16) = *(v11 - 3);
            *(void *)(v986 + 24) = *(v11 - 2);
            *(void *)(v986 + 32) = *(v11 - 1);
            *(_DWORD *)(v986 + 4errstart(20, 0) = 0;
LABEL_1701:
            *(void *)(v986 + 4_Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v986 + 56) = 0;
            *(unsigned char *)(v986 + 64) = 0;
            break;
          case 586:
            int v386 = v26;
            unint64_t v387 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v386;
            uint64_t StringConstCast = v387;
            *(_DWORD *)unint64_t v387 = 330;
            *(unsigned char *)(v387 + 4) = *((unsigned char *)v11 - 16);
            *(void *)(v387 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(unsigned char *)(v387 + 5) = *(unsigned char *)v11 ^ 1;
            break;
          case 587:
            int v860 = v26;
            unint64_t v861 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v860;
            uint64_t StringConstCast = v861;
            *(_DWORD *)unint64_t v861 = 271;
            *(unsigned char *)(*(v11 - 1) + 33) = *((_DWORD *)v11 - 6);
            *(void *)(v861 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v861 + 16) = *v11;
            *(_DWORD *)(v861 + 24) = 0;
            *(unsigned char *)(v861 + 29) = 0;
            break;
          case 588:
            int v1465 = v26;
            unint64_t v1466 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1465;
            uint64_t StringConstCast = v1466;
            *(_DWORD *)unint64_t v1466 = 271;
            *(unsigned char *)(*(v11 - 1) + 33) = *((_DWORD *)v11 - 12);
            *(void *)(v1466 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1466 + 16) = *v11;
            *(_DWORD *)(v1466 + 24) = 0;
            *(unsigned char *)(v1466 + 29) = 1;
            break;
          case 589:
            int v1535 = v26;
            unint64_t v1536 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1535;
            uint64_t StringConstCast = v1536;
            *(_DWORD *)unint64_t v1536 = 272;
            *(void *)(v1536 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1536 + 16) = *v11;
            *(unsigned char *)(v1536 + 25) = 0;
            break;
          case 590:
            int v1214 = v26;
            unint64_t v1215 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1214;
            uint64_t StringConstCast = v1215;
            *(_DWORD *)unint64_t v1215 = 272;
            *(void *)(v1215 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1215 + 16) = *v11;
            *(unsigned char *)(v1215 + 25) = 1;
            break;
          case 597:
          case 1192:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "as";
            goto LABEL_1598;
          case 598:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "cache";
            goto LABEL_1598;
          case 599:
            int v32 = v26;
            char v470 = makeInteger(1);
            int v471 = *v12;
            goto LABEL_508;
          case 600:
            int v32 = v26;
            char v470 = makeInteger(0);
            int v471 = *(v12 - 1);
LABEL_508:
            DefEleunint64_t m = makeDefElem((uint64_t)"cycle", (uint64_t)v470, v471);
            goto LABEL_1777;
          case 601:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 2);
            uint64_t v43 = "increment";
            goto LABEL_1598;
          case 602:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "maxvalue";
            goto LABEL_1598;
          case 603:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "minvalue";
            goto LABEL_1598;
          case 604:
            int v45 = *(v12 - 1);
            uint64_t v43 = "maxvalue";
            goto LABEL_1597;
          case 605:
            int v45 = *(v12 - 1);
            uint64_t v43 = "minvalue";
            goto LABEL_1597;
          case 606:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 2);
            uint64_t v43 = "owned_by";
            goto LABEL_1598;
          case 607:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 2);
            uint64_t v43 = "sequence_name";
            goto LABEL_1598;
          case 608:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 2);
            uint64_t v43 = "start";
            goto LABEL_1598;
          case 613:
          case 614:
            int v32 = v26;
            DefEleunint64_t m = makeFloat(*v11);
            goto LABEL_1777;
          case 615:
            int v1582 = v26;
            unint64_t Float = makeFloat(*v11);
            uint64_t StringConstCast = Float;
            v1584 = *(unsigned char **)(Float + 8);
            if (*v1584 == 43) {
              ++v1584;
            }
            if (*v1584 == 45) {
              *(void *)(Float + _Block_object_dispose(&a9, 8) = v1584 + 1;
            }
            else {
              *(void *)(Float + _Block_object_dispose(&a9, 8) = psprintf("-%s", (uint64_t)v2, v3, v4, v5, v6, v7, v8, (size_t)v1584);
            }
            int v26 = v1582;
            break;
          case 616:
            int v32 = v26;
            DefEleunint64_t m = (unint64_t)makeInteger(*(_DWORD *)v11);
            goto LABEL_1777;
          case 619:
            int v1150 = v26;
            unint64_t v1151 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1150;
            uint64_t StringConstCast = v1151;
            *(_DWORD *)unint64_t v1151 = 325;
            *(unsigned char *)(v1151 + 16) = *((unsigned char *)v11 - 32);
            *(void *)(v1151 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v1151 + 24) = 0;
            break;
          case 620:
            int v610 = v26;
            unint64_t v611 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v610;
            uint64_t StringConstCast = v611;
            *(_DWORD *)unint64_t v611 = 277;
            *(unsigned char *)(v611 + 4) = *((unsigned char *)v11 - 64);
            *(void *)(v611 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v611 + 16) = *(v11 - 2);
            *(void *)(v611 + 24) = *(v11 - 1);
            *(void *)(v611 + 32) = *v11;
            *(unsigned char *)(v611 + 4errstart(20, 0) = *((unsigned char *)v11 - 56);
            break;
          case 623:
          case 810:
          case 851:
          case 926:
          case 928:
          case 1197:
          case 1227:
            int v32 = v26;
            unint64_t v35 = makeString(*v11);
            *(double *)&uint64_t v9 = list_make1_impl(226, v35);
            goto LABEL_1777;
          case 624:
          case 927:
            int v32 = v26;
            unint64_t v135 = makeString(*(v11 - 1));
            DefEleunint64_t m = lcons(v135, *v11);
            goto LABEL_1777;
          case 631:
            int v1745 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 249;
            *(_DWORD *)(StringConstCast + 16) = 21;
            unint64_t v1746 = makeString(*(v11 - 1));
            *(double *)&uint64_t v9 = list_make1_impl(226, v1746);
            int v26 = v1745;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1747;
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(_DWORD *)v11;
            *(_WORD *)(StringConstCast + 24) = 0;
            break;
          case 632:
            int v225 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 249;
            *(_DWORD *)(StringConstCast + 16) = 21;
            unint64_t v226 = makeString(*(v11 - 1));
            *(double *)&uint64_t v9 = list_make1_impl(226, v226);
            int v26 = v225;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v227;
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(_DWORD *)v11;
            *(_WORD *)(StringConstCast + 24) = 1;
            break;
          case 635:
            int v424 = v26;
            unint64_t v425 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v424;
            uint64_t StringConstCast = v425;
            *(_DWORD *)unint64_t v425 = 298;
            *(void *)(v425 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v425 + 16) = *(v11 - 3);
            *(void *)(v425 + 24) = *(v11 - 1);
            *(void *)(v425 + 32) = *v11;
            break;
          case 638:
            int v1661 = v26;
            unint64_t v1662 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1661;
            uint64_t StringConstCast = v1662;
            *(_DWORD *)unint64_t v1662 = 299;
            *(void *)(v1662 + _Block_object_dispose(&a9, 8) = *v11;
            *(unsigned char *)(v1662 + 16) = 0;
            break;
          case 639:
            int v1776 = v26;
            unint64_t v1777 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1776;
            uint64_t StringConstCast = v1777;
            *(_DWORD *)unint64_t v1777 = 299;
            *(void *)(v1777 + _Block_object_dispose(&a9, 8) = *v11;
            *(unsigned char *)(v1777 + 16) = 1;
            break;
          case 640:
            int v1817 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1817;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 325;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(unsigned char *)(v70 + 16) = 0;
            goto LABEL_1722;
          case 641:
            int v1821 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1821;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 325;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(unsigned char *)(v70 + 16) = 1;
            goto LABEL_1722;
          case 644:
            int v32 = v26;
            unint64_t v567 = makeString(*v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"schema", v567, *(v12 - 1));
            goto LABEL_1777;
          case 645:
          case 651:
            int v32 = v26;
            unint64_t v170 = makeString(*v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"new_version", v170, *(v12 - 1));
            goto LABEL_1777;
          case 646:
            base_yyparse_cold_19();
          case 647:
            int v32 = v26;
            v1809 = makeInteger(1);
            DefEleunint64_t m = makeDefElem((uint64_t)"cascade", (uint64_t)v1809, *v12);
            goto LABEL_1777;
          case 648:
            int v1467 = v26;
            unint64_t v1468 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1467;
            uint64_t StringConstCast = v1468;
            *(_DWORD *)unint64_t v1468 = 326;
            *(void *)(v1468 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v1468 + 16) = *v11;
            break;
          case 652:
            int v263 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 327;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(StringConstCast + 16) = *((unsigned int *)v11 - 6);
            goto LABEL_1713;
          case 653:
            int v1863 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1863;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v335 = *((_DWORD *)v11 - 4);
            int v336 = 1;
            goto LABEL_1721;
          case 654:
            int v263 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 327;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 7);
            *(_DWORD *)(StringConstCast + 16) = *((_DWORD *)v11 - 12);
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = 5;
            *(double *)&uint64_t v9 = list_make2_impl(226, *(v11 - 3), *(v11 - 1));
            goto LABEL_1736;
          case 655:
            int v699 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v699;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v335 = *((_DWORD *)v11 - 4);
            int v336 = 7;
            goto LABEL_1721;
          case 656:
            int v334 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v334;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v335 = *((_DWORD *)v11 - 4);
            int v336 = 8;
            goto LABEL_1721;
          case 657:
            int v1869 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1869;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v335 = *((_DWORD *)v11 - 4);
            int v336 = 12;
            goto LABEL_1721;
          case 658:
            int v1622 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1622;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v335 = *((_DWORD *)v11 - 4);
            int v336 = 19;
            goto LABEL_1721;
          case 659:
            int v263 = v26;
            unint64_t v264 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = v264;
            *(_DWORD *)unint64_t v264 = 327;
            *(void *)(v264 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            int v265 = *((_DWORD *)v11 - 6);
            int v266 = 21;
            goto LABEL_1712;
          case 660:
            int v339 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v339;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v335 = *((_DWORD *)v11 - 4);
            int v336 = 25;
            goto LABEL_1721;
          case 661:
            int v263 = v26;
            unint64_t v1672 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = v1672;
            *(_DWORD *)unint64_t v1672 = 327;
            *(void *)(v1672 + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            int v1673 = *((_DWORD *)v11 - 10);
            int v1674 = 24;
            goto LABEL_1735;
          case 662:
            int v263 = v26;
            unint64_t v1672 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = v1672;
            *(_DWORD *)unint64_t v1672 = 327;
            *(void *)(v1672 + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            int v1673 = *((_DWORD *)v11 - 10);
            int v1674 = 26;
LABEL_1735:
            *(_DWORD *)(v1672 + 16) = v1673;
            *(_DWORD *)(v1672 + 2errstart(20, 0) = v1674;
            unint64_t v1880 = makeString(*v11);
            unint64_t v1621 = lcons(v1880, *(v11 - 2));
            goto LABEL_1736;
          case 663:
            int v918 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v918;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v335 = *((_DWORD *)v11 - 4);
            int v336 = 28;
            goto LABEL_1721;
          case 664:
            int v472 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v472;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(_DWORD *)(v70 + 16) = *((_DWORD *)v11 - 4);
            *(_DWORD *)(v70 + 2errstart(20, 0) = 32;
            goto LABEL_1722;
          case 665:
            int v263 = v26;
            unint64_t v264 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = v264;
            *(_DWORD *)unint64_t v264 = 327;
            *(void *)(v264 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v265 = *((_DWORD *)v11 - 4);
            int v266 = 34;
            goto LABEL_1712;
          case 666:
            int v263 = v26;
            unint64_t v264 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = v264;
            *(_DWORD *)unint64_t v264 = 327;
            *(void *)(v264 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            int v265 = *((_DWORD *)v11 - 6);
            int v266 = 14;
            goto LABEL_1712;
          case 667:
            int v1735 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1735;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v335 = *((_DWORD *)v11 - 4);
            int v336 = 39;
            goto LABEL_1721;
          case 668:
            int v1553 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1553;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            int v335 = *((_DWORD *)v11 - 8);
            int v336 = 45;
            goto LABEL_1721;
          case 669:
            int v987 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v987;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            int v335 = *((_DWORD *)v11 - 8);
            int v336 = 44;
            goto LABEL_1721;
          case 670:
            int v672 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v672;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            int v335 = *((_DWORD *)v11 - 8);
            int v336 = 46;
            goto LABEL_1721;
          case 671:
            int v568 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v568;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            int v335 = *((_DWORD *)v11 - 8);
            int v336 = 43;
            goto LABEL_1721;
          case 672:
            int v490 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v490;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v335 = *((_DWORD *)v11 - 4);
            int v336 = 35;
            goto LABEL_1721;
          case 673:
            int v473 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v473;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v335 = *((_DWORD *)v11 - 4);
            int v336 = 49;
            goto LABEL_1721;
          case 674:
            int v498 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v498;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            int v335 = *((_DWORD *)v11 - 6);
            int v336 = 23;
            goto LABEL_1721;
          case 675:
            int v593 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v593;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            int v335 = *((_DWORD *)v11 - 6);
            int v336 = 18;
            goto LABEL_1721;
          case 676:
            int v263 = v26;
            unint64_t v264 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = v264;
            *(_DWORD *)unint64_t v264 = 327;
            *(void *)(v264 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            int v265 = *((_DWORD *)v11 - 8);
            int v266 = 16;
            goto LABEL_1712;
          case 677:
            int v263 = v26;
            unint64_t v264 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = v264;
            *(_DWORD *)unint64_t v264 = 327;
            *(void *)(v264 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v265 = *((_DWORD *)v11 - 4);
            int v266 = 17;
LABEL_1712:
            *(_DWORD *)(v264 + 16) = v265;
            *(_DWORD *)(v264 + 2errstart(20, 0) = v266;
LABEL_1713:
            unint64_t v1621 = makeString(*v11);
LABEL_1736:
            int v26 = v263;
            *(void *)(StringConstCast + 24) = v1621;
            break;
          case 678:
            int v2060 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 327;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(_DWORD *)(StringConstCast + 16) = *((_DWORD *)v11 - 10);
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = 41;
            uint64_t v1696 = v24;
            uint64_t v1697 = *(v11 - 2);
            unint64_t v1698 = makeString(*v11);
            uint64_t v1699 = v1697;
            uint64_t v24 = v1696;
            *(double *)&uint64_t v9 = list_make2_impl(226, v1699, v1698);
            int v26 = v2060;
            *(void *)(StringConstCast + 24) = v1700;
            break;
          case 679:
            int v1870 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1870;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 327;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v335 = *((_DWORD *)v11 - 4);
            int v336 = 47;
LABEL_1721:
            *(_DWORD *)(v70 + 16) = v335;
            *(_DWORD *)(v70 + 2errstart(20, 0) = v336;
            goto LABEL_1722;
          case 680:
            int v340 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v340;
            uint64_t StringConstCast = v70;
            int v341 = 313;
            goto LABEL_412;
          case 681:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "handler";
            goto LABEL_1598;
          case 682:
            int v45 = *(v12 - 1);
            uint64_t v43 = "handler";
            goto LABEL_1597;
          case 683:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "validator";
            goto LABEL_1598;
          case 684:
            int v45 = *(v12 - 1);
            uint64_t v43 = "validator";
            goto LABEL_1597;
          case 689:
            int v438 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v438;
            uint64_t StringConstCast = v70;
            int v341 = 314;
LABEL_412:
            *(_DWORD *)unint64_t v70 = v341;
            uint64_t v439 = *(v11 - 2);
            goto LABEL_1662;
          case 690:
            int v342 = v26;
            unint64_t v343 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v342;
            uint64_t StringConstCast = v343;
            *(_DWORD *)unint64_t v343 = 314;
            *(void *)(v343 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v343 + 16) = *v11;
            *(void *)(v343 + 24) = 0;
            break;
          case 699:
            uint64_t StringConstCast = *v11;
            *(_DWORD *)(*v11 + 32) = 1;
            break;
          case 700:
            uint64_t StringConstCast = *v11;
            *(_DWORD *)(*v11 + 32) = 2;
            break;
          case 701:
            int v32 = v26;
            DefEleunint64_t m = makeDefElemExtended(0, *v11, 0, 3, *v12, *(double *)&v9);
            goto LABEL_1777;
          case 705:
            int v1887 = v26;
            unint64_t v1888 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1887;
            uint64_t StringConstCast = v1888;
            *(_DWORD *)unint64_t v1888 = 315;
            *(void *)(v1888 + _Block_object_dispose(&a9, 8) = *(v11 - 7);
            *(void *)(v1888 + 16) = *(v11 - 6);
            *(void *)(v1888 + 24) = *(v11 - 5);
            *(void *)(v1888 + 32) = *(v11 - 1);
            *(void *)(v1888 + 4_Block_object_dispose(&a9, 8) = *v11;
            *(unsigned char *)(v1888 + 4errstart(20, 0) = 0;
            break;
          case 706:
            int v245 = v26;
            unint64_t v246 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v245;
            uint64_t StringConstCast = v246;
            *(_DWORD *)unint64_t v246 = 315;
            *(void *)(v246 + _Block_object_dispose(&a9, 8) = *(v11 - 7);
            *(void *)(v246 + 16) = *(v11 - 6);
            *(void *)(v246 + 24) = *(v11 - 5);
            *(void *)(v246 + 32) = *(v11 - 1);
            *(void *)(v246 + 4_Block_object_dispose(&a9, 8) = *v11;
            *(unsigned char *)(v246 + 4errstart(20, 0) = 1;
            break;
          case 713:
            int v483 = v26;
            unint64_t v347 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v483;
            uint64_t StringConstCast = v347;
            *(_DWORD *)unint64_t v347 = 316;
            *(void *)(v347 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v347 + 16) = *(v11 - 1);
            goto LABEL_1593;
          case 714:
            int v346 = v26;
            unint64_t v347 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v346;
            uint64_t StringConstCast = v347;
            *(_DWORD *)unint64_t v347 = 316;
            *(void *)(v347 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v347 + 16) = *v11;
            goto LABEL_1594;
          case 715:
            int v355 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v355;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 316;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            goto LABEL_1722;
          case 716:
            int v527 = v26;
            unint64_t v528 = MemoryContextAllocZeroAligned(*v2065, 0x78uLL);
            int v26 = v527;
            uint64_t StringConstCast = v528;
            *(_DWORD *)unint64_t v528 = 323;
            *(unsigned char *)(*(v11 - 7) + 33) = 112;
            *(void *)(v528 + _Block_object_dispose(&a9, 8) = *(v11 - 7);
            *(void *)(v528 + 16) = *(v11 - 5);
            *(void *)(v528 + 24) = *(v11 - 3);
            *(void *)(v528 + 8errstart(20, 0) = 0;
            *(unsigned char *)(v528 + 96) = 0;
            *(_DWORD *)(v528 + 72) = 0;
            *(void *)(v528 + 56) = 0;
            *(void *)(v528 + 64) = 0;
            *(void *)(v528 + 4_Block_object_dispose(&a9, 8) = 0;
            goto LABEL_1030;
          case 717:
            int v1258 = v26;
            unint64_t v528 = MemoryContextAllocZeroAligned(*v2065, 0x78uLL);
            int v26 = v1258;
            uint64_t StringConstCast = v528;
            *(_DWORD *)unint64_t v528 = 323;
            *(unsigned char *)(*(v11 - 7) + 33) = 112;
            *(void *)(v528 + _Block_object_dispose(&a9, 8) = *(v11 - 7);
            *(void *)(v528 + 16) = *(v11 - 5);
            *(void *)(v528 + 24) = *(v11 - 3);
            *(void *)(v528 + 8errstart(20, 0) = 0;
            *(_DWORD *)(v528 + 72) = 0;
            *(void *)(v528 + 56) = 0;
            *(void *)(v528 + 64) = 0;
            *(void *)(v528 + 4_Block_object_dispose(&a9, 8) = 0;
            *(unsigned char *)(v528 + 96) = 1;
LABEL_1030:
            *(void *)(v528 + 104) = *(v11 - 1);
            *(void *)(v528 + 112) = *v11;
            break;
          case 718:
            int v1849 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x78uLL);
            *(_DWORD *)uint64_t StringConstCast = 323;
            *(unsigned char *)(*(v11 - 8) + 33) = 112;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 8);
            *(double *)&uint64_t v9 = list_make1_impl(226, *(v11 - 5));
            int v26 = v1849;
            *(void *)(StringConstCast + 24) = v1850;
            *(void *)(StringConstCast + 16) = *(v11 - 4);
            *(void *)(StringConstCast + 32) = *(v11 - 3);
            *(void *)(StringConstCast + 8errstart(20, 0) = 0;
            *(unsigned char *)(StringConstCast + 96) = 0;
            *(_DWORD *)(StringConstCast + 72) = 0;
            *(void *)(StringConstCast + 56) = 0;
            *(void *)(StringConstCast + 64) = 0;
            *(void *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = 0;
            goto LABEL_1687;
          case 719:
            int v659 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x78uLL);
            *(_DWORD *)uint64_t StringConstCast = 323;
            *(unsigned char *)(*(v11 - 8) + 33) = 112;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 8);
            *(double *)&uint64_t v9 = list_make1_impl(226, *(v11 - 5));
            int v26 = v659;
            *(void *)(StringConstCast + 24) = v660;
            *(void *)(StringConstCast + 16) = *(v11 - 4);
            *(void *)(StringConstCast + 32) = *(v11 - 3);
            *(void *)(StringConstCast + 8errstart(20, 0) = 0;
            *(_DWORD *)(StringConstCast + 72) = 0;
            *(void *)(StringConstCast + 56) = 0;
            *(void *)(StringConstCast + 64) = 0;
            *(void *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = 0;
            *(unsigned char *)(StringConstCast + 96) = 1;
LABEL_1687:
            *(void *)(StringConstCast + 104) = *(v11 - 1);
            *(void *)(StringConstCast + 112) = *v11;
            break;
          case 720:
            int v1889 = v26;
            unint64_t v1890 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1889;
            uint64_t StringConstCast = v1890;
            *(_DWORD *)unint64_t v1890 = 237;
            *(void *)(v1890 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1890 + 16) = *v11;
            *(_DWORD *)(v1890 + 24) = 18;
            *(unsigned char *)(v1890 + 2_Block_object_dispose(&a9, 8) = 0;
            break;
          case 721:
            int v1709 = v26;
            unint64_t v1710 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1709;
            uint64_t StringConstCast = v1710;
            *(_DWORD *)unint64_t v1710 = 237;
            *(void *)(v1710 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1710 + 16) = *v11;
            *(_DWORD *)(v1710 + 24) = 18;
            *(unsigned char *)(v1710 + 2_Block_object_dispose(&a9, 8) = 1;
            break;
          case 722:
            int v1526 = v26;
            unint64_t v1527 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1526;
            uint64_t StringConstCast = v1527;
            *(_DWORD *)unint64_t v1527 = 324;
            *(void *)(v1527 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v1527 + 16) = *(v11 - 7);
            *(void *)(v1527 + 24) = *(v11 - 1);
            *(_DWORD *)(v1527 + 32) = *(_DWORD *)*(v11 - 6);
            *(void *)(v1527 + 4errstart(20, 0) = *(void *)(*(v11 - 6) + 8);
            *(void *)(v1527 + 4_Block_object_dispose(&a9, 8) = *v11;
            break;
          case 725:
            int v673 = v26;
            uint64_t v674 = palloc(0x10uLL);
            int v26 = v673;
            uint64_t StringConstCast = v674;
            *(_DWORD *)uint64_t v674 = *((_DWORD *)v11 - 6);
            *(void *)(v674 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            break;
          case 726:
            int v1871 = v26;
            uint64_t v1872 = palloc(0x10uLL);
            int v26 = v1871;
            uint64_t StringConstCast = v1872;
            *(_DWORD *)uint64_t v1872 = 0;
            *(void *)(v1872 + _Block_object_dispose(&a9, 8) = 0;
            break;
          case 727:
            int v1562 = v26;
            unint64_t v1563 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1562;
            uint64_t StringConstCast = v1563;
            *(_DWORD *)unint64_t v1563 = 317;
            *(void *)(v1563 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v1563 + 16) = *(v11 - 1);
            *(void *)(v1563 + 32) = *v11;
            *(unsigned char *)(v1563 + 24) = 0;
            break;
          case 728:
            int v846 = v26;
            unint64_t v475 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v846;
            uint64_t StringConstCast = v475;
            *(_DWORD *)unint64_t v475 = 317;
            *(void *)(v475 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v475 + 16) = *(v11 - 1);
            *(void *)(v475 + 32) = *v11;
            goto LABEL_690;
          case 729:
          case 740:
          case 742:
          case 746:
          case 761:
          case 768:
          case 777:
          case 795:
          case 839:
          case 841:
          case 842:
          case 849:
          case 869:
          case 872:
          case 981:
          case 992:
          case 1008:
          case 1035:
          case 1068:
          case 1069:
          case 2322:
          case 2325:
            uint64_t StringConstCast = *v11;
            break;
          case 730:
            uint64_t v1306 = v24;
            int v1307 = *v12;
            int v1308 = v26;
            unint64_t v1309 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1308;
            uint64_t StringConstCast = v1309;
            uint64_t v9 = 0x100000186;
            *(void *)unint64_t v1309 = 0x100000186;
            *(_DWORD *)(v1309 + 16) = v1307;
            uint64_t v24 = v1306;
            break;
          case 731:
            int v1818 = v26;
            unint64_t v1819 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1818;
            uint64_t StringConstCast = v1819;
            *(_DWORD *)unint64_t v1819 = 319;
            *(void *)(v1819 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v1819 + 16) = *v11;
            *(unsigned char *)(v1819 + 24) = 0;
            break;
          case 732:
            int v474 = v26;
            unint64_t v475 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v474;
            uint64_t StringConstCast = v475;
            *(_DWORD *)unint64_t v475 = 319;
            *(void *)(v475 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v475 + 16) = *v11;
LABEL_690:
            *(unsigned char *)(v475 + 24) = 1;
            break;
          case 733:
            int v1831 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1831;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 318;
            uint64_t v439 = *(v11 - 3);
LABEL_1662:
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = v439;
            *(void *)(v70 + 16) = *(v11 - 1);
            goto LABEL_1722;
          case 734:
            int v1528 = v26;
            unint64_t v1529 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            int v26 = v1528;
            uint64_t StringConstCast = v1529;
            *(_DWORD *)unint64_t v1529 = 333;
            *(void *)(v1529 + _Block_object_dispose(&a9, 8) = *(v11 - 7);
            *(void *)(v1529 + 16) = *(v11 - 5);
            *(unsigned char *)(v1529 + 32) = *((unsigned char *)v11 - 32);
            *(void *)(v1529 + 24) = *(v11 - 3);
            *(void *)(v1529 + 4errstart(20, 0) = *(v11 - 2);
            *(void *)(v1529 + 4_Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1529 + 56) = *v11;
            break;
          case 735:
            int v1032 = v26;
            unint64_t v1033 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1032;
            uint64_t StringConstCast = v1033;
            *(_DWORD *)unint64_t v1033 = 334;
            *(void *)(v1033 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(void *)(v1033 + 16) = *(v11 - 3);
            *(void *)(v1033 + 24) = *(v11 - 2);
            *(void *)(v1033 + 32) = *(v11 - 1);
            *(void *)(v1033 + 4errstart(20, 0) = *v11;
            break;
          case 736:
          case 738:
          case 784:
          case 834:
          case 845:
            uint64_t StringConstCast = *(v11 - 1);
            break;
          case 737:
          case 739:
          case 743:
          case 769:
          case 785:
          case 790:
          case 796:
          case 850:
          case 870:
          case 871:
          case 873:
          case 982:
          case 993:
          case 1009:
          case 1036:
          case 1037:
            uint64_t StringConstCast = 0;
            break;
          case 741:
            int v32 = v26;
            unint64_t v735 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(void *)unint64_t v735 = 0x300000186;
            *(_DWORD *)(v735 + 16) = -1;
            *(double *)&uint64_t v9 = list_make1_impl(226, v735);
            goto LABEL_1777;
          case 744:
            int v2032 = v26;
            uint64_t v399 = v24;
            uint64_t v400 = (const char *)*v11;
            if (!strcmp((const char *)*v11, "permissive"))
            {
              uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            }
            else
            {
              if (strcmp(v400, "restrictive")) {
                base_yyparse_cold_20((size_t *)v11);
              }
              StringConstCast &= 0xFFFFFFFFFFFFFF00;
            }
            goto LABEL_1827;
          case 745:
          case 773:
          case 775:
          case 782:
          case 857:
          case 867:
          case 934:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            break;
          case 747:
          case 748:
            uint64_t StringConstCast = (uint64_t)"all";
            break;
          case 749:
            uint64_t StringConstCast = (uint64_t)"select";
            break;
          case 750:
            uint64_t StringConstCast = (uint64_t)"insert";
            break;
          case 751:
            uint64_t StringConstCast = (uint64_t)"update";
            break;
          case 752:
            uint64_t StringConstCast = (uint64_t)"delete";
            break;
          case 753:
            int v1152 = v26;
            unint64_t v1153 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1152;
            uint64_t StringConstCast = v1153;
            *(_DWORD *)unint64_t v1153 = 336;
            *(void *)(v1153 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v1153 + 16) = *v11;
            *(unsigned char *)(v1153 + 24) = *((unsigned char *)v11 - 16);
            break;
          case 754:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 0x69;
            break;
          case 755:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 0x74;
            break;
          case 756:
            int v366 = v26;
            unint64_t v367 = MemoryContextAllocZeroAligned(*v2065, 0x60uLL);
            int v26 = v366;
            uint64_t StringConstCast = v367;
            *(_DWORD *)unint64_t v367 = 276;
            *(void *)(v367 + _Block_object_dispose(&a9, 8) = *(v11 - 13);
            *(void *)(v367 + 16) = *(v11 - 9);
            *(void *)(v367 + 24) = *(v11 - 3);
            *(void *)(v367 + 32) = *(v11 - 1);
            *(unsigned char *)(v367 + 4errstart(20, 0) = *((unsigned char *)v11 - 56);
            *(_WORD *)(v367 + 42) = *((_DWORD *)v11 - 24);
            *(_WORD *)(v367 + 44) = *(_DWORD *)(**(void **)(*(v11 - 11) + 16) + 8);
            *(void *)(v367 + 4_Block_object_dispose(&a9, 8) = *(void *)(*(void *)(*(v11 - 11) + 16) + 8);
            *(void *)(v367 + 56) = *(v11 - 6);
            *(void *)(v367 + 72) = *(v11 - 8);
            *(unsigned char *)(v367 + 64) = 0;
            *(_WORD *)(v367 + 8errstart(20, 0) = 0;
            *(void *)(v367 + 8_Block_object_dispose(&a9, 8) = 0;
            break;
          case 757:
            int v1813 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x60uLL);
            *(_DWORD *)uint64_t StringConstCast = 276;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 16);
            *(void *)(StringConstCast + 16) = *(v11 - 12);
            *(void *)(StringConstCast + 24) = *(v11 - 3);
            *(void *)(StringConstCast + 32) = *(v11 - 1);
            *(unsigned char *)(StringConstCast + 4errstart(20, 0) = 1;
            *(_WORD *)(StringConstCast + 42) = 0;
            *(_WORD *)(StringConstCast + 44) = *(_DWORD *)(**(void **)(*(v11 - 14) + 16) + 8);
            *(void *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = *(void *)(*(void *)(*(v11 - 14) + 16) + 8);
            *(void *)(StringConstCast + 56) = *(v11 - 6);
            *(void *)(StringConstCast + 72) = 0;
            *(unsigned char *)(StringConstCast + 64) = 1;
            processCASbits(*((unsigned int *)v11 - 20), *(v12 - 10), (size_t)"TRIGGER", (unsigned char *)(StringConstCast + 80), (unsigned char *)(StringConstCast + 81), 0, 0);
            int v26 = v1813;
            *(void *)(StringConstCast + 8_Block_object_dispose(&a9, 8) = *(v11 - 11);
            break;
          case 759:
          case 797:
          case 914:
          case 969:
            StringConstCast &= 0xFFFFFFFF00000000;
            break;
          case 760:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x40;
            break;
          case 762:
            int v1623 = v26;
            v1624 = *(void **)(*(v11 - 2) + 16);
            unsigned int v1625 = *(_DWORD *)(*v1624 + 8);
            v1626 = *(void **)(*v11 + 16);
            int v1627 = *(_DWORD *)(*v1626 + 8);
            if ((v1627 & v1625) != 0) {
              scanner_yyerror((size_t)"duplicate trigger events specified", (uint64_t)v2064);
            }
            uint64_t v1628 = v1624[1];
            v2019 = (const void **)v1626[1];
            v2057 = makeInteger(v1627 | v1625);
            uint64_t v1629 = list_concat(v1628, v2019);
            *(double *)&uint64_t v9 = list_make2_impl(226, (uint64_t)v2057, v1629);
            uint64_t StringConstCast = (uint64_t)v1630;
            int v26 = v1623;
            break;
          case 763:
            int v847 = 4;
            goto LABEL_1703;
          case 764:
            int v847 = 8;
            goto LABEL_1703;
          case 765:
            int v847 = 16;
            goto LABEL_1703;
          case 766:
            int v32 = v26;
            uint64_t v394 = makeInteger(16);
            *(double *)&uint64_t v9 = list_make2_impl(226, (uint64_t)v394, *v11);
            goto LABEL_1777;
          case 767:
            int v847 = 32;
LABEL_1703:
            int v32 = v26;
            v1859 = makeInteger(v847);
            *(double *)&uint64_t v9 = list_make2_impl(226, (uint64_t)v1859, 0);
            goto LABEL_1777;
          case 772:
            int v1384 = v26;
            unint64_t v1385 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1384;
            uint64_t StringConstCast = v1385;
            *(_DWORD *)unint64_t v1385 = 391;
            *(void *)(v1385 + _Block_object_dispose(&a9, 8) = *v11;
            *(unsigned char *)(v1385 + 16) = *((unsigned char *)v11 - 24);
            *(unsigned char *)(v1385 + 17) = *((unsigned char *)v11 - 16);
            break;
          case 774:
          case 776:
          case 779:
          case 783:
          case 858:
          case 868:
          case 875:
          case 933:
          case 935:
            StringConstCast &= 0xFFFFFFFFFFFFFF00;
            break;
          case 778:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | *(unsigned __int8 *)v11;
            break;
          case 791:
            int v32 = v26;
            v1658 = psprintf("%d", (uint64_t)v2, v3, v4, v5, v6, v7, v8, *(unsigned int *)v11);
            DefEleunint64_t m = makeString((uint64_t)v1658);
            goto LABEL_1777;
          case 798:
            uint64_t v1564 = (*(_DWORD *)v11 | *((_DWORD *)v11 - 2));
            if ((~v1564 & 9) == 0) {
              base_yyparse_cold_21();
            }
            if ((~v1564 & 3) == 0 || ((*(unsigned char *)v11 | *((unsigned char *)v11 - 8)) & 0xC) == 0xC) {
              base_yyparse_cold_22();
            }
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | v1564;
            break;
          case 799:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 800:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 2;
            break;
          case 801:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 4;
            break;
          case 802:
          case 908:
          case 963:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 8;
            break;
          case 803:
          case 917:
          case 973:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x10;
            break;
          case 804:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x20;
            break;
          case 805:
            int v1718 = v26;
            unint64_t v378 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1718;
            uint64_t StringConstCast = v378;
            *(_DWORD *)unint64_t v378 = 328;
            *(void *)(v378 + _Block_object_dispose(&a9, 8) = *(v11 - 7);
            *(void *)(v378 + 16) = *(v11 - 5);
            *(void *)(v378 + 24) = 0;
            goto LABEL_1503;
          case 806:
            int v1597 = v26;
            unint64_t v378 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1597;
            uint64_t StringConstCast = v378;
            *(_DWORD *)unint64_t v378 = 328;
            *(void *)(v378 + _Block_object_dispose(&a9, 8) = *(v11 - 9);
            *(void *)(v378 + 16) = *(v11 - 7);
            *(void *)(v378 + 24) = *(v11 - 5);
            goto LABEL_1503;
          case 809:
            uint64_t v43 = (const char *)*(v11 - 4);
            uint64_t v44 = *(v11 - 1);
            int v45 = *(v12 - 4);
            goto LABEL_1598;
          case 811:
          case 852:
          case 929:
            uint64_t v55 = v24;
            uint64_t v56 = *(v11 - 2);
            int v57 = v26;
            unint64_t v58 = makeString(*v11);
            uint64_t v59 = v56;
            uint64_t v24 = v55;
            uint64_t v60 = lappend(v59, v58);
            int v26 = v57;
            uint64_t StringConstCast = v60;
            break;
          case 812:
            int v1469 = v26;
            unint64_t v1470 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1469;
            uint64_t StringConstCast = v1470;
            *(_DWORD *)unint64_t v1470 = 329;
            *(void *)(v1470 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(unsigned char *)(v1470 + 16) = *(unsigned char *)v11;
            break;
          case 813:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 0x4F;
            break;
          case 814:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 0x52;
            break;
          case 815:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 0x41;
            break;
          case 816:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 0x44;
            break;
          case 817:
            base_yyparse_cold_23();
          case 818:
            int v261 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v261;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x1000000F8;
            *(void *)unint64_t v198 = 0x1000000F8;
            *(unsigned char *)(v198 + _Block_object_dispose(&a9, 8) = 0;
            *(unsigned char *)(v198 + 41) = *((unsigned char *)v11 - 32);
            *(void *)(v198 + 16) = *(v11 - 2);
            goto LABEL_1494;
          case 819:
            int v1663 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1663;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x1000000F8;
            *(void *)unint64_t v198 = 0x1000000F8;
            *(unsigned char *)(v198 + _Block_object_dispose(&a9, 8) = 1;
            *(unsigned char *)(v198 + 41) = *((unsigned char *)v11 - 24);
            goto LABEL_1601;
          case 820:
            int v1793 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1793;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x19000000F8;
            goto LABEL_1600;
          case 821:
            int v594 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v594;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x2F000000F8;
LABEL_1600:
            *(double *)unint64_t v198 = *(double *)&v9;
            *(unsigned char *)(v198 + _Block_object_dispose(&a9, 8) = 0;
            goto LABEL_1601;
          case 822:
            int v484 = v26;
            unint64_t v485 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v484;
            uint64_t StringConstCast = v485;
            uint64_t v9 = 0x2F000000F8;
            *(void *)unint64_t v485 = 0x2F000000F8;
            *(unsigned char *)(v485 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v485 + 16) = *v11;
            *(void *)(v485 + 24) = 0;
            *(void *)(v485 + 32) = 0;
            break;
          case 823:
            int v1471 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(_DWORD *)uint64_t StringConstCast = 307;
            unint64_t v1473 = makeRangeVarFromAnyName(*(v11 - 4), *(v12 - 4), v1472);
            int v26 = v1471;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1473;
            *(void *)(StringConstCast + 16) = *(v11 - 1);
            break;
          case 824:
            int v644 = v26;
            unint64_t v645 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v644;
            uint64_t StringConstCast = v645;
            *(_DWORD *)unint64_t v645 = 308;
            *(void *)(v645 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(void *)(v645 + 16) = *(v11 - 1);
            break;
          case 825:
            int v1284 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1284;
            uint64_t StringConstCast = v173;
            *(_DWORD *)unint64_t v173 = 309;
            v729 = (const char *)*(v11 - 3);
            goto LABEL_1691;
          case 826:
            int v385 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v385;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x2D000000F8;
            goto LABEL_1705;
          case 827:
            int v426 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v426;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x2C000000F8;
            goto LABEL_1705;
          case 828:
            int v1632 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1632;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x2E000000F8;
            goto LABEL_1705;
          case 829:
            int v1474 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1474;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x2B000000F8;
            goto LABEL_1705;
          case 830:
            int v1860 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1860;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x7000000F8;
LABEL_1705:
            *(double *)unint64_t v198 = *(double *)&v9;
            *(void *)(v198 + 24) = 0;
            *(void *)(v198 + 16) = *(v11 - 1);
            goto LABEL_1787;
          case 831:
            int v1704 = v26;
            unint64_t v1705 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1704;
            uint64_t StringConstCast = v1705;
            uint64_t v9 = 0x7000000F8;
            *(void *)unint64_t v1705 = 0x7000000F8;
            *(void *)(v1705 + 24) = 0;
            *(void *)(v1705 + 16) = *(v11 - 1);
            *(void *)(v1705 + 32) = *v11;
            *(unsigned char *)(v1705 + 4errstart(20, 0) = 1;
            break;
          case 832:
            int v1873 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(void *)uint64_t StringConstCast = 0x7000000F8;
            *(void *)(StringConstCast + 24) = 0;
            *(void *)(StringConstCast + 16) = *(v11 - 2);
            unint64_t v1874 = makeDefElem((uint64_t)"from", *v11, *v12);
            *(double *)&uint64_t v9 = list_make1_impl(226, v1874);
            int v26 = v1873;
            *(void *)(StringConstCast + 32) = v1875;
            break;
          case 833:
            int v1598 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(void *)uint64_t StringConstCast = 0x7000000F8;
            *(void *)(StringConstCast + 24) = 0;
            *(void *)(StringConstCast + 16) = *(v11 - 2);
            unint64_t v1599 = makeDefElem((uint64_t)"from", *v11, *v12);
            *(double *)&uint64_t v9 = list_make1_impl(226, v1599);
            int v26 = v1598;
            *(void *)(StringConstCast + 32) = v1600;
            *(unsigned char *)(StringConstCast + 4errstart(20, 0) = 1;
            break;
          case 840:
          case 844:
          case 1366:
            int v32 = v26;
            uint64_t v50 = pstrdup((const char *)*v11);
            DefEleunint64_t m = makeString((uint64_t)v50);
            goto LABEL_1777;
          case 853:
            int v1585 = v26;
            unint64_t v1586 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1585;
            uint64_t StringConstCast = v1586;
            *(_DWORD *)unint64_t v1586 = 310;
            *(void *)(v1586 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v1586 + 16) = 0;
            *(void *)(v1586 + 24) = *v11;
            *(void *)(v1586 + 32) = 0;
            *(unsigned char *)(v1586 + 4errstart(20, 0) = 1;
            *(unsigned char *)(v1586 + 41) = *((unsigned char *)v11 - 8);
            break;
          case 854:
            int v1835 = v26;
            unint64_t v1610 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1835;
            uint64_t StringConstCast = v1610;
            *(_DWORD *)unint64_t v1610 = 310;
            *(void *)(v1610 + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(void *)(v1610 + 16) = 0;
            *(void *)(v1610 + 24) = *(v11 - 2);
            *(void *)(v1610 + 32) = *v11;
            *(unsigned char *)(v1610 + 4errstart(20, 0) = 0;
            goto LABEL_1671;
          case 855:
            int v1609 = v26;
            unint64_t v1610 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1609;
            uint64_t StringConstCast = v1610;
            *(_DWORD *)unint64_t v1610 = 310;
            *(void *)(v1610 + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(void *)(v1610 + 16) = 0;
            *(void *)(v1610 + 24) = *(v11 - 2);
            *(void *)(v1610 + 32) = *v11;
            *(unsigned char *)(v1610 + 4errstart(20, 0) = 1;
LABEL_1671:
            *(unsigned char *)(v1610 + 41) = *((unsigned char *)v11 - 24);
            break;
          case 856:
            int v1845 = v26;
            unint64_t v1846 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1845;
            uint64_t StringConstCast = v1846;
            *(_DWORD *)unint64_t v1846 = 310;
            *(void *)(v1846 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(void *)(v1846 + 16) = *(v11 - 2);
            *(void *)(v1846 + 24) = *v11;
            *(void *)(v1846 + 32) = 0;
            *(_WORD *)(v1846 + 4errstart(20, 0) = 0;
            break;
          case 859:
            int v1748 = v26;
            unint64_t v1311 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1748;
            uint64_t StringConstCast = v1311;
            *(_DWORD *)unint64_t v1311 = 291;
            *(void *)(v1311 + _Block_object_dispose(&a9, 8) = *(v11 - 9);
            *(unsigned char *)(v1311 + 4_Block_object_dispose(&a9, 8) = *((unsigned char *)v11 - 64);
            *(void *)(v1311 + 32) = *(v11 - 5);
            *(void *)(v1311 + 24) = *(v11 - 3);
            *(void *)(v1311 + 16) = *(v11 - 2);
            goto LABEL_1536;
          case 862:
            uint64_t v1995 = v24;
            uint64_t v326 = v2065;
            int v327 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(_DWORD *)uint64_t StringConstCast = 380;
            uint64_t v328 = *v326;
            uint64_t v24 = v1995;
            unint64_t v329 = MemoryContextAllocZeroAligned(v328, 0x20uLL);
            int v26 = v327;
            *(_DWORD *)unint64_t v329 = 378;
            *(void *)(v329 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v329 + 16) = 0;
            *(_DWORD *)(StringConstCast + 4) = 1;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v329;
            *(_DWORD *)(StringConstCast + 16) = *((_DWORD *)v11 - 6);
            *(void *)(StringConstCast + 24) = *(v11 - 1);
            break;
          case 863:
            int v1838 = v26;
            unint64_t v1839 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1838;
            uint64_t StringConstCast = v1839;
            uint64_t v9 = 0x10000017CLL;
            *(void *)unint64_t v1839 = 0x10000017CLL;
            *(void *)(v1839 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(_DWORD *)(v1839 + 16) = *((_DWORD *)v11 - 6);
            *(void *)(v1839 + 24) = *(v11 - 1);
            break;
          case 864:
            int v538 = v26;
            unint64_t v539 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v538;
            uint64_t StringConstCast = v539;
            uint64_t v9 = 0x20000017CLL;
            *(void *)unint64_t v539 = 0x20000017CLL;
            *(void *)(v539 + _Block_object_dispose(&a9, 8) = *v11;
            *(_DWORD *)(v539 + 16) = *((_DWORD *)v11 - 2);
            break;
          case 865:
            int v377 = v26;
            unint64_t v378 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v377;
            uint64_t StringConstCast = v378;
            uint64_t v9 = 0x20000017CLL;
            *(void *)unint64_t v378 = 0x20000017CLL;
            *(void *)(v378 + _Block_object_dispose(&a9, 8) = *v11;
            *(_DWORD *)(v378 + 16) = *((_DWORD *)v11 - 8);
LABEL_1503:
            *(void *)(v378 + 32) = *(v11 - 2);
            break;
          case 866:
            int v1310 = v26;
            unint64_t v1311 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1310;
            uint64_t StringConstCast = v1311;
            uint64_t v9 = 0x30000017CLL;
            *(void *)unint64_t v1311 = 0x30000017CLL;
LABEL_1536:
            *(void *)(v1311 + 4errstart(20, 0) = *v11;
            break;
          case 874:
            int v865 = v26;
            if (errstart(18, 0))
            {
              errcode();
              errmsg("RECHECK is no longer required", v866, v867, v868, v869, v870, v871, v872, v1947);
              errhint("Update your data type.", v873, v874, v875, v876, v877, v878, v879, v1948);
              scanner_errposition(*v12, v2064);
              errfinish("gram.y", 6177, (uint64_t)"base_yyparse");
            }
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            int v26 = v865;
            break;
          case 876:
            int v1231 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1231;
            uint64_t StringConstCast = v173;
            int v331 = 292;
            goto LABEL_985;
          case 877:
            int v736 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v736;
            uint64_t StringConstCast = v198;
            *(_DWORD *)unint64_t v198 = 293;
            *(void *)(v198 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v198 + 16) = *(v11 - 2);
            *(unsigned char *)(v198 + 24) = 0;
            goto LABEL_1787;
          case 878:
            int v1798 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1798;
            uint64_t StringConstCast = v198;
            *(_DWORD *)unint64_t v198 = 293;
            *(void *)(v198 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v198 + 16) = *(v11 - 2);
            *(unsigned char *)(v198 + 24) = 1;
            goto LABEL_1787;
          case 881:
            int v1810 = v26;
            unint64_t v767 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1810;
            uint64_t StringConstCast = v767;
            uint64_t v9 = 0x10000017CLL;
            goto LABEL_1619;
          case 882:
            int v766 = v26;
            unint64_t v767 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v766;
            uint64_t StringConstCast = v767;
            uint64_t v9 = 0x20000017CLL;
LABEL_1619:
            *(double *)unint64_t v767 = *(double *)&v9;
            *(_DWORD *)(v767 + 16) = *((_DWORD *)v11 - 6);
            *(void *)(v767 + 32) = *(v11 - 1);
            break;
          case 883:
            int v1386 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 249;
            unint64_t v1387 = makeString(*(v11 - 1));
            uint64_t v1388 = lcons(v1387, *(v11 - 3));
            *(double *)&uint64_t v9 = list_make1_impl(226, v1388);
            int v26 = v1386;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1389;
            int v1390 = 24;
            goto LABEL_1316;
          case 884:
            int v582 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 249;
            unint64_t v583 = makeString(*(v11 - 1));
            uint64_t v584 = lcons(v583, *(v11 - 3));
            *(double *)&uint64_t v9 = list_make1_impl(226, v584);
            int v26 = v582;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v585;
            int v586 = 24;
            goto LABEL_987;
          case 885:
            int v1554 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 249;
            unint64_t v1555 = makeString(*(v11 - 1));
            uint64_t v1556 = lcons(v1555, *(v11 - 3));
            *(double *)&uint64_t v9 = list_make1_impl(226, v1556);
            int v26 = v1554;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1557;
            int v1390 = 26;
LABEL_1316:
            *(_DWORD *)(StringConstCast + 16) = v1390;
            goto LABEL_1317;
          case 886:
            int v1232 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 249;
            unint64_t v1233 = makeString(*(v11 - 1));
            uint64_t v1234 = lcons(v1233, *(v11 - 3));
            *(double *)&uint64_t v9 = list_make1_impl(226, v1234);
            int v26 = v1232;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1235;
            int v586 = 26;
LABEL_987:
            *(_DWORD *)(StringConstCast + 16) = v586;
            goto LABEL_988;
          case 887:
            int v267 = v26;
            unint64_t v268 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v267;
            uint64_t StringConstCast = v268;
            *(_DWORD *)unint64_t v268 = 305;
            *(void *)(v268 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v268 + 16) = *(_DWORD *)v11;
            break;
          case 888:
            int v330 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v330;
            uint64_t StringConstCast = v173;
            int v331 = 306;
LABEL_985:
            *(_DWORD *)unint64_t v173 = v331;
            goto LABEL_1690;
          case 889:
          case 891:
            int v71 = v26;
            unint64_t v72 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v71;
            uint64_t StringConstCast = v72;
            *(_DWORD *)unint64_t v72 = 249;
            int v73 = *((_DWORD *)v11 - 8);
            goto LABEL_785;
          case 890:
          case 892:
            int v93 = v26;
            unint64_t v72 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v93;
            uint64_t StringConstCast = v72;
            *(_DWORD *)unint64_t v72 = 249;
            int v94 = *((_DWORD *)v11 - 4);
            goto LABEL_1048;
          case 893:
            int v2047 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 249;
            *(_DWORD *)(StringConstCast + 16) = *((_DWORD *)v11 - 8);
            uint64_t v1154 = v24;
            uint64_t v1155 = *(v11 - 1);
            unint64_t v1156 = makeString(*(v11 - 3));
            uint64_t v1157 = v1155;
            uint64_t v24 = v1154;
            uint64_t v1158 = lappend(v1157, v1156);
            *(double *)&uint64_t v9 = list_make1_impl(226, v1158);
            int v26 = v2047;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1159;
LABEL_1317:
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(_DWORD *)v11;
            *(_WORD *)(StringConstCast + 24) = 0;
            break;
          case 894:
            int v2034 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 249;
            *(_DWORD *)(StringConstCast + 16) = *((_DWORD *)v11 - 12);
            uint64_t v456 = v24;
            uint64_t v457 = *(v11 - 1);
            unint64_t v458 = makeString(*(v11 - 3));
            uint64_t v459 = v457;
            uint64_t v24 = v456;
            uint64_t v460 = lappend(v459, v458);
            *(double *)&uint64_t v9 = list_make1_impl(226, v460);
            int v26 = v2034;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v461;
LABEL_988:
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(_DWORD *)v11;
            *(_WORD *)(StringConstCast + 24) = 1;
            break;
          case 895:
            int v1269 = v26;
            unint64_t v72 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1269;
            uint64_t StringConstCast = v72;
            *(_DWORD *)unint64_t v72 = 249;
            int v94 = 47;
            goto LABEL_1048;
          case 896:
            int v988 = v26;
            unint64_t v72 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v988;
            uint64_t StringConstCast = v72;
            *(_DWORD *)unint64_t v72 = 249;
            int v73 = 47;
            goto LABEL_785;
          case 897:
            int v299 = v26;
            unint64_t v72 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v299;
            uint64_t StringConstCast = v72;
            *(_DWORD *)unint64_t v72 = 249;
            int v94 = 12;
LABEL_1048:
            *(_DWORD *)(v72 + 16) = v94;
            *(unsigned char *)(v72 + 24) = 0;
            goto LABEL_1049;
          case 898:
            int v499 = v26;
            unint64_t v72 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v499;
            uint64_t StringConstCast = v72;
            *(_DWORD *)unint64_t v72 = 249;
            int v73 = 12;
LABEL_785:
            *(_DWORD *)(v72 + 16) = v73;
            *(unsigned char *)(v72 + 24) = 1;
LABEL_1049:
            *(void *)(v72 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v72 + 2errstart(20, 0) = *(_DWORD *)v11;
            *(unsigned char *)(v72 + 25) = 0;
            break;
          case 899:
            int v317 = v26;
            unint64_t v318 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v317;
            uint64_t StringConstCast = v318;
            *(_DWORD *)unint64_t v318 = 249;
            *(_DWORD *)(v318 + 16) = 20;
            *(unsigned char *)(v318 + 24) = 0;
            *(void *)(v318 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v318 + 2errstart(20, 0) = *(_DWORD *)v11;
            *(unsigned char *)(v318 + 25) = 1;
            break;
          case 900:
            int v1259 = v26;
            unint64_t v1260 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1259;
            uint64_t StringConstCast = v1260;
            *(_DWORD *)unint64_t v1260 = 249;
            *(_DWORD *)(v1260 + 16) = 20;
            *(unsigned char *)(v1260 + 24) = 1;
            *(void *)(v1260 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v1260 + 2errstart(20, 0) = *(_DWORD *)v11;
            *(unsigned char *)(v1260 + 25) = 1;
            break;
          case 901:
          case 959:
          case 997:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x27;
            break;
          case 902:
          case 957:
          case 996:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x23;
            break;
          case 903:
          case 960:
          case 998:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x31;
            break;
          case 904:
          case 961:
          case 999:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x17;
            break;
          case 905:
          case 956:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x14;
            break;
          case 906:
          case 964:
          case 995:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x12;
            break;
          case 907:
          case 962:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 7;
            break;
          case 909:
          case 958:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x25;
            break;
          case 910:
          case 967:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x2D;
            break;
          case 911:
          case 966:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x2C;
            break;
          case 912:
          case 968:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x2E;
            break;
          case 913:
          case 965:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x2B;
            break;
          case 915:
          case 971:
          case 1001:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0xE;
            break;
          case 916:
          case 972:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0xF;
            break;
          case 918:
          case 975:
          case 1003:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x1D;
            break;
          case 919:
          case 977:
          case 1005:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x22;
            break;
          case 920:
          case 978:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x11;
            break;
          case 921:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x1B;
            break;
          case 922:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x21;
            break;
          case 923:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x2A;
            break;
          case 932:
            int v1160 = v26;
            unint64_t v1161 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1160;
            uint64_t StringConstCast = v1161;
            *(_DWORD *)unint64_t v1161 = 250;
            *(void *)(v1161 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(unsigned char *)(v1161 + 16) = *((unsigned char *)v11 - 8);
            *(_DWORD *)(v1161 + 2errstart(20, 0) = *(_DWORD *)v11;
            break;
          case 936:
            int v283 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v283;
            uint64_t StringConstCast = v173;
            *(_DWORD *)unint64_t v173 = 251;
            *(_DWORD *)(v173 + 4) = *((_DWORD *)v11 - 6);
            goto LABEL_1690;
          case 937:
            int v63 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(_DWORD *)uint64_t StringConstCast = 251;
            *(_DWORD *)(StringConstCast + 4) = *((_DWORD *)v11 - 6);
            unint64_t v64 = makeString(*(v11 - 2));
            goto LABEL_1724;
          case 938:
            int v1631 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1631;
            uint64_t StringConstCast = v173;
            uint64_t v9 = 0x2F000000FBLL;
            goto LABEL_1689;
          case 939:
            int v379 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v379;
            uint64_t StringConstCast = v173;
            uint64_t v9 = 0xC000000FBLL;
            goto LABEL_1689;
          case 940:
            int v618 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v618;
            uint64_t StringConstCast = v173;
            uint64_t v9 = 0x1000000FBLL;
            goto LABEL_1689;
          case 941:
            int v540 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v540;
            uint64_t StringConstCast = v173;
            uint64_t v9 = 0x13000000FBLL;
            goto LABEL_1689;
          case 942:
            int v1851 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1851;
            uint64_t StringConstCast = v173;
            uint64_t v9 = 0x19000000FBLL;
            goto LABEL_1689;
          case 943:
            int v2031 = v26;
            uint64_t v348 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            uint64_t StringConstCast = (uint64_t)v348;
            uint64_t v349 = 0x26000000FBLL;
            goto LABEL_1246;
          case 944:
            int v2035 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(void *)uint64_t StringConstCast = 0xD000000FBLL;
            uint64_t v500 = v24;
            unint64_t v501 = makeTypeNameFromNameList(*(v11 - 2));
            uint64_t v502 = *(v11 - 5);
            goto LABEL_1302;
          case 945:
            int v2031 = v26;
            uint64_t v348 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            uint64_t StringConstCast = (uint64_t)v348;
            uint64_t v349 = 0x1B000000FBLL;
            goto LABEL_1246;
          case 946:
            int v637 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v637;
            uint64_t StringConstCast = v173;
            uint64_t v9 = 0x1C000000FBLL;
            goto LABEL_1689;
          case 947:
            int v1814 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1814;
            uint64_t StringConstCast = v173;
            uint64_t v9 = 0x20000000FBLL;
            goto LABEL_1689;
          case 948:
            int v2031 = v26;
            uint64_t v348 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            uint64_t StringConstCast = (uint64_t)v348;
            uint64_t v349 = 0x21000000FBLL;
            goto LABEL_1246;
          case 949:
            int v2035 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(void *)uint64_t StringConstCast = 0x29000000FBLL;
            uint64_t v500 = v24;
            unint64_t v501 = *(v11 - 4);
            uint64_t v502 = *(v11 - 2);
LABEL_1302:
            unint64_t v1537 = makeString(v502);
            uint64_t v1538 = v501;
            uint64_t v24 = v500;
            *(double *)&uint64_t v9 = list_make2_impl(226, v1538, v1537);
            int v26 = v2035;
            goto LABEL_1725;
          case 950:
            int v2031 = v26;
            uint64_t v348 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            uint64_t StringConstCast = (uint64_t)v348;
            uint64_t v349 = 0x2A000000FBLL;
LABEL_1246:
            *(void *)uint64_t v348 = v349;
            uint64_t v1475 = v24;
            uint64_t v1476 = *(v11 - 2);
            unint64_t v1477 = makeString(*(v11 - 4));
            uint64_t v1478 = v1476;
            uint64_t v24 = v1475;
            unint64_t v64 = lappend(v1478, v1477);
            int v26 = v2031;
            goto LABEL_1725;
          case 951:
            int v63 = v26;
            uint64_t v448 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            uint64_t StringConstCast = (uint64_t)v448;
            uint64_t v449 = 0x18000000FBLL;
            goto LABEL_1487;
          case 952:
            int v63 = v26;
            uint64_t v448 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            uint64_t StringConstCast = (uint64_t)v448;
            uint64_t v449 = 0x1A000000FBLL;
LABEL_1487:
            *(void *)uint64_t v448 = v449;
            unint64_t v1706 = makeString(*(v11 - 2));
            unint64_t v64 = lcons(v1706, *(v11 - 4));
            goto LABEL_1724;
          case 953:
            int v862 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v862;
            uint64_t StringConstCast = v173;
            uint64_t v9 = 0x16000000FBLL;
LABEL_1689:
            *(double *)unint64_t v173 = *(double *)&v9;
LABEL_1690:
            v729 = (const char *)*(v11 - 2);
            goto LABEL_1691;
          case 954:
            int v63 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(void *)uint64_t StringConstCast = 0x5000000FBLL;
            *(double *)&uint64_t v9 = list_make2_impl(226, *(v11 - 5), *(v11 - 3));
            goto LABEL_1724;
          case 955:
          case 994:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 6;
            break;
          case 970:
          case 1000:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 9;
            break;
          case 974:
          case 1002:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x15;
            break;
          case 976:
          case 1004:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x1F;
            break;
          case 979:
          case 1006:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x24;
            break;
          case 980:
          case 1007:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x28;
            break;
          case 983:
            int v1285 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1285;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 322;
            *(void *)(v70 + 16) = *(v11 - 5);
            int v942 = *((_DWORD *)v11 - 6);
            goto LABEL_1715;
          case 984:
            int v301 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 322;
            *(void *)(StringConstCast + 16) = *(v11 - 5);
            *(_DWORD *)(StringConstCast + 4) = *((_DWORD *)v11 - 6);
            unint64_t v302 = makeString(*(v11 - 2));
            int v26 = v301;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v302;
            *(void *)(StringConstCast + 24) = *v11;
            break;
          case 985:
            int v1162 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1162;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 322;
            *(void *)(v70 + 16) = *(v11 - 5);
            int v942 = 47;
            goto LABEL_1715;
          case 986:
            int v1854 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1854;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 322;
            *(void *)(v70 + 16) = *(v11 - 5);
            int v942 = 12;
            goto LABEL_1715;
          case 987:
            int v941 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v941;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 322;
            *(void *)(v70 + 16) = *(v11 - 5);
            int v942 = 1;
            goto LABEL_1715;
          case 988:
            int v1840 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1840;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 322;
            *(void *)(v70 + 16) = *(v11 - 5);
            int v942 = 19;
            goto LABEL_1715;
          case 989:
            int v943 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v943;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 322;
            *(void *)(v70 + 16) = *(v11 - 6);
            int v942 = 22;
            goto LABEL_1715;
          case 990:
            int v1864 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1864;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 322;
            *(void *)(v70 + 16) = *(v11 - 5);
            int v942 = 28;
LABEL_1715:
            *(_DWORD *)(v70 + 4) = v942;
            goto LABEL_1716;
          case 991:
            int v1286 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1286;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 322;
            *(void *)(v70 + 16) = *(v11 - 5);
            *(_DWORD *)(v70 + 4) = 32;
LABEL_1716:
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            goto LABEL_1722;
          case 1010:
            uint64_t StringConstCast = *v11;
            *(unsigned char *)(*v11 + 24) = 0;
            break;
          case 1011:
            uint64_t StringConstCast = *v11;
            *(unsigned char *)(*v11 + 24) = 1;
            break;
          case 1012:
          case 1013:
          case 1014:
          case 1022:
            int v40 = v26;
            unint64_t v41 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v40;
            uint64_t StringConstCast = v41;
            *(_DWORD *)unint64_t v41 = 252;
            uint64_t v42 = *v11;
            *(_DWORD *)(v41 + 4) = 0;
            goto LABEL_363;
          case 1015:
          case 1025:
            int v158 = v26;
            unint64_t v41 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v158;
            uint64_t StringConstCast = v41;
            *(_DWORD *)unint64_t v41 = 252;
            uint64_t v42 = *v11;
            uint64_t v151 = 1;
            *(_DWORD *)(v41 + 4) = 1;
            goto LABEL_364;
          case 1016:
            int v380 = v26;
            unint64_t v41 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v380;
            uint64_t StringConstCast = v41;
            *(_DWORD *)unint64_t v41 = 252;
            uint64_t v42 = *v11;
            *(_DWORD *)(v41 + 4) = 2;
LABEL_363:
            uint64_t v151 = 1;
            goto LABEL_364;
          case 1017:
            int v1163 = v26;
            unint64_t v41 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1163;
            uint64_t StringConstCast = v41;
            *(_DWORD *)unint64_t v41 = 252;
            uint64_t v42 = *v11;
            *(_DWORD *)(v41 + 4) = 2;
            uint64_t v151 = -1;
            goto LABEL_364;
          case 1018:
            int v1861 = v26;
            unint64_t v77 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1861;
            uint64_t StringConstCast = v77;
            *(_DWORD *)unint64_t v77 = 252;
            *(void *)(v77 + 16) = *v11;
            int v552 = 2;
            goto LABEL_1707;
          case 1019:
            int v1404 = v26;
            unint64_t v77 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1404;
            uint64_t StringConstCast = v77;
            *(_DWORD *)unint64_t v77 = 252;
            *(void *)(v77 + 16) = *v11;
            int v552 = 3;
            goto LABEL_1707;
          case 1020:
          case 1023:
            int v76 = v26;
            unint64_t v77 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v76;
            uint64_t StringConstCast = v77;
            *(_DWORD *)unint64_t v77 = 252;
            *(void *)(v77 + 16) = *v11;
            *(_DWORD *)(v77 + 4) = 0;
            goto LABEL_1708;
          case 1021:
          case 1024:
            int v150 = v26;
            unint64_t v41 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v150;
            uint64_t StringConstCast = v41;
            *(_DWORD *)unint64_t v41 = 252;
            uint64_t v42 = *v11;
            *(_DWORD *)(v41 + 4) = 0;
            uint64_t v151 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_364;
          case 1026:
            int v551 = v26;
            unint64_t v77 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v551;
            uint64_t StringConstCast = v77;
            *(_DWORD *)unint64_t v77 = 252;
            *(void *)(v77 + 16) = *v11;
            int v552 = 1;
LABEL_1707:
            *(_DWORD *)(v77 + 4) = v552;
LABEL_1708:
            *(void *)(v77 + _Block_object_dispose(&a9, 8) = *((int *)v11 - 4);
            break;
          case 1027:
            int v1333 = v26;
            unint64_t v41 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1333;
            uint64_t StringConstCast = v41;
            *(_DWORD *)unint64_t v41 = 252;
            uint64_t v42 = *v11;
            *(_DWORD *)(v41 + 4) = 1;
            uint64_t v151 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_364:
            *(void *)(v41 + _Block_object_dispose(&a9, 8) = v151;
            *(void *)(v41 + 16) = v42;
            break;
          case 1032:
            int v300 = v26;
            unint64_t v181 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v300;
            uint64_t StringConstCast = v181;
            *(_DWORD *)unint64_t v181 = 241;
            *(unsigned char *)(v181 + 4) = 1;
            *(void *)(v181 + 24) = *(v11 - 5);
            *(_DWORD *)(v181 + _Block_object_dispose(&a9, 8) = *(_DWORD *)*(v11 - 3);
            *(_DWORD *)(v181 + 12) = *(_DWORD *)(*(v11 - 3) + 4);
            *(void *)(v181 + 16) = *(void *)(*(v11 - 3) + 8);
            goto LABEL_1656;
          case 1033:
            int v1479 = v26;
            unint64_t v647 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1479;
            uint64_t StringConstCast = v647;
            *(_DWORD *)unint64_t v647 = 241;
            *(unsigned char *)(v647 + 4) = 0;
            *(unsigned char *)(v647 + 4errstart(20, 0) = 0;
            goto LABEL_1248;
          case 1034:
            int v646 = v26;
            unint64_t v647 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v646;
            uint64_t StringConstCast = v647;
            *(_DWORD *)unint64_t v647 = 241;
            *(unsigned char *)(v647 + 4) = 0;
            *(unsigned char *)(v647 + 4errstart(20, 0) = 1;
LABEL_1248:
            *(void *)(v647 + 24) = *(v11 - 5);
            *(_DWORD *)(v647 + _Block_object_dispose(&a9, 8) = *(_DWORD *)*(v11 - 3);
            *(_DWORD *)(v647 + 12) = *(_DWORD *)(*(v11 - 3) + 4);
            *(void *)(v647 + 16) = *(void *)(*(v11 - 3) + 8);
            goto LABEL_1249;
          case 1038:
          case 1039:
            int v32 = v26;
            unint64_t v80 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(_DWORD *)unint64_t v80 = 379;
            *(void *)(v80 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v80 + 16) = *(v11 - 1);
            *(double *)&uint64_t v9 = list_make1_impl(226, v80);
            goto LABEL_1777;
          case 1042:
          case 1043:
          case 1044:
            int v63 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(_DWORD *)uint64_t StringConstCast = 379;
            unint64_t v64 = (unint64_t)pstrdup((const char *)*(v11 - 1));
LABEL_1724:
            int v26 = v63;
LABEL_1725:
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v64;
            *(void *)(StringConstCast + 16) = *v11;
            break;
          case 1045:
            int v1539 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1539;
            uint64_t StringConstCast = v173;
            int v1540 = 379;
            goto LABEL_1347;
          case 1046:
          case 1047:
            int v112 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v112;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x2700000000;
            goto LABEL_1754;
          case 1048:
            int v636 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v636;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x2300000000;
            goto LABEL_1754;
          case 1049:
            int v686 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v686;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x1000000000;
            goto LABEL_1754;
          case 1050:
            int v1558 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v1558;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x1100000000;
            goto LABEL_1754;
          case 1051:
            int v419 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v419;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x1300000000;
            goto LABEL_1754;
          case 1052:
            int v1827 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v1827;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x1C00000000;
            goto LABEL_1754;
          case 1053:
            int v1833 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v1833;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x2000000000;
            goto LABEL_1754;
          case 1054:
            int v553 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v553;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x900000000;
            goto LABEL_1754;
          case 1055:
            int v1742 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v1742;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0xC00000000;
            goto LABEL_1754;
          case 1056:
            int v1578 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v1578;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x1500000000;
            goto LABEL_1754;
          case 1057:
            int v1707 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v1707;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x1600000000;
            goto LABEL_1754;
          case 1058:
            int v462 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v462;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x2200000000;
            goto LABEL_1754;
          case 1059:
            int v1799 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v1799;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x2800000000;
            goto LABEL_1754;
          case 1060:
            int v1794 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v1794;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x2F00000000;
            goto LABEL_1754;
          case 1061:
            int v440 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v440;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x2700000001;
            goto LABEL_1754;
          case 1062:
            int v1701 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v1701;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x2300000001;
            goto LABEL_1754;
          case 1063:
            int v1604 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v1604;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x1300000001;
            goto LABEL_1754;
          case 1064:
            int v1822 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v1822;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x1C00000001;
            goto LABEL_1754;
          case 1065:
            int v1009 = v26;
            unint64_t v52 = palloc(0x10uLL);
            int v26 = v1009;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x2000000001;
LABEL_1754:
            *(double *)unint64_t v52 = *(double *)&v9;
            goto LABEL_1755;
          case 1070:
          case 1075:
          case 1096:
          case 1098:
          case 1129:
          case 1244:
          case 1331:
          case 1433:
          case 1469:
          case 1551:
          case 1553:
          case 1555:
          case 1557:
          case 1638:
          case 1706:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            break;
          case 1071:
          case 1076:
          case 1097:
          case 1099:
          case 1130:
          case 1245:
          case 1332:
          case 1434:
          case 1435:
          case 1470:
          case 1471:
          case 1552:
          case 1554:
          case 1556:
          case 1558:
            StringConstCast &= 0xFFFFFFFFFFFFFF00;
            break;
          case 1072:
            int v1847 = v26;
            unint64_t v1848 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1847;
            uint64_t StringConstCast = v1848;
            *(_DWORD *)unint64_t v1848 = 242;
            *(unsigned char *)(v1848 + 24) = 1;
            *(void *)(v1848 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v1848 + 16) = *(v11 - 2);
            *(unsigned char *)(v1848 + 25) = *((unsigned char *)v11 - 8);
            *(void *)(v1848 + 32) = *v11;
            break;
          case 1073:
            int v1841 = v26;
            unint64_t v695 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1841;
            uint64_t StringConstCast = v695;
            *(_DWORD *)unint64_t v695 = 242;
            *(_WORD *)(v695 + 24) = 0;
            goto LABEL_1678;
          case 1074:
            int v694 = v26;
            unint64_t v695 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v694;
            uint64_t StringConstCast = v695;
            *(_DWORD *)unint64_t v695 = 242;
            *(_WORD *)(v695 + 24) = 256;
LABEL_1678:
            *(void *)(v695 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v695 + 16) = *(v11 - 2);
            *(_DWORD *)(v695 + 4errstart(20, 0) = *(_DWORD *)v11;
            break;
          case 1077:
          case 1100:
          case 1102:
          case 1115:
          case 1117:
          case 1156:
          case 1157:
          case 1160:
          case 1196:
          case 1201:
          case 1365:
          case 1367:
          case 1368:
          case 1396:
          case 1398:
          case 1427:
          case 1437:
          case 1482:
          case 1489:
          case 1535:
          case 1546:
          case 1549:
          case 1564:
          case 1582:
          case 1585:
          case 2312:
            uint64_t StringConstCast = *v11;
            break;
          case 1078:
          case 1081:
          case 1101:
          case 1112:
          case 1116:
          case 1118:
          case 1132:
          case 1142:
          case 1202:
          case 1397:
          case 1417:
          case 1428:
          case 1438:
          case 1468:
          case 1483:
          case 1536:
          case 1550:
          case 1560:
          case 1565:
          case 1586:
            uint64_t StringConstCast = 0;
            break;
          case 1079:
            int v1579 = v26;
            unint64_t v173 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1579;
            uint64_t StringConstCast = v173;
            int v1540 = 243;
LABEL_1347:
            *(_DWORD *)unint64_t v173 = v1540;
            v729 = (const char *)*(v11 - 1);
LABEL_1691:
            *(void *)(v173 + _Block_object_dispose(&a9, 8) = v729;
            *(void *)(v173 + 16) = *v11;
            break;
          case 1082:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 2);
            uint64_t v43 = "schemas";
            goto LABEL_1598;
          case 1083:
          case 1084:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 2);
            uint64_t v43 = "roles";
            goto LABEL_1598;
          case 1085:
            int v1664 = v26;
            unint64_t v181 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1664;
            uint64_t StringConstCast = v181;
            *(_DWORD *)unint64_t v181 = 241;
            *(unsigned char *)(v181 + 4) = 1;
            *(void *)(v181 + 24) = *(v11 - 5);
            *(_DWORD *)(v181 + _Block_object_dispose(&a9, 8) = 2;
            *(_DWORD *)(v181 + 12) = *((_DWORD *)v11 - 6);
            *(void *)(v181 + 16) = 0;
LABEL_1656:
            *(void *)(v181 + 32) = *(v11 - 1);
            *(unsigned char *)(v181 + 4errstart(20, 0) = *(unsigned char *)v11;
            break;
          case 1086:
            int v1405 = v26;
            unint64_t v647 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1405;
            uint64_t StringConstCast = v647;
            *(_DWORD *)unint64_t v647 = 241;
            *(unsigned char *)(v647 + 4) = 0;
            *(unsigned char *)(v647 + 4errstart(20, 0) = 0;
            *(void *)(v647 + 24) = *(v11 - 5);
            *(_DWORD *)(v647 + _Block_object_dispose(&a9, 8) = 2;
            *(_DWORD *)(v647 + 12) = *((_DWORD *)v11 - 6);
            *(void *)(v647 + 16) = 0;
LABEL_1249:
            *(void *)(v647 + 32) = *(v11 - 1);
            *(_DWORD *)(v647 + 44) = *(_DWORD *)v11;
            break;
          case 1087:
            int v1795 = v26;
            unint64_t v1796 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1795;
            uint64_t StringConstCast = v1796;
            *(_DWORD *)unint64_t v1796 = 241;
            *(unsigned char *)(v1796 + 4) = 0;
            *(unsigned char *)(v1796 + 4errstart(20, 0) = 1;
            *(void *)(v1796 + 24) = *(v11 - 5);
            *(_DWORD *)(v1796 + _Block_object_dispose(&a9, 8) = 2;
            *(_DWORD *)(v1796 + 12) = *((_DWORD *)v11 - 6);
            *(void *)(v1796 + 16) = 0;
            *(void *)(v1796 + 32) = *(v11 - 1);
            *(_DWORD *)(v1796 + 44) = *(_DWORD *)v11;
            break;
          case 1088:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x27;
            break;
          case 1089:
          case 1090:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x13;
            break;
          case 1091:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x23;
            break;
          case 1092:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x2F;
            break;
          case 1093:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x22;
            break;
          case 1094:
            int v1665 = v26;
            unint64_t v1666 = MemoryContextAllocZeroAligned(*v2065, 0x78uLL);
            int v26 = v1665;
            uint64_t StringConstCast = v1666;
            *(_DWORD *)unint64_t v1666 = 253;
            *(unsigned char *)(v1666 + 104) = *((unsigned char *)v11 - 104);
            *(unsigned char *)(v1666 + 11errstart(20, 0) = *((unsigned char *)v11 - 88);
            *(void *)(v1666 + _Block_object_dispose(&a9, 8) = *(v11 - 10);
            *(void *)(v1666 + 16) = *(v11 - 8);
            *(void *)(v1666 + 24) = *(v11 - 7);
            *(void *)(v1666 + 4errstart(20, 0) = *(v11 - 5);
            *(void *)(v1666 + 4_Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v1666 + 56) = *(v11 - 2);
            *(void *)(v1666 + 32) = *(v11 - 1);
            *(void *)(v1666 + 64) = *v11;
            *(_WORD *)(v1666 + 111) = 0;
            *(double *)&uint64_t v9 = 0.0;
            *(_OWORD *)(v1666 + 8_Block_object_dispose(&a9, 8) = 0u;
            *(_OWORD *)(v1666 + 72) = 0u;
            *(_DWORD *)(v1666 + 105) = 0;
            *(unsigned char *)(v1666 + 109) = 0;
            break;
          case 1095:
            int v1719 = v26;
            unint64_t v1720 = MemoryContextAllocZeroAligned(*v2065, 0x78uLL);
            int v26 = v1719;
            uint64_t StringConstCast = v1720;
            *(_DWORD *)unint64_t v1720 = 253;
            *(unsigned char *)(v1720 + 104) = *((unsigned char *)v11 - 128);
            *(unsigned char *)(v1720 + 11errstart(20, 0) = *((unsigned char *)v11 - 112);
            *(void *)(v1720 + _Block_object_dispose(&a9, 8) = *(v11 - 10);
            *(void *)(v1720 + 16) = *(v11 - 8);
            *(void *)(v1720 + 24) = *(v11 - 7);
            *(void *)(v1720 + 4errstart(20, 0) = *(v11 - 5);
            *(void *)(v1720 + 4_Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v1720 + 56) = *(v11 - 2);
            *(void *)(v1720 + 32) = *(v11 - 1);
            *(void *)(v1720 + 64) = *v11;
            *(double *)&uint64_t v9 = 0.0;
            *(_OWORD *)(v1720 + 8_Block_object_dispose(&a9, 8) = 0u;
            *(_OWORD *)(v1720 + 72) = 0u;
            *(_DWORD *)(v1720 + 105) = 0;
            *(unsigned char *)(v1720 + 109) = 0;
            *(_WORD *)(v1720 + 111) = 1;
            break;
          case 1103:
            uint64_t StringConstCast = (uint64_t)"btree";
            break;
          case 1106:
            int v503 = v26;
            unint64_t v396 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            int v26 = v503;
            uint64_t StringConstCast = v396;
            *(_DWORD *)unint64_t v396 = 368;
            *(void *)(v396 + 16) = 0;
            *(void *)(v396 + 24) = 0;
            *(void *)(v396 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v396 + 32) = *(v11 - 3);
            *(void *)(v396 + 4errstart(20, 0) = *(v11 - 2);
            *(void *)(v396 + 4_Block_object_dispose(&a9, 8) = 0;
            goto LABEL_453;
          case 1107:
            int v395 = v26;
            unint64_t v396 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            int v26 = v395;
            uint64_t StringConstCast = v396;
            *(_DWORD *)unint64_t v396 = 368;
            *(void *)(v396 + 16) = 0;
            *(void *)(v396 + 24) = 0;
            *(void *)(v396 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v396 + 32) = *(v11 - 4);
            *(void *)(v396 + 4errstart(20, 0) = *(v11 - 3);
            *(void *)(v396 + 4_Block_object_dispose(&a9, 8) = *(v11 - 2);
LABEL_453:
            *(_DWORD *)(v396 + 56) = *((_DWORD *)v11 - 2);
            *(_DWORD *)(v396 + 6errstart(20, 0) = *(_DWORD *)v11;
            break;
          case 1108:
            uint64_t StringConstCast = *v11;
            *(void *)(*v11 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            break;
          case 1109:
            uint64_t StringConstCast = *v11;
            *(void *)(*v11 + 16) = *(v11 - 1);
            break;
          case 1110:
            uint64_t StringConstCast = *v11;
            *(void *)(*v11 + 16) = *(v11 - 2);
            break;
          case 1111:
          case 1131:
          case 1141:
          case 1419:
          case 1559:
            uint64_t StringConstCast = *(v11 - 1);
            break;
          case 1119:
          case 1122:
          case 1241:
          case 1257:
          case 1263:
          case 1323:
          case 1429:
          case 1478:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 1120:
          case 1123:
          case 1242:
          case 1258:
          case 1430:
          case 1476:
          case 1477:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 2;
            break;
          case 1121:
          case 1124:
          case 1240:
          case 1256:
          case 1322:
          case 1324:
          case 1479:
            StringConstCast &= 0xFFFFFFFF00000000;
            break;
          case 1125:
            int v1711 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1711;
            uint64_t StringConstCast = v198;
            *(_DWORD *)unint64_t v198 = 254;
            *(unsigned char *)(v198 + 4) = 0;
            *(unsigned char *)(v198 + 5) = *((unsigned char *)v11 - 48);
            *(void *)(v198 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v198 + 16) = *(v11 - 3);
            goto LABEL_1494;
          case 1126:
            int v1749 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            *(_DWORD *)uint64_t StringConstCast = 254;
            *(unsigned char *)(StringConstCast + 4) = 0;
            *(unsigned char *)(StringConstCast + 5) = *((unsigned char *)v11 - 72);
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 7);
            *(void *)(StringConstCast + 16) = mergeTableFuncParameters(*(v11 - 6), (const void **)*(v11 - 2));
            TableFuncTypeName(*(v11 - 2));
            int v26 = v1749;
            *(void *)(StringConstCast + 24) = v1750;
            *(_DWORD *)(v1750 + 4_Block_object_dispose(&a9, 8) = *(v12 - 4);
            goto LABEL_1538;
          case 1127:
            int v1643 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1643;
            uint64_t StringConstCast = v198;
            *(_DWORD *)unint64_t v198 = 254;
            *(unsigned char *)(v198 + 4) = 0;
            goto LABEL_1423;
          case 1128:
            int v989 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v989;
            uint64_t StringConstCast = v198;
            *(_DWORD *)unint64_t v198 = 254;
            *(unsigned char *)(v198 + 4) = 1;
LABEL_1423:
            *(unsigned char *)(v198 + 5) = *((unsigned char *)v11 - 32);
            *(void *)(v198 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
LABEL_1601:
            *(void *)(v198 + 16) = *(v11 - 1);
            *(void *)(v198 + 24) = 0;
            goto LABEL_1787;
          case 1137:
            int v350 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 378;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            uint64_t ArgTypes = extractArgTypes(*v11);
            goto LABEL_1373;
          case 1138:
            int v388 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 378;
            uint64_t v389 = (uint64_t)pstrdup((const char *)*v11);
            goto LABEL_387;
          case 1139:
            int v388 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 378;
            uint64_t v389 = *v11;
LABEL_387:
            unint64_t v408 = makeString(v389);
            *(double *)&uint64_t v9 = list_make1_impl(226, v408);
            goto LABEL_1650;
          case 1140:
            int v388 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 378;
            unint64_t v1823 = makeString(*(v11 - 1));
            uint64_t v1824 = lcons(v1823, *v11);
            uint64_t v409 = check_func_name(v1824, (uint64_t)v2064);
LABEL_1650:
            int v26 = v388;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v409;
            *(unsigned char *)(StringConstCast + 24) = 1;
            break;
          case 1145:
            int v352 = v26;
            unint64_t v353 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v352;
            uint64_t StringConstCast = v353;
            *(_DWORD *)unint64_t v353 = 382;
            *(void *)(v353 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v353 + 16) = *v11;
            int v354 = *((_DWORD *)v11 - 4);
            goto LABEL_1541;
          case 1146:
            int v1334 = v26;
            unint64_t v353 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1334;
            uint64_t StringConstCast = v353;
            *(_DWORD *)unint64_t v353 = 382;
            *(void *)(v353 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            goto LABEL_1108;
          case 1147:
            int v368 = v26;
            unint64_t v353 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v368;
            uint64_t StringConstCast = v353;
            *(_DWORD *)unint64_t v353 = 382;
            *(void *)(v353 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            goto LABEL_1540;
          case 1148:
            int v1010 = v26;
            unint64_t v353 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1010;
            uint64_t StringConstCast = v353;
            *(_DWORD *)unint64_t v353 = 382;
            *(void *)(v353 + _Block_object_dispose(&a9, 8) = 0;
LABEL_1108:
            *(void *)(v353 + 16) = *v11;
            int v354 = *((_DWORD *)v11 - 2);
            goto LABEL_1541;
          case 1149:
            int v1751 = v26;
            unint64_t v353 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1751;
            uint64_t StringConstCast = v353;
            *(_DWORD *)unint64_t v353 = 382;
            *(void *)(v353 + _Block_object_dispose(&a9, 8) = 0;
LABEL_1540:
            *(void *)(v353 + 16) = *v11;
            int v354 = 105;
            goto LABEL_1541;
          case 1150:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x69;
            break;
          case 1151:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x6F;
            break;
          case 1152:
          case 1153:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x62;
            break;
          case 1154:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x76;
            break;
          case 1158:
            int v450 = v26;
            unint64_t v451 = makeString(*(v11 - 3));
            uint64_t v452 = lcons(v451, *(v11 - 2));
            unint64_t v453 = makeTypeNameFromNameList(v452);
            int v26 = v450;
            uint64_t StringConstCast = v453;
            *(unsigned char *)(v453 + 21) = 1;
            goto LABEL_727;
          case 1159:
            int v898 = v26;
            unint64_t v899 = makeString(*(v11 - 3));
            uint64_t v900 = lcons(v899, *(v11 - 2));
            unint64_t v453 = makeTypeNameFromNameList(v900);
            int v26 = v898;
            uint64_t StringConstCast = v453;
            *(_WORD *)(v453 + 2errstart(20, 0) = 257;
LABEL_727:
            *(_DWORD *)(v453 + 4_Block_object_dispose(&a9, 8) = *(v12 - 3);
            break;
          case 1161:
          case 1162:
            uint64_t StringConstCast = *(v11 - 2);
LABEL_1538:
            *(void *)(StringConstCast + 32) = *v11;
            break;
          case 1163:
            uint64_t StringConstCast = *v11;
            int v410 = *(_DWORD *)(*v11 + 24);
            if (v410 != 105 && v410 != 118) {
              base_yyparse_cold_24();
            }
            break;
          case 1164:
            int v32 = v26;
            v1565 = makeInteger(-1);
            *(double *)&uint64_t v9 = list_make2_impl(226, 0, (uint64_t)v1565);
            goto LABEL_1777;
          case 1165:
            uint64_t v421 = v24;
            unint64_t v422 = *(v11 - 1);
            int v619 = -1;
            goto LABEL_1667;
          case 1166:
            uint64_t v421 = v24;
            unint64_t v422 = *(v11 - 1);
            int v619 = 0;
LABEL_1667:
            int v420 = v26;
            uint64_t v423 = (uint64_t)makeInteger(v619);
            goto LABEL_1668;
          case 1167:
            int v32 = v26;
            *(double *)&uint64_t v9 = makeOrderedSetArgs(*(v11 - 4), *(v11 - 1));
            goto LABEL_1777;
          case 1170:
            int v350 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 378;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            uint64_t ArgTypes = extractAggrArgTypes(*v11);
LABEL_1373:
            int v26 = v350;
            *(void *)(StringConstCast + 16) = ArgTypes;
            break;
          case 1175:
            int v32 = v26;
            v901 = makeInteger(0);
            int v902 = *(v12 - 3);
            goto LABEL_1652;
          case 1176:
            int v32 = v26;
            v901 = makeInteger(1);
            int v902 = *(v12 - 4);
            goto LABEL_1652;
          case 1177:
            int v32 = v26;
            v901 = makeInteger(1);
            int v902 = *v12;
LABEL_1652:
            DefEleunint64_t m = makeDefElem((uint64_t)"strict", (uint64_t)v901, v902);
            goto LABEL_1777;
          case 1178:
            v903 = "immutable";
            goto LABEL_1252;
          case 1179:
            v903 = "stable";
            goto LABEL_1252;
          case 1180:
            v903 = "volatile";
LABEL_1252:
            int v32 = v26;
            unint64_t v1480 = makeString((uint64_t)v903);
            DefEleunint64_t m = makeDefElem((uint64_t)"volatility", v1480, *v12);
            goto LABEL_1777;
          case 1181:
            int v1097 = 1;
            goto LABEL_1641;
          case 1182:
            int v1097 = 0;
LABEL_1641:
            int v32 = v26;
            uint64_t v577 = makeInteger(v1097);
            int v578 = *(v12 - 2);
            goto LABEL_1642;
          case 1183:
            int v515 = 1;
            goto LABEL_511;
          case 1184:
            int v515 = 0;
LABEL_511:
            int v32 = v26;
            uint64_t v577 = makeInteger(v515);
            int v578 = *(v12 - 1);
LABEL_1642:
            DefEleunint64_t m = makeDefElem((uint64_t)"security", (uint64_t)v577, v578);
            goto LABEL_1777;
          case 1185:
            int v32 = v26;
            uint64_t v700 = makeInteger(1);
            int v701 = *v12;
            goto LABEL_1425;
          case 1186:
            int v32 = v26;
            uint64_t v700 = makeInteger(0);
            int v701 = *(v12 - 1);
LABEL_1425:
            DefEleunint64_t m = makeDefElem((uint64_t)"leakproof", (uint64_t)v700, v701);
            goto LABEL_1777;
          case 1187:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "cost";
            goto LABEL_1598;
          case 1188:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "rows";
            goto LABEL_1598;
          case 1189:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "support";
            goto LABEL_1598;
          case 1190:
            uint64_t v44 = *v11;
            int v45 = *v12;
            uint64_t v43 = "set";
            goto LABEL_1598;
          case 1191:
            int v32 = v26;
            unint64_t v880 = makeString(*v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"parallel", v880, *(v12 - 1));
            goto LABEL_1777;
          case 1193:
          case 1236:
            int v32 = v26;
            unint64_t v163 = makeString(*v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"language", v163, *(v12 - 1));
            goto LABEL_1777;
          case 1194:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "transform";
            goto LABEL_1598;
          case 1195:
            int v32 = v26;
            BOOL v463 = makeInteger(1);
            DefEleunint64_t m = makeDefElem((uint64_t)"window", (uint64_t)v463, *v12);
            goto LABEL_1777;
          case 1198:
            int v420 = v26;
            uint64_t v421 = v24;
            unint64_t v422 = makeString(*(v11 - 2));
            uint64_t v423 = makeString(*v11);
LABEL_1668:
            uint64_t v1834 = v422;
            uint64_t v24 = v421;
            *(double *)&uint64_t v9 = list_make2_impl(226, v1834, v423);
            int v26 = v420;
            goto LABEL_1778;
          case 1200:
            uint64_t v34 = *(v11 - 4);
LABEL_1775:
            uint64_t v2 = (const void **)*v11;
            goto LABEL_1776;
          case 1203:
            int v1743 = v26;
            unint64_t v353 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1743;
            uint64_t StringConstCast = v353;
            *(_DWORD *)unint64_t v353 = 382;
            *(void *)(v353 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v353 + 16) = *v11;
            int v354 = 116;
LABEL_1541:
            *(_DWORD *)(v353 + 24) = v354;
            *(void *)(v353 + 32) = 0;
            break;
          case 1206:
            int v620 = v26;
            unint64_t v428 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v620;
            uint64_t StringConstCast = v428;
            uint64_t v9 = 0x13000000FFLL;
            goto LABEL_605;
          case 1207:
            int v427 = v26;
            unint64_t v428 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v427;
            uint64_t StringConstCast = v428;
            uint64_t v9 = 0x1C000000FFLL;
            goto LABEL_605;
          case 1208:
            int v702 = v26;
            unint64_t v428 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v702;
            uint64_t StringConstCast = v428;
            uint64_t v9 = 0x20000000FFLL;
LABEL_605:
            *(double *)unint64_t v428 = *(double *)&v9;
            uint64_t v703 = *(v11 - 2);
            goto LABEL_1113;
          case 1213:
            int v369 = v26;
            unint64_t v357 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v369;
            uint64_t StringConstCast = v357;
            *(_DWORD *)unint64_t v357 = 249;
            int v358 = 19;
            goto LABEL_1375;
          case 1214:
            int v476 = v26;
            unint64_t v477 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v476;
            uint64_t StringConstCast = v477;
            *(_DWORD *)unint64_t v477 = 249;
            int v478 = 19;
            goto LABEL_1644;
          case 1215:
            int v1601 = v26;
            unint64_t v357 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1601;
            uint64_t StringConstCast = v357;
            *(_DWORD *)unint64_t v357 = 249;
            int v358 = 28;
            goto LABEL_1375;
          case 1216:
            int v1611 = v26;
            unint64_t v477 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1611;
            uint64_t StringConstCast = v477;
            *(_DWORD *)unint64_t v477 = 249;
            int v478 = 28;
            goto LABEL_1644;
          case 1217:
            int v546 = v26;
            unint64_t v357 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v546;
            uint64_t StringConstCast = v357;
            *(_DWORD *)unint64_t v357 = 249;
            *(_DWORD *)(v357 + 16) = 32;
            goto LABEL_1376;
          case 1218:
            int v504 = v26;
            unint64_t v477 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v504;
            uint64_t StringConstCast = v477;
            *(_DWORD *)unint64_t v477 = 249;
            *(_DWORD *)(v477 + 16) = 32;
            goto LABEL_1645;
          case 1219:
            int v1481 = v26;
            unint64_t v357 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1481;
            uint64_t StringConstCast = v357;
            *(_DWORD *)unint64_t v357 = 249;
            int v358 = 1;
            goto LABEL_1375;
          case 1220:
            int v1287 = v26;
            unint64_t v1288 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1287;
            uint64_t StringConstCast = v1288;
            *(_DWORD *)unint64_t v1288 = 249;
            *(_DWORD *)(v1288 + 16) = 1;
            *(void *)(v1288 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v1288 + 2errstart(20, 0) = *(_DWORD *)v11;
            *(_WORD *)(v1288 + 24) = 1;
            break;
          case 1221:
            int v356 = v26;
            unint64_t v357 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v356;
            uint64_t StringConstCast = v357;
            *(_DWORD *)unint64_t v357 = 249;
            int v358 = 25;
LABEL_1375:
            *(_DWORD *)(v357 + 16) = v358;
LABEL_1376:
            *(void *)(v357 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v357 + 2errstart(20, 0) = *(_DWORD *)v11;
            *(_WORD *)(v357 + 24) = 0;
            break;
          case 1222:
            int v1820 = v26;
            unint64_t v477 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1820;
            uint64_t StringConstCast = v477;
            *(_DWORD *)unint64_t v477 = 249;
            int v478 = 25;
LABEL_1644:
            *(_DWORD *)(v477 + 16) = v478;
LABEL_1645:
            *(void *)(v477 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v477 + 2errstart(20, 0) = *(_DWORD *)v11;
            *(_WORD *)(v477 + 24) = 1;
            break;
          case 1223:
            base_yyparse_cold_25();
          case 1224:
            uint64_t v397 = *(v11 - 3);
            uint64_t v129 = *(v11 - 1);
            goto LABEL_1441;
          case 1225:
          case 1803:
            uint64_t v129 = *(v11 - 1);
            goto LABEL_565;
          case 1226:
            uint64_t v397 = *(v11 - 3);
            uint64_t v129 = 0;
            goto LABEL_1441;
          case 1228:
            int v32 = v26;
            unint64_t v541 = makeString(*(v11 - 2));
            DefEleunint64_t m = lcons(v541, *v11);
            goto LABEL_1777;
          case 1231:
            int v1765 = v26;
            unint64_t v1766 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1765;
            uint64_t StringConstCast = v1766;
            *(_DWORD *)unint64_t v1766 = 378;
            *(void *)(v1766 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1766 + 16) = *v11;
            break;
          case 1232:
            int v491 = v26;
            unint64_t v492 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v491;
            uint64_t StringConstCast = v492;
            *(_DWORD *)unint64_t v492 = 256;
            *(void *)(v492 + _Block_object_dispose(&a9, 8) = *v11;
            break;
          case 1235:
            int v32 = v26;
            unint64_t v370 = makeString(*v11);
            DefEleunint64_t m = makeDefElem((uint64_t)"as", v370, *v12);
            goto LABEL_1777;
          case 1237:
            int v990 = v26;
            unint64_t v991 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v990;
            uint64_t StringConstCast = v991;
            *(_DWORD *)unint64_t v991 = 290;
            *(void *)(v991 + _Block_object_dispose(&a9, 8) = *(v11 - 7);
            *(void *)(v991 + 16) = *(v11 - 5);
            *(void *)(v991 + 24) = *(v11 - 1);
            goto LABEL_990;
          case 1238:
            int v1236 = v26;
            unint64_t v991 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1236;
            uint64_t StringConstCast = v991;
            *(_DWORD *)unint64_t v991 = 290;
            *(void *)(v991 + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(void *)(v991 + 16) = *(v11 - 4);
            *(void *)(v991 + 24) = 0;
LABEL_990:
            *(_DWORD *)(v991 + 32) = *(_DWORD *)v11;
            *(unsigned char *)(v991 + 36) = 0;
            break;
          case 1239:
            int v547 = v26;
            unint64_t v548 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v547;
            uint64_t StringConstCast = v548;
            *(_DWORD *)unint64_t v548 = 290;
            *(void *)(v548 + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(void *)(v548 + 16) = *(v11 - 4);
            *(void *)(v548 + 24) = 0;
            *(_DWORD *)(v548 + 32) = *(_DWORD *)v11;
            *(unsigned char *)(v548 + 36) = 1;
            break;
          case 1243:
            int v381 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 249;
            *(_DWORD *)(StringConstCast + 16) = 5;
            list_make2_impl(226, *(v11 - 4), *(v11 - 2));
            *(double *)&uint64_t v9 = list_make1_impl(226, v382);
            int v26 = v381;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v383;
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(_DWORD *)v11;
            *(_WORD *)(StringConstCast + 24) = *((unsigned __int8 *)v11 - 48);
            break;
          case 1246:
            int v486 = v26;
            unint64_t v487 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v486;
            uint64_t StringConstCast = v487;
            *(_DWORD *)unint64_t v487 = 335;
            *(unsigned char *)(v487 + 4) = *((unsigned char *)v11 - 64);
            *(void *)(v487 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(void *)(v487 + 16) = *(v11 - 3);
            *(void *)(v487 + 24) = **(void **)(*(v11 - 1) + 16);
            *(void *)(v487 + 32) = *(void *)(*(void *)(*(v11 - 1) + 16) + 8);
            break;
          case 1247:
            uint64_t v397 = *(v11 - 6);
LABEL_1440:
            uint64_t v129 = *v11;
            goto LABEL_1441;
          case 1248:
            uint64_t v397 = *v11;
            uint64_t v129 = *(v11 - 6);
            goto LABEL_1441;
          case 1249:
            uint64_t v397 = *v11;
            uint64_t v129 = 0;
            goto LABEL_1441;
          case 1250:
            uint64_t v129 = *v11;
LABEL_565:
            uint64_t v397 = 0;
            goto LABEL_1441;
          case 1251:
            int v2033 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 249;
            *(_DWORD *)(StringConstCast + 16) = 41;
            uint64_t v401 = v24;
            uint64_t v402 = *(v11 - 3);
            unint64_t v403 = makeString(*(v11 - 1));
            uint64_t v404 = v402;
            uint64_t v24 = v401;
            list_make2_impl(226, v404, v403);
            *(double *)&uint64_t v9 = list_make1_impl(226, v405);
            int v26 = v2033;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v406;
            *(_DWORD *)(StringConstCast + 2errstart(20, 0) = *(_DWORD *)v11;
            *(unsigned char *)(StringConstCast + 24) = *((unsigned char *)v11 - 40);
            break;
          case 1252:
            int v1482 = v26;
            unint64_t v1483 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1482;
            uint64_t StringConstCast = v1483;
            *(_DWORD *)unint64_t v1483 = 283;
            *(_DWORD *)(v1483 + 4) = *((_DWORD *)v11 - 4);
            *(unsigned char *)(v1483 + 2_Block_object_dispose(&a9, 8) = *((unsigned char *)v11 - 8);
            *(void *)(v1483 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v1483 + 16) = 0;
            *(_DWORD *)(v1483 + 24) = 0;
            break;
          case 1253:
            int v1828 = v26;
            unint64_t v1829 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1828;
            uint64_t StringConstCast = v1829;
            *(_DWORD *)unint64_t v1829 = 283;
            *(_DWORD *)(v1829 + 4) = *((_DWORD *)v11 - 4);
            *(unsigned char *)(v1829 + 2_Block_object_dispose(&a9, 8) = *((unsigned char *)v11 - 8);
            uint64_t v1830 = *v11;
            *(void *)(v1829 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v1829 + 16) = v1830;
            *(_DWORD *)(v1829 + 24) = 0;
            break;
          case 1254:
            int v569 = v26;
            unint64_t v570 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v569;
            uint64_t StringConstCast = v570;
            *(_DWORD *)unint64_t v570 = 283;
            *(_DWORD *)(v570 + 4) = *((_DWORD *)v11 - 4);
            *(unsigned char *)(v570 + 2_Block_object_dispose(&a9, 8) = *((unsigned char *)v11 - 8);
            *(void *)(v570 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v570 + 16) = 0;
            goto LABEL_543;
          case 1255:
            int v621 = v26;
            unint64_t v570 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v621;
            uint64_t StringConstCast = v570;
            *(_DWORD *)unint64_t v570 = 283;
            *(_DWORD *)(v570 + 4) = *((_DWORD *)v11 - 4);
            *(unsigned char *)(v570 + 2_Block_object_dispose(&a9, 8) = *((unsigned char *)v11 - 8);
            uint64_t v622 = *v11;
            *(void *)(v570 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v570 + 16) = v622;
LABEL_543:
            *(_DWORD *)(v570 + 24) = *((_DWORD *)v11 - 8);
            break;
          case 1259:
          case 1432:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 3;
            break;
          case 1260:
          case 1431:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 4;
            break;
          case 1264:
            int v1712 = v26;
            unint64_t v602 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1712;
            uint64_t StringConstCast = v602;
            int v603 = 320;
            goto LABEL_1496;
          case 1265:
            int v429 = v26;
            unint64_t v430 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v429;
            uint64_t StringConstCast = v430;
            int v431 = 320;
            goto LABEL_609;
          case 1266:
            int v612 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v612;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x100000101;
            goto LABEL_1498;
          case 1267:
            int v768 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v768;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x700000101;
            goto LABEL_1498;
          case 1268:
            int v919 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v919;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x800000101;
            goto LABEL_1498;
          case 1269:
            int v1034 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1034;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x900000101;
            goto LABEL_1588;
          case 1270:
            int v1098 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1098;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0xC00000101;
            goto LABEL_1498;
          case 1271:
            int v1164 = v26;
            v1165 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1164;
            uint64_t StringConstCast = (uint64_t)v1165;
            uint64_t v9 = 0xD00000101;
            *(void *)v1165 = 0xD00000101;
            *((void *)v1165 + 3) = *(v11 - 5);
            *((void *)v1165 + 4) = *(v11 - 2);
            *((void *)v1165 + 5) = *v11;
            break;
          case 1272:
            int v542 = v26;
            uint64_t v549 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            uint64_t StringConstCast = (uint64_t)v549;
            uint64_t v550 = 0x1000000101;
            goto LABEL_1563;
          case 1273:
            int v1216 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1216;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x1300000101;
            goto LABEL_1498;
          case 1274:
          case 1311:
          case 1312:
            int v61 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v61;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x1F00000101;
            goto LABEL_1588;
          case 1275:
            int v542 = v26;
            uint64_t v549 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            uint64_t StringConstCast = (uint64_t)v549;
            uint64_t v550 = 0x1500000101;
            goto LABEL_1563;
          case 1276:
            int v542 = v26;
            uint64_t v543 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            uint64_t StringConstCast = (uint64_t)v543;
            uint64_t v544 = 0x1800000101;
            goto LABEL_930;
          case 1277:
            int v542 = v26;
            uint64_t v543 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            uint64_t StringConstCast = (uint64_t)v543;
            uint64_t v544 = 0x1A00000101;
LABEL_930:
            *(void *)uint64_t v543 = v544;
            unint64_t v1166 = makeString(*(v11 - 3));
            unint64_t v1167 = lcons(v1166, *(v11 - 5));
            goto LABEL_1564;
          case 1278:
            int v1797 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1797;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x1B00000101;
            goto LABEL_1605;
          case 1279:
            int v992 = v26;
            unint64_t v455 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v992;
            uint64_t StringConstCast = v455;
            uint64_t v9 = 0x1B00000101;
            *(void *)unint64_t v455 = 0x1B00000101;
            *(void *)(v455 + 16) = *(v11 - 3);
            uint64_t v993 = *(v11 - 5);
            goto LABEL_1545;
          case 1280:
            int v488 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v488;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x1C00000101;
            goto LABEL_1498;
          case 1281:
            int v542 = v26;
            uint64_t v549 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            uint64_t StringConstCast = (uint64_t)v549;
            uint64_t v550 = 0x1D00000101;
            goto LABEL_1563;
          case 1282:
            int v1713 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1713;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2000000101;
            goto LABEL_1498;
          case 1283:
            int v1787 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1787;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2200000101;
            goto LABEL_1588;
          case 1284:
            int v542 = v26;
            uint64_t v549 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            uint64_t StringConstCast = (uint64_t)v549;
            uint64_t v550 = 0x1100000101;
            goto LABEL_1563;
          case 1285:
            int v542 = v26;
            uint64_t v549 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            uint64_t StringConstCast = (uint64_t)v549;
            uint64_t v550 = 0x2400000101;
LABEL_1563:
            *(void *)uint64_t v549 = v550;
            unint64_t v1167 = makeString(*(v11 - 3));
LABEL_1564:
            int v26 = v542;
            *(void *)(StringConstCast + 24) = v1167;
            *(void *)(StringConstCast + 4errstart(20, 0) = *v11;
            *(unsigned char *)(StringConstCast + 52) = 0;
            break;
          case 1286:
            int v623 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v623;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2700000101;
            goto LABEL_1631;
          case 1287:
            int v454 = v26;
            unint64_t v455 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v454;
            uint64_t StringConstCast = v455;
            uint64_t v9 = 0x2700000101;
            goto LABEL_1416;
          case 1288:
            int v505 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v505;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2300000101;
            goto LABEL_1631;
          case 1289:
            int v904 = v26;
            unint64_t v455 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v904;
            uint64_t StringConstCast = v455;
            uint64_t v9 = 0x2300000101;
            goto LABEL_1416;
          case 1290:
            int v1811 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1811;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x3100000101;
            goto LABEL_1631;
          case 1291:
            int v1633 = v26;
            unint64_t v455 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1633;
            uint64_t StringConstCast = v455;
            uint64_t v9 = 0x3100000101;
            goto LABEL_1416;
          case 1292:
            int v1675 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1675;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x1700000101;
            goto LABEL_1631;
          case 1293:
            int v506 = v26;
            unint64_t v455 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v506;
            uint64_t StringConstCast = v455;
            uint64_t v9 = 0x1700000101;
            goto LABEL_1416;
          case 1294:
            int v1644 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1644;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x1400000101;
            goto LABEL_1631;
          case 1295:
            int v1605 = v26;
            unint64_t v455 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1605;
            uint64_t StringConstCast = v455;
            uint64_t v9 = 0x1400000101;
            goto LABEL_1416;
          case 1296:
            int v1815 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1815;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x1200000101;
LABEL_1631:
            *(double *)unint64_t v62 = *(double *)&v9;
            *(void *)(v62 + 16) = *(v11 - 3);
            *(void *)(v62 + 32) = 0;
            goto LABEL_1632;
          case 1297:
            int v1335 = v26;
            unint64_t v455 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1335;
            uint64_t StringConstCast = v455;
            uint64_t v9 = 0x1200000101;
LABEL_1416:
            *(double *)unint64_t v455 = *(double *)&v9;
            *(void *)(v455 + 16) = *(v11 - 3);
            *(void *)(v455 + 32) = 0;
            goto LABEL_1546;
          case 1298:
            int v1237 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1237;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x600000101;
            *(void *)unint64_t v62 = 0x600000101;
            int v391 = 39;
            goto LABEL_992;
          case 1299:
            int v1687 = v26;
            unint64_t v455 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1687;
            uint64_t StringConstCast = v455;
            uint64_t v9 = 0x600000101;
            *(void *)unint64_t v455 = 0x600000101;
            int v1290 = 39;
            goto LABEL_1543;
          case 1300:
            int v1168 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1168;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x600000101;
            *(void *)unint64_t v62 = 0x600000101;
            int v391 = 49;
            goto LABEL_992;
          case 1301:
            int v1289 = v26;
            unint64_t v455 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1289;
            uint64_t StringConstCast = v455;
            uint64_t v9 = 0x600000101;
            *(void *)unint64_t v455 = 0x600000101;
            int v1290 = 49;
            goto LABEL_1543;
          case 1302:
            int v390 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v390;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x600000101;
            *(void *)unint64_t v62 = 0x600000101;
            int v391 = 23;
            goto LABEL_992;
          case 1303:
            int v1752 = v26;
            unint64_t v455 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1752;
            uint64_t StringConstCast = v455;
            uint64_t v9 = 0x600000101;
            *(void *)unint64_t v455 = 0x600000101;
            int v1290 = 23;
            goto LABEL_1543;
          case 1304:
            int v571 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v571;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2600000101;
            *(void *)unint64_t v62 = 0x2600000101;
            goto LABEL_993;
          case 1305:
            int v1788 = v26;
            unint64_t v455 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1788;
            uint64_t StringConstCast = v455;
            uint64_t v9 = 0x2600000101;
            *(void *)unint64_t v455 = 0x2600000101;
            goto LABEL_1544;
          case 1306:
            int v507 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v507;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x600000101;
            *(void *)unint64_t v62 = 0x600000101;
            int v391 = 18;
LABEL_992:
            *(_DWORD *)(v62 + _Block_object_dispose(&a9, 8) = v391;
LABEL_993:
            *(void *)(v62 + 16) = *(v11 - 5);
            uint64_t v1238 = *(v11 - 2);
            goto LABEL_1606;
          case 1307:
            int v1667 = v26;
            unint64_t v455 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1667;
            uint64_t StringConstCast = v455;
            uint64_t v9 = 0x600000101;
            *(void *)unint64_t v455 = 0x600000101;
            int v1290 = 18;
LABEL_1543:
            *(_DWORD *)(v455 + _Block_object_dispose(&a9, 8) = v1290;
LABEL_1544:
            *(void *)(v455 + 16) = *(v11 - 5);
            uint64_t v993 = *(v11 - 2);
LABEL_1545:
            *(void *)(v455 + 32) = v993;
LABEL_1546:
            *(void *)(v455 + 4errstart(20, 0) = *v11;
            *(unsigned char *)(v455 + 52) = 1;
            break;
          case 1308:
            int v1789 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1789;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2100000101;
            goto LABEL_1605;
          case 1309:
            int v1336 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1336;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2A00000101;
LABEL_1605:
            *(double *)unint64_t v62 = *(double *)&v9;
            *(void *)(v62 + 16) = *(v11 - 3);
            uint64_t v1238 = *(v11 - 5);
            goto LABEL_1606;
          case 1310:
            int v1602 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            *(void *)uint64_t StringConstCast = 0xE00000101;
            unint64_t v1603 = makeString(*(v11 - 3));
            int v26 = v1602;
            *(void *)(StringConstCast + 24) = v1603;
            *(void *)(StringConstCast + 4errstart(20, 0) = *v11;
            break;
          case 1313:
            int v827 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v827;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2800000101;
LABEL_1588:
            *(double *)unint64_t v62 = *(double *)&v9;
            uint64_t v1238 = *(v11 - 3);
LABEL_1606:
            *(void *)(v62 + 32) = v1238;
            goto LABEL_1632;
          case 1314:
            int v1347 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1347;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2500000101;
            goto LABEL_1498;
          case 1315:
            int v737 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v737;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2D00000101;
            goto LABEL_1498;
          case 1316:
            int v1541 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1541;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2C00000101;
            goto LABEL_1498;
          case 1317:
            int v1270 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1270;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2E00000101;
            goto LABEL_1498;
          case 1318:
            int v407 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v407;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2B00000101;
            goto LABEL_1498;
          case 1319:
            int v489 = v26;
            unint64_t v62 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v489;
            uint64_t StringConstCast = v62;
            uint64_t v9 = 0x2F00000101;
LABEL_1498:
            *(double *)unint64_t v62 = *(double *)&v9;
            *(void *)(v62 + 24) = *(v11 - 3);
LABEL_1632:
            *(void *)(v62 + 4errstart(20, 0) = *v11;
            *(unsigned char *)(v62 + 52) = 0;
            break;
          case 1320:
            int v1688 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            *(void *)uint64_t StringConstCast = 0x400000101;
            *(_DWORD *)(StringConstCast + _Block_object_dispose(&a9, 8) = 47;
            unint64_t v1689 = makeRangeVarFromAnyName(*(v11 - 6), *(v12 - 6), COERCE_DOUBLE(0x400000101));
            int v26 = v1688;
            *(void *)(StringConstCast + 16) = v1689;
            *(void *)(StringConstCast + 32) = *(v11 - 3);
            *(void *)(StringConstCast + 4errstart(20, 0) = *(v11 - 1);
            *(_DWORD *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = *(_DWORD *)v11;
            *(unsigned char *)(StringConstCast + 52) = 0;
            break;
          case 1321:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x14D;
            break;
          case 1325:
            int v516 = v26;
            uint64_t v517 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            uint64_t StringConstCast = (uint64_t)v517;
            uint64_t v518 = 0x130000012CLL;
            goto LABEL_1523;
          case 1326:
            int v516 = v26;
            uint64_t v517 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            uint64_t StringConstCast = (uint64_t)v517;
            uint64_t v518 = 0x1C0000012CLL;
            goto LABEL_1523;
          case 1327:
            int v516 = v26;
            uint64_t v517 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            uint64_t StringConstCast = (uint64_t)v517;
            uint64_t v518 = 0x200000012CLL;
LABEL_1523:
            *(void *)uint64_t v517 = v518;
            *((void *)v517 + 2) = *(v11 - 5);
            goto LABEL_1524;
          case 1328:
            int v516 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            *(void *)uint64_t StringConstCast = 0x2A0000012CLL;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            unint64_t v738 = makeString(*(v11 - 7));
            list_make1_impl(226, v738);
            *(void *)(StringConstCast + 16) = v739;
            goto LABEL_1524;
          case 1329:
            int v516 = v26;
            v944 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            uint64_t StringConstCast = (uint64_t)v944;
            uint64_t v945 = 0x170000012CLL;
            goto LABEL_995;
          case 1330:
            int v516 = v26;
            v944 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            uint64_t StringConstCast = (uint64_t)v944;
            uint64_t v945 = 0x140000012CLL;
LABEL_995:
            *(void *)v944 = v945;
            *((void *)v944 + 1) = *(v11 - 5);
LABEL_1524:
            unint64_t v1736 = makeString(*v11);
            int v26 = v516;
            *(void *)(StringConstCast + 24) = v1736;
            *(unsigned char *)(StringConstCast + 32) = *((unsigned char *)v11 - 32);
            break;
          case 1333:
            int v1484 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1484;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x10000012DLL;
            goto LABEL_1622;
          case 1334:
            int v1744 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1744;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x70000012DLL;
            goto LABEL_1622;
          case 1335:
            int v1812 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1812;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x80000012DLL;
            goto LABEL_1622;
          case 1336:
            int v1730 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1730;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0xC0000012DLL;
            goto LABEL_1622;
          case 1337:
            int v432 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            *(void *)uint64_t StringConstCast = 0xF0000012DLL;
            unint64_t v676 = makeString(*(v11 - 3));
            goto LABEL_1258;
          case 1338:
            int v595 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v595;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x130000012DLL;
            goto LABEL_1622;
          case 1339:
            int v1580 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1580;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x190000012DLL;
            goto LABEL_1622;
          case 1340:
            int v432 = v26;
            uint64_t v433 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            uint64_t StringConstCast = (uint64_t)v433;
            uint64_t v434 = 0x180000012DLL;
            goto LABEL_584;
          case 1341:
            int v432 = v26;
            uint64_t v433 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            uint64_t StringConstCast = (uint64_t)v433;
            uint64_t v434 = 0x1A0000012DLL;
LABEL_584:
            *(void *)uint64_t v433 = v434;
            unint64_t v675 = makeString(*(v11 - 3));
            unint64_t v676 = lcons(v675, *(v11 - 5));
LABEL_1258:
            int v26 = v432;
            *(void *)(StringConstCast + 16) = v676;
            *(void *)(StringConstCast + 24) = *v11;
            *(unsigned char *)(StringConstCast + 32) = 0;
            break;
          case 1342:
            int v1011 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1011;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x1C0000012DLL;
            goto LABEL_1622;
          case 1343:
            int v1312 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1312;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x200000012DLL;
            goto LABEL_1622;
          case 1344:
            int v1407 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1407;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x270000012DLL;
            goto LABEL_1421;
          case 1345:
            int v1485 = v26;
            unint64_t v347 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1485;
            uint64_t StringConstCast = v347;
            uint64_t v9 = 0x270000012DLL;
            goto LABEL_1592;
          case 1346:
            int v1408 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1408;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x250000012DLL;
            goto LABEL_1622;
          case 1347:
            int v1391 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1391;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x2D0000012DLL;
            goto LABEL_1622;
          case 1348:
            int v1348 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1348;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x2C0000012DLL;
            goto LABEL_1622;
          case 1349:
            int v1406 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1406;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x2E0000012DLL;
            goto LABEL_1622;
          case 1350:
            int v1542 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1542;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x2B0000012DLL;
            goto LABEL_1622;
          case 1351:
            int v1642 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1642;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x230000012DLL;
            goto LABEL_1421;
          case 1352:
            int v1790 = v26;
            unint64_t v347 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1790;
            uint64_t StringConstCast = v347;
            uint64_t v9 = 0x230000012DLL;
            goto LABEL_1592;
          case 1353:
            int v624 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v624;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x310000012DLL;
            goto LABEL_1421;
          case 1354:
            int v1409 = v26;
            unint64_t v347 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1409;
            uint64_t StringConstCast = v347;
            uint64_t v9 = 0x310000012DLL;
            goto LABEL_1592;
          case 1355:
            int v519 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v519;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x170000012DLL;
            goto LABEL_1421;
          case 1356:
            int v1634 = v26;
            unint64_t v347 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1634;
            uint64_t StringConstCast = v347;
            uint64_t v9 = 0x170000012DLL;
            goto LABEL_1592;
          case 1357:
            int v1313 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1313;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x120000012DLL;
LABEL_1421:
            *(double *)unint64_t v345 = *(double *)&v9;
            *(void *)(v345 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            goto LABEL_1624;
          case 1358:
            int v1251 = v26;
            unint64_t v347 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1251;
            uint64_t StringConstCast = v347;
            uint64_t v9 = 0x120000012DLL;
LABEL_1592:
            *(double *)unint64_t v347 = *(double *)&v9;
            *(void *)(v347 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
LABEL_1593:
            *(void *)(v347 + 24) = *v11;
LABEL_1594:
            *(unsigned char *)(v347 + 32) = 1;
            break;
          case 1359:
            int v1572 = v26;
            unint64_t v345 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1572;
            uint64_t StringConstCast = v345;
            uint64_t v9 = 0x2F0000012DLL;
LABEL_1622:
            *(double *)unint64_t v345 = *(double *)&v9;
            uint64_t v468 = *(v11 - 3);
LABEL_1623:
            *(void *)(v345 + 16) = v468;
LABEL_1624:
            *(void *)(v345 + 24) = *v11;
            *(unsigned char *)(v345 + 32) = 0;
            break;
          case 1360:
            int v441 = v26;
            unint64_t v428 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v441;
            uint64_t StringConstCast = v428;
            int v442 = 303;
            goto LABEL_1112;
          case 1363:
          case 1488:
            uint64_t v43 = (const char *)*(v11 - 2);
            int v45 = *(v12 - 2);
            goto LABEL_1597;
          case 1370:
            int v1337 = v26;
            unint64_t v428 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1337;
            uint64_t StringConstCast = v428;
            int v442 = 304;
LABEL_1112:
            *(_DWORD *)unint64_t v428 = v442;
            uint64_t v703 = *(v11 - 4);
LABEL_1113:
            *(void *)(v428 + _Block_object_dispose(&a9, 8) = v703;
            *(void *)(v428 + 16) = *(v11 - 1);
            break;
          case 1371:
            int v687 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v687;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x10000012ELL;
            goto LABEL_1610;
          case 1372:
            int v905 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v905;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x70000012ELL;
            goto LABEL_1610;
          case 1373:
            int v1800 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1800;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x80000012ELL;
            goto LABEL_1610;
          case 1374:
            int v572 = v26;
            uint64_t v573 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v573;
            uint64_t v574 = 0x90000012ELL;
            goto LABEL_1626;
          case 1375:
            int v994 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v994;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0xC0000012ELL;
            goto LABEL_1610;
          case 1376:
            int v848 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v848;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x130000012ELL;
            goto LABEL_1610;
          case 1377:
            int v572 = v26;
            uint64_t v573 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v573;
            uint64_t v574 = 0x150000012ELL;
            goto LABEL_1626;
          case 1378:
            int v1645 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1645;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x160000012ELL;
            goto LABEL_1610;
          case 1379:
            int v688 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v688;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x190000012ELL;
            goto LABEL_1610;
          case 1380:
            int v572 = v26;
            Swift::OpaquePointer v741 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v741;
            uint64_t v742 = 0x180000012ELL;
            goto LABEL_1555;
          case 1381:
            int v572 = v26;
            Swift::OpaquePointer v741 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v741;
            uint64_t v742 = 0x1A0000012ELL;
LABEL_1555:
            *(void *)Swift::OpaquePointer v741 = v742;
            unint64_t v1767 = makeString(*(v11 - 3));
            unint64_t v1768 = lcons(v1767, *(v11 - 5));
            goto LABEL_1627;
          case 1382:
            int v554 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v554;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x1C0000012ELL;
            goto LABEL_1610;
          case 1383:
            int v1778 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1778;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x200000012ELL;
            goto LABEL_1610;
          case 1384:
            int v572 = v26;
            uint64_t v573 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v573;
            uint64_t v574 = 0x220000012ELL;
            goto LABEL_1626;
          case 1385:
            int v1012 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1012;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x2F0000012ELL;
            goto LABEL_1610;
          case 1386:
            int v572 = v26;
            uint64_t v573 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v573;
            uint64_t v574 = 0x280000012ELL;
            goto LABEL_1626;
          case 1387:
            int v1486 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1486;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x250000012ELL;
            goto LABEL_1610;
          case 1388:
            int v1612 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1612;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x2C0000012ELL;
            goto LABEL_1610;
          case 1389:
            int v1338 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1338;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x2B0000012ELL;
LABEL_1610:
            *(double *)unint64_t v70 = *(double *)&v9;
            *(void *)(v70 + 16) = *(v11 - 3);
            goto LABEL_1722;
          case 1390:
            int v572 = v26;
            uint64_t v573 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v573;
            uint64_t v574 = 0x100000012ELL;
LABEL_1626:
            *(void *)uint64_t v573 = v574;
            unint64_t v1768 = makeString(*(v11 - 3));
LABEL_1627:
            int v26 = v572;
            *(void *)(StringConstCast + 16) = v1768;
            *(void *)(StringConstCast + 24) = *v11;
            break;
          case 1391:
            int v613 = v26;
            v614 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v614;
            uint64_t v615 = 0x110000012ELL;
            goto LABEL_1158;
          case 1392:
            int v613 = v26;
            v614 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v614;
            uint64_t v615 = 0xE0000012ELL;
            goto LABEL_1158;
          case 1393:
            int v613 = v26;
            v614 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v614;
            uint64_t v615 = 0x1D0000012ELL;
            goto LABEL_1158;
          case 1394:
            int v613 = v26;
            v614 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t StringConstCast = (uint64_t)v614;
            uint64_t v615 = 0x240000012ELL;
LABEL_1158:
            *(void *)v614 = v615;
            unint64_t v1392 = makeString(*(v11 - 3));
            int v26 = v613;
            *(void *)(StringConstCast + 16) = v1392;
            *(void *)(StringConstCast + 24) = *v11;
            break;
          case 1395:
            int v411 = v26;
            unint64_t v1613 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            uint64_t StringConstCast = v1613;
            *(_DWORD *)unint64_t v1613 = 337;
            *(void *)(v1613 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v1613 + 16) = *v11;
            v1614 = (_DWORD *)*(v11 - 1);
            if (v1614)
            {
              if (*v1614 == 226) {
                *(void *)(v1613 + 24) = v1614;
              }
              else {
                *(unsigned char *)(v1613 + 32) = 1;
              }
              int v26 = v411;
            }
            else
            {
LABEL_1849:
              int v26 = v411;
            }
            break;
          case 1399:
            int v32 = v26;
            DefEleunint64_t m = (unint64_t)makeInteger(1);
            goto LABEL_1777;
          case 1400:
            int v1559 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1559;
            uint64_t StringConstCast = v66;
            int v494 = 338;
            goto LABEL_1321;
          case 1401:
            int v1487 = v26;
            unint64_t v1488 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1487;
            uint64_t StringConstCast = v1488;
            *(_DWORD *)unint64_t v1488 = 338;
            *(void *)(v1488 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v1488 + 24) = *v11;
            *(_DWORD *)(v1488 + 36) = 2;
            break;
          case 1402:
            int v1291 = v26;
            unint64_t v1292 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1291;
            uint64_t StringConstCast = v1292;
            *(_DWORD *)unint64_t v1292 = 338;
            *(void *)(v1292 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v1292 + 24) = *v11;
            *(_DWORD *)(v1292 + 36) = 1;
            break;
          case 1403:
            int v1035 = v26;
            unint64_t v1036 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1035;
            uint64_t StringConstCast = v1036;
            *(_DWORD *)unint64_t v1036 = 338;
            *(void *)(v1036 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v1036 + 24) = *v11;
            *(_DWORD *)(v1036 + 36) = 3;
            break;
          case 1404:
            int v863 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v863;
            uint64_t StringConstCast = v198;
            *(_DWORD *)unint64_t v198 = 339;
            *(void *)(v198 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(void *)(v198 + 16) = *(v11 - 3);
            goto LABEL_1494;
          case 1405:
          case 1418:
          case 1464:
          case 1484:
          case 1506:
          case 1541:
          case 2320:
            uint64_t v2 = (const void **)*v11;
            goto LABEL_69;
          case 1408:
            int v479 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v479;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 340;
            *(void *)unint64_t v198 = 340;
            uint64_t v480 = *(v11 - 2);
            goto LABEL_1786;
          case 1409:
            int v1489 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1489;
            uint64_t StringConstCast = v66;
            uint64_t v9 = 0x100000154;
LABEL_1806:
            *(double *)unint64_t v66 = *(double *)&v9;
            goto LABEL_1807;
          case 1410:
            int v1271 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1271;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x300000154;
            *(void *)unint64_t v198 = 0x300000154;
            uint64_t v480 = *(v11 - 3);
LABEL_1786:
            *(void *)(v198 + _Block_object_dispose(&a9, 8) = v480;
            goto LABEL_1787;
          case 1411:
            int v1668 = v26;
            unint64_t v198 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1668;
            uint64_t StringConstCast = v198;
            uint64_t v9 = 0x200000154;
            *(void *)unint64_t v198 = 0x200000154;
            *(void *)(v198 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
LABEL_1494:
            *(void *)(v198 + 24) = *(v11 - 1);
LABEL_1787:
            *(void *)(v198 + 32) = *v11;
            break;
          case 1412:
            int v1217 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            *(void *)uint64_t StringConstCast = 0x400000154;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            int v1218 = 1;
            goto LABEL_1124;
          case 1413:
            int v1217 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            *(void *)uint64_t StringConstCast = 0x400000154;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            int v1218 = 0;
LABEL_1124:
            v1349 = makeInteger(v1218);
            unint64_t v1350 = makeDefElem((uint64_t)"enabled", (uint64_t)v1349, *(v12 - 3));
            *(double *)&uint64_t v9 = list_make1_impl(226, v1350);
            int v26 = v1217;
            *(void *)(StringConstCast + 32) = v1351;
            break;
          case 1414:
            int v545 = v26;
            unint64_t v509 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v545;
            uint64_t StringConstCast = v509;
            *(_DWORD *)unint64_t v509 = 341;
            *(void *)(v509 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(unsigned char *)(v509 + 16) = 0;
            goto LABEL_485;
          case 1415:
            int v508 = v26;
            unint64_t v509 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v508;
            uint64_t StringConstCast = v509;
            *(_DWORD *)unint64_t v509 = 341;
            *(void *)(v509 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(unsigned char *)(v509 + 16) = 1;
LABEL_485:
            *(_DWORD *)(v509 + 2errstart(20, 0) = *(_DWORD *)v11;
            break;
          case 1416:
            int v1261 = v26;
            unint64_t v1262 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1261;
            uint64_t StringConstCast = v1262;
            *(_DWORD *)unint64_t v1262 = 258;
            *(unsigned char *)(v1262 + 4_Block_object_dispose(&a9, 8) = *((unsigned char *)v11 - 88);
            *(void *)(v1262 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v1262 + 16) = *(v11 - 9);
            *(void *)(v1262 + 24) = *(v11 - 3);
            *(_DWORD *)(v1262 + 32) = *((_DWORD *)v11 - 12);
            *(unsigned char *)(v1262 + 36) = *((unsigned char *)v11 - 8);
            *(void *)(v1262 + 4errstart(20, 0) = *v11;
            break;
          case 1420:
            uint64_t v2 = (const void **)*v11;
            uint64_t StringConstCast = *(v11 - 2);
            if (!*v11) {
              break;
            }
            uint64_t v34 = *(v11 - 2);
            goto LABEL_1776;
          case 1421:
            uint64_t v2 = (const void **)*v11;
            if (*v11) {
              goto LABEL_69;
            }
LABEL_1090:
            uint64_t StringConstCast = 0;
            break;
          case 1436:
            int v704 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v704;
            uint64_t StringConstCast = v66;
            int v705 = 259;
            goto LABEL_1402;
          case 1439:
            int v1659 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v1659;
            uint64_t StringConstCast = v52;
            int v92 = 260;
            goto LABEL_1634;
          case 1440:
            int v1410 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v1410;
            uint64_t StringConstCast = v52;
            int v92 = 261;
            goto LABEL_1634;
          case 1441:
            int v946 = v26;
            unint64_t v947 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v946;
            uint64_t StringConstCast = v947;
            *(_DWORD *)unint64_t v947 = 261;
            *(void *)(v947 + _Block_object_dispose(&a9, 8) = 0;
            break;
          case 1442:
          case 1447:
            int v81 = v26;
            unint64_t v82 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v81;
            uint64_t StringConstCast = v82;
            uint64_t v9 = 0x300000106;
            goto LABEL_222;
          case 1443:
            int v648 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v648;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 262;
            *(void *)unint64_t v52 = 262;
            goto LABEL_1755;
          case 1444:
            int v849 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v849;
            uint64_t StringConstCast = v52;
            uint64_t v9 = 0x100000106;
            *(void *)unint64_t v52 = 0x100000106;
            goto LABEL_1755;
          case 1445:
          case 1446:
            int v166 = v26;
            unint64_t v82 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v166;
            uint64_t StringConstCast = v82;
            uint64_t v9 = 0x200000106;
LABEL_222:
            *(double *)unint64_t v82 = *(double *)&v9;
            *(void *)(v82 + _Block_object_dispose(&a9, 8) = 0;
            *(unsigned char *)(v82 + 32) = *(unsigned char *)v11;
            break;
          case 1448:
            int v1615 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1615;
            uint64_t StringConstCast = v66;
            uint64_t v9 = 0x400000106;
            *(void *)unint64_t v66 = 0x400000106;
            goto LABEL_1809;
          case 1449:
          case 1450:
            int v164 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v164;
            uint64_t StringConstCast = v66;
            uint64_t v9 = 0x500000106;
            *(void *)unint64_t v66 = 0x500000106;
            goto LABEL_1809;
          case 1451:
          case 1452:
            int v165 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v165;
            uint64_t StringConstCast = v66;
            uint64_t v9 = 0x600000106;
            *(void *)unint64_t v66 = 0x600000106;
            goto LABEL_1809;
          case 1453:
            int v1646 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1646;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x700000106;
            goto LABEL_1514;
          case 1454:
            int v616 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v616;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x800000106;
            goto LABEL_1514;
          case 1455:
            int v1725 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1725;
            uint64_t StringConstCast = v70;
            uint64_t v9 = 0x900000106;
LABEL_1514:
            *(double *)unint64_t v70 = *(double *)&v9;
            goto LABEL_1722;
          case 1459:
            uint64_t v510 = v24;
            uint64_t v511 = *v11;
            int v512 = *v12;
            int v2036 = v26;
            unint64_t v513 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)unint64_t v513 = 349;
            *(_DWORD *)(v513 + _Block_object_dispose(&a9, 8) = 223;
            *(void *)(v513 + 16) = v511;
            uint64_t v24 = v510;
            *(_DWORD *)(v513 + 24) = v512;
            unint64_t v514 = makeDefElem((uint64_t)"transaction_isolation", v513, *(v12 - 2));
            int v26 = v2036;
            uint64_t StringConstCast = v514;
            break;
          case 1460:
            uint64_t v1490 = v24;
            int v1491 = *(v12 - 1);
            int v598 = v26;
            v1492 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t v599 = v1492;
            _DWORD *v1492 = 349;
            v1492[2] = 221;
            v1492[4] = 1;
            goto LABEL_1297;
          case 1461:
            uint64_t v1490 = v24;
            int v1491 = *(v12 - 1);
            int v598 = v26;
            v1492 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t v599 = v1492;
            _DWORD *v1492 = 349;
            v1492[2] = 221;
            v1492[4] = 0;
LABEL_1297:
            v1492[6] = v1491;
            uint64_t v24 = v1490;
            int v600 = *(v12 - 1);
            uint64_t v629 = "transaction_read_only";
            goto LABEL_1399;
          case 1462:
            uint64_t v596 = v24;
            int v597 = *v12;
            int v598 = v26;
            uint64_t v599 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *uint64_t v599 = 349;
            v599[2] = 221;
            v599[4] = 1;
            v599[6] = v597;
            uint64_t v24 = v596;
            int v600 = *v12;
            goto LABEL_548;
          case 1463:
            uint64_t v627 = v24;
            int v628 = *(v12 - 1);
            int v598 = v26;
            uint64_t v599 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *uint64_t v599 = 349;
            v599[2] = 221;
            v599[4] = 0;
            v599[6] = v628;
            uint64_t v24 = v627;
            int v600 = *(v12 - 1);
LABEL_548:
            uint64_t v629 = "transaction_deferrable";
            goto LABEL_1399;
          case 1472:
            int v1411 = v26;
            unint64_t v465 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1411;
            uint64_t StringConstCast = v465;
            *(_DWORD *)unint64_t v465 = 263;
            uint64_t v1412 = *(v11 - 5);
            *(void *)(v465 + _Block_object_dispose(&a9, 8) = v1412;
            *(unsigned char *)(v1412 + 33) = *((_DWORD *)v11 - 14);
            *(void *)(v465 + 16) = *(v11 - 4);
            *(void *)(v465 + 24) = *(v11 - 1);
            *(unsigned char *)(v465 + 32) = 0;
            goto LABEL_1178;
          case 1473:
            int v464 = v26;
            unint64_t v465 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v464;
            uint64_t StringConstCast = v465;
            *(_DWORD *)unint64_t v465 = 263;
            uint64_t v466 = *(v11 - 5);
            *(void *)(v465 + _Block_object_dispose(&a9, 8) = v466;
            *(unsigned char *)(v466 + 33) = *((_DWORD *)v11 - 14);
            *(void *)(v465 + 16) = *(v11 - 4);
            *(void *)(v465 + 24) = *(v11 - 1);
            *(unsigned char *)(v465 + 32) = 1;
LABEL_1178:
            *(void *)(v465 + 4errstart(20, 0) = *(v11 - 3);
            *(_DWORD *)(v465 + 4_Block_object_dispose(&a9, 8) = *(_DWORD *)v11;
            break;
          case 1474:
            int v555 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            *(_DWORD *)uint64_t StringConstCast = 263;
            uint64_t v556 = *(v11 - 7);
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v556;
            *(unsigned char *)(v556 + 33) = *((_DWORD *)v11 - 20);
            uint64_t v557 = *(v11 - 5);
            *(void *)(StringConstCast + 16) = v557;
            unint64_t RecursiveViewSelect = makeRecursiveViewSelect(*(void *)(*(void *)(StringConstCast + 8) + 24), v557, *(v11 - 1), v558);
            int v26 = v555;
            *(void *)(StringConstCast + 24) = RecursiveViewSelect;
            *(unsigned char *)(StringConstCast + 32) = 0;
            *(void *)(StringConstCast + 4errstart(20, 0) = *(v11 - 3);
            int v560 = *(_DWORD *)v11;
            *(_DWORD *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = *(_DWORD *)v11;
            if (v560) {
              base_yyparse_cold_26();
            }
            break;
          case 1475:
            int v1753 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            *(_DWORD *)uint64_t StringConstCast = 263;
            uint64_t v1754 = *(v11 - 7);
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1754;
            *(unsigned char *)(v1754 + 33) = *((_DWORD *)v11 - 20);
            uint64_t v1755 = *(v11 - 5);
            *(void *)(StringConstCast + 16) = v1755;
            unint64_t v1757 = makeRecursiveViewSelect(*(void *)(*(void *)(StringConstCast + 8) + 24), v1755, *(v11 - 1), v1756);
            int v26 = v1753;
            *(void *)(StringConstCast + 24) = v1757;
            *(unsigned char *)(StringConstCast + 32) = 1;
            *(void *)(StringConstCast + 4errstart(20, 0) = *(v11 - 3);
            int v1758 = *(_DWORD *)v11;
            *(_DWORD *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = *(_DWORD *)v11;
            if (v1758) {
              base_yyparse_cold_27();
            }
            break;
          case 1480:
            int v561 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v561;
            uint64_t StringConstCast = v52;
            int v92 = 264;
            goto LABEL_1634;
          case 1481:
            int v948 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v948;
            uint64_t StringConstCast = v66;
            int v494 = 266;
            goto LABEL_1321;
          case 1486:
            uint64_t v1616 = v24;
            v1617 = (const char *)*(v11 - 2);
            int v598 = v26;
            unint64_t v1618 = (unint64_t)makeInteger(*(_DWORD *)v11);
            goto LABEL_1398;
          case 1487:
            uint64_t v1616 = v24;
            v1617 = (const char *)*(v11 - 2);
            int v598 = v26;
            unint64_t v1618 = makeString(*v11);
LABEL_1398:
            uint64_t v599 = (_DWORD *)v1618;
            int v600 = *(v12 - 2);
            uint64_t v629 = v1617;
            uint64_t v24 = v1616;
LABEL_1399:
            DefEleunint64_t m = makeDefElem((uint64_t)v629, (uint64_t)v599, v600);
            int v26 = v598;
            goto LABEL_1778;
          case 1490:
            uint64_t v37 = "connection_limit";
            goto LABEL_77;
          case 1491:
          case 1492:
          case 1493:
          case 1494:
          case 1495:
            uint64_t v37 = (const char *)*v11;
LABEL_77:
            int v32 = v26;
            DefEleunint64_t m = (unint64_t)pstrdup(v37);
            goto LABEL_1777;
          case 1498:
            int v493 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v493;
            uint64_t StringConstCast = v66;
            int v494 = 286;
LABEL_1321:
            *(_DWORD *)unint64_t v66 = v494;
LABEL_1807:
            uint64_t v950 = *(v11 - 2);
            goto LABEL_1808;
          case 1499:
            int v749 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v749;
            uint64_t StringConstCast = v66;
            int v705 = 286;
            goto LABEL_1402;
          case 1500:
            int v751 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(_DWORD *)uint64_t StringConstCast = 286;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            unint64_t v754 = makeString(*v11);
            int v752 = *v12;
            v753 = "tablespace";
            goto LABEL_1474;
          case 1501:
            int v1619 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1619;
            uint64_t StringConstCast = v66;
            int v705 = 287;
            goto LABEL_1402;
          case 1502:
            int v495 = v26;
            unint64_t v496 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v495;
            uint64_t StringConstCast = v496;
            *(_DWORD *)unint64_t v496 = 267;
            *(void *)(v496 + _Block_object_dispose(&a9, 8) = *v11;
            *(unsigned char *)(v496 + 16) = 0;
            *(void *)(v496 + 24) = 0;
            break;
          case 1503:
            int v1543 = v26;
            unint64_t v1544 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1543;
            uint64_t StringConstCast = v1544;
            *(_DWORD *)unint64_t v1544 = 267;
            *(void *)(v1544 + _Block_object_dispose(&a9, 8) = *v11;
            *(unsigned char *)(v1544 + 16) = 1;
            *(void *)(v1544 + 24) = 0;
            break;
          case 1504:
            int v1591 = v26;
            unint64_t v690 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1591;
            uint64_t StringConstCast = v690;
            *(_DWORD *)unint64_t v690 = 267;
            *(void *)(v690 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(unsigned char *)(v690 + 16) = 0;
            goto LABEL_1364;
          case 1505:
            int v689 = v26;
            unint64_t v690 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v689;
            uint64_t StringConstCast = v690;
            *(_DWORD *)unint64_t v690 = 267;
            *(void *)(v690 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(unsigned char *)(v690 + 16) = 1;
            goto LABEL_1364;
          case 1508:
            int v45 = *v12;
            uint64_t v43 = "force";
LABEL_1597:
            uint64_t v44 = 0;
            goto LABEL_1598;
          case 1509:
            int v1606 = v26;
            unint64_t v1607 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v1606;
            uint64_t StringConstCast = v1607;
            *(_DWORD *)unint64_t v1607 = 343;
            *(void *)(v1607 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            break;
          case 1510:
          case 1511:
            int v91 = v26;
            unint64_t v52 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v91;
            uint64_t StringConstCast = v52;
            int v92 = 332;
LABEL_1634:
            *(_DWORD *)unint64_t v52 = v92;
LABEL_1755:
            *(void *)(v52 + _Block_object_dispose(&a9, 8) = *v11;
            break;
          case 1512:
            int v1581 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            *(_DWORD *)uint64_t StringConstCast = 265;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(StringConstCast + 16) = *(v11 - 1);
            SplitColQualList(*v11, (uint64_t *)(StringConstCast + 32), (int **)(StringConstCast + 24));
            int v26 = v1581;
            break;
          case 1513:
            int v1413 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1413;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 239;
            *(unsigned char *)(v70 + 4) = 84;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            goto LABEL_1722;
          case 1514:
            int v638 = v26;
            unint64_t v639 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v638;
            uint64_t StringConstCast = v639;
            *(_DWORD *)unint64_t v639 = 239;
            char v640 = 78;
            goto LABEL_974;
          case 1515:
            int v1219 = v26;
            unint64_t v639 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1219;
            uint64_t StringConstCast = v639;
            *(_DWORD *)unint64_t v639 = 239;
            char v640 = 79;
LABEL_974:
            *(unsigned char *)(v639 + 4) = v640;
            *(void *)(v639 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            break;
          case 1516:
            int v1252 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1252;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 239;
            *(unsigned char *)(v70 + 4) = 67;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            goto LABEL_1722;
          case 1517:
            int v786 = v26;
            unint64_t v787 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v786;
            uint64_t StringConstCast = v787;
            *(_DWORD *)unint64_t v787 = 239;
            *(unsigned char *)(v787 + 4) = 88;
            *(void *)(v787 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v787 + 16) = *(v11 - 1);
            *(_DWORD *)(v787 + 32) = *(_DWORD *)v11;
            *(unsigned char *)(v787 + 36) = 0;
            break;
          case 1518:
            int v1737 = v26;
            unint64_t v1738 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1737;
            uint64_t StringConstCast = v1738;
            *(_DWORD *)unint64_t v1738 = 239;
            *(unsigned char *)(v1738 + 4) = 88;
            *(void *)(v1738 + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(void *)(v1738 + 16) = *(v11 - 1);
            *(_DWORD *)(v1738 + 32) = *(_DWORD *)v11;
            *(unsigned char *)(v1738 + 36) = 1;
            break;
          case 1519:
            int v949 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v949;
            uint64_t StringConstCast = v66;
            *(_DWORD *)unint64_t v66 = 239;
            *(unsigned char *)(v66 + 4) = 86;
            uint64_t v950 = *(v11 - 3);
            goto LABEL_1808;
          case 1522:
            int v1620 = v26;
            unint64_t v66 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1620;
            uint64_t StringConstCast = v66;
            int v705 = 311;
LABEL_1402:
            *(_DWORD *)unint64_t v66 = v705;
            uint64_t v950 = *(v11 - 1);
LABEL_1808:
            *(void *)(v66 + _Block_object_dispose(&a9, 8) = v950;
LABEL_1809:
            *(void *)(v66 + 16) = *v11;
            break;
          case 1523:
            int v520 = v26;
            unint64_t v521 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v520;
            uint64_t StringConstCast = v521;
            uint64_t v9 = 312;
            *(void *)unint64_t v521 = 312;
            *(void *)(v521 + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(void *)(v521 + 16) = *(v11 - 2);
            *(void *)(v521 + 24) = *v11;
            *(_WORD *)(v521 + 32) = 0;
            break;
          case 1524:
            int v677 = v26;
            unint64_t v678 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v677;
            uint64_t StringConstCast = v678;
            uint64_t v9 = 0x100000138;
            *(void *)unint64_t v678 = 0x100000138;
            *(void *)(v678 + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(void *)(v678 + 16) = *(v11 - 2);
            *(void *)(v678 + 24) = *v11;
            *(_WORD *)(v678 + 32) = 1;
            break;
          case 1525:
            int v951 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            *(void *)uint64_t StringConstCast = 0x200000138;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(void *)(StringConstCast + 16) = 0;
            goto LABEL_1265;
          case 1526:
            int v951 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            *(void *)uint64_t StringConstCast = 0x300000138;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 8);
            *(void *)(StringConstCast + 16) = *(v11 - 4);
LABEL_1265:
            *(double *)&uint64_t v9 = list_make2_impl(226, *(v11 - 2), *v11);
            int v26 = v951;
            *(void *)(StringConstCast + 24) = v1493;
            *(_WORD *)(StringConstCast + 32) = 256;
            break;
          case 1527:
            int v1692 = v26;
            unint64_t v1693 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1692;
            uint64_t StringConstCast = v1693;
            uint64_t v9 = 0x400000138;
            *(void *)unint64_t v1693 = 0x400000138;
            *(void *)(v1693 + _Block_object_dispose(&a9, 8) = *(v11 - 4);
            *(void *)(v1693 + 16) = *v11;
            *(unsigned char *)(v1693 + 34) = 0;
            break;
          case 1528:
            int v661 = v26;
            unint64_t v662 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v661;
            uint64_t StringConstCast = v662;
            uint64_t v9 = 0x400000138;
            *(void *)unint64_t v662 = 0x400000138;
            *(void *)(v662 + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(void *)(v662 + 16) = *v11;
            *(unsigned char *)(v662 + 34) = 1;
            break;
          case 1531:
            int v1560 = v26;
            unint64_t v1561 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1560;
            uint64_t StringConstCast = v1561;
            *(_DWORD *)unint64_t v1561 = 289;
            *(void *)(v1561 + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(void *)(v1561 + 16) = *(v11 - 4);
            *(void *)(v1561 + 24) = *(v11 - 2);
            *(void *)(v1561 + 32) = *v11;
            *(unsigned char *)(v1561 + 4errstart(20, 0) = *((unsigned char *)v11 - 64);
            break;
          case 1532:
            int v750 = v26;
            unint64_t v588 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v750;
            uint64_t StringConstCast = v588;
            *(_DWORD *)unint64_t v588 = 245;
            *(void *)(v588 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v588 + 16) = *v11;
            *(_DWORD *)(v588 + 24) = 0;
            int v589 = *((unsigned __int8 *)v11 - 16);
            goto LABEL_643;
          case 1533:
            int v587 = v26;
            unint64_t v588 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v587;
            uint64_t StringConstCast = v588;
            *(_DWORD *)unint64_t v588 = 245;
            *(void *)(v588 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v588 + 16) = 0;
            *(_DWORD *)(v588 + 24) = 0;
            int v589 = *(unsigned __int8 *)v11;
            goto LABEL_643;
          case 1534:
            int v617 = v26;
            unint64_t v588 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v617;
            uint64_t StringConstCast = v588;
            *(_DWORD *)unint64_t v588 = 245;
            *(void *)(v588 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v588 + 16) = *(v11 - 2);
            *(_DWORD *)(v588 + 24) = 0;
            int v589 = *((unsigned __int8 *)v11 - 24);
LABEL_643:
            *(_DWORD *)(v588 + 24) = 2 * v589;
            break;
          case 1537:
            int v2061 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 268;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = 0;
            if (*((unsigned char *)v11 - 32))
            {
              unint64_t v1739 = makeDefElem((uint64_t)"full", 0, *(v12 - 4));
              uint64_t v1740 = lappend(0, v1739);
              *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1740;
            }
            else
            {
              uint64_t v1740 = 0;
            }
            if (*((unsigned char *)v11 - 24))
            {
              unint64_t v1939 = makeDefElem((uint64_t)"freeze", 0, *(v12 - 3));
              uint64_t v1740 = lappend(v1740, v1939);
              *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1740;
            }
            if (*((unsigned char *)v11 - 16))
            {
              unint64_t v1940 = makeDefElem((uint64_t)"verbose", 0, *(v12 - 2));
              uint64_t v1740 = lappend(v1740, v1940);
              *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1740;
            }
            if (*((unsigned char *)v11 - 8))
            {
              unint64_t v1941 = makeDefElem((uint64_t)"analyze", 0, *(v12 - 1));
              *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = lappend(v1740, v1941);
            }
            *(void *)(StringConstCast + 16) = *v11;
            *(unsigned char *)(StringConstCast + 24) = 1;
            int v26 = v2061;
            break;
          case 1538:
            int v706 = v26;
            unint64_t v430 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v706;
            uint64_t StringConstCast = v430;
            int v431 = 268;
LABEL_609:
            *(_DWORD *)unint64_t v430 = v431;
            *(void *)(v430 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v430 + 16) = *v11;
            *(unsigned char *)(v430 + 24) = 1;
            break;
          case 1539:
            int v481 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 268;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = 0;
            if (*((unsigned char *)v11 - 8))
            {
              unint64_t v482 = makeDefElem((uint64_t)"verbose", 0, *(v12 - 1));
              *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = lappend(0, v482);
            }
            *(void *)(StringConstCast + 16) = *v11;
            *(unsigned char *)(StringConstCast + 24) = 0;
            int v26 = v481;
            break;
          case 1540:
            int v601 = v26;
            unint64_t v602 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v601;
            uint64_t StringConstCast = v602;
            int v603 = 268;
LABEL_1496:
            *(_DWORD *)unint64_t v602 = v603;
            *(void *)(v602 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v602 + 16) = *v11;
            *(unsigned char *)(v602 + 24) = 0;
            break;
          case 1545:
          case 1581:
            int v32 = v26;
            DefEleunint64_t m = makeDefElem(*(v11 - 1), *v11, *(v12 - 1));
            goto LABEL_1777;
          case 1547:
          case 1583:
            uint64_t StringConstCast = (uint64_t)"analyze";
            break;
          case 1561:
            int v32 = v26;
            DefEleunint64_t m = makeVacuumRelation(*(v11 - 1), 0, *v11, *(double *)&v9);
            goto LABEL_1777;
          case 1562:
          case 1579:
          case 1613:
          case 1649:
          case 1685:
            uint64_t v2 = (const void **)*v11;
            goto LABEL_69;
          case 1566:
            int v1239 = v26;
            unint64_t v1240 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1239;
            uint64_t StringConstCast = v1240;
            *(_DWORD *)unint64_t v1240 = 269;
            *(void *)(v1240 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v1240 + 16) = 0;
            break;
          case 1567:
            int v2054 = v26;
            uint64_t v1452 = v24;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(_DWORD *)uint64_t StringConstCast = 269;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *v11;
            unint64_t v1714 = makeDefElem((uint64_t)"analyze", 0, *(v12 - 2));
            *(double *)&uint64_t v9 = list_make1_impl(226, v1714);
            *(void *)(StringConstCast + 16) = v1715;
            if (!*((unsigned char *)v11 - 8)) {
              goto LABEL_1501;
            }
            uint64_t v1716 = v1715;
            unint64_t v1717 = makeDefElem((uint64_t)"verbose", 0, *(v12 - 1));
            *(void *)(StringConstCast + 16) = lappend(v1716, v1717);
            uint64_t v24 = v1452;
            int v26 = v2054;
            break;
          case 1568:
            int v751 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(_DWORD *)uint64_t StringConstCast = 269;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *v11;
            int v752 = *(v12 - 1);
            v753 = "verbose";
            unint64_t v754 = 0;
LABEL_1474:
            unint64_t v1690 = makeDefElem((uint64_t)v753, v754, v752);
            *(double *)&uint64_t v9 = list_make1_impl(226, v1690);
            int v26 = v751;
            *(void *)(StringConstCast + 16) = v1691;
            break;
          case 1569:
            int v1352 = v26;
            unint64_t v1353 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1352;
            uint64_t StringConstCast = v1353;
            *(_DWORD *)unint64_t v1353 = 269;
            *(void *)(v1353 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v1353 + 16) = *(v11 - 2);
            break;
          case 1587:
            int v1702 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1702;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 294;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            goto LABEL_1482;
          case 1588:
          case 1597:
          case 1663:
          case 1664:
          case 1710:
          case 1733:
          case 1790:
          case 1813:
          case 1825:
          case 1832:
            uint64_t StringConstCast = *(v11 - 1);
            break;
          case 1589:
          case 1598:
          case 1618:
          case 1621:
          case 1623:
          case 1626:
          case 1692:
          case 1694:
          case 1711:
          case 1712:
          case 1714:
          case 1725:
          case 1747:
          case 1760:
          case 1762:
          case 1764:
          case 1773:
          case 1777:
          case 1801:
          case 1811:
          case 1812:
          case 1826:
          case 1833:
          case 1837:
          case 1840:
          case 1842:
            uint64_t StringConstCast = 0;
            break;
          case 1594:
            int v1414 = v26;
            unint64_t v1415 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1414;
            uint64_t StringConstCast = v1415;
            *(_DWORD *)unint64_t v1415 = 295;
            *(void *)(v1415 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1415 + 16) = *v11;
            break;
          case 1595:
            uint64_t v2010 = v24;
            v1272 = v2065;
            int v1273 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 270;
            uint64_t v1274 = *v1272;
            uint64_t v24 = v2010;
            unint64_t v1275 = MemoryContextAllocZeroAligned(v1274, 0x18uLL);
            int v26 = v1273;
            *(_DWORD *)unint64_t v1275 = 295;
            *(void *)(v1275 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v1275 + 16) = *(v11 - 1);
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1275;
            *(void *)(StringConstCast + 16) = *(v11 - 5);
            *(_DWORD *)(StringConstCast + 24) = 39;
            *(_WORD *)(StringConstCast + 2_Block_object_dispose(&a9, 8) = 0;
            int v1276 = *((_DWORD *)v11 - 14);
            goto LABEL_1433;
          case 1596:
            uint64_t v2021 = v24;
            v1647 = v2065;
            int v1648 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 270;
            uint64_t v1649 = *v1647;
            uint64_t v24 = v2021;
            unint64_t v1650 = MemoryContextAllocZeroAligned(v1649, 0x18uLL);
            int v26 = v1648;
            *(_DWORD *)unint64_t v1650 = 295;
            *(void *)(v1650 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v1650 + 16) = *(v11 - 1);
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1650;
            *(void *)(StringConstCast + 16) = *(v11 - 5);
            *(_DWORD *)(StringConstCast + 24) = 39;
            *(_WORD *)(StringConstCast + 2_Block_object_dispose(&a9, 8) = 256;
            int v1276 = *((_DWORD *)v11 - 20);
LABEL_1433:
            *(unsigned char *)(*(void *)(*(v11 - 5) + 8) + 33) = v1276;
            *(unsigned char *)(*(v11 - 5) + 64) = *(unsigned char *)v11 ^ 1;
            break;
          case 1599:
          case 1600:
            int v83 = v26;
            unint64_t v84 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v83;
            uint64_t StringConstCast = v84;
            *(_DWORD *)unint64_t v84 = 296;
            *(void *)(v84 + _Block_object_dispose(&a9, 8) = *v11;
            break;
          case 1601:
          case 1602:
            int v85 = v26;
            unint64_t v86 = MemoryContextAllocZeroAligned(*v2065, 0x10uLL);
            int v26 = v85;
            uint64_t StringConstCast = v86;
            *(_DWORD *)unint64_t v86 = 296;
            *(void *)(v86 + _Block_object_dispose(&a9, 8) = 0;
            break;
          case 1603:
            *(void *)(*(v11 - 2) + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(*(v11 - 2) + 32) = *(v11 - 1);
            *(void *)(*(v11 - 2) + 4errstart(20, 0) = *v11;
            *(void *)(*(v11 - 2) + 4_Block_object_dispose(&a9, 8) = *(v11 - 6);
            uint64_t StringConstCast = *(v11 - 2);
            break;
          case 1604:
          case 1622:
          case 1625:
          case 1644:
          case 1652:
          case 1665:
          case 1673:
          case 1674:
          case 1677:
          case 1691:
          case 1713:
          case 1715:
          case 1722:
          case 1724:
          case 1732:
          case 1734:
          case 1736:
          case 1737:
          case 1746:
          case 1750:
          case 1751:
          case 1752:
          case 1753:
          case 1754:
          case 1759:
          case 1761:
          case 1763:
          case 1772:
          case 1776:
          case 1788:
          case 1800:
          case 1814:
          case 1821:
          case 1836:
          case 1838:
          case 1841:
            uint64_t StringConstCast = *v11;
            break;
          case 1605:
            int v649 = v26;
            unint64_t Alias = makeAlias((const char *)*v11, 0);
            int v26 = v649;
            *(void *)(*(v11 - 2) + 4errstart(20, 0) = Alias;
            uint64_t StringConstCast = *(v11 - 2);
            break;
          case 1606:
            int v743 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            int v26 = v743;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 233;
            *(void *)(v70 + 16) = 0;
            goto LABEL_1722;
          case 1607:
            int v788 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            int v26 = v788;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 233;
            *(void *)(v70 + 16) = 0;
            goto LABEL_839;
          case 1608:
            int v864 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            int v26 = v864;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 233;
LABEL_1482:
            *(void *)(v70 + 16) = *(v11 - 2);
            goto LABEL_1722;
          case 1609:
            int v1037 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            int v26 = v1037;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 233;
            *(void *)(v70 + 16) = *(v11 - 5);
LABEL_839:
            *(_DWORD *)(v70 + 56) = *((_DWORD *)v11 - 4);
            goto LABEL_1722;
          case 1610:
            int v1494 = v26;
            unint64_t v1495 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            int v26 = v1494;
            uint64_t StringConstCast = v1495;
            *(_DWORD *)unint64_t v1495 = 233;
            *(void *)(v1495 + 16) = 0;
            *(void *)(v1495 + 24) = 0;
            break;
          case 1611:
          case 1630:
          case 1641:
          case 1688:
          case 1771:
          case 1808:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 1612:
          case 1631:
          case 1640:
          case 1689:
          case 1770:
          case 1807:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 2;
            break;
          case 1615:
          case 1648:
            int v156 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            *(_DWORD *)uint64_t StringConstCast = 355;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            uint64_t v157 = check_indirection(*v11, (uint64_t)v2064);
            int v26 = v156;
            *(void *)(StringConstCast + 16) = v157;
            *(void *)(StringConstCast + 24) = 0;
            *(_DWORD *)(StringConstCast + 32) = *(v12 - 1);
            break;
          case 1616:
            int v1099 = v26;
            unint64_t v1100 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1099;
            uint64_t StringConstCast = v1100;
            uint64_t v9 = 0x200000184;
            *(void *)unint64_t v1100 = 0x200000184;
            *(void *)(v1100 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(void *)(v1100 + 16) = *(v11 - 1);
            *(void *)(v1100 + 24) = *v11;
            *(_DWORD *)(v1100 + 32) = *(v12 - 7);
            break;
          case 1617:
            int v529 = v26;
            unint64_t v530 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v529;
            uint64_t StringConstCast = v530;
            uint64_t v9 = 0x100000184;
            *(void *)unint64_t v530 = 0x100000184;
            *(void *)(v530 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v530 + 16) = 0;
            *(void *)(v530 + 24) = 0;
            *(_DWORD *)(v530 + 32) = *(v12 - 4);
            break;
          case 1619:
            int v1101 = v26;
            unint64_t v1102 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1101;
            uint64_t StringConstCast = v1102;
            *(_DWORD *)unint64_t v1102 = 387;
            *(void *)(v1102 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v1102 + 16) = *v11;
            *(void *)(v1102 + 24) = 0;
            *(_DWORD *)(v1102 + 32) = *(v12 - 3);
            break;
          case 1620:
            int v1263 = v26;
            unint64_t v1264 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1263;
            uint64_t StringConstCast = v1264;
            *(_DWORD *)unint64_t v1264 = 387;
            *(void *)(v1264 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v1264 + 16) = 0;
            *(void *)(v1264 + 24) = *v11;
            *(_DWORD *)(v1264 + 32) = *(v12 - 2);
            break;
          case 1624:
            int v522 = v26;
            unint64_t v523 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v522;
            uint64_t StringConstCast = v523;
            *(_DWORD *)unint64_t v523 = 234;
            *(void *)(v523 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v523 + 16) = *(v11 - 2);
            *(void *)(v523 + 24) = *(v11 - 1);
            *(void *)(v523 + 32) = *v11;
            *(void *)(v523 + 4errstart(20, 0) = *(v11 - 6);
            break;
          case 1627:
            int v604 = v26;
            unint64_t v605 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v604;
            uint64_t StringConstCast = v605;
            *(_DWORD *)unint64_t v605 = 281;
            *(void *)(v605 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(_DWORD *)(v605 + 16) = *((_DWORD *)v11 - 2);
            *(unsigned char *)(v605 + 2errstart(20, 0) = *(unsigned char *)v11;
            break;
          case 1628:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | *((unsigned int *)v11 - 2);
            break;
          case 1629:
          case 1637:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 8;
            break;
          case 1632:
          case 1769:
          case 1809:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 3;
            break;
          case 1633:
          case 1768:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 4;
            break;
          case 1634:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 5;
            break;
          case 1635:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 6;
            break;
          case 1636:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 7;
            break;
          case 1639:
          case 1707:
          case 1708:
          case 1835:
            StringConstCast &= 0xFFFFFFFFFFFFFF00;
            break;
          case 1642:
          case 1653:
          case 1658:
          case 1660:
          case 1690:
          case 1742:
          case 1743:
          case 1744:
          case 1745:
          case 1810:
            StringConstCast &= 0xFFFFFFFF00000000;
            break;
          case 1643:
            int v531 = v26;
            unint64_t v532 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v531;
            uint64_t StringConstCast = v532;
            *(_DWORD *)unint64_t v532 = 235;
            *(void *)(v532 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(void *)(v532 + 16) = *(v11 - 3);
            *(void *)(v532 + 32) = *(v11 - 2);
            *(void *)(v532 + 24) = *(v11 - 1);
            *(void *)(v532 + 4errstart(20, 0) = *v11;
            *(void *)(v532 + 4_Block_object_dispose(&a9, 8) = *(v11 - 7);
            break;
          case 1645:
            int v32 = v26;
            DefEleunint64_t m = list_concat(*(v11 - 2), (const void **)*v11);
            goto LABEL_1777;
          case 1646:
            *(void *)(*(v11 - 2) + 24) = *v11;
            uint64_t v2 = (const void **)*(v11 - 2);
            goto LABEL_69;
          case 1647:
            uint64_t StringConstCast = *(v11 - 3);
            if (StringConstCast)
            {
              uint64_t v1997 = v24;
              int v1676 = *(_DWORD *)(StringConstCast + 4);
              if (v1676 < 1)
              {
LABEL_1810:
                uint64_t v24 = v1997;
              }
              else
              {
                int v2059 = v26;
                v1986 = v15;
                unsigned int v1965 = v16;
                uint64_t v1677 = 0;
                v1678 = v2065;
                do
                {
                  uint64_t v1679 = v1677 + 1;
                  uint64_t v1680 = *(void *)(*(void *)(StringConstCast + 16) + 8 * v1677);
                  unint64_t v1681 = MemoryContextAllocZeroAligned(*v1678, 0x18uLL);
                  *(_DWORD *)unint64_t v1681 = 356;
                  *(void *)(v1681 + _Block_object_dispose(&a9, 8) = *v11;
                  *(_DWORD *)(v1681 + 16) = v1679;
                  *(_DWORD *)(v1681 + 2errstart(20, 0) = v1676;
                  *(void *)(v1680 + 24) = v1681;
                  uint64_t v1677 = v1679;
                }
                while (v1679 < *(int *)(StringConstCast + 4));
                uint64_t StringConstCast = *(v11 - 3);
                uint64_t v16 = v1965;
                uint64_t v15 = v1986;
                uint64_t v24 = v1997;
                int v26 = v2059;
              }
            }
            break;
          case 1651:
            int v1703 = v26;
            unint64_t v70 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1703;
            uint64_t StringConstCast = v70;
            *(_DWORD *)unint64_t v70 = 297;
            *(void *)(v70 + _Block_object_dispose(&a9, 8) = *(v11 - 5);
            *(_DWORD *)(v70 + 16) = *((_DWORD *)v11 - 8) | *((_DWORD *)v11 - 4) | 0x20;
LABEL_1722:
            *(void *)(v70 + 24) = *v11;
            break;
          case 1654:
            uint64_t StringConstCast = *((unsigned int *)v11 - 4) | StringConstCast & 0xFFFFFFFF00000000 | 4;
            break;
          case 1655:
            uint64_t StringConstCast = *((unsigned int *)v11 - 2) | StringConstCast & 0xFFFFFFFF00000000 | 2;
            break;
          case 1656:
            uint64_t StringConstCast = *((unsigned int *)v11 - 2) | StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 1657:
            uint64_t StringConstCast = *((unsigned int *)v11 - 2) | StringConstCast & 0xFFFFFFFF00000000 | 8;
            break;
          case 1659:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x10;
            break;
          case 1666:
            uint64_t v590 = *(v11 - 1);
            uint64_t v591 = *v11;
            uint64_t v592 = 0;
            goto LABEL_1093;
          case 1667:
            uint64_t v1038 = *(v11 - 3);
            uint64_t v1039 = *(v11 - 2);
            v1040 = (const void **)*(v11 - 1);
            uint64_t v1041 = *v11;
            goto LABEL_1127;
          case 1668:
            uint64_t v1038 = *(v11 - 3);
            uint64_t v1039 = *(v11 - 2);
            uint64_t v1041 = *(v11 - 1);
            v1040 = (const void **)*v11;
LABEL_1127:
            uint64_t v1103 = 0;
            goto LABEL_1128;
          case 1669:
            int v630 = v26;
            insertSelectOptions(*v11, 0, 0, 0, *(v11 - 1));
            int v26 = v630;
            uint64_t StringConstCast = *v11;
            break;
          case 1670:
            uint64_t v590 = *(v11 - 1);
            uint64_t v591 = *v11;
            uint64_t v592 = *(v11 - 2);
LABEL_1093:
            int v1314 = v26;
            insertSelectOptions(v590, v591, 0, 0, v592);
            int v26 = v1314;
            uint64_t StringConstCast = *(v11 - 1);
            break;
          case 1671:
            uint64_t v1039 = *(v11 - 2);
            v1040 = (const void **)*(v11 - 1);
            uint64_t v1041 = *v11;
            goto LABEL_887;
          case 1672:
            uint64_t v1041 = *(v11 - 1);
            v1040 = (const void **)*v11;
            uint64_t v1039 = *(v11 - 2);
LABEL_887:
            uint64_t v1103 = *(v11 - 4);
            uint64_t v1038 = *(v11 - 3);
LABEL_1128:
            int v1354 = v26;
            insertSelectOptions(v1038, v1039, v1040, v1041, v1103);
            int v26 = v1354;
            uint64_t StringConstCast = *(v11 - 3);
            break;
          case 1675:
            int v1293 = v26;
            unint64_t v1278 = MemoryContextAllocZeroAligned(*v2065, 0x98uLL);
            int v26 = v1293;
            uint64_t StringConstCast = v1278;
            *(_DWORD *)unint64_t v1278 = 236;
            goto LABEL_1070;
          case 1676:
            int v1277 = v26;
            unint64_t v1278 = MemoryContextAllocZeroAligned(*v2065, 0x98uLL);
            int v26 = v1277;
            uint64_t StringConstCast = v1278;
            *(_DWORD *)unint64_t v1278 = 236;
            *(void *)(v1278 + _Block_object_dispose(&a9, 8) = *(v11 - 7);
LABEL_1070:
            *(void *)(v1278 + 24) = *(v11 - 6);
            *(void *)(v1278 + 16) = *(v11 - 5);
            *(void *)(v1278 + 32) = *(v11 - 4);
            *(void *)(v1278 + 4errstart(20, 0) = *(v11 - 3);
            *(void *)(v1278 + 4_Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v1278 + 56) = *(v11 - 1);
            *(void *)(v1278 + 64) = *v11;
            break;
          case 1678:
            v1973 = v15;
            uint64_t v920 = v16;
            v921 = v2065;
            int v2041 = v26;
            uint64_t v2002 = v24;
            unint64_t v922 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(_DWORD *)unint64_t v922 = 347;
            unint64_t v923 = MemoryContextAllocZeroAligned(*v921, 0x28uLL);
            *(_DWORD *)unint64_t v923 = 355;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v921, 0x98uLL);
            *(_DWORD *)uint64_t StringConstCast = 236;
            uint64_t v924 = *v921;
            uint64_t v16 = v920;
            uint64_t v15 = v1973;
            v925 = (_DWORD *)MemoryContextAllocZero(v924, 4uLL);
            _DWORD *v925 = 351;
            list_make1_impl(226, (uint64_t)v925);
            *(void *)(v922 + _Block_object_dispose(&a9, 8) = v926;
            *(_DWORD *)(v922 + 16) = -1;
            *(void *)(v923 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v923 + 16) = 0;
            *(void *)(v923 + 24) = v922;
            uint64_t v24 = v2002;
            *(_DWORD *)(v923 + 32) = -1;
            list_make1_impl(226, v923);
            *(void *)(StringConstCast + 24) = v927;
            *(double *)&uint64_t v9 = list_make1_impl(226, *v11);
            int v26 = v2041;
            *(void *)(StringConstCast + 32) = v928;
            break;
          case 1679:
            uint64_t v952 = v24;
            char v953 = *((unsigned char *)v11 - 8);
            uint64_t v954 = *(v11 - 3);
            unsigned int v1955 = v16;
            v1974 = v15;
            uint64_t v955 = *v11;
            int v956 = v26;
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x98uLL);
            int v26 = v956;
            *(_DWORD *)DefEleunint64_t m = 236;
            int v957 = 1;
            goto LABEL_1465;
          case 1680:
            uint64_t v952 = v24;
            char v953 = *((unsigned char *)v11 - 8);
            uint64_t v954 = *(v11 - 3);
            unsigned int v1955 = v16;
            v1974 = v15;
            uint64_t v955 = *v11;
            int v1294 = v26;
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x98uLL);
            int v26 = v1294;
            *(_DWORD *)DefEleunint64_t m = 236;
            int v957 = 2;
            goto LABEL_1465;
          case 1681:
            uint64_t v952 = v24;
            char v953 = *((unsigned char *)v11 - 8);
            uint64_t v954 = *(v11 - 3);
            unsigned int v1955 = v16;
            v1974 = v15;
            uint64_t v955 = *v11;
            int v1682 = v26;
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x98uLL);
            int v26 = v1682;
            *(_DWORD *)DefEleunint64_t m = 236;
            int v957 = 3;
LABEL_1465:
            *(_DWORD *)(DefElem + 12_Block_object_dispose(&a9, 8) = v957;
            *(unsigned char *)(DefElem + 132) = v953;
            uint64_t v24 = v952;
            *(void *)(DefElem + 136) = v954;
            *(void *)(DefElem + 144) = v955;
            uint64_t v15 = v1974;
            uint64_t v16 = v1955;
            goto LABEL_1778;
          case 1682:
          case 1683:
            int v159 = v26;
            unint64_t v160 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v159;
            uint64_t StringConstCast = v160;
            *(_DWORD *)unint64_t v160 = 386;
            *(void *)(v160 + _Block_object_dispose(&a9, 8) = *v11;
            *(unsigned char *)(v160 + 16) = 0;
            *(_DWORD *)(v160 + 2errstart(20, 0) = *(v12 - 1);
            break;
          case 1684:
            int v789 = v26;
            unint64_t v790 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v789;
            uint64_t StringConstCast = v790;
            *(_DWORD *)unint64_t v790 = 386;
            *(void *)(v790 + _Block_object_dispose(&a9, 8) = *v11;
            *(unsigned char *)(v790 + 16) = 1;
            *(_DWORD *)(v790 + 2errstart(20, 0) = *(v12 - 2);
            break;
          case 1687:
            int v906 = v26;
            unint64_t v907 = MemoryContextAllocZeroAligned(*v2065, 0x58uLL);
            int v26 = v906;
            uint64_t StringConstCast = v907;
            *(_DWORD *)unint64_t v907 = 389;
            *(void *)(v907 + _Block_object_dispose(&a9, 8) = *(v11 - 6);
            *(void *)(v907 + 16) = *(v11 - 5);
            *(_DWORD *)(v907 + 24) = *((_DWORD *)v11 - 6);
            *(void *)(v907 + 32) = *(v11 - 1);
            *(_DWORD *)(v907 + 4errstart(20, 0) = *(v12 - 6);
            break;
          case 1693:
            int v1496 = v26;
            unint64_t v1497 = MemoryContextAllocZeroAligned(*v2065, 0x48uLL);
            int v26 = v1496;
            uint64_t StringConstCast = v1497;
            *(_DWORD *)unint64_t v1497 = 153;
            *(void *)(v1497 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v1497 + 16) = 0;
            *(void *)(v1497 + 32) = 0;
            *(_DWORD *)(v1497 + 4errstart(20, 0) = 0;
            *(void *)(v1497 + 4_Block_object_dispose(&a9, 8) = 0;
            *(void *)(v1497 + 56) = 0;
            *(unsigned char *)(v1497 + 64) = 0;
            break;
          case 1695:
          case 1696:
          case 1697:
          case 1698:
            uint64_t StringConstCast = *v11;
            *(unsigned char *)(*v11 + 33) = 116;
            break;
          case 1699:
            int v744 = v26;
            if (!errstart(19, 0)) {
              goto LABEL_1016;
            }
            errmsg("GLOBAL is deprecated in temporary table creation", (uint64_t)v2, v3, v4, v5, v6, v7, v8, v1947);
            scanner_errposition(*(v12 - 3), v2064);
            int v745 = 11744;
            goto LABEL_1015;
          case 1700:
            int v744 = v26;
            if (!errstart(19, 0)) {
              goto LABEL_1016;
            }
            errmsg("GLOBAL is deprecated in temporary table creation", (uint64_t)v2, v3, v4, v5, v6, v7, v8, v1947);
            scanner_errposition(*(v12 - 3), v2064);
            int v745 = 11752;
LABEL_1015:
            errfinish("gram.y", v745, (uint64_t)"base_yyparse");
LABEL_1016:
            uint64_t StringConstCast = *v11;
            *(unsigned char *)(*v11 + 33) = 116;
            int v26 = v744;
            break;
          case 1701:
            uint64_t StringConstCast = *v11;
            *(unsigned char *)(*v11 + 33) = 117;
            break;
          case 1702:
          case 1703:
            uint64_t StringConstCast = *v11;
            *(unsigned char *)(*v11 + 33) = 112;
            break;
          case 1709:
            uint64_t v2 = 0;
LABEL_69:
            int v32 = v26;
            *(double *)&uint64_t v9 = list_make1_impl(226, (uint64_t)v2);
            goto LABEL_1777;
          case 1718:
            int v1651 = v26;
            unint64_t v1652 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1651;
            uint64_t StringConstCast = v1652;
            *(_DWORD *)unint64_t v1652 = 359;
            *(void *)(v1652 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(_DWORD *)(v1652 + 16) = 3;
            *(_DWORD *)(v1652 + 2errstart(20, 0) = *(_DWORD *)v11;
            *(void *)(v1652 + 24) = *(v11 - 1);
            *(_DWORD *)(v1652 + 32) = *(v12 - 1);
            break;
          case 1719:
            int v1416 = v26;
            unint64_t v1417 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1416;
            uint64_t StringConstCast = v1417;
            *(_DWORD *)unint64_t v1417 = 359;
            *(void *)(v1417 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(_DWORD *)(v1417 + 16) = *((_DWORD *)v11 - 2);
            *(_DWORD *)(v1417 + 2errstart(20, 0) = *(_DWORD *)v11;
            *(void *)(v1417 + 24) = 0;
            *(_DWORD *)(v1417 + 32) = -1;
            break;
          case 1720:
            uint64_t StringConstCast = *(v11 - 1);
            *(void *)uint64_t StringConstCast = *v11;
            break;
          case 1721:
            uint64_t StringConstCast = *v11;
            *(void *)*uint64_t v11 = *(v11 - 1);
            break;
          case 1723:
            int v1253 = v26;
            uint64_t v832 = palloc(0x18uLL);
            int v26 = v1253;
            uint64_t StringConstCast = v832;
            *(void *)uint64_t v832 = *v11;
            *(void *)(v832 + _Block_object_dispose(&a9, 8) = 0;
            goto LABEL_1020;
          case 1726:
            int v1254 = v26;
            uint64_t v832 = palloc(0x18uLL);
            int v26 = v1254;
            uint64_t StringConstCast = v832;
            *(void *)uint64_t v832 = 0;
            uint64_t v833 = *v11;
            goto LABEL_1019;
          case 1727:
            base_yyparse_cold_32();
          case 1728:
            int v831 = v26;
            uint64_t v832 = palloc(0x18uLL);
            int v26 = v831;
            uint64_t StringConstCast = v832;
            *(void *)uint64_t v832 = 0;
            uint64_t v833 = *(v11 - 2);
LABEL_1019:
            *(void *)(v832 + _Block_object_dispose(&a9, 8) = v833;
LABEL_1020:
            *(_DWORD *)(v832 + 16) = 1;
            break;
          case 1729:
            int v850 = v26;
            uint64_t v851 = palloc(0x18uLL);
            int v26 = v850;
            uint64_t StringConstCast = v851;
            *(void *)uint64_t v851 = 0;
            *(void *)(v851 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(_DWORD *)(v851 + 16) = 2;
            break;
          case 1730:
            int v1498 = v26;
            uint64_t v1170 = v24;
            uint64_t v1171 = palloc(0x18uLL);
            *(void *)uint64_t v1171 = 0;
            v1499 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1498;
            _DWORD *v1499 = 349;
            v1499[2] = 221;
            int v1173 = 1;
            v1499[4] = 1;
            v1499[6] = -1;
            *(void *)(v1171 + _Block_object_dispose(&a9, 8) = v1499;
            goto LABEL_1271;
          case 1731:
            int v1169 = v26;
            uint64_t v1170 = v24;
            uint64_t v1171 = palloc(0x18uLL);
            *(void *)uint64_t v1171 = 0;
            v1172 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1169;
            _DWORD *v1172 = 349;
            v1172[2] = 221;
            v1172[4] = 1;
            v1172[6] = -1;
            *(void *)(v1171 + _Block_object_dispose(&a9, 8) = v1172;
            int v1173 = 2;
LABEL_1271:
            uint64_t StringConstCast = v1171;
            *(_DWORD *)(v1171 + 16) = v1173;
            uint64_t v24 = v1170;
            break;
          case 1735:
          case 2310:
            uint64_t v140 = v24;
            int v141 = *v12;
            int v142 = v26;
            char v143 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v142;
            uint64_t StringConstCast = (uint64_t)v143;
            *(_DWORD *)char v143 = 349;
            *((_DWORD *)v143 + 2) = 225;
            *((_DWORD *)v143 + 6) = v141;
            uint64_t v24 = v140;
            break;
          case 1738:
            int v32 = v26;
            DefEleunint64_t m = makeSimpleA_Expr(0, (uint64_t)"+", 0, *v11, *(v12 - 1));
            goto LABEL_1777;
          case 1739:
          case 1949:
          case 2017:
            int v32 = v26;
            DefEleunint64_t m = (unint64_t)doNegate((_DWORD *)*v11, *(v12 - 1), v3, v4, v5, v6, v7, v8);
            goto LABEL_1777;
          case 1740:
          case 2292:
            uint64_t v1989 = v24;
            int v154 = *(_DWORD *)v11;
            int v106 = *v12;
            int v155 = v26;
            uint64_t v108 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v155;
            uint64_t StringConstCast = (uint64_t)v108;
            *(_DWORD *)uint64_t v108 = 349;
            *((_DWORD *)v108 + 2) = 221;
            *((_DWORD *)v108 + 4) = v154;
            goto LABEL_911;
          case 1741:
          case 2293:
            uint64_t v1989 = v24;
            uint64_t v105 = *v11;
            int v106 = *v12;
            int v107 = v26;
            uint64_t v108 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v107;
            uint64_t StringConstCast = (uint64_t)v108;
            *(_DWORD *)uint64_t v108 = 349;
            int v109 = 222;
            goto LABEL_910;
          case 1755:
            int v632 = *(v12 - 1);
            int v633 = 0;
            uint64_t v631 = 0;
            goto LABEL_1331;
          case 1756:
            uint64_t v631 = *(v11 - 1);
            int v632 = *(v12 - 3);
            int v633 = 2;
            goto LABEL_1331;
          case 1757:
            uint64_t v631 = *(v11 - 1);
            int v632 = *(v12 - 3);
            int v633 = 3;
            goto LABEL_1331;
          case 1758:
            uint64_t v631 = *(v11 - 1);
            int v632 = *(v12 - 4);
            int v633 = 4;
LABEL_1331:
            int v32 = v26;
            DefEleunint64_t m = makeGroupingSet(v633, v631, v632, *(double *)&v9);
            goto LABEL_1777;
          case 1767:
            int v707 = v26;
            unint64_t v708 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v707;
            uint64_t StringConstCast = v708;
            *(_DWORD *)unint64_t v708 = 383;
            *(void *)(v708 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v708 + 16) = *((_DWORD *)v11 - 4);
            *(_DWORD *)(v708 + 2errstart(20, 0) = *(_DWORD *)v11;
            break;
          case 1774:
            int v625 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x98uLL);
            *(_DWORD *)uint64_t StringConstCast = 236;
            *(double *)&uint64_t v9 = list_make1_impl(226, *(v11 - 1));
            goto LABEL_612;
          case 1775:
            uint64_t StringConstCast = *(v11 - 4);
            int v625 = v26;
            uint64_t v626 = lappend(*(void *)(StringConstCast + 72), *(v11 - 1));
LABEL_612:
            int v26 = v625;
            *(void *)(StringConstCast + 72) = v626;
            break;
          case 1780:
            *(void *)(*(v11 - 1) + 4errstart(20, 0) = *v11;
            uint64_t StringConstCast = *(v11 - 1);
            break;
          case 1781:
            uint64_t StringConstCast = *v11;
            *(void *)(*(v11 - 2) + 4errstart(20, 0) = *(v11 - 1);
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            break;
          case 1782:
            uint64_t StringConstCast = *(v11 - 1);
            goto LABEL_843;
          case 1783:
            uint64_t StringConstCast = *(v11 - 1);
            *(unsigned char *)(StringConstCast + 4) = 1;
LABEL_843:
            *(void *)(StringConstCast + 16) = **(void **)(*v11 + 16);
            *(void *)(StringConstCast + 24) = *(void *)(*(void *)(*v11 + 16) + 8);
            break;
          case 1784:
            uint64_t StringConstCast = *(v11 - 1);
            goto LABEL_1361;
          case 1785:
            uint64_t StringConstCast = *(v11 - 1);
            *(unsigned char *)(StringConstCast + 4) = 1;
LABEL_1361:
            *(void *)(StringConstCast + 4errstart(20, 0) = *v11;
            break;
          case 1786:
            int v958 = v26;
            unint64_t v959 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v958;
            uint64_t StringConstCast = v959;
            *(_DWORD *)unint64_t v959 = 361;
            *(unsigned char *)(v959 + 4) = 0;
            *(void *)(v959 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v959 + 16) = *v11;
            if (!*v11)
            {
              uint64_t v1945 = *(v11 - 1);
              if (*(_DWORD *)v1945 != 236 || !*(void *)(v1945 + 72)) {
                base_yyparse_cold_33();
              }
              base_yyparse_cold_34();
            }
            break;
          case 1787:
            int v1592 = v26;
            unint64_t v1593 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1592;
            uint64_t StringConstCast = v1593;
            *(_DWORD *)unint64_t v1593 = 361;
            *(unsigned char *)(v1593 + 4) = 1;
            *(void *)(v1593 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1593 + 16) = *v11;
            if (!*v11)
            {
              uint64_t v1946 = *(v11 - 1);
              if (*(_DWORD *)v1946 != 236 || !*(void *)(v1946 + 72)) {
                base_yyparse_cold_35();
              }
              base_yyparse_cold_36();
            }
            break;
          case 1789:
            *(void *)(*(v11 - 2) + 4_Block_object_dispose(&a9, 8) = *v11;
            uint64_t StringConstCast = *(v11 - 2);
            break;
          case 1791:
            int v1220 = v26;
            unint64_t v642 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            int v26 = v1220;
            uint64_t StringConstCast = v642;
            uint64_t v9 = 150;
            *(void *)unint64_t v642 = 150;
            *(unsigned char *)(v642 + _Block_object_dispose(&a9, 8) = 0;
            goto LABEL_976;
          case 1792:
            int v1418 = v26;
            unint64_t v1419 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            uint64_t StringConstCast = v1419;
            *(_DWORD *)unint64_t v1419 = 150;
            *(_DWORD *)(v1419 + 4) = *((_DWORD *)v11 - 6);
            *(unsigned char *)(v1419 + _Block_object_dispose(&a9, 8) = 0;
            uint64_t v1420 = *(v11 - 4);
            goto LABEL_1291;
          case 1793:
            int v1418 = v26;
            unint64_t v1419 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            uint64_t StringConstCast = v1419;
            uint64_t v9 = 150;
            *(void *)unint64_t v1419 = 150;
            *(unsigned char *)(v1419 + _Block_object_dispose(&a9, 8) = 0;
            uint64_t v1420 = *(v11 - 3);
LABEL_1291:
            *(void *)(v1419 + 16) = v1420;
            *(void *)(v1419 + 24) = *(v11 - 1);
            v1530 = (_DWORD *)*v11;
            if (*v11 && *v1530 == 226)
            {
              *(void *)(StringConstCast + 32) = v1530;
              int v26 = v1418;
            }
            else
            {
              *(void *)(StringConstCast + 4errstart(20, 0) = v1530;
              int v26 = v1418;
            }
            break;
          case 1794:
            int v1566 = v26;
            unint64_t v642 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            int v26 = v1566;
            uint64_t StringConstCast = v642;
            *(_DWORD *)unint64_t v642 = 150;
            *(_DWORD *)(v642 + 4) = *((_DWORD *)v11 - 4);
            *(unsigned char *)(v642 + _Block_object_dispose(&a9, 8) = 1;
            uint64_t v1221 = *(v11 - 4);
            goto LABEL_1334;
          case 1795:
            int v641 = v26;
            unint64_t v642 = MemoryContextAllocZeroAligned(*v2065, 0x40uLL);
            int v26 = v641;
            uint64_t StringConstCast = v642;
            uint64_t v9 = 150;
            *(void *)unint64_t v642 = 150;
            *(unsigned char *)(v642 + _Block_object_dispose(&a9, 8) = 1;
LABEL_976:
            uint64_t v1221 = *(v11 - 3);
LABEL_1334:
            *(void *)(v642 + 16) = v1221;
            *(void *)(v642 + 24) = *v11;
            *(void *)(v642 + 32) = 0;
            *(void *)(v642 + 4errstart(20, 0) = 0;
            break;
          case 1796:
          case 1798:
            int v161 = v26;
            unint64_t v162 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v161;
            uint64_t StringConstCast = v162;
            *(_DWORD *)unint64_t v162 = 102;
            *(void *)(v162 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v162 + 16) = *(v11 - 1);
            break;
          case 1797:
          case 1799:
            int v100 = v26;
            unint64_t v101 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v100;
            uint64_t StringConstCast = v101;
            *(_DWORD *)unint64_t v101 = 102;
            *(void *)(v101 + _Block_object_dispose(&a9, 8) = *v11;
            break;
          case 1802:
            uint64_t v397 = *v11;
            goto LABEL_1186;
          case 1804:
          case 1805:
            int v32 = v26;
            unint64_t v130 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(_DWORD *)unint64_t v130 = 102;
            *(void *)(v130 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(double *)&uint64_t v9 = list_make2_impl(226, v130, *(v11 - 1));
            goto LABEL_1777;
          case 1806:
            uint64_t v397 = 0;
LABEL_1186:
            uint64_t v129 = 0;
            goto LABEL_1441;
          case 1815:
            uint64_t StringConstCast = *v11;
            goto LABEL_1188;
          case 1816:
            uint64_t StringConstCast = *(v11 - 1);
LABEL_1188:
            *(unsigned char *)(StringConstCast + 32) = 1;
            *(void *)(StringConstCast + 4errstart(20, 0) = 0;
            break;
          case 1817:
            uint64_t StringConstCast = *v11;
            goto LABEL_1412;
          case 1818:
            uint64_t StringConstCast = *(v11 - 1);
LABEL_1412:
            *(unsigned char *)(StringConstCast + 32) = 0;
            *(void *)(StringConstCast + 4errstart(20, 0) = 0;
            break;
          case 1822:
            int v1594 = v26;
            unint64_t v1595 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1594;
            *(_DWORD *)unint64_t v1595 = 102;
            *(void *)(v1595 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(*(v11 - 1) + 4errstart(20, 0) = v1595;
            uint64_t StringConstCast = *(v11 - 1);
            break;
          case 1823:
            int v1315 = v26;
            unint64_t v1316 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1315;
            *(_DWORD *)unint64_t v1316 = 102;
            *(void *)(v1316 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(*(v11 - 2) + 4errstart(20, 0) = v1316;
            uint64_t StringConstCast = *(v11 - 2);
            break;
          case 1824:
            int v679 = v26;
            unint64_t v680 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v679;
            uint64_t StringConstCast = v680;
            *(_DWORD *)unint64_t v680 = 363;
            *(void *)(v680 + 16) = *(v11 - 4);
            *(void *)(v680 + 24) = *(v11 - 2);
            *(void *)(v680 + 32) = *v11;
            *(_DWORD *)(v680 + 4errstart(20, 0) = *(v12 - 4);
            break;
          case 1827:
            int v881 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)uint64_t StringConstCast = 362;
            *(unsigned char *)(StringConstCast + 4) = 0;
            *(_WORD *)(StringConstCast + 5) = *(unsigned __int8 *)v11;
            list_make2_impl(226, *(v11 - 1), 0);
            *(double *)&uint64_t v9 = list_make1_impl(226, v882);
            int v26 = v881;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v883;
            break;
          case 1828:
            int v651 = v26;
            unint64_t v652 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v651;
            uint64_t StringConstCast = v652;
            *(_DWORD *)unint64_t v652 = 362;
            *(unsigned char *)(v652 + 4) = 0;
            *(unsigned char *)(v652 + 5) = *(unsigned char *)v11;
            *(unsigned char *)(v652 + 6) = 1;
            *(void *)(v652 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            break;
          case 1829:
            uint64_t v397 = *(v11 - 1);
            uint64_t v129 = *v11;
            goto LABEL_1441;
          case 1834:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            break;
          case 1839:
            int v709 = v26;
            unint64_t v710 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v709;
            uint64_t StringConstCast = v710;
            *(_DWORD *)unint64_t v710 = 145;
            *(void *)(v710 + _Block_object_dispose(&a9, 8) = *v11;
            *(_DWORD *)(v710 + 16) = 0;
            break;
          case 1845:
            int v1421 = v26;
            unint64_t v1422 = MemoryContextAllocZeroAligned(*v2065, 0x70uLL);
            int v26 = v1421;
            uint64_t StringConstCast = v1422;
            *(_DWORD *)unint64_t v1422 = 367;
            *(void *)(v1422 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v1422 + 16) = *(v11 - 1);
            *(_DWORD *)(v1422 + 24) = 0;
            *(unsigned char *)(v1422 + 2_Block_object_dispose(&a9, 8) = 1;
            *(_DWORD *)(v1422 + 44) = 0;
            *(void *)(v1422 + 29) = 0;
            *(void *)(v1422 + 37) = 0;
            *(void *)(v1422 + 72) = *v11;
            *(_DWORD *)(v1422 + 8errstart(20, 0) = 0;
            *(void *)(v1422 + 8_Block_object_dispose(&a9, 8) = 0;
            *(_DWORD *)(v1422 + 104) = *(v12 - 2);
            break;
          case 1846:
            int v1573 = v26;
            unint64_t v1574 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1573;
            uint64_t StringConstCast = v1574;
            *(_DWORD *)unint64_t v1574 = 364;
            *(void *)(v1574 + 16) = *(v11 - 4);
            *(void *)(v1574 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            uint64_t v1575 = *(v11 - 1);
            *(void *)(v1574 + 24) = 0;
            *(void *)(v1574 + 32) = v1575;
            *(_DWORD *)(v1574 + 4_Block_object_dispose(&a9, 8) = *(v12 - 6);
            break;
          case 1847:
            int v663 = v26;
            unint64_t v664 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v663;
            uint64_t StringConstCast = v664;
            *(_DWORD *)unint64_t v664 = 364;
            *(void *)(v664 + 16) = *(v11 - 4);
            *(void *)(v664 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v664 + 32) = *(v11 - 1);
            *(void *)(v664 + 24) = *(v11 - 7);
            *(_DWORD *)(v664 + 4_Block_object_dispose(&a9, 8) = *(v12 - 11);
            break;
          case 1850:
            int v1295 = v26;
            unint64_t v1296 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1295;
            uint64_t StringConstCast = v1296;
            *(_DWORD *)unint64_t v1296 = 365;
            *(void *)(v1296 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(unsigned char *)(v1296 + 24) = 0;
            *(void *)(v1296 + 16) = *v11;
            *(unsigned char *)(v1296 + 25) = 0;
            *(void *)(v1296 + 32) = 0;
            *(void *)(v1296 + 4errstart(20, 0) = 0;
            *(_DWORD *)(v1296 + 4_Block_object_dispose(&a9, 8) = *(v12 - 1);
            break;
          case 1851:
            int v2052 = v26;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            *(_DWORD *)uint64_t StringConstCast = 365;
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(StringConstCast + 16) = *(v11 - 1);
            *(_WORD *)(StringConstCast + 24) = 0;
            *(void *)(StringConstCast + 32) = 0;
            *(void *)(StringConstCast + 4errstart(20, 0) = 0;
            *(_DWORD *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = *(v12 - 2);
            uint64_t v1423 = *v11;
            if (*v11)
            {
              int v26 = v2052;
              if (*(int *)(v1423 + 4) < 1) {
                break;
              }
              v1983 = v15;
              uint64_t v2014 = *v11;
              char v1951 = 0;
              unsigned int v1963 = v16;
              uint64_t v1949 = 0;
              uint64_t v1950 = 0;
              uint64_t v1424 = 0;
              while (1)
              {
                uint64_t v1425 = v24;
                uint64_t v1426 = *(void *)(*(void *)(v1423 + 16) + 8 * v1424);
                v1427 = *(const char **)(v1426 + 16);
                if (!strcmp(v1427, "default")) {
                  break;
                }
                if (!strcmp(v1427, "path"))
                {
                  if (v1949) {
                    base_yyparse_cold_38();
                  }
                  uint64_t v1949 = *(void *)(v1426 + 24);
                  *(void *)(StringConstCast + 32) = v1949;
LABEL_1195:
                  uint64_t v24 = v1425;
                  int v26 = v2052;
                  uint64_t v1423 = v2014;
                  if (++v1424 >= *(int *)(v2014 + 4)) {
                    goto LABEL_1820;
                  }
                }
                else
                {
                  if (strcmp(v1427, "is_not_null")) {
                    base_yyparse_cold_40();
                  }
                  int v26 = v2052;
                  if (v1951) {
                    base_yyparse_cold_39(StringConstCast);
                  }
                  uint64_t v24 = v1425;
                  *(unsigned char *)(StringConstCast + 25) = *(_DWORD *)(*(void *)(v1426 + 24) + 8) != 0;
                  char v1951 = 1;
                  uint64_t v1423 = v2014;
                  if (++v1424 >= *(int *)(v2014 + 4))
                  {
LABEL_1820:
                    uint64_t v16 = v1963;
                    uint64_t v15 = v1983;
                    goto LABEL_1779;
                  }
                }
              }
              if (v1950) {
                base_yyparse_cold_37();
              }
              uint64_t v1950 = *(void *)(v1426 + 24);
              *(void *)(StringConstCast + 4errstart(20, 0) = v1950;
              goto LABEL_1195;
            }
            int v26 = v2052;
            break;
          case 1852:
            int v1355 = v26;
            unint64_t v1356 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1355;
            uint64_t StringConstCast = v1356;
            *(_DWORD *)unint64_t v1356 = 365;
            *(void *)(v1356 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(unsigned char *)(v1356 + 24) = 1;
            *(_DWORD *)(v1356 + 4_Block_object_dispose(&a9, 8) = *(v12 - 2);
            break;
          case 1856:
            uint64_t v44 = *v11;
            int v45 = *(v12 - 1);
            uint64_t v43 = "default";
LABEL_1598:
            int v32 = v26;
            DefEleunint64_t m = makeDefElem((uint64_t)v43, v44, v45);
            goto LABEL_1777;
          case 1857:
            int v32 = v26;
            v1428 = makeInteger(1);
            int v1429 = *(v12 - 1);
            goto LABEL_1379;
          case 1858:
            int v32 = v26;
            v1428 = makeInteger(0);
            int v1429 = *v12;
LABEL_1379:
            DefEleunint64_t m = makeDefElem((uint64_t)"is_not_null", (uint64_t)v1428, v1429);
            goto LABEL_1777;
          case 1861:
          case 2120:
          case 2274:
            int v152 = v26;
            unint64_t v153 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v152;
            uint64_t StringConstCast = v153;
            *(_DWORD *)unint64_t v153 = 355;
            *(void *)(v153 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v153 + 16) = 0;
            *(void *)(v153 + 24) = *(v11 - 2);
            *(_DWORD *)(v153 + 32) = *(v12 - 2);
            break;
          case 1862:
            int v1430 = v26;
            unint64_t v1431 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1430;
            uint64_t StringConstCast = v1431;
            *(_DWORD *)unint64_t v1431 = 355;
            *(void *)(v1431 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v1431 + 16) = 0;
            *(void *)(v1431 + 24) = *v11;
            *(_DWORD *)(v1431 + 32) = *(v12 - 1);
            break;
          case 1863:
            uint64_t StringConstCast = *(v11 - 1);
            *(void *)(StringConstCast + 4errstart(20, 0) = *v11;
            break;
          case 1864:
            uint64_t StringConstCast = *(v11 - 1);
            *(void *)(StringConstCast + 4errstart(20, 0) = *v11;
            goto LABEL_889;
          case 1865:
            uint64_t StringConstCast = *(v11 - 4);
            int v681 = *((_DWORD *)v11 - 2);
            goto LABEL_1336;
          case 1866:
            uint64_t StringConstCast = *(v11 - 4);
            int v634 = *((_DWORD *)v11 - 2);
            goto LABEL_845;
          case 1867:
            uint64_t StringConstCast = *(v11 - 1);
            int v681 = -1;
LABEL_1336:
            int v1567 = v26;
            v1568 = makeInteger(v681);
            *(double *)&uint64_t v9 = list_make1_impl(226, (uint64_t)v1568);
            int v26 = v1567;
            *(void *)(StringConstCast + 4errstart(20, 0) = v1569;
            break;
          case 1868:
            uint64_t StringConstCast = *(v11 - 1);
            int v634 = -1;
LABEL_845:
            int v1042 = v26;
            v1043 = makeInteger(v634);
            *(double *)&uint64_t v9 = list_make1_impl(226, (uint64_t)v1043);
            int v26 = v1042;
            *(void *)(StringConstCast + 4errstart(20, 0) = v1044;
LABEL_889:
            *(unsigned char *)(StringConstCast + 2errstart(20, 0) = 1;
            break;
          case 1869:
            uint64_t v746 = v24;
            uint64_t v747 = *(v11 - 2);
            int v748 = -1;
            goto LABEL_770;
          case 1870:
            uint64_t v746 = v24;
            uint64_t v747 = *(v11 - 3);
            int v748 = *((_DWORD *)v11 - 2);
LABEL_770:
            int v960 = v26;
            v961 = makeInteger(v748);
            uint64_t v962 = v747;
            uint64_t v24 = v746;
            DefEleunint64_t m = lappend(v962, (uint64_t)v961);
            int v26 = v960;
            goto LABEL_1778;
          case 1871:
          case 1886:
          case 1941:
          case 2134:
          case 2136:
          case 2138:
          case 2144:
          case 2147:
          case 2149:
          case 2167:
          case 2170:
          case 2217:
          case 2234:
          case 2240:
          case 2253:
          case 2255:
          case 2263:
          case 2266:
          case 2271:
            uint64_t StringConstCast = 0;
            break;
          case 1872:
          case 1873:
          case 1874:
          case 1875:
          case 1876:
          case 1879:
          case 1880:
          case 1881:
          case 1882:
          case 1900:
          case 1901:
          case 1902:
          case 1906:
          case 1907:
          case 1908:
          case 1933:
          case 1944:
          case 2014:
          case 2041:
          case 2042:
          case 2046:
          case 2047:
          case 2064:
          case 2065:
          case 2066:
          case 2111:
          case 2127:
          case 2129:
          case 2137:
          case 2142:
          case 2146:
          case 2148:
          case 2175:
          case 2176:
          case 2204:
          case 2218:
          case 2225:
          case 2232:
          case 2239:
          case 2241:
          case 2242:
          case 2244:
          case 2245:
          case 2252:
          case 2254:
          case 2262:
          case 2270:
          case 2284:
          case 2285:
          case 2286:
          case 2287:
          case 2288:
          case 2289:
            uint64_t StringConstCast = *v11;
            break;
          case 1877:
            uint64_t StringConstCast = *(v11 - 1);
            *(void *)(StringConstCast + 24) = *v11;
            break;
          case 1878:
            uint64_t v1959 = *(v11 - 3);
            v1104 = v2065;
            int v2045 = v26;
            v1978 = v15;
            uint64_t v2006 = v24;
            v1105 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            _DWORD *v1105 = 349;
            v1105[2] = 221;
            v1105[4] = 0x7FFF;
            v1105[6] = -1;
            uint64_t v1106 = v16;
            int v1107 = *((_DWORD *)v11 - 2);
            int v1108 = *(v12 - 1);
            v1109 = (_DWORD *)MemoryContextAllocZeroAligned(*v1104, 0x20uLL);
            _DWORD *v1109 = 349;
            v1109[2] = 221;
            v1109[4] = v1107;
            uint64_t v16 = v1106;
            v1109[6] = v1108;
            uint64_t v1110 = (uint64_t)v1105;
            uint64_t v15 = v1978;
            uint64_t v24 = v2006;
            *(double *)&uint64_t v9 = list_make2_impl(226, v1110, (uint64_t)v1109);
            int v26 = v2045;
            uint64_t StringConstCast = v1959;
            *(void *)(v1959 + 24) = v1111;
            break;
          case 1883:
            int v53 = v26;
            unint64_t TypeName = makeTypeName(*(v11 - 1));
            goto LABEL_810;
          case 1884:
            int v791 = v26;
            unint64_t v792 = makeString(*(v11 - 2));
            uint64_t v793 = lcons(v792, *(v11 - 1));
            unint64_t v794 = makeTypeNameFromNameList(v793);
            int v26 = v791;
            uint64_t StringConstCast = v794;
            *(void *)(v794 + 24) = *v11;
            *(_DWORD *)(v794 + 4_Block_object_dispose(&a9, 8) = *(v12 - 2);
            break;
          case 1885:
          case 2117:
          case 2128:
          case 2130:
          case 2133:
          case 2135:
          case 2166:
          case 2169:
          case 2191:
          case 2193:
          case 2195:
          case 2247:
            uint64_t StringConstCast = *(v11 - 1);
            break;
          case 1887:
          case 1888:
            uint64_t v110 = "int4";
            goto LABEL_1344;
          case 1889:
            uint64_t v110 = "int2";
            goto LABEL_1344;
          case 1890:
            uint64_t v110 = "int8";
            goto LABEL_1344;
          case 1891:
            uint64_t v110 = "float4";
            goto LABEL_1344;
          case 1892:
            uint64_t StringConstCast = *v11;
            *(_DWORD *)(*v11 + 4_Block_object_dispose(&a9, 8) = *(v12 - 1);
            break;
          case 1893:
            v1357 = "float8";
            goto LABEL_1215;
          case 1894:
          case 1895:
          case 1896:
            int v53 = v26;
            unint64_t TypeName = SystemTypeName((uint64_t)"numeric");
LABEL_810:
            int v26 = v53;
            uint64_t StringConstCast = TypeName;
            *(void *)(TypeName + 24) = *v11;
            goto LABEL_1216;
          case 1897:
            uint64_t v110 = "BOOL";
            goto LABEL_1344;
          case 1898:
            int v1013 = *((_DWORD *)v11 - 2);
            if (v1013 <= 0) {
              base_yyparse_cold_41();
            }
            if (v1013 > 0x18)
            {
              if (v1013 > 0x35) {
                base_yyparse_cold_42();
              }
              int v1053 = v26;
              unint64_t NotExpr = SystemTypeName((uint64_t)"float8");
              goto LABEL_1862;
            }
            unint64_t v740 = "float4";
LABEL_814:
            int v32 = v26;
            DefEleunint64_t m = SystemTypeName((uint64_t)v740);
            goto LABEL_1777;
          case 1899:
            unint64_t v740 = "float8";
            goto LABEL_814;
          case 1903:
          case 1909:
            uint64_t StringConstCast = *v11;
            *(void *)(*v11 + 24) = 0;
            break;
          case 1904:
            if (*((unsigned char *)v11 - 24)) {
              v755 = "varbit";
            }
            else {
              v755 = "bit";
            }
            int v756 = v26;
            unint64_t v757 = SystemTypeName((uint64_t)v755);
            int v26 = v756;
            uint64_t StringConstCast = v757;
            *(void *)(v757 + 24) = *(v11 - 1);
            *(_DWORD *)(v757 + 4_Block_object_dispose(&a9, 8) = *(v12 - 4);
            break;
          case 1905:
            int v963 = v26;
            if (*(unsigned char *)v11)
            {
              uint64_t StringConstCast = SystemTypeName((uint64_t)"varbit");
            }
            else
            {
              uint64_t StringConstCast = SystemTypeName((uint64_t)"bit");
              v1935 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
              _DWORD *v1935 = 349;
              v1935[2] = 221;
              v1935[4] = 1;
              v1935[6] = -1;
              *(double *)&uint64_t v9 = list_make1_impl(226, (uint64_t)v1935);
              *(void *)(StringConstCast + 24) = v1936;
            }
            int v1438 = *(v12 - 1);
            goto LABEL_1825;
          case 1910:
            int v2053 = v26;
            uint64_t StringConstCast = SystemTypeName(*(v11 - 3));
            uint64_t v2015 = v24;
            int v1432 = *((_DWORD *)v11 - 2);
            int v1433 = *(v12 - 1);
            v1434 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            _DWORD *v1434 = 349;
            v1434[2] = 221;
            v1434[4] = v1432;
            uint64_t v24 = v2015;
            v1434[6] = v1433;
            *(double *)&uint64_t v9 = list_make1_impl(226, (uint64_t)v1434);
            int v26 = v2053;
            *(void *)(StringConstCast + 24) = v1435;
            *(_DWORD *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = *(v12 - 3);
            break;
          case 1911:
            int v963 = v26;
            uint64_t StringConstCast = SystemTypeName(*v11);
            if (!strcmp((const char *)*v11, "bpchar"))
            {
              v1436 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
              _DWORD *v1436 = 349;
              v1436[2] = 221;
              v1436[4] = 1;
              v1436[6] = -1;
              *(double *)&uint64_t v9 = list_make1_impl(226, (uint64_t)v1436);
              *(void *)(StringConstCast + 24) = v1437;
            }
            int v1438 = *v12;
LABEL_1825:
            *(_DWORD *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = v1438;
            int v26 = v963;
            break;
          case 1912:
          case 1913:
          case 1915:
          case 1916:
          case 1917:
            if (*(unsigned char *)v11) {
              uint64_t StringConstCast = (uint64_t)"varchar";
            }
            else {
              uint64_t StringConstCast = (uint64_t)"bpchar";
            }
            break;
          case 1914:
            uint64_t StringConstCast = (uint64_t)"varchar";
            break;
          case 1918:
          case 1925:
          case 2124:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFFFFFFFF00 | 1;
            break;
          case 1919:
          case 1926:
          case 1927:
          case 2125:
          case 2126:
            StringConstCast &= 0xFFFFFFFFFFFFFF00;
            break;
          case 1920:
            int v696 = *(unsigned __int8 *)v11;
            v697 = "timestamptz";
            uint64_t v698 = "timestamp";
            goto LABEL_1160;
          case 1921:
            int v691 = *(unsigned __int8 *)v11;
            v692 = "timestamptz";
            v693 = "timestamp";
            goto LABEL_1212;
          case 1922:
            int v696 = *(unsigned __int8 *)v11;
            v697 = "timetz";
            uint64_t v698 = "time";
LABEL_1160:
            if (v696) {
              uint64_t v1393 = (uint64_t)v697;
            }
            else {
              uint64_t v1393 = (uint64_t)v698;
            }
            int v2051 = v26;
            uint64_t StringConstCast = SystemTypeName(v1393);
            uint64_t v2013 = v24;
            int v1394 = *((_DWORD *)v11 - 4);
            int v1395 = *(v12 - 2);
            v1396 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            _DWORD *v1396 = 349;
            v1396[2] = 221;
            v1396[4] = v1394;
            uint64_t v24 = v2013;
            v1396[6] = v1395;
            *(double *)&uint64_t v9 = list_make1_impl(226, (uint64_t)v1396);
            int v26 = v2051;
            *(void *)(StringConstCast + 24) = v1397;
            *(_DWORD *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = *(v12 - 4);
            break;
          case 1923:
            int v691 = *(unsigned __int8 *)v11;
            v692 = "timetz";
            v693 = "time";
LABEL_1212:
            if (v691) {
              v1357 = v692;
            }
            else {
              v1357 = v693;
            }
LABEL_1215:
            int v1439 = v26;
            unint64_t TypeName = SystemTypeName((uint64_t)v1357);
            int v26 = v1439;
            uint64_t StringConstCast = TypeName;
LABEL_1216:
            *(_DWORD *)(TypeName + 4_Block_object_dispose(&a9, 8) = *(v12 - 1);
            break;
          case 1924:
            uint64_t v110 = "interval";
LABEL_1344:
            int v1576 = v26;
            unint64_t v1577 = SystemTypeName((uint64_t)v110);
            int v26 = v1576;
            uint64_t StringConstCast = v1577;
            *(_DWORD *)(v1577 + 4_Block_object_dispose(&a9, 8) = *v12;
            break;
          case 1928:
            uint64_t v665 = v24;
            int v666 = *v12;
            int v667 = v26;
            v668 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t v669 = (uint64_t)v668;
            _DWORD *v668 = 349;
            v668[2] = 221;
            int v670 = 4;
            goto LABEL_1352;
          case 1929:
            uint64_t v665 = v24;
            int v666 = *v12;
            int v667 = v26;
            v668 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t v669 = (uint64_t)v668;
            _DWORD *v668 = 349;
            v668[2] = 221;
            int v670 = 2;
            goto LABEL_1352;
          case 1930:
            uint64_t v665 = v24;
            int v666 = *v12;
            int v667 = v26;
            v668 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t v669 = (uint64_t)v668;
            _DWORD *v668 = 349;
            v668[2] = 221;
            int v670 = 8;
            goto LABEL_1352;
          case 1931:
            uint64_t v665 = v24;
            int v666 = *v12;
            int v667 = v26;
            v668 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t v669 = (uint64_t)v668;
            _DWORD *v668 = 349;
            v668[2] = 221;
            int v670 = 1024;
            goto LABEL_1352;
          case 1932:
            uint64_t v665 = v24;
            int v666 = *v12;
            int v667 = v26;
            v668 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t v669 = (uint64_t)v668;
            _DWORD *v668 = 349;
            v668[2] = 221;
            int v670 = 2048;
            goto LABEL_1352;
          case 1934:
            uint64_t v665 = v24;
            int v666 = *(v12 - 2);
            int v667 = v26;
            v668 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t v669 = (uint64_t)v668;
            _DWORD *v668 = 349;
            v668[2] = 221;
            int v670 = 6;
            goto LABEL_1352;
          case 1935:
            uint64_t v665 = v24;
            int v666 = *(v12 - 2);
            int v667 = v26;
            v668 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t v669 = (uint64_t)v668;
            _DWORD *v668 = 349;
            v668[2] = 221;
            int v670 = 1032;
            goto LABEL_1352;
          case 1936:
            uint64_t v665 = v24;
            int v666 = *(v12 - 2);
            int v667 = v26;
            v668 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t v669 = (uint64_t)v668;
            _DWORD *v668 = 349;
            v668[2] = 221;
            int v670 = 3080;
            goto LABEL_1352;
          case 1937:
            uint64_t StringConstCast = *v11;
            uint64_t v1998 = v24;
            int v682 = *(v12 - 2);
            int v1045 = v26;
            v684 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1045;
            _DWORD *v684 = 349;
            v684[2] = 221;
            int v685 = 7176;
            goto LABEL_1218;
          case 1938:
            uint64_t v665 = v24;
            int v666 = *(v12 - 2);
            int v667 = v26;
            v668 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t v669 = (uint64_t)v668;
            _DWORD *v668 = 349;
            v668[2] = 221;
            int v670 = 3072;
            goto LABEL_1352;
          case 1939:
            uint64_t StringConstCast = *v11;
            uint64_t v1998 = v24;
            int v682 = *(v12 - 2);
            int v683 = v26;
            v684 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v683;
            _DWORD *v684 = 349;
            v684[2] = 221;
            int v685 = 7168;
            goto LABEL_1218;
          case 1940:
            uint64_t StringConstCast = *v11;
            uint64_t v1998 = v24;
            int v682 = *(v12 - 2);
            int v1440 = v26;
            v684 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1440;
            _DWORD *v684 = 349;
            v684[2] = 221;
            int v685 = 6144;
LABEL_1218:
            v684[4] = v685;
            v684[6] = v682;
            uint64_t v24 = v1998;
            **(void **)(StringConstCast + 16) = v684;
            break;
          case 1942:
            uint64_t v665 = v24;
            int v666 = *v12;
            int v667 = v26;
            v668 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            uint64_t v669 = (uint64_t)v668;
            _DWORD *v668 = 349;
            v668[2] = 221;
            int v670 = 4096;
LABEL_1352:
            v668[4] = v670;
            v668[6] = v666;
            uint64_t v24 = v665;
            *(double *)&uint64_t v9 = list_make1_impl(226, v669);
            int v26 = v667;
            goto LABEL_1778;
          case 1943:
            int v1500 = *(v12 - 3);
            unsigned int v1964 = v16;
            v1501 = v2065;
            int v2055 = v26;
            uint64_t v2017 = v24;
            v1502 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            _DWORD *v1502 = 349;
            v1502[2] = 221;
            v1502[4] = 4096;
            v1502[6] = v1500;
            int v1503 = *((_DWORD *)v11 - 2);
            int v1504 = *(v12 - 1);
            uint64_t v1505 = *v1501;
            uint64_t v16 = v1964;
            v1506 = (_DWORD *)MemoryContextAllocZeroAligned(v1505, 0x20uLL);
            _DWORD *v1506 = 349;
            v1506[2] = 221;
            v1506[4] = v1503;
            v1506[6] = v1504;
            uint64_t v1507 = (uint64_t)v1502;
            uint64_t v24 = v2017;
            *(double *)&uint64_t v9 = list_make2_impl(226, v1507, (uint64_t)v1506);
            int v26 = v2055;
            uint64_t StringConstCast = (uint64_t)v1508;
            break;
          case 1945:
            uint64_t v711 = v24;
            uint64_t v712 = *(v11 - 2);
            uint64_t v713 = *v11;
            unsigned int v1953 = v16;
            v1971 = v15;
            int v714 = *(v12 - 1);
            int v715 = v26;
            unint64_t v716 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v715;
            *(_DWORD *)unint64_t v716 = 357;
            *(void *)(v716 + _Block_object_dispose(&a9, 8) = v712;
            *(void *)(v716 + 16) = v713;
            uint64_t v24 = v711;
            *(_DWORD *)(v716 + 24) = v714;
            uint64_t v15 = v1971;
            uint64_t v16 = v1953;
            uint64_t StringConstCast = v716;
            break;
          case 1946:
            int v1441 = v26;
            unint64_t v796 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1441;
            uint64_t StringConstCast = v796;
            *(_DWORD *)unint64_t v796 = 358;
            *(void *)(v796 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v796 + 16) = *v11;
            goto LABEL_1220;
          case 1947:
            int v964 = v26;
            SystemFuncName((uint64_t)"timezone");
            uint64_t v965 = v24;
            uint64_t v967 = v966;
            double v968 = list_make2_impl(226, *v11, *(v11 - 4));
            uint64_t v970 = v969;
            uint64_t v971 = v967;
            uint64_t v24 = v965;
            DefEleunint64_t m = makeFuncCall(v971, v970, *(v12 - 3), v968);
            int v26 = v964;
            goto LABEL_1778;
          case 1948:
          case 2016:
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "+";
            int v111 = 0;
            uint64_t v96 = 0;
            goto LABEL_205;
          case 1950:
          case 2018:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "+";
            goto LABEL_204;
          case 1951:
          case 2019:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "-";
            goto LABEL_204;
          case 1952:
          case 2020:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "*";
            goto LABEL_204;
          case 1953:
          case 2021:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "/";
            goto LABEL_204;
          case 1954:
          case 2022:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "%";
            goto LABEL_204;
          case 1955:
          case 2023:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "^";
            goto LABEL_204;
          case 1956:
          case 2024:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "<";
            goto LABEL_204;
          case 1957:
          case 2025:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = ">";
            goto LABEL_204;
          case 1958:
          case 2026:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "=";
            goto LABEL_204;
          case 1959:
          case 2027:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "<=";
            goto LABEL_204;
          case 1960:
          case 2028:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = ">=";
            goto LABEL_204;
          case 1961:
          case 2029:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "<>";
LABEL_204:
            int v111 = 0;
            goto LABEL_205;
          case 1962:
          case 2032:
            uint64_t v88 = *(v11 - 2);
            uint64_t v87 = *(v11 - 1);
            uint64_t v90 = *v11;
            int v89 = *(v12 - 1);
            goto LABEL_202;
          case 1963:
          case 2033:
            uint64_t v87 = *(v11 - 1);
            uint64_t v90 = *v11;
            int v89 = *(v12 - 1);
            uint64_t v88 = 0;
            goto LABEL_202;
          case 1964:
          case 2034:
            uint64_t v88 = *(v11 - 1);
            uint64_t v87 = *v11;
            int v89 = *v12;
            uint64_t v90 = 0;
LABEL_202:
            int v32 = v26;
            DefEleunint64_t m = makeA_Expr(0, v87, v88, v90, v89);
            goto LABEL_1777;
          case 1965:
          case 2030:
            uint64_t v102 = *(v11 - 2);
            uint64_t v103 = *v11;
            int v104 = *(v12 - 1);
            goto LABEL_199;
          case 1966:
          case 2031:
            uint64_t v102 = *(v11 - 1);
            int v104 = *v12;
            uint64_t v103 = 0;
LABEL_199:
            int v32 = v26;
            DefEleunint64_t m = makeInterval_or_AExprOp(v102, v103, v104);
            goto LABEL_1777;
          case 1967:
            int v32 = v26;
            DefEleunint64_t m = makeAndExpr((_DWORD *)*(v11 - 2), *v11, *(v12 - 1));
            goto LABEL_1777;
          case 1968:
            int v32 = v26;
            DefEleunint64_t m = makeOrExpr((_DWORD *)*(v11 - 2), *v11, *(v12 - 1));
            goto LABEL_1777;
          case 1969:
          case 1970:
            int v32 = v26;
            DefEleunint64_t m = makeNotExpr(*v11, *(v12 - 1));
            goto LABEL_1777;
          case 1971:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "~~";
            int v111 = 8;
            goto LABEL_205;
          case 1972:
            int v717 = v26;
            SystemFuncName((uint64_t)"like_escape");
            uint64_t v769 = v24;
            uint64_t v771 = v770;
            double v772 = list_make2_impl(226, *(v11 - 2), *v11);
            uint64_t v774 = v773;
            uint64_t v775 = v771;
            uint64_t v24 = v769;
            unint64_t v725 = makeFuncCall(v775, v774, *(v12 - 3), v772);
            uint64_t v726 = *(v11 - 4);
            int v727 = *(v12 - 3);
            v776 = "~~";
            goto LABEL_1310;
          case 1973:
            uint64_t v96 = *(v11 - 3);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 2);
            uint64_t v99 = "!~~";
            int v111 = 8;
            goto LABEL_205;
          case 1974:
            int v717 = v26;
            SystemFuncName((uint64_t)"like_escape");
            uint64_t v1545 = v24;
            uint64_t v1547 = v1546;
            double v1548 = list_make2_impl(226, *(v11 - 2), *v11);
            uint64_t v1550 = v1549;
            uint64_t v1551 = v1547;
            uint64_t v24 = v1545;
            unint64_t v725 = makeFuncCall(v1551, v1550, *(v12 - 4), v1548);
            uint64_t v726 = *(v11 - 5);
            int v727 = *(v12 - 4);
            v776 = "!~~";
LABEL_1310:
            int v891 = 8;
            goto LABEL_1311;
          case 1975:
            uint64_t v96 = *(v11 - 2);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 1);
            uint64_t v99 = "~~*";
            int v111 = 9;
            goto LABEL_205;
          case 1976:
            int v717 = v26;
            SystemFuncName((uint64_t)"like_escape");
            uint64_t v1046 = v24;
            uint64_t v1048 = v1047;
            double v1049 = list_make2_impl(226, *(v11 - 2), *v11);
            uint64_t v1051 = v1050;
            uint64_t v1052 = v1048;
            uint64_t v24 = v1046;
            unint64_t v725 = makeFuncCall(v1052, v1051, *(v12 - 3), v1049);
            uint64_t v726 = *(v11 - 4);
            int v727 = *(v12 - 3);
            v776 = "~~*";
            int v891 = 9;
            goto LABEL_1311;
          case 1977:
            uint64_t v96 = *(v11 - 3);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 2);
            uint64_t v99 = "!~~*";
            int v111 = 9;
            goto LABEL_205;
          case 1978:
            int v717 = v26;
            SystemFuncName((uint64_t)"like_escape");
            uint64_t v884 = v24;
            uint64_t v886 = v885;
            double v887 = list_make2_impl(226, *(v11 - 2), *v11);
            uint64_t v889 = v888;
            uint64_t v890 = v886;
            uint64_t v24 = v884;
            unint64_t v725 = makeFuncCall(v890, v889, *(v12 - 4), v887);
            uint64_t v726 = *(v11 - 5);
            int v727 = *(v12 - 4);
            v776 = "!~~*";
            int v891 = 9;
            goto LABEL_1311;
          case 1979:
            int v717 = v26;
            SystemFuncName((uint64_t)"similar_to_escape");
            uint64_t v1174 = v24;
            uint64_t v1176 = v1175;
            double v1177 = list_make1_impl(226, *v11);
            uint64_t v1179 = v1178;
            uint64_t v1180 = v1176;
            uint64_t v24 = v1174;
            unint64_t v725 = makeFuncCall(v1180, v1179, *(v12 - 2), v1177);
            uint64_t v726 = *(v11 - 3);
            int v727 = *(v12 - 2);
            goto LABEL_935;
          case 1980:
            int v717 = v26;
            SystemFuncName((uint64_t)"similar_to_escape");
            uint64_t v718 = v24;
            uint64_t v720 = v719;
            double v721 = list_make2_impl(226, *(v11 - 2), *v11);
            uint64_t v723 = v722;
            uint64_t v724 = v720;
            uint64_t v24 = v718;
            unint64_t v725 = makeFuncCall(v724, v723, *(v12 - 4), v721);
            uint64_t v726 = *(v11 - 5);
            int v727 = *(v12 - 4);
LABEL_935:
            v776 = "~";
            int v891 = 10;
            goto LABEL_1311;
          case 1981:
            int v717 = v26;
            SystemFuncName((uint64_t)"similar_to_escape");
            uint64_t v1358 = v24;
            uint64_t v1360 = v1359;
            double v1361 = list_make1_impl(226, *v11);
            uint64_t v1363 = v1362;
            uint64_t v1364 = v1360;
            uint64_t v24 = v1358;
            unint64_t v725 = makeFuncCall(v1364, v1363, *(v12 - 3), v1361);
            uint64_t v726 = *(v11 - 4);
            int v727 = *(v12 - 3);
            goto LABEL_1134;
          case 1982:
            int v717 = v26;
            SystemFuncName((uint64_t)"similar_to_escape");
            uint64_t v1112 = v24;
            uint64_t v1114 = v1113;
            double v1115 = list_make2_impl(226, *(v11 - 2), *v11);
            uint64_t v1117 = v1116;
            uint64_t v1118 = v1114;
            uint64_t v24 = v1112;
            unint64_t v725 = makeFuncCall(v1118, v1117, *(v12 - 5), v1115);
            uint64_t v726 = *(v11 - 6);
            int v727 = *(v12 - 5);
LABEL_1134:
            v776 = "!~";
            int v891 = 10;
            goto LABEL_1311;
          case 1983:
            int v795 = v26;
            unint64_t v796 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v795;
            uint64_t StringConstCast = v796;
            *(_DWORD *)unint64_t v796 = 140;
            *(void *)(v796 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(_DWORD *)(v796 + 16) = 0;
LABEL_1220:
            *(_DWORD *)(v796 + 24) = *(v12 - 1);
            break;
          case 1984:
            int v1265 = v26;
            unint64_t v1120 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1265;
            uint64_t StringConstCast = v1120;
            *(_DWORD *)unint64_t v1120 = 140;
            *(void *)(v1120 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v1120 + 16) = 0;
            goto LABEL_1038;
          case 1985:
            int v1365 = v26;
            unint64_t v1366 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1365;
            uint64_t StringConstCast = v1366;
            *(_DWORD *)unint64_t v1366 = 140;
            *(void *)(v1366 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(_DWORD *)(v1366 + 16) = 1;
            *(_DWORD *)(v1366 + 24) = *(v12 - 2);
            break;
          case 1986:
            int v1119 = v26;
            unint64_t v1120 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1119;
            uint64_t StringConstCast = v1120;
            *(_DWORD *)unint64_t v1120 = 140;
            *(void *)(v1120 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v1120 + 16) = 1;
LABEL_1038:
            *(_DWORD *)(v1120 + 24) = *v12;
            break;
          case 1987:
            uint64_t v1367 = *(v11 - 2);
            if (!v1367 || *(_DWORD *)(v1367 + 4) != 2) {
              base_yyparse_cold_43();
            }
            int v2050 = v26;
            if (!*v11 || *(_DWORD *)(*v11 + 4) != 2) {
              base_yyparse_cold_44();
            }
            uint64_t v1368 = v24;
            SystemFuncName((uint64_t)"overlaps");
            uint64_t v1370 = v1369;
            uint64_t v1371 = list_concat(*(v11 - 2), (const void **)*v11);
            uint64_t StringConstCast = makeFuncCall(v1370, v1371, *(v12 - 1), v1372);
            uint64_t v24 = v1368;
            int v26 = v2050;
            break;
          case 1988:
            int v1014 = v26;
            unint64_t v973 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1014;
            uint64_t StringConstCast = v973;
            *(_DWORD *)unint64_t v973 = 141;
            *(void *)(v973 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(_DWORD *)(v973 + 16) = 0;
            goto LABEL_1223;
          case 1989:
            int v1121 = v26;
            unint64_t v1122 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1121;
            uint64_t StringConstCast = v1122;
            *(_DWORD *)unint64_t v1122 = 141;
            *(void *)(v1122 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v1123 = 1;
            goto LABEL_937;
          case 1990:
            int v1442 = v26;
            unint64_t v973 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1442;
            uint64_t StringConstCast = v973;
            *(_DWORD *)unint64_t v973 = 141;
            *(void *)(v973 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            int v974 = 2;
            goto LABEL_1222;
          case 1991:
            int v1124 = v26;
            unint64_t v1122 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1124;
            uint64_t StringConstCast = v1122;
            *(_DWORD *)unint64_t v1122 = 141;
            *(void *)(v1122 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v1123 = 3;
            goto LABEL_937;
          case 1992:
            int v972 = v26;
            unint64_t v973 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v972;
            uint64_t StringConstCast = v973;
            *(_DWORD *)unint64_t v973 = 141;
            *(void *)(v973 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            int v974 = 4;
LABEL_1222:
            *(_DWORD *)(v973 + 16) = v974;
LABEL_1223:
            *(_DWORD *)(v973 + 2errstart(20, 0) = *(v12 - 1);
            break;
          case 1993:
            int v1181 = v26;
            unint64_t v1122 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1181;
            uint64_t StringConstCast = v1122;
            *(_DWORD *)unint64_t v1122 = 141;
            *(void *)(v1122 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            int v1123 = 5;
LABEL_937:
            *(_DWORD *)(v1122 + 16) = v1123;
            *(_DWORD *)(v1122 + 2errstart(20, 0) = *(v12 - 2);
            break;
          case 1994:
          case 2035:
            uint64_t v96 = *(v11 - 4);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 3);
            uint64_t v99 = "=";
            int v111 = 3;
            goto LABEL_205;
          case 1995:
          case 2036:
            uint64_t v96 = *(v11 - 5);
            uint64_t v97 = *v11;
            int v98 = *(v12 - 4);
            uint64_t v99 = "=";
            int v111 = 4;
            goto LABEL_205;
          case 1996:
          case 2037:
            uint64_t v96 = *(v11 - 5);
            uint64_t v97 = *(v11 - 1);
            int v98 = *(v12 - 4);
            uint64_t v99 = "=";
            int v111 = 6;
            goto LABEL_205;
          case 1997:
          case 2038:
            uint64_t v96 = *(v11 - 6);
            uint64_t v97 = *(v11 - 1);
            int v98 = *(v12 - 5);
            uint64_t v99 = "<>";
            int v111 = 6;
            goto LABEL_205;
          case 1998:
            uint64_t v995 = v24;
            uint64_t v996 = *(v11 - 5);
            int v717 = v26;
            list_make2_impl(226, *(v11 - 2), *v11);
            unint64_t v725 = v1317;
            int v727 = *(v12 - 4);
            v776 = "BETWEEN";
            int v891 = 11;
            goto LABEL_1097;
          case 1999:
            uint64_t v995 = v24;
            uint64_t v996 = *(v11 - 6);
            int v717 = v26;
            list_make2_impl(226, *(v11 - 2), *v11);
            unint64_t v725 = v1125;
            int v727 = *(v12 - 5);
            v776 = "NOT BETWEEN";
            int v891 = 12;
            goto LABEL_1097;
          case 2000:
            uint64_t v995 = v24;
            uint64_t v996 = *(v11 - 5);
            int v717 = v26;
            list_make2_impl(226, *(v11 - 2), *v11);
            unint64_t v725 = v1297;
            int v727 = *(v12 - 4);
            v776 = "BETWEEN SYMMETRIC";
            int v891 = 13;
            goto LABEL_1097;
          case 2001:
            uint64_t v995 = v24;
            uint64_t v996 = *(v11 - 6);
            int v717 = v26;
            list_make2_impl(226, *(v11 - 2), *v11);
            unint64_t v725 = v997;
            int v727 = *(v12 - 5);
            v776 = "NOT BETWEEN SYMMETRIC";
            int v891 = 14;
LABEL_1097:
            uint64_t v726 = v996;
            uint64_t v24 = v995;
LABEL_1311:
            DefEleunint64_t m = makeSimpleA_Expr(v891, (uint64_t)v776, v726, v725, v727);
            int v26 = v717;
            goto LABEL_1778;
          case 2002:
            uint64_t StringConstCast = *v11;
            if (*(_DWORD *)*v11 == 120)
            {
              uint64_t v9 = 2;
              *(void *)(StringConstCast + 4) = 2;
              *(void *)(StringConstCast + 16) = *(v11 - 2);
              *(void *)(StringConstCast + 24) = 0;
              *(_DWORD *)(StringConstCast + 4errstart(20, 0) = *(v12 - 1);
              break;
            }
            uint64_t v96 = *(v11 - 2);
            int v98 = *(v12 - 1);
            uint64_t v99 = "=";
            int v111 = 7;
            uint64_t v97 = *v11;
LABEL_205:
            int v32 = v26;
            DefEleunint64_t m = makeSimpleA_Expr(v111, (uint64_t)v99, v96, v97, v98);
            goto LABEL_1777;
          case 2003:
            int v1053 = v26;
            uint64_t v1339 = *v11;
            if (*(_DWORD *)*v11 == 120)
            {
              *(void *)(v1339 + 4) = 2;
              *(void *)(v1339 + 16) = *(v11 - 3);
              *(void *)(v1339 + 24) = 0;
              *(_DWORD *)(v1339 + 4errstart(20, 0) = *(v12 - 2);
              unint64_t NotExpr = makeNotExpr(v1339, *(v12 - 2));
            }
            else
            {
              unint64_t NotExpr = makeSimpleA_Expr(7, (uint64_t)"<>", *(v11 - 3), v1339, *(v12 - 2));
            }
            goto LABEL_1862;
          case 2004:
            int v1266 = v26;
            unint64_t v1267 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1266;
            uint64_t StringConstCast = v1267;
            *(_DWORD *)unint64_t v1267 = 120;
            *(_DWORD *)(v1267 + 4) = *((_DWORD *)v11 - 2);
            *(_DWORD *)(v1267 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v1267 + 16) = *(v11 - 3);
            *(void *)(v1267 + 24) = *(v11 - 2);
            *(void *)(v1267 + 32) = *v11;
            *(_DWORD *)(v1267 + 4errstart(20, 0) = *(v12 - 2);
            break;
          case 2005:
            int v1053 = v26;
            if (*((_DWORD *)v11 - 6) == 2) {
              int v1054 = 1;
            }
            else {
              int v1054 = 2;
            }
            unint64_t NotExpr = makeA_Expr(v1054, *(v11 - 4), *(v11 - 5), *(v11 - 1), *(v12 - 4));
            goto LABEL_1862;
          case 2006:
            base_yyparse_cold_45();
          case 2007:
          case 2039:
            int v121 = v26;
            list_make1_impl(226, *(v11 - 2));
            uint64_t v122 = v24;
            uint64_t v124 = v123;
            int v2028 = *(v12 - 1);
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v121;
            uint64_t v9 = 0x70000008BLL;
            goto LABEL_748;
          case 2008:
          case 2040:
            int v2027 = v26;
            list_make1_impl(226, *(v11 - 3));
            uint64_t v113 = v24;
            uint64_t v115 = v114;
            int v116 = *(v12 - 2);
            unint64_t v117 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            *(void *)unint64_t v117 = 0x70000008BLL;
            *(void *)(v117 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v117 + 16) = 0;
            *(void *)(v117 + 24) = 0;
            *(void *)(v117 + 32) = v115;
            uint64_t v24 = v113;
            *(_DWORD *)(v117 + 44) = 0;
            *(_DWORD *)(v117 + 52) = v116;
            int v118 = *(v12 - 2);
            goto LABEL_1225;
          case 2009:
            int v810 = v26;
            SystemFuncName((uint64_t)"is_normalized");
            uint64_t v811 = v24;
            uint64_t v813 = v1509;
            double v814 = list_make1_impl(226, *(v11 - 2));
            uint64_t v816 = v1510;
            int v817 = *(v12 - 1);
            goto LABEL_1275;
          case 2010:
            int v2039 = v26;
            SystemFuncName((uint64_t)"is_normalized");
            uint64_t v798 = v797;
            uint64_t v1972 = *(v11 - 3);
            uint64_t v2000 = v24;
            v799 = v15;
            uint64_t v800 = *(v11 - 1);
            uint64_t v801 = v16;
            int v802 = *(v12 - 1);
            unint64_t v803 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)unint64_t v803 = 349;
            *(_DWORD *)(v803 + _Block_object_dispose(&a9, 8) = 223;
            *(void *)(v803 + 16) = v800;
            uint64_t v15 = v799;
            *(_DWORD *)(v803 + 24) = v802;
            uint64_t v16 = v801;
            uint64_t v24 = v2000;
            double v804 = list_make2_impl(226, v1972, v803);
            uint64_t v806 = v805;
            int v807 = *(v12 - 2);
            goto LABEL_1144;
          case 2011:
            int v1318 = v26;
            SystemFuncName((uint64_t)"is_normalized");
            uint64_t v1319 = v24;
            uint64_t v1321 = v1320;
            double v1322 = list_make1_impl(226, *(v11 - 3));
            uint64_t v1324 = v1323;
            uint64_t v1325 = v1321;
            uint64_t v24 = v1319;
            unint64_t v1326 = makeFuncCall(v1325, v1324, *(v12 - 2), v1322);
            DefEleunint64_t m = makeNotExpr(v1326, *(v12 - 2));
            int v26 = v1318;
            goto LABEL_1778;
          case 2012:
            int v2027 = v26;
            SystemFuncName((uint64_t)"is_normalized");
            uint64_t v1444 = v1443;
            uint64_t v1984 = *(v11 - 4);
            uint64_t v2016 = v24;
            v1445 = v15;
            uint64_t v1446 = *(v11 - 1);
            uint64_t v1447 = v16;
            int v1448 = *(v12 - 1);
            unint64_t v1449 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)unint64_t v1449 = 349;
            *(_DWORD *)(v1449 + _Block_object_dispose(&a9, 8) = 223;
            *(void *)(v1449 + 16) = v1446;
            uint64_t v15 = v1445;
            *(_DWORD *)(v1449 + 24) = v1448;
            uint64_t v16 = v1447;
            uint64_t v24 = v2016;
            double v1450 = list_make2_impl(226, v1984, v1449);
            unint64_t v117 = makeFuncCall(v1444, v1451, *(v12 - 3), v1450);
            int v118 = *(v12 - 3);
LABEL_1225:
            DefEleunint64_t m = makeNotExpr(v117, v118);
            int v26 = v2027;
            goto LABEL_1778;
          case 2013:
            int v1398 = v26;
            v1399 = (char *)MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v1398;
            uint64_t StringConstCast = (uint64_t)v1399;
            *(_DWORD *)v1399 = 144;
            *((_DWORD *)v1399 + 4) = *v12;
            break;
          case 2015:
            uint64_t v998 = v24;
            uint64_t v999 = *(v11 - 2);
            uint64_t v1000 = *v11;
            unsigned int v1956 = v16;
            v1975 = v15;
            int v1001 = *(v12 - 1);
            goto LABEL_1077;
          case 2043:
            int v2054 = v26;
            uint64_t v1452 = v24;
            v1453 = v2065;
            v1454 = (char *)MemoryContextAllocZero(*v2065, 0xCuLL);
            uint64_t StringConstCast = (uint64_t)v1454;
            *(_DWORD *)v1454 = 348;
            *((_DWORD *)v1454 + 1) = *((_DWORD *)v11 - 2);
            goto LABEL_1277;
          case 2044:
            int v2054 = v26;
            uint64_t v1452 = v24;
            v1453 = v2065;
            v1454 = (char *)MemoryContextAllocZero(*v2065, 0xCuLL);
            uint64_t StringConstCast = (uint64_t)v1454;
            uint64_t v9 = 348;
            *(void *)v1454 = 348;
LABEL_1277:
            *((_DWORD *)v1454 + 2) = *(v12 - 1);
            if (*v11)
            {
              unint64_t v1512 = MemoryContextAllocZeroAligned(*v1453, 0x18uLL);
              *(_DWORD *)unint64_t v1512 = 353;
              *(void *)(v1512 + _Block_object_dispose(&a9, 8) = StringConstCast;
              *(void *)(v1512 + 16) = check_indirection(*v11, (uint64_t)v2064);
              uint64_t StringConstCast = v1512;
              uint64_t v24 = v1452;
              int v26 = v2054;
            }
            else
            {
LABEL_1501:
              uint64_t v24 = v1452;
              int v26 = v2054;
            }
            break;
          case 2045:
            if (*v11)
            {
              int v1241 = v26;
              uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
              *(_DWORD *)uint64_t StringConstCast = 353;
              *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = *(v11 - 2);
              uint64_t v1242 = check_indirection(*v11, (uint64_t)v2064);
              int v26 = v1241;
              *(void *)(StringConstCast + 16) = v1242;
            }
            else
            {
              uint64_t StringConstCast = *(v11 - 2);
              if (*v1967)
              {
                int v32 = v26;
                int v1938 = exprLocation(*(v11 - 2));
                DefEleunint64_t m = makeA_Expr(15, 0, StringConstCast, 0, v1938);
LABEL_1777:
                int v26 = v32;
LABEL_1778:
                uint64_t StringConstCast = DefElem;
              }
            }
            break;
          case 2048:
            int v1513 = v26;
            unint64_t v1514 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1513;
            uint64_t StringConstCast = v1514;
            uint64_t v9 = 0x400000078;
            *(void *)unint64_t v1514 = 0x400000078;
            *(_DWORD *)(v1514 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v1514 + 16) = 0;
            *(void *)(v1514 + 24) = 0;
            *(void *)(v1514 + 32) = *v11;
            *(_DWORD *)(v1514 + 4errstart(20, 0) = *v12;
            break;
          case 2049:
            v1298 = v2065;
            int v2049 = v26;
            uint64_t v2011 = v24;
            unint64_t v1299 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            *(_DWORD *)unint64_t v1299 = 120;
            uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v1298, 0x18uLL);
            *(_DWORD *)uint64_t StringConstCast = 353;
            *(void *)(v1299 + 4) = 4;
            *(void *)(v1299 + 16) = 0;
            *(void *)(v1299 + 24) = 0;
            *(void *)(v1299 + 32) = *(v11 - 1);
            *(_DWORD *)(v1299 + 4errstart(20, 0) = *(v12 - 1);
            *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = v1299;
            uint64_t v24 = v2011;
            uint64_t v1300 = check_indirection(*v11, (uint64_t)v2064);
            int v26 = v2049;
            *(void *)(StringConstCast + 16) = v1300;
            break;
          case 2050:
            int v777 = v26;
            unint64_t v778 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v777;
            uint64_t StringConstCast = v778;
            uint64_t v9 = 120;
            goto LABEL_1281;
          case 2051:
            int v1515 = v26;
            unint64_t v778 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1515;
            uint64_t StringConstCast = v778;
            uint64_t v9 = 0x600000078;
LABEL_1281:
            *(double *)unint64_t v778 = *(double *)&v9;
            *(_DWORD *)(v778 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v778 + 16) = 0;
            *(void *)(v778 + 24) = 0;
            *(void *)(v778 + 32) = *v11;
            *(_DWORD *)(v778 + 4errstart(20, 0) = *(v12 - 1);
            break;
          case 2052:
            uint64_t StringConstCast = *v11;
            *(_DWORD *)(*v11 + 16) = *(v12 - 1);
            break;
          case 2053:
            int v1373 = v26;
            unint64_t v120 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1373;
            uint64_t StringConstCast = v120;
            *(_DWORD *)unint64_t v120 = 134;
            *(void *)(v120 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v120 + 16) = 0;
            *(void *)(v120 + 24) = 0;
            goto LABEL_1142;
          case 2054:
            int v758 = v26;
            unint64_t v120 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v758;
            uint64_t StringConstCast = v120;
            *(_DWORD *)unint64_t v120 = 134;
            *(void *)(v120 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v120 + 24) = 0;
            uint64_t v9 = 0x200000000;
            *(void *)(v120 + 16) = 0x200000000;
            goto LABEL_1142;
          case 2055:
            int v975 = v26;
            unint64_t v976 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v975;
            uint64_t StringConstCast = v976;
            *(_DWORD *)unint64_t v976 = 110;
            *(void *)(v976 + _Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(_DWORD *)(v976 + 36) = *(v12 - 3);
            break;
          case 2056:
            int v32 = v26;
            DefEleunint64_t m = makeFuncCall(*(v11 - 2), 0, *(v12 - 2), *(double *)&v9);
            goto LABEL_1777;
          case 2057:
            uint64_t v779 = *(v11 - 4);
            uint64_t v780 = *(v11 - 2);
            int v781 = *(v12 - 4);
            goto LABEL_795;
          case 2058:
            uint64_t v1516 = v24;
            uint64_t v1517 = *(v11 - 5);
            int v1518 = v26;
            double v1519 = list_make1_impl(226, *(v11 - 2));
            uint64_t v1521 = v1520;
            int v1522 = *(v12 - 5);
            goto LABEL_1284;
          case 2059:
            uint64_t v1516 = v24;
            uint64_t v1517 = *(v11 - 7);
            int v1518 = v26;
            uint64_t v1521 = lappend(*(v11 - 5), *(v11 - 2));
            int v1522 = *(v12 - 7);
LABEL_1284:
            uint64_t v1523 = v1517;
            uint64_t v24 = v1516;
            unint64_t v690 = makeFuncCall(v1523, v1521, v1522, v1519);
            int v26 = v1518;
            uint64_t StringConstCast = v690;
            *(unsigned char *)(v690 + 43) = 1;
            goto LABEL_1364;
          case 2060:
            uint64_t v779 = *(v11 - 5);
            uint64_t v780 = *(v11 - 2);
            int v781 = *(v12 - 5);
LABEL_795:
            int v1002 = v26;
            unint64_t v690 = makeFuncCall(v779, v780, v781, *(double *)&v9);
            int v26 = v1002;
            uint64_t StringConstCast = v690;
LABEL_1364:
            *(void *)(v690 + 24) = *(v11 - 1);
            break;
          case 2061:
            int v1255 = v26;
            unint64_t v1256 = makeFuncCall(*(v11 - 5), *(v11 - 2), *(v12 - 5), *(double *)&v9);
            int v26 = v1255;
            uint64_t StringConstCast = v1256;
            *(void *)(v1256 + 24) = *(v11 - 1);
            *(unsigned char *)(v1256 + 42) = 1;
            break;
          case 2062:
            int v808 = v26;
            unint64_t v809 = makeFuncCall(*(v11 - 3), 0, *(v12 - 3), *(double *)&v9);
            int v26 = v808;
            uint64_t StringConstCast = v809;
            *(unsigned char *)(v809 + 41) = 1;
            break;
          case 2063:
            uint64_t StringConstCast = *(v11 - 3);
            uint64_t v852 = *(v11 - 2);
            if (v852)
            {
              if (*(void *)(StringConstCast + 24)) {
                base_yyparse_cold_48();
              }
              if (*(unsigned char *)(StringConstCast + 42)) {
                base_yyparse_cold_47();
              }
              if (*(unsigned char *)(StringConstCast + 43)) {
                base_yyparse_cold_46();
              }
              *(void *)(StringConstCast + 24) = v852;
              *(unsigned char *)(StringConstCast + 4errstart(20, 0) = 1;
            }
            *(void *)(StringConstCast + 32) = *(v11 - 1);
            *(void *)(StringConstCast + 4_Block_object_dispose(&a9, 8) = *v11;
            break;
          case 2067:
            int v810 = v26;
            SystemFuncName((uint64_t)"pg_collation_for");
            uint64_t v811 = v24;
            uint64_t v813 = v892;
            double v814 = list_make1_impl(226, *(v11 - 1));
            goto LABEL_1147;
          case 2068:
            uint64_t v782 = v24;
            int v783 = *v12;
            int v1222 = v26;
            unint64_t v785 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v1222;
            uint64_t StringConstCast = v785;
            uint64_t v9 = 138;
            goto LABEL_1287;
          case 2069:
            uint64_t v782 = v24;
            int v783 = *v12;
            int v1524 = v26;
            unint64_t v785 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v1524;
            uint64_t StringConstCast = v785;
            uint64_t v9 = 0x10000008ALL;
            goto LABEL_1287;
          case 2070:
            uint64_t v1999 = v24;
            int v759 = *((_DWORD *)v11 - 2);
            int v760 = *(v12 - 3);
            int v853 = v26;
            unint64_t v762 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v853;
            uint64_t StringConstCast = v762;
            uint64_t v9 = 0x20000008ALL;
            goto LABEL_704;
          case 2071:
            uint64_t v782 = v24;
            int v783 = *v12;
            int v1525 = v26;
            unint64_t v785 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v1525;
            uint64_t StringConstCast = v785;
            uint64_t v9 = 0x30000008ALL;
            goto LABEL_1287;
          case 2072:
            uint64_t v1999 = v24;
            int v759 = *((_DWORD *)v11 - 2);
            int v760 = *(v12 - 3);
            int v834 = v26;
            unint64_t v762 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v834;
            uint64_t StringConstCast = v762;
            uint64_t v9 = 0x40000008ALL;
            goto LABEL_704;
          case 2073:
            uint64_t v782 = v24;
            int v783 = *v12;
            int v1182 = v26;
            unint64_t v785 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v1182;
            uint64_t StringConstCast = v785;
            uint64_t v9 = 0x50000008ALL;
            goto LABEL_1287;
          case 2074:
            uint64_t v1999 = v24;
            int v759 = *((_DWORD *)v11 - 2);
            int v760 = *(v12 - 3);
            int v761 = v26;
            unint64_t v762 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v761;
            uint64_t StringConstCast = v762;
            uint64_t v9 = 0x60000008ALL;
            goto LABEL_704;
          case 2075:
            uint64_t v782 = v24;
            int v783 = *v12;
            int v1126 = v26;
            unint64_t v785 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v1126;
            uint64_t StringConstCast = v785;
            uint64_t v9 = 0x70000008ALL;
            goto LABEL_1287;
          case 2076:
            uint64_t v1999 = v24;
            int v759 = *((_DWORD *)v11 - 2);
            int v760 = *(v12 - 3);
            int v763 = v26;
            unint64_t v762 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v763;
            uint64_t StringConstCast = v762;
            uint64_t v9 = 0x80000008ALL;
LABEL_704:
            *(double *)unint64_t v762 = *(double *)&v9;
            *(_DWORD *)(v762 + 12) = v759;
            *(_DWORD *)(v762 + 16) = v760;
            uint64_t v24 = v1999;
            break;
          case 2077:
            uint64_t v782 = v24;
            int v783 = *v12;
            int v1183 = v26;
            unint64_t v785 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v1183;
            uint64_t StringConstCast = v785;
            uint64_t v9 = 0x90000008ALL;
            goto LABEL_1287;
          case 2078:
            uint64_t v782 = v24;
            int v783 = *v12;
            int v854 = v26;
            unint64_t v785 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v854;
            uint64_t StringConstCast = v785;
            uint64_t v9 = 0xA0000008ALL;
            goto LABEL_1287;
          case 2079:
            uint64_t v782 = v24;
            int v783 = *v12;
            int v784 = v26;
            unint64_t v785 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v784;
            uint64_t StringConstCast = v785;
            uint64_t v9 = 0xC0000008ALL;
            goto LABEL_1287;
          case 2080:
            uint64_t v782 = v24;
            int v783 = *v12;
            int v894 = v26;
            unint64_t v785 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v894;
            uint64_t StringConstCast = v785;
            uint64_t v9 = 0xB0000008ALL;
            goto LABEL_1287;
          case 2081:
            uint64_t v782 = v24;
            int v783 = *v12;
            int v828 = v26;
            unint64_t v785 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v828;
            uint64_t StringConstCast = v785;
            uint64_t v9 = 0xD0000008ALL;
            goto LABEL_1287;
          case 2082:
            uint64_t v782 = v24;
            int v783 = *v12;
            int v1340 = v26;
            unint64_t v785 = MemoryContextAllocZero(*v2065, 0x14uLL);
            int v26 = v1340;
            uint64_t StringConstCast = v785;
            uint64_t v9 = 0xE0000008ALL;
LABEL_1287:
            *(double *)unint64_t v785 = *(double *)&v9;
            *(_DWORD *)(v785 + 12) = -1;
            *(_DWORD *)(v785 + 16) = v783;
            uint64_t v24 = v782;
            break;
          case 2083:
            uint64_t v998 = v24;
            uint64_t v999 = *(v11 - 3);
            uint64_t v1000 = *(v11 - 1);
            unsigned int v1956 = v16;
            v1975 = v15;
            int v1001 = *(v12 - 5);
LABEL_1077:
            int v1301 = v26;
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1301;
            *(_DWORD *)DefEleunint64_t m = 357;
            *(void *)(DefElem + _Block_object_dispose(&a9, 8) = v999;
            *(void *)(DefElem + 16) = v1000;
            uint64_t v24 = v998;
            *(_DWORD *)(DefElem + 24) = v1001;
            goto LABEL_1167;
          case 2084:
            v908 = "date_part";
            goto LABEL_1229;
          case 2085:
            int v810 = v26;
            SystemFuncName((uint64_t)"normalize");
            uint64_t v811 = v24;
            uint64_t v813 = v1341;
            double v814 = list_make1_impl(226, *(v11 - 1));
            uint64_t v816 = v1342;
            int v817 = *(v12 - 3);
            goto LABEL_1275;
          case 2086:
            int v2039 = v26;
            SystemFuncName((uint64_t)"normalize");
            uint64_t v798 = v1374;
            uint64_t v1982 = *(v11 - 3);
            uint64_t v2012 = v24;
            v1375 = v15;
            uint64_t v1376 = *(v11 - 1);
            uint64_t v1377 = v16;
            int v1378 = *(v12 - 1);
            unint64_t v1379 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)unint64_t v1379 = 349;
            *(_DWORD *)(v1379 + _Block_object_dispose(&a9, 8) = 223;
            *(void *)(v1379 + 16) = v1376;
            uint64_t v15 = v1375;
            *(_DWORD *)(v1379 + 24) = v1378;
            uint64_t v16 = v1377;
            uint64_t v24 = v2012;
            double v804 = list_make2_impl(226, v1982, v1379);
            uint64_t v806 = v1380;
            int v807 = *(v12 - 5);
LABEL_1144:
            DefEleunint64_t m = makeFuncCall(v798, v806, v807, v804);
            int v26 = v2039;
            goto LABEL_1778;
          case 2087:
            v908 = "overlay";
            goto LABEL_1229;
          case 2088:
            v908 = "position";
            goto LABEL_1229;
          case 2089:
            v908 = "substring";
            goto LABEL_1229;
          case 2090:
            int v810 = v26;
            SystemFuncName(*(void *)(*(void *)(*(void *)(*(void *)(*(v11 - 1) + 8) + 16)
                                                 + 8 * (*(_DWORD *)(*(void *)(*(v11 - 1) + 8) + 4) - 1))
                                     + 8));
            uint64_t v811 = v24;
            uint64_t v813 = v812;
            double v814 = list_make1_impl(226, *(v11 - 3));
            uint64_t v816 = v815;
            int v817 = *(v12 - 5);
            goto LABEL_1275;
          case 2091:
            v818 = "btrim";
            goto LABEL_1055;
          case 2092:
            v818 = "ltrim";
            goto LABEL_1055;
          case 2093:
            v818 = "rtrim";
LABEL_1055:
            int v32 = v26;
            double v1279 = SystemFuncName((uint64_t)v818);
            DefEleunint64_t m = makeFuncCall(v1280, *(v11 - 1), *(v12 - 4), v1279);
            goto LABEL_1777;
          case 2094:
            v908 = "btrim";
LABEL_1229:
            int v32 = v26;
            double v1455 = SystemFuncName((uint64_t)v908);
            DefEleunint64_t m = makeFuncCall(v1456, *(v11 - 1), *(v12 - 3), v1455);
            goto LABEL_1777;
          case 2095:
            uint64_t v96 = *(v11 - 3);
            uint64_t v97 = *(v11 - 1);
            int v98 = *(v12 - 5);
            uint64_t v99 = "=";
            int v111 = 5;
            goto LABEL_205;
          case 2096:
            int v1327 = v26;
            unint64_t v1328 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1327;
            uint64_t StringConstCast = v1328;
            *(_DWORD *)unint64_t v1328 = 136;
            *(void *)(v1328 + 16) = *(v11 - 1);
            *(_DWORD *)(v1328 + 24) = *(v12 - 3);
            break;
          case 2097:
            int v829 = v26;
            unint64_t v830 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v829;
            uint64_t StringConstCast = v830;
            *(_DWORD *)unint64_t v830 = 137;
            *(void *)(v830 + 24) = *(v11 - 1);
            *(_DWORD *)(v830 + 16) = 0;
            goto LABEL_941;
          case 2098:
            int v1184 = v26;
            unint64_t v830 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1184;
            uint64_t StringConstCast = v830;
            *(_DWORD *)unint64_t v830 = 137;
            *(void *)(v830 + 24) = *(v11 - 1);
            *(_DWORD *)(v830 + 16) = 1;
LABEL_941:
            *(_DWORD *)(v830 + 32) = *(v12 - 3);
            break;
          case 2099:
            uint64_t v122 = v24;
            uint64_t v124 = *(v11 - 1);
            int v2028 = *(v12 - 3);
            int v1185 = v26;
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1185;
            *(_DWORD *)DefEleunint64_t m = 139;
            *(void *)(DefElem + 4) = 0;
            *(void *)(DefElem + 2errstart(20, 0) = 0;
            *(void *)(DefElem + 12) = 0;
            *(_DWORD *)(DefElem + 2_Block_object_dispose(&a9, 8) = 0;
            goto LABEL_943;
          case 2100:
            uint64_t v835 = v24;
            uint64_t v836 = *(v11 - 1);
            int v2028 = *(v12 - 4);
            int v1127 = v26;
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1127;
            uint64_t v9 = 0x10000008BLL;
            goto LABEL_900;
          case 2101:
            uint64_t v1400 = v24;
            uint64_t v1401 = *(v11 - 3);
            uint64_t v1402 = *(v11 - 1);
            unsigned int v1956 = v16;
            v1975 = v15;
            int v980 = *(v12 - 6);
            int v1403 = v26;
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1403;
            uint64_t v9 = 0x10000008BLL;
            *(void *)DefEleunint64_t m = 0x10000008BLL;
            *(void *)(DefElem + _Block_object_dispose(&a9, 8) = v1401;
            *(void *)(DefElem + 16) = v1402;
            uint64_t v24 = v1400;
            *(_DWORD *)(DefElem + 44) = 0;
            *(void *)(DefElem + 24) = 0;
            *(void *)(DefElem + 32) = 0;
            goto LABEL_1166;
          case 2102:
            uint64_t v977 = v24;
            uint64_t v978 = *(v11 - 3);
            uint64_t v979 = *(v11 - 1);
            unsigned int v1956 = v16;
            v1975 = v15;
            int v980 = *(v12 - 6);
            int v981 = v26;
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v981;
            uint64_t v9 = 0x10000008BLL;
            *(void *)DefEleunint64_t m = 0x10000008BLL;
            *(void *)(DefElem + _Block_object_dispose(&a9, 8) = v978;
            *(void *)(DefElem + 16) = 0;
            uint64_t v24 = v977;
            *(void *)(DefElem + 24) = 0;
            *(void *)(DefElem + 32) = v979;
            *(_DWORD *)(DefElem + 44) = 0;
LABEL_1166:
            *(_DWORD *)(DefElem + 52) = v980;
LABEL_1167:
            uint64_t v15 = v1975;
            uint64_t v16 = v1956;
            goto LABEL_1778;
          case 2103:
            uint64_t v1015 = v24;
            uint64_t v1016 = *(v11 - 5);
            uint64_t v1017 = *(v11 - 3);
            v1976 = v15;
            uint64_t v1018 = *(v11 - 1);
            unsigned int v1957 = v16;
            int v2043 = *(v12 - 8);
            int v1019 = v26;
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1019;
            uint64_t v9 = 0x10000008BLL;
            *(void *)DefEleunint64_t m = 0x10000008BLL;
            *(void *)(DefElem + _Block_object_dispose(&a9, 8) = v1016;
            *(void *)(DefElem + 16) = v1017;
            uint64_t v24 = v1015;
            *(void *)(DefElem + 24) = 0;
            *(void *)(DefElem + 32) = v1018;
            uint64_t v15 = v1976;
            *(_DWORD *)(DefElem + 44) = 0;
            *(_DWORD *)(DefElem + 52) = v2043;
            uint64_t v16 = v1957;
            goto LABEL_1778;
          case 2104:
            int v810 = v26;
            SystemFuncName((uint64_t)"xmlexists");
            uint64_t v811 = v24;
            uint64_t v813 = v1381;
            double v814 = list_make2_impl(226, *(v11 - 2), *(v11 - 1));
LABEL_1147:
            uint64_t v816 = v893;
            int v817 = *(v12 - 4);
LABEL_1275:
            uint64_t v1511 = v813;
            uint64_t v24 = v811;
            DefEleunint64_t m = makeFuncCall(v1511, v816, v817, v814);
            int v26 = v810;
            goto LABEL_1778;
          case 2105:
            uint64_t v1186 = v24;
            uint64_t v1187 = *(v11 - 1);
            int v2028 = *(v12 - 3);
            int v1188 = v26;
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v1188;
            uint64_t v9 = 0x20000008BLL;
            *(void *)DefEleunint64_t m = 0x20000008BLL;
            *(void *)(DefElem + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(DefElem + 16) = v1187;
            uint64_t v24 = v1186;
            *(_DWORD *)(DefElem + 44) = 0;
            goto LABEL_945;
          case 2106:
            uint64_t v2001 = v24;
            uint64_t v909 = *(v11 - 2);
            int v910 = v26;
            unint64_t BoolAConst = makeBoolAConst(*((unsigned __int8 *)v11 - 8), -1, *(double *)&v9);
            list_make2_impl(226, v909, BoolAConst);
            uint64_t v913 = v912;
            int v914 = *(v12 - 5);
            unint64_t v915 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v910;
            uint64_t StringConstCast = v915;
            uint64_t v9 = 0x30000008BLL;
            *(void *)unint64_t v915 = 0x30000008BLL;
            *(void *)(v915 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v915 + 16) = 0;
            *(void *)(v915 + 24) = 0;
            *(void *)(v915 + 32) = v913;
            uint64_t v24 = v2001;
            *(_DWORD *)(v915 + 44) = 0;
            *(_DWORD *)(v915 + 52) = v914;
            *(_DWORD *)(v915 + 4errstart(20, 0) = *((_DWORD *)v11 - 6);
            break;
          case 2107:
            uint64_t v835 = v24;
            uint64_t v836 = *(v11 - 1);
            int v2028 = *(v12 - 4);
            int v837 = v26;
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v837;
            uint64_t v9 = 0x40000008BLL;
LABEL_900:
            *(double *)DefEleunint64_t m = *(double *)&v9;
            *(_DWORD *)(DefElem + 44) = 0;
            *(void *)(DefElem + _Block_object_dispose(&a9, 8) = v836;
            *(void *)(DefElem + 16) = 0;
            uint64_t v24 = v835;
LABEL_945:
            *(void *)(DefElem + 24) = 0;
            *(void *)(DefElem + 32) = 0;
            goto LABEL_946;
          case 2108:
            uint64_t v2040 = *(v11 - 3);
            int v819 = v26;
            list_make1_impl(226, *(v11 - 1));
            uint64_t v820 = v24;
            uint64_t v822 = v821;
            unsigned int v1954 = v16;
            v823 = v15;
            int v824 = *(v12 - 6);
            unint64_t v825 = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v819;
            uint64_t StringConstCast = v825;
            uint64_t v9 = 0x40000008BLL;
            *(void *)unint64_t v825 = 0x40000008BLL;
            *(void *)(v825 + _Block_object_dispose(&a9, 8) = v2040;
            *(void *)(v825 + 16) = 0;
            *(void *)(v825 + 24) = 0;
            *(void *)(v825 + 32) = v822;
            uint64_t v24 = v820;
            *(_DWORD *)(v825 + 44) = 0;
            *(_DWORD *)(v825 + 52) = v824;
            uint64_t v15 = v823;
            uint64_t v16 = v1954;
            break;
          case 2109:
            int v929 = v26;
            list_make3_impl(226, *(v11 - 4), *(v11 - 2), *(v11 - 1));
            uint64_t v122 = v24;
            uint64_t v124 = v930;
            int v2028 = *(v12 - 6);
            DefEleunint64_t m = MemoryContextAllocZeroAligned(*v2065, 0x38uLL);
            int v26 = v929;
            uint64_t v9 = 0x50000008BLL;
LABEL_748:
            *(double *)DefEleunint64_t m = *(double *)&v9;
            *(void *)(DefElem + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(DefElem + 16) = 0;
            *(void *)(DefElem + 24) = 0;
LABEL_943:
            *(void *)(DefElem + 32) = v124;
            uint64_t v24 = v122;
            *(_DWORD *)(DefElem + 44) = 0;
LABEL_946:
            *(_DWORD *)(DefElem + 52) = v2028;
            goto LABEL_1778;
          case 2110:
            int v838 = v26;
            unint64_t v839 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v838;
            uint64_t StringConstCast = v839;
            *(_DWORD *)unint64_t v839 = 385;
            *(_DWORD *)(v839 + 4) = *((_DWORD *)v11 - 8);
            *(void *)(v839 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
            *(void *)(v839 + 16) = *(v11 - 1);
            *(_DWORD *)(v839 + 24) = *(v12 - 6);
            break;
          case 2112:
            int v1382 = v26;
            v1021 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1382;
            uint64_t StringConstCast = (uint64_t)v1021;
            *(_DWORD *)v1021 = 349;
            *((_DWORD *)v1021 + 2) = 225;
            goto LABEL_1150;
          case 2113:
            int v1383 = v26;
            v1021 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1383;
            uint64_t StringConstCast = (uint64_t)v1021;
            *(_DWORD *)v1021 = 349;
            *((_DWORD *)v1021 + 2) = 221;
            *((_DWORD *)v1021 + 4) = 0;
            goto LABEL_1150;
          case 2114:
            int v1128 = v26;
            v1021 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1128;
            uint64_t StringConstCast = (uint64_t)v1021;
            *(_DWORD *)v1021 = 349;
            *((_DWORD *)v1021 + 2) = 221;
            int v1022 = 1;
            goto LABEL_948;
          case 2115:
            int v1020 = v26;
            v1021 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1020;
            uint64_t StringConstCast = (uint64_t)v1021;
            *(_DWORD *)v1021 = 349;
            *((_DWORD *)v1021 + 2) = 221;
            int v1022 = 2;
            goto LABEL_948;
          case 2116:
            int v1189 = v26;
            v1021 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1189;
            uint64_t StringConstCast = (uint64_t)v1021;
            *(_DWORD *)v1021 = 349;
            *((_DWORD *)v1021 + 2) = 221;
            int v1022 = 3;
LABEL_948:
            *((_DWORD *)v1021 + 4) = v1022;
LABEL_1150:
            *((_DWORD *)v1021 + 6) = -1;
            break;
          case 2121:
          case 2276:
            int v119 = v26;
            unint64_t v120 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v119;
            uint64_t StringConstCast = v120;
            *(_DWORD *)unint64_t v120 = 355;
            *(void *)(v120 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v120 + 16) = 0;
            *(void *)(v120 + 24) = *v11;
            goto LABEL_1142;
          case 2122:
          case 2164:
          case 2165:
            StringConstCast &= 0xFFFFFFFF00000000;
            break;
          case 2123:
          case 2174:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 1;
            break;
          case 2141:
            uint64_t StringConstCast = *v11;
            *(void *)(*v11 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            break;
          case 2143:
            int v840 = v26;
            unint64_t v841 = MemoryContextAllocZeroAligned(*v2065, 0x48uLL);
            int v26 = v840;
            uint64_t StringConstCast = v841;
            *(_DWORD *)unint64_t v841 = 360;
            uint64_t v842 = *v11;
            *(void *)(v841 + 24) = 0;
            *(void *)(v841 + 32) = 0;
            *(void *)(v841 + _Block_object_dispose(&a9, 8) = v842;
            *(void *)(v841 + 16) = 0;
            *(_DWORD *)(v841 + 4errstart(20, 0) = 1058;
            *(void *)(v841 + 4_Block_object_dispose(&a9, 8) = 0;
            *(void *)(v841 + 56) = 0;
            *(_DWORD *)(v841 + 64) = *v12;
            break;
          case 2145:
            int v1302 = v26;
            unint64_t v1303 = MemoryContextAllocZeroAligned(*v2065, 0x48uLL);
            int v26 = v1302;
            uint64_t StringConstCast = v1303;
            *(_DWORD *)unint64_t v1303 = 360;
            *(void *)(v1303 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v1303 + 16) = *(v11 - 4);
            *(void *)(v1303 + 24) = *(v11 - 3);
            *(void *)(v1303 + 32) = *(v11 - 2);
            *(_DWORD *)(v1303 + 4errstart(20, 0) = *(_DWORD *)(*(v11 - 1) + 40);
            *(void *)(v1303 + 4_Block_object_dispose(&a9, 8) = *(void *)(*(v11 - 1) + 48);
            *(void *)(v1303 + 56) = *(void *)(*(v11 - 1) + 56);
            *(_DWORD *)(v1303 + 64) = *(v12 - 5);
            break;
          case 2150:
            uint64_t StringConstCast = *(v11 - 1);
            int v916 = *(_DWORD *)(StringConstCast + 40) | 3;
            goto LABEL_1057;
          case 2151:
            uint64_t StringConstCast = *(v11 - 1);
            int v855 = *(_DWORD *)(StringConstCast + 40);
            int v856 = 5;
            goto LABEL_737;
          case 2152:
            uint64_t StringConstCast = *(v11 - 1);
            int v855 = *(_DWORD *)(StringConstCast + 40);
            int v856 = 9;
LABEL_737:
            int v916 = v855 | v856;
LABEL_1057:
            *(_DWORD *)(StringConstCast + 4errstart(20, 0) = v916;
            *(_DWORD *)(StringConstCast + 4errstart(20, 0) = *(_DWORD *)v11 | v916;
            break;
          case 2153:
            int v917 = v26;
            unint64_t v896 = MemoryContextAllocZeroAligned(*v2065, 0x48uLL);
            int v26 = v917;
            uint64_t StringConstCast = v896;
            *(_DWORD *)unint64_t v896 = 360;
            int v897 = 1058;
            goto LABEL_903;
          case 2154:
            uint64_t StringConstCast = *v11;
            int v1304 = *(_DWORD *)(*v11 + 40);
            if ((v1304 & 0x80) != 0) {
              base_yyparse_cold_50();
            }
            if ((v1304 & 0x2000) != 0) {
              base_yyparse_cold_49();
            }
            *(_DWORD *)(StringConstCast + 4errstart(20, 0) = v1304 | 0x400;
            break;
          case 2155:
            uint64_t StringConstCast = *(v11 - 2);
            uint64_t v1023 = *v11;
            int v1024 = *(_DWORD *)(StringConstCast + 40) | (2 * *(_DWORD *)(*v11 + 40));
            if ((v1024 & 0x80) != 0) {
              base_yyparse_cold_54();
            }
            if ((v1024 & 0x40) != 0) {
              base_yyparse_cold_53();
            }
            if ((~v1024 & 0x1200) == 0) {
              base_yyparse_cold_51();
            }
            if ((v1024 & 0x2000) != 0 && (v1024 & 0x1400) != 0) {
              base_yyparse_cold_52();
            }
            *(_DWORD *)(StringConstCast + 4errstart(20, 0) = v1024 | 0x10;
            *(void *)(StringConstCast + 56) = *(void *)(v1023 + 48);
            break;
          case 2156:
            int v1129 = v26;
            unint64_t v896 = MemoryContextAllocZeroAligned(*v2065, 0x48uLL);
            int v26 = v1129;
            uint64_t StringConstCast = v896;
            *(_DWORD *)unint64_t v896 = 360;
            int v897 = 32;
            goto LABEL_903;
          case 2157:
            int v895 = v26;
            unint64_t v896 = MemoryContextAllocZeroAligned(*v2065, 0x48uLL);
            int v26 = v895;
            uint64_t StringConstCast = v896;
            *(_DWORD *)unint64_t v896 = 360;
            int v897 = 128;
LABEL_903:
            *(_DWORD *)(v896 + 4errstart(20, 0) = v897;
            *(void *)(v896 + 4_Block_object_dispose(&a9, 8) = 0;
            *(void *)(v896 + 56) = 0;
            break;
          case 2158:
            int v1243 = v26;
            unint64_t v1244 = MemoryContextAllocZeroAligned(*v2065, 0x48uLL);
            int v26 = v1243;
            uint64_t StringConstCast = v1244;
            *(_DWORD *)unint64_t v1244 = 360;
            *(_DWORD *)(v1244 + 4errstart(20, 0) = 512;
            *(void *)(v1244 + 4_Block_object_dispose(&a9, 8) = 0;
            *(void *)(v1244 + 56) = 0;
            break;
          case 2159:
            int v1190 = v26;
            unint64_t v1191 = MemoryContextAllocZeroAligned(*v2065, 0x48uLL);
            int v26 = v1190;
            uint64_t StringConstCast = v1191;
            *(_DWORD *)unint64_t v1191 = 360;
            int v1192 = 2048;
            goto LABEL_1041;
          case 2160:
            int v1268 = v26;
            unint64_t v1191 = MemoryContextAllocZeroAligned(*v2065, 0x48uLL);
            int v26 = v1268;
            uint64_t StringConstCast = v1191;
            *(_DWORD *)unint64_t v1191 = 360;
            int v1192 = 0x2000;
LABEL_1041:
            *(_DWORD *)(v1191 + 4errstart(20, 0) = v1192;
            *(void *)(v1191 + 4_Block_object_dispose(&a9, 8) = *(v11 - 1);
            *(void *)(v1191 + 56) = 0;
            break;
          case 2161:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x8000;
            break;
          case 2162:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x10000;
            break;
          case 2163:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 0x20000;
            break;
          case 2168:
          case 2171:
            uint64_t v34 = *(v11 - 3);
            uint64_t v2 = (const void **)*(v11 - 1);
            goto LABEL_1776;
          case 2172:
          case 2173:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | 2;
            break;
          case 2177:
            uint64_t StringConstCast = (uint64_t)"+";
            break;
          case 2178:
            uint64_t StringConstCast = (uint64_t)"-";
            break;
          case 2179:
            uint64_t StringConstCast = (uint64_t)"*";
            break;
          case 2180:
            uint64_t StringConstCast = (uint64_t)"/";
            break;
          case 2181:
            uint64_t StringConstCast = (uint64_t)"%";
            break;
          case 2182:
            uint64_t StringConstCast = (uint64_t)"^";
            break;
          case 2183:
            uint64_t StringConstCast = (uint64_t)"<";
            break;
          case 2184:
            uint64_t StringConstCast = (uint64_t)">";
            break;
          case 2185:
            uint64_t StringConstCast = (uint64_t)"=";
            break;
          case 2186:
            uint64_t StringConstCast = (uint64_t)"<=";
            break;
          case 2187:
            uint64_t StringConstCast = (uint64_t)">=";
            break;
          case 2188:
            uint64_t StringConstCast = (uint64_t)"<>";
            break;
          case 2189:
            uint64_t StringConstCast = (uint64_t)"?";
            break;
          case 2190:
          case 2192:
          case 2194:
          case 2282:
          case 2290:
            uint64_t v38 = (const char *)*v11;
            goto LABEL_79;
          case 2196:
            uint64_t v38 = "~~";
            goto LABEL_79;
          case 2197:
            uint64_t v38 = "!~~";
            goto LABEL_79;
          case 2198:
            uint64_t v38 = "~~*";
            goto LABEL_79;
          case 2199:
            uint64_t v38 = "!~~*";
LABEL_79:
            int v32 = v26;
            unint64_t v39 = makeString((uint64_t)v38);
            *(double *)&uint64_t v9 = list_make1_impl(226, v39);
            goto LABEL_1777;
          case 2205:
          case 2206:
            int v144 = v26;
            unint64_t v145 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v144;
            uint64_t StringConstCast = v145;
            *(_DWORD *)unint64_t v145 = 114;
            *(void *)(v145 + 16) = *(v11 - 2);
            *(void *)(v145 + _Block_object_dispose(&a9, 8) = *v11;
            *(_DWORD *)(v145 + 24) = -1;
            *(_DWORD *)(v145 + 2_Block_object_dispose(&a9, 8) = *(v12 - 2);
            break;
          case 2209:
          case 2210:
            uint64_t v1990 = v24;
            uint64_t v125 = *(v11 - 1);
            int v126 = *(v12 - 2);
            int v127 = v26;
            unint64_t v128 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v127;
            uint64_t StringConstCast = v128;
            *(_DWORD *)unint64_t v128 = 354;
            *(void *)(v128 + _Block_object_dispose(&a9, 8) = v125;
            uint64_t v24 = v1990;
            *(_DWORD *)(v128 + 16) = v126;
            break;
          case 2211:
            uint64_t v1223 = v24;
            int v1224 = *(v12 - 1);
            int v1225 = v26;
            unint64_t v1226 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1225;
            uint64_t StringConstCast = v1226;
            *(_DWORD *)unint64_t v1226 = 354;
            *(void *)(v1226 + _Block_object_dispose(&a9, 8) = 0;
            *(_DWORD *)(v1226 + 16) = v1224;
            uint64_t v24 = v1223;
            break;
          case 2214:
            uint64_t v931 = v24;
            uint64_t v932 = *(v11 - 2);
            int v933 = *(v12 - 2);
            int v2042 = v26;
            unint64_t v934 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            *(_DWORD *)unint64_t v934 = 349;
            *(_DWORD *)(v934 + _Block_object_dispose(&a9, 8) = 223;
            *(void *)(v934 + 16) = v932;
            uint64_t v24 = v931;
            *(_DWORD *)(v934 + 24) = v933;
            goto LABEL_780;
          case 2215:
            uint64_t v982 = v24;
            int v983 = *((_DWORD *)v11 - 4);
            int v984 = *(v12 - 2);
            int v2042 = v26;
            unint64_t v934 = MemoryContextAllocZero(*v2065, 0xCuLL);
            *(_DWORD *)unint64_t v934 = 348;
            *(_DWORD *)(v934 + 4) = v983;
            uint64_t v24 = v982;
            *(_DWORD *)(v934 + _Block_object_dispose(&a9, 8) = v984;
LABEL_780:
            *(double *)&uint64_t v9 = list_make2_impl(226, v934, *v11);
            int v26 = v2042;
            goto LABEL_1778;
          case 2216:
            uint64_t v1055 = v24;
            int v1056 = *(v12 - 2);
            int v1057 = v26;
            unint64_t v1058 = MemoryContextAllocZero(*v2065, 0xCuLL);
            *(void *)unint64_t v1058 = 348;
            *(_DWORD *)(v1058 + _Block_object_dispose(&a9, 8) = v1056;
            uint64_t v24 = v1055;
            *(double *)&uint64_t v9 = list_make2_impl(226, v1058, *v11);
            int v26 = v1057;
            goto LABEL_1778;
          case 2219:
            uint64_t StringConstCast = (uint64_t)"year";
            break;
          case 2220:
            uint64_t StringConstCast = (uint64_t)"month";
            break;
          case 2221:
            uint64_t StringConstCast = (uint64_t)"day";
            break;
          case 2222:
            uint64_t StringConstCast = (uint64_t)"hour";
            break;
          case 2223:
            uint64_t StringConstCast = (uint64_t)"minute";
            break;
          case 2224:
            uint64_t StringConstCast = (uint64_t)"second";
            break;
          case 2226:
            uint64_t StringConstCast = (uint64_t)"nfc";
            break;
          case 2227:
            uint64_t StringConstCast = (uint64_t)"nfd";
            break;
          case 2228:
            uint64_t StringConstCast = (uint64_t)"nfkc";
            break;
          case 2229:
            uint64_t StringConstCast = (uint64_t)"nfkd";
            break;
          case 2230:
            int v32 = v26;
            *(double *)&uint64_t v9 = list_make4_impl(226, *(v11 - 3), *(v11 - 2), *(v11 - 1), *v11);
            goto LABEL_1777;
          case 2231:
          case 2235:
            uint64_t v147 = *(v11 - 2);
            uint64_t v148 = *(v11 - 1);
            uint64_t v149 = *v11;
            goto LABEL_829;
          case 2233:
            uint64_t v397 = *v11;
            uint64_t v129 = *(v11 - 2);
            goto LABEL_1441;
          case 2236:
            uint64_t v149 = *(v11 - 1);
            uint64_t v148 = *v11;
            uint64_t v147 = *(v11 - 2);
LABEL_829:
            int v32 = v26;
            *(double *)&uint64_t v9 = list_make3_impl(226, v147, v148, v149);
            goto LABEL_1777;
          case 2237:
            uint64_t v397 = *(v11 - 1);
            uint64_t v129 = *v11;
LABEL_1441:
            int v32 = v26;
            *(double *)&uint64_t v9 = list_make2_impl(226, v397, v129);
            goto LABEL_1777;
          case 2238:
            uint64_t v1961 = *(v11 - 1);
            uint64_t v2008 = v24;
            v1193 = v2065;
            int v2048 = v26;
            v1194 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            _DWORD *v1194 = 349;
            v1194[2] = 221;
            v1194[4] = 1;
            v1194[6] = -1;
            v1980 = v15;
            uint64_t v1195 = v16;
            uint64_t v1196 = *v11;
            unint64_t v1197 = SystemTypeName((uint64_t)"int4");
            uint64_t v1198 = *v1193;
            uint64_t v24 = v2008;
            unint64_t v1199 = MemoryContextAllocZeroAligned(v1198, 0x20uLL);
            *(_DWORD *)unint64_t v1199 = 357;
            *(void *)(v1199 + _Block_object_dispose(&a9, 8) = v1196;
            *(void *)(v1199 + 16) = v1197;
            uint64_t v16 = v1195;
            uint64_t v15 = v1980;
            *(_DWORD *)(v1199 + 24) = -1;
            *(double *)&uint64_t v9 = list_make3_impl(226, v1961, (uint64_t)v1194, v1199);
            int v26 = v2048;
            goto LABEL_1778;
          case 2243:
            uint64_t v34 = *v11;
            uint64_t v2 = (const void **)*(v11 - 2);
LABEL_1776:
            int v32 = v26;
            DefEleunint64_t m = lappend(v34, (uint64_t)v2);
            goto LABEL_1777;
          case 2246:
            int v1245 = v26;
            unint64_t v1246 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1245;
            uint64_t StringConstCast = v1246;
            *(_DWORD *)unint64_t v1246 = 120;
            *(void *)(v1246 + 32) = *v11;
            break;
          case 2248:
            int v1200 = v26;
            unint64_t v1201 = MemoryContextAllocZeroAligned(*v2065, 0x30uLL);
            int v26 = v1200;
            uint64_t StringConstCast = v1201;
            uint64_t v9 = 130;
            *(void *)unint64_t v1201 = 130;
            *(void *)(v1201 + 16) = *(v11 - 3);
            *(void *)(v1201 + 24) = *(v11 - 2);
            *(void *)(v1201 + 32) = *(v11 - 1);
            *(_DWORD *)(v1201 + 4errstart(20, 0) = *(v12 - 4);
            break;
          case 2251:
            int v1227 = v26;
            unint64_t v1228 = MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1227;
            uint64_t StringConstCast = v1228;
            *(_DWORD *)unint64_t v1228 = 131;
            *(void *)(v1228 + _Block_object_dispose(&a9, 8) = *(v11 - 2);
            *(void *)(v1228 + 16) = *v11;
            *(_DWORD *)(v1228 + 24) = *(v12 - 3);
            break;
          case 2256:
            uint64_t v1025 = *v11;
            int v1027 = *v12;
            uint64_t v1026 = 0;
            goto LABEL_854;
          case 2257:
            uint64_t v1025 = *(v11 - 1);
            uint64_t v1026 = *v11;
            int v1027 = *(v12 - 1);
LABEL_854:
            int v32 = v26;
            DefEleunint64_t m = makeColumnRef(v1025, v1026, v1027, (uint64_t)v2064, *(double *)&v9);
            goto LABEL_1777;
          case 2260:
            int v1132 = v26;
            unint64_t v1133 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1132;
            uint64_t StringConstCast = v1133;
            *(_DWORD *)unint64_t v1133 = 352;
            *(unsigned char *)(v1133 + 4) = 0;
            *(void *)(v1133 + _Block_object_dispose(&a9, 8) = 0;
            goto LABEL_957;
          case 2261:
            int v1202 = v26;
            unint64_t v1133 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1202;
            uint64_t StringConstCast = v1133;
            *(_DWORD *)unint64_t v1133 = 352;
            *(unsigned char *)(v1133 + 4) = 1;
            *(void *)(v1133 + _Block_object_dispose(&a9, 8) = *(v11 - 3);
LABEL_957:
            *(void *)(v1133 + 16) = *(v11 - 1);
            break;
          case 2275:
            int v1229 = v26;
            unint64_t v1230 = MemoryContextAllocZeroAligned(*v2065, 0x28uLL);
            int v26 = v1229;
            uint64_t StringConstCast = v1230;
            *(_DWORD *)unint64_t v1230 = 355;
            *(void *)(v1230 + _Block_object_dispose(&a9, 8) = *v11;
            *(void *)(v1230 + 16) = 0;
            *(void *)(v1230 + 24) = *(v11 - 1);
            *(_DWORD *)(v1230 + 32) = *(v12 - 1);
            break;
          case 2277:
            v1059 = v2065;
            int v1060 = v26;
            uint64_t v2004 = v24;
            unint64_t v1061 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            *(_DWORD *)unint64_t v1061 = 347;
            v1062 = (_DWORD *)MemoryContextAllocZero(*v1059, 4uLL);
            _DWORD *v1062 = 351;
            list_make1_impl(226, (uint64_t)v1062);
            *(void *)(v1061 + _Block_object_dispose(&a9, 8) = v1063;
            *(_DWORD *)(v1061 + 16) = *v12;
            unint64_t v120 = MemoryContextAllocZeroAligned(*v1059, 0x28uLL);
            int v26 = v1060;
            uint64_t StringConstCast = v120;
            *(_DWORD *)unint64_t v120 = 355;
            *(void *)(v120 + _Block_object_dispose(&a9, 8) = 0;
            *(void *)(v120 + 16) = 0;
            *(void *)(v120 + 24) = v1061;
            uint64_t v24 = v2004;
LABEL_1142:
            *(_DWORD *)(v120 + 32) = *v12;
            break;
          case 2280:
            int v32 = v26;
            DefEleunint64_t m = makeRangeVar(0, *v11, *v12);
            goto LABEL_1777;
          case 2281:
            int v1247 = v26;
            check_func_name(*v11, (uint64_t)v2064);
            RangeVar = (char *)makeRangeVar(0, 0, *(v12 - 1));
            if (!*v11) {
              goto LABEL_1883;
            }
            uint64_t StringConstCast = (uint64_t)RangeVar;
            int v1249 = *(_DWORD *)(*v11 + 4);
            if (v1249 == 2)
            {
              *((void *)RangeVar + 1) = *(v11 - 1);
              *((void *)RangeVar + 2) = *(void *)(**(void **)(*v11 + 16) + 8);
              uint64_t v1250 = *(void *)(*(void *)(*v11 + 16) + 8);
            }
            else
            {
              if (v1249 != 1) {
LABEL_1883:
              }
                base_yyparse_cold_55((uint64_t)v12, v11, v2064);
              *((void *)RangeVar + 1) = 0;
              *((void *)RangeVar + 2) = *(v11 - 1);
              uint64_t v1250 = **(void **)(*v11 + 16);
            }
            *((void *)RangeVar + 3) = *(void *)(v1250 + 8);
            int v26 = v1247;
            break;
          case 2283:
            uint64_t v1003 = v24;
            uint64_t v1004 = *(v11 - 2);
            int v1005 = v26;
            unint64_t v1006 = makeString(*v11);
            uint64_t v1007 = v1004;
            uint64_t v24 = v1003;
            DefEleunint64_t m = lappend(v1007, v1006);
            int v26 = v1005;
            goto LABEL_1778;
          case 2291:
            int v32 = v26;
            unint64_t v1028 = makeString(*(v11 - 1));
            uint64_t v1029 = lcons(v1028, *v11);
            DefEleunint64_t m = check_func_name(v1029, (uint64_t)v2064);
            goto LABEL_1777;
          case 2294:
            uint64_t v1989 = v24;
            uint64_t v105 = *v11;
            int v106 = *v12;
            int v1134 = v26;
            uint64_t v108 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v1134;
            uint64_t StringConstCast = (uint64_t)v108;
            *(_DWORD *)uint64_t v108 = 349;
            int v109 = 223;
            goto LABEL_910;
          case 2295:
          case 2296:
            uint64_t v1989 = v24;
            uint64_t v105 = *v11;
            int v106 = *v12;
            int v146 = v26;
            uint64_t v108 = (char *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            int v26 = v146;
            uint64_t StringConstCast = (uint64_t)v108;
            *(_DWORD *)uint64_t v108 = 349;
            int v109 = 224;
LABEL_910:
            *((_DWORD *)v108 + 2) = v109;
            *((void *)v108 + 2) = v105;
LABEL_911:
            uint64_t v24 = v1989;
            *((_DWORD *)v108 + 6) = v106;
            break;
          case 2297:
            int v32 = v26;
            unint64_t v1030 = makeTypeNameFromNameList(*(v11 - 1));
            *(_DWORD *)(v1030 + 4_Block_object_dispose(&a9, 8) = *(v12 - 1);
            DefEleunint64_t m = makeStringConstCast(*v11, *v12, v1030, v1031);
            goto LABEL_1777;
          case 2298:
            int v1053 = v26;
            unint64_t v1064 = makeTypeNameFromNameList(*(v11 - 5));
            uint64_t v1066 = *(v11 - 3);
            if (v1066)
            {
              uint64_t v1067 = *(unsigned int *)(v1066 + 4);
              if ((int)v1067 >= 1)
              {
                v1068 = *(_DWORD ***)(v1066 + 16);
                do
                {
                  if (**v1068 == 114) {
                    base_yyparse_cold_57();
                  }
                  ++v1068;
                  --v1067;
                }
                while (v1067);
              }
            }
            if (*(v11 - 2)) {
              base_yyparse_cold_56();
            }
            *(void *)(v1064 + 24) = v1066;
            *(_DWORD *)(v1064 + 4_Block_object_dispose(&a9, 8) = *(v12 - 5);
            unint64_t NotExpr = makeStringConstCast(*v11, *v12, v1064, v1065);
            goto LABEL_1862;
          case 2299:
            int v32 = v26;
            unint64_t v1070 = makeTypeNameFromNameList(*(v11 - 1));
            *(_DWORD *)(v1070 + 4_Block_object_dispose(&a9, 8) = *(v12 - 1);
            DefEleunint64_t m = makeParamRefCast(*(_DWORD *)v11, *v12, v1070, v1071);
            goto LABEL_1777;
          case 2300:
            int v1053 = v26;
            unint64_t v1072 = makeTypeNameFromNameList(*(v11 - 5));
            uint64_t v1074 = *(v11 - 3);
            if (v1074)
            {
              uint64_t v1075 = *(unsigned int *)(v1074 + 4);
              if ((int)v1075 >= 1)
              {
                v1076 = *(_DWORD ***)(v1074 + 16);
                do
                {
                  if (**v1076 == 114) {
                    base_yyparse_cold_59();
                  }
                  ++v1076;
                  --v1075;
                }
                while (v1075);
              }
            }
            if (*(v11 - 2)) {
              base_yyparse_cold_58();
            }
            *(void *)(v1072 + 24) = v1074;
            *(_DWORD *)(v1072 + 4_Block_object_dispose(&a9, 8) = *(v12 - 5);
            unint64_t NotExpr = makeParamRefCast(*(_DWORD *)v11, *v12, v1072, v1073);
            goto LABEL_1862;
          case 2301:
            uint64_t v1136 = *(v11 - 1);
            uint64_t v1135 = *v11;
            int v1137 = *v12;
            goto LABEL_959;
          case 2302:
            uint64_t v1136 = *(v11 - 2);
            *(void *)(v1136 + 24) = *v11;
            uint64_t v1135 = *(v11 - 1);
            int v1137 = *(v12 - 1);
LABEL_959:
            int v32 = v26;
            DefEleunint64_t m = makeStringConstCast(v1135, v1137, v1136, *(double *)&v9);
            goto LABEL_1777;
          case 2303:
            uint64_t v1979 = *(v11 - 4);
            uint64_t v2007 = v24;
            v1138 = v2065;
            int v2046 = v26;
            v1139 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            _DWORD *v1139 = 349;
            v1139[2] = 221;
            v1139[4] = 0x7FFF;
            v1139[6] = -1;
            int v1140 = *((_DWORD *)v11 - 4);
            unsigned int v1960 = v16;
            v1141 = v15;
            int v1142 = *(v12 - 2);
            uint64_t v1143 = *v1138;
            uint64_t v24 = v2007;
            v1144 = (_DWORD *)MemoryContextAllocZeroAligned(v1143, 0x20uLL);
            _DWORD *v1144 = 349;
            v1144[2] = 221;
            v1144[4] = v1140;
            v1144[6] = v1142;
            uint64_t v15 = v1141;
            uint64_t v16 = v1960;
            double v1145 = list_make2_impl(226, (uint64_t)v1139, (uint64_t)v1144);
            *(void *)(v1979 + 24) = v1146;
            DefEleunint64_t m = makeStringConstCast(*v11, *v12, v1979, v1145);
            int v26 = v2046;
            goto LABEL_1778;
          case 2304:
            int v1203 = *(_DWORD *)v11;
            int v1204 = *v12;
            uint64_t v1205 = *(v11 - 1);
            goto LABEL_962;
          case 2305:
            uint64_t v1205 = *(v11 - 2);
            *(void *)(v1205 + 24) = *v11;
            int v1203 = *((_DWORD *)v11 - 2);
            int v1204 = *(v12 - 1);
LABEL_962:
            int v32 = v26;
            DefEleunint64_t m = makeParamRefCast(v1203, v1204, v1205, *(double *)&v9);
            goto LABEL_1777;
          case 2306:
            uint64_t v1981 = *(v11 - 4);
            uint64_t v2009 = v24;
            v1206 = v2065;
            int v2044 = v26;
            v1207 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            _DWORD *v1207 = 349;
            v1207[2] = 221;
            v1207[4] = 0x7FFF;
            v1207[6] = -1;
            int v1208 = *((_DWORD *)v11 - 4);
            unsigned int v1962 = v16;
            v1209 = v15;
            int v1210 = *(v12 - 2);
            uint64_t v1211 = *v1206;
            uint64_t v24 = v2009;
            v1212 = (_DWORD *)MemoryContextAllocZeroAligned(v1211, 0x20uLL);
            _DWORD *v1212 = 349;
            v1212[2] = 221;
            v1212[4] = v1208;
            v1212[6] = v1210;
            uint64_t v15 = v1209;
            uint64_t v16 = v1962;
            double v1084 = list_make2_impl(226, (uint64_t)v1207, (uint64_t)v1212);
            uint64_t v1085 = v1981;
            *(void *)(v1981 + 24) = v1213;
            int v1088 = *(_DWORD *)v11;
            int v1087 = *v12;
            goto LABEL_964;
          case 2307:
            uint64_t v1977 = *(v11 - 4);
            uint64_t v2005 = v24;
            v1077 = v2065;
            int v2044 = v26;
            v1078 = (_DWORD *)MemoryContextAllocZeroAligned(*v2065, 0x20uLL);
            _DWORD *v1078 = 349;
            v1078[2] = 221;
            v1078[4] = 0x7FFF;
            v1078[6] = -1;
            int v1079 = *((_DWORD *)v11 - 4);
            unsigned int v1958 = v16;
            v1080 = v15;
            int v1081 = *(v12 - 2);
            uint64_t v1082 = *v1077;
            uint64_t v24 = v2005;
            v1083 = (_DWORD *)MemoryContextAllocZeroAligned(v1082, 0x20uLL);
            _DWORD *v1083 = 349;
            v1083[2] = 221;
            v1083[4] = v1079;
            v1083[6] = v1081;
            uint64_t v15 = v1080;
            uint64_t v16 = v1958;
            double v1084 = list_make2_impl(226, (uint64_t)v1078, (uint64_t)v1083);
            uint64_t v1085 = v1977;
            *(void *)(v1977 + 24) = v1086;
            int v1087 = *v12;
            int v1088 = 0;
LABEL_964:
            DefEleunint64_t m = makeParamRefCast(v1088, v1087, v1085, v1084);
            int v26 = v2044;
            goto LABEL_1778;
          case 2308:
            int v32 = v26;
            DefEleunint64_t m = makeBoolAConst(1, *v12, *(double *)&v9);
            goto LABEL_1777;
          case 2309:
            int v32 = v26;
            DefEleunint64_t m = makeBoolAConst(0, *v12, *(double *)&v9);
            goto LABEL_1777;
          case 2315:
            uint64_t v36 = -*(_DWORD *)v11;
LABEL_1771:
            uint64_t StringConstCast = StringConstCast & 0xFFFFFFFF00000000 | v36;
            break;
          case 2316:
            switch(*(_DWORD *)(*v11 + 4))
            {
              case 0:
                uint64_t StringConstCast = *(void *)(*v11 + 8);
                break;
              case 1:
                base_yyparse_cold_31();
              case 2:
                base_yyparse_cold_30();
              case 3:
                base_yyparse_cold_29();
              default:
                goto LABEL_1779;
            }
            break;
          case 2317:
            int v2032 = v26;
            uint64_t v399 = v24;
            v1147 = (const char *)*v11;
            if (!strcmp((const char *)*v11, "public"))
            {
              int v1937 = *v12;
              uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
              *(_DWORD *)(StringConstCast + 16) = v1937;
              uint64_t v9 = 0x300000186;
              *(void *)uint64_t StringConstCast = 0x300000186;
            }
            else
            {
              if (!strcmp(v1147, "none")) {
                base_yyparse_cold_28();
              }
              int v1148 = *v12;
              uint64_t StringConstCast = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
              *(void *)uint64_t StringConstCast = 390;
              *(_DWORD *)(StringConstCast + 16) = v1148;
              *(void *)(StringConstCast + _Block_object_dispose(&a9, 8) = pstrdup((const char *)*v11);
            }
LABEL_1827:
            uint64_t v24 = v399;
            int v26 = v2032;
            break;
          case 2318:
            uint64_t v1089 = v24;
            int v1090 = *v12;
            int v1091 = v26;
            unint64_t v1092 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1091;
            uint64_t StringConstCast = v1092;
            uint64_t v9 = 0x100000186;
            goto LABEL_919;
          case 2319:
            uint64_t v1089 = v24;
            int v1090 = *v12;
            int v1149 = v26;
            unint64_t v1092 = MemoryContextAllocZeroAligned(*v2065, 0x18uLL);
            int v26 = v1149;
            uint64_t StringConstCast = v1092;
            uint64_t v9 = 0x200000186;
LABEL_919:
            *(double *)unint64_t v1092 = *(double *)&v9;
            *(_DWORD *)(v1092 + 16) = v1090;
            uint64_t v24 = v1089;
            break;
          case 2323:
          case 2324:
          case 2326:
          case 2327:
          case 2329:
          case 2330:
          case 2331:
          case 2333:
          case 2334:
          case 2335:
          case 2336:
            int v32 = v26;
            DefEleunint64_t m = (unint64_t)pstrdup((const char *)*v11);
            goto LABEL_1777;
          default:
            break;
        }
LABEL_1779:
        v1914 = &v11[-v25];
        v1915 = &v12[-v25];
        v1914[1] = StringConstCast;
        uint64_t v11 = v1914 + 1;
        v1915[1] = v26;
        uint64_t v12 = v1915 + 1;
        v14 -= 2 * v25;
        uint64_t v1916 = yyr1[v24] - 495;
        uint64_t v1917 = (*(__int16 *)v14 + yypgoto[v1916]);
        if ((int)v1917 >= 0 && yycheck[v1917] == *(unsigned __int16 *)v14) {
          int v10 = (__int16)yytable[v1917];
        }
        else {
          int v10 = yydefgoto[v1916];
        }
        goto LABEL_3;
      }
LABEL_17:
      int v26 = v12[-v25 + 1];
      uint64_t StringConstCast = v11[1 - v25];
      int v28 = v24 - 2;
      if ((v24 - 2) > 0x920) {
        goto LABEL_1779;
      }
      goto LABEL_41;
    }
    int v10 = (__int16)yytable[v30];
    if (v10 <= 0)
    {
      if (yytable[v30]) {
        BOOL v31 = yytable[v30] == 62841;
      }
      else {
        BOOL v31 = 1;
      }
      if (v31) {
LABEL_1869:
      }
        scanner_yyerror((size_t)"syntax error", (uint64_t)v2064);
      uint64_t v24 = -v10;
      uint64_t v25 = yyr2[v24];
      if (!yyr2[v24]) {
        goto LABEL_40;
      }
      goto LABEL_17;
    }
    if (v10 == 837) {
      break;
    }
    if (v16) {
      uint64_t v16 = 4294967294;
    }
    else {
      uint64_t v16 = 0;
    }
    v11[1] = v2069;
    ++v11;
    v12[1] = v2068;
    ++v12;
LABEL_3:
    v14 += 2;
  }
  uint64_t v1943 = 0;
  uint64_t v18 = v15;
  if (v15 != v2072) {
LABEL_1864:
  }
    pfree((uint64_t)v18);
  return v1943;
}

double list_make1_impl(int a1, uint64_t a2)
{
  uint64_t v4 = palloc(0x40uLL);
  *(_DWORD *)uint64_t v4 = a1;
  *(void *)&double result = 0x500000001;
  *(void *)(v4 + 4) = 0x500000001;
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 16) = v4 + 24;
  return result;
}

void scanner_yyerror(size_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(**(void **)a2 + **(int **)(a2 + 160));
  errstart(20, 0);
  errcode();
  if (v4)
  {
    errmsg("%s at or near \"%s\"", v5, v6, v7, v8, v9, v10, v11, a1);
    scanner_errposition(**(unsigned int **)(a2 + 160), (unsigned char ***)a2);
    errfinish("scan.l", 1234, (uint64_t)"scanner_yyerror");
    __break(1u);
  }
  errmsg("%s at end of input", v5, v6, v7, v8, v9, v10, v11, a1);
  scanner_errposition(**(unsigned int **)(a2 + 160), (unsigned char ***)a2);
  errfinish("scan.l", 1226, (uint64_t)"scanner_yyerror");
  __break(1u);
}

unint64_t MemoryContextAllocZeroAligned(uint64_t a1, size_t a2)
{
  if (a2 >> 30) {
    MemoryContextAllocZeroAligned_cold_2(a2);
  }
  *(unsigned char *)(a1 + 4) = 0;
  unint64_t v4 = (**(uint64_t (***)(void))(a1 + 16))();
  if (!v4) {
    MemoryContextAllocZeroAligned_cold_1(a1, a2);
  }
  unint64_t v5 = v4;
  unint64_t v6 = v4 + a2;
  if (v4 < v4 + a2)
  {
    if (v6 <= v4 + 8) {
      unint64_t v6 = v4 + 8;
    }
    bzero((void *)v4, ((v6 + ~v4) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  return v5;
}

uint64_t processCASbits(uint64_t result, uint64_t a2, size_t a3, unsigned char *a4, unsigned char *a5, unsigned char *a6, unsigned char *a7)
{
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  if (a6) {
    *a6 = 0;
  }
  if ((result & 0xA) != 0)
  {
    if (!a4) {
      processCASbits_cold_4(a3);
    }
    *a4 = 1;
  }
  if ((result & 8) != 0)
  {
    if (!a5) {
      processCASbits_cold_3(a3);
    }
    *a5 = 1;
  }
  if ((result & 0x10) != 0)
  {
    if (!a6) {
      processCASbits_cold_2(a3);
    }
    *a6 = 1;
  }
  if ((result & 0x20) != 0)
  {
    if (!a7) {
      processCASbits_cold_1(a3);
    }
    *a7 = 1;
  }
  return result;
}

unint64_t makeString(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = MemoryContextAllocZeroAligned(*v2, 0x10uLL);
  *(_DWORD *)unint64_t result = 223;
  *(void *)(result + _Block_object_dispose(&a9, 8) = a1;
  return result;
}

unint64_t makeDefElem(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = MemoryContextAllocZeroAligned(*v6, 0x28uLL);
  *(_DWORD *)unint64_t result = 370;
  *(void *)(result + _Block_object_dispose(&a9, 8) = 0;
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  *(_DWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 36) = a3;
  return result;
}

uint64_t lappend(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    int v4 = *(_DWORD *)(a1 + 4);
    if (v4 >= *(_DWORD *)(a1 + 8))
    {
      if (v4 + 1 > 16) {
        unsigned int v5 = v4 + 1;
      }
      else {
        unsigned int v5 = 16;
      }
      int v6 = 1 << -(char)__clz(v5);
      if ((v5 & (v5 - 1)) != 0) {
        signed int v7 = v6;
      }
      else {
        signed int v7 = v5;
      }
      uint64_t v8 = *(const void **)(a1 + 16);
      if (v8 == (const void *)(a1 + 24))
      {
        uint64_t v10 = (void *)MemoryContextAlloc(*(void *)(a1 - 8), 8 * v7);
        *(void *)(a1 + 16) = v10;
        memcpy(v10, v8, 8 * *(int *)(a1 + 4));
      }
      else
      {
        *(void *)(a1 + 16) = repalloc(*(void *)(a1 + 16), 8 * v7);
      }
      *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v7;
      int v4 = *(_DWORD *)(a1 + 4);
    }
    *(_DWORD *)(a1 + 4) = v4 + 1;
    *(void *)(*(void *)(a1 + 16) + 8 * v4) = a2;
    return a1;
  }
  else
  {
    uint64_t result = palloc(0x40uLL);
    *(void *)uint64_t result = 0x1000000E2;
    *(_DWORD *)(result + _Block_object_dispose(&a9, 8) = 5;
    *(void *)(result + 16) = result + 24;
    *(void *)(result + 24) = a2;
  }
  return result;
}

uint64_t palloc(size_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  if (a1 >> 30) {
    palloc_cold_2(a1);
  }
  uint64_t v3 = *v2;
  *(unsigned char *)(v3 + 4) = 0;
  uint64_t result = (**(uint64_t (***)(uint64_t, size_t))(v3 + 16))(v3, a1);
  if (!result) {
    palloc_cold_1(v3, a1);
  }
  return result;
}

void MemoryContextAllocZeroAligned_cold_2(uint64_t a1)
{
}

unint64_t MemoryContextAllocZero(uint64_t a1, size_t a2)
{
  if (a2 >> 30) {
    MemoryContextAllocZero_cold_2(a2);
  }
  *(unsigned char *)(a1 + 4) = 0;
  unint64_t v4 = (**(uint64_t (***)(void))(a1 + 16))();
  if (!v4) {
    MemoryContextAllocZero_cold_1(a1, a2);
  }
  unint64_t v5 = v4;
  if (a2 > 0x400 || (a2 & 7) != 0)
  {
    size_t v7 = a2;
LABEL_10:
    bzero((void *)v4, v7);
    return v5;
  }
  unint64_t v6 = v4 + a2;
  if (v4 < v4 + a2)
  {
    if (v6 <= v4 + 8) {
      unint64_t v6 = v4 + 8;
    }
    size_t v7 = ((v6 + ~v4) & 0xFFFFFFFFFFFFFFF8) + 8;
    goto LABEL_10;
  }
  return v5;
}

void MemoryContextAllocZero_cold_2(uint64_t a1)
{
}

void MemoryContextAllocZero_cold_1(uint64_t a1, size_t a2)
{
  uint64_t v3 = (uint64_t *)TopMemoryContext();
  MemoryContextStats(*v3);
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("out of memory", v4, v5, v6, v7, v8, v9, v10, v18);
  errdetail("Failed on request of size %zu in memory context \"%s\".", v11, v12, v13, v14, v15, v16, v17, a2);
  errfinish("src/postgres/src_backend_utils_mmgr_mcxt.c", 792, (uint64_t)"MemoryContextAllocZero");
  __break(1u);
}

unint64_t makeTypeNameFromNameList(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)CurrentMemoryContext();
  unint64_t result = MemoryContextAllocZeroAligned(*v2, 0x38uLL);
  *(_DWORD *)unint64_t result = 366;
  *(void *)(result + _Block_object_dispose(&a9, 8) = a1;
  *(void *)(result + 24) = 0;
  *(_DWORD *)(result + 32) = -1;
  *(_DWORD *)(result + 4_Block_object_dispose(&a9, 8) = -1;
  return result;
}

uint64_t MemoryContextStatsPrint(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = *a2;
  size_t v10 = *(void *)(a1 + 56);
  uint64_t v9 = *(char **)(a1 + 64);
  if (v9 && !strcmp(*(const char **)(a1 + 56), "dynahash"))
  {
    size_t v10 = (size_t)v9;
    uint64_t v9 = 0;
  }
  uint64_t v11 = (FILE **)MEMORY[0x1E4F143C8];
  if (v8 >= 1)
  {
    do
    {
      pg_fprintf(*v11, "  ", a3, a4, a5, a6, a7, a8, v32);
      --v8;
    }
    while (v8);
  }
  pg_fprintf(*v11, "%s: %s", a3, a4, a5, a6, a7, a8, v10);
  if (v9)
  {
    int v18 = strlen(v9);
    int v19 = v18;
    if (v18 >= 101) {
      int v19 = pg_mbcliplen(v9, v18, 100);
    }
    pg_fprintf(*v11, ": ", v12, v13, v14, v15, v16, v17, v33);
    if (v19 >= 1)
    {
      unsigned int v26 = v19 + 1;
      do
      {
        unsigned int v28 = *v9++;
        unsigned int v27 = v28;
        if (v28 <= 0x20) {
          int v29 = 32;
        }
        else {
          int v29 = v27;
        }
        fputc(v29, *v11);
        --v26;
      }
      while (v26 > 1);
    }
    if (v18 >= 101) {
      pg_fprintf(*v11, "...", v20, v21, v22, v23, v24, v25, v34);
    }
  }
  uint64_t v30 = *v11;

  return fputc(10, v30);
}

uint64_t pg_fprintf(FILE *a1, unsigned char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, size_t a9)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    __streaunint64_t m = a1;
    uint64_t v16 = 0;
    uint64_t v12 = v17;
    uint64_t v13 = v17;
    uint64_t v14 = &v18;
    dopr((uint64_t)&v12, a2, &a9);
    if (BYTE4(v16) || (uint64_t v9 = v12 - v13, v12 == v13))
    {
      if (BYTE4(v16)) {
        return 0xFFFFFFFFLL;
      }
      else {
        return v16;
      }
    }
    else
    {
      size_t v10 = fwrite(v13, 1uLL, v12 - v13, __stream);
      if (v10 == v9) {
        return (v16 + v10);
      }
      else {
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    *__error() = 22;
    return 0xFFFFFFFFLL;
  }
}

uint64_t BMPBIntentEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 92) |= 1u;
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
            *(void *)(a2 + v1_Block_object_dispose(&a9, 8) = v19 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = v20;
          continue;
        case 2u:
          uint64_t v22 = PBReaderReadString();
          uint64_t v23 = 16;
          goto LABEL_59;
        case 3u:
          uint64_t v22 = PBReaderReadString();
          uint64_t v23 = 80;
          goto LABEL_59;
        case 4u:
          uint64_t v22 = PBReaderReadString();
          uint64_t v23 = 32;
          goto LABEL_59;
        case 5u:
          uint64_t v22 = PBReaderReadString();
          uint64_t v23 = 48;
          goto LABEL_59;
        case 6u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 92) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            uint64_t v28 = *(void *)(a2 + v27);
            unint64_t v29 = v28 + 1;
            if (v28 == -1 || v29 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                BOOL v15 = v25++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_63:
          uint64_t v51 = 44;
          goto LABEL_76;
        case 7u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 92) |= 2u;
          while (2)
          {
            uint64_t v33 = *v3;
            uint64_t v34 = *(void *)(a2 + v33);
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v35;
              v26 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                BOOL v15 = v32++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_67;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_67:
          uint64_t v51 = 40;
          goto LABEL_76;
        case 8u:
          uint64_t v22 = PBReaderReadData();
          uint64_t v23 = 56;
          goto LABEL_59;
        case 9u:
          uint64_t v22 = PBReaderReadString();
          uint64_t v23 = 72;
          goto LABEL_59;
        case 0xAu:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v39 = 0;
          *(unsigned char *)(a1 + 92) |= 0x10u;
          while (2)
          {
            uint64_t v40 = *v3;
            uint64_t v41 = *(void *)(a2 + v40);
            unint64_t v42 = v41 + 1;
            if (v41 == -1 || v42 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v43 = *(unsigned char *)(*(void *)(a2 + *v7) + v41);
              *(void *)(a2 + v4errstart(20, 0) = v42;
              v39 |= (unint64_t)(v43 & 0x7F) << v37;
              if (v43 < 0)
              {
                v37 += 7;
                BOOL v15 = v38++ >= 9;
                if (v15)
                {
                  uint64_t v39 = 0;
                  goto LABEL_71;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v39 = 0;
          }
LABEL_71:
          *(unsigned char *)(a1 + 8_Block_object_dispose(&a9, 8) = v39 != 0;
          continue;
        case 0xBu:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 92) |= 8u;
          break;
        case 0xCu:
          uint64_t v22 = PBReaderReadString();
          uint64_t v23 = 24;
LABEL_59:
          uint64_t v50 = *(void **)(a1 + v23);
          *(void *)(a1 + v23) = v22;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v46 = *v3;
        uint64_t v47 = *(void *)(a2 + v46);
        unint64_t v48 = v47 + 1;
        if (v47 == -1 || v48 > *(void *)(a2 + *v4)) {
          break;
        }
        char v49 = *(unsigned char *)(*(void *)(a2 + *v7) + v47);
        *(void *)(a2 + v46) = v48;
        v26 |= (unint64_t)(v49 & 0x7F) << v44;
        if ((v49 & 0x80) == 0) {
          goto LABEL_73;
        }
        v44 += 7;
        BOOL v15 = v45++ >= 9;
        if (v15)
        {
          LODWORD(v26) = 0;
          goto LABEL_75;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_73:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_75:
      uint64_t v51 = 64;
LABEL_76:
      *(_DWORD *)(a1 + v51) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void MAX.applyMetadata(metadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  OUTLINED_FUNCTION_37();
  a19 = v24;
  a20 = v25;
  uint64_t v27 = v26;
  uint64_t v29 = v28;
  uint64_t v183 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_4();
  uint64_t v179 = v30;
  MEMORY[0x1F4188790](v31);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_70(v32);
  uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v33);
  uint64_t v182 = (uint64_t)&v167 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v35);
  uint64_t v194 = (uint64_t)&v167 - v36;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v37);
  OUTLINED_FUNCTION_45();
  uint64_t v196 = v38;
  uint64_t v181 = OUTLINED_FUNCTION_109();
  OUTLINED_FUNCTION_0_4();
  uint64_t v178 = v39;
  MEMORY[0x1F4188790](v40);
  OUTLINED_FUNCTION_10();
  OUTLINED_FUNCTION_70(v41);
  uint64_t v192 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Date?);
  OUTLINED_FUNCTION_4_3();
  MEMORY[0x1F4188790](v42);
  uint64_t v180 = (uint64_t)&v167 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v44);
  OUTLINED_FUNCTION_21();
  uint64_t v191 = v45;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v46);
  OUTLINED_FUNCTION_45();
  uint64_t v193 = v47;
  uint64_t v48 = *(void *)(v27 + 16);
  uint64_t v49 = type metadata accessor for Optional();
  OUTLINED_FUNCTION_0_4();
  uint64_t v51 = v50;
  MEMORY[0x1F4188790](v52);
  OUTLINED_FUNCTION_16();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v53);
  OUTLINED_FUNCTION_21();
  uint64_t v190 = v54;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v55);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v56);
  OUTLINED_FUNCTION_21();
  uint64_t v189 = v57;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v58);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v59);
  OUTLINED_FUNCTION_21();
  uint64_t v188 = v60;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v61);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v62);
  OUTLINED_FUNCTION_21();
  uint64_t v187 = v63;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v64);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v65);
  OUTLINED_FUNCTION_21();
  uint64_t v186 = v66;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v67);
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v68);
  uint64_t v185 = (char *)&v167 - v69;
  OUTLINED_FUNCTION_11();
  MEMORY[0x1F4188790](v70);
  OUTLINED_FUNCTION_2_7();
  MEMORY[0x1F4188790](v71);
  OUTLINED_FUNCTION_45();
  uint64_t v184 = v72;
  uint64_t v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for StorableValue?);
  uint64_t v74 = OUTLINED_FUNCTION_35(v73);
  MEMORY[0x1F4188790](v74);
  uint64_t v198 = OUTLINED_FUNCTION_140();
  OUTLINED_FUNCTION_4_3();
  uint64_t v76 = MEMORY[0x1F4188790](v75);
  uint64_t v77 = MEMORY[0x1F4188790](v76);
  uint64_t v78 = MEMORY[0x1F4188790](v77);
  MEMORY[0x1F4188790](v78);
  uint64_t v80 = MEMORY[0x1F4188790]((char *)&v167 - v79);
  MEMORY[0x1F4188790](v80);
  OUTLINED_FUNCTION_61_0();
  MEMORY[0x1F4188790](v81);
  OUTLINED_FUNCTION_64();
  MEMORY[0x1F4188790](v82);
  OUTLINED_FUNCTION_21();
  uint64_t v197 = v83;
  OUTLINED_FUNCTION_11();
  uint64_t v85 = MEMORY[0x1F4188790](v84);
  if (*(void *)(v29 + 16))
  {
    uint64_t v91 = v29;
    uint64_t v169 = v86;
    uint64_t v170 = v85;
    uint64_t v171 = v90;
    uint64_t v172 = v89;
    uint64_t v173 = v88;
    uint64_t v176 = (uint64_t)&v167 - v87;
    uint64_t v175 = v49;
    uint64_t v174 = v51;
    uint64_t v177 = v48;
    swift_bridgeObjectRetain();
    uint64_t v92 = OUTLINED_FUNCTION_151();
    specialized __RawDictionaryStorage.find<A>(_:)(v92, v93);
    char v95 = v94;
    swift_bridgeObjectRelease();
    if (v95)
    {
      uint64_t v168 = v27;
      swift_bridgeObjectRetain();
      uint64_t v96 = OUTLINED_FUNCTION_151();
      specialized Dictionary.subscript.getter(v96, v97, v29, v98);
      swift_bridgeObjectRelease();
      uint64_t v99 = OUTLINED_FUNCTION_90_0();
      uint64_t v100 = v198;
      OUTLINED_FUNCTION_10_1(v99, v101, v198);
      if (v102)
      {
        outlined destroy of UUID?(v23, &demangling cache variable for type metadata for StorableValue?);
        uint64_t v103 = (uint64_t)v20 + *(int *)(v168 + 48);
        OUTLINED_FUNCTION_2_4();
        v104();
        __swift_storeEnumTagSinglePayload(v103, 1, 1, v177);
      }
      else
      {
        uint64_t v108 = v176;
        _s12BiomeStreams13StorableValueOWObTm_0(v23, v176, (void (*)(void))type metadata accessor for StorableValue);
        uint64_t v109 = v197;
        _s12BiomeStreams13StorableValueOWOcTm_0(v108, v197, (void (*)(void))type metadata accessor for StorableValue);
        uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v111 = v177;
        switch((int)EnumCaseMultiPayload)
        {
          case 1:
            _s12BiomeStreams13StorableValueOWOcTm_0(v109, v22, (void (*)(void))type metadata accessor for StorableValue);
            uint64_t v118 = *(void *)v22;
            char v119 = *(unsigned char *)(v22 + 8);
            uint64_t v199 = *(void *)v22;
            LOBYTE(v20errstart(20, 0) = v119;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Double?);
            OUTLINED_FUNCTION_143();
            if ((OUTLINED_FUNCTION_24_1() & 1) == 0) {
              goto LABEL_40;
            }
            uint64_t v120 = OUTLINED_FUNCTION_13_3();
            uint64_t v122 = v121(v120);
            OUTLINED_FUNCTION_95_0(v122, (void (*)(void))type metadata accessor for StorableValue);
            if (v119)
            {
              unint64_t v117 = &a13;
              goto LABEL_48;
            }
            uint64_t v199 = v118;
            uint64_t v136 = &a13;
            goto LABEL_43;
          case 2:
            uint64_t v123 = v169;
            _s12BiomeStreams13StorableValueOWOcTm_0(v109, v169, (void (*)(void))type metadata accessor for StorableValue);
            uint64_t v124 = v193;
            _s10Foundation4UUIDVSgWObTm_0(v123, v193, (uint64_t *)&demangling cache variable for type metadata for Date?);
            uint64_t v125 = v191;
            outlined init with copy of Date?(v124, v191, (uint64_t *)&demangling cache variable for type metadata for Date?);
            if (!OUTLINED_FUNCTION_212())
            {
              unint64_t v153 = (uint64_t *)&demangling cache variable for type metadata for Date?;
              goto LABEL_39;
            }
            uint64_t v126 = v174;
            OUTLINED_FUNCTION_20_1();
            uint64_t v128 = v127();
            OUTLINED_FUNCTION_95_0(v128, (void (*)(void))type metadata accessor for StorableValue);
            uint64_t v129 = v180;
            _s10Foundation4UUIDVSgWObTm_0(v124, v180, (uint64_t *)&demangling cache variable for type metadata for Date?);
            OUTLINED_FUNCTION_10_1(v129, 1, v181);
            if (!v102)
            {
              OUTLINED_FUNCTION_45_1();
              v159();
              unint64_t v160 = &a14;
              goto LABEL_44;
            }
            outlined destroy of UUID?(v129, (uint64_t *)&demangling cache variable for type metadata for Date?);
            uint64_t v130 = 1;
            int v131 = &a14;
            goto LABEL_33;
          case 3:
            uint64_t v132 = v170;
            _s12BiomeStreams13StorableValueOWOcTm_0(v109, v170, (void (*)(void))type metadata accessor for StorableValue);
            OUTLINED_FUNCTION_54_1();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            OUTLINED_FUNCTION_143();
            if (!OUTLINED_FUNCTION_24_1()) {
              goto LABEL_35;
            }
            uint64_t v133 = OUTLINED_FUNCTION_13_3();
            uint64_t v135 = v134(v133);
            OUTLINED_FUNCTION_95_0(v135, (void (*)(void))type metadata accessor for StorableValue);
            if (v132)
            {
              uint64_t v199 = v91;
              unint64_t v200 = v132;
              uint64_t v136 = &a17;
              goto LABEL_43;
            }
            unint64_t v117 = &a17;
            goto LABEL_48;
          case 4:
            uint64_t v137 = v171;
            _s12BiomeStreams13StorableValueOWOcTm_0(v109, v171, (void (*)(void))type metadata accessor for StorableValue);
            OUTLINED_FUNCTION_54_1();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            OUTLINED_FUNCTION_143();
            if (!OUTLINED_FUNCTION_24_1())
            {
LABEL_35:
              swift_bridgeObjectRelease();
              goto LABEL_40;
            }
            uint64_t v138 = OUTLINED_FUNCTION_13_3();
            uint64_t v140 = v139(v138);
            OUTLINED_FUNCTION_95_0(v140, (void (*)(void))type metadata accessor for StorableValue);
            if (v137)
            {
              uint64_t v199 = v91;
              unint64_t v200 = v137;
              uint64_t v136 = &a18;
              goto LABEL_43;
            }
            unint64_t v117 = &a18;
            goto LABEL_48;
          case 5:
            unint64_t v141 = v172;
            _s12BiomeStreams13StorableValueOWOcTm_0(v109, v172, (void (*)(void))type metadata accessor for StorableValue);
            OUTLINED_FUNCTION_124();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
            OUTLINED_FUNCTION_143();
            if (!OUTLINED_FUNCTION_24_1())
            {
              outlined consume of Data?(v108, v141);
              goto LABEL_40;
            }
            uint64_t v142 = OUTLINED_FUNCTION_13_3();
            uint64_t v144 = v143(v142);
            OUTLINED_FUNCTION_95_0(v144, (void (*)(void))type metadata accessor for StorableValue);
            OUTLINED_FUNCTION_101();
            if (!(!v102 & v145))
            {
              uint64_t v199 = v108;
              unint64_t v200 = v141;
              uint64_t v136 = &a15;
              goto LABEL_43;
            }
            unint64_t v117 = &a15;
            goto LABEL_48;
          case 6:
            uint64_t v146 = v173;
            _s12BiomeStreams13StorableValueOWOcTm_0(v109, v173, (void (*)(void))type metadata accessor for StorableValue);
            uint64_t v124 = v196;
            _s10Foundation4UUIDVSgWObTm_0(v146, v196, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            uint64_t v125 = v194;
            outlined init with copy of Date?(v124, v194, (uint64_t *)&demangling cache variable for type metadata for UUID?);
            if (OUTLINED_FUNCTION_212())
            {
              uint64_t v126 = v174;
              OUTLINED_FUNCTION_20_1();
              uint64_t v148 = v147();
              OUTLINED_FUNCTION_95_0(v148, (void (*)(void))type metadata accessor for StorableValue);
              uint64_t v149 = v182;
              _s10Foundation4UUIDVSgWObTm_0(v124, v182, (uint64_t *)&demangling cache variable for type metadata for UUID?);
              OUTLINED_FUNCTION_10_1(v149, 1, v183);
              if (v102)
              {
                outlined destroy of UUID?(v149, (uint64_t *)&demangling cache variable for type metadata for UUID?);
                uint64_t v130 = 1;
                int v131 = &a16;
LABEL_33:
                uint64_t v150 = *(v131 - 32);
              }
              else
              {
                OUTLINED_FUNCTION_45_1();
                v164();
                unint64_t v160 = &a16;
LABEL_44:
                uint64_t v150 = *(v160 - 32);
                swift_dynamicCast();
                uint64_t v130 = 0;
              }
              OUTLINED_FUNCTION_197(v150, v130);
              uint64_t v165 = OUTLINED_FUNCTION_173();
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v126 + 40))(v165, v150, v125);
LABEL_50:
              uint64_t v158 = v109;
            }
            else
            {
              unint64_t v153 = (uint64_t *)&demangling cache variable for type metadata for UUID?;
LABEL_39:
              outlined destroy of UUID?(v124, v153);
LABEL_40:
              lazy protocol witness table accessor for type SQLError and conformance SQLError();
              OUTLINED_FUNCTION_39();
              int v155 = v154;
              v154[3] = v100;
              boxed_opaque_existential_0 = __swift_allocate_boxed_opaque_existential_0(v154);
              uint64_t v157 = v176;
              _s12BiomeStreams13StorableValueOWOcTm_0(v176, (uint64_t)boxed_opaque_existential_0, (void (*)(void))type metadata accessor for StorableValue);
              v155[7] = swift_getMetatypeMetadata();
              v155[4] = v111;
              *((unsigned char *)v155 + 64) = 3;
              swift_willThrow();
              _s12BiomeStreams13StorableValueOWOhTm_1(v157, (void (*)(void))type metadata accessor for StorableValue);
              uint64_t v158 = v109;
            }
            _s12BiomeStreams13StorableValueOWOhTm_1(v158, (void (*)(void))type metadata accessor for StorableValue);
            break;
          case 7:
            OUTLINED_FUNCTION_95_0(EnumCaseMultiPayload, (void (*)(void))type metadata accessor for StorableValue);
            uint64_t v151 = (uint64_t)v20 + *(int *)(v168 + 48);
            OUTLINED_FUNCTION_2_4();
            v152();
            OUTLINED_FUNCTION_197(v151, 1);
            goto LABEL_50;
          default:
            _s12BiomeStreams13StorableValueOWOcTm_0(v109, v21, (void (*)(void))type metadata accessor for StorableValue);
            uint64_t v112 = *(void *)v21;
            char v113 = *(unsigned char *)(v21 + 8);
            uint64_t v199 = *(void *)v21;
            LOBYTE(v20errstart(20, 0) = v113;
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int64?);
            OUTLINED_FUNCTION_143();
            if ((OUTLINED_FUNCTION_24_1() & 1) == 0) {
              goto LABEL_40;
            }
            uint64_t v114 = OUTLINED_FUNCTION_13_3();
            uint64_t v116 = v115(v114);
            OUTLINED_FUNCTION_95_0(v116, (void (*)(void))type metadata accessor for StorableValue);
            if (v113)
            {
              unint64_t v117 = &a12;
LABEL_48:
              uint64_t v161 = *(v117 - 32);
              uint64_t v162 = v161;
              uint64_t v163 = 1;
            }
            else
            {
              uint64_t v199 = v112;
              uint64_t v136 = &a12;
LABEL_43:
              uint64_t v161 = *(v136 - 32);
              swift_dynamicCast();
              uint64_t v162 = v161;
              uint64_t v163 = 0;
            }
            OUTLINED_FUNCTION_197(v162, v163);
            uint64_t v166 = OUTLINED_FUNCTION_173();
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v100 + 40))(v166, v161, v21);
            goto LABEL_50;
        }
      }
    }
    else
    {
      lazy protocol witness table accessor for type SQLError and conformance SQLError();
      OUTLINED_FUNCTION_39();
      OUTLINED_FUNCTION_152(v107, *v20);
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v105 = (uint64_t)v20 + *(int *)(v27 + 48);
    OUTLINED_FUNCTION_95();
    v106();
    OUTLINED_FUNCTION_197(v105, 1);
  }
  OUTLINED_FUNCTION_31();
}

uint64_t OUTLINED_FUNCTION_151()
{
  return v0;
}

void protobuf_c_message_pack_to_buffer_cold_5()
{
  __assert_rtn("protobuf_c_message_pack_to_buffer", "protobuf-c.c", 1965, "((message)->descriptor)->magic == PROTOBUF_C__MESSAGE_DESCRIPTOR_MAGIC");
}

uint64_t protobuf_c_message_pack_to_buffer(uint64_t a1, void (**a2)(void, uint64_t, char *))
{
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(_DWORD **)a1;
  if (**(_DWORD **)a1 != 682290937) {
    protobuf_c_message_pack_to_buffer_cold_5();
  }
  if (v2[12])
  {
    unint64_t v5 = 0;
    uint64_t v6 = 0;
LABEL_7:
    uint64_t v8 = *((void *)v2 + 7);
    unsigned int v9 = (_DWORD *)(v8 + 72 * v5);
    uint64_t v10 = v9[5];
    uint64_t v11 = (unsigned int **)(a1 + v9[6]);
    int v12 = v9[3];
    if (v12 == 3 || v12 == 1)
    {
      if ((*(unsigned char *)(v8 + 72 * v5 + 48) & 4) != 0)
      {
        if (*(_DWORD *)(v8 + 72 * v5 + 8) != *(_DWORD *)(a1 + v10)) {
          goto LABEL_59;
        }
        int v21 = *(_DWORD *)(v8 + 72 * v5 + 16);
        if (v21 != 16 && v21 != 14) {
          goto LABEL_5;
        }
        int v16 = *v11;
        if (!*v11) {
          goto LABEL_59;
        }
        goto LABEL_36;
      }
      if (v12 == 3)
      {
        switch(v9[4])
        {
          case 0:
          case 1:
          case 2:
          case 6:
          case 7:
          case 0xC:
          case 0xD:
            if (!*(_DWORD *)v11) {
              goto LABEL_59;
            }
            goto LABEL_5;
          case 3:
          case 4:
          case 5:
          case 8:
          case 9:
          case 0xF:
          case 0x10:
            if (*v11) {
              goto LABEL_5;
            }
            goto LABEL_59;
          case 0xA:
            if (*(float *)v11 != 0.0) {
              goto LABEL_5;
            }
            goto LABEL_59;
          case 0xB:
            if (*(double *)v11 != 0.0) {
              goto LABEL_5;
            }
            goto LABEL_59;
          case 0xE:
            if (!*v11 || !*(unsigned char *)*v11) {
              goto LABEL_59;
            }
            goto LABEL_5;
          default:
            goto LABEL_59;
        }
      }
      if (v12 == 1)
      {
        int v14 = *(_DWORD *)(v8 + 72 * v5 + 16);
        if (v14 != 16 && v14 != 14)
        {
          if (!*(_DWORD *)(a1 + v10)) {
            goto LABEL_59;
          }
LABEL_5:
          uint64_t v7 = required_field_pack_to_buffer((uint64_t)v9, (uint64_t)v11, a2);
          goto LABEL_6;
        }
        int v16 = *v11;
        if (!*v11)
        {
LABEL_59:
          uint64_t v7 = 0;
          goto LABEL_6;
        }
LABEL_36:
        if (v16 != *(unsigned int **)(v8 + 72 * v5 + 40)) {
          goto LABEL_5;
        }
        goto LABEL_59;
      }
    }
    else if (!v12)
    {
      goto LABEL_5;
    }
    uint64_t v17 = *(void *)(a1 + v10);
    if (!v17) {
      goto LABEL_59;
    }
    uint64_t v18 = *v11;
    if ((*(unsigned char *)(v8 + 72 * v5 + 48) & 1) == 0)
    {
      uint64_t v19 = *(int *)(v8 + 72 * v5 + 16);
      if (v19 >= 0x11) {
        protobuf_c_message_pack_cold_1();
      }
      LODWORD(v7) = 0;
      uint64_t v20 = qword_18EBDE350[v19];
      do
      {
        uint64_t v7 = v7 + required_field_pack_to_buffer((uint64_t)v9, (uint64_t)v18, a2);
        uint64_t v18 = (unsigned int *)((char *)v18 + v20);
        LODWORD(v17) = v17 - 1;
      }
      while (v17);
      goto LABEL_6;
    }
    unsigned int v23 = *(_DWORD *)(v8 + 72 * v5 + 8);
    if (v23 >> 29)
    {
      char v117 = (8 * v23) | 0x80;
      char v118 = (v23 >> 4) | 0x80;
      char v119 = (v23 >> 11) | 0x80;
      char v120 = (v23 >> 18) | 0x80;
      HIDWORD(v27) = v23 >> 29;
      LODWORD(v27) = 8 * v23;
      char v121 = v27 >> 28;
      uint64_t v28 = 5;
    }
    else
    {
      LOBYTE(v24) = 8 * v23;
      if (v23 < 0x10)
      {
        uint64_t v26 = 0;
      }
      else
      {
        char v117 = v24 | 0x80;
        unsigned int v24 = v23 >> 4;
        if (v23 < 0x800)
        {
          uint64_t v26 = 1;
        }
        else
        {
          char v118 = v24 | 0x80;
          unsigned int v24 = v23 >> 11;
          if (v23 < 0x40000)
          {
            uint64_t v26 = 2;
          }
          else
          {
            char v119 = v24 | 0x80;
            unsigned int v24 = v23 >> 18;
            unsigned int v25 = v23 >> 25;
            if (v25)
            {
              char v120 = v24 | 0x80;
              LOBYTE(v24) = v25;
              uint64_t v26 = 4;
            }
            else
            {
              uint64_t v26 = 3;
            }
          }
        }
      }
      uint64_t v28 = v26 + 1;
      *(&v117 + v26) = v24;
    }
    uint64_t v29 = v17;
    unsigned int v30 = v17;
    switch(v9[4])
    {
      case 0:
      case 0xD:
        unsigned int v30 = 0;
        uint64_t v34 = v18;
        uint64_t v35 = v17;
        do
        {
          unsigned int v38 = *v34++;
          unsigned int v37 = v38;
          if ((v38 & 0x80000000) != 0)
          {
            int v36 = 10;
          }
          else if (v37 >= 0x80)
          {
            if (v37 >> 28) {
              int v39 = 5;
            }
            else {
              int v39 = 4;
            }
            if (v37 < 0x200000) {
              int v39 = 3;
            }
            if (v37 >= 0x4000) {
              int v36 = v39;
            }
            else {
              int v36 = 2;
            }
          }
          else
          {
            int v36 = 1;
          }
          v30 += v36;
          --v35;
        }
        while (v35);
        goto LABEL_65;
      case 1:
        unsigned int v30 = 0;
        uint64_t v49 = (int *)v18;
        uint64_t v50 = v17;
        do
        {
          int v52 = *v49++;
          unsigned int v53 = (2 * v52) ^ (v52 >> 31);
          if (v53 < 0x80)
          {
            int v51 = 1;
          }
          else if (v53 >= 0x4000)
          {
            if (v53 >= 0x200000)
            {
              if (v53 >> 28) {
                int v51 = 5;
              }
              else {
                int v51 = 4;
              }
            }
            else
            {
              int v51 = 3;
            }
          }
          else
          {
            int v51 = 2;
          }
          v30 += v51;
          --v50;
        }
        while (v50);
        goto LABEL_65;
      case 2:
      case 7:
      case 0xA:
        unsigned int v30 = 4 * v17;
        goto LABEL_65;
      case 3:
      case 8:
        unsigned int v30 = 0;
        uint64_t v40 = (unint64_t *)v18;
        uint64_t v41 = v17;
        do
        {
          unint64_t v47 = *v40++;
          unint64_t v46 = v47;
          if (HIDWORD(v47))
          {
            if (v46 >> 35)
            {
              unint64_t v42 = v46 >> 42;
              unint64_t v43 = v46 >> 49;
              unint64_t v44 = HIBYTE(v46);
              if ((v46 & 0x8000000000000000) == 0) {
                int v45 = 9;
              }
              else {
                int v45 = 10;
              }
              if (!v44) {
                int v45 = 8;
              }
              if (!v43) {
                int v45 = 7;
              }
              if (!v42) {
                int v45 = 6;
              }
            }
            else
            {
              int v45 = 5;
            }
          }
          else if (v46 >= 0x80)
          {
            if (v46 >> 28) {
              int v48 = 5;
            }
            else {
              int v48 = 4;
            }
            if (v46 < 0x200000) {
              int v48 = 3;
            }
            if (v46 >= 0x4000) {
              int v45 = v48;
            }
            else {
              int v45 = 2;
            }
          }
          else
          {
            int v45 = 1;
          }
          v30 += v45;
          --v41;
        }
        while (v41);
        goto LABEL_65;
      case 4:
        unsigned int v30 = 0;
        uint64_t v54 = (uint64_t *)v18;
        uint64_t v55 = v17;
        do
        {
          uint64_t v57 = *v54++;
          unint64_t v58 = (2 * v57) ^ (v57 >> 63);
          if (HIDWORD(v58))
          {
            if (v58 >> 35)
            {
              if (v58 >> 42)
              {
                if (v58 >> 49)
                {
                  if (HIBYTE(v58))
                  {
                    if ((v58 & 0x8000000000000000) == 0) {
                      int v56 = 9;
                    }
                    else {
                      int v56 = 10;
                    }
                  }
                  else
                  {
                    int v56 = 8;
                  }
                }
                else
                {
                  int v56 = 7;
                }
              }
              else
              {
                int v56 = 6;
              }
            }
            else
            {
              int v56 = 5;
            }
          }
          else if (v58 < 0x80)
          {
            int v56 = 1;
          }
          else if (v58 >= 0x4000)
          {
            if (v58 >= 0x200000)
            {
              if (v58 >> 28) {
                int v56 = 5;
              }
              else {
                int v56 = 4;
              }
            }
            else
            {
              int v56 = 3;
            }
          }
          else
          {
            int v56 = 2;
          }
          v30 += v56;
          --v55;
        }
        while (v55);
        goto LABEL_65;
      case 5:
      case 9:
      case 0xB:
        unsigned int v30 = 8 * v17;
        goto LABEL_65;
      case 6:
        unsigned int v30 = 0;
        uint64_t v59 = v18;
        uint64_t v60 = v17;
        break;
      case 0xC:
        goto LABEL_65;
      default:
        protobuf_c_message_pack_to_buffer_cold_2();
    }
    do
    {
      while (1)
      {
        unsigned int v64 = *v59++;
        unsigned int v63 = v64;
        if (v64 >= 0x80) {
          break;
        }
        ++v30;
        if (!--v60) {
          goto LABEL_65;
        }
      }
      if (v63 >> 28) {
        int v61 = 5;
      }
      else {
        int v61 = 4;
      }
      if (v63 < 0x200000) {
        int v61 = 3;
      }
      if (v63 >= 0x4000) {
        int v62 = v61;
      }
      else {
        int v62 = 2;
      }
      v30 += v62;
      --v60;
    }
    while (v60);
LABEL_65:
    v117 |= 2u;
    uint64_t v31 = &v117 + v28;
    if (v30 < 0x80)
    {
      uint64_t v33 = 0;
      LOBYTE(v32) = v30;
    }
    else
    {
      *uint64_t v31 = v30 | 0x80;
      unsigned int v32 = v30 >> 7;
      if (v30 < 0x4000)
      {
        uint64_t v33 = 1;
      }
      else
      {
        v31[1] = v32 | 0x80;
        unsigned int v32 = v30 >> 14;
        if (v30 < 0x200000)
        {
          uint64_t v33 = 2;
        }
        else
        {
          v31[2] = v32 | 0x80;
          unsigned int v32 = v30 >> 21;
          if (v30 >> 28)
          {
            v31[3] = v32 | 0x80;
            unsigned int v32 = v30 >> 28;
            uint64_t v33 = 4;
          }
          else
          {
            uint64_t v33 = 3;
          }
        }
      }
    }
    v31[v33] = v32;
    uint64_t v65 = v33 + v28 + 1;
    (*a2)(a2, v65, &v117);
    char v66 = 2;
    uint64_t v116 = v65;
    switch(v9[4])
    {
      case 0:
      case 0xD:
        uint64_t v67 = 0;
        do
        {
          unsigned int v73 = *v18++;
          unsigned int v72 = v73;
          if ((v73 & 0x80000000) != 0)
          {
            int32x4_t v68 = vdupq_n_s32(v72);
            char v122 = v72 | 0x80;
            int32x4_t v69 = (int32x4_t)vshlq_u32((uint32x4_t)v68, (uint32x4_t)xmmword_18EBDE2C0);
            int16x8_t v70 = (int16x8_t)vshlq_s32(v68, (int32x4_t)xmmword_18EBDE2C0);
            v69.i32[3] = v70.i32[3];
            v70.i64[0] = *(void *)&vmovn_s32(v69) | 0x80008000800080;
            unsigned __int32 v123 = vmovn_s16(v70).u32[0];
            int v124 = -1;
            char v125 = 1;
            uint64_t v71 = 10;
          }
          else
          {
            if (v72 < 0x80)
            {
              uint64_t v75 = 0;
            }
            else
            {
              char v122 = v72 | 0x80;
              if (v72 < 0x4000)
              {
                v72 >>= 7;
                uint64_t v75 = 1;
              }
              else
              {
                LOBYTE(v123) = (v72 >> 7) | 0x80;
                if (v72 < 0x200000)
                {
                  v72 >>= 14;
                  uint64_t v75 = 2;
                }
                else
                {
                  BYTE1(v123) = (v72 >> 14) | 0x80;
                  unsigned int v74 = v72 >> 21;
                  v72 >>= 28;
                  if (v72)
                  {
                    BYTE2(v123) = v74 | 0x80;
                    uint64_t v75 = 4;
                  }
                  else
                  {
                    LOBYTE(v72) = v74;
                    uint64_t v75 = 3;
                  }
                }
              }
            }
            uint64_t v71 = v75 + 1;
            *(&v122 + v75) = v72;
          }
          (*a2)(a2, v71, &v122);
          v67 += v71;
          --v29;
        }
        while (v29);
        goto LABEL_162;
      case 1:
        uint64_t v67 = 0;
        do
        {
          int v86 = *v18++;
          unsigned int v87 = (2 * v86) ^ (v86 >> 31);
          if (v87 < 0x80)
          {
            uint64_t v84 = 0;
          }
          else
          {
            char v122 = v87 | 0x80;
            if (v87 < 0x4000)
            {
              v87 >>= 7;
              uint64_t v84 = 1;
            }
            else
            {
              LOBYTE(v123) = (v87 >> 7) | 0x80;
              if (v87 < 0x200000)
              {
                v87 >>= 14;
                uint64_t v84 = 2;
              }
              else
              {
                BYTE1(v123) = (v87 >> 14) | 0x80;
                unsigned int v88 = v87 >> 21;
                v87 >>= 28;
                if (v87)
                {
                  BYTE2(v123) = v88 | 0x80;
                  uint64_t v84 = 4;
                }
                else
                {
                  LOBYTE(v87) = v88;
                  uint64_t v84 = 3;
                }
              }
            }
          }
          uint64_t v85 = v84 + 1;
          *(&v122 + v84) = v87;
          (*a2)(a2, v84 + 1, &v122);
          v67 += v85;
          --v29;
        }
        while (v29);
        goto LABEL_162;
      case 2:
      case 7:
      case 0xA:
        goto LABEL_161;
      case 3:
      case 8:
        uint64_t v76 = 0;
        uint64_t v67 = 0;
        while (1)
        {
          unint64_t v80 = *(void *)&v18[2 * v76];
          unint64_t v81 = HIDWORD(v80);
          if (HIDWORD(v80))
          {
            char v122 = v80 | 0x80;
            LOBYTE(v123) = (v80 >> 7) | 0x80;
            BYTE1(v123) = (v80 >> 14) | 0x80;
            BYTE2(v123) = (v80 >> 21) | 0x80;
            LOBYTE(v8errstart(20, 0) = v80 >> 28;
            if (v81 < 8)
            {
              unsigned int v78 = 5;
              LODWORD(v77) = 4;
              goto LABEL_181;
            }
            HIBYTE(v123) = v80 | 0x80;
            LODWORD(v8errstart(20, 0) = v81 >> 3;
            if (v81 < 0x400)
            {
              LODWORD(v77) = 5;
            }
            else
            {
              uint64_t v77 = 5;
              do
              {
                *(&v122 + v77++) = v80 | 0x80;
                unsigned int v83 = v80 >> 14;
                LODWORD(v8errstart(20, 0) = v80 >> 7;
              }
              while (v83);
            }
          }
          else if (v80 < 0x80)
          {
            LODWORD(v77) = 0;
          }
          else
          {
            char v122 = v80 | 0x80;
            if (v80 < 0x4000)
            {
              LODWORD(v77) = 1;
              LODWORD(v8errstart(20, 0) = v80 >> 7;
            }
            else
            {
              LOBYTE(v123) = (v80 >> 7) | 0x80;
              if (v80 < 0x200000)
              {
                LODWORD(v77) = 2;
                LODWORD(v8errstart(20, 0) = v80 >> 14;
              }
              else
              {
                BYTE1(v123) = (v80 >> 14) | 0x80;
                unsigned int v82 = v80 >> 21;
                LODWORD(v8errstart(20, 0) = v80 >> 28;
                if (v80)
                {
                  BYTE2(v123) = v82 | 0x80;
                  LODWORD(v77) = 4;
                }
                else
                {
                  LODWORD(v77) = 3;
                  LOBYTE(v8errstart(20, 0) = v82;
                }
              }
            }
          }
          unsigned int v78 = v77 + 1;
LABEL_181:
          *(&v122 + v77) = v80;
          uint64_t v79 = v78;
          (*a2)(a2, v78, &v122);
          v67 += v79;
          if (++v76 == v29) {
            goto LABEL_162;
          }
        }
      case 4:
        uint64_t v89 = 0;
        uint64_t v67 = 0;
        break;
      case 5:
      case 9:
      case 0xB:
        char v66 = 3;
LABEL_161:
        uint64_t v67 = (v17 << v66);
        (*a2)(a2, v67, (char *)v18);
        goto LABEL_162;
      case 6:
        uint64_t v67 = 0;
        do
        {
          unsigned int v100 = *v18++;
          unsigned int v99 = v100;
          if (v100 < 0x80)
          {
            uint64_t v97 = 0;
          }
          else
          {
            char v122 = v99 | 0x80;
            if (v99 < 0x4000)
            {
              v99 >>= 7;
              uint64_t v97 = 1;
            }
            else
            {
              LOBYTE(v123) = (v99 >> 7) | 0x80;
              if (v99 < 0x200000)
              {
                v99 >>= 14;
                uint64_t v97 = 2;
              }
              else
              {
                BYTE1(v123) = (v99 >> 14) | 0x80;
                unsigned int v101 = v99 >> 21;
                v99 >>= 28;
                if (v99)
                {
                  BYTE2(v123) = v101 | 0x80;
                  uint64_t v97 = 4;
                }
                else
                {
                  LOBYTE(v99) = v101;
                  uint64_t v97 = 3;
                }
              }
            }
          }
          uint64_t v98 = v97 + 1;
          *(&v122 + v97) = v99;
          (*a2)(a2, v97 + 1, &v122);
          v67 += v98;
          --v29;
        }
        while (v29);
        goto LABEL_162;
      case 0xC:
        uint64_t v102 = v17;
        do
        {
          int v103 = *v18++;
          char v122 = v103 != 0;
          (*a2)(a2, 1, &v122);
          --v102;
        }
        while (v102);
        uint64_t v67 = v17;
        goto LABEL_162;
      default:
        protobuf_c_message_pack_to_buffer_cold_3();
    }
    while (1)
    {
      unint64_t v93 = (2 * *(void *)&v18[2 * v89]) ^ (*(uint64_t *)&v18[2 * v89] >> 63);
      unint64_t v94 = HIDWORD(v93);
      if (HIDWORD(v93))
      {
        char v122 = v93 | 0x80;
        LOBYTE(v123) = (v93 >> 7) | 0x80;
        BYTE1(v123) = (v93 >> 14) | 0x80;
        BYTE2(v123) = (v93 >> 21) | 0x80;
        LOBYTE(v93) = v93 >> 28;
        if (v94 < 8)
        {
          unsigned int v91 = 5;
          LODWORD(v9errstart(20, 0) = 4;
          goto LABEL_212;
        }
        HIBYTE(v123) = v93 | 0x80;
        LODWORD(v93) = v94 >> 3;
        if (v94 < 0x400)
        {
          LODWORD(v9errstart(20, 0) = 5;
        }
        else
        {
          uint64_t v90 = 5;
          do
          {
            *(&v122 + v90++) = v93 | 0x80;
            unsigned int v96 = v93 >> 14;
            LODWORD(v93) = v93 >> 7;
          }
          while (v96);
        }
      }
      else if (v93 < 0x80)
      {
        LODWORD(v9errstart(20, 0) = 0;
      }
      else
      {
        char v122 = v93 | 0x80;
        if (v93 < 0x4000)
        {
          LODWORD(v9errstart(20, 0) = 1;
          LODWORD(v93) = v93 >> 7;
        }
        else
        {
          LOBYTE(v123) = (v93 >> 7) | 0x80;
          if (v93 < 0x200000)
          {
            LODWORD(v9errstart(20, 0) = 2;
            LODWORD(v93) = v93 >> 14;
          }
          else
          {
            BYTE1(v123) = (v93 >> 14) | 0x80;
            unsigned int v95 = v93 >> 21;
            LODWORD(v93) = v93 >> 28;
            if (v93)
            {
              BYTE2(v123) = v95 | 0x80;
              LODWORD(v9errstart(20, 0) = 4;
            }
            else
            {
              LODWORD(v9errstart(20, 0) = 3;
              LOBYTE(v93) = v95;
            }
          }
        }
      }
      unsigned int v91 = v90 + 1;
LABEL_212:
      *(&v122 + v9errstart(20, 0) = v93;
      uint64_t v92 = v91;
      (*a2)(a2, v91, &v122);
      v67 += v92;
      if (++v89 == v29)
      {
LABEL_162:
        if (v67 != v30) {
          protobuf_c_message_pack_to_buffer_cold_4();
        }
        uint64_t v7 = v116 + v30;
LABEL_6:
        v6 += v7;
        ++v5;
        uint64_t v2 = *(_DWORD **)a1;
        if (v5 >= *(unsigned int *)(*(void *)a1 + 48)) {
          goto LABEL_244;
        }
        goto LABEL_7;
      }
    }
  }
  uint64_t v6 = 0;
LABEL_244:
  if (*(_DWORD *)(a1 + 8))
  {
    uint64_t v104 = 0;
    unint64_t v105 = 0;
    do
    {
      uint64_t v110 = *(void *)(a1 + 16);
      unsigned int v111 = *(_DWORD *)(v110 + v104);
      if (v111 >> 29)
      {
        char v106 = (8 * v111) | 0x80;
        char v118 = (v111 >> 4) | 0x80;
        char v119 = (v111 >> 11) | 0x80;
        char v120 = (v111 >> 18) | 0x80;
        HIDWORD(v107) = v111 >> 29;
        LODWORD(v107) = 8 * v111;
        char v121 = v107 >> 28;
        uint64_t v108 = 5;
      }
      else
      {
        LOBYTE(v112) = 8 * v111;
        if (v111 < 0x10)
        {
          uint64_t v114 = 0;
        }
        else
        {
          char v117 = v112 | 0x80;
          unsigned int v112 = v111 >> 4;
          if (v111 < 0x800)
          {
            uint64_t v114 = 1;
          }
          else
          {
            char v118 = v112 | 0x80;
            unsigned int v112 = v111 >> 11;
            if (v111 < 0x40000)
            {
              uint64_t v114 = 2;
            }
            else
            {
              char v119 = v112 | 0x80;
              unsigned int v112 = v111 >> 18;
              unsigned int v113 = v111 >> 25;
              if (v113)
              {
                char v120 = v112 | 0x80;
                LOBYTE(v112) = v113;
                uint64_t v114 = 4;
              }
              else
              {
                uint64_t v114 = 3;
              }
            }
          }
        }
        uint64_t v108 = v114 + 1;
        *(&v117 + v114) = v112;
        char v106 = v117;
      }
      uint64_t v109 = v110 + v104;
      char v117 = v106 | *(_DWORD *)(v110 + v104 + 4);
      (*a2)(a2, v108, &v117);
      (*a2)(a2, *(void *)(v109 + 8), *(char **)(v109 + 16));
      v6 += v108 + *(void *)(v109 + 8);
      ++v105;
      v104 += 24;
    }
    while (v105 < *(unsigned int *)(a1 + 8));
  }
  return v6;
}

void processCASbits_cold_3(size_t a1)
{
  OUTLINED_FUNCTION_1_16();
  errcode();
  errmsg("%s constraints cannot be marked DEFERRABLE", v2, v3, v4, v5, v6, v7, v8, a1);
  OUTLINED_FUNCTION_8_7();
  errfinish("gram.y", 16763, (uint64_t)"processCASbits");
  __break(1u);
}

void pg_query__BOOL_expr__pack_to_buffer_cold_1()
{
  __assert_rtn("pg_query__BOOL_expr__pack_to_buffer", "pg_query.pb-c.c", 1248, "message->base.descriptor == &pg_query__BOOL_expr__descriptor");
}

void base_yyparse_cold_19()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("CREATE EXTENSION ... FROM is no longer supported", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_4_8();
  errfinish("gram.y", 4609, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_16()
{
  OUTLINED_FUNCTION_0_18();
  OUTLINED_FUNCTION_2_12();
  errmsg("STDIN/STDOUT not allowed with PROGRAM", v2, v3, v4, v5, v6, v7, v8, v9);
  scanner_errposition(*(unsigned int *)(v1 - 16), v0);
  errfinish("gram.y", 3096, (uint64_t)"base_yyparse");
  __break(1u);
}

void base_yyparse_cold_12()
{
  OUTLINED_FUNCTION_0_18();
  errcode();
  errmsg("remainder for hash partition provided more than once", v0, v1, v2, v3, v4, v5, v6, v7);
  OUTLINED_FUNCTION_6_10();
  errfinish("gram.y", 2843, (uint64_t)"base_yyparse");
  __break(1u);
}

uint64_t OUTLINED_FUNCTION_197(uint64_t a1, uint64_t a2)
{
  return __swift_storeEnumTagSinglePayload(a1, a2, 1, v2);
}

uint64_t OUTLINED_FUNCTION_193(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return _s12BiomeStreams13StorableValueOWOcTm_0(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_190()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_185(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v6 = *(void *)(v4 - 520);
  return _s12BiomeStreams13StorableValueOWOcTm_0(v3, v6, a3);
}

uint64_t OUTLINED_FUNCTION_173()
{
  return v0 + *(int *)(*(void *)(v1 - 424) + 48);
}

uint64_t OUTLINED_FUNCTION_164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 16errstart(20, 0) = (char *)&a9 - v9;
  return type metadata accessor for StorableValue(0);
}

ValueMetadata *OUTLINED_FUNCTION_163(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 176) = (char *)&a9 - v9;
  return type metadata accessor for SQLDataType();
}

uint64_t OUTLINED_FUNCTION_162()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_157()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_145_0()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_137(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 264) = (char *)&a9 - v9;
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_126()
{
  uint64_t v2 = *(void *)(v0 - 176);
  uint64_t v3 = *(void *)(v0 - 184);
  return __swift_storeEnumTagSinglePayload(v2, 1, 1, v3);
}

void OUTLINED_FUNCTION_126_0(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_114()
{
  return *(void *)(v0 - 296);
}

ValueMetadata *OUTLINED_FUNCTION_114_1()
{
  return type metadata accessor for MaterializedView();
}

void *AllocSetReset(void *a1)
{
  uint64_t v2 = a1 + 11;
  unint64_t v3 = (unint64_t)(a1 + 22);
  if (v2 < a1 + 22)
  {
    if (v3 <= (unint64_t)(a1 + 12)) {
      unint64_t v3 = (unint64_t)(a1 + 12);
    }
    bzero(v2, ((v3 - (void)a1 - 89) & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  uint64_t result = (void *)a1[10];
  a1[10] = a1[26];
  if (result)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (void *)result[2];
        if (result == (void *)a1[26]) {
          break;
        }
        a1[1] += (char *)result - result[4];
        free(result);
        uint64_t result = v5;
        if (!v5) {
          goto LABEL_10;
        }
      }
      result[2] = 0;
      result[3] = result + 5;
      result[1] = 0;
      uint64_t result = v5;
    }
    while (v5);
  }
LABEL_10:
  a1[24] = a1[22];
  return result;
}

BOOL protocol witness for static AggregationComparable.> infix(_:_:) in conformance Double(double *a1, double *a2)
{
  return *a2 < *a1;
}

#error "18E6E3CB4: call analysis failed (funcsize=6)"

uint64_t initializeWithCopy for MIN()
{
  OUTLINED_FUNCTION_102();
  uint64_t v4 = v3[1];
  *uint64_t v5 = *v3;
  v5[1] = v4;
  uint64_t v6 = type metadata accessor for SQLExpression();
  OUTLINED_FUNCTION_4_3();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, ValueMetadata *))(v7 + 16);
  uint64_t v9 = v7 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 16 + v0) & ~v10;
  uint64_t v12 = (v10 + 16 + v2) & ~v10;
  swift_bridgeObjectRetain();
  v8(v11, v12, v6);
  uint64_t v13 = *(void *)(v9 + 48);
  type metadata accessor for SQLDataType();
  OUTLINED_FUNCTION_4_3();
  uint64_t v14 = OUTLINED_FUNCTION_25_3();
  v15(v14);
  OUTLINED_FUNCTION_145();
  *uint64_t v17 = *v16;
  v17[1] = v16[1];
  OUTLINED_FUNCTION_55_1();
  OUTLINED_FUNCTION_144();
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload(v13, 1, v1))
  {
    OUTLINED_FUNCTION_125();
  }
  else
  {
    uint64_t v18 = OUTLINED_FUNCTION_190();
    v19(v18);
    OUTLINED_FUNCTION_75_0();
  }
  return v0;
}

#error "18E6E3E04: call analysis failed (funcsize=6)"

uint64_t lazy protocol witness table accessor for type Data.Iterator and conformance Data.Iterator(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t BMPBMicroLocationRestrictedLocalizationEventReadFrom(unsigned char *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        a1[56] |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v1_Block_object_dispose(&a9, 8) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        uint64_t v28 = 8;
        goto LABEL_40;
      case 2u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 24;
        goto LABEL_26;
      case 3u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 32;
LABEL_26:
        unsigned int v24 = *(void **)&a1[v23];
        *(void *)&a1[v23] = v22;

        goto LABEL_41;
      case 4u:
        a1[56] |= 2u;
        uint64_t v25 = *v3;
        unint64_t v26 = *(void *)(a2 + v25);
        if (v26 <= 0xFFFFFFFFFFFFFFF7 && v26 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v26);
          *(void *)(a2 + v25) = v26 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        uint64_t v28 = 16;
LABEL_40:
        *(void *)&a1[v28] = v20;
        goto LABEL_41;
      case 5u:
        unint64_t v27 = objc_alloc_init(BMPBProbabilityPerLabel);
        [a1 addProbabilityVector:v27];
        if (!PBReaderPlaceMark() || (BMPBProbabilityPerLabelReadFrom((uint64_t)v27, a2) & 1) == 0) {
          goto LABEL_43;
        }
        goto LABEL_35;
      case 6u:
        unint64_t v27 = objc_alloc_init(BMPBNumDevicesPerTechnology);
        [a1 addNumDevicesVector:v27];
        if PBReaderPlaceMark() && (BMPBNumDevicesPerTechnologyReadFrom((uint64_t)v27, a2))
        {
LABEL_35:
          PBReaderRecallMark();

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_43:

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_41;
    }
  }
}

uint64_t BMPBNumDevicesPerTechnologyReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 24) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            LODWORD(v21) = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v21) = 0;
        }
LABEL_33:
        *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v21;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBProbabilityPerLabelReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        uint64_t v20 = *v3;
        unint64_t v21 = *(void *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2errstart(20, 0) = v21 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v22 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v18 = PBReaderReadString();
        char v19 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v18;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBMicroLocationTruthTagEventReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 40) |= 1u;
              uint64_t v18 = *v3;
              unint64_t v19 = *(void *)(a2 + v18);
              if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
                *(void *)(a2 + v1_Block_object_dispose(&a9, 8) = v19 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v20 = 0;
              }
              *(void *)(a1 + _Block_object_dispose(&a9, 8) = v20;
              goto LABEL_30;
            case 2u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = 32;
              goto LABEL_27;
            case 3u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = 24;
              goto LABEL_27;
            case 4u:
              uint64_t v21 = PBReaderReadString();
              uint64_t v22 = 16;
LABEL_27:
              char v24 = *(void **)(a1 + v22);
              *(void *)(a1 + v22) = v21;

              goto LABEL_30;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_30:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_18E6E80D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy_(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4errstart(20, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4errstart(20, 0) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
}

uint64_t BMPBRankableSocialHighlightReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 112;
        goto LABEL_82;
      case 2u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 180) |= 0x10u;
        while (2)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              BOOL v15 = v22++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_86:
        uint64_t v59 = 120;
        goto LABEL_95;
      case 3u:
        *(unsigned char *)(a1 + 180) |= 8u;
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v2_Block_object_dispose(&a9, 8) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        uint64_t v62 = 32;
        goto LABEL_109;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 168;
        goto LABEL_82;
      case 5u:
        PBReaderReadString();
        uint64_t v31 = (BMPBSocialHighlightContact *)objc_claimAutoreleasedReturnValue();
        if (v31) {
          [(id)a1 addApplicationIdentifiers:v31];
        }
        goto LABEL_44;
      case 6u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 152;
        goto LABEL_82;
      case 7u:
        uint64_t v31 = objc_alloc_init(BMPBSocialHighlightContact);
        objc_storeStrong((id *)(a1 + 160), v31);
        if (!PBReaderPlaceMark() || (BMPBSocialHighlightContactReadFrom((uint64_t)v31, a2) & 1) == 0) {
          goto LABEL_112;
        }
        goto LABEL_43;
      case 8u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 96;
        goto LABEL_82;
      case 9u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 56;
        goto LABEL_82;
      case 0xAu:
        uint64_t v31 = objc_alloc_init(BMPBSocialHighlightFeature);
        [(id)a1 addCalculatedFeatures:v31];
        if PBReaderPlaceMark() && (BMPBSocialHighlightFeatureReadFrom((uint64_t)v31, a2))
        {
LABEL_43:
          PBReaderRecallMark();
LABEL_44:

LABEL_110:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_112:

        return 0;
      case 0xBu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 72;
        goto LABEL_82;
      case 0xCu:
        *(unsigned char *)(a1 + 180) |= 1u;
        uint64_t v32 = *v3;
        unint64_t v33 = *(void *)(a2 + v32);
        if (v33 <= 0xFFFFFFFFFFFFFFF7 && v33 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v33);
          *(void *)(a2 + v32) = v33 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        uint64_t v62 = 8;
        goto LABEL_109;
      case 0xDu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 104;
        goto LABEL_82;
      case 0xEu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 88;
        goto LABEL_82;
      case 0xFu:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v36 = 0;
        *(unsigned char *)(a1 + 180) |= 0x80u;
        while (2)
        {
          uint64_t v37 = *v3;
          uint64_t v38 = *(void *)(a2 + v37);
          unint64_t v39 = v38 + 1;
          if (v38 == -1 || v39 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
            *(void *)(a2 + v37) = v39;
            v36 |= (unint64_t)(v40 & 0x7F) << v34;
            if (v40 < 0)
            {
              v34 += 7;
              BOOL v15 = v35++ >= 9;
              if (v15)
              {
                uint64_t v36 = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v36 = 0;
        }
LABEL_90:
        BOOL v60 = v36 != 0;
        uint64_t v61 = 177;
        goto LABEL_100;
      case 0x10u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 48;
        goto LABEL_82;
      case 0x11u:
        char v41 = 0;
        unsigned int v42 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 180) |= 0x20u;
        while (2)
        {
          uint64_t v43 = *v3;
          uint64_t v44 = *(void *)(a2 + v43);
          unint64_t v45 = v44 + 1;
          if (v44 == -1 || v45 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v46 = *(unsigned char *)(*(void *)(a2 + *v7) + v44);
            *(void *)(a2 + v43) = v45;
            v23 |= (unint64_t)(v46 & 0x7F) << v41;
            if (v46 < 0)
            {
              v41 += 7;
              BOOL v15 = v42++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_94:
        uint64_t v59 = 136;
LABEL_95:
        *(_DWORD *)(a1 + v59) = v23;
        goto LABEL_110;
      case 0x12u:
        *(unsigned char *)(a1 + 180) |= 4u;
        uint64_t v47 = *v3;
        unint64_t v48 = *(void *)(a2 + v47);
        if (v48 <= 0xFFFFFFFFFFFFFFF7 && v48 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v48);
          *(void *)(a2 + v47) = v48 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        uint64_t v62 = 24;
        goto LABEL_109;
      case 0x13u:
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0;
        *(unsigned char *)(a1 + 180) |= 0x40u;
        while (2)
        {
          uint64_t v52 = *v3;
          uint64_t v53 = *(void *)(a2 + v52);
          unint64_t v54 = v53 + 1;
          if (v53 == -1 || v54 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v55 = *(unsigned char *)(*(void *)(a2 + *v7) + v53);
            *(void *)(a2 + v52) = v54;
            v51 |= (unint64_t)(v55 & 0x7F) << v49;
            if (v55 < 0)
            {
              v49 += 7;
              BOOL v15 = v50++ >= 9;
              if (v15)
              {
                uint64_t v51 = 0;
                goto LABEL_99;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v51 = 0;
        }
LABEL_99:
        BOOL v60 = v51 != 0;
        uint64_t v61 = 176;
LABEL_100:
        *(unsigned char *)(a1 + v61) = v60;
        goto LABEL_110;
      case 0x14u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 128;
        goto LABEL_82;
      case 0x15u:
        *(unsigned char *)(a1 + 180) |= 2u;
        uint64_t v56 = *v3;
        unint64_t v57 = *(void *)(a2 + v56);
        if (v57 <= 0xFFFFFFFFFFFFFFF7 && v57 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v57);
          *(void *)(a2 + v56) = v57 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        uint64_t v62 = 16;
LABEL_109:
        *(void *)(a1 + v62) = v30;
        goto LABEL_110;
      case 0x16u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 144;
        goto LABEL_82;
      case 0x17u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 80;
LABEL_82:
        unint64_t v58 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_110;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_110;
    }
  }
}

uint64_t BMPBGroupActivitySessionEventReadFrom(unsigned char *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          unint64_t v12 = *(void *)(a2 + v11);
          if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v12 + 1;
          v10 |= (unint64_t)(v13 & 0x7F) << v8;
          if ((v13 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          BOOL v14 = v9++ >= 9;
          if (v14)
          {
            unint64_t v10 = 0;
            int v15 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v15) {
          BOOL v16 = 1;
        }
        else {
          BOOL v16 = (v10 & 7) == 4;
        }
        if (!v16)
        {
          switch((v10 >> 3))
          {
            case 1u:
              char v17 = 0;
              unsigned int v18 = 0;
              uint64_t v19 = 0;
              a1[68] |= 1u;
              break;
            case 2u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 56;
              goto LABEL_33;
            case 3u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 16;
              goto LABEL_33;
            case 4u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 8;
              goto LABEL_33;
            case 5u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 40;
              goto LABEL_33;
            case 6u:
              uint64_t v24 = PBReaderReadString();
              uint64_t v25 = 24;
LABEL_33:
              unint64_t v26 = *(void **)&a1[v25];
              *(void *)&a1[v25] = v24;

              goto LABEL_43;
            case 7u:
              char v27 = PBReaderReadString();
              if (v27) {
                [a1 addParticipantHandles:v27];
              }
              goto LABEL_38;
            case 8u:
              char v27 = PBReaderReadString();
              if (v27) {
                [a1 addMemberHandles:v27];
              }
LABEL_38:

              goto LABEL_43;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_43:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v2errstart(20, 0) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_40;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_42;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_40:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_42:
          a1[64] = v19 != 0;
          goto LABEL_43;
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_18E6EF974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  objc_end_catch();
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E6EF97C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long buf,int a22,__int16 a23,__int16 a24,id a25)
{
  if (a2)
  {
    if (a2 != 2)
    {
      objc_begin_catch(a1);
      JUMPOUT(0x18E6EF8E0);
    }
    id v26 = objc_begin_catch(a1);
    char v27 = __biome_log_for_category();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_FAULT))
    {
      uint64_t v28 = [*(id *)(v25 + 8) identifier];
      LODWORD(buf) = 138412802;
      *(void *)((char *)&buf + 4) = v28;
      WORD6(buf) = 2112;
      a24 = 2112;
      a25 = v26;
      _os_log_fault_impl(&dword_18E67D000, v27, OS_LOG_TYPE_FAULT, "Encountered exception while pruning '%@' for policy '%@', %@", (uint8_t *)&buf, 0x20u);
    }
    objc_exception_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_18E6EFA3C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    objc_end_catch();
    JUMPOUT(0x18E6EF990);
  }
  _Unwind_Resume(a1);
}

void sub_18E6EFA64()
{
  if (v0) {
    JUMPOUT(0x18E6EFA6CLL);
  }
  JUMPOUT(0x18E6EFA70);
}

void sub_18E6EFA80(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x18E6EFA8CLL);
}

uint64_t BMPBSiriDictationEventReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 16;
      }
      else
      {
        if (v18 != 2)
        {
          if (v18 == 1)
          {
            *(unsigned char *)(a1 + 32) |= 1u;
            uint64_t v19 = *v3;
            unint64_t v20 = *(void *)(a2 + v19);
            if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
            {
              uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
              *(void *)(a2 + v19) = v20 + 8;
            }
            else
            {
              *(unsigned char *)(a2 + *v5) = 1;
              uint64_t v21 = 0;
            }
            *(void *)(a1 + _Block_object_dispose(&a9, 8) = v21;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 24;
      }
      uint64_t v24 = *(void **)(a1 + v23);
      *(void *)(a1 + v23) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBRemindersContentEventReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 80;
          goto LABEL_50;
        case 2u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 40;
          goto LABEL_50;
        case 3u:
          *(unsigned char *)(a1 + 92) |= 1u;
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v43 = 8;
          goto LABEL_65;
        case 4u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 72;
          goto LABEL_50;
        case 5u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 48;
          goto LABEL_50;
        case 6u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 92) |= 0x10u;
          while (2)
          {
            uint64_t v27 = *v3;
            uint64_t v28 = *(void *)(a2 + v27);
            unint64_t v29 = v28 + 1;
            if (v28 == -1 || v29 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                BOOL v15 = v25++ >= 9;
                if (v15)
                {
                  uint64_t v26 = 0;
                  goto LABEL_54;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_54:
          *(unsigned char *)(a1 + 8_Block_object_dispose(&a9, 8) = v26 != 0;
          continue;
        case 7u:
          *(unsigned char *)(a1 + 92) |= 2u;
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFF7 && v32 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v43 = 16;
          goto LABEL_65;
        case 8u:
          *(unsigned char *)(a1 + 92) |= 4u;
          uint64_t v33 = *v3;
          unint64_t v34 = *(void *)(a2 + v33);
          if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v34);
            *(void *)(a2 + v33) = v34 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v43 = 24;
LABEL_65:
          *(void *)(a1 + v43) = v23;
          continue;
        case 9u:
          char v35 = 0;
          unsigned int v36 = 0;
          uint64_t v37 = 0;
          *(unsigned char *)(a1 + 92) |= 8u;
          break;
        case 0xAu:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 32;
          goto LABEL_50;
        case 0xBu:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 56;
LABEL_50:
          unsigned int v42 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v38 = *v3;
        uint64_t v39 = *(void *)(a2 + v38);
        unint64_t v40 = v39 + 1;
        if (v39 == -1 || v40 > *(void *)(a2 + *v4)) {
          break;
        }
        char v41 = *(unsigned char *)(*(void *)(a2 + *v7) + v39);
        *(void *)(a2 + v3_Block_object_dispose(&a9, 8) = v40;
        v37 |= (unint64_t)(v41 & 0x7F) << v35;
        if ((v41 & 0x80) == 0) {
          goto LABEL_56;
        }
        v35 += 7;
        BOOL v15 = v36++ >= 9;
        if (v15)
        {
          LODWORD(v37) = 0;
          goto LABEL_58;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_56:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v37) = 0;
      }
LABEL_58:
      *(_DWORD *)(a1 + 64) = -(v37 & 1) ^ ((int)v37 >> 1);
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4errstart(20, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4errstart(20, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

uint64_t BMPBSiriInferredHelpfulnessEventReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              *(unsigned char *)(a1 + 48) |= 1u;
              uint64_t v18 = *v3;
              unint64_t v19 = *(void *)(a2 + v18);
              if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
                *(void *)(a2 + v1_Block_object_dispose(&a9, 8) = v19 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v20 = 0;
              }
              uint64_t v29 = 8;
              goto LABEL_39;
            case 2u:
              *(unsigned char *)(a1 + 48) |= 2u;
              uint64_t v27 = *v3;
              unint64_t v28 = *(void *)(a2 + v27);
              if (v28 <= 0xFFFFFFFFFFFFFFF7 && v28 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v28);
                *(void *)(a2 + v27) = v28 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v20 = 0;
              }
              uint64_t v29 = 16;
              goto LABEL_39;
            case 3u:
              *(unsigned char *)(a1 + 48) |= 4u;
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v22);
                *(void *)(a2 + v21) = v22 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v20 = 0;
              }
              uint64_t v29 = 24;
LABEL_39:
              *(void *)(a1 + v29) = v20;
              goto LABEL_40;
            case 4u:
              uint64_t v23 = PBReaderReadString();
              uint64_t v24 = 40;
              goto LABEL_27;
            case 5u:
              uint64_t v23 = PBReaderReadString();
              uint64_t v24 = 32;
LABEL_27:
              unsigned int v25 = *(void **)(a1 + v24);
              *(void *)(a1 + v24) = v23;

              goto LABEL_40;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_40:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBTextInputSessionEventReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 44) |= 1u;
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
            *(void *)(a2 + v1_Block_object_dispose(&a9, 8) = v19 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v34 = 8;
          goto LABEL_45;
        case 2u:
          *(unsigned char *)(a1 + 44) |= 2u;
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v34 = 16;
LABEL_45:
          *(void *)(a1 + v34) = v20;
          continue;
        case 3u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 24;
          goto LABEL_36;
        case 4u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 44) |= 4u;
          break;
        case 5u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 32;
LABEL_36:
          uint64_t v33 = *(void **)(a1 + v25);
          *(void *)(a1 + v25) = v24;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v29 = *v3;
        uint64_t v30 = *(void *)(a2 + v29);
        unint64_t v31 = v30 + 1;
        if (v30 == -1 || v31 > *(void *)(a2 + *v4)) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
        *(void *)(a2 + v29) = v31;
        v28 |= (unint64_t)(v32 & 0x7F) << v26;
        if ((v32 & 0x80) == 0) {
          goto LABEL_38;
        }
        v26 += 7;
        BOOL v15 = v27++ >= 9;
        if (v15)
        {
          LODWORD(v2_Block_object_dispose(&a9, 8) = 0;
          goto LABEL_40;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_38:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v2_Block_object_dispose(&a9, 8) = 0;
      }
LABEL_40:
      *(_DWORD *)(a1 + 4errstart(20, 0) = v28;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBInferredModeEventReadFrom(void *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = &OBJC_IVAR___BMPBRankableSocialHighlight__groupPhotoPathDigest;
    char v8 = &OBJC_IVAR___BMPBRankableSocialHighlight__groupPhotoPathDigest;
    unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
    unint64_t v10 = &OBJC_IVAR___BMPBRankableSocialHighlight__groupPhotoPathDigest;
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v11 = 0;
      unsigned int v12 = 0;
      unint64_t v13 = 0;
      while (1)
      {
        uint64_t v14 = *v3;
        uint64_t v15 = *(void *)(a2 + v14);
        unint64_t v16 = v15 + 1;
        if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
          break;
        }
        char v17 = *(unsigned char *)(*(void *)(a2 + *v9) + v15);
        *(void *)(a2 + v14) = v16;
        v13 |= (unint64_t)(v17 & 0x7F) << v11;
        if ((v17 & 0x80) == 0) {
          goto LABEL_12;
        }
        v11 += 7;
        BOOL v18 = v12++ >= 9;
        if (v18)
        {
          unint64_t v13 = 0;
          int v19 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v19 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v13 = 0;
      }
LABEL_14:
      if (v19 || (v13 & 7) == 4) {
        break;
      }
      switch((v13 >> 3))
      {
        case 1u:
          *((unsigned char *)a1 + v7[88]) |= 1u;
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v22);
            *(void *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v78 = v8[89];
          goto LABEL_108;
        case 2u:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = v10[90];
          goto LABEL_77;
        case 3u:
          char v27 = 0;
          unsigned int v28 = 0;
          uint64_t v29 = 0;
          *((unsigned char *)a1 + v7[88]) |= 0x10u;
          while (2)
          {
            uint64_t v30 = *v3;
            uint64_t v31 = *(void *)(a2 + v30);
            unint64_t v32 = v31 + 1;
            if (v31 == -1 || v32 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v33 = *(unsigned char *)(*(void *)(a2 + *v9) + v31);
              *(void *)(a2 + v3errstart(20, 0) = v32;
              v29 |= (unint64_t)(v33 & 0x7F) << v27;
              if (v33 < 0)
              {
                v27 += 7;
                BOOL v18 = v28++ >= 9;
                if (v18)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_81;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_81:
          uint64_t v75 = 44;
          goto LABEL_98;
        case 4u:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = 56;
          goto LABEL_77;
        case 5u:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v36 = 0;
          *((unsigned char *)a1 + v7[88]) |= 0x20u;
          while (2)
          {
            uint64_t v37 = *v3;
            uint64_t v38 = *(void *)(a2 + v37);
            unint64_t v39 = v38 + 1;
            if (v38 == -1 || v39 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v40 = *(unsigned char *)(*(void *)(a2 + *v9) + v38);
              *(void *)(a2 + v37) = v39;
              v36 |= (unint64_t)(v40 & 0x7F) << v34;
              if (v40 < 0)
              {
                v34 += 7;
                BOOL v18 = v35++ >= 9;
                if (v18)
                {
                  uint64_t v36 = 0;
                  goto LABEL_85;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v36 = 0;
          }
LABEL_85:
          BOOL v76 = v36 != 0;
          uint64_t v77 = 88;
          goto LABEL_103;
        case 6u:
          char v41 = 0;
          unsigned int v42 = 0;
          uint64_t v43 = 0;
          *((unsigned char *)a1 + v7[88]) |= 0x40u;
          while (2)
          {
            uint64_t v44 = *v3;
            uint64_t v45 = *(void *)(a2 + v44);
            unint64_t v46 = v45 + 1;
            if (v45 == -1 || v46 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v47 = *(unsigned char *)(*(void *)(a2 + *v9) + v45);
              *(void *)(a2 + v44) = v46;
              v43 |= (unint64_t)(v47 & 0x7F) << v41;
              if (v47 < 0)
              {
                v41 += 7;
                BOOL v18 = v42++ >= 9;
                if (v18)
                {
                  uint64_t v43 = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v43 = 0;
          }
LABEL_89:
          BOOL v76 = v43 != 0;
          uint64_t v77 = 89;
          goto LABEL_103;
        case 7u:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = 80;
          goto LABEL_77;
        case 8u:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = 48;
          goto LABEL_77;
        case 9u:
          char v48 = 0;
          unsigned int v49 = 0;
          uint64_t v50 = 0;
          *((unsigned char *)a1 + v7[88]) |= 4u;
          while (2)
          {
            uint64_t v51 = *v3;
            uint64_t v52 = *(void *)(a2 + v51);
            unint64_t v53 = v52 + 1;
            if (v52 == -1 || v53 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v54 = *(unsigned char *)(*(void *)(a2 + *v9) + v52);
              *(void *)(a2 + v51) = v53;
              v50 |= (unint64_t)(v54 & 0x7F) << v48;
              if (v54 < 0)
              {
                v48 += 7;
                BOOL v18 = v49++ >= 9;
                if (v18)
                {
                  uint64_t v50 = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v50 = 0;
          }
LABEL_93:
          a1[3] = v50;
          continue;
        case 0xAu:
          *((unsigned char *)a1 + v7[88]) |= 2u;
          uint64_t v55 = *v3;
          unint64_t v56 = *(void *)(a2 + v55);
          if (v56 <= 0xFFFFFFFFFFFFFFF7 && v56 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v56);
            *(void *)(a2 + v55) = v56 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          uint64_t v78 = 16;
LABEL_108:
          *(void *)((char *)a1 + v7_Block_object_dispose(&a9, 8) = v23;
          continue;
        case 0xBu:
          unint64_t v57 = v7;
          unint64_t v58 = v10;
          uint64_t v59 = v8;
          BOOL v60 = PBReaderReadData();
          if (v60) {
            [a1 addSerializedTriggers:v60];
          }

          char v8 = v59;
          unint64_t v10 = v58;
          uint64_t v7 = v57;
          continue;
        case 0xCu:
          char v61 = 0;
          unsigned int v62 = 0;
          uint64_t v29 = 0;
          *((unsigned char *)a1 + v7[88]) |= 8u;
          while (2)
          {
            uint64_t v63 = *v3;
            uint64_t v64 = *(void *)(a2 + v63);
            unint64_t v65 = v64 + 1;
            if (v64 == -1 || v65 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v66 = *(unsigned char *)(*(void *)(a2 + *v9) + v64);
              *(void *)(a2 + v63) = v65;
              v29 |= (unint64_t)(v66 & 0x7F) << v61;
              if (v66 < 0)
              {
                v61 += 7;
                BOOL v18 = v62++ >= 9;
                if (v18)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v29) = 0;
          }
LABEL_97:
          uint64_t v75 = 40;
LABEL_98:
          *(_DWORD *)((char *)a1 + v75) = v29;
          continue;
        case 0xDu:
          char v67 = 0;
          unsigned int v68 = 0;
          uint64_t v69 = 0;
          *((unsigned char *)a1 + v7[88]) |= 0x80u;
          break;
        case 0xEu:
          uint64_t v25 = PBReaderReadString();
          uint64_t v26 = 72;
LABEL_77:
          unsigned int v74 = *(void **)((char *)a1 + v26);
          *(void *)((char *)a1 + v26) = v25;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v70 = *v3;
        uint64_t v71 = *(void *)(a2 + v70);
        unint64_t v72 = v71 + 1;
        if (v71 == -1 || v72 > *(void *)(a2 + *v4)) {
          break;
        }
        char v73 = *(unsigned char *)(*(void *)(a2 + *v9) + v71);
        *(void *)(a2 + v7errstart(20, 0) = v72;
        v69 |= (unint64_t)(v73 & 0x7F) << v67;
        if ((v73 & 0x80) == 0) {
          goto LABEL_100;
        }
        v67 += 7;
        BOOL v18 = v68++ >= 9;
        if (v18)
        {
          uint64_t v69 = 0;
          goto LABEL_102;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_100:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v69 = 0;
      }
LABEL_102:
      BOOL v76 = v69 != 0;
      uint64_t v77 = 90;
LABEL_103:
      *((unsigned char *)a1 + v77) = v76;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL BMPBPersonEntityReadFrom(char *a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(BMPBPersonName);
        [a1 addNames:v17];
        if (PBReaderPlaceMark() && BMPBPersonNameReadFrom((uint64_t)v17, a2)) {
          goto LABEL_38;
        }
        goto LABEL_43;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 32;
        goto LABEL_26;
      case 3u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
LABEL_26:
        char v17 = *(BMPBPersonName **)&a1[v19];
        *(void *)&a1[v19] = v18;
        goto LABEL_39;
      case 4u:
        PBReaderReadString();
        char v17 = (BMPBPersonName *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          [a1 addEmailAddresses:v17];
        }
        goto LABEL_39;
      case 5u:
        PBReaderReadString();
        char v17 = (BMPBPersonName *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          [a1 addAddresses:v17];
        }
        goto LABEL_39;
      case 6u:
        PBReaderReadString();
        char v17 = (BMPBPersonName *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          [a1 addPhoneNumbers:v17];
        }
        goto LABEL_39;
      case 7u:
        char v17 = objc_alloc_init(BMPBSocialMediaHandle);
        [a1 addSocialMediaHandles:v17];
        if (!PBReaderPlaceMark() || !BMPBSocialMediaHandleReadFrom((uint64_t)v17, a2)) {
          goto LABEL_43;
        }
        goto LABEL_38;
      case 8u:
        char v17 = objc_alloc_init(BMPBAttributeEntry);
        [a1 addAttributes:v17];
        if (PBReaderPlaceMark() && BMPBAttributeEntryReadFrom((uint64_t)v17, a2))
        {
LABEL_38:
          PBReaderRecallMark();
LABEL_39:

LABEL_40:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_43:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_40;
    }
  }
}

uint64_t BMPBDKEventReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadData();
        uint64_t v18 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBNewsArticleViewEventReadFrom(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 72;
              goto LABEL_32;
            case 2u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 32;
              goto LABEL_32;
            case 3u:
              *(unsigned char *)(a1 + 80) |= 1u;
              uint64_t v20 = *v3;
              unint64_t v21 = *(void *)(a2 + v20);
              if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
                *(void *)(a2 + v2errstart(20, 0) = v21 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v22 = 0;
              }
              *(void *)(a1 + _Block_object_dispose(&a9, 8) = v22;
              goto LABEL_33;
            case 4u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 64;
              goto LABEL_32;
            case 5u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 16;
              goto LABEL_32;
            case 6u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 56;
              goto LABEL_32;
            case 7u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 48;
              goto LABEL_32;
            case 8u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 24;
              goto LABEL_32;
            case 9u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 40;
LABEL_32:
              uint64_t v24 = *(void **)(a1 + v19);
              *(void *)(a1 + v19) = v18;

              goto LABEL_33;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_33:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_18E702F60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void sub_18E703B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
}

void biome_each_vtab_destroy(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;

  sqlite3_free(a1);
}

id BMFieldPathFromKeyPath(void *a1, void *a2, void *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v31 = a3;
  uint64_t v6 = [a1 componentsSeparatedByString:@"."];
  uint64_t v7 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v6, "count"));
  id v8 = v5;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  id v9 = v6;
  uint64_t v10 = (uint64_t)v8;
  uint64_t v29 = [v9 countByEnumeratingWithState:&v37 objects:v42 count:16];
  if (v29)
  {
    uint64_t v30 = *(void *)v38;
    uint64_t v10 = (uint64_t)v8;
    id v27 = v8;
    obunint64_t j = v9;
    while (2)
    {
      uint64_t v11 = 0;
      uint64_t v12 = (void *)v10;
      do
      {
        if (*(void *)v38 != v30) {
          objc_enumerationMutation(obj);
        }
        if (!v12) {
          goto LABEL_26;
        }
        uint64_t v13 = *(void *)(*((void *)&v37 + 1) + 8 * v11);
        char v14 = [v31 objectForKeyedSubscript:v12];
        if (!v14) {
          goto LABEL_26;
        }
        unint64_t v32 = v12;
        int v15 = v7;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        id v16 = v14;
        uint64_t v17 = [v16 countByEnumeratingWithState:&v33 objects:v41 count:16];
        if (!v17)
        {
LABEL_24:

LABEL_25:
          uint64_t v7 = v15;
          uint64_t v12 = v32;
LABEL_26:
          id v9 = obj;

          id v25 = 0;
          id v8 = v27;
          goto LABEL_27;
        }
        uint64_t v18 = v17;
        uint64_t v19 = *(void *)v34;
LABEL_10:
        uint64_t v20 = 0;
        while (1)
        {
          if (*(void *)v34 != v19) {
            objc_enumerationMutation(v16);
          }
          unint64_t v21 = *(void **)(*((void *)&v33 + 1) + 8 * v20);
          uint64_t v22 = objc_msgSend(v21, "name", v27);
          char v23 = [v22 isEqualToString:v13];

          if (v23) {
            break;
          }
          if (v18 == ++v20)
          {
            uint64_t v18 = [v16 countByEnumeratingWithState:&v33 objects:v41 count:16];
            if (v18) {
              goto LABEL_10;
            }
            goto LABEL_24;
          }
        }
        id v24 = v21;

        if (!v24) {
          goto LABEL_25;
        }
        uint64_t v7 = v15;
        [v15 addObject:v24];
        if ([v24 subMessageClass])
        {
          uint64_t v10 = NSStringFromClass((Class)[v24 subMessageClass]);
        }
        else
        {
          uint64_t v10 = 0;
        }

        ++v11;
        uint64_t v12 = (void *)v10;
      }
      while (v11 != v29);
      id v9 = obj;
      id v8 = v27;
      uint64_t v29 = [obj countByEnumeratingWithState:&v37 objects:v42 count:16];
      if (v29) {
        continue;
      }
      break;
    }
  }

  id v25 = v7;
  uint64_t v12 = (void *)v10;
LABEL_27:

  return v25;
}

uint64_t biome_each_connect(sqlite3 *a1, id *a2, uint64_t a3, uint64_t a4, id **a5)
{
  uint64_t result = sqlite3_declare_vtab(a1, "CREATE TABLE biome_each(value ANY, eventBodyData HIDDEN, eventClass TEXT HIDDEN, keyPath TEXT HIDDEN)");
  if (!result)
  {
    id v8 = (id *)bm_sqlite3_malloc(32);
    *a5 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 3, *a2);
      return 0;
    }
    else
    {
      return 7;
    }
  }
  return result;
}

uint64_t biome_each_bestindex(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v4 = (unsigned char *)(*((void *)a2 + 1) + 5);
  uint64_t v5 = 8 * v2;
  while (*v4)
  {
    if (*(v4 - 1) != 2) {
      biome_each_bestindex_cold_1();
    }
    int v6 = *(_DWORD *)(v4 - 5);
    if ((v6 - 1) <= 2) {
      *(_DWORD *)(*((void *)a2 + 4) + v3) = v6;
    }
    v3 += 8;
    v4 += 12;
    if (v5 == v3) {
      return 0;
    }
  }
  return 19;
}

uint64_t biome_each_disconnect(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;

  sqlite3_free(a1);
  return 0;
}

uint64_t biome_each_open(uint64_t a1, id **a2)
{
  uint64_t v4 = (id *)bm_sqlite3_malloc(64);
  if (!v4) {
    return 7;
  }
  uint64_t v5 = v4;
  objc_storeStrong(v4 + 5, *(id *)(a1 + 24));
  uint64_t result = 0;
  *a2 = v5;
  return result;
}

uint64_t biome_each_close(void *a1)
{
  uint64_t v2 = (void *)a1[2];
  a1[2] = 0;

  uint64_t v3 = (void *)a1[3];
  a1[3] = 0;

  uint64_t v4 = (void *)a1[4];
  a1[4] = 0;

  uint64_t v5 = (void *)a1[5];
  a1[5] = 0;

  int v6 = (void *)a1[6];
  a1[6] = 0;

  uint64_t v7 = (void *)a1[7];
  a1[7] = 0;

  sqlite3_free(a1);
  return 0;
}

uint64_t biome_each_filter(void *a1, uint64_t a2, uint64_t a3, int a4, sqlite3_value **a5)
{
  v44[1] = *(id *)MEMORY[0x1E4F143B8];
  if (a4 != 3) {
    biome_each_filter_cold_1();
  }
  a1[1] = 0;
  uint64_t v7 = (void *)MEMORY[0x192FB0D60]();
  id v8 = (void *)MEMORY[0x1E4F1C9B8];
  id v9 = sqlite3_value_blob(*a5);
  uint64_t v10 = [v8 dataWithBytes:v9 length:sqlite3_value_bytes(*a5)];
  uint64_t v11 = (void *)a1[2];
  a1[2] = v10;

  if (sqlite3_value_type(a5[1]) == 5)
  {
    uint64_t v12 = sqlite3_mprintf("Error calling biome_each(): eventClassName is null");
LABEL_6:
    *(void *)(*a1 + 16) = v12;
    uint64_t v15 = 1;
    goto LABEL_21;
  }
  uint64_t v13 = [NSString stringWithUTF8String:sqlite3_value_text(a5[1])];
  char v14 = (void *)a1[3];
  a1[3] = v13;

  if (sqlite3_value_type(a5[2]) == 5)
  {
    uint64_t v12 = sqlite3_mprintf("Error calling biome_each(): key path is null");
    goto LABEL_6;
  }
  uint64_t v16 = [NSString stringWithUTF8String:sqlite3_value_text(a5[2])];
  uint64_t v17 = (void *)a1[4];
  a1[4] = v16;

  uint64_t v18 = (void *)a1[2];
  uint64_t v19 = (void *)a1[3];
  uint64_t v20 = (void *)a1[4];
  unint64_t v21 = (void *)a1[5];
  id v42 = 0;
  id v22 = v18;
  id v23 = v19;
  id v24 = v20;
  id v25 = BMFieldPathFromKeyPath(v24, v23, v21);
  char v41 = v22;
  if (v25)
  {
    id v40 = v23;
    id v26 = v22;
    if ([v25 count] == 1)
    {
LABEL_12:
      uint64_t v29 = objc_msgSend(v25, "objectAtIndexedSubscript:", objc_msgSend(v25, "count") - 1);
      uint64_t v33 = +[BMPoirotSchematizerShim searchValuesIn:withFieldNumber:typeRawValue:error:](_TtC12BiomeStreams23BMPoirotSchematizerShim, "searchValuesIn:withFieldNumber:typeRawValue:error:", v26, [v29 number], objc_msgSend(v29, "type"), &v42);
    }
    else
    {
      uint64_t v27 = 0;
      while (1)
      {
        unsigned int v28 = v26;
        uint64_t v29 = [v25 objectAtIndexedSubscript:v27];
        uint64_t v30 = [v29 number];
        uint64_t v31 = [v29 type];
        v44[0] = 0;
        id v26 = +[BMPoirotSchematizerShim searchValueIn:v26 withFieldNumber:v30 typeRawValue:v31 error:v44];
        id v32 = v44[0];

        if (v32) {
          break;
        }

        if ([v25 count] - 1 <= (unint64_t)++v27) {
          goto LABEL_12;
        }
      }
      id v42 = v32;

      uint64_t v33 = 0;
    }
    long long v35 = v40;
  }
  else
  {
    long long v34 = (void *)MEMORY[0x1E4F28C58];
    uint64_t v43 = *MEMORY[0x1E4F28568];
    long long v35 = v23;
    id v26 = (id)objc_msgSend([NSString alloc], "initWithFormat:", @"Field path is not valid: %@; eventClass: %@",
                v24,
                v23);
    v44[0] = v26;
    uint64_t v29 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v44 forKeys:&v43 count:1];
    [v34 errorWithDomain:@"BMSQLDatabaseErrorDomain" code:0 userInfo:v29];
    uint64_t v33 = 0;
    id v42 = (id)objc_claimAutoreleasedReturnValue();
  }

  id v36 = v42;
  long long v37 = (void *)a1[6];
  a1[6] = v33;

  if (!a1[6] || v36)
  {
    id v38 = [v36 localizedDescription];
    *(void *)(*a1 + 16) = sqlite3_mprintf("Error calling biome_each(): %s", (const char *)[v38 UTF8String]);

    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = biome_each_next((uint64_t)a1);
  }

LABEL_21:
  return v15;
}

uint64_t biome_each_next(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x192FB0D60]();
  uint64_t v3 = [*(id *)(a1 + 48) nextObject];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    id v5 = [v3 localizedDescription];
    *(void *)(*(void *)a1 + 16) = sqlite3_mprintf("Error enumerating biome_each() result: %s", (const char *)[v5 UTF8String]);
  }
  else
  {
    objc_storeStrong((id *)(a1 + 56), v3);
    ++*(void *)(a1 + 8);
  }

  return isKindOfClass & 1;
}

BOOL biome_each_eof(uint64_t a1)
{
  return *(void *)(a1 + 56) == 0;
}

uint64_t biome_each_column(uint64_t a1, sqlite3_context *a2, int a3)
{
  switch(a3)
  {
    case 0:
      BMSqliteResultFromObjcValue(a2, *(void **)(a1 + 56));
      return 0;
    case 1:
      sqlite3_result_blob(a2, (const void *)[*(id *)(a1 + 16) bytes], objc_msgSend(*(id *)(a1 + 16), "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
      return 0;
    case 2:
      uint64_t v3 = *(void **)(a1 + 24);
      goto LABEL_6;
    case 3:
      uint64_t v3 = *(void **)(a1 + 32);
LABEL_6:
      sqlite3_result_text(a2, (const char *)[v3 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
      return 0;
    default:
      biome_each_column_cold_1();
  }
}

uint64_t biome_each_rowid(uint64_t a1, void *a2)
{
  *a2 = *(void *)(a1 + 8);
  return 0;
}

BOOL BMPBMailContentHeaderEntryReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        uint64_t v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&a9, 8) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBParsecSearchEntityReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v18;

        goto LABEL_41;
      case 2u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 40) |= 1u;
        while (2)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              BOOL v15 = v22++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_38;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_38:
        *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v23;
        goto LABEL_41;
      case 3u:
        *(unsigned char *)(a1 + 40) |= 2u;
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(void *)(a2 + *v4))
        {
          int v30 = *(_DWORD *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v2_Block_object_dispose(&a9, 8) = v29 + 4;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          int v30 = 0;
        }
        *(_DWORD *)(a1 + 24) = v30;
        goto LABEL_41;
      case 4u:
        uint64_t v31 = objc_alloc_init(BMPBParsecSearchTopic);
        [(id)a1 addTopics:v31];
        if PBReaderPlaceMark() && (BMPBParsecSearchTopicReadFrom((uint64_t)v31, a2))
        {
          PBReaderRecallMark();

LABEL_41:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_41;
    }
  }
}

uint64_t BMPBEntityReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 2)
      {
        [(id)a1 clearOneofValuesForEntityType];
        *(unsigned char *)(a1 + 32) |= 1u;
        *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = 2;
        uint64_t v24 = objc_alloc_init(BMPBTopicEntity);
        objc_storeStrong((id *)(a1 + 24), v24);
        if (!PBReaderPlaceMark() || !BMPBTopicEntityReadFrom((char *)v24, a2))
        {
LABEL_39:

          return 0;
        }
      }
      else
      {
        if (v17 != 1)
        {
          if (v17)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          else
          {
            unsigned int v18 = 0;
            while (1)
            {
              uint64_t v19 = *v3;
              unint64_t v20 = *(void *)(a2 + v19);
              if (v20 == -1 || v20 >= *(void *)(a2 + *v4)) {
                break;
              }
              unint64_t v21 = v20 + 1;
              int v22 = *(char *)(*(void *)(a2 + *v7) + v20);
              *(void *)(a2 + v19) = v21;
              if (v22 < 0 && v18++ <= 8) {
                continue;
              }
              goto LABEL_37;
            }
            *(unsigned char *)(a2 + *v5) = 1;
          }
          continue;
        }
        [(id)a1 clearOneofValuesForEntityType];
        *(unsigned char *)(a1 + 32) |= 1u;
        *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = 1;
        uint64_t v24 = objc_alloc_init(BMPBPersonEntity);
        objc_storeStrong((id *)(a1 + 16), v24);
        if (!PBReaderPlaceMark() || !BMPBPersonEntityReadFrom((char *)v24, a2)) {
          goto LABEL_39;
        }
      }
      PBReaderRecallMark();

LABEL_37:
      ;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id get_DKSystemEventStreamsClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKSystemEventStreamsClass_softClass;
  uint64_t v7 = get_DKSystemEventStreamsClass_softClass;
  if (!get_DKSystemEventStreamsClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKSystemEventStreamsClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKSystemEventStreamsClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E70D748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_CDContextQueriesClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_CDContextQueriesClass_softClass;
  uint64_t v7 = get_CDContextQueriesClass_softClass;
  if (!get_CDContextQueriesClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_CDContextQueriesClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_CDContextQueriesClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E70D82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E70E060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

id get_DKEventClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKEventClass_softClass;
  uint64_t v7 = get_DKEventClass_softClass;
  if (!get_DKEventClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKEventClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKEventClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E70E14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKDigitalHealthMetadataKeyClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKDigitalHealthMetadataKeyClass_softClass;
  uint64_t v7 = get_DKDigitalHealthMetadataKeyClass_softClass;
  if (!get_DKDigitalHealthMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKDigitalHealthMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKDigitalHealthMetadataKeyClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E70E230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CoreDuetLibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!CoreDuetLibraryCore_frameworkLibrary)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __CoreDuetLibraryCore_block_invoke;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E55D6DC8;
    uint64_t v2 = 0;
    CoreDuetLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  if (!CoreDuetLibraryCore_frameworkLibrary) {
    CoreDuetLibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __CoreDuetLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreDuetLibraryCore_frameworkLibrary = result;
  return result;
}

uint64_t __CoreDuetContextLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  CoreDuetContextLibraryCore_frameworkLibrary = result;
  return result;
}

BOOL BMPBMailContentEventFilteringSubsetReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 28) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
        goto LABEL_24;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
LABEL_24:
        unint64_t v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadString();
    uint64_t v19 = 16;
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBMessagesContentEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 192;
        goto LABEL_130;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 104;
        goto LABEL_130;
      case 3u:
        *(_WORD *)(a1 + 220) |= 1u;
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v23;
        goto LABEL_176;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 88;
        goto LABEL_130;
      case 5u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 64;
        goto LABEL_130;
      case 6u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 160;
        goto LABEL_130;
      case 7u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 168;
        goto LABEL_130;
      case 8u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 152;
        goto LABEL_130;
      case 9u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 56;
        goto LABEL_130;
      case 0xAu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 72;
        goto LABEL_130;
      case 0xBu:
        uint64_t v24 = objc_alloc_init(BMPBNamedHandle);
        objc_storeStrong((id *)(a1 + 112), v24);
        goto LABEL_35;
      case 0xCu:
        uint64_t v24 = objc_alloc_init(BMPBNamedHandle);
        [(id)a1 addToHandles:v24];
LABEL_35:
        if (!PBReaderPlaceMark() || !BMPBNamedHandleReadFrom((uint64_t)v24, a2)) {
          goto LABEL_181;
        }
        goto LABEL_44;
      case 0xDu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 32;
        goto LABEL_130;
      case 0xEu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 40;
        goto LABEL_130;
      case 0xFu:
        PBReaderReadString();
        uint64_t v24 = (BMPBNamedHandle *)objc_claimAutoreleasedReturnValue();
        if (v24) {
          [(id)a1 addAccountHandles:v24];
        }
        goto LABEL_45;
      case 0x10u:
        uint64_t v24 = objc_alloc_init(BMPBContentAttachment);
        objc_storeStrong((id *)(a1 + 48), v24);
        if (PBReaderPlaceMark() && BMPBContentAttachmentReadFrom((uint64_t)v24, a2))
        {
LABEL_44:
          PBReaderRecallMark();
LABEL_45:

LABEL_176:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_181:

        return 0;
      case 0x11u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 200;
        goto LABEL_130;
      case 0x12u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 80;
        goto LABEL_130;
      case 0x13u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 144;
        goto LABEL_130;
      case 0x14u:
        char v25 = 0;
        unsigned int v26 = 0;
        uint64_t v27 = 0;
        *(_WORD *)(a1 + 220) |= 0x100u;
        while (2)
        {
          uint64_t v28 = *v3;
          uint64_t v29 = *(void *)(a2 + v28);
          unint64_t v30 = v29 + 1;
          if (v29 == -1 || v30 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v31 = *(unsigned char *)(*(void *)(a2 + *v7) + v29);
            *(void *)(a2 + v2_Block_object_dispose(&a9, 8) = v30;
            v27 |= (unint64_t)(v31 & 0x7F) << v25;
            if (v31 < 0)
            {
              v25 += 7;
              BOOL v15 = v26++ >= 9;
              if (v15)
              {
                uint64_t v27 = 0;
                goto LABEL_134;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v27 = 0;
        }
LABEL_134:
        BOOL v103 = v27 != 0;
        uint64_t v104 = 213;
        goto LABEL_175;
      case 0x15u:
        char v32 = 0;
        unsigned int v33 = 0;
        uint64_t v34 = 0;
        *(_WORD *)(a1 + 220) |= 0x800u;
        while (2)
        {
          uint64_t v35 = *v3;
          uint64_t v36 = *(void *)(a2 + v35);
          unint64_t v37 = v36 + 1;
          if (v36 == -1 || v37 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v38 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
            *(void *)(a2 + v35) = v37;
            v34 |= (unint64_t)(v38 & 0x7F) << v32;
            if (v38 < 0)
            {
              v32 += 7;
              BOOL v15 = v33++ >= 9;
              if (v15)
              {
                uint64_t v34 = 0;
                goto LABEL_138;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v34 = 0;
        }
LABEL_138:
        BOOL v103 = v34 != 0;
        uint64_t v104 = 216;
        goto LABEL_175;
      case 0x16u:
        char v39 = 0;
        unsigned int v40 = 0;
        uint64_t v41 = 0;
        *(_WORD *)(a1 + 220) |= 0x10u;
        while (2)
        {
          uint64_t v42 = *v3;
          uint64_t v43 = *(void *)(a2 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
            *(void *)(a2 + v42) = v44;
            v41 |= (unint64_t)(v45 & 0x7F) << v39;
            if (v45 < 0)
            {
              v39 += 7;
              BOOL v15 = v40++ >= 9;
              if (v15)
              {
                uint64_t v41 = 0;
                goto LABEL_142;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v41 = 0;
        }
LABEL_142:
        BOOL v103 = v41 != 0;
        uint64_t v104 = 209;
        goto LABEL_175;
      case 0x17u:
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        *(_WORD *)(a1 + 220) |= 0x20u;
        while (2)
        {
          uint64_t v49 = *v3;
          uint64_t v50 = *(void *)(a2 + v49);
          unint64_t v51 = v50 + 1;
          if (v50 == -1 || v51 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + *v7) + v50);
            *(void *)(a2 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              BOOL v15 = v47++ >= 9;
              if (v15)
              {
                uint64_t v48 = 0;
                goto LABEL_146;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v48 = 0;
        }
LABEL_146:
        BOOL v103 = v48 != 0;
        uint64_t v104 = 210;
        goto LABEL_175;
      case 0x18u:
        char v53 = 0;
        unsigned int v54 = 0;
        uint64_t v55 = 0;
        *(_WORD *)(a1 + 220) |= 0x40u;
        while (2)
        {
          uint64_t v56 = *v3;
          uint64_t v57 = *(void *)(a2 + v56);
          unint64_t v58 = v57 + 1;
          if (v57 == -1 || v58 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v59 = *(unsigned char *)(*(void *)(a2 + *v7) + v57);
            *(void *)(a2 + v56) = v58;
            v55 |= (unint64_t)(v59 & 0x7F) << v53;
            if (v59 < 0)
            {
              v53 += 7;
              BOOL v15 = v54++ >= 9;
              if (v15)
              {
                uint64_t v55 = 0;
                goto LABEL_150;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v55 = 0;
        }
LABEL_150:
        BOOL v103 = v55 != 0;
        uint64_t v104 = 211;
        goto LABEL_175;
      case 0x19u:
        char v60 = 0;
        unsigned int v61 = 0;
        uint64_t v62 = 0;
        *(_WORD *)(a1 + 220) |= 0x400u;
        while (2)
        {
          uint64_t v63 = *v3;
          uint64_t v64 = *(void *)(a2 + v63);
          unint64_t v65 = v64 + 1;
          if (v64 == -1 || v65 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v66 = *(unsigned char *)(*(void *)(a2 + *v7) + v64);
            *(void *)(a2 + v63) = v65;
            v62 |= (unint64_t)(v66 & 0x7F) << v60;
            if (v66 < 0)
            {
              v60 += 7;
              BOOL v15 = v61++ >= 9;
              if (v15)
              {
                uint64_t v62 = 0;
                goto LABEL_154;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v62 = 0;
        }
LABEL_154:
        BOOL v103 = v62 != 0;
        uint64_t v104 = 215;
        goto LABEL_175;
      case 0x1Au:
        char v67 = 0;
        unsigned int v68 = 0;
        uint64_t v69 = 0;
        *(_WORD *)(a1 + 220) |= 0x200u;
        while (2)
        {
          uint64_t v70 = *v3;
          uint64_t v71 = *(void *)(a2 + v70);
          unint64_t v72 = v71 + 1;
          if (v71 == -1 || v72 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v73 = *(unsigned char *)(*(void *)(a2 + *v7) + v71);
            *(void *)(a2 + v7errstart(20, 0) = v72;
            v69 |= (unint64_t)(v73 & 0x7F) << v67;
            if (v73 < 0)
            {
              v67 += 7;
              BOOL v15 = v68++ >= 9;
              if (v15)
              {
                uint64_t v69 = 0;
                goto LABEL_158;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v69 = 0;
        }
LABEL_158:
        BOOL v103 = v69 != 0;
        uint64_t v104 = 214;
        goto LABEL_175;
      case 0x1Bu:
        char v74 = 0;
        unsigned int v75 = 0;
        uint64_t v76 = 0;
        *(_WORD *)(a1 + 220) |= 8u;
        while (2)
        {
          uint64_t v77 = *v3;
          uint64_t v78 = *(void *)(a2 + v77);
          unint64_t v79 = v78 + 1;
          if (v78 == -1 || v79 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v80 = *(unsigned char *)(*(void *)(a2 + *v7) + v78);
            *(void *)(a2 + v77) = v79;
            v76 |= (unint64_t)(v80 & 0x7F) << v74;
            if (v80 < 0)
            {
              v74 += 7;
              BOOL v15 = v75++ >= 9;
              if (v15)
              {
                uint64_t v76 = 0;
                goto LABEL_162;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v76 = 0;
        }
LABEL_162:
        BOOL v103 = v76 != 0;
        uint64_t v104 = 208;
        goto LABEL_175;
      case 0x1Cu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 176;
        goto LABEL_130;
      case 0x1Du:
        char v81 = 0;
        unsigned int v82 = 0;
        uint64_t v83 = 0;
        *(_WORD *)(a1 + 220) |= 2u;
        while (2)
        {
          uint64_t v84 = *v3;
          uint64_t v85 = *(void *)(a2 + v84);
          unint64_t v86 = v85 + 1;
          if (v85 == -1 || v86 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v87 = *(unsigned char *)(*(void *)(a2 + *v7) + v85);
            *(void *)(a2 + v84) = v86;
            v83 |= (unint64_t)(v87 & 0x7F) << v81;
            if (v87 < 0)
            {
              v81 += 7;
              BOOL v15 = v82++ >= 9;
              if (v15)
              {
                uint64_t v83 = 0;
                goto LABEL_166;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v83 = 0;
        }
LABEL_166:
        *(void *)(a1 + 16) = v83;
        goto LABEL_176;
      case 0x1Eu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 128;
        goto LABEL_130;
      case 0x1Fu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 136;
        goto LABEL_130;
      case 0x20u:
        char v88 = 0;
        unsigned int v89 = 0;
        uint64_t v90 = 0;
        *(_WORD *)(a1 + 220) |= 4u;
        while (2)
        {
          uint64_t v91 = *v3;
          uint64_t v92 = *(void *)(a2 + v91);
          unint64_t v93 = v92 + 1;
          if (v92 == -1 || v93 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v94 = *(unsigned char *)(*(void *)(a2 + *v7) + v92);
            *(void *)(a2 + v91) = v93;
            v90 |= (unint64_t)(v94 & 0x7F) << v88;
            if (v94 < 0)
            {
              v88 += 7;
              BOOL v15 = v89++ >= 9;
              if (v15)
              {
                LODWORD(v9errstart(20, 0) = 0;
                goto LABEL_170;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v9errstart(20, 0) = 0;
        }
LABEL_170:
        *(_DWORD *)(a1 + 12errstart(20, 0) = v90;
        goto LABEL_176;
      case 0x21u:
        char v95 = 0;
        unsigned int v96 = 0;
        uint64_t v97 = 0;
        *(_WORD *)(a1 + 220) |= 0x80u;
        while (2)
        {
          uint64_t v98 = *v3;
          uint64_t v99 = *(void *)(a2 + v98);
          unint64_t v100 = v99 + 1;
          if (v99 == -1 || v100 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v101 = *(unsigned char *)(*(void *)(a2 + *v7) + v99);
            *(void *)(a2 + v9_Block_object_dispose(&a9, 8) = v100;
            v97 |= (unint64_t)(v101 & 0x7F) << v95;
            if (v101 < 0)
            {
              v95 += 7;
              BOOL v15 = v96++ >= 9;
              if (v15)
              {
                uint64_t v97 = 0;
                goto LABEL_174;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v97 = 0;
        }
LABEL_174:
        BOOL v103 = v97 != 0;
        uint64_t v104 = 212;
LABEL_175:
        *(unsigned char *)(a1 + v104) = v103;
        goto LABEL_176;
      case 0x22u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 96;
LABEL_130:
        uint64_t v102 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_176;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_176;
    }
  }
}

uint64_t BMUserFocusComputedModeUpdateReasonFromReason(uint64_t result)
{
  if (result < 4) {
    return result;
  }
  long long v1 = __biome_log_for_category();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    BMUserFocusComputedModeUpdateReasonFromReason_cold_1();
  }

  return 0;
}

uint64_t BMUserFocusComputedModeUpdateSourceFromSource(uint64_t result)
{
  if (result < 4) {
    return result;
  }
  long long v1 = __biome_log_for_category();
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    BMUserFocusComputedModeUpdateSourceFromSource_cold_1();
  }

  return 0;
}

uint64_t activityTypeWithState(uint64_t result)
{
  uint64_t v1 = result;
  if (result < 6) {
    return result;
  }
  uint64_t v2 = __biome_log_for_category();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
    activityTypeWithState_cold_1(v1);
  }

  return 0;
}

void sub_18E716BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E717088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4errstart(20, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4errstart(20, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

id get_DKIntentMetadataKeyClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKIntentMetadataKeyClass_softClass;
  uint64_t v7 = get_DKIntentMetadataKeyClass_softClass;
  if (!get_DKIntentMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKIntentMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKIntentMetadataKeyClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E71783C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CoreDuetLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  CoreDuetLibraryCore_frameworkLibrary_0 = result;
  return result;
}

uint64_t BMPBDoNotDisturbWhileDrivingEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v23 += 7;
          BOOL v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2errstart(20, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_37;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_39:
        *(unsigned char *)(a1 + 12) = v19 != 0;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_18E71AAA8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void _logQueryResult(sqlite3_stmt *a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v2 = sqlite3_column_count(a1);
  uint64_t v3 = objc_opt_new();
  if (v2 >= 1)
  {
    for (int i = 0; i != v2; ++i)
    {
      id v5 = sqlite3_column_table_name(a1, i);
      if (v5)
      {
        uint64_t v6 = [NSString stringWithUTF8String:v5];
        [v3 addObject:v6];
      }
    }
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v7 = v3;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v13;
    do
    {
      for (uint64_t j = 0; j != v9; ++j)
      {
        if (*(void *)v13 != v10) {
          objc_enumerationMutation(v7);
        }
        AnalyticsSendEventLazy();
      }
      uint64_t v9 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v9);
  }

  AnalyticsSendEventLazy();
}

void sub_18E71AE40(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id ___logQueryResult_block_invoke(uint64_t a1)
{
  v8[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  v8[0] = *(void *)(a1 + 32);
  v7[0] = @"stream";
  v7[1] = @"num_results";
  uint64_t v3 = [NSNumber numberWithUnsignedInteger:v2];
  v8[1] = v3;
  uint64_t v7[2] = @"rc";
  uint64_t v4 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 48)];
  v8[2] = v4;
  id v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v8 forKeys:v7 count:3];

  return v5;
}

id ___logQueryResult_block_invoke_2(uint64_t a1)
{
  uint64_t v7[2] = *MEMORY[0x1E4F143B8];
  v6[0] = @"num_results";
  uint64_t v2 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 32)];
  v6[1] = @"rc";
  v7[0] = v2;
  uint64_t v3 = [NSNumber numberWithInt:*(unsigned int *)(a1 + 40)];
  v7[1] = v3;
  uint64_t v4 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:v6 count:2];

  return v4;
}

uint64_t BMPBSchoolTimeEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v23 += 7;
          BOOL v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2errstart(20, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_37;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_39:
        *(unsigned char *)(a1 + 12) = v19 != 0;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL BMPBSocialMediaHandleReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 8;
LABEL_22:
        uint64_t v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&a9, 8) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 16;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBScreenSharingEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v23 += 7;
          BOOL v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2errstart(20, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_37;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_39:
        *(unsigned char *)(a1 + 12) = v19 != 0;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBBacklightEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 24) |= 2u;
        while (1)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4)) {
            break;
          }
          char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
          *(void *)(a2 + v24) = v26;
          v23 |= (unint64_t)(v27 & 0x7F) << v21;
          if ((v27 & 0x80) == 0) {
            goto LABEL_33;
          }
          v21 += 7;
          BOOL v15 = v22++ >= 9;
          if (v15)
          {
            uint64_t v23 = 0;
            goto LABEL_35;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_33:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v23 = 0;
        }
LABEL_35:
        *(void *)(a1 + 16) = v23;
      }
      else if ((v10 >> 3) == 1)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v1_Block_object_dispose(&a9, 8) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v20;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id BMEventClassForStreamIdentifier(void *a1)
{
  id v1 = a1;
  if ([v1 hasSuffix:@":subscriptions"]
    || [v1 hasSuffix:@":tombstones"])
  {
    objc_opt_class();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v3 = [MEMORY[0x1E4F4FBA8] libraryPathForStreamIdentifier:v1];
    uint64_t v4 = (void *)v3;
    if (v3) {
      id v5 = (void *)v3;
    }
    else {
      id v5 = v1;
    }
    id v6 = v5;

    if ([v1 isEqual:v6])
    {
      os_unfair_lock_lock((os_unfair_lock_t)&BMEventClassForStreamIdentifier__lock);
      id v7 = (void *)BMEventClassForStreamIdentifier__cache;
      if (!BMEventClassForStreamIdentifier__cache)
      {
        uint64_t v8 = objc_opt_new();
        unsigned int v9 = (void *)BMEventClassForStreamIdentifier__cache;
        BMEventClassForStreamIdentifier__cache = v8;

        id v7 = (void *)BMEventClassForStreamIdentifier__cache;
      }
      unint64_t v10 = (void *)[v7 objectForKeyedSubscript:v1];
      if (!v10)
      {
        uint64_t v11 = BiomeLibraryAndInternalLibraryNode();
        uint64_t v12 = [v11 streamWithIdentifier:v1 error:0];

        unint64_t v13 = [v12 configuration];
        unint64_t v10 = (void *)[v13 eventClass];
        if (!v10) {
          unint64_t v10 = objc_opt_class();
        }

        [(id)BMEventClassForStreamIdentifier__cache setObject:v10 forKeyedSubscript:v1];
      }
      if (v10 == objc_opt_class()) {
        id v2 = 0;
      }
      else {
        id v2 = v10;
      }
      os_unfair_lock_unlock((os_unfair_lock_t)&BMEventClassForStreamIdentifier__lock);
    }
    else
    {
      id v2 = [MEMORY[0x1E4F4FBA8] legacyClassForLibraryStream:v6];
    }
  }

  return v2;
}

void sub_18E726238(_Unwind_Exception *a1)
{
}

id BMDSLGetBookmarkForDate(void *a1, void *a2, void *a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  id v5 = a1;
  id v6 = a2;
  id v7 = (void *)MEMORY[0x1E4F4FA48];
  unsigned int v22 = v5;
  uint64_t v8 = [MEMORY[0x1E4F4FA40] archivedDataWithDSL:v5];
  unsigned int v9 = [v7 unarchiveDSLFromData:v8];

  [v6 timeIntervalSinceReferenceDate];
  double v11 = v10;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v12 = [v9 streamPublishers];
  uint64_t v13 = [v12 countByEnumeratingWithState:&v36 objects:v40 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v37;
    do
    {
      for (uint64_t i = 0; i != v13; ++i)
      {
        if (*(void *)v37 != v14) {
          objc_enumerationMutation(v12);
        }
        int v16 = *(void **)(*((void *)&v36 + 1) + 8 * i);
        char v17 = [NSNumber numberWithDouble:v11];
        [v16 setBookmarkingTime:v17];
      }
      uint64_t v13 = [v12 countByEnumeratingWithState:&v36 objects:v40 count:16];
    }
    while (v13);
  }

  uint64_t v30 = 0;
  char v31 = &v30;
  uint64_t v32 = 0x3032000000;
  unsigned int v33 = __Block_byref_object_copy__2;
  uint64_t v34 = __Block_byref_object_dispose__2;
  id v35 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x3032000000;
  char v27 = __Block_byref_object_copy__2;
  char v28 = __Block_byref_object_dispose__2;
  id v29 = 0;
  uint64_t v18 = [v9 bpsPublisher];
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  v23[2] = __BMDSLGetBookmarkForDate_block_invoke;
  v23[3] = &unk_1E55D7000;
  v23[4] = &v30;
  v23[5] = &v24;
  id v19 = (id)[v18 sinkWithBookmark:0 completion:v23 receiveInput:&__block_literal_global_7];

  if (a3) {
    *a3 = (id) v25[5];
  }
  id v20 = (id)v31[5];
  _Block_object_dispose(&v24, 8);

  _Block_object_dispose(&v30, 8);

  return v20;
}

void sub_18E72653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4errstart(20, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4errstart(20, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void __BMDSLGetBookmarkForDate_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  if ([v11 state])
  {
    uint64_t v6 = [v11 error];
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 4errstart(20, 0) = v6;
  }
  else
  {
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
    id v10 = v5;
    uint64_t v8 = *(void **)(v9 + 40);
    *(void *)(v9 + 4errstart(20, 0) = v10;
  }
}

id BMDSLGetPublisherForEvent(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)MEMORY[0x1E4F4FA48];
    id v5 = [MEMORY[0x1E4F4FA40] archivedDataWithDSL:a1];
    uint64_t v6 = [v4 unarchiveDSLFromData:v5];

    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v7 = objc_msgSend(v6, "streamPublishers", 0);
    uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v21 count:16];
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = *(void *)v17;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v17 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
          id v20 = v3;
          uint64_t v13 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v20 count:1];
          [v12 setBackingEvents:v13];
        }
        uint64_t v9 = [v7 countByEnumeratingWithState:&v16 objects:v21 count:16];
      }
      while (v9);
    }

    uint64_t v14 = [v6 bpsPublisher];
  }
  else
  {
    uint64_t v14 = [MEMORY[0x1E4F1CBF0] bpsPublisher];
  }

  return v14;
}

void sub_18E726C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BMPBSafariPageViewEventReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 56;
          goto LABEL_38;
        case 2u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 32;
          goto LABEL_38;
        case 3u:
          *(unsigned char *)(a1 + 76) |= 1u;
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = v23;
          continue;
        case 4u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 48;
          goto LABEL_38;
        case 5u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 16;
          goto LABEL_38;
        case 6u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 76) |= 2u;
          break;
        case 7u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 64;
          goto LABEL_38;
        case 8u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
          goto LABEL_38;
        case 9u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 40;
LABEL_38:
          char v31 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v27 = *v3;
        uint64_t v28 = *(void *)(a2 + v27);
        unint64_t v29 = v28 + 1;
        if (v28 == -1 || v29 > *(void *)(a2 + *v4)) {
          break;
        }
        char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
        *(void *)(a2 + v27) = v29;
        v26 |= (unint64_t)(v30 & 0x7F) << v24;
        if ((v30 & 0x80) == 0) {
          goto LABEL_42;
        }
        v24 += 7;
        BOOL v15 = v25++ >= 9;
        if (v15)
        {
          uint64_t v26 = 0;
          goto LABEL_44;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_42:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v26 = 0;
      }
LABEL_44:
      *(unsigned char *)(a1 + 72) = v26 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBUserActivityMetadataEventReadFrom(unsigned char *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = &OBJC_IVAR___BMPBRankableSocialHighlight__groupPhotoPathDigest;
  char v8 = &OBJC_IVAR___BMPBRankableSocialHighlight__groupPhotoPathDigest;
  unsigned int v9 = (int *)MEMORY[0x1E4F940B8];
  unint64_t v10 = &OBJC_IVAR___BMPBRankableSocialHighlight__groupPhotoPathDigest;
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      uint64_t v15 = *(void *)(a2 + v14);
      unint64_t v16 = v15 + 1;
      if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
        break;
      }
      char v17 = *(unsigned char *)(*(void *)(a2 + *v9) + v15);
      *(void *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      BOOL v18 = v12++ >= 9;
      if (v18)
      {
        unint64_t v13 = 0;
        int v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v19 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        a1[v7[457]] |= 1u;
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v9) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        *(void *)&a1[v8[458]] = v23;
        goto LABEL_42;
      case 2u:
        uint64_t v25 = PBReaderReadData();
        uint64_t v26 = v10[459];
        goto LABEL_41;
      case 3u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 48;
        goto LABEL_41;
      case 4u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 16;
        goto LABEL_41;
      case 5u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 24;
        goto LABEL_41;
      case 6u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 32;
        goto LABEL_41;
      case 7u:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 40;
        goto LABEL_41;
      case 8u:
        uint64_t v27 = v7;
        uint64_t v28 = v10;
        unint64_t v29 = v8;
        char v30 = objc_alloc_init(BMPBUserActivityMetadataTopic);
        [a1 addTopics:v30];
        if (PBReaderPlaceMark() && BMPBUserActivityMetadataTopicReadFrom((uint64_t)v30, a2))
        {
          PBReaderRecallMark();

          char v8 = v29;
          unint64_t v10 = v28;
          uint64_t v7 = v27;
LABEL_42:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 9u:
        char v31 = 0;
        unsigned int v32 = 0;
        uint64_t v33 = 0;
        a1[v7[457]] |= 2u;
        while (2)
        {
          uint64_t v34 = *v3;
          uint64_t v35 = *(void *)(a2 + v34);
          unint64_t v36 = v35 + 1;
          if (v35 == -1 || v36 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v37 = *(unsigned char *)(*(void *)(a2 + *v9) + v35);
            *(void *)(a2 + v34) = v36;
            v33 |= (unint64_t)(v37 & 0x7F) << v31;
            if (v37 < 0)
            {
              v31 += 7;
              BOOL v18 = v32++ >= 9;
              if (v18)
              {
                uint64_t v33 = 0;
                goto LABEL_47;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v33 = 0;
        }
LABEL_47:
        a1[80] = v33 != 0;
        goto LABEL_42;
      case 0xAu:
        uint64_t v25 = PBReaderReadString();
        uint64_t v26 = 72;
LABEL_41:
        long long v38 = *(void **)&a1[v26];
        *(void *)&a1[v26] = v25;

        goto LABEL_42;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_42;
    }
  }
}

uint64_t BMPBCarPlayEventReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v23 += 7;
          BOOL v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2errstart(20, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_37;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_39:
        *(unsigned char *)(a1 + 12) = v19 != 0;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBGameControllerEventReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v26 = *v3;
          unint64_t v27 = *(void *)(a2 + v26);
          if (v27 == -1 || v27 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 1;
          v25 |= (unint64_t)(v28 & 0x7F) << v23;
          if ((v28 & 0x80) == 0) {
            goto LABEL_41;
          }
          v23 += 7;
          BOOL v14 = v24++ >= 9;
          if (v14)
          {
            LODWORD(v25) = 0;
            goto LABEL_43;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v25) = 0;
        }
LABEL_43:
        *(_DWORD *)(a1 + _Block_object_dispose(&a9, 8) = v25;
      }
      else if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 2u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2errstart(20, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_37;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_39;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_39:
        *(unsigned char *)(a1 + 12) = v19 != 0;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL BMPBUserStatusChangeEventReadFrom(char *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
LABEL_25:
        uint64_t v20 = *(void **)&a1[v19];
        *(void *)&a1[v19] = v18;
LABEL_26:

        goto LABEL_28;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
        goto LABEL_25;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_28:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v20 = PBReaderReadString();
    if (v20) {
      [a1 addIdsHandles:v20];
    }
    goto LABEL_26;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBAskToBuyEventReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 64;
          goto LABEL_51;
        case 2u:
          *(unsigned char *)(a1 + 108) |= 1u;
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = v23;
          continue;
        case 3u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 96;
          goto LABEL_51;
        case 4u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 16;
          goto LABEL_51;
        case 5u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 108) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            uint64_t v28 = *(void *)(a2 + v27);
            unint64_t v29 = v28 + 1;
            if (v28 == -1 || v29 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                BOOL v15 = v25++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_57;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_57:
          *(_DWORD *)(a1 + 76) = v26;
          continue;
        case 6u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 48;
          goto LABEL_51;
        case 7u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 32;
          goto LABEL_51;
        case 8u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 40;
          goto LABEL_51;
        case 9u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 88;
          goto LABEL_51;
        case 0xAu:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
          goto LABEL_51;
        case 0xBu:
          *(unsigned char *)(a1 + 108) |= 2u;
          uint64_t v31 = *v3;
          unint64_t v32 = *(void *)(a2 + v31);
          if (v32 <= 0xFFFFFFFFFFFFFFFBLL && v32 + 4 <= *(void *)(a2 + *v4))
          {
            int v33 = *(_DWORD *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v32 + 4;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            int v33 = 0;
          }
          *(_DWORD *)(a1 + 72) = v33;
          continue;
        case 0xCu:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 56;
          goto LABEL_51;
        case 0xDu:
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v36 = 0;
          *(unsigned char *)(a1 + 108) |= 8u;
          break;
        case 0xEu:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 80;
LABEL_51:
          uint64_t v41 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v37 = *v3;
        uint64_t v38 = *(void *)(a2 + v37);
        unint64_t v39 = v38 + 1;
        if (v38 == -1 || v39 > *(void *)(a2 + *v4)) {
          break;
        }
        char v40 = *(unsigned char *)(*(void *)(a2 + *v7) + v38);
        *(void *)(a2 + v37) = v39;
        v36 |= (unint64_t)(v40 & 0x7F) << v34;
        if ((v40 & 0x80) == 0) {
          goto LABEL_59;
        }
        v34 += 7;
        BOOL v15 = v35++ >= 9;
        if (v15)
        {
          uint64_t v36 = 0;
          goto LABEL_61;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_59:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v36 = 0;
      }
LABEL_61:
      *(unsigned char *)(a1 + 104) = v36 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL BMPBHomeKitClientAccessoryControlEventReadFrom(id *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        unint64_t v17 = objc_alloc_init(BMPBHomeKitClientBase);
        objc_storeStrong(a1 + 4, v17);
        if PBReaderPlaceMark() && (BMPBHomeKitClientBaseReadFrom((uint64_t)v17, a2)) {
          goto LABEL_27;
        }
        goto LABEL_47;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 3;
        goto LABEL_42;
      case 3u:
        unint64_t v17 = objc_alloc_init(BMPBAccessoryState);
        objc_storeStrong(a1 + 2, v17);
        if PBReaderPlaceMark() && (BMPBAccessoryStateReadFrom((uint64_t)v17, a2))
        {
LABEL_27:
          PBReaderRecallMark();
LABEL_43:

LABEL_44:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_47:

        return 0;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 13;
        goto LABEL_42;
      case 5u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 12;
        goto LABEL_42;
      case 6u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 5;
        goto LABEL_42;
      case 7u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 10;
        goto LABEL_42;
      case 8u:
        PBReaderReadString();
        unint64_t v17 = (BMPBHomeKitClientBase *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          [a1 addZoneUniqueIdentifiers:v17];
        }
        goto LABEL_43;
      case 9u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
        goto LABEL_42;
      case 0xAu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 1;
        goto LABEL_42;
      case 0xBu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 11;
        goto LABEL_42;
      case 0xCu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 7;
        goto LABEL_42;
      case 0xDu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 9;
        goto LABEL_42;
      case 0xEu:
        PBReaderReadString();
        unint64_t v17 = (BMPBHomeKitClientBase *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          [a1 addZoneNames:v17];
        }
        goto LABEL_43;
      case 0xFu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 6;
LABEL_42:
        unint64_t v17 = (BMPBHomeKitClientBase *)a1[v19];
        a1[v19] = (id)v18;
        goto LABEL_43;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_44;
    }
  }
}

uint64_t BMPBScreenTimeRequestEventReadFrom(uint64_t a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 40;
          goto LABEL_50;
        case 2u:
          *(unsigned char *)(a1 + 84) |= 1u;
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
            *(void *)(a2 + v21) = v22 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v23 = 0;
          }
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = v23;
          continue;
        case 3u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 48;
          goto LABEL_50;
        case 4u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 56;
          goto LABEL_50;
        case 5u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 84) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            uint64_t v28 = *(void *)(a2 + v27);
            unint64_t v29 = v28 + 1;
            if (v28 == -1 || v29 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v29;
              v26 |= (unint64_t)(v30 & 0x7F) << v24;
              if (v30 < 0)
              {
                v24 += 7;
                BOOL v15 = v25++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_61;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_61:
          uint64_t v51 = 32;
          goto LABEL_70;
        case 6u:
          char v31 = 0;
          unsigned int v32 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 84) |= 8u;
          while (2)
          {
            uint64_t v33 = *v3;
            uint64_t v34 = *(void *)(a2 + v33);
            unint64_t v35 = v34 + 1;
            if (v34 == -1 || v35 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v36 = *(unsigned char *)(*(void *)(a2 + *v7) + v34);
              *(void *)(a2 + v33) = v35;
              v26 |= (unint64_t)(v36 & 0x7F) << v31;
              if (v36 < 0)
              {
                v31 += 7;
                BOOL v15 = v32++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_65;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_65:
          uint64_t v51 = 64;
          goto LABEL_70;
        case 7u:
          char v37 = 0;
          unsigned int v38 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 84) |= 2u;
          while (2)
          {
            uint64_t v39 = *v3;
            uint64_t v40 = *(void *)(a2 + v39);
            unint64_t v41 = v40 + 1;
            if (v40 == -1 || v41 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v42 = *(unsigned char *)(*(void *)(a2 + *v7) + v40);
              *(void *)(a2 + v39) = v41;
              v26 |= (unint64_t)(v42 & 0x7F) << v37;
              if (v42 < 0)
              {
                v37 += 7;
                BOOL v15 = v38++ >= 9;
                if (v15)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_69;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_69:
          uint64_t v51 = 16;
LABEL_70:
          *(_DWORD *)(a1 + v51) = v26;
          continue;
        case 8u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 72;
          goto LABEL_50;
        case 9u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
LABEL_50:
          uint64_t v43 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        case 0xAu:
          char v44 = 0;
          unsigned int v45 = 0;
          uint64_t v46 = 0;
          *(unsigned char *)(a1 + 84) |= 0x10u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v47 = *v3;
        uint64_t v48 = *(void *)(a2 + v47);
        unint64_t v49 = v48 + 1;
        if (v48 == -1 || v49 > *(void *)(a2 + *v4)) {
          break;
        }
        char v50 = *(unsigned char *)(*(void *)(a2 + *v7) + v48);
        *(void *)(a2 + v47) = v49;
        v46 |= (unint64_t)(v50 & 0x7F) << v44;
        if ((v50 & 0x80) == 0) {
          goto LABEL_72;
        }
        v44 += 7;
        BOOL v15 = v45++ >= 9;
        if (v15)
        {
          uint64_t v46 = 0;
          goto LABEL_74;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_72:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v46 = 0;
      }
LABEL_74:
      *(unsigned char *)(a1 + 8errstart(20, 0) = v46 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBNowPlayingEventReadFrom(unsigned char *a1, uint64_t a2)
{
  id v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = &OBJC_IVAR___BMPBRankableSocialHighlight__groupPhotoPathDigest;
  char v8 = &OBJC_IVAR___BMPBRankableSocialHighlight__groupPhotoPathDigest;
  unsigned int v9 = &OBJC_IVAR___BMPBRankableSocialHighlight__groupPhotoPathDigest;
  unint64_t v10 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v11 = 0;
    unsigned int v12 = 0;
    unint64_t v13 = 0;
    while (1)
    {
      uint64_t v14 = *v3;
      uint64_t v15 = *(void *)(a2 + v14);
      unint64_t v16 = v15 + 1;
      if (v15 == -1 || v16 > *(void *)(a2 + *v4)) {
        break;
      }
      char v17 = *(unsigned char *)(*(void *)(a2 + *v10) + v15);
      *(void *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << v11;
      if ((v17 & 0x80) == 0) {
        goto LABEL_12;
      }
      v11 += 7;
      BOOL v18 = v12++ >= 9;
      if (v18)
      {
        unint64_t v13 = 0;
        int v19 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v19 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v13 = 0;
    }
LABEL_14:
    if (v19 || (v13 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v13 >> 3))
    {
      case 1u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = v7[534];
        goto LABEL_67;
      case 2u:
        a1[v8[535]] |= 1u;
        uint64_t v24 = *v3;
        unint64_t v25 = *(void *)(a2 + v24);
        if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v26 = *(void *)(*(void *)(a2 + *v10) + v25);
          *(void *)(a2 + v24) = v25 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v26 = 0;
        }
        *(void *)&a1[v9[536]] = v26;
        goto LABEL_119;
      case 3u:
        char v27 = 0;
        unsigned int v28 = 0;
        uint64_t v29 = 0;
        a1[v8[535]] |= 0x20u;
        while (2)
        {
          uint64_t v30 = *v3;
          uint64_t v31 = *(void *)(a2 + v30);
          unint64_t v32 = v31 + 1;
          if (v31 == -1 || v32 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v33 = *(unsigned char *)(*(void *)(a2 + *v10) + v31);
            *(void *)(a2 + v3errstart(20, 0) = v32;
            v29 |= (unint64_t)(v33 & 0x7F) << v27;
            if (v33 < 0)
            {
              v27 += 7;
              BOOL v18 = v28++ >= 9;
              if (v18)
              {
                LODWORD(v29) = 0;
                goto LABEL_92;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_92:
        uint64_t v77 = 120;
        goto LABEL_118;
      case 4u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 16;
        goto LABEL_67;
      case 5u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 24;
        goto LABEL_67;
      case 6u:
        char v34 = 0;
        unsigned int v35 = 0;
        uint64_t v29 = 0;
        a1[v8[535]] |= 2u;
        while (2)
        {
          uint64_t v36 = *v3;
          uint64_t v37 = *(void *)(a2 + v36);
          unint64_t v38 = v37 + 1;
          if (v37 == -1 || v38 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v39 = *(unsigned char *)(*(void *)(a2 + *v10) + v37);
            *(void *)(a2 + v36) = v38;
            v29 |= (unint64_t)(v39 & 0x7F) << v34;
            if (v39 < 0)
            {
              v34 += 7;
              BOOL v18 = v35++ >= 9;
              if (v18)
              {
                LODWORD(v29) = 0;
                goto LABEL_96;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_96:
        uint64_t v77 = 40;
        goto LABEL_118;
      case 7u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 48;
        goto LABEL_67;
      case 8u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 128;
        goto LABEL_67;
      case 9u:
        char v40 = 0;
        unsigned int v41 = 0;
        uint64_t v29 = 0;
        a1[v8[535]] |= 4u;
        while (2)
        {
          uint64_t v42 = *v3;
          uint64_t v43 = *(void *)(a2 + v42);
          unint64_t v44 = v43 + 1;
          if (v43 == -1 || v44 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v45 = *(unsigned char *)(*(void *)(a2 + *v10) + v43);
            *(void *)(a2 + v42) = v44;
            v29 |= (unint64_t)(v45 & 0x7F) << v40;
            if (v45 < 0)
            {
              v40 += 7;
              BOOL v18 = v41++ >= 9;
              if (v18)
              {
                LODWORD(v29) = 0;
                goto LABEL_100;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_100:
        uint64_t v77 = 44;
        goto LABEL_118;
      case 0xAu:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 104;
        goto LABEL_67;
      case 0xBu:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 80;
        goto LABEL_67;
      case 0xCu:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 88;
        goto LABEL_67;
      case 0xDu:
        char v46 = 0;
        unsigned int v47 = 0;
        uint64_t v48 = 0;
        a1[v8[535]] |= 0x40u;
        while (2)
        {
          uint64_t v49 = *v3;
          uint64_t v50 = *(void *)(a2 + v49);
          unint64_t v51 = v50 + 1;
          if (v50 == -1 || v51 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v52 = *(unsigned char *)(*(void *)(a2 + *v10) + v50);
            *(void *)(a2 + v49) = v51;
            v48 |= (unint64_t)(v52 & 0x7F) << v46;
            if (v52 < 0)
            {
              v46 += 7;
              BOOL v18 = v47++ >= 9;
              if (v18)
              {
                uint64_t v48 = 0;
                goto LABEL_104;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v48 = 0;
        }
LABEL_104:
        BOOL v78 = v48 != 0;
        uint64_t v79 = 144;
        goto LABEL_109;
      case 0xEu:
        char v53 = v8;
        unsigned int v54 = v9;
        uint64_t v55 = v7;
        uint64_t v56 = objc_alloc_init(BMPBNowPlayingOutputDevice);
        [a1 addOutputDevices:v56];
        if PBReaderPlaceMark() && (BMPBNowPlayingOutputDeviceReadFrom((uint64_t)v56, a2))
        {
          PBReaderRecallMark();

          uint64_t v7 = v55;
          unsigned int v9 = v54;
          char v8 = v53;
LABEL_119:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 0xFu:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 32;
        goto LABEL_67;
      case 0x10u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 72;
        goto LABEL_67;
      case 0x11u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 64;
        goto LABEL_67;
      case 0x12u:
        uint64_t v21 = PBReaderReadString();
        uint64_t v22 = 56;
LABEL_67:
        uint64_t v57 = *(void **)&a1[v22];
        *(void *)&a1[v22] = v21;

        goto LABEL_119;
      case 0x13u:
        char v58 = 0;
        unsigned int v59 = 0;
        uint64_t v60 = 0;
        a1[v8[535]] |= 0x80u;
        while (2)
        {
          uint64_t v61 = *v3;
          uint64_t v62 = *(void *)(a2 + v61);
          unint64_t v63 = v62 + 1;
          if (v62 == -1 || v63 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v64 = *(unsigned char *)(*(void *)(a2 + *v10) + v62);
            *(void *)(a2 + v61) = v63;
            v60 |= (unint64_t)(v64 & 0x7F) << v58;
            if (v64 < 0)
            {
              v58 += 7;
              BOOL v18 = v59++ >= 9;
              if (v18)
              {
                uint64_t v60 = 0;
                goto LABEL_108;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v60 = 0;
        }
LABEL_108:
        BOOL v78 = v60 != 0;
        uint64_t v79 = 145;
LABEL_109:
        a1[v79] = v78;
        goto LABEL_119;
      case 0x14u:
        char v65 = 0;
        unsigned int v66 = 0;
        uint64_t v29 = 0;
        a1[v8[535]] |= 0x10u;
        while (2)
        {
          uint64_t v67 = *v3;
          uint64_t v68 = *(void *)(a2 + v67);
          unint64_t v69 = v68 + 1;
          if (v68 == -1 || v69 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v70 = *(unsigned char *)(*(void *)(a2 + *v10) + v68);
            *(void *)(a2 + v67) = v69;
            v29 |= (unint64_t)(v70 & 0x7F) << v65;
            if (v70 < 0)
            {
              v65 += 7;
              BOOL v18 = v66++ >= 9;
              if (v18)
              {
                LODWORD(v29) = 0;
                goto LABEL_113;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_113:
        uint64_t v77 = 100;
        goto LABEL_118;
      case 0x15u:
        char v71 = 0;
        unsigned int v72 = 0;
        uint64_t v29 = 0;
        a1[v8[535]] |= 8u;
        while (2)
        {
          uint64_t v73 = *v3;
          uint64_t v74 = *(void *)(a2 + v73);
          unint64_t v75 = v74 + 1;
          if (v74 == -1 || v75 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v76 = *(unsigned char *)(*(void *)(a2 + *v10) + v74);
            *(void *)(a2 + v73) = v75;
            v29 |= (unint64_t)(v76 & 0x7F) << v71;
            if (v76 < 0)
            {
              v71 += 7;
              BOOL v18 = v72++ >= 9;
              if (v18)
              {
                LODWORD(v29) = 0;
                goto LABEL_117;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v29) = 0;
        }
LABEL_117:
        uint64_t v77 = 96;
LABEL_118:
        *(_DWORD *)&a1[v77] = v29;
        goto LABEL_119;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_119;
    }
  }
}

void sub_18E738D08(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18E738EB8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

id get_DKNowPlayingMetadataKeyClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKNowPlayingMetadataKeyClass_softClass;
  uint64_t v7 = get_DKNowPlayingMetadataKeyClass_softClass;
  if (!get_DKNowPlayingMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKNowPlayingMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKNowPlayingMetadataKeyClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E73AA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CoreDuetLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  CoreDuetLibraryCore_frameworkLibrary_1 = result;
  return result;
}

__CFString *BMSQLDataTypeToString(unint64_t a1)
{
  if (a1 < 7) {
    return off_1E55D73E0[a1];
  }
  id v3 = __biome_log_for_category();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    BMSQLDataTypeToString_cold_1(a1, v3);
  }

  return @"TEXT";
}

id BMConvertObjectToJSONString(void *a1, void *a2)
{
  id v3 = a1;
  if (!v3
    || ([MEMORY[0x1E4F1CA98] null],
        id v4 = (id)objc_claimAutoreleasedReturnValue(),
        v4,
        v4 == v3))
  {
    char v8 = 0;
  }
  else
  {
    id v10 = 0;
    id v5 = [MEMORY[0x1E4F28D90] dataWithJSONObject:v3 options:0 error:&v10];
    id v6 = v10;
    uint64_t v7 = v6;
    if (v5)
    {
      char v8 = (void *)[[NSString alloc] initWithData:v5 encoding:4];
    }
    else
    {
      char v8 = 0;
      if (a2) {
        *a2 = v6;
      }
    }
  }

  return v8;
}

id __BMEventTimestampSQLColumn_block_invoke_2(uint64_t a1)
{
  id v1 = (void *)[objc_alloc(MEMORY[0x1E4F1C9C8]) initWithTimeIntervalSince1970:(*(double (**)(void))(*(void *)(a1 + 32) + 16))()];

  return v1;
}

uint64_t __BMEventTimestampSQLColumn_block_invoke_3(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
  double v4 = (*(double (**)(void))(*(void *)(a1 + 32) + 16))();
  sqlite3_result_double(a3, v4);
  return 1;
}

uint64_t __BMEventBodyDataSQLColumn_block_invoke_2(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
  double v4 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v5 = v4;
  if (v4)
  {
    id v6 = v4;
    sqlite3_result_blob(a3, (const void *)[v6 bytes], objc_msgSend(v6, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sqlite3_result_null(a3);
  }

  return 1;
}

uint64_t __BMEventClassNameSQLColumn_block_invoke_2(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
  double v4 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v5 = v4;
  if (v4) {
    sqlite3_result_text(a3, (const char *)[v4 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    sqlite3_result_null(a3);
  }

  return 1;
}

id BMEventBookmarkSQLColumns()
{
  v28[4] = *MEMORY[0x1E4F143B8];
  int v0 = [BMSQLEventMetadataColumn alloc];
  uint64_t v23 = MEMORY[0x1E4F143A8];
  uint64_t v24 = 3221225472;
  unint64_t v25 = __BMEventBookmarkSQLColumns_block_invoke_5;
  uint64_t v26 = &unk_1E55D72F0;
  id v27 = &__block_literal_global_34;
  id v1 = -[BMSQLEventMetadataColumn initWithName:dataType:requestOnly:extractBlock:setValueBlock:](v0, "initWithName:dataType:requestOnly:extractBlock:setValueBlock:", @"_bookmark.streamId", 2, 1);
  v28[0] = v1;
  id v2 = [BMSQLEventMetadataColumn alloc];
  uint64_t v18 = MEMORY[0x1E4F143A8];
  uint64_t v19 = 3221225472;
  uint64_t v20 = __BMEventBookmarkSQLColumns_block_invoke_6;
  uint64_t v21 = &unk_1E55D72F0;
  id v22 = &__block_literal_global_36_0;
  id v3 = -[BMSQLEventMetadataColumn initWithName:dataType:requestOnly:extractBlock:setValueBlock:](v2, "initWithName:dataType:requestOnly:extractBlock:setValueBlock:", @"_bookmark.segmentName", 2, 1);
  v28[1] = v3;
  double v4 = [BMSQLEventMetadataColumn alloc];
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = __BMEventBookmarkSQLColumns_block_invoke_7;
  v16[3] = &unk_1E55D7378;
  id v17 = &__block_literal_global_38;
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = __BMEventBookmarkSQLColumns_block_invoke_8;
  v14[3] = &unk_1E55D72F0;
  id v15 = &__block_literal_global_38;
  id v5 = [(BMSQLEventMetadataColumn *)v4 initWithName:@"_bookmark.iterationStartTime" dataType:1 requestOnly:1 extractBlock:v16 setValueBlock:v14];
  void v28[2] = v5;
  id v6 = [BMSQLEventMetadataColumn alloc];
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 3221225472;
  v12[2] = __BMEventBookmarkSQLColumns_block_invoke_9;
  void v12[3] = &unk_1E55D7378;
  id v13 = &__block_literal_global_41;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = __BMEventBookmarkSQLColumns_block_invoke_10;
  v10[3] = &unk_1E55D72F0;
  id v11 = &__block_literal_global_41;
  uint64_t v7 = [(BMSQLEventMetadataColumn *)v6 initWithName:@"_bookmark.offset" dataType:0 requestOnly:1 extractBlock:v12 setValueBlock:v10];
  v28[3] = v7;
  char v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v28 count:4];

  return v8;
}

id __BMEventBookmarkSQLColumns_block_invoke(uint64_t a1, void *a2)
{
  id v2 = [a2 bookmark];
  id v3 = [v2 streamId];

  return v3;
}

id __BMEventBookmarkSQLColumns_block_invoke_2(uint64_t a1, void *a2)
{
  id v2 = [a2 bookmark];
  id v3 = [v2 segmentName];

  return v3;
}

double __BMEventBookmarkSQLColumns_block_invoke_3(uint64_t a1, void *a2)
{
  id v2 = [a2 bookmark];
  [v2 iterationStartTime];
  double v4 = v3;

  return v4;
}

uint64_t __BMEventBookmarkSQLColumns_block_invoke_4(uint64_t a1, void *a2)
{
  id v2 = [a2 bookmark];
  uint64_t v3 = [v2 offset];

  return v3;
}

uint64_t __BMEventBookmarkSQLColumns_block_invoke_5(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
  double v4 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v5 = v4;
  if (v4) {
    sqlite3_result_text(a3, (const char *)[v4 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    sqlite3_result_null(a3);
  }

  return 1;
}

uint64_t __BMEventBookmarkSQLColumns_block_invoke_6(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
  double v4 = (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  id v5 = v4;
  if (v4) {
    sqlite3_result_text(a3, (const char *)[v4 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  }
  else {
    sqlite3_result_null(a3);
  }

  return 1;
}

uint64_t __BMEventBookmarkSQLColumns_block_invoke_7(uint64_t a1)
{
  id v1 = NSNumber;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();

  return objc_msgSend(v1, "numberWithDouble:");
}

uint64_t __BMEventBookmarkSQLColumns_block_invoke_8(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
  double v4 = (*(double (**)(void))(*(void *)(a1 + 32) + 16))();
  sqlite3_result_double(a3, v4);
  return 1;
}

uint64_t __BMEventBookmarkSQLColumns_block_invoke_9(uint64_t a1)
{
  id v1 = NSNumber;
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();

  return [v1 numberWithUnsignedLong:v2];
}

uint64_t __BMEventBookmarkSQLColumns_block_invoke_10(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
  sqlite3_int64 v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  sqlite3_result_int64(a3, v4);
  return 1;
}

uint64_t BMPBUserFocusActivityEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  sqlite3_int64 v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 8;
      }
      else
      {
        if (v17 != 2)
        {
          if (v17 == 1)
          {
            char v18 = 0;
            unsigned int v19 = 0;
            uint64_t v20 = 0;
            *(unsigned char *)(a1 + 28) |= 1u;
            while (1)
            {
              uint64_t v21 = *v3;
              unint64_t v22 = *(void *)(a2 + v21);
              if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
                break;
              }
              char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
              *(void *)(a2 + v21) = v22 + 1;
              v20 |= (unint64_t)(v23 & 0x7F) << v18;
              if ((v23 & 0x80) == 0) {
                goto LABEL_34;
              }
              v18 += 7;
              BOOL v14 = v19++ >= 9;
              if (v14)
              {
                uint64_t v20 = 0;
                goto LABEL_36;
              }
            }
            *(unsigned char *)(a2 + *v5) = 1;
LABEL_34:
            if (*(unsigned char *)(a2 + *v5)) {
              uint64_t v20 = 0;
            }
LABEL_36:
            *(unsigned char *)(a1 + 24) = v20 != 0;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v24 = PBReaderReadString();
        uint64_t v25 = 16;
      }
      uint64_t v26 = *(void **)(a1 + v25);
      *(void *)(a1 + v25) = v24;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL BMPBPersonNameReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  sqlite3_int64 v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        char v18 = *(BMPBNameComponents **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v17;
LABEL_24:

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v18 = objc_alloc_init(BMPBNameComponents);
    objc_storeStrong((id *)(a1 + 16), v18);
    if (!PBReaderPlaceMark() || !BMPBNameComponentsReadFrom((uint64_t)v18, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_18E73F064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_18E73F4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location,id a21)
{
  objc_destroyWeak(v23);
  objc_destroyWeak(v22);
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  objc_destroyWeak(&a21);
  _Unwind_Resume(a1);
}

id get_DKKnowledgeStoreClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKKnowledgeStoreClass_softClass;
  uint64_t v7 = get_DKKnowledgeStoreClass_softClass;
  if (!get_DKKnowledgeStoreClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKKnowledgeStoreClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKKnowledgeStoreClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E742578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_CDClientContextClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_CDClientContextClass_softClass;
  uint64_t v7 = get_CDClientContextClass_softClass;
  if (!get_CDClientContextClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_CDClientContextClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_CDClientContextClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E74265C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_CDContextQueriesClass_0()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_CDContextQueriesClass_softClass_0;
  uint64_t v7 = get_CDContextQueriesClass_softClass_0;
  if (!get_CDContextQueriesClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_CDContextQueriesClass_block_invoke_0;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_CDContextQueriesClass_block_invoke_0((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E74311C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKAppClipUsageMetadataKeyClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKAppClipUsageMetadataKeyClass_softClass;
  uint64_t v7 = get_DKAppClipUsageMetadataKeyClass_softClass;
  if (!get_DKAppClipUsageMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKAppClipUsageMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKAppClipUsageMetadataKeyClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E744470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKEventClass_0()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKEventClass_softClass_0;
  uint64_t v7 = get_DKEventClass_softClass_0;
  if (!get_DKEventClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKEventClass_block_invoke_0;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKEventClass_block_invoke_0((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E744554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKSystemEventStreamsClass_0()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKSystemEventStreamsClass_softClass_0;
  uint64_t v7 = get_DKSystemEventStreamsClass_softClass_0;
  if (!get_DKSystemEventStreamsClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKSystemEventStreamsClass_block_invoke_0;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKSystemEventStreamsClass_block_invoke_0((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E744638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CoreDuetLibrary_0()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!CoreDuetLibraryCore_frameworkLibrary_2)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __CoreDuetLibraryCore_block_invoke_2;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E55D75A8;
    uint64_t v2 = 0;
    CoreDuetLibraryCore_frameworkLibrary_2 = _sl_dlopen();
  }
  if (!CoreDuetLibraryCore_frameworkLibrary_2) {
    CoreDuetLibrary_cold_1_0(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __CoreDuetLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  CoreDuetLibraryCore_frameworkLibrary_2 = result;
  return result;
}

void CoreDuetContextLibrary()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!CoreDuetContextLibraryCore_frameworkLibrary_0)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __CoreDuetContextLibraryCore_block_invoke_0;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E55D75C0;
    uint64_t v2 = 0;
    CoreDuetContextLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!CoreDuetContextLibraryCore_frameworkLibrary_0) {
    CoreDuetContextLibrary_cold_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __CoreDuetContextLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  CoreDuetContextLibraryCore_frameworkLibrary_0 = result;
  return result;
}

id get_DKAppMediaUsageMetadataKeyClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKAppMediaUsageMetadataKeyClass_softClass;
  uint64_t v7 = get_DKAppMediaUsageMetadataKeyClass_softClass;
  if (!get_DKAppMediaUsageMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKAppMediaUsageMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKAppMediaUsageMetadataKeyClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E744D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKDigitalHealthMetadataKeyClass_0()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKDigitalHealthMetadataKeyClass_softClass_0;
  uint64_t v7 = get_DKDigitalHealthMetadataKeyClass_softClass_0;
  if (!get_DKDigitalHealthMetadataKeyClass_softClass_0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKDigitalHealthMetadataKeyClass_block_invoke_0;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKDigitalHealthMetadataKeyClass_block_invoke_0((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E744E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t BMPBSleepModeEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        uint64_t v26 = *v3;
        unint64_t v27 = *(void *)(a2 + v26);
        if (v27 <= 0xFFFFFFFFFFFFFFF7 && v27 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v28 = *(void *)(*(void *)(a2 + *v7) + v27);
          *(void *)(a2 + v26) = v27 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v28 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v28;
      }
      else
      {
        if (v18 == 2)
        {
          char v29 = 0;
          unsigned int v30 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 24) |= 2u;
          while (1)
          {
            uint64_t v31 = *v3;
            uint64_t v32 = *(void *)(a2 + v31);
            unint64_t v33 = v32 + 1;
            if (v32 == -1 || v33 > *(void *)(a2 + *v4)) {
              break;
            }
            char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
            *(void *)(a2 + v31) = v33;
            v21 |= (unint64_t)(v34 & 0x7F) << v29;
            if ((v34 & 0x80) == 0) {
              goto LABEL_45;
            }
            v29 += 7;
            BOOL v15 = v30++ >= 9;
            if (v15)
            {
              LODWORD(v21) = 0;
              goto LABEL_47;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_45:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_47:
          uint64_t v36 = 16;
        }
        else
        {
          if (v18 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          char v19 = 0;
          unsigned int v20 = 0;
          uint64_t v21 = 0;
          *(unsigned char *)(a1 + 24) |= 4u;
          while (1)
          {
            uint64_t v22 = *v3;
            uint64_t v23 = *(void *)(a2 + v22);
            unint64_t v24 = v23 + 1;
            if (v23 == -1 || v24 > *(void *)(a2 + *v4)) {
              break;
            }
            char v25 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v24;
            v21 |= (unint64_t)(v25 & 0x7F) << v19;
            if ((v25 & 0x80) == 0) {
              goto LABEL_41;
            }
            v19 += 7;
            BOOL v15 = v20++ >= 9;
            if (v15)
            {
              LODWORD(v21) = 0;
              goto LABEL_43;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v21) = 0;
          }
LABEL_43:
          uint64_t v36 = 20;
        }
        *(_DWORD *)(a1 + v36) = v21;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBSiriUIEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
          goto LABEL_25;
        case 2u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 32;
          goto LABEL_25;
        case 3u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 40;
          goto LABEL_25;
        case 4u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 16;
LABEL_25:
          uint64_t v21 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        case 5u:
          char v22 = 0;
          unsigned int v23 = 0;
          uint64_t v24 = 0;
          *(unsigned char *)(a1 + 52) |= 2u;
          break;
        case 6u:
          *(unsigned char *)(a1 + 52) |= 1u;
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v31 = *(void *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v31 = 0;
          }
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = v31;
          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v25 = *v3;
        uint64_t v26 = *(void *)(a2 + v25);
        unint64_t v27 = v26 + 1;
        if (v26 == -1 || v27 > *(void *)(a2 + *v4)) {
          break;
        }
        char v28 = *(unsigned char *)(*(void *)(a2 + *v7) + v26);
        *(void *)(a2 + v25) = v27;
        v24 |= (unint64_t)(v28 & 0x7F) << v22;
        if ((v28 & 0x80) == 0) {
          goto LABEL_37;
        }
        v22 += 7;
        BOOL v15 = v23++ >= 9;
        if (v15)
        {
          uint64_t v24 = 0;
          goto LABEL_39;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_37:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v24 = 0;
      }
LABEL_39:
      *(unsigned char *)(a1 + 4_Block_object_dispose(&a9, 8) = v24 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBScreenRecordingEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2errstart(20, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_31:
        *(unsigned char *)(a1 + _Block_object_dispose(&a9, 8) = v19 != 0;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t __CoreDuetLibraryCore_block_invoke_3()
{
  uint64_t result = _sl_dlopen();
  CoreDuetLibraryCore_frameworkLibrary_3 = result;
  return result;
}

BOOL BMPBPhotosKnowledgeGraphEnrichmentLocationReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 40;
          goto LABEL_24;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_24;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_24;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_24;
        case 5u:
          uint64_t v17 = PBReaderReadData();
          uint64_t v18 = 24;
LABEL_24:
          uint64_t v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&a9, 8) = v17;

          goto LABEL_25;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_25:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBPhotosKnowledgeGraphEnrichmentEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + 64) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v1_Block_object_dispose(&a9, 8) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v20;
        goto LABEL_39;
      case 2u:
        char v22 = objc_alloc_init(BMPBPhotosKnowledgeGraphEnrichmentTopic);
        [(id)a1 addTopics:v22];
        if (!PBReaderPlaceMark()
          || (BMPBPhotosKnowledgeGraphEnrichmentTopicReadFrom((uint64_t)v22, a2) & 1) == 0)
        {
          goto LABEL_41;
        }
        goto LABEL_32;
      case 3u:
        char v22 = objc_alloc_init(BMPBPhotosKnowledgeGraphEnrichmentEntity);
        [(id)a1 addEntities:v22];
        if (!PBReaderPlaceMark()
          || (BMPBPhotosKnowledgeGraphEnrichmentEntityReadFrom((uint64_t)v22, a2) & 1) == 0)
        {
          goto LABEL_41;
        }
        goto LABEL_32;
      case 4u:
        char v22 = objc_alloc_init(BMPBPhotosKnowledgeGraphEnrichmentLocation);
        [(id)a1 addLocations:v22];
        if (PBReaderPlaceMark() && BMPBPhotosKnowledgeGraphEnrichmentLocationReadFrom((uint64_t)v22, a2))
        {
LABEL_32:
          PBReaderRecallMark();

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_41:

        return 0;
      case 5u:
        uint64_t v23 = PBReaderReadString();
        uint64_t v24 = 56;
        goto LABEL_36;
      case 6u:
        uint64_t v23 = PBReaderReadString();
        uint64_t v24 = 16;
        goto LABEL_36;
      case 7u:
        uint64_t v23 = PBReaderReadString();
        uint64_t v24 = 40;
LABEL_36:
        uint64_t v25 = *(void **)(a1 + v24);
        *(void *)(a1 + v24) = v23;

        goto LABEL_39;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_39;
    }
  }
}

BOOL BMPBUserActivityMetadataTopicReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
LABEL_22:
        unint64_t v19 = *(void **)(a1 + v18);
        *(void *)(a1 + v1_Block_object_dispose(&a9, 8) = v17;

        goto LABEL_24;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_24:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v17 = PBReaderReadString();
    uint64_t v18 = 8;
    goto LABEL_22;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBAppLaunchEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 48;
          goto LABEL_47;
        case 2u:
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 84) |= 4u;
          while (2)
          {
            uint64_t v24 = *v3;
            uint64_t v25 = *(void *)(a2 + v24);
            unint64_t v26 = v25 + 1;
            if (v25 == -1 || v26 > *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
              *(void *)(a2 + v24) = v26;
              v23 |= (unint64_t)(v27 & 0x7F) << v21;
              if (v27 < 0)
              {
                v21 += 7;
                BOOL v15 = v22++ >= 9;
                if (v15)
                {
                  LODWORD(v23) = 0;
                  goto LABEL_51;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v23) = 0;
          }
LABEL_51:
          *(_DWORD *)(a1 + 56) = v23;
          continue;
        case 3u:
          char v28 = 0;
          unsigned int v29 = 0;
          uint64_t v30 = 0;
          *(unsigned char *)(a1 + 84) |= 8u;
          break;
        case 4u:
          *(unsigned char *)(a1 + 84) |= 1u;
          uint64_t v35 = *v3;
          unint64_t v36 = *(void *)(a2 + v35);
          if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v37 = *(void *)(*(void *)(a2 + *v7) + v36);
            *(void *)(a2 + v35) = v36 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v37 = 0;
          }
          uint64_t v41 = 8;
          goto LABEL_60;
        case 5u:
          *(unsigned char *)(a1 + 84) |= 2u;
          uint64_t v38 = *v3;
          unint64_t v39 = *(void *)(a2 + v38);
          if (v39 <= 0xFFFFFFFFFFFFFFF7 && v39 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v37 = *(void *)(*(void *)(a2 + *v7) + v39);
            *(void *)(a2 + v3_Block_object_dispose(&a9, 8) = v39 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v37 = 0;
          }
          uint64_t v41 = 16;
LABEL_60:
          *(void *)(a1 + v41) = v37;
          continue;
        case 6u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
          goto LABEL_47;
        case 7u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 64;
          goto LABEL_47;
        case 8u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 40;
          goto LABEL_47;
        case 9u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 72;
          goto LABEL_47;
        case 0xAu:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 32;
LABEL_47:
          char v40 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v31 = *v3;
        uint64_t v32 = *(void *)(a2 + v31);
        unint64_t v33 = v32 + 1;
        if (v32 == -1 || v33 > *(void *)(a2 + *v4)) {
          break;
        }
        char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v32);
        *(void *)(a2 + v31) = v33;
        v30 |= (unint64_t)(v34 & 0x7F) << v28;
        if ((v34 & 0x80) == 0) {
          goto LABEL_53;
        }
        v28 += 7;
        BOOL v15 = v29++ >= 9;
        if (v15)
        {
          uint64_t v30 = 0;
          goto LABEL_55;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v30 = 0;
      }
LABEL_55:
      *(unsigned char *)(a1 + 8errstart(20, 0) = v30 != 0;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBPOICategoryEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 28) |= 1u;
        uint64_t v21 = *v3;
        unint64_t v22 = *(void *)(a2 + v21);
        if (v22 <= 0xFFFFFFFFFFFFFFF7 && v22 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v23 = *(void *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v23 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v23;
      }
      else if (v18 == 2)
      {
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0;
        *(unsigned char *)(a1 + 28) |= 2u;
        while (1)
        {
          uint64_t v27 = *v3;
          uint64_t v28 = *(void *)(a2 + v27);
          unint64_t v29 = v28 + 1;
          if (v28 == -1 || v29 > *(void *)(a2 + *v4)) {
            break;
          }
          char v30 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
          *(void *)(a2 + v27) = v29;
          v26 |= (unint64_t)(v30 & 0x7F) << v24;
          if ((v30 & 0x80) == 0) {
            goto LABEL_35;
          }
          v24 += 7;
          BOOL v15 = v25++ >= 9;
          if (v15)
          {
            LODWORD(v26) = 0;
            goto LABEL_37;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_35:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v26) = 0;
        }
LABEL_37:
        *(_DWORD *)(a1 + 24) = v26;
      }
      else if (v18 == 1)
      {
        uint64_t v19 = PBReaderReadString();
        uint64_t v20 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v19;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBThirdPartyAppContentEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 80;
              goto LABEL_33;
            case 2u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 56;
              goto LABEL_33;
            case 3u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 16;
              goto LABEL_33;
            case 4u:
              *(unsigned char *)(a1 + 88) |= 1u;
              uint64_t v20 = *v3;
              unint64_t v21 = *(void *)(a2 + v20);
              if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
                *(void *)(a2 + v2errstart(20, 0) = v21 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v22 = 0;
              }
              *(void *)(a1 + _Block_object_dispose(&a9, 8) = v22;
              goto LABEL_34;
            case 5u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 72;
              goto LABEL_33;
            case 6u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 48;
              goto LABEL_33;
            case 7u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 24;
              goto LABEL_33;
            case 8u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 32;
              goto LABEL_33;
            case 9u:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 40;
              goto LABEL_33;
            case 0xAu:
              uint64_t v18 = PBReaderReadString();
              uint64_t v19 = 64;
LABEL_33:
              char v24 = *(void **)(a1 + v19);
              *(void *)(a1 + v19) = v18;

              goto LABEL_34;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_34:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL BMPBSiriIntentEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
        goto LABEL_24;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
LABEL_24:
        uint64_t v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadData();
    uint64_t v19 = 8;
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMNotificationEventUsageTypeFromDKIdentifierValue(void *a1)
{
  id v1 = a1;
  if ([v1 isEqual:@"Receive"])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqual:@"DefaultAction"])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqual:@"SuppAction"])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqual:@"Clear"])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqual:@"ClearAll"])
  {
    uint64_t v2 = 5;
  }
  else if ([v1 isEqual:@"IndirectClear"])
  {
    uint64_t v2 = 6;
  }
  else if ([v1 isEqual:@"Hidden"])
  {
    uint64_t v2 = 7;
  }
  else if ([v1 isEqual:@"Orb"])
  {
    uint64_t v2 = 8;
  }
  else if ([v1 isEqual:@"Dismiss"])
  {
    uint64_t v2 = 9;
  }
  else if ([v1 isEqual:@"AppLaunch"])
  {
    uint64_t v2 = 10;
  }
  else if ([v1 isEqual:@"Expired"])
  {
    uint64_t v2 = 11;
  }
  else if ([v1 isEqual:@"Pulldown"])
  {
    uint64_t v2 = 16;
  }
  else if ([v1 isEqual:@"TapCoalesce"])
  {
    uint64_t v2 = 12;
  }
  else if ([v1 isEqual:@"Deduped"])
  {
    uint64_t v2 = 13;
  }
  else if ([v1 isEqual:@"DevActivated"])
  {
    uint64_t v2 = 14;
  }
  else if ([v1 isEqual:@"DevUnlocked"])
  {
    uint64_t v2 = 15;
  }
  else if ([v1 isEqual:@"ReceivedAndDeliveredProminently"])
  {
    uint64_t v2 = 17;
  }
  else if ([v1 isEqual:@"ReceivedAndDeliveredNonprominently"])
  {
    uint64_t v2 = 18;
  }
  else if ([v1 isEqual:@"Modified"])
  {
    uint64_t v2 = 19;
  }
  else if ([v1 isEqual:@"TapExpand"])
  {
    uint64_t v2 = 20;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

id get_DKNotificationUsageMetadataKeyClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKNotificationUsageMetadataKeyClass_softClass;
  uint64_t v7 = get_DKNotificationUsageMetadataKeyClass_softClass;
  if (!get_DKNotificationUsageMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKNotificationUsageMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKNotificationUsageMetadataKeyClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E754A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CoreDuetLibraryCore_block_invoke_4()
{
  uint64_t result = _sl_dlopen();
  CoreDuetLibraryCore_frameworkLibrary_4 = result;
  return result;
}

id get_DKPREventClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKPREventClass_softClass;
  uint64_t v7 = get_DKPREventClass_softClass;
  if (!get_DKPREventClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKPREventClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKPREventClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E755C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id get_DKEventClass_1()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)get_DKEventClass_softClass_1;
  uint64_t v7 = get_DKEventClass_softClass_1;
  if (!get_DKEventClass_softClass_1)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKEventClass_block_invoke_1;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKEventClass_block_invoke_1((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E755D00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CoreDuetLibrary_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!CoreDuetLibraryCore_frameworkLibrary_5)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __CoreDuetLibraryCore_block_invoke_5;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E55D7780;
    uint64_t v2 = 0;
    CoreDuetLibraryCore_frameworkLibrary_5 = _sl_dlopen();
  }
  if (!CoreDuetLibraryCore_frameworkLibrary_5) {
    CoreDuetLibrary_cold_1_1(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __CoreDuetLibraryCore_block_invoke_5()
{
  uint64_t result = _sl_dlopen();
  CoreDuetLibraryCore_frameworkLibrary_5 = result;
  return result;
}

BOOL BMPBContentAttachmentReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
        goto LABEL_24;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
LABEL_24:
        uint64_t v20 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_26:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v18 = PBReaderReadString();
    uint64_t v19 = 16;
    goto LABEL_24;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBSiriPrivateLearningSELFEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        uint64_t v22 = PBReaderReadData();
        uint64_t v23 = 16;
      }
      else
      {
        if (v18 != 2)
        {
          if (v18 == 1)
          {
            *(unsigned char *)(a1 + 32) |= 1u;
            uint64_t v19 = *v3;
            unint64_t v20 = *(void *)(a2 + v19);
            if (v20 <= 0xFFFFFFFFFFFFFFF7 && v20 + 8 <= *(void *)(a2 + *v4))
            {
              uint64_t v21 = *(void *)(*(void *)(a2 + *v7) + v20);
              *(void *)(a2 + v19) = v20 + 8;
            }
            else
            {
              *(unsigned char *)(a2 + *v5) = 1;
              uint64_t v21 = 0;
            }
            *(void *)(a1 + _Block_object_dispose(&a9, 8) = v21;
          }
          else
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
          }
          continue;
        }
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 24;
      }
      char v24 = *(void **)(a1 + v23);
      *(void *)(a1 + v23) = v22;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBSiriQueryResultReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v18 = v10 >> 3;
      if ((v10 >> 3) == 3)
      {
        *(unsigned char *)(a1 + 32) |= 1u;
        uint64_t v22 = *v3;
        unint64_t v23 = *(void *)(a2 + v22);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v24 = *(void *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v24 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v24;
      }
      else
      {
        if (v18 == 2)
        {
          uint64_t v19 = PBReaderReadString();
          uint64_t v20 = 16;
        }
        else
        {
          if (v18 != 1)
          {
            uint64_t result = PBReaderSkipValueWithTag();
            if (!result) {
              return result;
            }
            continue;
          }
          uint64_t v19 = PBReaderReadString();
          uint64_t v20 = 24;
        }
        uint64_t v21 = *(void **)(a1 + v20);
        *(void *)(a1 + v2errstart(20, 0) = v19;
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBPhotosPhotoViewEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (2)
    {
      if (!*(unsigned char *)(a2 + *v5))
      {
        char v8 = 0;
        unsigned int v9 = 0;
        unint64_t v10 = 0;
        while (1)
        {
          uint64_t v11 = *v3;
          uint64_t v12 = *(void *)(a2 + v11);
          unint64_t v13 = v12 + 1;
          if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
            break;
          }
          char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
          *(void *)(a2 + v11) = v13;
          v10 |= (unint64_t)(v14 & 0x7F) << v8;
          if ((v14 & 0x80) == 0) {
            goto LABEL_12;
          }
          v8 += 7;
          if (v9++ >= 9)
          {
            unint64_t v10 = 0;
            int v16 = *(unsigned __int8 *)(a2 + *v5);
            goto LABEL_14;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        if (*(unsigned char *)(a2 + *v5)) {
          unint64_t v10 = 0;
        }
LABEL_14:
        if (v16) {
          BOOL v17 = 1;
        }
        else {
          BOOL v17 = (v10 & 7) == 4;
        }
        if (!v17)
        {
          switch((v10 >> 3))
          {
            case 1u:
              unint64_t v18 = PBReaderReadString();
              if (v18) {
                [(id)a1 addLocations:v18];
              }

              goto LABEL_33;
            case 2u:
              *(unsigned char *)(a1 + 48) |= 1u;
              uint64_t v23 = *v3;
              unint64_t v24 = *(void *)(a2 + v23);
              if (v24 <= 0xFFFFFFFFFFFFFFF7 && v24 + 8 <= *(void *)(a2 + *v4))
              {
                uint64_t v25 = *(void *)(*(void *)(a2 + *v7) + v24);
                *(void *)(a2 + v23) = v24 + 8;
              }
              else
              {
                *(unsigned char *)(a2 + *v5) = 1;
                uint64_t v25 = 0;
              }
              *(void *)(a1 + _Block_object_dispose(&a9, 8) = v25;
              goto LABEL_33;
            case 3u:
              uint64_t v19 = PBReaderReadString();
              uint64_t v20 = 40;
              goto LABEL_25;
            case 4u:
              uint64_t v19 = PBReaderReadString();
              uint64_t v20 = 16;
              goto LABEL_25;
            case 5u:
              uint64_t v19 = PBReaderReadString();
              uint64_t v20 = 32;
LABEL_25:
              uint64_t v21 = *(void **)(a1 + v20);
              *(void *)(a1 + v2errstart(20, 0) = v19;

              goto LABEL_33;
            default:
              uint64_t result = PBReaderSkipValueWithTag();
              if (!result) {
                return result;
              }
LABEL_33:
              if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
                return *(unsigned char *)(a2 + *v5) == 0;
              }
              continue;
          }
        }
      }
      break;
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBHealthKitWorkoutEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  id v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 32) |= 2u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v2errstart(20, 0) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_53;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_55;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_53:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_55:
          BOOL v45 = v19 != 0;
          uint64_t v46 = 28;
          goto LABEL_68;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 32) |= 4u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  uint64_t v26 = 0;
                  goto LABEL_59;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v26 = 0;
          }
LABEL_59:
          BOOL v45 = v26 != 0;
          uint64_t v46 = 29;
          goto LABEL_68;
        case 3u:
          uint64_t v30 = PBReaderReadString();
          uint64_t v31 = 8;
          goto LABEL_44;
        case 4u:
          char v32 = 0;
          unsigned int v33 = 0;
          uint64_t v34 = 0;
          *(unsigned char *)(a1 + 32) |= 1u;
          while (2)
          {
            uint64_t v35 = *v3;
            unint64_t v36 = *(void *)(a2 + v35);
            if (v36 == -1 || v36 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v37 = *(unsigned char *)(*(void *)(a2 + *v7) + v36);
              *(void *)(a2 + v35) = v36 + 1;
              v34 |= (unint64_t)(v37 & 0x7F) << v32;
              if (v37 < 0)
              {
                v32 += 7;
                BOOL v14 = v33++ >= 9;
                if (v14)
                {
                  LODWORD(v34) = 0;
                  goto LABEL_63;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v34) = 0;
          }
LABEL_63:
          *(_DWORD *)(a1 + 24) = v34;
          continue;
        case 5u:
          uint64_t v30 = PBReaderReadString();
          uint64_t v31 = 16;
LABEL_44:
          uint64_t v38 = *(void **)(a1 + v31);
          *(void *)(a1 + v31) = v30;

          continue;
        case 6u:
          char v39 = 0;
          unsigned int v40 = 0;
          uint64_t v41 = 0;
          *(unsigned char *)(a1 + 32) |= 8u;
          break;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v42 = *v3;
        unint64_t v43 = *(void *)(a2 + v42);
        if (v43 == -1 || v43 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v44 = *(unsigned char *)(*(void *)(a2 + *v7) + v43);
        *(void *)(a2 + v42) = v43 + 1;
        v41 |= (unint64_t)(v44 & 0x7F) << v39;
        if ((v44 & 0x80) == 0) {
          goto LABEL_65;
        }
        v39 += 7;
        BOOL v14 = v40++ >= 9;
        if (v14)
        {
          uint64_t v41 = 0;
          goto LABEL_67;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_65:
      if (*(unsigned char *)(a2 + *v5)) {
        uint64_t v41 = 0;
      }
LABEL_67:
      BOOL v45 = v41 != 0;
      uint64_t v46 = 30;
LABEL_68:
      *(unsigned char *)(a1 + v46) = v45;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id getBMAppInFocusIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMAppInFocusIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMAppInFocusIdentifierSymbolLoc_ptr;
  if (!getBMAppInFocusIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMAppInFocusIdentifier");
    getBMAppInFocusIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMAppInFocusIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E7601E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMAppIntentIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMAppIntentIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMAppIntentIdentifierSymbolLoc_ptr;
  if (!getBMAppIntentIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMAppIntentIdentifier");
    getBMAppIntentIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMAppIntentIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E7602F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersInteractionHistoryIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriRemembersInteractionHistoryIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriRemembersInteractionHistoryIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersInteractionHistoryIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriRemembersInteractionHistoryIdentifier");
    getBMSiriRemembersInteractionHistoryIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriRemembersInteractionHistoryIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E7603F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersMessageHistoryIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriRemembersMessageHistoryIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriRemembersMessageHistoryIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersMessageHistoryIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriRemembersMessageHistoryIdentifier");
    getBMSiriRemembersMessageHistoryIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriRemembersMessageHistoryIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E760500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersCallHistoryIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriRemembersCallHistoryIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriRemembersCallHistoryIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersCallHistoryIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriRemembersCallHistoryIdentifier");
    getBMSiriRemembersCallHistoryIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriRemembersCallHistoryIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E760608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersAudioHistoryIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriRemembersAudioHistoryIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriRemembersAudioHistoryIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersAudioHistoryIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriRemembersAudioHistoryIdentifier");
    getBMSiriRemembersAudioHistoryIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriRemembersAudioHistoryIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E760710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMFrontBoardDisplayElementIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMFrontBoardDisplayElementIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMFrontBoardDisplayElementIdentifierSymbolLoc_ptr;
  if (!getBMFrontBoardDisplayElementIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMFrontBoardDisplayElementIdentifier");
    getBMFrontBoardDisplayElementIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMFrontBoardDisplayElementIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E760818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMScreenTimeAppUsageIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMScreenTimeAppUsageIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMScreenTimeAppUsageIdentifierSymbolLoc_ptr;
  if (!getBMScreenTimeAppUsageIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMScreenTimeAppUsageIdentifier");
    getBMScreenTimeAppUsageIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMScreenTimeAppUsageIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E760920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMIntelligenceEngineInteractionDonationIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMIntelligenceEngineInteractionDonationIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMIntelligenceEngineInteractionDonationIdentifierSymbolLoc_ptr;
  if (!getBMIntelligenceEngineInteractionDonationIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMIntelligenceEngineInteractionDonationIdentifier");
    getBMIntelligenceEngineInteractionDonationIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMIntelligenceEngineInteractionDonationIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E760A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMAppLocationActivityIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMAppLocationActivityIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMAppLocationActivityIdentifierSymbolLoc_ptr;
  if (!getBMAppLocationActivityIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMAppLocationActivityIdentifier");
    getBMAppLocationActivityIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMAppLocationActivityIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E760B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMMediaNowPlayingIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMMediaNowPlayingIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMMediaNowPlayingIdentifierSymbolLoc_ptr;
  if (!getBMMediaNowPlayingIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMMediaNowPlayingIdentifier");
    getBMMediaNowPlayingIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMMediaNowPlayingIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E760C38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersAssistantSuggestionsIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriRemembersAssistantSuggestionsIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriRemembersAssistantSuggestionsIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersAssistantSuggestionsIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriRemembersAssistantSuggestionsIdentifier");
    getBMSiriRemembersAssistantSuggestionsIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriRemembersAssistantSuggestionsIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E761034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriAppSelectionMusicIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriAppSelectionMusicIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriAppSelectionMusicIdentifierSymbolLoc_ptr;
  if (!getBMSiriAppSelectionMusicIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriAppSelectionMusicIdentifier");
    getBMSiriAppSelectionMusicIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriAppSelectionMusicIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E761918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriExecutionIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriExecutionIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriExecutionIdentifierSymbolLoc_ptr;
  if (!getBMSiriExecutionIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriExecutionIdentifier");
    getBMSiriExecutionIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriExecutionIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E761A20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriFeedbackLearningUserInteractionsIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriFeedbackLearningUserInteractionsIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriFeedbackLearningUserInteractionsIdentifierSymbolLoc_ptr;
  if (!getBMSiriFeedbackLearningUserInteractionsIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriFeedbackLearningUserInteractionsIdentifier");
    getBMSiriFeedbackLearningUserInteractionsIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriFeedbackLearningUserInteractionsIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E761B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriPostSiriEngagementIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriPostSiriEngagementIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriPostSiriEngagementIdentifierSymbolLoc_ptr;
  if (!getBMSiriPostSiriEngagementIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriPostSiriEngagementIdentifier");
    getBMSiriPostSiriEngagementIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriPostSiriEngagementIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E761C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriPrivateLearningSELFEventIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriPrivateLearningSELFEventIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriPrivateLearningSELFEventIdentifierSymbolLoc_ptr;
  if (!getBMSiriPrivateLearningSELFEventIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriPrivateLearningSELFEventIdentifier");
    getBMSiriPrivateLearningSELFEventIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriPrivateLearningSELFEventIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E761D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriRemembersIntentIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriRemembersIntentIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriRemembersIntentIdentifierSymbolLoc_ptr;
  if (!getBMSiriRemembersIntentIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriRemembersIntentIdentifier");
    getBMSiriRemembersIntentIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriRemembersIntentIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E761E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriSELFProcessedEventIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriSELFProcessedEventIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriSELFProcessedEventIdentifierSymbolLoc_ptr;
  if (!getBMSiriSELFProcessedEventIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriSELFProcessedEventIdentifier");
    getBMSiriSELFProcessedEventIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriSELFProcessedEventIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E761F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMDictationUserEditIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMDictationUserEditIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMDictationUserEditIdentifierSymbolLoc_ptr;
  if (!getBMDictationUserEditIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMDictationUserEditIdentifier");
    getBMDictationUserEditIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMDictationUserEditIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E762050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMProactiveHarvestingSiriQueryIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMProactiveHarvestingSiriQueryIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMProactiveHarvestingSiriQueryIdentifierSymbolLoc_ptr;
  if (!getBMProactiveHarvestingSiriQueryIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMProactiveHarvestingSiriQueryIdentifier");
    getBMProactiveHarvestingSiriQueryIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMProactiveHarvestingSiriQueryIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E762158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriDictationIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriDictationIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriDictationIdentifierSymbolLoc_ptr;
  if (!getBMSiriDictationIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriDictationIdentifier");
    getBMSiriDictationIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriDictationIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E762260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriServiceIdentifier()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2020000000;
  int v0 = (void **)getBMSiriServiceIdentifierSymbolLoc_ptr;
  uint64_t v7 = getBMSiriServiceIdentifierSymbolLoc_ptr;
  if (!getBMSiriServiceIdentifierSymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary();
    v5[3] = (uint64_t)dlsym(v1, "BMSiriServiceIdentifier");
    getBMSiriServiceIdentifierSymbolLoc_ptr = v5[3];
    int v0 = (void **)v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    getBMSiriServiceIdentifier_cold_1();
  }
  uint64_t v2 = *v0;

  return v2;
}

void sub_18E762368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E76287C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E762AD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E762C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E763A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

id getBMAppIntentClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getBMAppIntentClass_softClass;
  uint64_t v7 = getBMAppIntentClass_softClass;
  if (!getBMAppIntentClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMAppIntentClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __getBMAppIntentClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E763BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriInteractionHistoryClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getBMSiriInteractionHistoryClass_softClass;
  uint64_t v7 = getBMSiriInteractionHistoryClass_softClass;
  if (!getBMSiriInteractionHistoryClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMSiriInteractionHistoryClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __getBMSiriInteractionHistoryClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E763CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriMessageHistoryClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getBMSiriMessageHistoryClass_softClass;
  uint64_t v7 = getBMSiriMessageHistoryClass_softClass;
  if (!getBMSiriMessageHistoryClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMSiriMessageHistoryClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __getBMSiriMessageHistoryClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E763DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriCallHistoryClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getBMSiriCallHistoryClass_softClass;
  uint64_t v7 = getBMSiriCallHistoryClass_softClass;
  if (!getBMSiriCallHistoryClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMSiriCallHistoryClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __getBMSiriCallHistoryClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E763E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriAssistantSuggestionsClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getBMSiriAssistantSuggestionsClass_softClass;
  uint64_t v7 = getBMSiriAssistantSuggestionsClass_softClass;
  if (!getBMSiriAssistantSuggestionsClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMSiriAssistantSuggestionsClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __getBMSiriAssistantSuggestionsClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E763F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMSiriAudioHistoryClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getBMSiriAudioHistoryClass_softClass;
  uint64_t v7 = getBMSiriAudioHistoryClass_softClass;
  if (!getBMSiriAudioHistoryClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMSiriAudioHistoryClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __getBMSiriAudioHistoryClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E76405C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMFrontBoardDisplayElementClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getBMFrontBoardDisplayElementClass_softClass;
  uint64_t v7 = getBMFrontBoardDisplayElementClass_softClass;
  if (!getBMFrontBoardDisplayElementClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMFrontBoardDisplayElementClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __getBMFrontBoardDisplayElementClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E764140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMScreenTimeAppUsageClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getBMScreenTimeAppUsageClass_softClass;
  uint64_t v7 = getBMScreenTimeAppUsageClass_softClass;
  if (!getBMScreenTimeAppUsageClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMScreenTimeAppUsageClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __getBMScreenTimeAppUsageClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E764224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMIntelligenceEngineInteractionClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getBMIntelligenceEngineInteractionClass_softClass;
  uint64_t v7 = getBMIntelligenceEngineInteractionClass_softClass;
  if (!getBMIntelligenceEngineInteractionClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMIntelligenceEngineInteractionClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __getBMIntelligenceEngineInteractionClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E764308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMAppLocationActivityClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getBMAppLocationActivityClass_softClass;
  uint64_t v7 = getBMAppLocationActivityClass_softClass;
  if (!getBMAppLocationActivityClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMAppLocationActivityClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __getBMAppLocationActivityClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E7643EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getBMMediaNowPlayingClass()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  int v0 = (void *)getBMMediaNowPlayingClass_softClass;
  uint64_t v7 = getBMMediaNowPlayingClass_softClass;
  if (!getBMMediaNowPlayingClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMMediaNowPlayingClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __getBMMediaNowPlayingClass_block_invoke((uint64_t)v3);
    int v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E7644D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__getBMAppInFocusIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMAppInFocusIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMAppInFocusIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t BiomeLibraryLibrary()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!BiomeLibraryLibraryCore_frameworkLibrary)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = __BiomeLibraryLibraryCore_block_invoke;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    v2[5] = v2;
    long long v3 = xmmword_1E55D7870;
    uint64_t v4 = 0;
    BiomeLibraryLibraryCore_frameworkLibrary = _sl_dlopen();
  }
  uint64_t v0 = BiomeLibraryLibraryCore_frameworkLibrary;
  if (!BiomeLibraryLibraryCore_frameworkLibrary) {
    BiomeLibraryLibrary_cold_1(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __BiomeLibraryLibraryCore_block_invoke()
{
  uint64_t result = _sl_dlopen();
  BiomeLibraryLibraryCore_frameworkLibrary = result;
  return result;
}

void *__getBMAppIntentIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMAppIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMAppIntentIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMSiriRemembersInteractionHistoryIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriRemembersInteractionHistoryIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriRemembersInteractionHistoryIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                          + 24);
  return result;
}

void *__getBMSiriRemembersMessageHistoryIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriRemembersMessageHistoryIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriRemembersMessageHistoryIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMSiriRemembersCallHistoryIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriRemembersCallHistoryIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriRemembersCallHistoryIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMSiriRemembersAudioHistoryIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriRemembersAudioHistoryIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriRemembersAudioHistoryIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMFrontBoardDisplayElementIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMFrontBoardDisplayElementIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMFrontBoardDisplayElementIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMScreenTimeAppUsageIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMScreenTimeAppUsageIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMScreenTimeAppUsageIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMIntelligenceEngineInteractionDonationIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMIntelligenceEngineInteractionDonationIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMIntelligenceEngineInteractionDonationIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                                + 24);
  return result;
}

void *__getBMAppLocationActivityIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMAppLocationActivityIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMAppLocationActivityIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMMediaNowPlayingIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMMediaNowPlayingIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMMediaNowPlayingIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMSiriRemembersAssistantSuggestionsIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriRemembersAssistantSuggestionsIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriRemembersAssistantSuggestionsIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                            + 24);
  return result;
}

void *__getBMSiriAppSelectionMusicIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriAppSelectionMusicIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriAppSelectionMusicIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMSiriExecutionIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriExecutionIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriExecutionIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMSiriFeedbackLearningUserInteractionsIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriFeedbackLearningUserInteractionsIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriFeedbackLearningUserInteractionsIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8)
                                                                               + 24);
  return result;
}

void *__getBMSiriPostSiriEngagementIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriPostSiriEngagementIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriPostSiriEngagementIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMSiriPrivateLearningSELFEventIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriPrivateLearningSELFEventIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriPrivateLearningSELFEventIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMSiriRemembersIntentIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriRemembersIntentIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriRemembersIntentIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMSiriSELFProcessedEventIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriSELFProcessedEventIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriSELFProcessedEventIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMDictationUserEditIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMDictationUserEditIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMDictationUserEditIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMProactiveHarvestingSiriQueryIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMProactiveHarvestingSiriQueryIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMProactiveHarvestingSiriQueryIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMSiriDictationIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriDictationIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriDictationIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMSiriServiceIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMSiriServiceIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMSiriServiceIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMLocationSemanticIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMLocationSemanticIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMLocationSemanticIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMAutonamingMessagesInferencesIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMAutonamingMessagesInferencesIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMAutonamingMessagesInferencesIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMAutonamingMessagesMessageIdsIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMAutonamingMessagesMessageIdsIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMAutonamingMessagesMessageIdsIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *__getBMKeyboardTokenFrequencyIdentifierSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary();
  uint64_t result = dlsym(v2, "BMKeyboardTokenFrequencyIdentifier");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBMKeyboardTokenFrequencyIdentifierSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMAppInFocusClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMAppInFocus");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMAppInFocusClass_block_invoke_cold_1();
  }
  getBMAppInFocusClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMAppIntentClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMAppIntent");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMAppIntentClass_block_invoke_cold_1();
  }
  getBMAppIntentClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMSiriInteractionHistoryClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMSiriInteractionHistory");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMSiriInteractionHistoryClass_block_invoke_cold_1();
  }
  getBMSiriInteractionHistoryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMSiriMessageHistoryClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMSiriMessageHistory");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMSiriMessageHistoryClass_block_invoke_cold_1();
  }
  getBMSiriMessageHistoryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMSiriCallHistoryClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMSiriCallHistory");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMSiriCallHistoryClass_block_invoke_cold_1();
  }
  getBMSiriCallHistoryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMSiriAssistantSuggestionsClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMSiriAssistantSuggestions");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMSiriAssistantSuggestionsClass_block_invoke_cold_1();
  }
  getBMSiriAssistantSuggestionsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMSiriAudioHistoryClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMSiriAudioHistory");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMSiriAudioHistoryClass_block_invoke_cold_1();
  }
  getBMSiriAudioHistoryClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMFrontBoardDisplayElementClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMFrontBoardDisplayElement");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMFrontBoardDisplayElementClass_block_invoke_cold_1();
  }
  getBMFrontBoardDisplayElementClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMScreenTimeAppUsageClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMScreenTimeAppUsage");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMScreenTimeAppUsageClass_block_invoke_cold_1();
  }
  getBMScreenTimeAppUsageClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMIntelligenceEngineInteractionClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMIntelligenceEngineInteraction");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMIntelligenceEngineInteractionClass_block_invoke_cold_1();
  }
  getBMIntelligenceEngineInteractionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMAppLocationActivityClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMAppLocationActivity");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMAppLocationActivityClass_block_invoke_cold_1();
  }
  getBMAppLocationActivityClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMMediaNowPlayingClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary();
  Class result = objc_getClass("BMMediaNowPlaying");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMMediaNowPlayingClass_block_invoke_cold_1();
  }
  getBMMediaNowPlayingClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18E7677F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

id get_DKDiscoverabilitySignalsMetadataKeyClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)get_DKDiscoverabilitySignalsMetadataKeyClass_softClass;
  uint64_t v7 = get_DKDiscoverabilitySignalsMetadataKeyClass_softClass;
  if (!get_DKDiscoverabilitySignalsMetadataKeyClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __get_DKDiscoverabilitySignalsMetadataKeyClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __get_DKDiscoverabilitySignalsMetadataKeyClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E767920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E767B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void CoreDuetLibrary_2()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!CoreDuetLibraryCore_frameworkLibrary_6)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __CoreDuetLibraryCore_block_invoke_6;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E55D78B0;
    uint64_t v2 = 0;
    CoreDuetLibraryCore_frameworkLibrary_6 = _sl_dlopen();
  }
  if (!CoreDuetLibraryCore_frameworkLibrary_6) {
    CoreDuetLibrary_cold_1_2(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __CoreDuetLibraryCore_block_invoke_6()
{
  uint64_t result = _sl_dlopen();
  CoreDuetLibraryCore_frameworkLibrary_6 = result;
  return result;
}

Class __getBMDiscoverabilitySignalsClass_block_invoke(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!BiomeLibraryLibraryCore_frameworkLibrary_0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = __BiomeLibraryLibraryCore_block_invoke_0;
    void v3[4] = &__block_descriptor_40_e5_v8__0l;
    void v3[5] = v3;
    long long v4 = xmmword_1E55D78C8;
    uint64_t v5 = 0;
    BiomeLibraryLibraryCore_frameworkLibrary_0 = _sl_dlopen();
  }
  if (!BiomeLibraryLibraryCore_frameworkLibrary_0) {
    __getBMDiscoverabilitySignalsClass_block_invoke_cold_1(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("BMDiscoverabilitySignals");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMDiscoverabilitySignalsClass_block_invoke_cold_2();
  }
  getBMDiscoverabilitySignalsClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __BiomeLibraryLibraryCore_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  BiomeLibraryLibraryCore_frameworkLibrary_0 = result;
  return result;
}

void CoreDuetContextLibrary_0()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!CoreDuetContextLibraryCore_frameworkLibrary_1)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = __CoreDuetContextLibraryCore_block_invoke_1;
    v0[4] = &__block_descriptor_40_e5_v8__0l;
    v0[5] = v0;
    long long v1 = xmmword_1E55D78E0;
    uint64_t v2 = 0;
    CoreDuetContextLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  if (!CoreDuetContextLibraryCore_frameworkLibrary_1) {
    CoreDuetContextLibrary_cold_1_0(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t __CoreDuetContextLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  CoreDuetContextLibraryCore_frameworkLibrary_1 = result;
  return result;
}

BOOL BMPBHomeKitClientMediaAccessoryControlEventReadFrom(id *a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        char v17 = objc_alloc_init(BMPBHomeKitClientBase);
        objc_storeStrong(a1 + 5, v17);
        if PBReaderPlaceMark() && (BMPBHomeKitClientBaseReadFrom((uint64_t)v17, a2)) {
          goto LABEL_27;
        }
        goto LABEL_42;
      case 2u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 4;
        goto LABEL_37;
      case 3u:
        char v17 = objc_alloc_init(BMPBAccessoryState);
        [a1 addAccessoryState:v17];
        if PBReaderPlaceMark() && (BMPBAccessoryStateReadFrom((uint64_t)v17, a2))
        {
LABEL_27:
          PBReaderRecallMark();
LABEL_38:

LABEL_39:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_42:

        return 0;
      case 4u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 1;
        goto LABEL_37;
      case 5u:
        PBReaderReadString();
        char v17 = (BMPBHomeKitClientBase *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          [a1 addZoneUniqueIdentifiers:v17];
        }
        goto LABEL_38;
      case 6u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 8;
        goto LABEL_37;
      case 7u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 2;
        goto LABEL_37;
      case 8u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 7;
        goto LABEL_37;
      case 9u:
        PBReaderReadString();
        char v17 = (BMPBHomeKitClientBase *)objc_claimAutoreleasedReturnValue();
        if (v17) {
          [a1 addZoneNames:v17];
        }
        goto LABEL_38;
      case 0xAu:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 6;
LABEL_37:
        char v17 = (BMPBHomeKitClientBase *)a1[v19];
        a1[v19] = (id)v18;
        goto LABEL_38;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_39;
    }
  }
}

uint64_t BMPBSocialHighlightFeatureReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        uint64_t v20 = *v3;
        unint64_t v21 = *(void *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2errstart(20, 0) = v21 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v22 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v18;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL BMPBNamedHandleReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_25;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_25;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_25;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
LABEL_25:
          uint64_t v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&a9, 8) = v17;

          goto LABEL_26;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_26:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBWorkoutEventReadFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (int *)MEMORY[0x1E4F940E8];
  long long v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 12) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2errstart(20, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            goto LABEL_29;
          }
          v17 += 7;
          BOOL v14 = v18++ >= 9;
          if (v14)
          {
            uint64_t v19 = 0;
            goto LABEL_31;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_29:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v19 = 0;
        }
LABEL_31:
        *(unsigned char *)(a1 + _Block_object_dispose(&a9, 8) = v19 != 0;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

void sub_18E76E9D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __CoreDuetLibraryCore_block_invoke_7()
{
  uint64_t result = _sl_dlopen();
  CoreDuetLibraryCore_frameworkLibrary_7 = result;
  return result;
}

void sub_18E76F140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id _BiomeLibrary()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000;
  uint64_t v0 = (void (*)(void))getBiomeLibrarySymbolLoc_ptr;
  uint64_t v7 = getBiomeLibrarySymbolLoc_ptr;
  if (!getBiomeLibrarySymbolLoc_ptr)
  {
    long long v1 = (void *)BiomeLibraryLibrary_0();
    v5[3] = (uint64_t)dlsym(v1, "BiomeLibrary");
    getBiomeLibrarySymbolLoc_ptr = (_UNKNOWN *)v5[3];
    uint64_t v0 = (void (*)(void))v5[3];
  }
  _Block_object_dispose(&v4, 8);
  if (!v0) {
    _BiomeLibrary_cold_1();
  }
  uint64_t v2 = v0();

  return v2;
}

void sub_18E76F254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E76FC88(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 224), 8);
  _Block_object_dispose(&STACK[0x250], 8);
  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__3(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4errstart(20, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4errstart(20, 0) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
}

id getBMDeviceBootSessionClass()
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)getBMDeviceBootSessionClass_softClass;
  uint64_t v7 = getBMDeviceBootSessionClass_softClass;
  if (!getBMDeviceBootSessionClass_softClass)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = __getBMDeviceBootSessionClass_block_invoke;
    v3[3] = &unk_1E55D6DA8;
    void v3[4] = &v4;
    __getBMDeviceBootSessionClass_block_invoke((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_18E76FEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_18E770560(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    objc_begin_catch(exception_object);
    uint64_t v3 = *(void *)(*(void *)(v2 + 104) + 8);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 4errstart(20, 0) = 0;

    objc_exception_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void *__getBiomeLibrarySymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryLibrary_0();
  uint64_t result = dlsym(v2, "BiomeLibrary");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBiomeLibrarySymbolLoc_ptr = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t BiomeLibraryLibrary_0()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  v2[0] = 0;
  if (!BiomeLibraryLibraryCore_frameworkLibrary_1)
  {
    v2[1] = (void *)MEMORY[0x1E4F143A8];
    v2[2] = (void *)3221225472;
    v2[3] = __BiomeLibraryLibraryCore_block_invoke_1;
    v2[4] = &__block_descriptor_40_e5_v8__0l;
    v2[5] = v2;
    long long v3 = xmmword_1E55D7A28;
    uint64_t v4 = 0;
    BiomeLibraryLibraryCore_frameworkLibrary_1 = _sl_dlopen();
  }
  uint64_t v0 = BiomeLibraryLibraryCore_frameworkLibrary_1;
  if (!BiomeLibraryLibraryCore_frameworkLibrary_1) {
    BiomeLibraryLibrary_cold_1_0(v2);
  }
  if (v2[0]) {
    free(v2[0]);
  }
  return v0;
}

uint64_t __BiomeLibraryLibraryCore_block_invoke_1()
{
  uint64_t result = _sl_dlopen();
  BiomeLibraryLibraryCore_frameworkLibrary_1 = result;
  return result;
}

Class __getBMDeviceMetadataClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary_0();
  Class result = objc_getClass("BMDeviceMetadata");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMDeviceMetadataClass_block_invoke_cold_1();
  }
  getBMDeviceMetadataClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class __getBMDeviceBootSessionClass_block_invoke(uint64_t a1)
{
  BiomeLibraryLibrary_0();
  Class result = objc_getClass("BMDeviceBootSession");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    __getBMDeviceBootSessionClass_block_invoke_cold_1();
  }
  getBMDeviceBootSessionClass_softClass = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_18E770C50(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL BMPBContextualActionEventReadFrom(char *a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_22;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_22;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
LABEL_22:
          uint64_t v19 = *(void **)&a1[v18];
          *(void *)&a1[v18] = v17;
          goto LABEL_23;
        case 4u:
          uint64_t v19 = PBReaderReadData();
          if (v19) {
            [a1 addContent:v19];
          }
          goto LABEL_23;
        case 5u:
          uint64_t v19 = PBReaderReadData();
          if (v19) {
            [a1 addParameter:v19];
          }
LABEL_23:

          goto LABEL_24;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_24:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL BMPBEntityRelationshipEventReadFrom(char *a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      unint64_t v12 = *(void *)(a2 + v11);
      if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v12 + 1;
      v10 |= (unint64_t)(v13 & 0x7F) << v8;
      if ((v13 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v15 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v15 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v15 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 16;
        goto LABEL_24;
      case 2u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 24;
        goto LABEL_24;
      case 3u:
        uint64_t v17 = PBReaderReadString();
        uint64_t v18 = 40;
LABEL_24:
        uint64_t v19 = *(BMPBEntity **)&a1[v18];
        *(void *)&a1[v18] = v17;
        goto LABEL_33;
      case 4u:
        uint64_t v19 = objc_alloc_init(BMPBEntity);
        uint64_t v20 = 32;
        goto LABEL_27;
      case 5u:
        uint64_t v19 = objc_alloc_init(BMPBEntity);
        uint64_t v20 = 48;
LABEL_27:
        objc_storeStrong((id *)&a1[v20], v19);
        if (!PBReaderPlaceMark() || (BMPBEntityReadFrom((uint64_t)v19, a2) & 1) == 0) {
          goto LABEL_37;
        }
        goto LABEL_32;
      case 6u:
        uint64_t v19 = objc_alloc_init(BMPBAttributeEntry);
        [a1 addAttributes:v19];
        if (PBReaderPlaceMark() && BMPBAttributeEntryReadFrom((uint64_t)v19, a2))
        {
LABEL_32:
          PBReaderRecallMark();
LABEL_33:

LABEL_34:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }
LABEL_37:

        return 0;
      default:
        if ((PBReaderSkipValueWithTag() & 1) == 0) {
          return 0;
        }
        goto LABEL_34;
    }
  }
}

uint64_t __BiomeLibraryInternalLibraryCore_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  BiomeLibraryInternalLibraryCore_frameworkLibrary = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t __BiomeLibraryLibraryCore_block_invoke_2()
{
  uint64_t result = _sl_dlopen();
  BiomeLibraryLibraryCore_frameworkLibrary_2 = result;
  return result;
}

void *__getBiomeLibraryInternalNodeSymbolLoc_block_invoke(uint64_t a1)
{
  uint64_t v2 = (void *)BiomeLibraryInternalLibrary();
  uint64_t result = dlsym(v2, "BiomeLibraryInternalNode");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getBiomeLibraryInternalNodeSymbolLoc_ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t BMPBSocialHighlightContactReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 != 2)
      {
        if (v17 != 1)
        {
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          goto LABEL_47;
        }
        char v18 = 0;
        unsigned int v19 = 0;
        uint64_t v20 = 0;
        *(unsigned char *)(a1 + 20) |= 2u;
        while (1)
        {
          uint64_t v21 = *v3;
          unint64_t v22 = *(void *)(a2 + v21);
          if (v22 == -1 || v22 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v23 = *(unsigned char *)(*(void *)(a2 + *v7) + v22);
          *(void *)(a2 + v21) = v22 + 1;
          v20 |= (unint64_t)(v23 & 0x7F) << v18;
          if ((v23 & 0x80) == 0) {
            goto LABEL_39;
          }
          v18 += 7;
          BOOL v14 = v19++ >= 9;
          if (v14)
          {
            uint64_t v20 = 0;
            goto LABEL_41;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v20 = 0;
        }
LABEL_41:
        BOOL v33 = v20 != 0;
        uint64_t v34 = 17;
        goto LABEL_46;
      }
      uint64_t v30 = PBReaderReadString();
      uint64_t v31 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v30;

LABEL_47:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v24 = 0;
    unsigned int v25 = 0;
    uint64_t v26 = 0;
    *(unsigned char *)(a1 + 20) |= 1u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v26 |= (unint64_t)(v29 & 0x7F) << v24;
      if ((v29 & 0x80) == 0) {
        goto LABEL_43;
      }
      v24 += 7;
      BOOL v14 = v25++ >= 9;
      if (v14)
      {
        uint64_t v26 = 0;
        goto LABEL_45;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_43:
    if (*(unsigned char *)(a2 + *v5)) {
      uint64_t v26 = 0;
    }
LABEL_45:
    BOOL v33 = v26 != 0;
    uint64_t v34 = 16;
LABEL_46:
    *(unsigned char *)(a1 + v34) = v33;
    goto LABEL_47;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBPhotosKnowledgeGraphEnrichmentTopicReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 24) |= 1u;
        uint64_t v20 = *v3;
        unint64_t v21 = *(void *)(a2 + v20);
        if (v21 <= 0xFFFFFFFFFFFFFFF7 && v21 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v22 = *(void *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2errstart(20, 0) = v21 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v22 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v22;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v18 = PBReaderReadString();
        unsigned int v19 = *(void **)(a1 + 16);
        *(void *)(a1 + 16) = v18;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBAccessoryStateReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
          goto LABEL_31;
        case 2u:
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 44) |= 2u;
          break;
        case 3u:
          uint64_t v18 = PBReaderReadData();
          uint64_t v19 = 16;
          goto LABEL_31;
        case 4u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 32;
LABEL_31:
          unint64_t v28 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        case 5u:
          *(unsigned char *)(a1 + 44) |= 1u;
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v31 = *(void *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v31 = 0;
          }
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = v31;
          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v24 = *v3;
        uint64_t v25 = *(void *)(a2 + v24);
        unint64_t v26 = v25 + 1;
        if (v25 == -1 || v26 > *(void *)(a2 + *v4)) {
          break;
        }
        char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
        *(void *)(a2 + v24) = v26;
        v23 |= (unint64_t)(v27 & 0x7F) << v21;
        if ((v27 & 0x80) == 0) {
          goto LABEL_36;
        }
        v21 += 7;
        BOOL v15 = v22++ >= 9;
        if (v15)
        {
          LODWORD(v23) = 0;
          goto LABEL_38;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_36:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v23) = 0;
      }
LABEL_38:
      *(_DWORD *)(a1 + 4errstart(20, 0) = v23;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBHomeKitClientBaseReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          *(unsigned char *)(a1 + 64) |= 1u;
          uint64_t v18 = *v3;
          unint64_t v19 = *(void *)(a2 + v18);
          if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
            *(void *)(a2 + v1_Block_object_dispose(&a9, 8) = v19 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v34 = 8;
          goto LABEL_47;
        case 2u:
          *(unsigned char *)(a1 + 64) |= 2u;
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v23);
            *(void *)(a2 + v22) = v23 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v20 = 0;
          }
          uint64_t v34 = 16;
LABEL_47:
          *(void *)(a1 + v34) = v20;
          continue;
        case 3u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 48;
          goto LABEL_38;
        case 4u:
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          *(unsigned char *)(a1 + 64) |= 4u;
          break;
        case 5u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 56;
          goto LABEL_38;
        case 6u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 24;
          goto LABEL_38;
        case 7u:
          uint64_t v24 = PBReaderReadString();
          uint64_t v25 = 32;
LABEL_38:
          BOOL v33 = *(void **)(a1 + v25);
          *(void *)(a1 + v25) = v24;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v29 = *v3;
        uint64_t v30 = *(void *)(a2 + v29);
        unint64_t v31 = v30 + 1;
        if (v30 == -1 || v31 > *(void *)(a2 + *v4)) {
          break;
        }
        char v32 = *(unsigned char *)(*(void *)(a2 + *v7) + v30);
        *(void *)(a2 + v29) = v31;
        v28 |= (unint64_t)(v32 & 0x7F) << v26;
        if ((v32 & 0x80) == 0) {
          goto LABEL_40;
        }
        v26 += 7;
        BOOL v15 = v27++ >= 9;
        if (v15)
        {
          LODWORD(v2_Block_object_dispose(&a9, 8) = 0;
          goto LABEL_42;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_40:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v2_Block_object_dispose(&a9, 8) = 0;
      }
LABEL_42:
      *(_DWORD *)(a1 + 4errstart(20, 0) = v28;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

BOOL BMPBMindfulnessSessionEventReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      if ((v10 >> 3) == 2) {
        break;
      }
      if ((v10 >> 3) == 1)
      {
        char v17 = 0;
        unsigned int v18 = 0;
        uint64_t v19 = 0;
        *(unsigned char *)(a1 + 16) |= 1u;
        while (1)
        {
          uint64_t v20 = *v3;
          unint64_t v21 = *(void *)(a2 + v20);
          if (v21 == -1 || v21 >= *(void *)(a2 + *v4))
          {
            uint64_t v24 = &OBJC_IVAR___BMPBMindfulnessSessionEvent__sessionType;
            goto LABEL_38;
          }
          char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
          *(void *)(a2 + v2errstart(20, 0) = v21 + 1;
          v19 |= (unint64_t)(v22 & 0x7F) << v17;
          if ((v22 & 0x80) == 0) {
            break;
          }
          v17 += 7;
          BOOL v23 = v18++ > 8;
          if (v23)
          {
            LODWORD(v19) = 0;
            uint64_t v24 = &OBJC_IVAR___BMPBMindfulnessSessionEvent__sessionType;
            goto LABEL_41;
          }
        }
        uint64_t v24 = &OBJC_IVAR___BMPBMindfulnessSessionEvent__sessionType;
LABEL_39:
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v19) = 0;
        }
LABEL_41:
        *(_DWORD *)(a1 + *v24) = v19;
        goto LABEL_42;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_42:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    char v25 = 0;
    unsigned int v26 = 0;
    uint64_t v19 = 0;
    *(unsigned char *)(a1 + 16) |= 2u;
    while (1)
    {
      uint64_t v27 = *v3;
      unint64_t v28 = *(void *)(a2 + v27);
      if (v28 == -1 || v28 >= *(void *)(a2 + *v4)) {
        break;
      }
      char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
      *(void *)(a2 + v27) = v28 + 1;
      v19 |= (unint64_t)(v29 & 0x7F) << v25;
      if ((v29 & 0x80) == 0)
      {
        uint64_t v24 = &OBJC_IVAR___BMPBMindfulnessSessionEvent__stateType;
        goto LABEL_39;
      }
      v25 += 7;
      BOOL v23 = v26++ > 8;
      if (v23)
      {
        LODWORD(v19) = 0;
        uint64_t v24 = &OBJC_IVAR___BMPBMindfulnessSessionEvent__stateType;
        goto LABEL_41;
      }
    }
    uint64_t v24 = &OBJC_IVAR___BMPBMindfulnessSessionEvent__stateType;
LABEL_38:
    *(unsigned char *)(a2 + *v5) = 1;
    goto LABEL_39;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBSemanticLocationEventReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          char v17 = 0;
          unsigned int v18 = 0;
          uint64_t v19 = 0;
          *(unsigned char *)(a1 + 28) |= 4u;
          while (1)
          {
            uint64_t v20 = *v3;
            unint64_t v21 = *(void *)(a2 + v20);
            if (v21 == -1 || v21 >= *(void *)(a2 + *v4)) {
              break;
            }
            char v22 = *(unsigned char *)(*(void *)(a2 + *v7) + v21);
            *(void *)(a2 + v2errstart(20, 0) = v21 + 1;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if ((v22 & 0x80) == 0) {
              goto LABEL_44;
            }
            v17 += 7;
            BOOL v14 = v18++ >= 9;
            if (v14)
            {
              uint64_t v19 = 0;
              goto LABEL_46;
            }
          }
          *(unsigned char *)(a2 + *v5) = 1;
LABEL_44:
          if (*(unsigned char *)(a2 + *v5)) {
            uint64_t v19 = 0;
          }
LABEL_46:
          *(unsigned char *)(a1 + 24) = v19 != 0;
          continue;
        case 2u:
          char v24 = 0;
          unsigned int v25 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 2u;
          while (2)
          {
            uint64_t v27 = *v3;
            unint64_t v28 = *(void *)(a2 + v27);
            if (v28 == -1 || v28 >= *(void *)(a2 + *v4))
            {
              *(unsigned char *)(a2 + *v5) = 1;
            }
            else
            {
              char v29 = *(unsigned char *)(*(void *)(a2 + *v7) + v28);
              *(void *)(a2 + v27) = v28 + 1;
              v26 |= (unint64_t)(v29 & 0x7F) << v24;
              if (v29 < 0)
              {
                v24 += 7;
                BOOL v14 = v25++ >= 9;
                if (v14)
                {
                  LODWORD(v26) = 0;
                  goto LABEL_50;
                }
                continue;
              }
            }
            break;
          }
          if (*(unsigned char *)(a2 + *v5)) {
            LODWORD(v26) = 0;
          }
LABEL_50:
          uint64_t v37 = 20;
          goto LABEL_55;
        case 3u:
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v26 = 0;
          *(unsigned char *)(a1 + 28) |= 1u;
          break;
        case 4u:
          uint64_t v35 = PBReaderReadString();
          unint64_t v36 = *(void **)(a1 + 8);
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = v35;

          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v32 = *v3;
        unint64_t v33 = *(void *)(a2 + v32);
        if (v33 == -1 || v33 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v34 = *(unsigned char *)(*(void *)(a2 + *v7) + v33);
        *(void *)(a2 + v32) = v33 + 1;
        v26 |= (unint64_t)(v34 & 0x7F) << v30;
        if ((v34 & 0x80) == 0) {
          goto LABEL_52;
        }
        v30 += 7;
        BOOL v14 = v31++ >= 9;
        if (v14)
        {
          LODWORD(v26) = 0;
          goto LABEL_54;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_52:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v26) = 0;
      }
LABEL_54:
      uint64_t v37 = 16;
LABEL_55:
      *(_DWORD *)(a1 + v37) = v26;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBReadMessageEventReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v14 = v9++ >= 9;
        if (v14)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        break;
      }
      if ((v10 >> 3) == 2)
      {
        char v19 = 0;
        unsigned int v20 = 0;
        uint64_t v21 = 0;
        *(unsigned char *)(a1 + 20) |= 1u;
        while (1)
        {
          uint64_t v22 = *v3;
          unint64_t v23 = *(void *)(a2 + v22);
          if (v23 == -1 || v23 >= *(void *)(a2 + *v4)) {
            break;
          }
          char v24 = *(unsigned char *)(*(void *)(a2 + *v7) + v23);
          *(void *)(a2 + v22) = v23 + 1;
          v21 |= (unint64_t)(v24 & 0x7F) << v19;
          if ((v24 & 0x80) == 0) {
            goto LABEL_31;
          }
          v19 += 7;
          BOOL v14 = v20++ >= 9;
          if (v14)
          {
            uint64_t v21 = 0;
            goto LABEL_33;
          }
        }
        *(unsigned char *)(a2 + *v5) = 1;
LABEL_31:
        if (*(unsigned char *)(a2 + *v5)) {
          uint64_t v21 = 0;
        }
LABEL_33:
        *(unsigned char *)(a1 + 16) = v21 != 0;
      }
      else if ((v10 >> 3) == 1)
      {
        uint64_t v17 = PBReaderReadString();
        unsigned int v18 = *(void **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v17;
      }
      else
      {
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
      }
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBSocialHighlightFeedbackEventReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      BOOL v15 = v9++ >= 9;
      if (v15)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
        goto LABEL_36;
      case 2u:
        char v21 = 0;
        unsigned int v22 = 0;
        uint64_t v23 = 0;
        *(unsigned char *)(a1 + 48) |= 2u;
        while (2)
        {
          uint64_t v24 = *v3;
          uint64_t v25 = *(void *)(a2 + v24);
          unint64_t v26 = v25 + 1;
          if (v25 == -1 || v26 > *(void *)(a2 + *v4))
          {
            *(unsigned char *)(a2 + *v5) = 1;
          }
          else
          {
            char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
            *(void *)(a2 + v24) = v26;
            v23 |= (unint64_t)(v27 & 0x7F) << v21;
            if (v27 < 0)
            {
              v21 += 7;
              BOOL v15 = v22++ >= 9;
              if (v15)
              {
                LODWORD(v23) = 0;
                goto LABEL_40;
              }
              continue;
            }
          }
          break;
        }
        if (*(unsigned char *)(a2 + *v5)) {
          LODWORD(v23) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + 32) = v23;
        goto LABEL_43;
      case 3u:
        *(unsigned char *)(a1 + 48) |= 1u;
        uint64_t v28 = *v3;
        unint64_t v29 = *(void *)(a2 + v28);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v30 = *(void *)(*(void *)(a2 + *v7) + v29);
          *(void *)(a2 + v2_Block_object_dispose(&a9, 8) = v29 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v30 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v30;
        goto LABEL_43;
      case 4u:
        unsigned int v31 = objc_alloc_init(BMPBRankableSocialHighlight);
        objc_storeStrong((id *)(a1 + 40), v31);
        if PBReaderPlaceMark() && (BMPBRankableSocialHighlightReadFrom((uint64_t)v31, a2))
        {
          PBReaderRecallMark();

LABEL_43:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 5u:
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
LABEL_36:
        uint64_t v32 = *(void **)(a1 + v19);
        *(void *)(a1 + v19) = v18;

        goto LABEL_43;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_43;
    }
  }
}

BOOL BMPBNameComponentsReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 32;
          goto LABEL_28;
        case 2u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 16;
          goto LABEL_28;
        case 3u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 24;
          goto LABEL_28;
        case 4u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 56;
          goto LABEL_28;
        case 5u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 8;
          goto LABEL_28;
        case 6u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 40;
          goto LABEL_28;
        case 7u:
          uint64_t v17 = PBReaderReadString();
          uint64_t v18 = 48;
LABEL_28:
          uint64_t v19 = *(void **)(a1 + v18);
          *(void *)(a1 + v1_Block_object_dispose(&a9, 8) = v17;

          goto LABEL_29;
        default:
          if ((PBReaderSkipValueWithTag() & 1) == 0) {
            return 0;
          }
LABEL_29:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          break;
      }
    }
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

uint64_t BMPBSiriQueryEventReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) >= *(void *)(a2 + (int)*MEMORY[0x1E4F940E0])) {
    return *(unsigned char *)(a2 + *v5) == 0;
  }
  uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
  while (2)
  {
    if (*(unsigned char *)(a2 + *v5)) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    char v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    while (1)
    {
      uint64_t v11 = *v3;
      uint64_t v12 = *(void *)(a2 + v11);
      unint64_t v13 = v12 + 1;
      if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
        break;
      }
      char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
      *(void *)(a2 + v11) = v13;
      v10 |= (unint64_t)(v14 & 0x7F) << v8;
      if ((v14 & 0x80) == 0) {
        goto LABEL_12;
      }
      v8 += 7;
      if (v9++ >= 9)
      {
        unint64_t v10 = 0;
        int v16 = *(unsigned __int8 *)(a2 + *v5);
        goto LABEL_14;
      }
    }
    *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
    int v16 = *(unsigned __int8 *)(a2 + *v5);
    if (*(unsigned char *)(a2 + *v5)) {
      unint64_t v10 = 0;
    }
LABEL_14:
    if (v16 || (v10 & 7) == 4) {
      return *(unsigned char *)(a2 + *v5) == 0;
    }
    switch((v10 >> 3))
    {
      case 1u:
        *(unsigned char *)(a1 + 56) |= 1u;
        uint64_t v18 = *v3;
        unint64_t v19 = *(void *)(a2 + v18);
        if (v19 <= 0xFFFFFFFFFFFFFFF7 && v19 + 8 <= *(void *)(a2 + *v4))
        {
          uint64_t v20 = *(void *)(*(void *)(a2 + *v7) + v19);
          *(void *)(a2 + v1_Block_object_dispose(&a9, 8) = v19 + 8;
        }
        else
        {
          *(unsigned char *)(a2 + *v5) = 1;
          uint64_t v20 = 0;
        }
        *(void *)(a1 + _Block_object_dispose(&a9, 8) = v20;
        goto LABEL_32;
      case 2u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 32;
        goto LABEL_31;
      case 3u:
        uint64_t v24 = objc_alloc_init(BMPBSiriQueryResult);
        [(id)a1 addResults:v24];
        if PBReaderPlaceMark() && (BMPBSiriQueryResultReadFrom((uint64_t)v24, a2))
        {
          PBReaderRecallMark();

LABEL_32:
          if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
            return *(unsigned char *)(a2 + *v5) == 0;
          }
          continue;
        }

        return 0;
      case 4u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 48;
        goto LABEL_31;
      case 5u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 16;
        goto LABEL_31;
      case 6u:
        uint64_t v22 = PBReaderReadString();
        uint64_t v23 = 24;
LABEL_31:
        uint64_t v25 = *(void **)(a1 + v23);
        *(void *)(a1 + v23) = v22;

        goto LABEL_32;
      default:
        uint64_t result = PBReaderSkipValueWithTag();
        if (!result) {
          return result;
        }
        goto LABEL_32;
    }
  }
}

BOOL BMPBTopicEntityReadFrom(char *a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  uint64_t v4 = (int *)MEMORY[0x1E4F940E0];
  uint64_t v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    uint64_t v7 = (int *)MEMORY[0x1E4F940B8];
    while (1)
    {
      if (*(unsigned char *)(a2 + *v5)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        unint64_t v12 = *(void *)(a2 + v11);
        if (v12 == -1 || v12 >= *(void *)(a2 + *v4)) {
          break;
        }
        char v13 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v12 + 1;
        v10 |= (unint64_t)(v13 & 0x7F) << v8;
        if ((v13 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        if (v9++ >= 9)
        {
          unint64_t v10 = 0;
          int v15 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v15 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v15 || (v10 & 7) == 4) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
      unint64_t v17 = v10 >> 3;
      if ((v10 >> 3) == 3) {
        break;
      }
      if (v17 == 2)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 16;
LABEL_26:
        uint64_t v20 = *(BMPBAttributeEntry **)&a1[v19];
        *(void *)&a1[v19] = v18;
LABEL_27:

        goto LABEL_29;
      }
      if (v17 == 1)
      {
        uint64_t v18 = PBReaderReadString();
        uint64_t v19 = 24;
        goto LABEL_26;
      }
      if ((PBReaderSkipValueWithTag() & 1) == 0) {
        return 0;
      }
LABEL_29:
      if (*(void *)(a2 + *v3) >= *(void *)(a2 + *v4)) {
        return *(unsigned char *)(a2 + *v5) == 0;
      }
    }
    uint64_t v20 = objc_alloc_init(BMPBAttributeEntry);
    [a1 addAttributes:v20];
    if (!PBReaderPlaceMark() || !BMPBAttributeEntryReadFrom((uint64_t)v20, a2))
    {

      return 0;
    }
    PBReaderRecallMark();
    goto LABEL_27;
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}

id BMSQLDatabaseError(uint64_t a1, sqlite3 *a2, const char *a3)
{
  v19[1] = *MEMORY[0x1E4F143B8];
  id v6 = objc_alloc(MEMORY[0x1E4F28E78]);
  uint64_t v7 = [NSNumber numberWithInt:a1];
  char v8 = (void *)[v6 initWithFormat:@"BMSQLDatabase error (%@)", v7];

  unsigned int v9 = sqlite3_errmsg(a2);
  if (v9)
  {
    unint64_t v10 = v9;
    uint64_t v11 = [NSString stringWithUTF8String:v9];
    [v8 appendFormat:@" %@.", v11];

    if (a3 && strcmp(v10, a3)) {
      goto LABEL_4;
    }
  }
  else if (a3)
  {
LABEL_4:
    unint64_t v12 = [NSString stringWithUTF8String:a3];
    [v8 appendFormat:@" %@", v12];
  }
  id v13 = objc_alloc(MEMORY[0x1E4F28C58]);
  uint64_t v18 = *MEMORY[0x1E4F28568];
  char v14 = (void *)[v8 copy];
  v19[0] = v14;
  int v15 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v19 forKeys:&v18 count:1];
  int v16 = (void *)[v13 initWithDomain:@"BMSQLDatabaseErrorDomain" code:(int)a1 userInfo:v15];

  return v16;
}

void *bm_sqlite3_malloc(int a1)
{
  uint64_t v2 = sqlite3_malloc(a1);
  long long v3 = v2;
  if (v2) {
    bzero(v2, a1);
  }
  return v3;
}

id BMSQLVirtualTables(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v6 = a1;
  id v7 = a2;
  id v37 = a3;
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id v9 = v7;
  uint64_t v40 = [v9 countByEnumeratingWithState:&v45 objects:v51 count:16];
  if (v40)
  {
    uint64_t v39 = *(void *)v46;
    *(void *)&long long v10 = 138412290;
    long long v34 = v10;
    id v36 = v8;
    obuint64_t j = v9;
    while (2)
    {
      for (uint64_t i = 0; i != v40; ++i)
      {
        if (*(void *)v46 != v39) {
          objc_enumerationMutation(obj);
        }
        unint64_t v12 = *(void **)(*((void *)&v45 + 1) + 8 * i);
        id v13 = (void *)MEMORY[0x192FB0D60]();
        id v14 = v12;
        uint64_t v15 = [&unk_1EDDD7720 objectForKeyedSubscript:v14];
        int v16 = (void *)v15;
        if (v15) {
          unint64_t v17 = (void *)v15;
        }
        else {
          unint64_t v17 = v14;
        }
        id v18 = v17;

        id v44 = 0;
        uint64_t v19 = [v6 streamWithIdentifier:v18 error:&v44];
        id v20 = v44;
        char v21 = v20;
        if (v20)
        {
          uint64_t v22 = [v20 domain];
          if (![v22 isEqualToString:@"BMLibraryErrorDomain"])
          {

LABEL_22:
            if (a4) {
              *a4 = v21;
            }

            id v9 = obj;

            uint64_t v32 = 0;
            goto LABEL_25;
          }
          uint64_t v23 = [v21 code];

          if (v23 != 1) {
            goto LABEL_22;
          }
          __biome_log_for_category();
          uint64_t v24 = (BMStreamVirtualTable *)objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(&v24->super, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v34;
            id v50 = v18;
            _os_log_debug_impl(&dword_18E67D000, &v24->super, OS_LOG_TYPE_DEBUG, "BMSQLDatabase failed to add virtual table for stream %@ because it is not in BiomeLibrary", buf, 0xCu);
          }
        }
        else
        {
          if ([v14 isEqualToString:v18])
          {
            uint64_t v24 = [[BMStreamVirtualTable alloc] initWithStream:v19 useCase:v37];
          }
          else
          {
            uint64_t v25 = [BMSQLSchema alloc];
            unint64_t v26 = [v19 schema];
            [v26 columns];
            v28 = id v27 = v6;
            unint64_t v29 = [(BMSQLSchema *)v25 initWithTableName:v14 columns:v28];

            uint64_t v30 = [BMStreamVirtualTable alloc];
            v41[0] = MEMORY[0x1E4F143A8];
            v41[1] = 3221225472;
            v41[2] = __BMSQLVirtualTables_block_invoke;
            v41[3] = &unk_1E55D7CF0;
            id v42 = v19;
            id v43 = v37;
            unsigned int v31 = v30;
            id v6 = v27;
            id v8 = v36;
            uint64_t v24 = [(BMStreamVirtualTable *)v31 initWithSchema:v29 publisherBlock:v41];
          }
          objc_msgSend(v8, "addObject:", v24, v34);
        }
      }
      id v9 = obj;
      uint64_t v40 = [obj countByEnumeratingWithState:&v45 objects:v51 count:16];
      if (v40) {
        continue;
      }
      break;
    }
  }

  uint64_t v32 = (void *)[v8 copy];
LABEL_25:

  return v32;
}

void bmstream_vtab_destroy(id *a1)
{
  objc_storeWeak(a1, 0);

  sqlite3_free(a1);
}

uint64_t bmstream_authorizer(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v7 = @"DENY";
  uint64_t v8 = 1;
  switch((int)a2)
  {
    case 4:
    case 6:
    case 13:
    case 15:
    case 21:
    case 22:
    case 24:
    case 25:
    case 31:
    case 33:
      goto LABEL_2;
    case 9:
    case 18:
      if (a3)
      {
        uint64_t v11 = [NSString stringWithUTF8String:a3];
      }
      else
      {
        uint64_t v11 = 0;
      }
      char v16 = [v11 isEqualToString:@"sqlite_temp_master"];

      if (v16) {
        goto LABEL_2;
      }
      uint64_t v8 = 1;
      goto LABEL_3;
    case 20:
      if (a3)
      {
        id v13 = [NSString stringWithUTF8String:a3];
        if (a4)
        {
LABEL_10:
          id v14 = [NSString stringWithUTF8String:a4];
          goto LABEL_18;
        }
      }
      else
      {
        id v13 = 0;
        if (a4) {
          goto LABEL_10;
        }
      }
      id v14 = 0;
LABEL_18:
      if (([v13 isEqualToString:@"sqlite_master"] & 1) != 0
        || ([v13 isEqualToString:@"json_each"] & 1) != 0)
      {
        uint64_t v8 = 0;
      }
      else
      {
        unint64_t v17 = [a1 privileges];
        id v18 = v17;
        if (v17)
        {
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          id v19 = v17;
          uint64_t v20 = [v19 countByEnumeratingWithState:&v24 objects:v36 count:16];
          if (v20)
          {
            uint64_t v21 = v20;
            uint64_t v22 = *(void *)v25;
            while (2)
            {
              for (uint64_t i = 0; i != v21; ++i)
              {
                if (*(void *)v25 != v22) {
                  objc_enumerationMutation(v19);
                }
                if (objc_msgSend(*(id *)(*((void *)&v24 + 1) + 8 * i), "checkTable:column:", v13, v14, (void)v24))
                {
                  uint64_t v8 = 0;
                  goto LABEL_36;
                }
              }
              uint64_t v21 = [v19 countByEnumeratingWithState:&v24 objects:v36 count:16];
              if (v21) {
                continue;
              }
              break;
            }
            uint64_t v8 = 1;
          }
LABEL_36:
        }
        else
        {
          uint64_t v8 = 0;
        }
      }
LABEL_40:

      if (v8)
      {
        id v7 = @"DENY";
      }
      else
      {
LABEL_2:
        uint64_t v8 = 0;
        id v7 = @"ALLOW";
      }
LABEL_3:
      id v9 = __biome_log_for_category();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v15 = [NSNumber numberWithInt:a2];
        *(_DWORD *)buf = 138413058;
        unint64_t v29 = v7;
        __int16 v30 = 2112;
        unsigned int v31 = v15;
        __int16 v32 = 2080;
        uint64_t v33 = a3;
        __int16 v34 = 2080;
        uint64_t v35 = a4;
        _os_log_debug_impl(&dword_18E67D000, v9, OS_LOG_TYPE_DEBUG, "bmstream_authorizer callback %@ for action %@, (%s, %s)", buf, 0x2Au);
      }
      return v8;
    case 23:
      if (a3)
      {
        id v13 = [NSString stringWithUTF8String:a3];
      }
      else
      {
        id v13 = 0;
      }
      if ([v13 isEqualToString:@"sqlite_master"]) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = [v13 isEqualToString:@"sqlite_temp_master"] ^ 1;
      }
      goto LABEL_40;
    default:
      goto LABEL_3;
  }
}

void sub_18E784D68(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18E785248(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18E7854AC(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void sub_18E7856B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id obj)
{
}

void sub_18E78573C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

id BMSqliteValueToObjcValue(sqlite3_value *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v2 = sqlite3_value_type(a1);
  switch(v2)
  {
    case 1:
      long long v3 = [NSNumber numberWithLong:sqlite3_value_int64(a1)];
      break;
    case 2:
      long long v3 = [NSNumber numberWithDouble:sqlite3_value_double(a1)];
      break;
    case 3:
      long long v3 = [NSString stringWithUTF8String:sqlite3_value_text(a1)];
      break;
    case 4:
      id v7 = sqlite3_value_blob(a1);
      long long v3 = [MEMORY[0x1E4F1C9B8] dataWithBytes:v7 length:sqlite3_value_bytes(a1)];
      break;
    case 5:
      goto LABEL_8;
    default:
      int v4 = v2;
      uint64_t v5 = __biome_log_for_category();
      *(void *)buf = 0;
      uint64_t v11 = buf;
      uint64_t v12 = 0x2020000000;
      char v13 = 16;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = __BMSqliteValueToObjcValue_block_invoke;
      block[3] = &unk_1E55D6DA8;
      block[4] = buf;
      if (BMSqliteValueToObjcValue_onceToken != -1) {
        dispatch_once(&BMSqliteValueToObjcValue_onceToken, block);
      }
      os_log_type_t v6 = v11[24];
      _Block_object_dispose(buf, 8);
      if (os_log_type_enabled(v5, v6))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v4;
        _os_log_impl(&dword_18E67D000, v5, v6, "Invalid sqlite3 value type: %d", buf, 8u);
      }

LABEL_8:
      long long v3 = [MEMORY[0x1E4F1CA98] null];
      break;
  }

  return v3;
}

uint64_t __BMSqliteValueToObjcValue_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 17;
  return result;
}

void BMSqliteResultFromObjcValue(sqlite3_context *a1, void *a2)
{
  id v13 = a2;
  if (v13
    && ([MEMORY[0x1E4F1CA98] null],
        long long v3 = objc_claimAutoreleasedReturnValue(),
        int v4 = [v13 isEqual:v3],
        v3,
        !v4))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [v13 doubleValue];
      sqlite3_result_double(a1, v5);
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        sqlite3_result_text(a1, (const char *)[v13 UTF8String], -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v6 = v13;
          id v7 = (const void *)[v6 bytes];
          int v8 = [v6 length];

          sqlite3_result_blob(a1, v7, v8, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
        }
        else
        {
          if (objc_opt_respondsToSelector() & 1) != 0 && (objc_opt_respondsToSelector())
          {
            id v9 = [v13 serialize];
            sqlite3_result_blob(a1, (const void *)[v9 bytes], objc_msgSend(v9, "length"), (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
          }
          else
          {
            long long v10 = NSString;
            uint64_t v11 = [v13 className];
            uint64_t v12 = [v10 stringWithFormat:@"Objective-C class %@ is not a valid sqlite type", v11];

            id v9 = v12;
            sqlite3_result_error(a1, (const char *)[v9 UTF8String], -1);
          }
        }
      }
    }
  }
  else
  {
    sqlite3_result_null(a1);
  }
}

void bmstream_udf_callback(sqlite3_context *a1, int a2, sqlite3_value **a3)
{
  id v6 = (void *)MEMORY[0x192FB0D60]();
  id v7 = objc_opt_new();
  if (a2 >= 1)
  {
    uint64_t v8 = a2;
    do
    {
      id v9 = *a3++;
      long long v10 = BMSqliteValueToObjcValue(v9);
      [v7 addObject:v10];

      --v8;
    }
    while (v8);
  }
  uint64_t v11 = (uint64_t *)sqlite3_user_data(a1);
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  id v17 = 0;
  uint64_t v14 = (*(void (**)(uint64_t, void *, uint64_t, id *))(v13 + 16))(v13, v7, v12, &v17);
  id v15 = v17;
  if (v15)
  {
    id v16 = [NSString stringWithFormat:@"Error set by user-defined function: %@", v15];
    sqlite3_result_error(a1, (const char *)[v16 UTF8String], -1);
  }
  else
  {
    BMSqliteResultFromObjcValue(a1, v14);
  }
}

void bmstream_udf_destructor_callback(void **a1)
{
  if (a1)
  {
    int v2 = *a1;
    *a1 = 0;

    long long v3 = a1[1];
    a1[1] = 0;

    sqlite3_free(a1);
  }
}

uint64_t __BMSQLVirtualTables_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) publisherWithUseCase:*(void *)(a1 + 40)];
}

uint64_t bmstream_vtab_connect(sqlite3 *a1, id *a2, int a3, uint64_t a4, id **a5, char **a6)
{
  if (a3 == 3)
  {
    long long v10 = (void *)[[NSString alloc] initWithUTF8String:*(void *)(a4 + 16)];
    uint64_t v11 = __biome_log_for_category();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG)) {
      bmstream_vtab_connect_cold_2();
    }

    id WeakRetained = objc_loadWeakRetained(a2);
    uint64_t v13 = [WeakRetained virtualTableForName:v10];
    uint64_t v14 = v13;
    if (v13)
    {
      id v15 = [v13 schema];

      if (v15)
      {
        id v16 = [v14 schema];
        id v17 = [v16 createTableSQL];

        id v18 = __biome_log_for_category();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG)) {
          bmstream_vtab_connect_cold_1();
        }

        id v19 = v17;
        uint64_t v20 = sqlite3_declare_vtab(a1, (const char *)[v19 UTF8String]);
        if (!v20)
        {
          uint64_t v21 = (id *)bm_sqlite3_malloc(40);
          *a5 = v21;
          if (v21)
          {
            uint64_t v22 = v21;
            objc_storeStrong(v21 + 3, v14);
            objc_storeWeak(v22 + 4, WeakRetained);
            uint64_t v20 = 0;
          }
          else
          {
            uint64_t v20 = 7;
          }
        }

        goto LABEL_22;
      }
      if (a6)
      {
        uint64_t v23 = [v14 schema];

        if (v23) {
          goto LABEL_16;
        }
        *a6 = sqlite3_mprintf("stream %s does not have a schema", (const char *)[v10 UTF8String]);
      }
    }
    else if (a6)
    {
LABEL_16:
      long long v24 = [0 localizedDescription];
      long long v25 = v24;
      if (v24) {
        *a6 = sqlite3_mprintf("%s", (const char *)[v24 UTF8String]);
      }
    }
    uint64_t v20 = 1;
LABEL_22:

    return v20;
  }
  return 1;
}

uint64_t bmstream_vtab_bestindex(uint64_t a1, int *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  a2[10] = 0;
  long long v3 = a2 + 10;
  id v4 = *(id *)(a1 + 24);
  double v5 = [v4 stream];
  id v6 = [v5 configuration];
  id v7 = [v6 storeConfig];

  id v8 = objc_alloc(MEMORY[0x1E4F50288]);
  id v9 = [v4 stream];
  long long v10 = [v9 identifier];
  uint64_t v11 = (void *)[v8 initWithStream:v10 permission:0 config:v7];

  LODWORD(v9) = [v11 frameCountInStreamDataStoreFromSegmentsContainingTime:0.0 to:CFAbsoluteTimeGetCurrent()];
  *((void *)v3 + 4) = (int)v9;
  if ([v4 acceptPublisherOptions])
  {
    uint64_t v12 = [v4 schema];
    uint64_t v13 = [v12 columns];
    uint64_t v14 = [v13 count];

    if (v14)
    {
      unint64_t v15 = 0;
      while (1)
      {
        id v16 = [v4 schema];
        uint64_t v17 = [v16 columns];
        id v18 = [(id)v17 objectAtIndexedSubscript:v15];

        id v19 = [v18 name];
        LOBYTE(v17) = [v19 isEqualToString:@"eventTimestamp"];

        if (v17) {
          break;
        }
        ++v15;
        uint64_t v20 = [v4 schema];
        uint64_t v21 = [v20 columns];
        unint64_t v22 = [v21 count];

        if (v22 <= v15) {
          goto LABEL_35;
        }
      }
      if (v15 != -1)
      {
        if (a2[4] == 1)
        {
          uint64_t v23 = *((void *)a2 + 3);
          if (*(_DWORD *)v23 == v15)
          {
            a2[15] = 1;
            if (*(unsigned char *)(v23 + 4)) {
              *v3 |= 4u;
            }
          }
        }
        if (*a2 < 1) {
          goto LABEL_32;
        }
        uint64_t v24 = 0;
        uint64_t v25 = 0;
        uint64_t v45 = 0;
        int v43 = -1;
        int v44 = -1;
        uint64_t v39 = v3;
        do
        {
          long long v26 = (unsigned int *)(*((void *)a2 + 1) + v24);
          uint64_t v27 = *v26;
          uint64_t v28 = *((unsigned __int8 *)v26 + 4);
          uint64_t v29 = *((unsigned __int8 *)v26 + 5);
          __int16 v30 = __biome_log_for_category();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
          {
            id v42 = [NSNumber numberWithInt:v25];
            uint64_t v41 = [NSNumber numberWithInt:v27];
            uint64_t v40 = [NSNumber numberWithUnsignedChar:v28];
            uint64_t v32 = [NSNumber numberWithUnsignedChar:v29];
            *(_DWORD *)buf = 138413058;
            long long v47 = v42;
            __int16 v48 = 2112;
            uint64_t v49 = v41;
            __int16 v50 = 2112;
            unint64_t v51 = v40;
            __int16 v52 = 2112;
            uint64_t v53 = v32;
            uint64_t v33 = (void *)v32;
            _os_log_debug_impl(&dword_18E67D000, v30, OS_LOG_TYPE_DEBUG, "bmstream_vtab_bestindex constraint %@ - iColumn: %@; op: %@; usable: %@",
              buf,
              0x2Au);

            long long v3 = v39;
          }

          BOOL v31 = v27 != v15 || v29 == 0;
          if (!v31 && v28 <= 0x20)
          {
            if (((1 << v28) & 0x100000014) != 0)
            {
              ++HIDWORD(v45);
              int v44 = v25;
            }
            else if (((1 << v28) & 0x10100) != 0)
            {
              LODWORD(v45) = v45 + 1;
              int v43 = v25;
            }
          }
          ++v25;
          v24 += 12;
        }
        while (v25 < *a2);
        if (HIDWORD(v45) == 1)
        {
          int v34 = a2[10];
          a2[10] = v34 | 1;
          uint64_t v35 = *((void *)a2 + 4);
          *(_DWORD *)(v35 + 8 * v44) = 1;
          if (v45 == 1)
          {
            *long long v3 = v34 | 3;
            int v36 = 2;
LABEL_31:
            *(_DWORD *)(v35 + 8 * v43) = v36;
          }
        }
        else if (v45 == 1)
        {
          a2[10] |= 2u;
          uint64_t v35 = *((void *)a2 + 4);
          int v36 = 1;
          goto LABEL_31;
        }
LABEL_32:
        uint64_t v37 = __biome_log_for_category();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG)) {
          bmstream_vtab_bestindex_cold_1((unsigned int *)v3, v37);
        }
      }
    }
  }
LABEL_35:

  return 0;
}

uint64_t bmstream_vtab_disconnect(uint64_t a1)
{
  int v2 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = 0;

  objc_storeWeak((id *)(a1 + 32), 0);
  sqlite3_free((void *)a1);
  return 0;
}

uint64_t bmstream_vtab_open(uint64_t a1, void *a2)
{
  id v4 = bm_sqlite3_malloc(16);
  if (!v4) {
    return 7;
  }
  double v5 = v4;
  *a2 = v4;
  id v6 = [[BMPublisherVirtualTableCursor alloc] initWithVirtualTable:*(void *)(a1 + 24)];
  id v7 = (void *)v5[1];
  v5[1] = v6;

  return 0;
}

uint64_t bmstream_vtab_close(id *a1)
{
  [a1[1] close];
  id v2 = a1[1];
  a1[1] = 0;

  sqlite3_free(a1);
  return 0;
}

uint64_t bmstream_vtab_filter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, sqlite3_value **a5)
{
  id v9 = __biome_log_for_category();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
    bmstream_vtab_filter_cold_2(a2, a4, v9);
  }

  long long v10 = [*(id *)(a1 + 8) virtualTable];
  char v11 = [v10 acceptPublisherOptions];

  if ((v11 & 1) == 0)
  {
    [*(id *)(a1 + 8) reset];
    return 0;
  }
  if (a2)
  {
    double v21 = sqlite3_value_double(*a5);
    unint64_t v22 = [MEMORY[0x1E4F1C9C8] distantPast];
    [v22 timeIntervalSince1970];
    double v24 = v23;

    if (v21 <= v24)
    {
      uint64_t v28 = [MEMORY[0x1E4F1C9C8] distantPast];
    }
    else
    {
      uint64_t v25 = [MEMORY[0x1E4F1C9C8] distantFuture];
      [v25 timeIntervalSince1970];
      double v27 = v26;

      if (v21 >= v27) {
        [MEMORY[0x1E4F1C9C8] distantFuture];
      }
      else {
      uint64_t v28 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:v21 + -0.000001];
      }
    }
    uint64_t v12 = (void *)v28;
    if ((a2 & 2) != 0) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v12 = 0;
    if ((a2 & 2) != 0)
    {
LABEL_6:
      double v13 = sqlite3_value_double(a5[a4 != 1]);
      uint64_t v14 = [MEMORY[0x1E4F1C9C8] distantPast];
      [v14 timeIntervalSince1970];
      double v16 = v15;

      if (v13 <= v16)
      {
        uint64_t v20 = [MEMORY[0x1E4F1C9C8] distantPast];
      }
      else
      {
        uint64_t v17 = [MEMORY[0x1E4F1C9C8] distantFuture];
        [v17 timeIntervalSince1970];
        double v19 = v18;

        if (v13 >= v19) {
          [MEMORY[0x1E4F1C9C8] distantFuture];
        }
        else {
        uint64_t v20 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:v13 + 0.000001];
        }
      }
      uint64_t v29 = (void *)v20;
      goto LABEL_22;
    }
  }
  uint64_t v29 = 0;
LABEL_22:
  __int16 v30 = [BMPublisherOptions alloc];
  if ((a2 & 4) != 0)
  {
    BOOL v31 = v29;
    uint64_t v32 = v12;
    uint64_t v33 = 1;
  }
  else
  {
    BOOL v31 = v12;
    uint64_t v32 = v29;
    uint64_t v33 = 0;
  }
  int v34 = [(BMPublisherOptions *)v30 initWithStartDate:v31 endDate:v32 maxEvents:0 lastN:0 reversed:v33];
  uint64_t v35 = __biome_log_for_category();
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG)) {
    bmstream_vtab_filter_cold_1();
  }

  [*(id *)(a1 + 8) resetWithOptions:v34];
  return 0;
}

uint64_t bmstream_vtab_next(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x192FB0D60]();
  [*(id *)(a1 + 8) advance];
  return 0;
}

BOOL bmstream_vtab_eof(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 8) rowObject];
  BOOL v2 = v1 == 0;

  return v2;
}

uint64_t bmstream_vtab_column(id *a1, uint64_t a2, uint64_t a3)
{
  id v6 = (void *)MEMORY[0x192FB0D60]();
  id v7 = (id *)*a1;
  id v8 = [*((id *)*a1 + 3) schema];
  id v9 = v8;
  if ((a3 & 0x80000000) != 0 || !v8)
  {
    if (!v8)
    {
      uint64_t v28 = sqlite3_mprintf("stream is missing a schema");
      goto LABEL_13;
    }
LABEL_11:
    double v24 = [NSNumber numberWithInt:a3];
    id v25 = [v24 description];
    double v26 = (const char *)[v25 UTF8String];
    id v27 = [v9 tableName];
    uint64_t v28 = sqlite3_mprintf("unknown column %s for table %s", v26, (const char *)[v27 UTF8String]);

LABEL_13:
    *((void *)*a1 + 2) = v28;
    uint64_t v23 = 17;
    goto LABEL_16;
  }
  long long v10 = [v8 columns];
  unint64_t v11 = [v10 count];

  if (v11 <= a3) {
    goto LABEL_11;
  }
  uint64_t v12 = a3;
  double v13 = [a1[1] rowObject];
  uint64_t v14 = [v9 columns];
  double v15 = [v14 objectAtIndexedSubscript:v12];

  id WeakRetained = objc_loadWeakRetained(v7 + 4);
  if ([WeakRetained isColumnAccessLoggingEnabled])
  {
    uint64_t v17 = [v15 name];
    double v18 = [v9 tableName];
    [WeakRetained logColumnAccess:v17 tableName:v18];
  }
  id v30 = 0;
  [v15 setSQLiteValueFromRow:v13 sqliteContext:a2 error:&v30];
  id v19 = v30;
  uint64_t v20 = v19;
  if (v19)
  {
    double v21 = [v19 localizedDescription];
    unint64_t v22 = v21;
    if (v21) {
      *((void *)*a1 + 2) = sqlite3_mprintf("%s", (const char *)[v21 UTF8String]);
    }

    uint64_t v23 = 1;
  }
  else
  {
    uint64_t v23 = 0;
  }

LABEL_16:
  return v23;
}

uint64_t bmstream_vtab_rowid(uint64_t a1, void *a2)
{
  *a2 = [*(id *)(a1 + 8) rowID];
  return 0;
}

uint64_t BMPBSiriExecutionEventReadFrom(uint64_t a1, uint64_t a2)
{
  long long v3 = (int *)MEMORY[0x1E4F940E8];
  id v4 = (int *)MEMORY[0x1E4F940E0];
  double v5 = (int *)MEMORY[0x1E4F940C8];
  if (*(void *)(a2 + (int)*MEMORY[0x1E4F940E8]) < *(void *)(a2 + (int)*MEMORY[0x1E4F940E0]))
  {
    id v7 = (int *)MEMORY[0x1E4F940B8];
    do
    {
      if (*(unsigned char *)(a2 + *v5)) {
        break;
      }
      char v8 = 0;
      unsigned int v9 = 0;
      unint64_t v10 = 0;
      while (1)
      {
        uint64_t v11 = *v3;
        uint64_t v12 = *(void *)(a2 + v11);
        unint64_t v13 = v12 + 1;
        if (v12 == -1 || v13 > *(void *)(a2 + *v4)) {
          break;
        }
        char v14 = *(unsigned char *)(*(void *)(a2 + *v7) + v12);
        *(void *)(a2 + v11) = v13;
        v10 |= (unint64_t)(v14 & 0x7F) << v8;
        if ((v14 & 0x80) == 0) {
          goto LABEL_12;
        }
        v8 += 7;
        BOOL v15 = v9++ >= 9;
        if (v15)
        {
          unint64_t v10 = 0;
          int v16 = *(unsigned __int8 *)(a2 + *v5);
          goto LABEL_14;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_12:
      int v16 = *(unsigned __int8 *)(a2 + *v5);
      if (*(unsigned char *)(a2 + *v5)) {
        unint64_t v10 = 0;
      }
LABEL_14:
      if (v16 || (v10 & 7) == 4) {
        break;
      }
      switch((v10 >> 3))
      {
        case 1u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 56;
          goto LABEL_34;
        case 2u:
          char v21 = 0;
          unsigned int v22 = 0;
          uint64_t v23 = 0;
          *(unsigned char *)(a1 + 68) |= 2u;
          break;
        case 3u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 48;
          goto LABEL_34;
        case 4u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 40;
          goto LABEL_34;
        case 5u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 24;
          goto LABEL_34;
        case 6u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 16;
          goto LABEL_34;
        case 7u:
          uint64_t v18 = PBReaderReadString();
          uint64_t v19 = 32;
LABEL_34:
          uint64_t v28 = *(void **)(a1 + v19);
          *(void *)(a1 + v19) = v18;

          continue;
        case 8u:
          *(unsigned char *)(a1 + 68) |= 1u;
          uint64_t v29 = *v3;
          unint64_t v30 = *(void *)(a2 + v29);
          if (v30 <= 0xFFFFFFFFFFFFFFF7 && v30 + 8 <= *(void *)(a2 + *v4))
          {
            uint64_t v31 = *(void *)(*(void *)(a2 + *v7) + v30);
            *(void *)(a2 + v29) = v30 + 8;
          }
          else
          {
            *(unsigned char *)(a2 + *v5) = 1;
            uint64_t v31 = 0;
          }
          *(void *)(a1 + _Block_object_dispose(&a9, 8) = v31;
          continue;
        default:
          uint64_t result = PBReaderSkipValueWithTag();
          if (!result) {
            return result;
          }
          continue;
      }
      while (1)
      {
        uint64_t v24 = *v3;
        uint64_t v25 = *(void *)(a2 + v24);
        unint64_t v26 = v25 + 1;
        if (v25 == -1 || v26 > *(void *)(a2 + *v4)) {
          break;
        }
        char v27 = *(unsigned char *)(*(void *)(a2 + *v7) + v25);
        *(void *)(a2 + v24) = v26;
        v23 |= (unint64_t)(v27 & 0x7F) << v21;
        if ((v27 & 0x80) == 0) {
          goto LABEL_41;
        }
        v21 += 7;
        BOOL v15 = v22++ >= 9;
        if (v15)
        {
          LODWORD(v23) = 0;
          goto LABEL_43;
        }
      }
      *(unsigned char *)(a2 + *v5) = 1;
LABEL_41:
      if (*(unsigned char *)(a2 + *v5)) {
        LODWORD(v23) = 0;
      }
LABEL_43:
      *(_DWORD *)(a1 + 64) = v23;
    }
    while (*(void *)(a2 + *v3) < *(void *)(a2 + *v4));
  }
  return *(unsigned char *)(a2 + *v5) == 0;
}